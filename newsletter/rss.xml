<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Future of Coding Weekly</title><link>http://newsletter.futureofcoding.org/</link><description>Future of Coding Weekly Newsletter</description><atom:link href="http://newsletter.futureofcoding.org/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2023 &lt;a href="mailto:mariano@marianoguerra.org"&gt;Mariano Guerra&lt;/a&gt; </copyright><lastBuildDate>Sun, 12 Mar 2023 23:25:45 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Future of Coding Weekly 2023/03 Week 2</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202303-week-2/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;💡 Data Particles 🔙 Future of Undo 🎹 Computer-Assisted Composition 🌌 Universal Programs&lt;/p&gt;
&lt;h2&gt;Two Minute Week&lt;/h2&gt;
&lt;p&gt;🌌🎥 &lt;a href="https://vimeo.com/805246256"&gt;Universal Programs&lt;/a&gt; via &lt;a href="https://twitter.com/CrowdHailer"&gt;Peter Saxton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W2/two-minute-week.html#2023-03-11T22:47:15.669Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vimeo Thumbnail" src="https://i.vimeocdn.com/video/1625888760-c6e1734615d5509f80d6b29b38f2b2304ed43dce036fcf982de9cda8e6d3692c-d_295x166"&gt;&lt;/p&gt;
&lt;p&gt;Re-implemented Universal or isomorphic programs.&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;🔙💬 &lt;a href="https://jaredforsyth.com/"&gt;Jared Forsyth&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W2/thinking-together.html#2023-03-06T18:54:33.587Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Do y'all know of any editors with undo/redo behavior that's more interesting/granular than just scrubbing through all of the edits you've done to a file in order?&lt;/p&gt;
&lt;p&gt;I often find my self wanting "undo the last change to &lt;em&gt;this function&lt;/em&gt;" 🤔&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;🎹 &lt;a href="https://openmusic-project.github.io/openmusic/"&gt;OpenMusic: Visual Programming | Computer-Assisted Composition&lt;/a&gt; via &lt;a href="https://khinsen.net/"&gt;Konrad Hinsen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W2/linking-together.html#2023-03-06T11:27:23.165Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just came across OpenMusic, a visual programming language based on Lisp, developed for musical composition but not limited to it&lt;/p&gt;
&lt;p&gt;💡🎥 &lt;a href="https://youtu.be/2yzP70KTeJo"&gt;DataParticles: Block-based and Language-oriented Authoring of Animated Unit Visualizations&lt;/a&gt; via &lt;a href="https://twitter.com/no_defects"&gt;Garth Goldwater&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W2/linking-together.html#2023-03-09T00:31:20.602Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/2yzP70KTeJo/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;a channel i follow on youtube (Creativity Labs) just released three absolutely banger prototype videos in the last hour &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/2yzP70KTeJo"&gt;first&lt;/a&gt; data visualization with a really neat linked code&amp;lt;-&amp;gt;text description interface&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/vItfhC-5fvs"&gt;second&lt;/a&gt; interactive programming visualizer/debugger that’s kind of like the next, more-interactive step for a lot of Bret Victor’s little diagrams&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/apqF8_7dgbY"&gt;third&lt;/a&gt; (ridiculously souped up logging that (in their example) hooks logs from the same place over time, associates them to elements on the page, enables filtering by call site, scope, and spatially on the page&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Are they members of this slack (no idea how i found the channel otherwise)?? If so, I’d love to get in touch!&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="https://youtu.be/vItfhC-5fvs"&gt;CrossCode: Multi-level Visualization of Program Execution&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="https://youtu.be/apqF8_7dgbY"&gt;Log-it: Supporting Programming with Interactive, Contextual, Structured, and Visual Logs&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;💬 &lt;a href="https://jaredforsyth.com/"&gt;Jared Forsyth&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W2/devlog-together.html#2023-03-12T05:55:32.285Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;today's progress, emoji support! it mostly consisted of  &lt;code&gt;text =&amp;gt; new Intl.Segmenter('en').segment(text).map(s =&amp;gt; s.segment)&lt;/code&gt;  in a bunch of places, so that offset calculations made sense. I also had to add a hidden  &lt;code&gt;&amp;lt;input/&amp;gt;&lt;/code&gt;  onto the page instead of just harvesting  &lt;code&gt;keypress&lt;/code&gt; , because emoji-pickers don't actually send valid keypresses, but they do trigger  &lt;code&gt;oninput&lt;/code&gt;  in a focused  &lt;code&gt;&amp;lt;input/&amp;gt;&lt;/code&gt;  🎉&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F04/F04THUYQFU3.mov"&gt;Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W2/devlog-together.html#2023-03-12T14:54:44.672Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Managed to release v1.5.0-alpha of Blawx this week, with better defeasibility features including defeated defeaters, and applicability checking. Only one major feature left to add to the language (that I am aware of): temporal reasoning.&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202303-week-2/</guid><pubDate>Sun, 12 Mar 2023 23:24:24 GMT</pubDate></item><item><title>Future of Coding Weekly 2023/03 Week 1</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202303-week-1/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;🤖 LLM Assistants for Complex Interfaces ⚖️ Rules as Code 🎥 List App, Structured Editor &amp;amp; Glueing ChatGPT Demos&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;📢 &lt;a href="https://conf.researchr.org/home/vlhcc-2023"&gt;VL/HCC 2023 (IEEE Symposium on Visual Languages and Human-Centric Computing)&lt;/a&gt; via &lt;strong&gt;Rebecca Krosnick&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W1/share-your-work.html#2023-02-27T16:56:56.132Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;May be of interest to Future of Coding folks as a way to get feedback or share your work.&lt;/p&gt;
&lt;p&gt;VL/HCC 2023 (IEEE Symposium on Visual Languages and Human-Centric Computing) is currently soliciting papers (abstracts due April 21, papers due April 28).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W1/share-your-work.html#2023-02-27T16:56:56.132Z"&gt;🧵 read more&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🤖 &lt;a href="https://nickarner.com/notes/llm-powered-assistants-for-complex-interfaces-february-26-2023/"&gt;LLM Powered Assistants for Complex Interfaces&lt;/a&gt; via &lt;a href="https://twitter.com/nickarner"&gt;Nick Arner&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W1/share-your-work.html#2023-02-28T17:21:41.228Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wrote something recently on the idea of using LLMs as part of in-the-loop software assistants&lt;/p&gt;
&lt;p&gt;⚖️ &lt;a href="https://github.com/Lexpedite/blawx"&gt;Blawx: A user-friendly web-based tool for Rules as Code&lt;/a&gt; via &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W1/share-your-work.html#2023-02-28T23:57:42.443Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's a little gif of the new scenario editor in the version 1.4 of Blawx I released today. It allows the user to make fully-, partially-, or un-ground statements that are true, false, or unknown , answers the query with natural language explanations that set out the assumptions being used for unknowns, and then recommends additional fact statements that would be relevant to finding additional conclusions that are not based on assumptions. It's aimed at encoding statutes and regulations in such a way as to allow those encodings to be made, or at least validated, by lawyers and other non-programmers. Feedback welcome. &lt;a href="https://github.com/Lexpedite/blawx"&gt;github.com/Lexpedite/blawx&lt;/a&gt;. The new release is up at &lt;a href="http://dev.blawx.com"&gt;dev.blawx.com&lt;/a&gt; now.&lt;/p&gt;
&lt;p&gt;&lt;img alt="hypothesize.gif" src="http://history.futureofcoding.org/history/msg_files/F04/F04RAVDPVFH.gif"&gt;&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="https://www.youtube.com/watch?v=V3RjNIAoO7g"&gt;NoCode ChatGPT API: Send interesting facts to slack on a schedule&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W1/share-your-work.html#2023-03-02T00:02:47.715Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/V3RjNIAoO7g/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I just integrated the newly announced ChatGPT API into GlooData, here's a video showing how to use it to schedule slack messages with interesting facts about home appliances.&lt;/p&gt;
&lt;p&gt;📱 &lt;a href="https://youtu.be/hRHvcDbNTpc"&gt;List App - Demo&lt;/a&gt; via &lt;strong&gt;Josh Justice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W1/share-your-work.html#2023-03-03T21:59:39.064Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/hRHvcDbNTpc/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Hey folks, I have been hanging around Future-of-Code-like communities for a few years, trying to figure out what I want my focus to be. I’ve finally figured it out, and I made a demo video to share with y’all about what I’m working on.&lt;/p&gt;
&lt;p&gt;It’s a web and mobile app for tracking your personal information, including allowing end users to configure buttons and actions to customize their workflow. It’s not groundbreaking research, but it does enable end users to create interactive software anywhere they are. I’ve been able to replace at least four apps I previously used with “boards” I’ve configured in this app. I plan to open-source it and set up a free open-registration server soon.&lt;/p&gt;
&lt;p&gt;Here’s the demo if anyone would like to take a look!&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;💬 &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W1/thinking-together.html#2023-02-28T06:11:22.322Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What do you do to motivate yourself to update documentation? I have so much of it that it is now a significant undertaking to keep it up to date with the tool, and I am losing interest. I'm trying to figure out whether I should just tag most of it as out-of-date and come back to it later when there are enough users to justify it...&lt;/p&gt;
&lt;p&gt;💬 &lt;strong&gt;Niall McCormack&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W1/thinking-together.html#2023-03-01T21:03:09.530Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What's the general consensus on node based scripting?&lt;/p&gt;
&lt;p&gt;I'm intrigued by Unreal's Blueprint node based scripting tools - they seem easy to use, but if you want to do anything complex then (for me) it becomes very messy very quickly. However with the general move in the past 10 years or so to more functional programming and serverless etc then perhaps it makes sense. Small components that can be wired together visually feels  &lt;em&gt;easy&lt;/em&gt; , or  &lt;em&gt;right&lt;/em&gt; ?&lt;/p&gt;
&lt;p&gt;Darklang is another example with extrapolates the complexities of the underlying system allowing you to just write some pseudo node based (at least when I last looked at it) components that are easily wired up together.&lt;/p&gt;
&lt;p&gt;I'm an iOS engineer by trade, and it feels that something like Darklang / node based coding could end up matching nicely with SwiftUI's declarative syntax for UI.&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="https://youtu.be/bFeJZRdhKcI"&gt;"Ceptre: A Language for Modeling Generative Interactive Systems" by Chris Martens&lt;/a&gt; via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W1/thinking-together.html#2023-03-03T19:50:18.058Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/bFeJZRdhKcI/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Multi-single-tasking:&lt;/p&gt;
&lt;p&gt;Brainstorming, half-baked...&lt;/p&gt;
&lt;p&gt;I would have ignored Ceptre in the past.  It claims to be a language for writing games.  The very idea makes me yawn. But, one of the guys at the Torlisp monthly meetup is deeply into robotics and Scheme and another guy, in the film industry, uses Racket for hobbying in game programming.  My own interest is in concurrency and simplicity and compiler-writing.  These fields are all related.  Watching the 2015 Strangeloop presentation about Ceptre piqued my interest.  Ceptre is logic programming, but with a twist - it has a built-in notion of explicit ordering.  I thought that I could knock off a better game language using my diagrams of state machines. I continued to learn about Ceptre.  Aside: Ohm-JS has built-in explicit ordering and is “not” context-free.  I have to wonder if Ceptre is to generalized formalism as PEG (Ohm-JS) is to context-free grammar formalisms.&lt;/p&gt;
&lt;p&gt;Dunno yet.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W1/thinking-together.html#2023-03-03T19:50:18.058Z"&gt;🧵 read more&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;🐦 &lt;a href="https://twitter.com/garybernhardt/status/1631866199515738113"&gt;Tweet from @garybernhardt&lt;/a&gt; via &lt;a href="https://github.com/ChrisKnott"&gt;Chris Knott&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W1/linking-together.html#2023-03-04T10:21:27.583Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🐦 &lt;a href="https://twitter.com/@garybernhardt"&gt;Gary Bernhardt&lt;/a&gt;: 1960s: "COBOL will let non-programmers make the software!"&lt;/p&gt;
&lt;p&gt;1980s: "4GLs will let non-programmers make the software!"&lt;/p&gt;
&lt;p&gt;2000s: "UML will let non-programmers make the software!"&lt;/p&gt;
&lt;p&gt;2020s: "AI will let non-programmers make the software!"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;💬 &lt;a href="http://ivanish.ca/"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W1/devlog-together.html#2023-03-01T00:16:02.002Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thinking about building some visual programming tools after taking a break for a while. One fun idea that popped up: hybrid text + node-wire environment where you can  ~&lt;em&gt;&lt;em&gt;wire to the text&lt;/em&gt;&lt;/em&gt;~ . Like, a word in the text can act as a node. Probably been done somewhere, but I haven't seen it, so I'm kinda jamming on the thought. Like, what if Natto but you exploded the frames, brought some of Bret's Tangle in there, little bit of that style of annotating an image+paragraph by coloring a word the same as a corresponding thing in the image. Constants in the text live-update, etc etc.&lt;/p&gt;
&lt;p&gt;💬 &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W1/devlog-together.html#2023-03-01T01:22:33.693Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;FWIW - here’s how I think about it...  You are programming a MACHINE. Every bit of syntax has to DO something (have a meaning).  [The meaning of comments is “to be ignored by the machine”.  A lot of other syntactic baubles have that same meaning - e.g. stick people and clouds].  What does it mean to connect a wire to a word?  What happens if you connect that same wire to a different word?&lt;/p&gt;
&lt;p&gt;💬 &lt;a href="https://jaredforsyth.com/"&gt;Jared Forsyth&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W1/devlog-together.html#2023-03-03T05:44:35.380Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi friends! This is my first time posting in the devlog, but here's today's progress on my structured editor -- autocomplete for object attribute access!&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F04/F04S6P8EJAF.mov"&gt;Attributes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💬 &lt;a href="https://jaredforsyth.com/"&gt;Jared Forsyth&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/03/W1/devlog-together.html#2023-03-04T04:34:59.642Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;trying out "file attachment" as a first-class AST node type&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F04/F04SCL67UHH.mp4"&gt;Attach&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202303-week-1/</guid><pubDate>Sun, 05 Mar 2023 22:21:05 GMT</pubDate></item><item><title>Future of Coding Weekly 2023/02 Week 4</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202302-week-4/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;💡 Is Software Spatial? 🤖 UX of AI Programming Assistants 🛸 Self-conscious
Reflexive Interpreters 💻 Live Game &amp;amp; Functional Programming&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;💬 &lt;a href="https://jimmyhmiller.github.io/"&gt;Jimmy Miller&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W4/devlog-together.html#2023-02-21T18:37:14.972Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Been making good steady progress on my new editor. I now have my wasm extensions
automatically interrupt. So I can have a long running computation (or even an
infinite loop) happening in an extension, on the same thread and not miss any
frame times. Having that really sets the ground work for the live programming
model I want for these "extensions".&lt;/p&gt;
&lt;p&gt;After some clean up I'm starting to do some dog fooding for another project I'm
working on, generating an arm64 assembler from the xml specification of
instructions. The plan is to write the coding utilizing my editor as the
visualization environment to get fast feedback on if I have the instructions
correct. Still a long way to go, but the fundamentals are taking shape.&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;💬 &lt;strong&gt;Eli Mellen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W4/share-your-work.html#2023-02-24T22:52:58.520Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How’d folks feel about threading the URLs to their personal sites? I’d love to
follow more folks over RSS.&lt;/p&gt;
&lt;h2&gt;Reading Together&lt;/h2&gt;
&lt;p&gt;💡📄
&lt;a href="http://history.futureofcoding.org/history/msg_files/F04/F04R6U17Z5K.pdf"&gt;Software is an abstract artifact&lt;/a&gt;
via &lt;a href="https://jimmyhmiller.github.io/"&gt;Jimmy Miller&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W4/reading-together.html#2023-02-25T18:21:12.155Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Perhaps you too are wondering if software is inherently spatial. A great paper
on this topic is “Software is an Abstract Artifact” by Nurbay Irmak. I might not
agree with everything written, but it is a very readable paper and a great
introduction to the topic.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Software is a ubiquitous artifact, yet not much has been done to understand
its ontological nature. There are a few accounts offered so far about the
nature of software. I argue that none of those accounts give a plausible
picture of the nature of software. I draw attention to the striking
similarities between software and musical works. These similarities motivate
to look more closely on the discussions regarding the nature of the musical
works. With the lessons drawn from the ontology of musical works I offer a
novel account of the nature of software. In this account, software is an
abstract artifact. I elaborate the conditions under which software comes into
existence; how it persists; how and on which entities its existence depends.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;💬 &lt;strong&gt;Ibro&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W4/thinking-together.html#2023-02-20T12:41:16.997Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’m curious “where” people think of visual in visual programming being. For
context, I spend a lot of time in tools like Houdini, Solidworks, Cavalry, and
After Effects. Some of them have more access to computation than others, but the
biggest difference between those and Processing or threejs is a large “standard
library” of functions.&lt;/p&gt;
&lt;p&gt;On the other hand, building a website with live feedback or scripting in a REPL
seem like a very different experience from just writing the same code in
notepad. I wonder if visual programming is all just “debug views” rather than
the specific presence of a GUI. And if so, what does that mean for generalized
visual languages or environments?&lt;/p&gt;
&lt;p&gt;💬 &lt;a href="https://twitter.com/o_kryvonos"&gt;Oleksandr Kryvonos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W4/thinking-together.html#2023-02-21T10:20:09.039Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am not sure but this might be a &lt;em&gt;thing&lt;/em&gt; - in order to reduce scrolling through
files I try to keep each function in respective separate file (so I have over
hundred of files so far) and I wrote a simple code that copies the content of
the function into the body of the html page and adds some template text like
&lt;em&gt;&amp;lt;script&amp;gt; tags etc.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I try to find the most minimal set of tools in the motto of &lt;em&gt;bicycle for mind&lt;/em&gt; -
in other words - you don’t need a complex solution like an aircraft carrier but
rather a bicycle.&lt;/p&gt;
&lt;p&gt;💬 &lt;strong&gt;Eli Mellen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W4/thinking-together.html#2023-02-22T14:25:44.284Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Does anyone have future of code flavored papers by folks who aren’t white dudes?&lt;/p&gt;
&lt;p&gt;I’ve been pulling together a reading list for an engineering reading group at
work, and would like to make sure it’s at least a 50/50 split.&lt;/p&gt;
&lt;p&gt;📝
&lt;a href="https://github.com/miho/VMF-Text"&gt;VMF-Text: Powerful Grammar-based Language Modeling Framework&lt;/a&gt;
via &lt;strong&gt;Jarno Montonen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W4/thinking-together.html#2023-02-22T14:43:29.674Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm in need of two solutions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generating a language model out of ANTLR grammar. Preferably in C#.&lt;/li&gt;
&lt;li&gt;Printing an AST to text according to an ANTLR grammar.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I found this &lt;a href="https://github.com/miho/VMF-Text"&gt;github.com/miho/VMF-Text&lt;/a&gt;, but
anything else?&lt;/p&gt;
&lt;p&gt;💬 &lt;strong&gt;Jarno Montonen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W4/thinking-together.html#2023-02-23T12:32:40.177Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another thing I'd be interested is solutions for bidirectional text
transformations (for source code). Ideally a system in which you could define
transformations once, and get both AtoB and BtoA transformers&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;📝
&lt;a href="https://arxiv.org/abs/2302.05331"&gt;C-rusted: The Advantages of Rust, in C, without the Disadvantages&lt;/a&gt;
via &lt;a href="https://github.com/rcshubhadeep"&gt;Shubhadeep Roychowdhury&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W4/linking-together.html#2023-02-20T08:08:50.090Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🤖📝
&lt;a href="https://austinhenley.com/blog/uxaicoding.html"&gt;Papers on the UX of AI programming assistants&lt;/a&gt;
via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W4/linking-together.html#2023-02-20T20:32:52.714Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://austinhenley.com/blog/uxaicoding.html"&gt;Papers on the UX of AI programming assistants&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a list of research papers investigating the user experience of
AI-powered programming assistants (e.g., Copilot)&lt;/p&gt;
&lt;p&gt;📝
&lt;a href="https://vrl-studio.mihosoft.eu/"&gt;VRL Studio: Innovative, intuitive and powerful Visual IDE for rapid prototyping, learning, teaching and experimentation&lt;/a&gt;
via &lt;strong&gt;Jarno Montonen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W4/linking-together.html#2023-02-22T14:27:23.939Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another cool and dead project from the past I just run into&lt;/p&gt;
&lt;p&gt;🛸📄
&lt;a href="https://dl.acm.org/doi/pdf/10.1145/3110252"&gt;A Unified Approach to Solving Seven Programming Problems (Functional Pearl)&lt;/a&gt;
via &lt;a href="https://github.com/akkartik/mu"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W4/linking-together.html#2023-02-23T06:15:15.394Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This minikanren paper is excellent: "A Unified Approach to Solving Seven
Programming Problems (Functional Pearl)"&lt;/p&gt;
&lt;p&gt;Found via William Byrd's recent talk about ongoing work: 🛸
&lt;a href="https://fosdem.org/2023/schedule/event/reflexiveinterpreters"&gt;FOSDEM 2023 - Self-conscious Reflexive Interpreters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;💻🐦
&lt;a href="https://twitter.com/allan_blomquist/status/1628127169896452097?s=20"&gt;Tweet from @allan_blomquist&lt;/a&gt;
via &lt;a href="https://mobile.twitter.com/chrisshank23"&gt;Christopher Shank&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W4/linking-together.html#2023-02-24T02:02:01.684Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A cool demo for live/immediate programming with a game engine and some cool
debugging explorations!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🐦 &lt;a href="https://twitter.com/@allan_blomquist"&gt;Allan Blomquist&lt;/a&gt;: Here's a look at
some of our internal programming tools at Tomorrow Corporation!&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="https://youtu.be/72y2EC5fkcE"&gt;Tomorrow Corporation Tech Demo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;💻📝
&lt;a href="https://hazel.org/"&gt;Hazel, a live functional programming environment featuring typed holes.&lt;/a&gt;
via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W4/linking-together.html#2023-02-24T07:19:01.157Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎙
&lt;a href="https://soundcloud.com/defn-771544745/87-jack-rusher"&gt;#87 Jack Rusher by defn&lt;/a&gt;
via &lt;a href="https://twitter.com/jackrusher"&gt;Jack Rusher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W4/linking-together.html#2023-02-24T13:35:45.667Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In case anyone likes this sort of thing, I just did an episode of the defn
(mostly clojure, but generally programming too) podcast&lt;/p&gt;
&lt;h2&gt;Present Company&lt;/h2&gt;
&lt;p&gt;📝
&lt;a href="https://interconnected.org/home/2022/01/21/social_gradient"&gt;Designing multiplayer apps with patterns from architecture&lt;/a&gt;
via &lt;strong&gt;Matt Webb&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W4/present-company.html#2023-02-24T13:25:34.337Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi folks — any fans of A Pattern Language here? Or (like me) any wannabe fans? I
dip into it, and it has been invaluable in designing multiplayer apps with
nuanced social interaction.
&lt;a href="https://interconnected.org/home/2022/01/21/social_gradient"&gt;Here’s one of my blog posts.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However! It’s long and I’ve never read the whole thing… So a few of us on Masto
decided to start a reading group. One pattern a week, we’ll finish neatly at the
end of the book’s 50th anniversary year (2027)&lt;/p&gt;
&lt;p&gt;We’re meeting on discord at 5pm uk time on mondays (so noon east coast us, 9am
west coast). Starting this coming Monday. Join us here:
&lt;a href="https://discord.gg/vCAbn4jz"&gt;Join the Talking Patterns Discord Server!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Apologies if this is out of place but I figured there was a good chance it would
be of interest to at least some people here!&lt;/p&gt;
&lt;p&gt;📇 &lt;a href="https://people.futureofcoding.org/"&gt;People of Future of Coding&lt;/a&gt; via
&lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W4/present-company.html#2023-02-25T10:26:49.354Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An index of users that contributed to the newsletter and provided a link to use
when mentioned&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202302-week-4/</guid><pubDate>Sun, 26 Feb 2023 21:42:56 GMT</pubDate></item><item><title>Future of Coding Weekly 2023/02 Week 3</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202302-week-3/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;🎥 Datalog Notebook 💡 Self and Self: Whys and Wherefores ✍️ Towards
Text-Editor-ish UX 🥼 Digital Scientific Notation&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;🎥 &lt;a href="https://vimeo.com/798469951"&gt;13/02/2023, Datalog notebook&lt;/a&gt; via
&lt;a href="https://twitter.com/CrowdHailer"&gt;Peter Saxton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W3/share-your-work.html#2023-02-13T18:19:03.869Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vimeo Thumbnail" src="https://i.vimeocdn.com/video/1609839981-bc3a048f67b460507f32ccaa4a320ec5ad8566d27634885a531fe01468ed288c-d_295x166"&gt;&lt;/p&gt;
&lt;p&gt;Made a code notebook for datalog queries.&lt;/p&gt;
&lt;p&gt;As there is no plain text (or parser) does this count as another structural
editor&lt;/p&gt;
&lt;p&gt;📗 &lt;a href="https://wasmfromthegroundup.com/"&gt;wasmfromthegroundup.com&lt;/a&gt; via
&lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W3/share-your-work.html#2023-02-14T14:00:23.701Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Prototyping an interactive WebAssembly spec interpreter for
&lt;a href="https://wasmfromthegroundup.com/"&gt;wasmfromthegroundup.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="wasmvm-001.gif" src="http://history.futureofcoding.org/history/msg_files/F04/F04PBHSPBBQ.gif"&gt;&lt;/p&gt;
&lt;p&gt;🥼🎥 &lt;a href="https://diode.zone/w/1RUVjM5xj54gZjHXobSNUe"&gt;Leibniz in four minutes&lt;/a&gt; via
&lt;a href="https://khinsen.net/"&gt;Konrad Hinsen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W3/share-your-work.html#2023-02-15T16:53:04.520Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A four-minute demo of Leibniz, my Digital Scientific Notation&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://eli.li/2023/02/18/moon-maker"&gt;Oatmeal - Moon maker&lt;/a&gt; via &lt;strong&gt;Eli
Mellen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W3/share-your-work.html#2023-02-18T17:28:42.147Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Inspired by re-reading Naur’s “Programming as Theory Building” I decided to make
myself a text editor to solve all my problems…
&lt;a href="https://eli.li/2023/02/18/moon-maker"&gt;tl;dr I wrote a blog post and some bash instead&lt;/a&gt;
😂&lt;/p&gt;
&lt;p&gt;🔌
&lt;a href="https://www.flyde.dev/playground/"&gt;Hello World | Playground | Visual Programming for the Modern Web&lt;/a&gt;
via &lt;strong&gt;Gabriel Grinberg&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W3/share-your-work.html#2023-02-19T21:40:20.836Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hello everyone! 👋 I am thrilled to share the progress made with Flyde with this
community of like-minded individuals.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.flyde.dev"&gt;Flyde&lt;/a&gt; is an open-source, flow-based, and visual
programming toolkit that prioritizes exceptional UX/DX and seamless integration
with existing code. The toolkit features a VSCode extension, visual debugging,
full TypeScript support, a rich standard library, and is designed to work in
tandem with existing codebases. In essence, Flyde is similar to NodeRED, but
geared towards web development.&lt;/p&gt;
&lt;p&gt;This is the first time I am sharing Flyde with a broader community, and I
believe feedback from such a talented, inquisitive, and passionate group of
people would be invaluable to the project.&lt;/p&gt;
&lt;p&gt;Check out the interactive playground here -
&lt;a href="https://www.flyde.dev/playground/"&gt;flyde.dev/playground&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;I look forward to hearing your thoughts and feedback! Additionally, a star on
GitHub would be greatly appreciated! 😊&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;💬 &lt;strong&gt;Kalvin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W3/thinking-together.html#2023-02-16T01:04:16.132Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Does anybody have any examples of version controlled projects that use visual
programming?&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;🎥
&lt;a href="https://www.ted.com/talks/donald_hoffman_do_we_see_reality_as_it_is"&gt;Donald Hoffman: “Evolution is like a videogame”&lt;/a&gt;
via &lt;a href="https://github.com/akkartik/mu"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W3/linking-together.html#2023-02-13T05:52:55.200Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(Quote is from
&lt;a href="https://www.youtube.com/watch?v=dd6CQCbk2ro"&gt;The Case Against Reality | Prof. Donald Hoffman on Conscious Agent Theory&lt;/a&gt;,
which I'm not sure if I'll finish.)&lt;/p&gt;
&lt;p&gt;💡🎥
&lt;a href="https://www.youtube.com/watch?v=3ka4KY7TMTU"&gt;Self and Self: Whys and Wherefores&lt;/a&gt;
via &lt;a href="https://twitter.com/jackrusher"&gt;Jack Rusher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W3/linking-together.html#2023-02-14T10:16:06.117Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/3ka4KY7TMTU/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;There's loads of good stuff in this one.&lt;/p&gt;
&lt;p&gt;✍️ &lt;a href="https://elliot.website/editor/update3.html"&gt;Towards "Text-Editor-ish" UX&lt;/a&gt; via
&lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W3/linking-together.html#2023-02-15T22:29:38.945Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I like this kind of 'hybrid' editor direction!&lt;/p&gt;
&lt;p&gt;📕
&lt;a href="https://news.ycombinator.com/item?id=34839275"&gt;The Reasoned Schemer reading / learning&lt;/a&gt;
via &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W3/linking-together.html#2023-02-17T19:51:33.362Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Reasoned Schemer reading / learning&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;🌳
&lt;a href="https://git.sr.ht/~akkartik/mastodon-unfurl.love"&gt;Visualize a Mastodon thread tree&lt;/a&gt;
via &lt;a href="https://github.com/akkartik/mu"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W3/devlog-together.html#2023-02-19T09:15:53.605Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Today I put together a little visualizer for Mastodon threads. The graph layout
is nothing special, but:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it has structured keyboard shortcuts (up for parent, down for child,
  left/right for siblings) which might be more useful for understanding a
  complex thread&lt;/li&gt;
&lt;li&gt;as always you can live-edit it so it's hopefully easy to improve&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One other little integration: opening links in browsers opens up all sorts of
cross-platform cans of worms, so I ended up just copying a URL to the clipboard
any time you click on a toot.&lt;/p&gt;
&lt;p&gt;🎥
&lt;a href="http://history.futureofcoding.org/history/msg_files/F04/F04QNMABSGZ.webm"&gt;mastodon-unfurl&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202302-week-3/</guid><pubDate>Sun, 19 Feb 2023 22:07:06 GMT</pubDate></item><item><title>Future of Coding Weekly 2023/02 Week 2</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202302-week-2/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;🎙️ FoC # 62 Fred Brooks • No Silver Bullet 🌳 Outable: Outline + Table ☁️ Define
Define 🚰 Safe Stateful Language for Streams&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;📚 &lt;a href="https://wasmfromthegroundup.com/"&gt;WebAssembly from the Ground Up&lt;/a&gt; via
&lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W2/share-your-work.html#2023-02-07T16:05:21.004Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With &lt;a href="https://twitter.com/dubroy"&gt;Patrick Dubroy&lt;/a&gt; we have been working for some
months on a digital-first book "for JavaScript programmers who want to learn the
nuts and bolts of WebAssembly. You'll go from hand crafting bytecodes to
building a real compiler for a simple programming language."&lt;/p&gt;
&lt;p&gt;🐦 &lt;a href="https://twitter.com/dubroy/status/1622987684946796544"&gt;Announcement Tweet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On top of writing a book we are exploring what's possible if we create content
ignoring the constraints of "printing dead words".&lt;/p&gt;
&lt;p&gt;Follow &lt;a href="https://twitter.com/WasmGroundUp"&gt;WasmGroundUp&lt;/a&gt; for updates, or sign up
at &lt;a href="https://wasmfromthegroundup.com"&gt;wasmfromthegroundup.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;🚰
&lt;a href="https://websqrl.vercel.app/twitter"&gt;SQRL: A Safe, Stateful Language for Event Streams&lt;/a&gt;
via &lt;strong&gt;Josh Yudaken&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W2/share-your-work.html#2023-02-07T17:07:22.274Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hey all, finally released a pretty cool (well I think so) demo of the rules
language DSL we built for fighting spam/abuse/fraud/all-the-bad-stuff at Smyte
(acquired by Twitter). It's heavily SQL-based but includes a lot of features for
working with very large teams, deploying new rules in seconds, and tracing which
rules caused an action to occur.&lt;/p&gt;
&lt;p&gt;Demo: &lt;a href="https://websqrl.vercel.app/twitter"&gt;websqrl.vercel.app/twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docs: &lt;a href="https://sqrl-lang.github.io/sqrl/"&gt;sqrl-lang.github.io/sqrl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Motivation:
&lt;a href="https://sqrl-lang.github.io/sqrl/motivation.html"&gt;sqrl-lang.github.io/sqrl/motivation.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Would welcome any comments/questions. Just glad to finally get this out the door
🥳&lt;/p&gt;
&lt;p&gt;🎥🌳 &lt;a href="https://youtu.be/GHmiffK-eoA"&gt;GlooData Outables: Outlines + Data Tables&lt;/a&gt;
via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W2/share-your-work.html#2023-02-09T14:42:48.825Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/GHmiffK-eoA/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Outables: Outlines + Data Tables&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Row &amp;amp; column pagination&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Customizable number of rows and columns per page&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pin &amp;amp; Hide columns&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expand a row to see all fields&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + Click to jump 10 pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ctrl + Alt + Click to jump to first/last page&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🎥 &lt;a href="https://youtu.be/ZMklf0vUl18"&gt;☁️ Define Define&lt;/a&gt; via
&lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W2/share-your-work.html#2023-02-09T22:03:33.864Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/ZMklf0vUl18/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;hello everyone please enjoy my new video that I've been working on for a while
now. it's about a few different topics that might be relevant to you such as
programming, creative coding, life, art, intelligence, definitions and dead fish&lt;/p&gt;
&lt;p&gt;💬 &lt;strong&gt;Jason Chan&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W2/share-your-work.html#2023-02-10T23:04:46.756Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hey everyone! Really excited about this new feature we shipped today at Subset,
which allows you to jump between your different files kind of like Notion. I’ve
noticed that I have a ton of little trackers and calculators that I eventually
forget about, but every time I come across it again, it reminds me of a task I
need to do. Ultimately, it makes individual files and spreadsheets less
ephemeral. Here’s what it looks like. Next up we probably need some grouping or
favoriting system. Let me know if you have any thoughts 🙂&lt;/p&gt;
&lt;p&gt;🎥
&lt;a href="http://history.futureofcoding.org/history/msg_files/F04/F04P263QNSZ.mp4"&gt;Subset Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎙️
&lt;a href="https://futureofcoding.org/episodes/062"&gt;Future of Coding • Episode 62 Fred Brooks • No Silver Bullet&lt;/a&gt;
via &lt;a href="https://twitter.com/spiralganglion"&gt;Ivan Reese&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W2/share-your-work.html#2023-02-11T21:27:59.839Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jimmy and I have each read this paper a handful of times, and each time our
impressions have flip-flopped between “hate it so much” and “damn that’s good”.
There really are two sides to this one. Two reads, both fair, both worth
discussing: one of them within “the frame”, and one of them outside “the frame”.
So given that larger-than-normal surface for discursive traversal, it’s no
surprise that this episode is, just, like, intimidatingly long. This one is so,
so long, friends. See these withered muscles and pale skin? That’s how much time
I spent in Ableton Live this month. I just want to see my family.&lt;/p&gt;
&lt;p&gt;No matter how you feel about Brooks, our thorough deconstruction down to the
nuts and bolts of this seminal classic will leave you holding a ziplock bag full
of cool air and wondering to yourself, “Wait, this is philosophy? And this is
the future we were promised? Well, I guess I’d better go program a computer now
before it’s too late and I never exist.”&lt;/p&gt;
&lt;p&gt;For the next episode, we’re reading
&lt;a href="https://moss.cs.iit.edu/cs100/papers/out-of-the-tar-pit.pdf"&gt;a fish wearing a bathrobe&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sorry, it’s late and I’m sick, and I have to write something, you know?&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;💬 &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W2/devlog-together.html#2023-02-06T21:31:04.786Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Before and after. Does the paragraph form seem "better"? Took a surprising
amount of work, because I had to abandon the NLG being done by the reasoner and
write my own version that knows how to deal with nested terms. I'm thinking the
new one is probably better for validation, worse for debugging, but I'm not
sure.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F04/F04NATAPGJW.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F04/F04N7V76WUD.png"&gt;&lt;/p&gt;
&lt;p&gt;🖼️
&lt;a href="https://uprun.github.io/canvas-typewriter/canvas-documents.html"&gt;Canvas Experiment&lt;/a&gt;
via &lt;a href="https://twitter.com/o_kryvonos"&gt;Oleksandr Kryvonos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W2/devlog-together.html#2023-02-07T18:51:50.389Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;hi everyone, I have created another canvas experiment and now I am not sure if
this is the way to go for me … maybe next time I will start with pen&amp;amp;paper
prototype first&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;💭 by &lt;a href="https://twitter.com/jimmeyer"&gt;Jim Meyer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W2/thinking-together.html#2023-02-09T11:34:34.033Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Code is a weird medium. It can act directly upon the world at scale. The only
other "things" that can do that are the fundamental forces of the universe.&lt;/p&gt;
&lt;p&gt;Code is essentially a kind of Jinn/Genie: Agency in a bottle. Jinn also
translates to
&lt;a href="https://en.wikipedia.org/wiki/Jinn#:~:text=beings%20that%20are%20concealed%20from%20the%20senses"&gt;"beings that are concealed from the senses"&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Invisible beings that control our world and battle for our attention. Sounds
about right 😁&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202302-week-2/</guid><pubDate>Sun, 12 Feb 2023 21:01:40 GMT</pubDate></item><item><title>Future of Coding Weekly 2023/02 Week 1</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202302-week-1/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;💡 Prompting Is Programming 🤖 Open Assistant 🐸 London Creative Coding 🌯 Type Inference &amp;amp; Effect Handlers&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;🎥🌯 &lt;a href="https://vimeo.com/794219638"&gt;30/01/2023, Effect Handlers&lt;/a&gt; via &lt;a href="https://twitter.com/CrowdHailer"&gt;Peter Saxton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W1/share-your-work.html#2023-01-30T20:11:56.195Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vimeo Thumbnail" src="https://i.vimeocdn.com/video/1599338787-c2856cb7a02d3d82fec9caf234f9b3dda832ff93849d29b09ca293d24a252b66-d_295x166"&gt;&lt;/p&gt;
&lt;p&gt;I've implemented Effect handlers in my language&lt;/p&gt;
&lt;p&gt;This is now the whole feature set I wanted to version 2 of my language. Now all that's left is to actually use it&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="https://youtu.be/BhbF7RrVjlw"&gt;Nodysseus sync&lt;/a&gt; via &lt;strong&gt;Ulysses Popple&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W1/share-your-work.html#2023-02-01T08:22:42.485Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/BhbF7RrVjlw/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Heya, small demo showing sync between nodysseus instances. While this is on a desktop, it also works between two different devices so long as they are online at the same time&lt;/p&gt;
&lt;p&gt;🎥🐸 &lt;a href="https://www.youtube.com/live/L2U_Sd1qMJ4?feature=share&amp;amp;t=2579"&gt;London Creative Coding - Feb 2023 🎉🎉🎉&lt;/a&gt; via &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W1/share-your-work.html#2023-02-03T07:32:20.909Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hi everyone I did a talk at the Peckham Digital festival yesterday! It's about spatial programming! I come in at 42:59   :) &lt;/p&gt;
&lt;p&gt;📝🌯 &lt;a href="https://jaredforsyth.com/posts/type-inference-that-sticks/"&gt;Type inference that sticks | Jared Forsyth.com&lt;/a&gt; via &lt;strong&gt;Jared Forsyth&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W1/share-your-work.html#2023-02-05T15:34:31.615Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've now published my post about type inference + projectional editing 🙂 thanks for the feedback (&lt;a href="https://news.ycombinator.com/item?id=34658021"&gt;HN&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://gist.github.com/jaredly/13abec33c7576c4636ca87039a999cf2"&gt;"Type inference that sticks" (Draft)&lt;/a&gt; via &lt;strong&gt;Jared Forsyth&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W1/share-your-work.html#2023-01-31T04:53:41.935Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;💬 &lt;a href="https://dekorte.com/"&gt;Steve Dekorte&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W1/thinking-together.html#2023-02-01T20:38:55.164Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Should a good tool/framework/language not only "make easy things easy, and hard things possible", but also (generally) make patterns effortless, and anti-patterns painful?&lt;/p&gt;
&lt;p&gt;💬 &lt;a href="https://www.devhelpr.com/"&gt;Maikel van de Lisdonk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W1/present-company.html#2023-01-30T18:15:05.951Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Has anyone read "compilers principles techniques and tools" and/or "modern compiler design"? Can you recommend one them or another book about the subject? I am getting some experience building compilers currently and the last year or so, but I am still rather new to it and looking for some good reference to help me grow&lt;/p&gt;
&lt;p&gt;🐦 &lt;a href="https://twitter.com/dubroy/status/1621533688159768577"&gt;Tweet from @dubroy&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W1/thinking-together.html#2023-02-03T15:47:42.538Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🐦 &lt;a href="https://twitter.com/@dubroy"&gt;Patrick Dubroy 👉 @dubroy@hachyderm.io&lt;/a&gt;: What are some great ways to present code in a book/docs? Especially when the code is growing, being modified, etc.?&lt;/p&gt;
&lt;p&gt;I like what &lt;a href="https://twitter.com/munificentbob"&gt;@munificentbob&lt;/a&gt; does in Crafting Interpreters…what are some other good examples?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;💬 &lt;a href="https://twitter.com/RoundTableLaw"&gt;Jason Morris&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W1/devlog-together.html#2023-02-03T18:11:32.590Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spending most of this week taking tree-structured explanations, and generating something approximating a series of paragraphs, then annotating them with cross references like a graph for navigation purposes. The result is persuasive for my target audience. An explanation that they can read and understand and navigated easily is a big deal for demonstration purposes. But I am hating it, because it is technologically trivial. Any tips for getting through the slog of actually doing the thing that is time consuming, valuable, but uninspiring?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W1/devlog-together.html#2023-02-03T18:14:03.119Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, if anyone has any examples of an interface that uses an auto-fill to let you select a prototype statement, then let's you fill in the blanks in that prototype, I am looking for UI inspiration.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W1/of-logic-programming.html#2023-02-01T19:23:06.178Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Working on a paper for the ICLP this week on Blawx as a visual interface for logic programming. Any tips for getting accepted at ICLP would be appreciated. 🙂&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;💡 &lt;a href="https://ar5iv.labs.arxiv.org/html/2212.06094"&gt;Prompting Is Programming: A Query Language For Large Language Models&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W1/linking-together.html#2023-01-30T11:02:46.637Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ar5iv.labs.arxiv.org/html/2212.06094"&gt;Prompting Is Programming: A Query Language For Large Language Models&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;we present the novel idea of Language Model Programming (LMP). LMP generalizes language model prompting from pure text prompts to an intuitive combination of text prompting and scripting. Additionally, LMP allows constraints to be specified over the language model output. This enables easy adaption to many tasks, while abstracting language model internals and providing high-level semantics.&lt;/p&gt;
&lt;p&gt;To enable LMP, we implement LMQL (short for Language Model Query Language), which leverages the constraints and control flow from an LMP prompt to generate an efficient inference procedure that minimizes the number of expensive calls to the underlying language model.&lt;/p&gt;
&lt;p&gt;We show that LMQL can capture a wide range of state-of-the-art prompting methods in an intuitive way, especially facilitating interactive flows that are challenging to implement with existing high-level APIs. Our evaluation shows that we retain or increase the accuracy on several downstream tasks, while also significantly reducing the required amount of computation or cost in the case of pay-to-use APIs (13-85% cost savings).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://arxiv.org/pdf/2212.06094.pdf"&gt;PDF Version&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://idlewords.com/talks/ancient_web.htm"&gt;Legends of the Ancient Web&lt;/a&gt; via &lt;a href="https://github.com/akkartik/mu"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W1/linking-together.html#2023-02-04T20:16:59.780Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Maciej Cegłowski gives great talks and also puts up excellent transcripts of them. For example: &lt;a href="https://idlewords.com/talks/ancient_web.htm"&gt;Legends of the Ancient Web&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But just go read anything with pictures on his talks page.&lt;/p&gt;
&lt;p&gt;🤖 &lt;a href="https://open-assistant.io/"&gt;Open Assistant&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/02/W1/linking-together.html#2023-02-04T20:32:33.947Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This just came out&lt;/p&gt;
&lt;p&gt;📢 Future of Coding Tools have new URLs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Newsletter: &lt;a href="https://newsletter.futureofcoding.org/"&gt;newsletter.futureofcoding.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Search: &lt;a href="https://search.futureofcoding.org/"&gt;search.futureofcoding.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;History Search: &lt;a href="https://history.futureofcoding.org/"&gt;history.futureofcoding.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Link Search: &lt;a href="https://links.futureofcoding.org/"&gt;links.futureofcoding.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202302-week-1/</guid><pubDate>Sun, 05 Feb 2023 22:58:05 GMT</pubDate></item><item><title>Future of Coding Weekly 2023/01 Week 5</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202301-week-5/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;🪜 Gradual Languages 🧫 Coding Generative Interactive Systems 🧠 History of Tools for Thought 🦥 Lazy User Interfaces&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://github.com/papers-we-love/edu/discussions/11"&gt;Hedy: A Gradual Language for Programming Education&lt;/a&gt; via &lt;a href="https://twitter.com/jna_sh"&gt;Joe Nash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W5/share-your-work.html#2023-01-24T14:30:17.615Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We have quite a FoC relevant edition of Papers We Love Education this month: we’ll be discussing “Hedy: A Gradual Language for Programming Education” with Professor Felienne Hermans! Thursday 26th at 6pm CET, all the info here: &lt;a href="https://github.com/papers-we-love/edu/discussions/11"&gt;github.com/papers-we-love/edu/discussions/11&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For those not familiar with Hedy: &lt;a href="https://www.hedycode.com/"&gt;hedycode.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🐦 &lt;a href="https://twitter.com/jimmeyer/status/1619371921262649347"&gt;Tweet from @jimmeyer&lt;/a&gt; via &lt;a href="https://twitter.com/jimmeyer"&gt;Jim Meyer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W5/share-your-work.html#2023-01-28T16:34:37.877Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The code engine in Henosia can now interact with Chrome's own debugger, including any local variables used at the breakpoint.&lt;/p&gt;
&lt;p&gt;It's an internal tool for now to debug the code engine. Might be useful for hybrid designers though 😁&lt;/p&gt;
&lt;p&gt;Details in &lt;a href="https://twitter.com/jimmeyer/status/1619371921262649347"&gt;this twitter post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F04/F04LK371AUF.mp4"&gt;Henosia Breakpoint Locals&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;💬 &lt;a href="https://twitter.com/nickarner"&gt;Nick Arner&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W5/thinking-together.html#2023-01-25T00:44:22.887Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Does anyone have any resources they’d recommend for learning about Rust/WASM?&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://medium.com/@andreasmuelder/ai-powered-low-code-platform-by-example-how-to-use-chatgpt-to-abstract-from-domain-languages-625c3abf0e49"&gt;AI-powered low-code platform by example — how to use chatGPT to abstract from domain languages :rocket:&lt;/a&gt; via &lt;strong&gt;Jarno Montonen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W5/linking-together.html#2023-01-23T20:02:53.986Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ChatGPT as a natural language abstraction for DSLs?&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://subconscious.substack.com/p/noosphere-a-protocol-for-thought"&gt;the Noosphere Discord&lt;/a&gt; via &lt;a href="https://github.com/akkartik/mu"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W5/linking-together.html#2023-01-24T06:47:05.381Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A couple of links from &lt;a href="https://subconscious.substack.com/p/noosphere-a-protocol-for-thought"&gt;the Noosphere Discord&lt;/a&gt;, just because sharing links is how I add them to my brain:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.jerrysbrain.com"&gt;Jerry's Brain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://interconnected.org/home/2023/01/20/map_room"&gt;The map room is a physical room-size wiki for collaboration from the 1950s&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;📝 &lt;a href="https://elliotokay.notion.site/elliotokay/2023-Rough-Questions-dc321a1073914b2f910aca99baf29804"&gt;2023 Rough Questions&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W5/linking-together.html#2023-01-24T19:16:40.012Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Two overarching questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How can we reason about notations/interfaces/editors? So that:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can construct correct interfaces&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;We can distill what we are trying to say into more direct representations&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can explore the consequences of what we are trying to say more directly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How can we construct more direct analogies for computation?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🎥 &lt;a href="https://youtu.be/bFeJZRdhKcI"&gt;"Ceptre: A Language for Modeling Generative Interactive Systems" by Chris Martens&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W5/linking-together.html#2023-01-25T02:38:24.225Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Youtube Thumbnail" src="https://img.youtube.com/vi/bFeJZRdhKcI/hqdefault.jpg"&gt;&lt;/p&gt;
&lt;p&gt;🐦 &lt;a href="https://twitter.com/haxor/status/1618054900612739073"&gt;Tweet from @haxor&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W5/linking-together.html#2023-01-25T15:08:50.711Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/haxor/status/1618054900612739073"&gt;Are you interested in trying the new functional programming language that I've been developing? Sign up for an early preview&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/haxor/status/1580959518984241158"&gt;Here's a small glimpse of the language&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🐦 &lt;a href="https://twitter.com/@haxor"&gt;Brett Slatkin&lt;/a&gt;: Are you interested in trying the new functional programming language that I've been developing? Sign up here for an early preview: https://quil.la/2X2LS I'd love some patient feedback before I release it more widely. Thank you in advance!&lt;/p&gt;
&lt;p&gt;🐦 &lt;a href="https://twitter.com/@haxor"&gt;Brett Slatkin&lt;/a&gt;: Today's functional programming amusement:
Mandelbrot set&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="1130x838px image" src="https://pbs.twimg.com/media/FfCx3imUAAQM2G8.jpg"&gt;&lt;/p&gt;
&lt;p&gt;💻 &lt;a href="https://querystorm.com/csharp-in-excel/"&gt;QueryStorm | C# in Excel - QueryStorm&lt;/a&gt; via &lt;strong&gt;Riley Stewart&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W5/linking-together.html#2023-01-25T16:01:56.948Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A fairly complete IDE that can work directly with Excel data via LINQ, with extension capabilities of its own to boot.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=34516366"&gt;Show HN&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📝 &lt;a href="https://austinhenley.com/blog/naturallanguageui.html"&gt;Natural language is the lazy user interface&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W5/linking-together.html#2023-01-27T20:39:22.503Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;" &lt;em&gt;Just slap a textbox on it!"&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;The tyranny of the blank textbox is real.&lt;/p&gt;
&lt;p&gt;"people are bad at words"&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="https://www.loom.com/share/9066c0dcffc84e828fad851ca532825d"&gt;Meeting: Tools for Thought Rocks - Mark Bernstein&lt;/a&gt; via &lt;a href="https://twitter.com/jackrusher"&gt;Jack Rusher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W5/linking-together.html#2023-01-28T18:08:58.228Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mark Bernstein (who has been doing Tools for Thought stuff for decades, and has had a product in that space since 2001) gives a very rich history of TfT in the hypertext/notetaking vein&lt;/p&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://git.sr.ht/~akkartik/driver.love/tree/main/item/Manual_tests.md"&gt;Manual Tests&lt;/a&gt; via &lt;a href="https://github.com/akkartik/mu"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W5/devlog-together.html#2023-01-26T02:34:13.139Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Today I gave each app a default map for its code, so that people get a better initial experience when connecting the driver to it, rather than the blank canvas they've been faced with so far.&lt;/p&gt;
&lt;p&gt;Initialization is one of the categories of semantics that's hard to write tests for. What should happen when a config file is present. The driver maintains separate configs for each app it knows about, so it needs to handle the very first app vs first view of a new app. What if the app has no default map. Etc., etc.&lt;/p&gt;
&lt;p&gt;Anyways, I ended up touching &lt;a href="https://git.sr.ht/~akkartik/driver.love/tree/main/item/Manual_tests.md"&gt;git.sr.ht/~akkartik/driver.love/tree/main/item/Manual_tests.md&lt;/a&gt; after a while.&lt;/p&gt;
&lt;p&gt;💬 &lt;a href="https://twitter.com/TodePond"&gt;Lu Wilson&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W5/devlog-together.html#2023-01-26T22:39:15.196Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;a snippet from my weekly blog this week&lt;/p&gt;
&lt;p&gt;(pretty niche tode/bret lore content)&lt;/p&gt;
&lt;p&gt;&lt;img alt="image.png" src="http://history.futureofcoding.org/history/msg_files/F04/F04LS2Z2RB5.png"&gt;&lt;/p&gt;
&lt;h2&gt;Present of Coding&lt;/h2&gt;
&lt;p&gt;📢 &lt;a href="http://history.futureofcoding.org/newsletter/"&gt;Future of Coding Newsletter Archive and RSS Feed&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W5/present-company.html#2023-01-28T21:00:59.184Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The future of coding newsletter now owns its small plot of land on the internet: &lt;a href="http://history.futureofcoding.org/newsletter/"&gt;history.futureofcoding.org/newsletter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And because of that it now has an RSS feed: &lt;a href="http://history.futureofcoding.org/newsletter/rss.xml"&gt;history.futureofcoding.org/newsletter/rss.xml&lt;/a&gt;&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202301-week-5/</guid><pubDate>Sun, 29 Jan 2023 22:14:44 GMT</pubDate></item><item><title>Future of Coding Weekly 2023/01 Week 4</title><link>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202301-week-4/</link><dc:creator>Mariano Guerra</dc:creator><description>&lt;p&gt;💻 AoC with Enso 💡 First-class Transactions 🤖 ChatGPT All The Things 🫂 Compiled vs Interpreted Languages&lt;/p&gt;
&lt;h2&gt;Our Work&lt;/h2&gt;
&lt;p&gt;💻 &lt;a href="https://enso.org"&gt;enso.org&lt;/a&gt; via &lt;strong&gt;Sylwia Brodacka&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W4/share-your-work.html#2023-01-20T19:45:16.257Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Little bit late, but a few findings from AoC with Enso (&lt;a href="https://enso.org"&gt;enso.org&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;This year we did it internally, hopefully it will be an open competition next year 🚀&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🐦 &lt;a href="https://twitter.com/@enso_org"&gt;Enso (formerly Luna)&lt;/a&gt;: New story about our adventures with solving Advent of Code 2022 at Enso together with &lt;a href="https://twitter.com/jdunkerley"&gt;@jdunkerley&lt;/a&gt; &lt;a href="https://twitter.com/JaroslavTulach"&gt;@JaroslavTulach&lt;/a&gt; and &lt;a href="https://twitter.com/Radeusgd"&gt;@Radeusgd&lt;/a&gt;  &lt;a href="https://link.medium.com/Wr1pM90aKwb"&gt;Solving Advent of Code 2022 with Enso&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Devlog Together&lt;/h2&gt;
&lt;p&gt;💻 &lt;a href="https://en.wikipedia.org/wiki/Brainfuck"&gt;BF&lt;/a&gt; via &lt;a href="https://github.com/akkartik/mu"&gt;Kartik Agaram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W4/devlog-together.html#2023-01-17T06:23:40.389Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kicking the tyres on my environment with a &lt;a href="https://en.wikipedia.org/wiki/Brainfuck"&gt;BF&lt;/a&gt; interpreter.&lt;/p&gt;
&lt;p&gt;This is inspired by &lt;a href="https://tratt.net/laurie/blog/2023/compiled_and_interpreted_languages_two_ways_of_saying_tomato.html"&gt;Compiled and Interpreted Languages: Two Ways of Saying Tomato&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F04/F04JZN0DYA2.webm"&gt;bf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🎥 &lt;a href="http://history.futureofcoding.org/history/msg_files/F04/F04JZN13P2A.webm"&gt;bf codemap&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thinking Together&lt;/h2&gt;
&lt;p&gt;💡 &lt;a href="https://www.reddit.com/r/ProgrammingLanguages/comments/10gylhm/are_there_any_languages_with_transactions_as_a/"&gt;Are there any languages with transactions as a first-class concept?&lt;/a&gt; via &lt;a href="https://dekorte.com/"&gt;Steve Dekorte&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W4/thinking-together.html#2023-01-20T19:08:49.054Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Would be interested to hear the thoughts of folks here on this thread.&lt;/p&gt;
&lt;p&gt;💭 by &lt;a href="https://guitarvydas.github.io/2021/09/23/Manifesto.html"&gt;Paul Tarvydas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For me 2022 was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0D&lt;/li&gt;
&lt;li&gt;transpiler pipelines&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Explanations below.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W4/thinking-together.html#2023-01-22T14:06:36.762Z"&gt;🧵 keep reading&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;📝 &lt;a href="https://scale.com/blog/chatgpt-vs-claude"&gt;Meet Claude: Anthropic’s Rival to ChatGPTe&lt;/a&gt; via &lt;a href="https://github.com/rcshubhadeep"&gt;Shubhadeep Roychowdhury&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W4/linking-together.html#2023-01-18T10:37:57.978Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not really topic here, but interesting development nonetheless&lt;/p&gt;
&lt;p&gt;🧠 &lt;a href="https://github.com/Xpitfire/symbolicai"&gt;SymbolicAI: A Neuro-Symbolic Perspective on Large Language Models (LLMs)&lt;/a&gt; via &lt;strong&gt;Nilesh Trivedi&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W4/linking-together.html#2023-01-22T20:06:26.014Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Never came across "Neuro-symbolic programming paradigm" but looks interesting 😂&lt;/p&gt;
&lt;h2&gt;Present of Coding&lt;/h2&gt;
&lt;p&gt;🧰 &lt;a href="http://history.futureofcoding.org/history/links/"&gt;history.futureofcoding.org/history/links&lt;/a&gt; via &lt;a href="https://twitter.com/warianoguerra"&gt;Mariano Guerra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://marianoguerra.github.io/future-of-coding-weekly/history/weekly/2023/01/W4/present-company.html#2023-01-16T13:25:23.506Z"&gt;🧵 conversation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Updates on future of coding's link search page: &lt;a href="http://history.futureofcoding.org/history/links/"&gt;history.futureofcoding.org/history/links&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Avoid screen freezes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Links data streaming download and parsing by segments&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Filter by segments&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Result pagination (less to render on refilter)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Shareability:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If search query parameter is set, search that on load&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Example: &lt;a href="http://history.futureofcoding.org/history/links/?search=hest"&gt;history.futureofcoding.org/history/links/?search=hest&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update search query param on search update&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Usability:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sort by most recent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Table layout fixed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Result pagination&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keyboard shortcuts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;f: first, l: last, n: next, p: prev, N: page + 10, P: page - 10, s: focus search&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loading status&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Row highlight on hover&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Try it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://history.futureofcoding.org/history/links/?search=alan%20kay"&gt;history.futureofcoding.org/history/links/?search=alan%20kay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://history.futureofcoding.org/history/links/?search=bret%20victor"&gt;history.futureofcoding.org/history/links/?search=bret%20victor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PS: I listed the improvements in detail mostly to highlight how many things are involved in a "simple" app that only has a search box and a result list, I think it's a nice &lt;a href="https://eugenkiss.github.io/7guis/"&gt;7GUIs&lt;/a&gt; style app specification to benchmark future of coding projects&lt;/p&gt;</description><guid>http://newsletter.futureofcoding.org/posts/future-of-coding-weekly-202301-week-4/</guid><pubDate>Sat, 28 Jan 2023 20:32:58 GMT</pubDate></item></channel></rss>