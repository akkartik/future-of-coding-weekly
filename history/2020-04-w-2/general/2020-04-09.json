[
    {
        "client_msg_id": "ef275880-4de1-42d9-95e4-f6a4b01360db",
        "type": "message",
        "text": "why not ask <@U6FKVSVCK>?",
        "user": "UJN1TAYEQ",
        "ts": "1586391235.199700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YwN2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "why not ask "
                            },
                            {
                                "type": "user",
                                "user_id": "U6FKVSVCK"
                            },
                            {
                                "type": "text",
                                "text": "?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586375875.197900",
        "parent_user_id": "UU8H7M823",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U6FKVSVCK"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "fb7e2be0-0b82-4f22-80cc-cd2947fe4ae2",
        "type": "message",
        "text": "Things are still cooking. Just going a bit more stealth :wink:",
        "user": "U6FKVSVCK",
        "ts": "1586397878.200100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vDu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Things are still cooking. Just going a bit more stealth "
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586375875.197900",
        "parent_user_id": "UU8H7M823",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT",
                    "UU8H7M823"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "6139faa7-f064-49de-96b3-37f406f85f3c",
        "type": "message",
        "text": "<@U8A5MS6R1> Hmmm, I'll bite. Tell me more about Tuplespaces, my personal favorite topic!",
        "user": "UFLN9JFRT",
        "ts": "1586413641.200800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sG6R=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " Hmmm, I'll bite. Tell me more about Tuplespaces, my personal favorite topic!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586375831.197700",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "e1c89357-aafb-4637-837b-89b8afed1966",
        "type": "message",
        "text": "But looking at the Paragon demo, it was very slick. mostly fill in the forms. How does it differ from StoryScript?",
        "user": "UFLN9JFRT",
        "ts": "1586413677.201000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0s+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But looking at the Paragon demo, it was very slick. mostly fill in the forms. How does it differ from StoryScript?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586375831.197700",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "22bf95b2-ec0b-4669-8d57-8835bab177ad",
        "type": "message",
        "text": "Backend only I guess, or can you do UIs in paragon too?",
        "user": "UFLN9JFRT",
        "ts": "1586413690.201200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r/1EC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Backend only I guess, or can you do UIs in paragon too?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586375831.197700",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "2678661c-3561-4879-b51c-d864c029ea38",
        "type": "message",
        "text": "Great read. Found this particularly interesting wrt this community:\n&gt; In software construction, we often start by\u00a0_reinventing the form_\u00a0and, consequently, we have to face a very wide range of design problems. Are there cases of software construction that are more akin to the vernacular or unselfconscious design? One possible area of interest might be how people solve problems in spreadsheet systems like Excel. Spreadsheets define a relatively fixed form and allow the user to focus on skilful solutions to specific problems.\nMake me wonder if Excel is special, not so much because of its spreadsheet properties, but just because it\u2019s constrained. Perhaps we can \u201cdiscover\u201d other excels simply by exploring other constrained forms of programming, rather than assuming Excel \u201cgets it right\u201d in some way.",
        "user": "UKDM3GLAJ",
        "ts": "1586444340.201400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "imq2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great read. Found this particularly interesting wrt this community:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In software construction, we often start by\u00a0"
                            },
                            {
                                "type": "text",
                                "text": "reinventing the form",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u00a0and, consequently, we have to face a very wide range of design problems. Are there cases of software construction that are more akin to the vernacular or unselfconscious design? One possible area of interest might be how people solve problems in spreadsheet systems like Excel. Spreadsheets define a relatively fixed form and allow the user to focus on skilful solutions to specific problems."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Make me wonder if Excel is special, not so much because of its spreadsheet properties, but just because it\u2019s constrained. Perhaps we can \u201cdiscover\u201d other excels simply by exploring other constrained forms of programming, rather than assuming Excel \u201cgets it right\u201d in some way."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586372344.197200",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "a80a18b1-0a59-4501-a88d-feb42e0cf1a7",
        "type": "message",
        "text": "Really good read on language design and community management. Sometimes the principled design approach takes a toll on everyone when it's iterative <https://lukeplant.me.uk/blog/posts/why-im-leaving-elm/|https://lukeplant.me.uk/blog/posts/why-im-leaving-elm/>",
        "user": "UFQQ3P867",
        "ts": "1586452234.203100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "axuj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Really good read on language design and community management. Sometimes the principled design approach takes a toll on everyone when it's iterative "
                            },
                            {
                                "type": "link",
                                "url": "https://lukeplant.me.uk/blog/posts/why-im-leaving-elm/",
                                "text": "https://lukeplant.me.uk/blog/posts/why-im-leaving-elm/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586452234.203100",
        "reply_count": 24,
        "reply_users_count": 6,
        "latest_reply": "1586552946.220200",
        "reply_users": [
            "UJN1TAYEQ",
            "UFQQ3P867",
            "UEQ6M68H0",
            "UHDQ62M4P",
            "UCUSW7WVD",
            "UEBG0NPDK"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UDKTZSD6H"
                ],
                "count": 2
            },
            {
                "name": "open_mouth",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "84324934-eec3-46a5-b630-f1cade461e09",
        "type": "message",
        "text": "How does this meaningfully differ from Zappier or IFTTT or their army of derivatives?",
        "user": "UC2A2ARPT",
        "ts": "1586453469.203400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1586453516.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7i236",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How does this meaningfully differ from Zappier or IFTTT or their army of derivatives?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586375831.197700",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "8b2fa426-6704-4942-8bb4-c8df5a3ed0f5",
        "type": "message",
        "text": "I don't follow Elm, so it's the first I heard of this controversy. Nevertheless, I understand why Elm 0.19 needed to impose these restrictions. Elm is a pure functional language. Functions cannot have side effects. It's the same for my language, Curv, so I'm dealing with similar issues. I don't see any discussion on the internet explaining the Elm 0.19 restrictions from the language maintainers perspective, so I'll give my take.",
        "user": "UJN1TAYEQ",
        "ts": "1586454402.203800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mz0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't follow Elm, so it's the first I heard of this controversy. Nevertheless, I understand why Elm 0.19 needed to impose these restrictions. Elm is a pure functional language. Functions cannot have side effects. It's the same for my language, Curv, so I'm dealing with similar issues. I don't see any discussion on the internet explaining the Elm 0.19 restrictions from the language maintainers perspective, so I'll give my take."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867"
    },
    {
        "client_msg_id": "c1a4da96-d5ce-48a8-8da9-6b98b5b44589",
        "type": "message",
        "text": "I have considered adding native modules to Curv. I think it would be a big mistake, because people would use that as an escape hatch for adding impure functions to Curv. The problem is: this would break the compiler and the runtime. The assumption that functions are pure is baked in to the design of the language and its implementation at a fundamental level. If there were impure native modules, then standard pure-function compiler optimizations would break everybodies code using these native modules, and that would be reported as bugs. Users would take the position that these \"bugs\" need to be fixed, which from my perspective would mean redesigning the language, the compiler and the runtime along entirely different lines, so that Curv is now an impure functional language. I don't want to put myself in that position.",
        "user": "UJN1TAYEQ",
        "ts": "1586454628.204000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1586454993.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3u8o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have considered adding native modules to Curv. I think it would be a big mistake, because people would use that as an escape hatch for adding impure functions to Curv. The problem is: this would break the compiler and the runtime. The assumption that functions are pure is baked in to the design of the language and its implementation at a fundamental level. If there were impure native modules, then standard pure-function compiler optimizations would break everybodies code using these native modules, and that would be reported as bugs. Users would take the position that these \"bugs\" need to be fixed, which from my perspective would mean redesigning the language, the compiler and the runtime along entirely different lines, so that Curv is now an impure functional language. I don't want to put myself in that position."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867"
    },
    {
        "client_msg_id": "122b6c24-868b-493f-a168-3bcfe64d9216",
        "type": "message",
        "text": "Turns out that Elm 0.18 had support for native modules. And Elm 0.19 added compiler optimizations that are incompatible with existing native modules, which I assume contained impure functions. So Elm 0.19 now only supports native modules that are approved by the core implementation team.",
        "user": "UJN1TAYEQ",
        "ts": "1586454731.204200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "enGdm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Turns out that Elm 0.18 had support for native modules. And Elm 0.19 added compiler optimizations that are incompatible with existing native modules, which I assume contained impure functions. So Elm 0.19 now only supports native modules that are approved by the core implementation team."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867"
    },
    {
        "client_msg_id": "4eff8027-60f7-4aab-a337-28805c9762d1",
        "type": "message",
        "text": "And there is a big outcry about the authoritarian, non-open-source attitude of the Elm team. Sounds like a bad situation.",
        "user": "UJN1TAYEQ",
        "ts": "1586454918.204400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7ATN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And there is a big outcry about the authoritarian, non-open-source attitude of the Elm team. Sounds like a bad situation."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867"
    },
    {
        "client_msg_id": "6b2e4fef-ce35-4e9d-9aae-0386e16b82c2",
        "type": "message",
        "text": "This post focuses on what he sees as hypocrisy: many non-essential modules _owned by the maintainers and their friends_ are impure (eg Evan's markdown module). So the whole purity transition is inviable if the maintainers themselves can't adapt to their own pure standards.",
        "user": "UFQQ3P867",
        "ts": "1586456550.204700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H8M=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This post focuses on what he sees as hypocrisy: many non-essential modules "
                            },
                            {
                                "type": "text",
                                "text": "owned by the maintainers and their friends",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are impure (eg Evan's markdown module). So the whole purity transition is inviable if the maintainers themselves can't adapt to their own pure standards."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "4f5fb48e-9150-404f-bd76-37842fb0cf30",
        "type": "message",
        "text": "If Elm was strictly pure from the beginning, those who needed impurity wouldn't have become invested in the project. The problem is that there's now a lot of broken deeply-vested production projects due to the opaque and unilateral decision of 0.19. If your product is built in Elm and relies on impurity with no clear path forward, you've gotten completely burned by this switch.",
        "user": "UFQQ3P867",
        "ts": "1586456776.204900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFQQ3P867",
            "ts": "1586456961.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8DEbA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If Elm was strictly pure from the beginning, those who needed impurity wouldn't have become invested in the project. The problem is that there's now a lot of broken deeply-vested production projects due to the opaque and unilateral decision of 0.19. If your product is built in Elm and relies on impurity with no clear path forward, you've gotten completely burned by this switch."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867"
    },
    {
        "client_msg_id": "2ccc43e7-9d49-4640-806b-cb47a9cc1bf9",
        "type": "message",
        "text": "<@UFLN9JFRT> - I have nothing of depth, just the idea that tuplespace like architectures also seem like a good foundation for cross service coordination.",
        "user": "U8A5MS6R1",
        "ts": "1586457048.205300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2yroc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFLN9JFRT"
                            },
                            {
                                "type": "text",
                                "text": " - I have nothing of depth, just the idea that tuplespace like architectures also seem like a good foundation for cross service coordination."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586375831.197700",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "fb2b938f-cbf9-46e6-8037-bd46a91df7f5",
        "type": "message",
        "text": "Some people can't handle the _*benevolent dictator for life*_ control that language authors can have. It certainly didn't hurt Python, which reached up into the top 3 languages, with benevolent dictator Van Rossum just stepping down recently. Evan Czaplicki is a smart guy, and he is doing a first class job on Elm. However, with the limited resources available, the features people want (and Mr. Plant wanted native modules and a localization system) may not happen in a timely fashion, and in that case you have to bail. It is after all still before version 1.0, so one has to give them some slack. Mr. Plant has a 7000 line program he doesn't want to rewrite, so i understand the pain, but luckily 7000 is a small program. Elm doesn't have magic dust so it can be converted, the effort can be measured in days of work.\n\nThere is a lesson here for all language designers; it is much less painful for the users if you only add to the feature set; subtracting a previously available feature may cause agony among the user base.\n\nBut there is a weakness in the additive language evolution process, because if you avoid pain in the user base by only adding (C++ are you listening?), if you keep up that process, you end up with a kitchen sink type of language mess after a few decades, and the whole thing should be be thrown out.\n\nIf your original design is clean, hopefully you won't need to add much. I used Modula-2 and it only needed adding a preprocessor for conditional compilation, and some unicode string markers in its evolution. It was so simple it was complete from the start.",
        "user": "UEQ6M68H0",
        "ts": "1586457462.205500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1586493815.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=is6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some people can't handle the "
                            },
                            {
                                "type": "text",
                                "text": "benevolent dictator for life",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " control that language authors can have. It certainly didn't hurt Python, which reached up into the top 3 languages, with benevolent dictator Van Rossum just stepping down recently. Evan Czaplicki is a smart guy, and he is doing a first class job on Elm. However, with the limited resources available, the features people want (and Mr. Plant wanted native modules and a localization system) may not happen in a timely fashion, and in that case you have to bail. It is after all still before version 1.0, so one has to give them some slack. Mr. Plant has a 7000 line program he doesn't want to rewrite, so i understand the pain, but luckily 7000 is a small program. Elm doesn't have magic dust so it can be converted, the effort can be measured in days of work.\n\nThere is a lesson here for all language designers; it is much less painful for the users if you only add to the feature set; subtracting a previously available feature may cause agony among the user base.\n\nBut there is a weakness in the additive language evolution process, because if you avoid pain in the user base by only adding (C++ are you listening?), if you keep up that process, you end up with a kitchen sink type of language mess after a few decades, and the whole thing should be be thrown out.\n\nIf your original design is clean, hopefully you won't need to add much. I used Modula-2 and it only needed adding a preprocessor for conditional compilation, and some unicode string markers in its evolution. It was so simple it was complete from the start."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867",
        "reactions": [
            {
                "name": "ok_hand",
                "users": [
                    "UFQQ3P867"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9d41cd11-aacc-4f2b-bf2c-a44b1f086dff",
        "type": "message",
        "text": "<@UEQ6M68H0> agree with all of that -- one thing I'll add though is that the \"1.0=production\" distinction is far more complicated than you make it. Plenty of companies use Elm in production (which the team does evangelize), and plenty of other projects haven't hit 1.0 and it's been years (eg React Native)",
        "user": "UFQQ3P867",
        "ts": "1586458014.205800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MIojd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " agree with all of that -- one thing I'll add though is that the \"1.0=production\" distinction is far more complicated than you make it. Plenty of companies use Elm in production (which the team does evangelize), and plenty of other projects haven't hit 1.0 and it's been years (eg React Native)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867"
    },
    {
        "client_msg_id": "06885c78-85e9-4a6c-a1a1-89170e216e93",
        "type": "message",
        "text": "I do still agree with the overall point that you get what you sign up for and 1.0+ is a sign of a language's age",
        "user": "UFQQ3P867",
        "ts": "1586458084.206000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gyQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I do still agree with the overall point that you get what you sign up for and 1.0+ is a sign of a language's age"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867"
    },
    {
        "client_msg_id": "2c4a2d01-37a3-4241-bf3c-3ad0402044e6",
        "type": "message",
        "text": "In my first job after college i worked for a consulting firm that made a decision support system for Fortune-50 companies. It was a terrific product, but when a user wanted a feature, they would throw serious money at the company and they got it. If they put enough money on the project it got bumped up to #1. It is an honest system, money is voting; in open source you have an economy of feelings, where people think their devotion to a product and evangelism somehow give them more votes. In many ways i prefer the clarity of the commercial world. A language is a tool, and its value is created by users accomplishing something else. It is a crucial part of a project, but just like a hammer or saw, it is not the final product. The one area where software tools have a flaw is that  when you construct a house the hammer and saws used to build the house are not left inside the house; while in software, there is usually some runtime system that is permanently embedded in the product and if that runtime gets broken the whole thing stops functioning.  This is a key reason the software industry has been like building sandcastles.",
        "user": "UEQ6M68H0",
        "ts": "1586458093.206200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3Xm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In my first job after college i worked for a consulting firm that made a decision support system for Fortune-50 companies. It was a terrific product, but when a user wanted a feature, they would throw serious money at the company and they got it. If they put enough money on the project it got bumped up to #1. It is an honest system, money is voting; in open source you have an economy of feelings, where people think their devotion to a product and evangelism somehow give them more votes. In many ways i prefer the clarity of the commercial world. A language is a tool, and its value is created by users accomplishing something else. It is a crucial part of a project, but just like a hammer or saw, it is not the final product. The one area where software tools have a flaw is that  when you construct a house the hammer and saws used to build the house are not left inside the house; while in software, there is usually some runtime system that is permanently embedded in the product and if that runtime gets broken the whole thing stops functioning.  This is a key reason the software industry has been like building sandcastles."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586452234.203100",
        "parent_user_id": "UFQQ3P867",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFQQ3P867",
                    "U79HM6726"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "0aee7644-afea-4a7b-98d0-d84933b8457a",
        "type": "message",
        "text": "Help me fill in this _spectrum of models of computation_.\n\n\u2022 [Mechanical \u2014 designed to be built]\n\u2022\n\u2022 Analytical Engine\n\u2022 Turing Machine\n\u2022\u00a0von Neumann\n\u2022 Rule 110\n\u2022 Lambda Calculus\n\u2022\u00a0SKI Combinator Calculus\n\u2022\n\u2022 [Theoretical \u2014 difficult, but of course possible, to make a physical machine for]\n\nAre these in the correct order? What other models exist that I should add here, and where should they go?",
        "user": "UC2A2ARPT",
        "ts": "1586462800.208000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "psB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Help me fill in this "
                            },
                            {
                                "type": "text",
                                "text": "spectrum of models of computation",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\n\u2022 [Mechanical \u2014 designed to be built]\n\u2022\n\u2022 Analytical Engine\n\u2022 Turing Machine\n\u2022\u00a0von Neumann\n\u2022 Rule 110\n\u2022 Lambda Calculus\n\u2022\u00a0SKI Combinator Calculus\n\u2022\n\u2022 [Theoretical \u2014 difficult, but of course possible, to make a physical machine for]\n\nAre these in the correct order? What other models exist that I should add here, and where should they go?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586462800.208000",
        "reply_count": 25,
        "reply_users_count": 9,
        "latest_reply": "1586673988.336400",
        "reply_users": [
            "UBN9AFS0N",
            "UC2A2ARPT",
            "UUQ2EQW21",
            "U6FKVSVCK",
            "UJN1TAYEQ",
            "UDKTZSD6H",
            "UD3AK9JRF",
            "U8A5MS6R1",
            "UP6G25H35"
        ],
        "subscribed": true,
        "last_read": "1586673988.336400"
    },
    {
        "client_msg_id": "18185560-3840-48af-8db6-a63821b46df1",
        "type": "message",
        "text": "are biological systems are fork in the sequence?",
        "user": "UBN9AFS0N",
        "ts": "1586463993.208100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vaNU0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "are biological systems are fork in the sequence?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "0843d4cc-70c0-4175-bdac-b833af0f413c",
        "type": "message",
        "text": "Give me an example.",
        "user": "UC2A2ARPT",
        "ts": "1586464634.208300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gx6PP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Give me an example."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "1fc3bb67-caee-4d6a-85db-31e556c69249",
        "type": "message",
        "text": "<https://en.wikipedia.org/wiki/Ant_colony_optimization_algorithms>",
        "user": "UBN9AFS0N",
        "ts": "1586465201.208500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/3/34/Safari_ants.jpg/1200px-Safari_ants.jpg",
                "image_width": 1200,
                "image_height": 796,
                "image_bytes": 289860,
                "title": "Ant colony optimization algorithms",
                "title_link": "https://en.wikipedia.org/wiki/Ant_colony_optimization_algorithms",
                "from_url": "https://en.wikipedia.org/wiki/Ant_colony_optimization_algorithms",
                "author_name": "Wikipedia",
                "author_link": "https://en.wikipedia.org/",
                "text": "In computer science and operations research, the ant colony optimization algorithm (ACO) is a probabilistic technique for solving computational problems which can be reduced to finding good paths through graphs. Artificial Ants stand for multi-agent methods inspired by the behavior of real ants. \nThe pheromone-based communication of biological ants is often the predominant paradigm used.   Combinations of Artificial Ants and local search algorithms have become a method of choice for numerous optimization tasks involving some sort of graph, e.g., vehicle routing and internet routing. The burgeoning activity in this field has led to conferences dedicated solely to Artificial Ants, and to numerous commercial applications by specialized companies such as AntOptima.\nAs an example, Ant colony optimization  is a class of optimization algorithms modeled on the actions of an ant colony.  Artificial 'ants' (e.g. simulation agents) locate optimal solutions by moving through a parameter space representing all possible solutions.  Real ants lay down pheromones directing each other to resources while exploring their environment.  The simulated 'ants' similarly record their positions and the quality of their solutions, so that in later simulation iterations more ants locate better solutions.  One variation on this approach is the bees algorithm, which is more analogous to the foraging patterns of the honey bee, another social insect.\nThis algorithm is a member of the ant colony algorithms family, in swarm intelligence methods, and it constitutes some metaheuristic optimizations. Initially proposed by Marco Dorigo in 1992 in his PhD thesis, the first algorithm was aiming to search for an optimal path in a graph, based on the behavior of ants seeking a path between their colony and a source of food. The original idea has since diversified to solve a wider class of numerical problems, and as a result, several problems have emerged, drawing on various aspects of the behavior of ants. From a broader perspective, ACO performs a model-based search and shares some similarities with estimation of distribution algorithms.",
                "fallback": "wikipedia: Ant colony optimization algorithms",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png",
                "id": 1,
                "original_url": "https://en.wikipedia.org/wiki/Ant_colony_optimization_algorithms"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6oq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Ant_colony_optimization_algorithms"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "5ab8cbfd-797e-4682-ab7a-ed7444f6b8da",
        "type": "message",
        "text": "<https://www.wired.com/2010/01/slime-mold-grows-network-just-like-tokyo-rail-system/>",
        "user": "UBN9AFS0N",
        "ts": "1586465260.208800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "WIRED",
                "title": "Slime Mold Grows Network Just Like Tokyo Rail System",
                "title_link": "https://www.wired.com/2010/01/slime-mold-grows-network-just-like-tokyo-rail-system/",
                "text": "Talented and dedicated engineers spent countless hours designing Japan\u2019s rail system to be one of the world\u2019s most efficient. Could have just asked a slime mold. When presented with oat flakes arranged in the pattern of Japanese cities around Tokyo, brainless, single-celled slime molds construct networks of nutrient-channeling tubes that are strikingly similar to the \\[\u2026\\]",
                "fallback": "WIRED: Slime Mold Grows Network Just Like Tokyo Rail System",
                "image_url": "https://media.wired.com/photos/59346eb5d80dd005b42b4404/2:1/w_2500,c_limit/slime_mold_21.jpg",
                "image_width": 400,
                "image_height": 200,
                "from_url": "https://www.wired.com/2010/01/slime-mold-grows-network-just-like-tokyo-rail-system/",
                "image_bytes": 17836,
                "service_icon": "https://www.wired.com/favicon.ico",
                "id": 1,
                "original_url": "https://www.wired.com/2010/01/slime-mold-grows-network-just-like-tokyo-rail-system/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BD+SW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.wired.com/2010/01/slime-mold-grows-network-just-like-tokyo-rail-system/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "d665cfaa-2fb2-4c49-ba11-d8d87f50816c",
        "type": "message",
        "text": "in general: <https://en.wikipedia.org/wiki/Swarm_intelligence>",
        "user": "UBN9AFS0N",
        "ts": "1586465315.209100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "image_url": "https://upload.wikimedia.org/wikipedia/commons/5/5e/Auklet_flock_Shumagins_1986.jpg",
                "image_width": 3756,
                "image_height": 2561,
                "image_bytes": 1977269,
                "title": "Swarm intelligence",
                "title_link": "https://en.wikipedia.org/wiki/Swarm_intelligence",
                "from_url": "https://en.wikipedia.org/wiki/Swarm_intelligence",
                "author_name": "Wikipedia",
                "author_link": "https://en.wikipedia.org/",
                "text": "Swarm intelligence (SI) is the collective behavior of decentralized, self-organized systems, natural or artificial. The concept is employed in work on artificial intelligence. The expression was introduced by Gerardo Beni and Jing Wang in 1989, in the context of cellular robotic <http://systems.SI|systems.SI> systems consist typically of a population of simple agents or boids interacting locally with one another and with their environment. The inspiration often comes from nature, especially biological systems. The agents follow very simple rules, and although there is no centralized control structure dictating how individual agents should behave, local, and to a certain degree random, interactions between such agents lead to the emergence of \"intelligent\" global behavior, unknown to the individual agents. Examples of swarm intelligence in natural systems include ant colonies, bird flocking, hawks hunting, animal herding, bacterial growth, fish schooling and microbial intelligence.\nThe application of swarm principles to robots is called swarm robotics, while 'swarm intelligence' refers to the more general set of algorithms. 'Swarm prediction' has been used in the context of forecasting problems. Similar approaches to those proposed for swarm robotics are considered for genetically modified organisms in synthetic collective intelligence.",
                "fallback": "wikipedia: Swarm intelligence",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png",
                "id": 1,
                "original_url": "https://en.wikipedia.org/wiki/Swarm_intelligence"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5PMZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in general: "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Swarm_intelligence"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "49371222-0F56-46D0-BD71-D25C75736581",
        "type": "message",
        "text": "Was going to suggest Wolfram &amp; others cellular automata- but hadn\u2019t heard of Rule 110, and that covers it I think! What about Rube Goldberg near the mechanical end?",
        "user": "UUQ2EQW21",
        "ts": "1586466212.211600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uVe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Was going to suggest Wolfram & others cellular automata- but hadn\u2019t heard of Rule 110, and that covers it I think! What about Rube Goldberg near the mechanical end?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "0f8fad02-3d06-4708-aafa-38ae326c01d9",
        "type": "message",
        "text": "Thanks for that Tom, interesting",
        "user": "U0119RRB1MK",
        "ts": "1586468413.211800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aOt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for that Tom, interesting"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586346043.180000",
        "parent_user_id": "U0119RRB1MK"
    },
    {
        "client_msg_id": "45a78993-d3e8-4567-8da2-c7054e003eb4",
        "type": "message",
        "text": "The common thread among all the things I listed is that they're Turing complete. I think that's a minimum requirement for this exercise.\n\nThis raises a question \u2014\u00a0do we have models of computation that cannot be implemented using a physical machine? I bet we do. These things would go below the bottom end of the spectrum. And the biological examples / Rube Goldberg variations (:wink:) would probably go above the top (or on an entirely different axis)",
        "user": "UC2A2ARPT",
        "ts": "1586468734.212000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oz8Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The common thread among all the things I listed is that they're Turing complete. I think that's a minimum requirement for this exercise.\n\nThis raises a question \u2014\u00a0do we have models of computation that cannot be implemented using a physical machine? I bet we do. These things would go below the bottom end of the spectrum. And the biological examples / Rube Goldberg variations ("
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            },
                            {
                                "type": "text",
                                "text": ") would probably go above the top (or on an entirely different axis)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "8d2d486b-6e46-4873-b245-4d8e5faa2c97",
        "type": "message",
        "text": "Not sure if the order in the initial list is relevant\u2014 if so, I'd put Turing Machine just above lambda calculus. it's definitely more abstract than a Von Neumann machine",
        "user": "U6FKVSVCK",
        "ts": "1586475528.212200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "75pK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure if the order in the initial list is relevant\u2014 if so, I'd put Turing Machine just above lambda calculus. it's definitely more abstract than a Von Neumann machine"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "534c667e-d622-4f33-ba65-888bd40a0534",
        "type": "message",
        "text": "also a bit of a tangent, but if biological computation is of interest, this talk will surely blow your mind: <https://www.youtube.com/watch?v=RjD1aLm4Thg>",
        "user": "U6FKVSVCK",
        "ts": "1586475599.212400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "What Bodies Think About: Bioelectric Computation Outside the Nervous System - NeurIPS 2018",
                "title_link": "https://www.youtube.com/watch?v=RjD1aLm4Thg",
                "author_name": "The Artificial Intelligence Channel",
                "author_link": "https://www.youtube.com/user/Maaaarth",
                "thumb_url": "https://i.ytimg.com/vi/RjD1aLm4Thg/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: What Bodies Think About: Bioelectric Computation Outside the Nervous System - NeurIPS 2018",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/RjD1aLm4Thg?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=RjD1aLm4Thg",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=RjD1aLm4Thg"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CEW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "also a bit of a tangent, but if biological computation is of interest, this talk will surely blow your mind: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=RjD1aLm4Thg"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "7d9ae91e-47a1-4d4a-8aa1-689907053b2f",
        "type": "message",
        "text": "quantum computing",
        "user": "UJN1TAYEQ",
        "ts": "1586476336.212700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Js3wz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "quantum computing"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "7d0ef136-fa7f-41dd-813b-1b7fe5fe9a0c",
        "type": "message",
        "text": "I might group things like this:\n```physical systems which compute:\n  - actual computers (almost always implementations of a Von Neumann architecture)\n  - certain biological systems\n    - brains\n    - intracellular chemical networks (linked video)\n    - DNA\n  - Babbage's Analytical Engine\n\nabstractions of physical machines:\n  - Von Neumann architecture\n  - hardware description languages\n\nabstract / mathematical systems which compute:\n  - rule 110 (&amp; other CA rules, like Conway's)\n  - recurrent neural networks\n  - any programming language\n\nabstractions of computation:\n  - Turing machine\n  - lambda calculus\n  - universal function```",
        "user": "U6FKVSVCK",
        "ts": "1586476582.212900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WiHLQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I might group things like this:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "physical systems which compute:\n  - actual computers (almost always implementations of a Von Neumann architecture)\n  - certain biological systems\n    - brains\n    - intracellular chemical networks (linked video)\n    - DNA\n  - Babbage's Analytical Engine\n\nabstractions of physical machines:\n  - Von Neumann architecture\n  - hardware description languages\n\nabstract / mathematical systems which compute:\n  - rule 110 (& other CA rules, like Conway's)\n  - recurrent neural networks\n  - any programming language\n\nabstractions of computation:\n  - Turing machine\n  - lambda calculus\n  - universal function"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586462800.208000",
        "parent_user_id": "UC2A2ARPT"
    }
]