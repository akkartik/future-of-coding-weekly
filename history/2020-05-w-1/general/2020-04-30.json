[
    {
        "client_msg_id": "3c899cb9-08e2-4bc5-a227-cd24c3665392",
        "type": "message",
        "text": "Thanks all for these examples -- some really cool work in this area that I wasn't aware of!",
        "user": "UR482RFPY",
        "ts": "1588207423.343200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9v+OG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks all for these examples -- some really cool work in this area that I wasn't aware of!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588031436.305800",
        "parent_user_id": "UR482RFPY"
    },
    {
        "client_msg_id": "74047495-7719-439e-81d5-5e8f3fb86589",
        "type": "message",
        "text": "<@U010RH58PL7> this is a really useful post, do you mind if I share a link to it? (I'm not sure what the etiquette is with substack deep links because I understand it to be unindexed content :slightly_smiling_face:)",
        "user": "UR482RFPY",
        "ts": "1588207797.343400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oQdP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U010RH58PL7"
                            },
                            {
                                "type": "text",
                                "text": " this is a really useful post, do you mind if I share a link to it? (I'm not sure what the etiquette is with substack deep links because I understand it to be unindexed content "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588031436.305800",
        "parent_user_id": "UR482RFPY"
    },
    {
        "client_msg_id": "57ba102f-711f-408b-981e-b8b08793ca9e",
        "type": "message",
        "text": "can you do away with the notion of parent-child? perhaps you could think in terms of clustering things, scrolling, zooming, connecting, etc. All components could live at the same level instead of being nested in one another",
        "user": "UN9SCH5RD",
        "ts": "1588213760.343900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/aN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "can you do away with the notion of parent-child? perhaps you could think in terms of clustering things, scrolling, zooming, connecting, etc. All components could live at the same level instead of being nested in one another"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKDM3GLAJ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0cd1e831-6439-4c62-929b-3462b26ea873",
        "type": "message",
        "text": "since you are thinking ironman your screen would be potentially infinite... you would have to find a way to focus the desired cluster inside the viewport",
        "user": "UN9SCH5RD",
        "ts": "1588213816.344100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e=w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "since you are thinking ironman your screen would be potentially infinite... you would have to find a way to focus the desired cluster inside the viewport"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ"
    },
    {
        "client_msg_id": "b8e5348a-2046-4eb7-80a2-7d5ad8c45b17",
        "type": "message",
        "text": "One thing with \"first-past-the-post\" voting as <@UD6EXQVM0> called it is that similar things end up competing.  This could explain why Visual Programming is high and Block Languages is low.",
        "user": "UA14TGLTC",
        "ts": "1588215488.344300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n=r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One thing with \"first-past-the-post\" voting as "
                            },
                            {
                                "type": "user",
                                "user_id": "UD6EXQVM0"
                            },
                            {
                                "type": "text",
                                "text": " called it is that similar things end up competing.  This could explain why Visual Programming is high and Block Languages is low."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588014850.297100",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "e61a370e-d343-430a-ac80-0fe9f712a7dc",
        "type": "message",
        "text": "If we do choose a different way to ask questions next time, it might make sense to also have the old way to offer continuity.",
        "user": "UA14TGLTC",
        "ts": "1588215552.344500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "frO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If we do choose a different way to ask questions next time, it might make sense to also have the old way to offer continuity."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588014850.297100",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "00d19bdd-1a1e-4550-84d3-fdce0116f65e",
        "type": "message",
        "text": "The trick with constraint layout systems is that they're often too complicated to reason about reliably.  You don't know who is in charge: the container or the content.  Simultaneously, they are often too rigid.  You discover you want two things to lineup cross-hierarchy, and your kind of out of luck.  What to do then?  Give feedback.  Explain why a thing ends up the way it does.  Then make it easy to give examples of what you want, which may be realized in more than one way.\n\nBrowsers have been getting better with explaining CSS, but not without eliminating rage inducing headaches.  For instance, it might be hard to select a border in order to determine where it is coming from.",
        "user": "UA14TGLTC",
        "ts": "1588216162.344800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fvpC4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The trick with constraint layout systems is that they're often too complicated to reason about reliably.  You don't know who is in charge: the container or the content.  Simultaneously, they are often too rigid.  You discover you want two things to lineup cross-hierarchy, and your kind of out of luck.  What to do then?  Give feedback.  Explain why a thing ends up the way it does.  Then make it easy to give examples of what you want, which may be realized in more than one way.\n\nBrowsers have been getting better with explaining CSS, but not without eliminating rage inducing headaches.  For instance, it might be hard to select a border in order to determine where it is coming from."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ"
    },
    {
        "client_msg_id": "844b8d27-e5c1-444f-9cdb-9af253eb1d9f",
        "type": "message",
        "text": "The Iron Man interfaces are wonderfully entertaining pieces of graphic art. There are just a few people in hollywood who know how to make those things. They are mixture of 3D and 2D animations, always using glowing lines and very few colors so it looks terrific. But as a user interface it would be horrible because all the buttons look alike, and the font sizes are microscopic. So although they are sexy from a distance, if you had one in front of you, it would be confusing, hard to use. A lot of music software is enraptured with sub-6pt fonts, and microscopic icons. So i would be wary of chasing Hollywood's ideas.  Remember Star Trek next generation, with their buttonless screens that would be sure to create carpal tunnel syndrome in record time? A lot of the futuristic stuff is unergonomic, and possibly harmful to the human body, and presumes a magical artificial intelligence that just graduated from CalArts and spent 1000 hours making a screen that appears in the movie for 2 minutes. A 100 million motion picture is a time compression device, where 50,000 man hours go into making something that lasts 2, so a 25,000 : 1 ratio there. By all means see what you can come up with, but don't hold yourself to unattainable graphic standards that are the work of genius graphic designers who are at the top of a very specialized field (i.e. fake UI's for futuristic films). Hollywood has a long history of faking the future; Irwin Allen was a famous TV producer who loved banks of flashing lights and nutty rubber monsters. I think you are better off studying from the great masters of the Renaissance, who used proportions to draw everything, and also the great book \"Designing for people\" by Henry Dreyfuss, the greatest industrial designer in the history of the world. Everyone who does any design work should know that man's output because he was so great. He didn't do computer interfaces, but he had a systematic way of attacking every problem that resulted in an optimal final design. It is his methodology that is still useful today.",
        "user": "UEQ6M68H0",
        "ts": "1588235865.345300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R6G/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Iron Man interfaces are wonderfully entertaining pieces of graphic art. There are just a few people in hollywood who know how to make those things. They are mixture of 3D and 2D animations, always using glowing lines and very few colors so it looks terrific. But as a user interface it would be horrible because all the buttons look alike, and the font sizes are microscopic. So although they are sexy from a distance, if you had one in front of you, it would be confusing, hard to use. A lot of music software is enraptured with sub-6pt fonts, and microscopic icons. So i would be wary of chasing Hollywood's ideas.  Remember Star Trek next generation, with their buttonless screens that would be sure to create carpal tunnel syndrome in record time? A lot of the futuristic stuff is unergonomic, and possibly harmful to the human body, and presumes a magical artificial intelligence that just graduated from CalArts and spent 1000 hours making a screen that appears in the movie for 2 minutes. A 100 million motion picture is a time compression device, where 50,000 man hours go into making something that lasts 2, so a 25,000 : 1 ratio there. By all means see what you can come up with, but don't hold yourself to unattainable graphic standards that are the work of genius graphic designers who are at the top of a very specialized field (i.e. fake UI's for futuristic films). Hollywood has a long history of faking the future; Irwin Allen was a famous TV producer who loved banks of flashing lights and nutty rubber monsters. I think you are better off studying from the great masters of the Renaissance, who used proportions to draw everything, and also the great book \"Designing for people\" by Henry Dreyfuss, the greatest industrial designer in the history of the world. Everyone who does any design work should know that man's output because he was so great. He didn't do computer interfaces, but he had a systematic way of attacking every problem that resulted in an optimal final design. It is his methodology that is still useful today."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ"
    },
    {
        "client_msg_id": "2F17F327-EB23-421A-BA68-0BA3E8A7C4D0",
        "type": "message",
        "text": "I come to realize again and again that great design comes from building something over and over again, exploring different options and putting in what you learned from the last time you built it. Great designers build lots of prototypes to figure out what works and what doesn\u2019t. \n\nIn software engineering we often see design more as planning, as that one time we think a little about architecture and then we just have to implement it. Sometimes that works and it good enough. But if you really want to build something great, you\u2019ll likely have to build it several times.",
        "user": "U5STGTB3J",
        "ts": "1588239050.350000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zVGv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I come to realize again and again that great design comes from building something over and over again, exploring different options and putting in what you learned from the last time you built it. Great designers build lots of prototypes to figure out what works and what doesn\u2019t. \n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "In software engineering we often see design more as planning, as that one time we think a little about architecture and then we just have to implement it. Sometimes that works and it good enough. But if you really want to build something great, you\u2019ll likely have to build it several times."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ"
    },
    {
        "client_msg_id": "153022A2-0939-491B-AFE2-1D5AAEFA71EC",
        "type": "message",
        "text": "Tying this back to the original question: I\u2019m most familiar with Apple\u2019s explorations of layout systems over the last few decades. They went from a very simple to understand and just powerful enough \u201cStruts and Springs\u201d model in Cocoa to a somewhat more refined version of that as part of Core Animation, then a constraint solver based \u201cAuto Layout\u201d model plus some layout-specific components like UITableView and UICollectionView, and are now exploring some new ideas with SwiftUI.\n\nGiven the way Apple _designs_ their APIs, and their experience having built several widely used layout systems over the years, there should be some good material to be inspired by.",
        "user": "U5STGTB3J",
        "ts": "1588239733.357700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3ZA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tying this back to the original question: I\u2019m most familiar with Apple\u2019s explorations of layout systems over the last few decades. They went from a very simple to understand and just powerful enough \u201cStruts and Springs\u201d model in Cocoa to a somewhat more refined version of that as part of Core Animation, then a constraint solver based \u201cAuto Layout\u201d model plus some layout-specific components like UITableView and UICollectionView, and are now exploring some new ideas with SwiftUI.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Given the way Apple "
                            },
                            {
                                "type": "text",
                                "text": "designs",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " their APIs, and their experience having built several widely used layout systems over the years, there should be some good material to be inspired by."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ"
    },
    {
        "client_msg_id": "bee6e4a7-6166-4f32-bb02-03cf768a9b8b",
        "type": "message",
        "text": "I have an open source library for plotting widgets on the screen according to inequalities\n<https://github.com/samsquire/inequality-solver>",
        "user": "U0119RRB1MK",
        "ts": "1588247920.358200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "samsquire/inequality-solver",
                "text": "simple inequality solver",
                "title": "samsquire/inequality-solver",
                "footer": "<https://github.com/samsquire/inequality-solver|samsquire/inequality-solver>",
                "id": 1,
                "footer_icon": "https://github.githubassets.com/favicon.ico",
                "ts": 1587459263,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Language",
                        "value": "JavaScript",
                        "short": true
                    },
                    {
                        "title": "Last updated",
                        "value": "9 days ago",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https://github.com/samsquire/inequality-solver",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gUpsw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have an open source library for plotting widgets on the screen according to inequalities\n"
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/samsquire/inequality-solver"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ"
    },
    {
        "client_msg_id": "10025790-e8db-43fe-bcd7-f6c2da64ba6a",
        "type": "message",
        "text": "Please do share it! My substack is free - it's just a nice way to manage an email list, and add payment in later if and when it feels right.",
        "user": "U010RH58PL7",
        "ts": "1588255549.358500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lell",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Please do share it! My substack is free - it's just a nice way to manage an email list, and add payment in later if and when it feels right."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588031436.305800",
        "parent_user_id": "UR482RFPY",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UR482RFPY"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b6275149-b00f-4a80-91d7-02a48ae1ec71",
        "type": "message",
        "text": "&gt; can you do away with the notion of parent-child?\nThis is the kind of outside-the-box thinking I was looking for (pun-intended). I\u2019m not sure. I think containers are inherent, but maybe a model where a container is just a set of constraints over some children with no graphical presence itself would be possible. This deserves more thought.\n&gt; You don\u2019t know who is in charge: the container or the content.\nThis is very much the issue I\u2019m running into. I keep thinking of these fairly naive systems where its either parent-driven or child-driven, or possibly there is a point in the tree where it switches, but I don\u2019t know how to rectify them into something consistent and intuitive. I guess that\u2019s why constraint-layout is a thing.\n<@UEQ6M68H0> Great points. I think there\u2019s an element of me being suckered into thinking these interfaces would be more useful than they really would be (and I will definitely be reading Designing For People). Part of my goal, though, is to just avoid baking in too many assumptions about what makes for a useful/ergonomic/good UI. Which is perhaps itself naive.\n&gt; great design comes from building something over and over again\nAbsolutely. Part of my goal with this system is for things to get forked and redesigned and reshared by end users over and over again. I think even a great designer can\u2019t anticipate an individual\u2019s idiosyncracies as well as the individual can tweak and reshape something to fit their own brain.",
        "user": "UKDM3GLAJ",
        "ts": "1588258475.359200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "El3iI",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "can you do away with the notion of parent-child?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is the kind of outside-the-box thinking I was looking for (pun-intended). I\u2019m not sure. I think containers are inherent, but maybe a model where a container is just a set of constraints over some children with no graphical presence itself would be possible. This deserves more thought.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You don\u2019t know who is in charge: the container or the content."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is very much the issue I\u2019m running into. I keep thinking of these fairly naive systems where its either parent-driven or child-driven, or possibly there is a point in the tree where it switches, but I don\u2019t know how to rectify them into something consistent and intuitive. I guess that\u2019s why constraint-layout is a thing.\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " Great points. I think there\u2019s an element of me being suckered into thinking these interfaces would be more useful than they really would be (and I will definitely be reading Designing For People). Part of my goal, though, is to just avoid baking in too many assumptions about what makes for a useful/ergonomic/good UI. Which is perhaps itself naive.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "great design comes from building something over and over again"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Absolutely. Part of my goal with this system is for things to get forked and redesigned and reshared by end users over and over again. I think even a great designer can\u2019t anticipate an individual\u2019s idiosyncracies as well as the individual can tweak and reshape something to fit their own brain."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ"
    },
    {
        "client_msg_id": "2fa6c2df-b7bc-4433-87f1-94660d187c8e",
        "type": "message",
        "text": "<@UD6EXQVM0> Agreed \u2014 this survey question allowed people to make up to 12 selections. Not perfect, but better than \"pick your 1 favourite\".\n\nAs for how you would have missed the survey... It ran in January, and I posted about it in <#C5T9GPWFL|general> something like 3 or 4 times, and mentioned it in the podcast. And it was mentioned in the newsletter at least once, maybe twice? I think you would have been around then, since we did a meetup in Jan IIRC. So.. who knows!",
        "user": "UC2A2ARPT",
        "ts": "1588262230.361000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1588262268.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GBm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UD6EXQVM0"
                            },
                            {
                                "type": "text",
                                "text": " Agreed \u2014 this survey question allowed people to make up to 12 selections. Not perfect, but better than \"pick your 1 favourite\".\n\nAs for how you would have missed the survey... It ran in January, and I posted about it in "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": " something like 3 or 4 times, and mentioned it in the podcast. And it was mentioned in the newsletter at least once, maybe twice? I think you would have been around then, since we did a meetup in Jan IIRC. So.. who knows!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588014850.297100",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "5742d01d-8b8c-4d91-bc0d-c114bac60278",
        "type": "message",
        "text": "Recently there's been some discussion about how people mainly use spreadsheets for making lists (e.g., according to <@UEBG0NPDK> and <@U6KQ2S410>, most users have never even made a formula). If that's true, than what is the state of the art for end-user programming? Does the 1% of users that have created a formula still trump everything else? Or does that mean there's another model that we should consider more successful? And even if the spreadsheet is still the most successful model, what's the second most successful? Because the gap between the first and the second is in reality much smaller than many of us assumed.",
        "user": "UE0ETTCG7",
        "ts": "1588262541.361600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE0ETTCG7",
            "ts": "1588329279.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eL7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Recently there's been some discussion about how people mainly use spreadsheets for making lists (e.g., according to "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": ", most users have never even made a formula). If that's true, than what is the state of the art for end-user programming? Does the 1% of users that have created a formula still trump everything else? Or does that mean there's another model that we should consider more successful? And even if the spreadsheet is still the most successful model, what's the second most successful? Because the gap between the first and the second is in reality much smaller than many of us assumed."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "reply_count": 28,
        "reply_users_count": 12,
        "latest_reply": "1588405005.413900",
        "reply_users": [
            "UEBG0NPDK",
            "UC2A2ARPT",
            "UBN9AFS0N",
            "UE0ETTCG7",
            "U6KQ2S410",
            "U010SQSJGLS",
            "UCUSW7WVD",
            "ULM3U6275",
            "UMH5FAW2Y",
            "UKDM3GLAJ",
            "UA14TGLTC",
            "UEP7RL0HX"
        ],
        "subscribed": true,
        "last_read": "1588414994.414600",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "fa257a97-9c89-4489-9dfb-b019de4adc60",
        "type": "message",
        "text": "I couldn't get a committed number and 1% sounds low to me. But even if we assume that's correct, that's still on the order of 8 million people, or ~50% the size of professional developers!",
        "user": "UEBG0NPDK",
        "ts": "1588262900.361800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1588262927.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/nL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I couldn't get a committed number and 1% sounds low to me. But even if we assume that's correct, that's still on the order of 8 million people, or ~50% the size of professional developers!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UE0ETTCG7",
                    "U010RH58PL7",
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "981c4d47-9086-4ced-998b-a646f4f9ce84",
        "type": "message",
        "text": "Depending on how fuzzy you want to make your definition of \"programming\", I'd like to propose one possibility for _most widely-used_, with a degree of dynamism in between making a list and making a formula: turning some text into a hyperlink.\n\nWhich would make the WWW the most successful, which kinda feels right.",
        "user": "UC2A2ARPT",
        "ts": "1588262929.362100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1588262973.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6gYTR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Depending on how fuzzy you want to make your definition of \"programming\", I'd like to propose one possibility for "
                            },
                            {
                                "type": "text",
                                "text": "most widely-used",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", with a degree of dynamism in between making a list and making a formula: turning some text into a hyperlink.\n\nWhich would make the WWW the most successful, which kinda feels right."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "a5320f29-69e2-4ad7-af04-04b9fd7387df",
        "type": "message",
        "text": "For the question to be useful, I think you need an explicit definition of programming, like Ivan said.",
        "user": "UEBG0NPDK",
        "ts": "1588263041.362400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Sstk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For the question to be useful, I think you need an explicit definition of programming, like Ivan said."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "34529ee3-a28b-49fb-99f3-c54508c0dfe4",
        "type": "message",
        "text": "E.g. if we're willing to remove computers from programming, then the most successful version is \"management\" in all its forms, where processes are broken down and procedures are given to individual agents (whether that's in a factory, or at home with the kids + dishes)",
        "user": "UEBG0NPDK",
        "ts": "1588263132.362600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6yr3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "E.g. if we're willing to remove computers from programming, then the most successful version is \"management\" in all its forms, where processes are broken down and procedures are given to individual agents (whether that's in a factory, or at home with the kids + dishes)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "d492c972-f058-4a38-9b11-30cd979decef",
        "type": "message",
        "text": "everyone in the world programs to some degree effectively every day, they just may not do so with a computer",
        "user": "UEBG0NPDK",
        "ts": "1588263216.362800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EYql",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "everyone in the world programs to some degree effectively every day, they just may not do so with a computer"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "UU8H7M823",
                    "UMWF81HTP",
                    "UFLN9JFRT",
                    "UAVCC2X70",
                    "UCGAK10LS"
                ],
                "count": 6
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9c28912d-4cf4-4426-bf8d-98fd317968a6",
        "type": "message",
        "text": "I think there may be 3 levels of the most basic kind of programming:\n\u2022 automating some repetitive calculation with a formula\n\u2022 adding conditionals\n\u2022 some sort of iteration (in excel this one is so easy that it may come before conditionals)",
        "user": "UBN9AFS0N",
        "ts": "1588263514.363000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CVaA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think there may be 3 levels of the most basic kind of programming:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "automating some repetitive calculation with a formula"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "adding conditionals"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "some sort of iteration (in excel this one is so easy that it may come before conditionals)"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ad8ba23e-d614-4bf3-a74a-621fae7b4334",
        "type": "message",
        "text": "I consider an \"advanced excel user\" to users who use excel functions and maybe conditionals.",
        "user": "UBN9AFS0N",
        "ts": "1588263551.363200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x5Jfi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I consider an \"advanced excel user\" to users who use excel functions and maybe conditionals."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "5b4784f7-10ce-4465-a3b9-d9b9cbfd8554",
        "type": "message",
        "text": "in some paper someone mentioned that they went through all the emails of some big corporation (I think it was enron) because they were made public in a trial and they searched for attached excel spreadhseets and ran some analysis on those. That may be an \"easy\" way to get some tangible numbers",
        "user": "UBN9AFS0N",
        "ts": "1588263630.363400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iyLP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in some paper someone mentioned that they went through all the emails of some big corporation (I think it was enron) because they were made public in a trial and they searched for attached excel spreadhseets and ran some analysis on those. That may be an \"easy\" way to get some tangible numbers"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "291cdb95-8610-47fd-a322-b968ddcfee8c",
        "type": "message",
        "text": "Just adding where I got the 1% number, I wasn't sure if this was supposed to be interpreted literally <https://futureofcoding.slack.com/archives/CLYCGTCPL/p1573916033110200?thread_ts=1573703587.087300&amp;cid=CLYCGTCPL>",
        "user": "UE0ETTCG7",
        "ts": "1588263931.363800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/CLYCGTCPL/p1573916033110200?thread_ts=1573703587.087300&amp;cid=CLYCGTCPL",
                "fallback": "[November 16th, 2019 6:53 AM] jonathoda: 1% of Excel users ever create a formula ",
                "ts": "1573916033.110200",
                "author_id": "U6KQ2S410",
                "author_subname": "Jonathan Edwards",
                "channel_id": "CLYCGTCPL",
                "channel_name": "end-user-programming",
                "is_msg_unfurl": true,
                "is_reply_unfurl": true,
                "text": "1% of Excel users ever create a formula ",
                "author_name": "Jonathan Edwards",
                "author_link": "https://futureofcoding.slack.com/team/U6KQ2S410",
                "author_icon": "https://avatars.slack-edge.com/2017-08-09/225308926294_e8f4c2151d2b70ebfae3_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/CLYCGTCPL/p1573916033110200?thread_ts=1573703587.087300&amp;cid=CLYCGTCPL",
                "footer": "From a thread in #end-user-programming"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6nVJB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just adding where I got the 1% number, I wasn't sure if this was supposed to be interpreted literally "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/CLYCGTCPL/p1573916033110200?thread_ts=1573703587.087300&cid=CLYCGTCPL"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "EA147A0D-4482-42BD-A162-8EF11A67D3D2",
        "type": "message",
        "text": "Personal communication from someone at MIcrosoft Research ",
        "user": "U6KQ2S410",
        "ts": "1588264380.365700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j8U1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Personal communication from someone at MIcrosoft Research "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "a77b360f-9ffb-4987-8b0c-481da6768084",
        "type": "message",
        "text": "Don\u2019t sneer at making lists. Look at all the code it takes to build TodoMVC.",
        "user": "U6KQ2S410",
        "ts": "1588264640.366000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TnE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Don\u2019t sneer at making lists. Look at all the code it takes to build TodoMVC."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7",
        "reactions": [
            {
                "name": "open_mouth",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9ba00d51-894b-4e60-babc-bf8b9f9d5bed",
        "type": "message",
        "text": "The Enron spreadsheet corpus is useful fodder for analysis. But the difficulty is that spreadsheets are used by lots of different people for lots of different things.",
        "user": "U010SQSJGLS",
        "ts": "1588265695.366200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "COYk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Enron spreadsheet corpus is useful fodder for analysis. But the difficulty is that spreadsheets are used by lots of different people for lots of different things."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "dc835ddb-743e-4081-a8b0-423f7b58fc52",
        "type": "message",
        "text": "So yes, some are used for making lists, but the beauty of the spreadsheet is the gradual transition from data storage to data organization to computation.",
        "user": "U010SQSJGLS",
        "ts": "1588265731.366400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Qn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So yes, some are used for making lists, but the beauty of the spreadsheet is the gradual transition from data storage to data organization to computation."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UE0ETTCG7",
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "4811b870-8f7e-4659-8474-19f1d790c1eb",
        "type": "message",
        "text": "Heh, I definite wasn't looking down on lists, I love lists.\n\nHere's another relevant personal anecdote: For the first half of my career I was a UI designer, I then I switched to iOS development, and I started easily making far more money than I ever made as a designer. One of the things that baffles me about this, is that I find the job of a programmer in many ways easier than being a designer. For one, your definition of success is more straightforward (does your program work?), but I also just find searching for solutions to problems to just be easier for programming. E.g., I'd take searching for a solution to a programming problem on Stackoverflow over trying to figure out how to do something in Adobe Illustrator any day of the week. In other words, I also generally find the technical minutiae of being a programmer easier than being a designer. So it's confusing to me that programmer's are paid so much more.",
        "user": "UE0ETTCG7",
        "ts": "1588265874.366600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dHnD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Heh, I definite wasn't looking down on lists, I love lists.\n\nHere's another relevant personal anecdote: For the first half of my career I was a UI designer, I then I switched to iOS development, and I started easily making far more money than I ever made as a designer. One of the things that baffles me about this, is that I find the job of a programmer in many ways easier than being a designer. For one, your definition of success is more straightforward (does your program work?), but I also just find searching for solutions to problems to just be easier for programming. E.g., I'd take searching for a solution to a programming problem on Stackoverflow over trying to figure out how to do something in Adobe Illustrator any day of the week. In other words, I also generally find the technical minutiae of being a programmer easier than being a designer. So it's confusing to me that programmer's are paid so much more."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "UGLSY9X3J",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "98e3db78-c458-4d2f-8812-232883753bae",
        "type": "message",
        "text": "That might only seem tangentially related, but the point is that using application like Excel really well seems to me just as complicated as programming.",
        "user": "UE0ETTCG7",
        "ts": "1588265910.366800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7TlR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That might only seem tangentially related, but the point is that using application like Excel really well seems to me just as complicated as programming."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UMH5FAW2Y"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ac3bc2f7-f625-4054-a159-5b49a19baf96",
        "type": "message",
        "text": "&gt; Don\u2019t sneer at making lists. Look at all the code it takes to build TodoMVC.\n<@U6KQ2S410> Doesn't that conflate building software with using software? The term \"make a list\" could be rewritten \"use list-making software\"?",
        "user": "UCUSW7WVD",
        "ts": "1588267816.367400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QFFx",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Don\u2019t sneer at making lists. Look at all the code it takes to build TodoMVC."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " Doesn't that conflate building software with using software? The term \"make a list\" could be rewritten \"use list-making software\"?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "957f3554-bdda-4753-a99e-5560544203b6",
        "type": "message",
        "text": "<@UEBG0NPDK>\n\n&gt; everyone in the world programs to some degree effectively every day, they just may not do so with a computer\nOh yes. From the notes I shared here last year from Bonnie Nardi's _\"A small matter of programming\"_: People engage with formal systems all the time. Baseball scorecards. Knitting patterns. Following the rules of a game or sport. The book describes several others.\n\n<http://akkartik.name/post/nardi>",
        "user": "UCUSW7WVD",
        "ts": "1588268998.367900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AZZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "everyone in the world programs to some degree effectively every day, they just may not do so with a computer"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nOh yes. From the notes I shared here last year from Bonnie Nardi's "
                            },
                            {
                                "type": "text",
                                "text": "\"A small matter of programming\"",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": People engage with formal systems all the time. Baseball scorecards. Knitting patterns. Following the rules of a game or sport. The book describes several others.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http://akkartik.name/post/nardi"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "fae7e26e-d14f-4854-b79c-d2304ae200dc",
        "type": "message",
        "text": "Yeah, it's a great book :slightly_smiling_face:",
        "user": "UEBG0NPDK",
        "ts": "1588269143.368100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "48MI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, it's a great book "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "41a62e80-ab2c-4add-8370-051d493fbfa4",
        "type": "message",
        "text": "Could part of the barrier to progress in this area be due to the perspective that the problem to be solved is one of \u201cprogramming\u201d? Even calling this group \u201cFuture of Coding\u201d sort of implies that \u201cno code\u201d isn\u2019t part of the future.\n\nFor example, I don\u2019t think the spreadsheet was invented with the intent of it being programming tool, though it has arguably become the most popular programming tool. I\u2019d guess it was invented to help people do a class of things they would otherwise have to hire programmers to do.",
        "user": "ULM3U6275",
        "ts": "1588269867.368400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1588270467.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fYmii",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Could part of the barrier to progress in this area be due to the perspective that the problem to be solved is one of \u201cprogramming\u201d? Even calling this group \u201cFuture of Coding\u201d sort of implies that \u201cno code\u201d isn\u2019t part of the future.\n\nFor example, I don\u2019t think the spreadsheet was invented with the intent of it being programming tool, though it has arguably become the most popular programming tool. I\u2019d guess it was invented to help people do a class of things they would otherwise have to hire programmers to do."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7",
        "reactions": [
            {
                "name": "slightly_smiling_face",
                "users": [
                    "UEBG0NPDK"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "UEBG0NPDK"
                ],
                "count": 1
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c3667a69-a432-485f-b466-0bf52f4b8cd0",
        "type": "message",
        "text": "I think it's no secret that a lot of folks here aren't making programming tools in the traditional sense. Eg: I'm making a 2d/3d modelling tool for artists, that conveniently just so happens to have a notion of evaluation. Sneaking code in through the back door, as it were. Perhaps we need a name for that stuff: \"oh, code!\"",
        "user": "UC2A2ARPT",
        "ts": "1588273688.373900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cPSOq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think it's no secret that a lot of folks here aren't making programming tools in the traditional sense. Eg: I'm making a 2d/3d modelling tool for artists, that conveniently just so happens to have a notion of evaluation. Sneaking code in through the back door, as it were. Perhaps we need a name for that stuff: \"oh, code!\""
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UCUSW7WVD",
                    "UKJGU23KP"
                ],
                "count": 2
            },
            {
                "name": "joy",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3f9a7ad9-ee9e-4dc3-a2e1-1b1f19b3d1ac",
        "type": "message",
        "text": "&gt;  If that's true, than what is the state of the art for end-user programming?\nI think a lot of people use spreadsheets, but I have no sense of the relative proportions.  For data work, \"end\" users are also working with text-based coding (often in notebooks) and some well made GUI tools. I haven't used all the products below, but all of them have happy users:\n\u2022 For wrangling rectangles of data: Pandas in Python, dplyr in R (my personal favorite)  and SQL, and GUI tools like Alteryx and Trifacta.\n\u2022 For data visualization: Javascript/R/Python all have increasingly powerful and easy-ish to use options for viz, there are chart chooser tools like DataWrapper and Flourish, and GUI tools with sophisticated grammars of graphics like Tableau.\n",
        "user": "UMH5FAW2Y",
        "ts": "1588273890.374100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "40ma",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " If that's true, than what is the state of the art for end-user programming?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think a lot of people use spreadsheets, but I have no sense of the relative proportions.  For data work, \"end\" users are also working with text-based coding (often in notebooks) and some well made GUI tools. I haven't used all the products below, but all of them have happy users:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "For wrangling rectangles of data: Pandas in Python, dplyr in R (my personal favorite)  and SQL, and GUI tools like Alteryx and Trifacta."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "For data visualization: Javascript/R/Python all have increasingly powerful and easy-ish to use options for viz, there are chart chooser tools like DataWrapper and Flourish, and GUI tools with sophisticated grammars of graphics like Tableau."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "c62d1470-8033-464f-a902-0b648b0d15f4",
        "type": "message",
        "text": "Wrt most users never writing a formula, I think there\u2019s a couple of different interpretations worth sussing out.\n\u2022 Most users never write a formula and spend time laboriously copying out data and doing calculations\n\u2022 Most users never write a formula and pay other users to develop custom \u201cprogrammed\u201d sheets that they then enter data into\n\u2022 Most users never write a formula and are still fantastically productive with spreadsheets.\nThere\u2019s some overlap here, but the fact that a system has a powerful component that doesn\u2019t get used isn\u2019t necessarily a failure of that system, even in a context where we think providing that power is good. What I think would constitute a serious criticism of spreadsheet software is users occasionally try to write a formula, but get confused and frustrated and give up.",
        "user": "UKDM3GLAJ",
        "ts": "1588275133.374500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a3Z6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wrt most users never writing a formula, I think there\u2019s a couple of different interpretations worth sussing out.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Most users never write a formula and spend time laboriously copying out data and doing calculations"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Most users never write a formula and pay other users to develop custom \u201cprogrammed\u201d sheets that they then enter data into"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Most users never write a formula and are still fantastically productive with spreadsheets."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There\u2019s some overlap here, but the fact that a system has a powerful component that doesn\u2019t get used isn\u2019t necessarily a failure of that system, even in a context where we think providing that power is good. What I think would constitute a serious criticism of spreadsheet software is users occasionally try to write a formula, but get confused and frustrated and give up."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "d6e37def-0864-4caa-97d4-8df3d7e757ce",
        "type": "message",
        "text": "Let's get into the weeds \u2014 I personally know a handful of folks who have learned that you can type `=` and then band-select a number of cells to produce a sum. That's all they know. I suspect that puts them on the edge between the 1% and the 99%, though which side of that edge and how wide the edge is, who's to say.",
        "user": "UC2A2ARPT",
        "ts": "1588279597.375400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0IKKC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Let's get into the weeds \u2014 I personally know a handful of folks who have learned that you can type "
                            },
                            {
                                "type": "text",
                                "text": "=",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and then band-select a number of cells to produce a sum. That's all they know. I suspect that puts them on the edge between the 1% and the 99%, though which side of that edge and how wide the edge is, who's to say."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "87c60998-f64a-4464-ac0a-c8d601cb7633",
        "type": "message",
        "text": "<@UC2A2ARPT>\n\n&gt; Sneaking code in through the back door\nOne example I've periodically noodled on is a more powerful email filter. By the time you provide the capability to inspect attachments and perform n-gram analysis you start naturally needing to treat existing emails as a test corpus.",
        "user": "UCUSW7WVD",
        "ts": "1588280840.375800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u+he",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sneaking code in through the back door"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nOne example I've periodically noodled on is a more powerful email filter. By the time you provide the capability to inspect attachments and perform n-gram analysis you start naturally needing to treat existing emails as a test corpus."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "U010RH58PL7"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "be0655fe-75a2-4999-bab9-f01c039a1427",
        "type": "message",
        "text": "\"On the usability of editable software\"\n<https://flak.tedunangst.com/post/on-the-usability-of-editable-software>\n<https://lobste.rs/s/qkpwpa/on_usability_editable_software>\n\nLots of room for thinking about how language design affects the ability to customize software without the anticipation of the original developer. Eg emacs lisp allows redefining functions without having to fork the original library. Eg languages with private/public settings that are enforced by the compiler completely prevent that kind of reuse/rediting, forcing the user to fork which is a pretty heavy-weight operation.",
        "user": "U71PMQ1V0",
        "ts": "1588289513.379000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U71PMQ1V0",
            "ts": "1588289523.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V/ixN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"On the usability of editable software\"\n"
                            },
                            {
                                "type": "link",
                                "url": "https://flak.tedunangst.com/post/on-the-usability-of-editable-software"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://lobste.rs/s/qkpwpa/on_usability_editable_software"
                            },
                            {
                                "type": "text",
                                "text": "\n\nLots of room for thinking about how language design affects the ability to customize software without the anticipation of the original developer. Eg emacs lisp allows redefining functions without having to fork the original library. Eg languages with private/public settings that are enforced by the compiler completely prevent that kind of reuse/rediting, forcing the user to fork which is a pretty heavy-weight operation."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588289513.379000",
        "reply_count": 16,
        "reply_users_count": 6,
        "latest_reply": "1588346909.408700",
        "reply_users": [
            "UCUSW7WVD",
            "U71PMQ1V0",
            "UEBG0NPDK",
            "UT60XSVCN",
            "UJBAJNFLK",
            "UE0ETTCG7"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "5d4e6644-363b-47b2-8d2a-2bbc7eeb287d",
        "type": "message",
        "text": "The Flutter layout model is very simple and expressive - <https://youtu.be/UUfXWzp0-DU?t=201>. The proposed model for extensible layouts on the web uses almost exactly the same api.\n\nMany immediate-mode gui libraries don't have a concept of parent-child relations. Instead widget functions take a rect that tells them where to draw themselves, and there are a bunch of convenience functions for splitting rects in different ways. Eg page 31 of <https://ourmachinery.com/docs/writing-tools-faster/index.html>",
        "user": "U71PMQ1V0",
        "ts": "1588289985.379300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Flutter's Rendering Pipeline",
                "title_link": "https://youtu.be/UUfXWzp0-DU?t=201",
                "author_name": "GoogleTechTalks",
                "author_link": "https://www.youtube.com/user/GoogleTechTalks",
                "thumb_url": "https://i.ytimg.com/vi/UUfXWzp0-DU/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Flutter's Rendering Pipeline",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/UUfXWzp0-DU?start=201&feature=oembed&start=201&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/UUfXWzp0-DU?t=201",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/UUfXWzp0-DU?t=201"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "shj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Flutter layout model is very simple and expressive - "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/UUfXWzp0-DU?t=201"
                            },
                            {
                                "type": "text",
                                "text": ". The proposed model for extensible layouts on the web uses almost exactly the same api.\n\nMany immediate-mode gui libraries don't have a concept of parent-child relations. Instead widget functions take a rect that tells them where to draw themselves, and there are a bunch of convenience functions for splitting rects in different ways. Eg page 31 of "
                            },
                            {
                                "type": "link",
                                "url": "https://ourmachinery.com/docs/writing-tools-faster/index.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKDM3GLAJ"
                ],
                "count": 1
            }
        ]
    }
]