[
    {
        "client_msg_id": "1d7b260b-028c-43e3-bbae-2cb21d98d795",
        "type": "message",
        "text": "<@UC21F8Q48> <@UEQ6M68H0> - The calculator example in <http://ppig.org/sites/ppig.org/files/2017-PPIG-28th-lewis.pdf> is good. It is a good example of assessing value add using your end uses current solution. The end users current solution was algebraic notation. Most users would have been using algebraic notation, very few end users would have been using  Polish notation. The calculator offered a value add the end users current solution.\n\nI understand that end users could have learned polish notation, but the size of the value add would have been very small. As we know the size of the value add impacts innovation adoption. Working from a current end user solutions give a useful way of comparing different value adds.\n\nMicrosoft used to spend a lot of time debating innovations. They did not have a good way to assess value adds. But when they started to use current user solutions as a way to  assess different ideas, most of the debate stopped. This suggests that, despite the difficulty of assessing value adds, the method does work,",
        "user": "UP6G25H35",
        "ts": "1580691203.033400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EET",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC21F8Q48"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " - The calculator example in "
                            },
                            {
                                "type": "link",
                                "url": "http://ppig.org/sites/ppig.org/files/2017-PPIG-28th-lewis.pdf"
                            },
                            {
                                "type": "text",
                                "text": " is good. It is a good example of assessing value add using your end uses current solution. The end users current solution was algebraic notation. Most users would have been using algebraic notation, very few end users would have been using  Polish notation. The calculator offered a value add the end users current solution.\n\nI understand that end users could have learned polish notation, but the size of the value add would have been very small. As we know the size of the value add impacts innovation adoption. Working from a current end user solutions give a useful way of comparing different value adds.\n\nMicrosoft used to spend a lot of time debating innovations. They did not have a good way to assess value adds. But when they started to use current user solutions as a way to  assess different ideas, most of the debate stopped. This suggests that, despite the difficulty of assessing value adds, the method does work,"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580606860.029700",
        "parent_user_id": "UP6G25H35"
    },
    {
        "client_msg_id": "6a14b6e7-cb5a-4ae3-8c8b-14dfa5e99327",
        "type": "message",
        "text": "Microsoft had a very different philosophy than Apple. MS used Wizards extensively in both the OS and in their Apps. It is still true to this day. Apple would just dump you into a document and give you a tool palette, because they would try to simplify the process to fewer steps, and reduce the number of options. Sometimes Apple would strip away features that gave more customization, but MS would typically have more features, and organize the process into a multi-screen system. MS was shooting for a larger audience (appropriate given their 90%+ marketshare), and i think it worked pretty well. Interestingly, i don't see a lot of guided wizard programming tools in the FoC project lists. Almost all of the node and wire tools give you a blank screen, and don't walk you through it. I think there is an unconscious expectation that some kind of guiding wizard will appear for programming.",
        "user": "UEQ6M68H0",
        "ts": "1580709547.033600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Om/Pr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Microsoft had a very different philosophy than Apple. MS used Wizards extensively in both the OS and in their Apps. It is still true to this day. Apple would just dump you into a document and give you a tool palette, because they would try to simplify the process to fewer steps, and reduce the number of options. Sometimes Apple would strip away features that gave more customization, but MS would typically have more features, and organize the process into a multi-screen system. MS was shooting for a larger audience (appropriate given their 90%+ marketshare), and i think it worked pretty well. Interestingly, i don't see a lot of guided wizard programming tools in the FoC project lists. Almost all of the node and wire tools give you a blank screen, and don't walk you through it. I think there is an unconscious expectation that some kind of guiding wizard will appear for programming."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580606860.029700",
        "parent_user_id": "UP6G25H35"
    },
    {
        "client_msg_id": "ea102cb1-34a0-4b19-9427-83bc16358605",
        "type": "message",
        "text": "As for why RPN has all but disappeared from calculators, RPN was designed around the limitations of the HP calculator keyboard, which did not have sufficient keys to devote to parentheses characters. The HP calculator had a 4 level deep register stack, and operations like 2 3 4 + * would add 3 and 4 then multiply by 2. This chaining operation allows you to store intermediate results without having to name them, which would also require buttons to store/retrieve temporary results. Basically RPN was a compromise caused by hardware limitations of the day, and a wish to use fewer keystrokes for the operations of entering programs, as stored programs was the \"power feature\" of the HP calculator that made it so revolutionary. Once you add an alphabetic keyboard and can name variables, you are way beyond HP's simplistic language.",
        "user": "UEQ6M68H0",
        "ts": "1580710310.033800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pkYm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As for why RPN has all but disappeared from calculators, RPN was designed around the limitations of the HP calculator keyboard, which did not have sufficient keys to devote to parentheses characters. The HP calculator had a 4 level deep register stack, and operations like 2 3 4 + * would add 3 and 4 then multiply by 2. This chaining operation allows you to store intermediate results without having to name them, which would also require buttons to store/retrieve temporary results. Basically RPN was a compromise caused by hardware limitations of the day, and a wish to use fewer keystrokes for the operations of entering programs, as stored programs was the \"power feature\" of the HP calculator that made it so revolutionary. Once you add an alphabetic keyboard and can name variables, you are way beyond HP's simplistic language."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580606860.029700",
        "parent_user_id": "UP6G25H35",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UP6G25H35"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "text": "HP keyboard",
        "files": [
            {
                "id": "FTEULT2MS",
                "created": 1580710319,
                "timestamp": 1580710319,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UEQ6M68H0",
                "editable": false,
                "size": 304801,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-FTEULT2MS/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-FTEULT2MS/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-FTEULT2MS-36d7b352f4/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-FTEULT2MS-36d7b352f4/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-FTEULT2MS-36d7b352f4/image_360.png",
                "thumb_360_w": 162,
                "thumb_360_h": 360,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-FTEULT2MS-36d7b352f4/image_480.png",
                "thumb_480_w": 215,
                "thumb_480_h": 480,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-FTEULT2MS-36d7b352f4/image_160.png",
                "image_exif_rotation": 1,
                "original_w": 250,
                "original_h": 557,
                "thumb_tiny": "AwAwABUiiXylO0HNPMaA42DNJHJGIApYZwe9Izr/AHgTnPWgBjou77opNi/3V/KlyCeCDxRQBEYgFDZXknjGTSJFu444GPuinb+zAlR2pAcHjj8KYEkaBc47+2KfxUasSMnOfel3UANhRXmIdQRjvxUwhiwDtXO3PU9ar28wSTf146ZwamFyAuMH7uPvUgI2OMUm6o5plyMfzqPzfamB/9k=",
                "permalink": "https://futureofcoding.slack.com/files/UEQ6M68H0/FTEULT2MS/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-FTEULT2MS-15a6a44858",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": true,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o5a",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "HP keyboard"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UEQ6M68H0",
        "display_as_bot": false,
        "ts": "1580710322.034000",
        "client_msg_id": "6f584560-57bd-4d40-938e-32d756a57bbf",
        "thread_ts": "1580606860.029700",
        "parent_user_id": "UP6G25H35",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UP6G25H35"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b6d69e9b-b0cb-4c97-a2bb-2bd3d5447707",
        "type": "message",
        "text": "by adding twice as many buttons (and using each button 3 times via 2 different SHIFT keys), TI blew HP out of the market with easier programming, and larger feature set. RPN is like FORTH; once you know it, it is actually preferable as it is elegant, not needing parentheses; but it requires more mental gymnastics to be performed. So it isn't hard to imagine the unwashed masses loving TI.  Interestingly PostScript also uses RPN.  And one can see that PostScript is not used much as an explicit programming language today, so one could say that the public has voted with their feet, and rejected RPN as requiring too much short term memory, as one cannot read RPN code unless you mentally track what is on the stack. FORTRAN/Algol wins again, because it more closely matches traditional algebraic notation.  One can also say that the programming public has rejected excessive parenthetical notations like LISP uses. I believe it is also rejecting syntaxes that require the reader to know how many arguments are used by a function. There are some languages where you say func x y z but you don't know how many are going to be absorbed by the function. This implies memorization of each functions argument list number; that is a burden for those in the audience that cannot easily remember arbitrary things like parameter lists.  How much one has to memorize to program in a language is a major factor in usability. In some languages like Java, there is a staggering burden related to the API's that are available. Just knowing which of the 10,000 API library routines you could call is probably the largest area sub-section in its learning curve.",
        "user": "UEQ6M68H0",
        "ts": "1580710779.034400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1580711233.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hrf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "by adding twice as many buttons (and using each button 3 times via 2 different SHIFT keys), TI blew HP out of the market with easier programming, and larger feature set. RPN is like FORTH; once you know it, it is actually preferable as it is elegant, not needing parentheses; but it requires more mental gymnastics to be performed. So it isn't hard to imagine the unwashed masses loving TI.  Interestingly PostScript also uses RPN.  And one can see that PostScript is not used much as an explicit programming language today, so one could say that the public has voted with their feet, and rejected RPN as requiring too much short term memory, as one cannot read RPN code unless you mentally track what is on the stack. FORTRAN/Algol wins again, because it more closely matches traditional algebraic notation.  One can also say that the programming public has rejected excessive parenthetical notations like LISP uses. I believe it is also rejecting syntaxes that require the reader to know how many arguments are used by a function. There are some languages where you say func x y z but you don't know how many are going to be absorbed by the function. This implies memorization of each functions argument list number; that is a burden for those in the audience that cannot easily remember arbitrary things like parameter lists.  How much one has to memorize to program in a language is a major factor in usability. In some languages like Java, there is a staggering burden related to the API's that are available. Just knowing which of the 10,000 API library routines you could call is probably the largest area sub-section in its learning curve."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580606860.029700",
        "parent_user_id": "UP6G25H35"
    },
    {
        "client_msg_id": "277a1d89-62db-4162-9385-e6dd0e8eba98",
        "type": "message",
        "text": "I've written some posts about \"Observable for Jupyter Users,\" wondering if people find them useful.\n\u2022 Differences between Jupyter and Observable <https://observablehq.com/d/b00406054cfb4875>\n\u2022 Visualize a data frame with Observable <https://observablehq.com/d/eceaa744227c4fea>\n\u2022 Interactivity in Observable <https://observablehq.com/d/c4e1459a8a99cdaf>\n\u2022 Bonus: JavaScript for Python Programmers: <https://observablehq.com/d/5e82392bae5fb729>\nI'd be particularly interested in whether you think I'm identifying the differences in workflow in a digestible way. The goal is that these are tutorials, not marketing documents, if there's a difference. I guess they're marketing documents for programmers, not CEOs.",
        "user": "UE3KC0VK6",
        "ts": "1580753303.039100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE3KC0VK6",
            "ts": "1580754122.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N0fH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've written some posts about \"Observable for Jupyter Users,\" wondering if people find them useful.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Differences between Jupyter and Observable "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://observablehq.com/d/b00406054cfb4875"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Visualize a data frame with Observable "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://observablehq.com/d/eceaa744227c4fea"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Interactivity in Observable "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://observablehq.com/d/c4e1459a8a99cdaf"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Bonus: JavaScript for Python Programmers: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://observablehq.com/d/5e82392bae5fb729"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI'd be particularly interested in whether you think I'm identifying the differences in workflow in a digestible way. The goal is that these are tutorials, not marketing documents, if there's a difference. I guess they're marketing documents for programmers, not CEOs."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580753303.039100",
        "reply_count": 24,
        "reply_users_count": 5,
        "latest_reply": "1581183426.083300",
        "reply_users": [
            "UC2A2ARPT",
            "UE3KC0VK6",
            "UMH5FAW2Y",
            "UP6G25H35",
            "UJBAJNFLK"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "e3661396-8506-47a0-bce1-1f98c0dd625b",
        "type": "message",
        "text": "No worries about the disclosure! There's a solid contingent of people here who are being paid to work on their projects, and are facing very interesting and challenging issues. This is a space where people are encouraged share those sorts of projects and issues. Sure, excessive self-promotion is bad, but you have to go pretty far before running into that line. Please, feel free to post much more about your work on Observable.",
        "user": "UC2A2ARPT",
        "ts": "1580753664.039200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bVa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No worries about the disclosure! There's a solid contingent of people here who are being paid to work on their projects, and are facing very interesting and challenging issues. This is a space where people are encouraged share those sorts of projects and issues. Sure, excessive self-promotion is bad, but you have to go pretty far before running into that line. Please, feel free to post much more about your work on Observable."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580753303.039100",
        "parent_user_id": "UE3KC0VK6"
    },
    {
        "client_msg_id": "28a2c57f-42ed-4348-a922-1523283a73f4",
        "type": "message",
        "text": "(I would gladly read and give feedback on the articles, but I don't actually use/like computational notebooks, so I'd not be able to offer useful info. Sorry! Hopefully someone else here will be of more help.)",
        "user": "UC2A2ARPT",
        "ts": "1580753783.039400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bMv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(I would gladly read and give feedback on the articles, but I don't actually use/like computational notebooks, so I'd not be able to offer useful info. Sorry! Hopefully someone else here will be of more help.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580753303.039100",
        "parent_user_id": "UE3KC0VK6"
    },
    {
        "client_msg_id": "2d80743e-38eb-4cc1-a846-f6f012489aeb",
        "type": "message",
        "text": "Great to hear! I What made me think of this was that I'm asking for feedback and edits I could be paying somebody to do, so want to make it open that I am being paid. I'll remove this disclosure and add it to this thread.",
        "user": "UE3KC0VK6",
        "ts": "1580754110.039600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "egP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great to hear! I What made me think of this was that I'm asking for feedback and edits I could be paying somebody to do, so want to make it open that I am being paid. I'll remove this disclosure and add it to this thread."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580753303.039100",
        "parent_user_id": "UE3KC0VK6"
    },
    {
        "client_msg_id": "e89d2d15-0519-46ca-affd-91bd92b95498",
        "type": "message",
        "text": "Disclosure message I removed:\n&gt;  Disclosure: I'm asking for feedback on a project I'm being paid to do for work (I work at Observable)",
        "user": "UE3KC0VK6",
        "ts": "1580754142.039900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5AUh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Disclosure message I removed:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " Disclosure: I'm asking for feedback on a project I'm being paid to do for work (I work at Observable)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580753303.039100",
        "parent_user_id": "UE3KC0VK6",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "eee102c5-2fa2-424b-912e-0a4e63920640",
        "type": "message",
        "text": "Interesting topic! I think Ruby on Rails could be an example of this, it was created based on code/needs from implementing Basecamp. <https://en.wikipedia.org/wiki/Ruby_on_Rails#History>",
        "user": "UEQ7QL15F",
        "ts": "1580754693.040400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/6/62/Ruby_On_Rails_Logo.svg/1200px-Ruby_On_Rails_Logo.svg.png",
                "image_width": 1200,
                "image_height": 453,
                "image_bytes": 24879,
                "title": "Ruby on Rails",
                "title_link": "https://en.wikipedia.org/wiki/Ruby_on_Rails#History",
                "from_url": "https://en.wikipedia.org/wiki/Ruby_on_Rails#History",
                "author_name": "Wikipedia",
                "author_link": "https://en.wikipedia.org/",
                "text": "Ruby on Rails, or Rails, is a server-side web application framework written in Ruby under the MIT License. Rails is a model\u2013view\u2013controller (MVC) framework, providing default structures for a database, a web service, and web pages. It encourages and facilitates the use of web standards such as JSON or XML for data transfer, HTML, CSS and JavaScript for user interfacing. In addition to MVC, Rails emphasizes the use of other well-known software engineering patterns and paradigms, including convention over configuration (CoC), don't repeat yourself (DRY), and the active record pattern.Ruby on Rails' emergence in the 2000s greatly influenced web app development, through innovative features such as seamless database table creations, migrations, and scaffolding of views to enable rapid application development. Ruby on Rails' influence on other web frameworks remains apparent today, with many frameworks in other languages borrowing its ideas, including Django in Python, Catalyst in Perl, Laravel and CakePHP in PHP, Phoenix in Elixir, Play in Scala, and Sails.js in Node.js.",
                "fallback": "wikipedia: Ruby on Rails",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png",
                "id": 1,
                "original_url": "https://en.wikipedia.org/wiki/Ruby_on_Rails#History"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "onaQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting topic! I think Ruby on Rails could be an example of this, it was created based on code/needs from implementing Basecamp. "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Ruby_on_Rails#History"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580606860.029700",
        "parent_user_id": "UP6G25H35",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UP6G25H35",
                    "UA14TGLTC",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "c0c6edde-e4ce-4ba4-8453-86b15d05584c",
        "type": "message",
        "text": "Hey Thomas. We chatted briefly about FoC and notebooks at the December Observable meetup.  I've been using the platform more since then and having a ton of fun!  Buncha random notes on the top \"Differences\" notebook:\n\n1. It's definitely a tough challenge to balance the tutorial aspect with the marketing aspect, but I think you should be a little more market-y, at least at the beginning of the first notebook. If you're imagining this as an entry point to Observable for a whole class of users, you should include a little more sizzle, and a clearer value proposition.\n1. I think you ought to list all the major differences after the first paragraph. Like literally: \"The 3 Big Differences are...\"\n1. You don't make it explicit, but it feels like the differences map well to abstraction level:\n  1. Code in a cell: Everything is (more or less) client-side Javascript\n  1. Cells in a notebook: Reactive Topological Execution\n  1. Notebooks in an ecosystem: Forking, Sharing, Imports...Users, Likes, Collections, Teams don't get mentioned, but the allure of the community features is a big selling point to me.\n1. The important little differences are still important. If you're coming from Jupyter, you want to know the keyboard shotcut to execute code is not the same. But I think you might want to given the \"new web superpowers\" more promience than the need to put parens around object literals.\n1. For explaining the reactive nature of notebooks, I find the DAG visualizations in @observablehq/how-observable-runs to be really helpful.  More broadly, It'd be great to see some visualization in this introduction to a visualization platform.\n1. I trust a product more when it's up front about what it can't do well.  Other than the challenge of learning the new model, I'd be interested to hear what a Jupyter user might actually miss, or work for which Observable might be a worse option.\n1. On the flip side of that, if you believe have good answers, it might be useful to reference the paper from this thread <https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580337617251900> and talk about the \"The Problems with Notebooks\" that aren't problems for Observable.\n1. This sentence at the end is actually a great succint sales pitch.  Maybe lead with it: \"The combination of living on the web, reactive coding, and cell imports makes Observable a uniquely dynamic community of collaborative creative coders.\"",
        "user": "UMH5FAW2Y",
        "ts": "1580762695.040700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580337617251900",
                "fallback": "[January 29th, 2020 2:40 PM] services: Interesting analysis of \"Computational notebooks, such as Jupyter Notebooks, Azure Notebooks, and Databricks\". These observations seem spot on to me, any theories about why these problems haven't been fixed yet? Or are they not problems at all? <http://web.eecs.utk.edu/~azh/blog/notebookpainpoints.html>",
                "ts": "1580337617.251900",
                "author_id": "UE0ETTCG7",
                "author_subname": "Roben Kleene",
                "channel_id": "C5T9GPWFL",
                "channel_name": "general",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "Interesting analysis of \"Computational notebooks, such as Jupyter Notebooks, Azure Notebooks, and Databricks\". These observations seem spot on to me, any theories about why these problems haven't been fixed yet? Or are they not problems at all? <http://web.eecs.utk.edu/~azh/blog/notebookpainpoints.html>",
                "author_name": "Roben Kleene",
                "author_link": "https://futureofcoding.slack.com/team/UE0ETTCG7",
                "author_icon": "https://avatars.slack-edge.com/2018-11-08/475666469605_2d5718395ee31c13bb5d_48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580337617251900",
                "footer": "Thread in #general"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cbq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey Thomas. We chatted briefly about FoC and notebooks at the December Observable meetup.  I've been using the platform more since then and having a ton of fun!  Buncha random notes on the top \"Differences\" notebook:\n\n1. It's definitely a tough challenge to balance the tutorial aspect with the marketing aspect, but I think you should be a little more market-y, at least at the beginning of the first notebook. If you're imagining this as an entry point to Observable for a whole class of users, you should include a little more sizzle, and a clearer value proposition.\n1. I think you ought to list all the major differences after the first paragraph. Like literally: \"The 3 Big Differences are...\"\n1. You don't make it explicit, but it feels like the differences map well to abstraction level:\n  1. Code in a cell: Everything is (more or less) client-side Javascript\n  1. Cells in a notebook: Reactive Topological Execution\n  1. Notebooks in an ecosystem: Forking, Sharing, Imports...Users, Likes, Collections, Teams don't get mentioned, but the allure of the community features is a big selling point to me.\n1. The important little differences are still important. If you're coming from Jupyter, you want to know the keyboard shotcut to execute code is not the same. But I think you might want to given the \"new web superpowers\" more promience than the need to put parens around object literals.\n1. For explaining the reactive nature of notebooks, I find the DAG visualizations in @observablehq/how-observable-runs to be really helpful.  More broadly, It'd be great to see some visualization in this introduction to a visualization platform.\n1. I trust a product more when it's up front about what it can't do well.  Other than the challenge of learning the new model, I'd be interested to hear what a Jupyter user might actually miss, or work for which Observable might be a worse option.\n1. On the flip side of that, if you believe have good answers, it might be useful to reference the paper from this thread "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580337617251900"
                            },
                            {
                                "type": "text",
                                "text": " and talk about the \"The Problems with Notebooks\" that aren't problems for Observable.\n1. This sentence at the end is actually a great succint sales pitch.  Maybe lead with it: \"The combination of living on the web, reactive coding, and cell imports makes Observable a uniquely dynamic community of collaborative creative coders.\""
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580753303.039100",
        "parent_user_id": "UE3KC0VK6"
    },
    {
        "client_msg_id": "b8468fc1-c5ac-4e7f-9e90-26d912a13f5f",
        "type": "message",
        "text": "Thanks Alex! Real helpful to hear.\n\u2022 I'm not imagining this is the initial entry point to Observable, but I should think about that use case because it's possible.\n\u2022 I like this three levels breakdown a lot.\n\u2022 The next notebook in the series is about data and visualization, but if it keeps people reading to sprinkle some of this in here maybe I should do that.",
        "user": "UE3KC0VK6",
        "ts": "1580767127.041100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE3KC0VK6",
            "ts": "1580767140.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m4T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks Alex! Real helpful to hear.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I'm not imagining this is the initial entry point to Observable, but I should think about that use case because it's possible."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I like this three levels breakdown a lot."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The next notebook in the series is about data and visualization, but if it keeps people reading to sprinkle some of this in here maybe I should do that."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1580753303.039100",
        "parent_user_id": "UE3KC0VK6",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMH5FAW2Y"
                ],
                "count": 1
            }
        ]
    }
]