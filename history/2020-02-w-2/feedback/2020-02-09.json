[
    {
        "client_msg_id": "405700f6-ad77-4c06-a024-332d6f6d543e",
        "type": "message",
        "text": "<@ULM3U6275> The article says \"Contrast this with a typical HTML + SVG type of solution. While we can show visualizations in SVG, we cannot easily combine and connect them with the surrounding HTML world.\" I'm not a web programmer, so I can't talk knowledgeably about the difference between using SVG and Canvas.\n\nI've been thinking about an FoC inspired visual programming UI for my Curv language. Curv is a pure functional language for constructing, animating and interacting with 3D shapes, which can only be rendered using a GPU. For some time, I have suspected that the only no-compromise approach, that will deliver exactly the UI I want, is to build a new graphics/UI stack from the ground up. To run the UI in a web browser, I need to render the entire UI on a single graphics surface using WebGPU. Since I also want a native client (which will have higher performance and fewer compromises than the web client), the natural strategy is to implement the client in some language that compiles into either web assembly or native code, and use the WebGPU API to build the graphics/UI stack. This is a very ambitious goal. It would of course be easier if I had access to a pre-existing FoC/visual programming graphics/UI toolkit that already supported everything I need on all the platforms I want to target, rather than coding something from scratch.\n\n<@UE1JQM9HQ>'s article about the Glamorous Toolkit's graphics stack is very welcome, in that it helps me to better understand what my requirements are for a graphics stack. Picking the right language and graphics toolkit to use as a starting point is the next step after I understand my requirements better.",
        "user": "UJN1TAYEQ",
        "ts": "1581207298.084600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PaC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": " The article says \"Contrast this with a typical HTML + SVG type of solution. While we can show visualizations in SVG, we cannot easily combine and connect them with the surrounding HTML world.\" I'm not a web programmer, so I can't talk knowledgeably about the difference between using SVG and Canvas.\n\nI've been thinking about an FoC inspired visual programming UI for my Curv language. Curv is a pure functional language for constructing, animating and interacting with 3D shapes, which can only be rendered using a GPU. For some time, I have suspected that the only no-compromise approach, that will deliver exactly the UI I want, is to build a new graphics/UI stack from the ground up. To run the UI in a web browser, I need to render the entire UI on a single graphics surface using WebGPU. Since I also want a native client (which will have higher performance and fewer compromises than the web client), the natural strategy is to implement the client in some language that compiles into either web assembly or native code, and use the WebGPU API to build the graphics/UI stack. This is a very ambitious goal. It would of course be easier if I had access to a pre-existing FoC/visual programming graphics/UI toolkit that already supported everything I need on all the platforms I want to target, rather than coding something from scratch.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UE1JQM9HQ"
                            },
                            {
                                "type": "text",
                                "text": "'s article about the Glamorous Toolkit's graphics stack is very welcome, in that it helps me to better understand what my requirements are for a graphics stack. Picking the right language and graphics toolkit to use as a starting point is the next step after I understand my requirements better."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581166076.065600",
        "parent_user_id": "UE1JQM9HQ",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b18f2e27-479b-4cb5-8fe7-cc7944a954b9",
        "type": "message",
        "text": "<@ULM3U6275> the DOM is a rendering tree. Except that, for example, a `&lt;textarea&gt;` is a leaf. So, from the DOM\u2019s perspective, a text area is a black box. In our case, it is not.\n\nAbout HTML+SVG, I used this as comparison because this is what d3js does.",
        "user": "UE1JQM9HQ",
        "ts": "1581219079.084900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE1JQM9HQ",
            "ts": "1581219143.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hu1K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": " the DOM is a rendering tree. Except that, for example, a "
                            },
                            {
                                "type": "text",
                                "text": "<textarea>",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is a leaf. So, from the DOM\u2019s perspective, a text area is a black box. In our case, it is not.\n\nAbout HTML+SVG, I used this as comparison because this is what d3js does."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581166076.065600",
        "parent_user_id": "UE1JQM9HQ"
    },
    {
        "client_msg_id": "1da8a08e-4a74-4dbd-b27e-4d2724b097d8",
        "type": "message",
        "text": "A Canvas is even more of a black box than SVG. At least the SVG is part of the same tree as the HTML.",
        "user": "UE1JQM9HQ",
        "ts": "1581221678.085300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE1JQM9HQ",
            "ts": "1581221687.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wS/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A Canvas is even more of a black box than SVG. At least the SVG is part of the same tree as the HTML."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581166076.065600",
        "parent_user_id": "UE1JQM9HQ"
    },
    {
        "client_msg_id": "c1671268-33f9-424e-835e-7071115e42ce",
        "type": "message",
        "text": "<@UJN1TAYEQ> I am glad the article is of help :slightly_smiling_face:.",
        "user": "UE1JQM9HQ",
        "ts": "1581222323.085600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fno",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " I am glad the article is of help "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581166076.065600",
        "parent_user_id": "UE1JQM9HQ"
    },
    {
        "client_msg_id": "002a83a0-31dd-41f5-b992-73f35f6f2f03",
        "type": "message",
        "text": "Very interesting subject. Thanks for the summary! There is a lot to take away from it, and I definetly will read the paper when I have time (hard to find for now...). I am curious to see if one can use this kind of representation in a visual programming environment. Maybe I will experiment with it!",
        "user": "UJ6LDMMN0",
        "ts": "1581238074.085900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "39vvy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very interesting subject. Thanks for the summary! There is a lot to take away from it, and I definetly will read the paper when I have time (hard to find for now...). I am curious to see if one can use this kind of representation in a visual programming environment. Maybe I will experiment with it!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581097755.051800",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "a7d337fb-0dd8-4953-93ae-35b9bc513fd2",
        "type": "message",
        "text": "<@UAZT04VT4> was looking into it",
        "user": "UBN9AFS0N",
        "ts": "1581242723.086100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uIHY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAZT04VT4"
                            },
                            {
                                "type": "text",
                                "text": " was looking into it"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581097755.051800",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "0f95e135-8d57-4a98-a768-48826ba9ff10",
        "type": "message",
        "text": "<@UE1JQM9HQ> Yes, that makes sense. It certainly would be ideal to have access to the full tree, though I\u2019m not sure what the performance trade offs are. I guess there\u2019s the option of  breaking text or SVG into separate elements only where needed.",
        "user": "ULM3U6275",
        "ts": "1581276838.086500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1581280223.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sklKn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE1JQM9HQ"
                            },
                            {
                                "type": "text",
                                "text": " Yes, that makes sense. It certainly would be ideal to have access to the full tree, though I\u2019m not sure what the performance trade offs are. I guess there\u2019s the option of  breaking text or SVG into separate elements only where needed."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581166076.065600",
        "parent_user_id": "UE1JQM9HQ"
    }
]