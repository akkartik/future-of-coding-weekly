[
    {
        "client_msg_id": "22caf0a2-f549-47d4-9a96-89cde8c4e4a6",
        "type": "message",
        "text": "Genuine vs false insight is most certainly a topic near and dear to Blow's heart.  This interview was fantastic, and I've noticed that the more Blow talks about this stuff the more nuanced he becomes \u2014 not tolerant of ill considered nonsense or the kids these days \u2014 but willing to scope claims.",
        "user": "UA14TGLTC",
        "ts": "1580688548.408800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RHvIU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Genuine vs false insight is most certainly a topic near and dear to Blow's heart.  This interview was fantastic, and I've noticed that the more Blow talks about this stuff the more nuanced he becomes \u2014 not tolerant of ill considered nonsense or the kids these days \u2014 but willing to scope claims."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580480732.286100",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "point_up_2",
                "users": [
                    "U71PMQ1V0"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "67c59461-04cc-4897-8b92-bb73df0ecc7c",
        "type": "message",
        "text": "<https://scattered-thoughts.net/writing/imp-decorrelation/>",
        "user": "U71PMQ1V0",
        "ts": "1580691130.409100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3oj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://scattered-thoughts.net/writing/imp-decorrelation/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1569866970.116800",
        "parent_user_id": "U71PMQ1V0"
    },
    {
        "client_msg_id": "2ca4a599-7176-4547-8ad6-ca2673ae0841",
        "type": "message",
        "text": "<https://djrobstep.com/posts/programs-are-a-prison|https://djrobstep.com/posts/programs-are-a-prison>\n\n&gt; We often hear that Apple's ecosystem of apps (or Microsoft's, or Google's) are \"walled gardens\". But what about the individual applications themselves?",
        "user": "U8A5MS6R1",
        "ts": "1580693035.409300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1580694064.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+vQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://djrobstep.com/posts/programs-are-a-prison",
                                "text": "https://djrobstep.com/posts/programs-are-a-prison"
                            },
                            {
                                "type": "text",
                                "text": "\n\n> We often hear that Apple's ecosystem of apps (or Microsoft's, or Google's) are \"walled gardens\". But what about the individual applications themselves?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580693035.409300",
        "reply_count": 7,
        "reply_users_count": 5,
        "latest_reply": "1580987521.048300",
        "reply_users": [
            "UCUSW7WVD",
            "UT60XSVCN",
            "U8A5MS6R1",
            "U5STGTB3J",
            "UJBAJNFLK"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "7550744e-be65-42cc-bbb8-a2f5ec70c67b",
        "type": "message",
        "text": "This seems like such a basic category error I don't know where to begin.\n\nIt's like saying that human languages are prisons because other languages exist.",
        "user": "UCUSW7WVD",
        "ts": "1580701170.409800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H=c7K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This seems like such a basic category error I don't know where to begin.\n\nIt's like saying that human languages are prisons because other languages exist."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580693035.409300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "6f176f97-3cf1-4574-9586-3bed3f188358",
        "type": "message",
        "text": "Right, but people want to talk to the computer, ideally talk _through_ the computer, not learn a new language everyday. And human languages can be prisons, people have written about such feelings throughout history.\n\nThe argument is that we should put (user-generated) data first, and not get locked down in particular representations, which is much easier said than done, but is a goal I'm amenable to. Notice that in any relatively well integrated system, no one refers to the component programs as programs\u2014they are scripts at best, although there's really no essential difference (for example, all the random stuff bundled in emacs and available to add, is just \"emacs\")\u2014these categories are socially constructed and not essentially properties of the system.\n\nAll that said, that header line is kinda misleading I agree, but I think focusing on that is missing the point.\n<@UCUSW7WVD>",
        "user": "UT60XSVCN",
        "ts": "1580702407.410000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/1Tc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Right, but people want to talk to the computer, ideally talk "
                            },
                            {
                                "type": "text",
                                "text": "through",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the computer, not learn a new language everyday. And human languages can be prisons, people have written about such feelings throughout history.\n\nThe argument is that we should put (user-generated) data first, and not get locked down in particular representations, which is much easier said than done, but is a goal I'm amenable to. Notice that in any relatively well integrated system, no one refers to the component programs as programs\u2014they are scripts at best, although there's really no essential difference (for example, all the random stuff bundled in emacs and available to add, is just \"emacs\")\u2014these categories are socially constructed and not essentially properties of the system.\n\nAll that said, that header line is kinda misleading I agree, but I think focusing on that is missing the point.\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580693035.409300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "99b16555-5db3-4dcf-9f20-9164ffe58a87",
        "type": "message",
        "text": "<https://arcan-fe.com/about/|https://arcan-fe.com/about/>\nCool (quite old) demo here: <https://www.youtube.com/watch?v=3O40cPUqLbU|https://www.youtube.com/watch?v=3O40cPUqLbU>\nhas anyone played with this?",
        "user": "UT60XSVCN",
        "ts": "1580702766.411000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Arcan",
                "service_url": "http://arcan-fe.com",
                "title": "About",
                "title_link": "https://arcan-fe.com/about/",
                "author_name": "bjornstahl",
                "author_link": "https://arcan-fe.com/author/bjornstahl/",
                "text": "Arcan is a powerful development framework for creating virtually anything between user interfaces for specialised embedded applications all the way to full-blown standalone desktop environments. Boot splash screen? no problem. Custom Interface for your Home Automation Project? sure thing. Stream media processing? Of course.\nIt has been used in a number of both experimental, hobby, academic research and commerical projects and products alike, in areas ranging from VR desktops to industrial computer vision systems for robotic automation.\nAt its heart lies a robust and portable multimedia engine, with a well-tested and well-documented interface, programmable using Lua. At every step of the way, the underlying development emphasises security, performance and debugability guided by a principle of least surprise in terms of API design.\nSee the Videos&nbsp;page for videos from some of the public projects built using the engine as a main component. Most of the detailed user and development documentation can be found on the Wiki&nbsp;and the development discussion goes on in the #arcan IRC channel on freenode.\nFor a high-level presentation, please refer to this&nbsp;video:\n\nThere are too many features to cover, but here follows an brief listing of the &ldquo;basics&rdquo;:\n\nInput devices:&nbsp;Keyboards, Mice, Joysticks/other game devices, Touch displays, VR headsets, Eye trackers.\nOutput devices:&nbsp;Mixed DPI, Multi-monitor, Multi-/hotswap- GPU, Custom LED controllers.\nAudio:&nbsp;Streaming playback, Device capture,&nbsp; Sample playback.\nNetwork Sharing:&nbsp;Bidirectional VNC. Per-client Audio, Video and Input streaming.\nVideo:&nbsp;Complex 2D hierarchies and animated transforms, 3D models, Offscreen rendering effects, GPU shaders, Picking, Streaming video Sources and Streaming Recording.\nSystem integration:&nbsp;Client state management, Suspend/Resume, Monotonic Timers, Hotplug, Load balancing, DoS protection.\nPortability: Native graphics on Linux, FreeBSD, OpenBSD. High-level graphics on OSX.\nClient support:&nbsp;Easy to use native APIs, Dedicated backends for Wayland,&nbsp; Xorg, QEmu, builtin terminal emulator and libretro.\nDisplay &amp; Desktop server features:&nbsp;Server, Client and window manager crash recovery. Hot-pluggable custom input drivers, clipboard managers, assistive tools,\n\nWith that comes a rich set of tools for network proxying, debugging, profiling and integrating with assistive devices.",
                "fallback": "Arcan Link: About",
                "from_url": "https://arcan-fe.com/about/",
                "service_icon": "https://arcanfe.files.wordpress.com/2017/10/arcanicon.png?w=180",
                "id": 1,
                "original_url": "https://arcan-fe.com/about/"
            },
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "AWB \"Desktop\" concept",
                "title_link": "https://www.youtube.com/watch?v=3O40cPUqLbU",
                "author_name": "arcanfrontend",
                "author_link": "https://www.youtube.com/user/arcanfrontend",
                "thumb_url": "https://i.ytimg.com/vi/3O40cPUqLbU/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: AWB \"Desktop\" concept",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/3O40cPUqLbU?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=3O40cPUqLbU",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 2,
                "original_url": "https://www.youtube.com/watch?v=3O40cPUqLbU"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ufL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://arcan-fe.com/about/",
                                "text": "https://arcan-fe.com/about/"
                            },
                            {
                                "type": "text",
                                "text": "\nCool (quite old) demo here: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=3O40cPUqLbU",
                                "text": "https://www.youtube.com/watch?v=3O40cPUqLbU"
                            },
                            {
                                "type": "text",
                                "text": "\nhas anyone played with this?"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "4b7c8e4c-e0b8-49dc-b01c-4831a02a0914",
        "type": "message",
        "text": "I'd love to see examples of human languages compared to prisons! Not stuff like Orwell which is about _some_ languages, but with universal quantifiers attached.\n\nYes, gaps in interop have been lamented before, and they're reasonable. I guess I'm wondering what's new _and_ good here.\n\nEveryone here is probably familiar with the idea that when you use a computer you're in conversation with its creators. That's where sentiments like \"write first for human readers rather than the computer\" come from. Maybe this is a crucial thing to teach non-programmers? Except the author seems to be a programmer. I think I just don't understand his point. To me it seems like multiple isolated zones of interop are just a law of nature. There's lots else you can lay at the door of economic incentives (God knows I've done enough of that), but not this. Early Unix was almost utterly idealistic, and we still got the split between ATT and BSD. Early Lisp had zero economic incentives, and we still got Lisp 1.5 vs MacLisp.",
        "user": "UCUSW7WVD",
        "ts": "1580703833.411200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/uZS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd love to see examples of human languages compared to prisons! Not stuff like Orwell which is about "
                            },
                            {
                                "type": "text",
                                "text": "some",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " languages, but with universal quantifiers attached.\n\nYes, gaps in interop have been lamented before, and they're reasonable. I guess I'm wondering what's new "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " good here.\n\nEveryone here is probably familiar with the idea that when you use a computer you're in conversation with its creators. That's where sentiments like \"write first for human readers rather than the computer\" come from. Maybe this is a crucial thing to teach non-programmers? Except the author seems to be a programmer. I think I just don't understand his point. To me it seems like multiple isolated zones of interop are just a law of nature. There's lots else you can lay at the door of economic incentives (God knows I've done enough of that), but not this. Early Unix was almost utterly idealistic, and we still got the split between ATT and BSD. Early Lisp had zero economic incentives, and we still got Lisp 1.5 vs MacLisp."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580693035.409300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "ffc58e0a-2dd5-48d2-a49c-3f670f7f33cc",
        "type": "message",
        "text": "The thing with languages is that mostly one language is sufficient to go about your daily activities in most contexts. Imagine if you had to switch languages and bring translators with you because the grocery store uses one language but the coffee shop use another, and so on. That's the kind of shuffling it seems we're doing with apps? Import, export, save as, dance and repeat! We don't really care about the 'apps' but really care about the 'objects' under those apps - music, video, audio, code, etc. I agree there will be fragmentation either way. But can we have the dominant paradigm be objects, not apps? Here's another write-up I think along a similar sentiment: <https://humane.computer/killing-apps/>",
        "user": "U8A5MS6R1",
        "ts": "1580706302.411400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Humane Computer",
                "title": "Killing Apps",
                "title_link": "https://humane.computer/killing-apps/",
                "text": "An application program is a computer program designed to perform a group of coordinated functions, tasks, or activities for the benefit of the user. \u2014 Wikipedia Recently, I needed to create a presentation for work to introduce a lot of technical material to groups of people as efficiently as possible. Google",
                "fallback": "Humane Computer: Killing Apps",
                "fields": [
                    {
                        "title": "Written by",
                        "value": "Daniel",
                        "short": true
                    }
                ],
                "ts": 1492991237,
                "from_url": "https://humane.computer/killing-apps/",
                "service_icon": "https://humane.computer/favicon.ico",
                "id": 1,
                "original_url": "https://humane.computer/killing-apps/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BsDO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The thing with languages is that mostly one language is sufficient to go about your daily activities in most contexts. Imagine if you had to switch languages and bring translators with you because the grocery store uses one language but the coffee shop use another, and so on. That's the kind of shuffling it seems we're doing with apps? Import, export, save as, dance and repeat! We don't really care about the 'apps' but really care about the 'objects' under those apps - music, video, audio, code, etc. I agree there will be fragmentation either way. But can we have the dominant paradigm be objects, not apps? Here's another write-up I think along a similar sentiment: "
                            },
                            {
                                "type": "link",
                                "url": "https://humane.computer/killing-apps/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580693035.409300",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "dac8ba31-6322-4204-b48d-be14e09c4dba",
        "type": "message",
        "text": "I'm totally on your side there. As I wrote a couple of months ago:\n\n&gt; One implication of fitting in a single head: Mu constrains the number of supported languages. Languages have a way of growing into isolated universes, and interoperation between languages adds its own complexities. It seems better for future readers if the stack minimizes the number of such boundaries, even if writers are inconvenienced somewhat. \n(<http://akkartik.name/post/mu-2019-1>)",
        "user": "UCUSW7WVD",
        "ts": "1580709131.411800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "90V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm totally on your side there. As I wrote a couple of months ago:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One implication of fitting in a single head: Mu constrains the number of supported languages. Languages have a way of growing into isolated universes, and interoperation between languages adds its own complexities. It seems better for future readers if the stack minimizes the number of such boundaries, even if writers are inconvenienced somewhat. "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n("
                            },
                            {
                                "type": "link",
                                "url": "http://akkartik.name/post/mu-2019-1"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580693035.409300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "4cadb10d-091b-4bae-81c8-f366164a7202",
        "type": "message",
        "text": "Great prompt by <@URC5MU2AZ> a while ago:\n\n*You get to name an assertion the ___ Paradox (fill in your last name). What do you choose?*\n\n_(Responses in thread plz.)_",
        "user": "UCUSW7WVD",
        "ts": "1580718026.447200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1580747456.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IPsM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great prompt by "
                            },
                            {
                                "type": "user",
                                "user_id": "URC5MU2AZ"
                            },
                            {
                                "type": "text",
                                "text": " a while ago:\n\n"
                            },
                            {
                                "type": "text",
                                "text": "You get to name an assertion the ___ Paradox (fill in your last name). What do you choose?",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "(Responses in thread plz.)",
                                "style": {
                                    "italic": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580718026.447200",
        "reply_count": 9,
        "reply_users_count": 7,
        "latest_reply": "1585095821.013500",
        "reply_users": [
            "UC2A2ARPT",
            "UEBG0NPDK",
            "UCUSW7WVD",
            "U6KQ2S410",
            "UJN1TAYEQ",
            "UAVCC2X70",
            "UFQQ3P867"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "55381BF3-DB13-4284-A299-69BF96393CCB",
        "type": "message",
        "text": "People like Alan Kay and many other designers and builders of systems of his time had a very different goal than most programmers today. When they learned programming that was the only UI for computers, and they thought hard about how to create a better UI for programming \u2014 a UI for the power of making computers do anything you want them to, not limited to any specific domain.\n\nBut commercialization forcefully shifted incentives towards less generic and more domain specific solutions. It was much easier to sell a program for spreadsheets. And one for text processing. And one for presentations. It was easier to sell because it was easier to see what specific problem these programs solved. And it was easier to use because you\u2019d only have to know about that particular problem domain. And it was easier to build as you cut down complexity significantly and no longer had to try to make everything possible, but just a slice of a much smaller problem space.\n\nIt\u2019s so easy to fall into the trap of specializing too early too quickly, losing that generality early in the process. Systems like Smalltalk that some of us admire kept that generality alive in the system by representing many things with just a few powerful concepts. It wasn\u2019t just that everything was an object, it was also that almost everything was represented by almost the same kind of object.\n\nToday, we often want to get rid of too much generality as quickly as possible and favor distinguishing things from each other so we know what we\u2019re dealing with. Life gets so much easier if you know exactly what you\u2019re dealing with. And that\u2019s when we end up with specific data structures representing specific things in specific apps solving specific problems (and specific people with their specific backgrounds making specific design decisions) \u2014 isolated universes. And so we spend most of our time writing algorithms to convert between them to make them work together again.\n\nWhen we start representing a specific thing in our code, we take that power away from our user who will now have to live with that thing as we designed it. The solution can\u2019t be to design all the possible things for them individually \u2014 what we are clearly trying very hard currently. What we need to do is to give our users as few things as possible, just enough so they can design whatever it is they need to get their job done.",
        "user": "U5STGTB3J",
        "ts": "1580718898.455400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1580718995.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H2F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "People like Alan Kay and many other designers and builders of systems of his time had a very different goal than most programmers today. When they learned programming that was the only UI for computers, and they thought hard about how to create a better UI for programming \u2014 a UI for the power of making computers do anything you want them to, not limited to any specific domain.\n\nBut commercialization forcefully shifted incentives towards less generic and more domain specific solutions. It was much easier to sell a program for spreadsheets. And one for text processing. And one for presentations. It was easier to sell because it was easier to see what specific problem these programs solved. And it was easier to use because you\u2019d only have to know about that particular problem domain. And it was easier to build as you cut down complexity significantly and no longer had to try to make everything possible, but just a slice of a much smaller problem space.\n\nIt\u2019s so easy to fall into the trap of specializing too early too quickly, losing that generality early in the process. Systems like Smalltalk that some of us admire kept that generality alive in the system by representing many things with just a few powerful concepts. It wasn\u2019t just that everything was an object, it was also that almost everything was represented by almost the same kind of object.\n\nToday, we often want to get rid of too much generality as quickly as possible and favor distinguishing things from each other so we know what we\u2019re dealing with. Life gets so much easier if you know exactly what you\u2019re dealing with. And that\u2019s when we end up with specific data structures representing specific things in specific apps solving specific problems (and specific people with their specific backgrounds making specific design decisions) \u2014 isolated universes. And so we spend most of our time writing algorithms to convert between them to make them work together again.\n\nWhen we start representing a specific thing in our code, we take that power away from our user who will now have to live with that thing as we designed it. The solution can\u2019t be to design all the possible things for them individually \u2014 what we are clearly trying very hard currently. What we need to do is to give our users as few things as possible, just enough so they can design whatever it is they need to get their job done."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580693035.409300",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0",
                    "UT39HTL9X",
                    "UJBAJNFLK",
                    "U8A5MS6R1"
                ],
                "count": 4
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "cb570288-cd31-4777-9522-62f20abd9439",
        "type": "message",
        "text": "<@UDQBTJ211> Cool to have you here. I was so inspired by your Algojammer project that I tried to copy (badly) it for my own project, Yazz Pilot",
        "user": "UFLN9JFRT",
        "ts": "1580731306.457100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFLN9JFRT",
            "ts": "1580731409.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Jo8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDQBTJ211"
                            },
                            {
                                "type": "text",
                                "text": " Cool to have you here. I was so inspired by your Algojammer project that I tried to copy (badly) it for my own project, Yazz Pilot"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580241505.237300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "type": "message",
        "text": "",
        "files": [
            {
                "id": "FT5KAQFED",
                "created": 1580731341,
                "timestamp": 1580731341,
                "name": "Screenshot 2020-02-03 at 13.00.58.png",
                "title": "Screenshot 2020-02-03 at 13.00.58.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UFLN9JFRT",
                "editable": false,
                "size": 157621,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-FT5KAQFED/screenshot_2020-02-03_at_13.00.58.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-FT5KAQFED/download/screenshot_2020-02-03_at_13.00.58.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-FT5KAQFED-df1a8f7b3e/screenshot_2020-02-03_at_13.00.58_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-FT5KAQFED-df1a8f7b3e/screenshot_2020-02-03_at_13.00.58_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-FT5KAQFED-df1a8f7b3e/screenshot_2020-02-03_at_13.00.58_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 138,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-FT5KAQFED-df1a8f7b3e/screenshot_2020-02-03_at_13.00.58_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 185,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-FT5KAQFED-df1a8f7b3e/screenshot_2020-02-03_at_13.00.58_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-FT5KAQFED-df1a8f7b3e/screenshot_2020-02-03_at_13.00.58_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 277,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-FT5KAQFED-df1a8f7b3e/screenshot_2020-02-03_at_13.00.58_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 308,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-FT5KAQFED-df1a8f7b3e/screenshot_2020-02-03_at_13.00.58_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 369,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-FT5KAQFED-df1a8f7b3e/screenshot_2020-02-03_at_13.00.58_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 394,
                "image_exif_rotation": 1,
                "original_w": 1649,
                "original_h": 634,
                "thumb_tiny": "AwASADC75af3V59qeI0H8K/lQPugU4YHSgA2gDgCjaPQUHpR9KADA9BUckbM3ysqj3XNS00sAeaABfuilFIv3RSigBT0pppx6U00ALUb/eqSo360Af/Z",
                "permalink": "https://futureofcoding.slack.com/files/UFLN9JFRT/FT5KAQFED/screenshot_2020-02-03_at_13.00.58.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-FT5KAQFED-bf9d650649",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": true,
        "user": "UFLN9JFRT",
        "display_as_bot": false,
        "ts": "1580731345.457400",
        "client_msg_id": "2732cd43-126f-4769-a09c-d9db5945da12",
        "thread_ts": "1580241505.237300",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UDQBTJ211",
                    "UFLN9JFRT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "dda2134a-794d-4c71-a29f-f117d8de6c7c",
        "type": "message",
        "text": "Above image is from the bubble sort demo",
        "user": "UFLN9JFRT",
        "ts": "1580731377.457800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V2NBb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Above image is from the bubble sort demo"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580241505.237300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "2DD4D221-0FAC-4C3D-8D68-A04D40238485",
        "type": "message",
        "text": "Reese Paradox: In many cases, removing accidental complexity makes software feel more complex.",
        "user": "UC2A2ARPT",
        "ts": "1580746249.460400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jwKaw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reese Paradox: In many cases, removing accidental complexity makes software feel more complex."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580718026.447200",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD",
                    "UFB8STN7K"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UKJGU23KP"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "0e7d1e41-37e6-49a8-afe4-58edcd54edd6",
        "type": "message",
        "text": "(re: Reese Paradox: this is a very important thing to understand if, like me, you like to \"simplify\" - it turns out busy work actually serves a purpose and if you remove all of it, people lose themselves. You just can't think that quickly about complex systems.)",
        "user": "UEBG0NPDK",
        "ts": "1580749778.461000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GR7Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(re: Reese Paradox: this is a very important thing to understand if, like me, you like to \"simplify\" - it turns out busy work actually serves a purpose and if you remove all of it, people lose themselves. You just can't think that quickly about complex systems.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580718026.447200",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "48bd33cd-6d56-4efc-82af-53cdeabf4653",
        "type": "message",
        "text": "I would really appreciate further elaboration on this idea. Maybe in a new thread?",
        "user": "UCUSW7WVD",
        "ts": "1580749913.461200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dP2G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would really appreciate further elaboration on this idea. Maybe in a new thread?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580718026.447200",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "C6E74A77-C457-4732-BCEA-86242AA93342",
        "type": "message",
        "text": "Let's talk about the positive benefits of accidental / incidental complexity in this thread.",
        "user": "UC2A2ARPT",
        "ts": "1580751504.462400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QdzBp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Let's talk about the positive benefits of accidental / incidental complexity in this thread."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "reply_count": 63,
        "reply_users_count": 10,
        "latest_reply": "1580924992.044000",
        "reply_users": [
            "UC2A2ARPT",
            "UCUSW7WVD",
            "U8A5MS6R1",
            "UKJGU23KP",
            "UGS8TUVK6",
            "UKDM3GLAJ",
            "UEBG0NPDK",
            "U5STGTB3J",
            "UHZUS56SV",
            "UJN1TAYEQ"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "38758AF5-9A06-4619-A21A-808C6E66F175",
        "type": "message",
        "text": "Paging <@UCUSW7WVD> and <@UEBG0NPDK> ",
        "user": "UC2A2ARPT",
        "ts": "1580751521.462800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zTZuC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Paging "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "ecc9a854-1fe3-4fee-a9be-542b2e74a856",
        "type": "message",
        "text": "For starters, some examples would be good.",
        "user": "UCUSW7WVD",
        "ts": "1580751571.463100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X=+0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For starters, some examples would be good."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "3bf556e2-8b06-4dcb-81c9-1e7f19dccd43",
        "type": "message",
        "text": "As a caveat, I've read Silver Bullet, Tar Pit, etc. only a handful of times, so I might not have internalized all the nuance of incidental vs essential. So these examples are based on my naive view.\n\nType systems, syntax highlighting, keyboard shortcuts, choice of language, literate programming, and all other programmer affordances are at their core incidental to the problem that the software you write needs to solve. They're also incidental to the act of programming. You feel this when you fiddle with your linter instead of creating a better abstraction or implementing a feature.\n\nFor that matter, abstractions are incidental complexity. Again, they're an affordance for thought that isn't strictly necessary.\n\nUsing a mouse to move the insertion point. The ability to delete characters. Agile.\n\nIf you stood in the middle of your programming memory palace, spun around in a circle, and pointed at a random object.. chances are good it represents something incidental. Something meant to make your job easier, or even humanly possible.\n\nNow, this viewpoint is taking Brooks (etc) past the point of usefulness, far into absurdity. But the reason I like to do that is to establish that the essence vs. incident of complexity is not binary. It's not even a linear spectrum. Many kinds of incidental complexity are deliberate and ergonomic. Some kinds of incidental complexity are simply emergent. In both cases, you might prefer to have them.\n\nAs I like to say, incidental complexity is a resource to be spent, not an evil to be purged.",
        "user": "UC2A2ARPT",
        "ts": "1580752431.463400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EWY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As a caveat, I've read Silver Bullet, Tar Pit, etc. only a handful of times, so I might not have internalized all the nuance of incidental vs essential. So these examples are based on my naive view.\n\nType systems, syntax highlighting, keyboard shortcuts, choice of language, literate programming, and all other programmer affordances are at their core incidental to the problem that the software you write needs to solve. They're also incidental to the act of programming. You feel this when you fiddle with your linter instead of creating a better abstraction or implementing a feature.\n\nFor that matter, abstractions are incidental complexity. Again, they're an affordance for thought that isn't strictly necessary.\n\nUsing a mouse to move the insertion point. The ability to delete characters. Agile.\n\nIf you stood in the middle of your programming memory palace, spun around in a circle, and pointed at a random object.. chances are good it represents something incidental. Something meant to make your job easier, or even humanly possible.\n\nNow, this viewpoint is taking Brooks (etc) past the point of usefulness, far into absurdity. But the reason I like to do that is to establish that the essence vs. incident of complexity is not binary. It's not even a linear spectrum. Many kinds of incidental complexity are deliberate and ergonomic. Some kinds of incidental complexity are simply emergent. In both cases, you might prefer to have them.\n\nAs I like to say, incidental complexity is a resource to be spent, not an evil to be purged."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "b1ba65be-639f-4e76-ac15-e687fa5dc7d8",
        "type": "message",
        "text": "just finished, loved the interview! Alan Kay in one interview talked about one of the tells for a PL designer is to be _physically ill_ when using existing programming languages. Blow embodies this perfectly",
        "user": "UGLSY9X3J",
        "ts": "1580752510.463600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UGLSY9X3J",
            "ts": "1580752593.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0TpSu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "just finished, loved the interview! Alan Kay in one interview talked about one of the tells for a PL designer is to be"
                            },
                            {
                                "type": "text",
                                "text": " physically ill ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "when using existing programming languages. Blow embodies this perfectly"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580480732.286100",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "46f15456-8b9b-4fd7-ba4a-c2999c323418",
        "type": "message",
        "text": "This is not a fully formed thought but...\nWhen making something is hard, you think about what's really valuable. E.g. older movies without CGI would have to rely more on the storyline. Many newer ones are more about special effects.",
        "user": "U8A5MS6R1",
        "ts": "1580752623.463900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8/GSy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is not a fully formed thought but...\nWhen making something is hard, you think about what's really valuable. E.g. older movies without CGI would have to rely more on the storyline. Many newer ones are more about special effects."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "UF1ATC4RF"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "f1d969b0-b16d-45fa-8939-714e9bd72d66",
        "type": "message",
        "text": "I\u2019d argue that abstraction and duplication are both incidental complexity.\n\nThe debate over them is about in which circumstances choosing one or another minimizes incidental complexity.\n\nWhich would lead to the argument that you\u2019re still trying to purge incidental complexity, it\u2019s just that all of our approaches leave some incidental complexity in place.",
        "user": "UKJGU23KP",
        "ts": "1580752710.464300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Aj+=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019d argue that abstraction and duplication are both incidental complexity.\n\nThe debate over them is about in which circumstances choosing one or another minimizes incidental complexity.\n\nWhich would lead to the argument that you\u2019re still trying to purge incidental complexity, it\u2019s just that all of our approaches leave some incidental complexity in place."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "9ec2c71f-a33d-425f-a06d-ff23e144a408",
        "type": "message",
        "text": "<@UC2A2ARPT> <@UKJGU23KP> This is a kind of mind-blowing idea. I'm not a scholar of those papers either, but it never occurred to me to interpret 'accidental complexity' so broadly. Regardless, it feels like a very fertile line of thought.",
        "user": "UCUSW7WVD",
        "ts": "1580752822.464500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fcBTv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UKJGU23KP"
                            },
                            {
                                "type": "text",
                                "text": " This is a kind of mind-blowing idea. I'm not a scholar of those papers either, but it never occurred to me to interpret 'accidental complexity' so broadly. Regardless, it feels like a very fertile line of thought."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "92acf179-c9b8-44f4-95f6-11ac80a516bb",
        "type": "message",
        "text": "To be fair, I\u2019ve read Brooks twice and while I\u2019ve read the intro to Out of the Tar Pit many times, I think I\u2019ve only read the whole thing once. It\u2019s possible that I\u2019m not using the authors\u2019 own interpretations of what the terms meant.",
        "user": "UKJGU23KP",
        "ts": "1580752894.464700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j7aQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To be fair, I\u2019ve read Brooks twice and while I\u2019ve read the intro to Out of the Tar Pit many times, I think I\u2019ve only read the whole thing once. It\u2019s possible that I\u2019m not using the authors\u2019 own interpretations of what the terms meant."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "39446ada-4564-4336-a4aa-7a775d3499d2",
        "type": "message",
        "text": "<@UC2A2ARPT> \u201cMany kinds of incidental complexity are deliberate and ergonomic. Some kinds of incidental complexity are simply emergent. In both cases, you might prefer to have them.\u201d\n\nThis is a really great few sentences .",
        "user": "UKJGU23KP",
        "ts": "1580752958.464900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2GIrZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " \u201cMany kinds of incidental complexity are deliberate and ergonomic. Some kinds of incidental complexity are simply emergent. In both cases, you might prefer to have them.\u201d\n\nThis is a really great few sentences ."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT",
                    "UD31LGQKB"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "47f95861-03f4-45ec-b5ab-3fc301f90f62",
        "type": "message",
        "text": "This is a bit of a tangent but regarding abstraction I\u2019m with Zach Tellman who argues that we can only talk about the usefulness of it in a given context. Highly recommend his book <http://elementsofclojure.com> (which we might have called elements of software as well) or his recent appearance on the CoRecursive podcast: <https://corecursive.com/042-zach-tellman-software-in-context/> Thinking the same might be true for incidental complexity \u2013\u00a0you have to talk about the context.",
        "user": "UGS8TUVK6",
        "ts": "1580753661.465300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vco",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is a bit of a tangent but regarding abstraction I\u2019m with Zach Tellman who argues that we can only talk about the usefulness of it in a given context. Highly recommend his book "
                            },
                            {
                                "type": "link",
                                "url": "http://elementsofclojure.com"
                            },
                            {
                                "type": "text",
                                "text": " (which we might have called elements of software as well) or his recent appearance on the CoRecursive podcast: "
                            },
                            {
                                "type": "link",
                                "url": "https://corecursive.com/042-zach-tellman-software-in-context/"
                            },
                            {
                                "type": "text",
                                "text": " Thinking the same might be true for incidental complexity \u2013\u00a0you have to talk about the context."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT",
                    "UKDM3GLAJ",
                    "UD31LGQKB",
                    "U8A5MS6R1"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "78ec40f9-aec3-4f5b-90b3-8de462a3895f",
        "type": "message",
        "text": "Is it really incidental though? If I have a text editor that allows me to move forward and back, and I\u2019d like to move to the beginning of the document, I have a procedure for getting there. I press back many times until I get there. But there is a cost to doing this (time, keypresses, cycles in evaluating 1000 `move-back` commands). So we introduce a home button. It fully and minimally captures the action I was trying to take. We have made the keyboard more complex, and every layer of software in between that needs to care about this keycode, but is that complexity really incidental? It is perfectly and minimally in service of a real:tm: problem.",
        "user": "UKDM3GLAJ",
        "ts": "1580754281.465700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N0lV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is it really incidental though? If I have a text editor that allows me to move forward and back, and I\u2019d like to move to the beginning of the document, I have a procedure for getting there. I press back many times until I get there. But there is a cost to doing this (time, keypresses, cycles in evaluating 1000 "
                            },
                            {
                                "type": "text",
                                "text": "move-back",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " commands). So we introduce a home button. It fully and minimally captures the action I was trying to take. We have made the keyboard more complex, and every layer of software in between that needs to care about this keycode, but is that complexity really incidental? It is perfectly and minimally in service of a real"
                            },
                            {
                                "type": "emoji",
                                "name": "tm"
                            },
                            {
                                "type": "text",
                                "text": " problem."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "6193de62-0882-4763-896e-b08fd22714bf",
        "type": "message",
        "text": "My take: it\u2019s essential complexity for a document editor, but the idea of editing files is incidental complexity for programming.",
        "user": "UKJGU23KP",
        "ts": "1580754517.465900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UKJGU23KP",
            "ts": "1580754533.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vML",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My take: it\u2019s essential complexity for a document editor, but the idea of editing files is incidental complexity for programming."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT",
                    "UJ6LDMMN0"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "be807e4b-23a6-4de2-bd70-ee5210390e43",
        "type": "message",
        "text": "This topic reminded me of this essay on complexity: <https://futureofcoding.slack.com/archives/C5T9GPWFL/p1578176757362700?thread_ts=1578176757.362700>\n\n&gt; we can then start to analyze things like that fact that I want to \"simplify my life\". On its own, the statement is meaningless because we do not know in regards to which aspect in my life I would like to make easier. If I buy more appliances, to reduce my working time -- say a food processor, for example -- I save time in chopping. But it comes at the expense of having to buy the machine, washing it afterward, and occasionally performing some type of maintenance to keep it in working order. ",
        "user": "U8A5MS6R1",
        "ts": "1580754982.466300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1578176757362700?thread_ts=1578176757.362700",
                "fallback": "[January 4th, 2020 2:25 PM] shalabh.chaturvedi: I enjoyed reading this essay by <@UN7K3UT4G> posted inside a thread: <http://theprogrammersparadox.blogspot.com/2007/12/nature-of-simple.html>\n\nWe often talk of simplicity but what exactly is it?\n&gt;  In any comparison of multi-dimensional things, we cannot easily pin one up against the other.\nIt also connects with what <@UC2A2ARPT> was saying about incidental complexity: <https://twitter.com/spiralganglion/status/1198636841831825408>",
                "ts": "1578176757.362700",
                "author_id": "U8A5MS6R1",
                "author_subname": "Shalabh Chaturvedi",
                "channel_id": "C5T9GPWFL",
                "channel_name": "general",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "I enjoyed reading this essay by <@UN7K3UT4G> posted inside a thread: <http://theprogrammersparadox.blogspot.com/2007/12/nature-of-simple.html>\n\nWe often talk of simplicity but what exactly is it?\n&gt;  In any comparison of multi-dimensional things, we cannot easily pin one up against the other.\nIt also connects with what <@UC2A2ARPT> was saying about incidental complexity: <https://twitter.com/spiralganglion/status/1198636841831825408>",
                "author_name": "Shalabh Chaturvedi",
                "author_link": "https://futureofcoding.slack.com/team/U8A5MS6R1",
                "author_icon": "https://avatars.slack-edge.com/2019-03-21/584465935395_b7c63cc07373326ec6ea_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1578176757362700?thread_ts=1578176757.362700",
                "footer": "Thread in #general"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "esT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This topic reminded me of this essay on complexity: "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1578176757362700?thread_ts=1578176757.362700"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "we can then start to analyze things like that fact that I want to \"simplify my life\". On its own, the statement is meaningless because we do not know in regards to which aspect in my life I would like to make easier. If I buy more appliances, to reduce my working time -- say a food processor, for example -- I save time in chopping. But it comes at the expense of having to buy the machine, washing it afterward, and occasionally performing some type of maintenance to keep it in working order. "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "d035f338-5315-49e1-bae1-7667ca03a343",
        "type": "message",
        "text": "I'll echo what <@UC2A2ARPT> said with a simple example from Eve, and add another perspective as well.\n\nFrom Eve: It's not essential in a relational language to have removal, instead the simplest mechanism is to assert a retraction. As a person though, that's pretty mind bendy. It's much easier to think of removing something as an action, rather than an addition of a fact to the world. Having removal or set (remove the current add this new one) is purely incidental, but as Ivan pointed out, extremely useful.",
        "user": "UEBG0NPDK",
        "ts": "1580755572.466600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7n7mt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'll echo what "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " said with a simple example from Eve, and add another perspective as well.\n\nFrom Eve: It's not essential in a relational language to have removal, instead the simplest mechanism is to assert a retraction. As a person though, that's pretty mind bendy. It's much easier to think of removing something as an action, rather than an addition of a fact to the world. Having removal or set (remove the current add this new one) is purely incidental, but as Ivan pointed out, extremely useful."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "US370TRJA",
                    "UMWF81HTP",
                    "UHWC9PXBL"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "c762042d-ab32-4ed0-b8e7-57b7707d6474",
        "type": "message",
        "text": "The other perspective that underlies Ivan's points I think: programming is a process performed by people and as a result we have to deal with things like inferential distance (as the example above shows). What we forget though is it's not just about making things simple/intuitive/easy to work with, it's  just as much about crafting the entire process to manage emotional context. If something is objectively better, but feels bad, then it's just going to largely get binned as bad. When we remove all incidental complexity from the process, there's a second order effect to the pacing: you've now moved all of the essential (and likely hard) parts of the problem all right next to each other.",
        "user": "UEBG0NPDK",
        "ts": "1580755794.466900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RrsyW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The other perspective that underlies Ivan's points I think: programming is a process performed by people and as a result we have to deal with things like inferential distance (as the example above shows). What we forget though is it's not just about making things simple/intuitive/easy to work with, it's  just as much about crafting the entire process to manage emotional context. If something is objectively better, but feels bad, then it's just going to largely get binned as bad. When we remove all incidental complexity from the process, there's a second order effect to the pacing: you've now moved all of the essential (and likely hard) parts of the problem all right next to each other."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "bd0be2df-1a31-4a0f-b1b8-edb29cd579bf",
        "type": "message",
        "text": "<@UEBG0NPDK> and <@UCUSW7WVD> \u2014 Waiting eagerly for your paradoxen.",
        "user": "UC2A2ARPT",
        "ts": "1580755842.467100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cJi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " \u2014 Waiting eagerly for your paradoxen."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580718026.447200",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "eda566d2-d928-46e4-9ebb-af6aeee995f5",
        "type": "message",
        "text": "The effect is that you've made it feel *much* harder than it used to be, because the complex bits were spread out among more mundane considerations. Monotony was breaking the difficulty.",
        "user": "UEBG0NPDK",
        "ts": "1580755847.467300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aQzUw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The effect is that you've made it feel "
                            },
                            {
                                "type": "text",
                                "text": "much",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " harder than it used to be, because the complex bits were spread out among more mundane considerations. Monotony was breaking the difficulty."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "fd01eb3e-d231-4bba-880c-02c07d2ff3a7",
        "type": "message",
        "text": "Pacing and emotion management are very important aspects of the problem to consider and are well understood in other domains. E.g. you can't watch a movie that runs at 110% the whole 2 hours, it's emotionally exhausting and you start to tune out at some point. In the programming context, you get one of two effects: either you cause long thinking pauses in between the actual \"points of progress,\" which makes it feel stuttery and  like it never flows. Or you end up just getting distracted, because it's much easier to do something else than consider all the difficult things about your problem.",
        "user": "UEBG0NPDK",
        "ts": "1580756052.467500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1580758032.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QT1YY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Pacing and emotion management are very important aspects of the problem to consider and are well understood in other domains. E.g. you can't watch a movie that runs at 110% the whole 2 hours, it's emotionally exhausting and you start to tune out at some point. In the programming context, you get one of two effects: either you cause long thinking pauses in between the actual \"points of progress,\" which makes it feel stuttery and  like it never flows. Or you end up just getting distracted, because it's much easier to do something else than consider all the difficult things about your problem."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "4e173b88-bba7-4bf6-82d9-0d19355bc654",
        "type": "message",
        "text": "Beautifully illustrated, Chris.\n\nTo zoom back in from my _reductio ad absurdum_ to _what Silver Bullet / Tar Pit were meaning_ \u2014 when looking at the frustrating cruft that builds up in, say, a tower of abstractions, each piece of cruft was originally created as an affordance for, say, legacy or convenience or familiarity or flexibility. Taking my absurd examples in one hand, and these practical examples in the other, you can see that it's simply a case of: one person's needless complexity is another person's accessibility.",
        "user": "UC2A2ARPT",
        "ts": "1580756297.467700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1580756327.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G3Uhv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Beautifully illustrated, Chris.\n\nTo zoom back in from my "
                            },
                            {
                                "type": "text",
                                "text": "reductio ad absurdum",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to "
                            },
                            {
                                "type": "text",
                                "text": "what Silver Bullet / Tar Pit were meaning",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " \u2014 when looking at the frustrating cruft that builds up in, say, a tower of abstractions, each piece of cruft was originally created as an affordance for, say, legacy or convenience or familiarity or flexibility. Taking my absurd examples in one hand, and these practical examples in the other, you can see that it's simply a case of: one person's needless complexity is another person's accessibility."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "2425c337-7d0c-488c-9967-e41b97383573",
        "type": "message",
        "text": "Another interesting effect: if you make things simple enough, people then think they're trivial and ignore them :slightly_smiling_face: We've struggled a lot with that in various contexts over the years.",
        "user": "UEBG0NPDK",
        "ts": "1580756403.468000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Fp1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another interesting effect: if you make things simple enough, people then think they're trivial and ignore them "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " We've struggled a lot with that in various contexts over the years."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD",
                    "ULM3U6275"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "70969684-2a7f-4037-92f1-de2a23c27daf",
        "type": "message",
        "text": "&gt; objectively better, but feels bad\nSometimes I prefer to drive on town streets that are always moving instead of the freeway which has a single strech of very slow congestion. The freeway might actually be faster overall, but its more painful.",
        "user": "U8A5MS6R1",
        "ts": "1580756659.468200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5p/k",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "objectively better, but feels bad"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nSometimes I prefer to drive on town streets that are always moving instead of the freeway which has a single strech of very slow congestion. The freeway might actually be faster overall, but its more painful."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UEBG0NPDK",
                    "UCUSW7WVD"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "B9DB736C-AF37-48B0-920A-60D5C82E8FEB",
        "type": "message",
        "text": "Reading through this thread I get the impression that essential/accidental complexity is conflated with good/bad user experience or usability and accessibility. I\u2019m still pondering how I feel about that, but felt like just pointing this out could be useful by itself\u2026?\n\nMy initial feeling is that these things are neither orthogonal nor directly related but somewhere in between (yay, what a safe position to take\u2026 ;-). It should be possible to remove accidental complexity in extreme ways and then still provide a good experience. Although some might interpret that as adding accidental complexity back in for the sake of experience. :thinking_face:\n\nThe other observation I want to make is that we (including myself) prefer talking about removing accidental complexity. It\u2019s always easier to identify things we don\u2019t want. It\u2019s much harder to identify what we want. I wonder if we\u2019d be better off thinking about what essential really means other than that convenient \u201cnecessary for the problem at hand\u201d definition.",
        "user": "U5STGTB3J",
        "ts": "1580757488.478900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qSnXS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reading through this thread I get the impression that essential/accidental complexity is conflated with good/bad user experience or usability and accessibility. I\u2019m still pondering how I feel about that, but felt like just pointing this out could be useful by itself\u2026?\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "My initial feeling is that these things are neither orthogonal nor directly related but somewhere in between (yay, what a safe position to take\u2026 ;-). It should be possible to remove accidental complexity in extreme ways and then still provide a good experience. Although some might interpret that as adding accidental complexity back in for the sake of experience. "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "The other observation I want to make is that we (including myself) prefer talking about removing accidental complexity. It\u2019s always easier to identify things we don\u2019t want. It\u2019s much harder to identify what we want. I wonder if we\u2019d be better off thinking about what essential really means other than that convenient \u201cnecessary for the problem at hand\u201d definition."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "16a9aeab-33d3-4844-8d33-45737292dc49",
        "type": "message",
        "text": "`async/await` is interesting as an integration of async directly in languages.",
        "user": "UQ706GB9U",
        "ts": "1580757592.479100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UQ706GB9U",
            "ts": "1580757655.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "veFY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "async/await",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is interesting as an integration of async directly in languages."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580590491.307600",
        "parent_user_id": "UT39HTL9X"
    },
    {
        "client_msg_id": "e995ce58-6fca-4fc0-95e8-611cc9fe2650",
        "type": "message",
        "text": "Yeah, these great examples reinforce my sense that essential/accidental is a useful dichotomy -- and we humans are terrible at distinguishing the two. Our math sides push us too far towards declarativity IMO, and anything imperative is treated as accidental complexity. But anything that exists in users' mental models _a priori_ is, I think, by definition essential.\n\nAs an example, I manage a deployment system in my day job, and it operates as a convergence engine: you give it the desired state (package versions, number of hosts, etc.) and it takes the steps to get from here to there. Once we released it, however, we uncovered several cases where people care _how_ we get from here to there:\n\na) Sometimes there are hosts that we think can be reused but customers don't want to allow, for reasons our tooling can't see (and there'll always be some of those reasons: outdated secrets, corrupted data, etc.)\n\nb) Sometimes our customers want for a specific cluster to not be modified, while another subset is. Rather than have to painfully specify the desired state to be identical to the existing state in those cases, they'd rather just get a checkbox that says \"hands off this cluster!\"\n\nBoth these changes have been difficult because of the deep architectural division between ends and means in our tool.",
        "user": "UCUSW7WVD",
        "ts": "1580760287.480200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1580760653.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FBlc5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, these great examples reinforce my sense that essential/accidental is a useful dichotomy -- and we humans are terrible at distinguishing the two. Our math sides push us too far towards declarativity IMO, and anything imperative is treated as accidental complexity. But anything that exists in users' mental models "
                            },
                            {
                                "type": "text",
                                "text": "a priori",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is, I think, by definition essential.\n\nAs an example, I manage a deployment system in my day job, and it operates as a convergence engine: you give it the desired state (package versions, number of hosts, etc.) and it takes the steps to get from here to there. Once we released it, however, we uncovered several cases where people care "
                            },
                            {
                                "type": "text",
                                "text": "how",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " we get from here to there:\n\na) Sometimes there are hosts that we think can be reused but customers don't want to allow, for reasons our tooling can't see (and there'll always be some of those reasons: outdated secrets, corrupted data, etc.)\n\nb) Sometimes our customers want for a specific cluster to not be modified, while another subset is. Rather than have to painfully specify the desired state to be identical to the existing state in those cases, they'd rather just get a checkbox that says \"hands off this cluster!\"\n\nBoth these changes have been difficult because of the deep architectural division between ends and means in our tool."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "c334e7ae-baa1-4d79-b3ac-81cd4cf21d54",
        "type": "message",
        "text": "Anecdote regarding putting things too close together: we've been trying to onboard teams in my company to a new tool. Our good intentions originally were to do all the legwork and present them with a single go/no-go decision. And we kept finding that people would put off the decision.\n\nOne of the things we discovered (this is an ongoing issue) was that our decision to show all the services owned by a team in a single document was counter-productive. Talking about each service separately helped people feel less overwhelmed.",
        "user": "UCUSW7WVD",
        "ts": "1580760562.480400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9+EF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Anecdote regarding putting things too close together: we've been trying to onboard teams in my company to a new tool. Our good intentions originally were to do all the legwork and present them with a single go/no-go decision. And we kept finding that people would put off the decision.\n\nOne of the things we discovered (this is an ongoing issue) was that our decision to show all the services owned by a team in a single document was counter-productive. Talking about each service separately helped people feel less overwhelmed."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "e2cf8486-f056-4495-8d8f-857da40e5e11",
        "type": "message",
        "text": "I thought I'd give others a chance first :smile:\n\nThe Agaram Paradox: to get to better interfaces, expose your implementations.",
        "user": "UCUSW7WVD",
        "ts": "1580760750.480700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h0H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I thought I'd give others a chance first "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe Agaram Paradox: to get to better interfaces, expose your implementations."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580718026.447200",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "exploding_head",
                "users": [
                    "UC2A2ARPT",
                    "UKJGU23KP",
                    "UFB8STN7K",
                    "UHWC9PXBL"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "ce1af757-e9da-4c72-9bdd-19c190377aa4",
        "type": "message",
        "text": "I think things that give the user a good experience can be essential complexity, but it\u2019s more debatable. We _know_ that not crashing or corrupting data is essential, but you can always argue (and sometimes you\u2019ll be right) that a particular thing that makes an application feel nice to use isn\u2019t really essential.\n\n(Also, what\u2019s essential now isn\u2019t the same as what was essential in the past. At lunch, I watched half of Modern Compiler Construction, where Anders Hejlsberg compares a 32kb compiler to a modern compiler--what users want has changed).",
        "user": "UKJGU23KP",
        "ts": "1580760834.480900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xkl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think things that give the user a good experience can be essential complexity, but it\u2019s more debatable. We "
                            },
                            {
                                "type": "text",
                                "text": "know",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that not crashing or corrupting data is essential, but you can always argue (and sometimes you\u2019ll be right) that a particular thing that makes an application feel nice to use isn\u2019t really essential.\n\n(Also, what\u2019s essential now isn\u2019t the same as what was essential in the past. At lunch, I watched half of Modern Compiler Construction, where Anders Hejlsberg compares a 32kb compiler to a modern compiler--what users want has changed)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "bd4f4172-42d3-4aa0-aeca-08f1e673782b",
        "type": "message",
        "text": "Yeah, user mental model feels like a superior scalpel here than user experience for teasing apart the two categories. Experience may be at a local optimum. But what's in the user's head you can never get away from.",
        "user": "UCUSW7WVD",
        "ts": "1580761003.481100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1580761039.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1BUgG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, user mental model feels like a superior scalpel here than user experience for teasing apart the two categories. Experience may be at a local optimum. But what's in the user's head you can never get away from."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "9ef0aa2a-0742-497c-b9ad-a6a8ce014cc9",
        "type": "message",
        "text": "I guess I\u2019m assuming that if something doesn\u2019t match your mental model, you\u2019ll probably have a bad experience.",
        "user": "UKJGU23KP",
        "ts": "1580761361.481400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UKn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I guess I\u2019m assuming that if something doesn\u2019t match your mental model, you\u2019ll probably have a bad experience."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "c456bcad-9ac9-4e63-b774-85a7daebe0f1",
        "type": "message",
        "text": "I think we\u2019re describing a property of a system. Since users are different, we can\u2019t design something that will seem essential to all users, but I think we can design systems that empower users to strip away the pieces that they feel are inessential. Programming itself, I believe, has this property. I can choose to use a high-level library, or I can look at its dependencies and use those, or I can re-implement the small piece I need from scratch. Emacs, to the extent that its functionality is implemented as modes on top of a fairly bare-bones editor also has this property.",
        "user": "UKDM3GLAJ",
        "ts": "1580761459.481600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N8/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think we\u2019re describing a property of a system. Since users are different, we can\u2019t design something that will seem essential to all users, but I think we can design systems that empower users to strip away the pieces that they feel are inessential. Programming itself, I believe, has this property. I can choose to use a high-level library, or I can look at its dependencies and use those, or I can re-implement the small piece I need from scratch. Emacs, to the extent that its functionality is implemented as modes on top of a fairly bare-bones editor also has this property."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "eea37f3c-8cca-467a-937a-5b0be53d0421",
        "type": "message",
        "text": "With respect to mental models..\n\nI have a blog post draft I've been sitting on for over a year. It's about the positive value of flawed mental models, and by extension that harm that can come from us toolmakers being too concerned with instilling correct mental models in the users of our tools.\n\nA motivating example:\n&gt; Hammers can hit nails. That's their very purpose. But they can also hit screws, which is a great way to make a screw stay put while you reach for the screwdriver. They can also dent and deform sheet metal, which is useful for crafting a steel drum. They can knock loose a stuck fitting or lid, especially when hitting the free end of a long wrench on a stuck nut. They can punch a hole in drywall, making it easier to tear down. They can also smash your hand.\n&gt; Hammers are tools for working with nails. This is a conceptual constraint placed on hammers by their designers. Hammers are designed with this specific intent in mind. But sometimes, hammers are just tools for amplifying the force of your arm. Sometimes, hammers are but tools for surviving a forceful impact.\nThe [unfinished] draft, if you're interested: <https://ivanish.ca/mental-models/>",
        "user": "UC2A2ARPT",
        "ts": "1580761660.481800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1580761665.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sATtZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "With respect to mental models..\n\nI have a blog post draft I've been sitting on for over a year. It's about the positive value of flawed mental models, and by extension that harm that can come from us toolmakers being too concerned with instilling correct mental models in the users of our tools.\n\nA motivating example:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hammers can hit nails. That's their very purpose. But they can also hit screws, which is a great way to make a screw stay put while you reach for the screwdriver. They can also dent and deform sheet metal, which is useful for crafting a steel drum. They can knock loose a stuck fitting or lid, especially when hitting the free end of a long wrench on a stuck nut. They can punch a hole in drywall, making it easier to tear down. They can also smash your hand.\nHammers are tools for working with nails. This is a conceptual constraint placed on hammers by their designers. Hammers are designed with this specific intent in mind. But sometimes, hammers are just tools for amplifying the force of your arm. Sometimes, hammers are but tools for surviving a forceful impact."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe [unfinished] draft, if you're interested: "
                            },
                            {
                                "type": "link",
                                "url": "https://ivanish.ca/mental-models/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f4aa1132-f425-4108-837e-5e3cb01ae2eb",
        "type": "message",
        "text": "So to that end, I don't think mental models are a superior scalpel \u2014\u00a0if these mental models are what drive the distinction between essential and accidental, that's going to force us to be even more careful about mental model correctness, and then lose the benefit of seeing our tool users as unreliable narrators, a font of happy accidents, or intentional creative misusers.",
        "user": "UC2A2ARPT",
        "ts": "1580761779.482300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1580761863.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WGPI7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So to that end, I don't think mental models are a superior scalpel \u2014\u00a0if these mental models are what drive the distinction between essential and accidental, that's going to force us to be even more careful about mental model correctness, and then lose the benefit of seeing our tool users as unreliable narrators, a font of happy accidents, or intentional creative misusers."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "d1cd463e-58bd-421a-b440-0460f7c109d3",
        "type": "message",
        "text": "I think that\u2019s right. I think it matters when the mental model has too much slippage. Or when the mental model and the underlying model differ in ways that result in the user being surprised/stuck.",
        "user": "UKJGU23KP",
        "ts": "1580762000.482600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WDEXD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think that\u2019s right. I think it matters when the mental model has too much slippage. Or when the mental model and the underlying model differ in ways that result in the user being surprised/stuck."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "354c8d32-7026-49d7-b033-f337953eadc7",
        "type": "message",
        "text": "Surprise can lead to excitement (further to what Chris Granger was talking about above), and being stuck can lead to creative alternatives (like my hammer examples). I see both outcomes _constantly_ from the artists on my team.",
        "user": "UC2A2ARPT",
        "ts": "1580762123.482800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gnw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Surprise can lead to excitement (further to what Chris Granger was talking about above), and being stuck can lead to creative alternatives (like my hammer examples). I see both outcomes "
                            },
                            {
                                "type": "text",
                                "text": "constantly",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " from the artists on my team."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "820d3bb7-2015-41ad-91bf-39b6a896a70f",
        "type": "message",
        "text": "&gt; The Agaram Paradox: to get to better interfaces, expose your implementations.\nDiscuss!",
        "user": "UC2A2ARPT",
        "ts": "1580762349.483300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vVK5",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Agaram Paradox: to get to better interfaces, expose your implementations."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nDiscuss!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580762349.483300",
        "reply_count": 6,
        "reply_users_count": 3,
        "latest_reply": "1580795956.493300",
        "reply_users": [
            "UC2A2ARPT",
            "UD31LGQKB",
            "UCUSW7WVD"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "53b087a6-0ac0-4af9-9ea0-273c4be979e8",
        "type": "message",
        "text": "(Backlink: <https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580760750480700?thread_ts=1580718026.447200&amp;cid=C5T9GPWFL>)",
        "user": "UC2A2ARPT",
        "ts": "1580762413.483400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1580762418.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n3k4E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(Backlink: "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580760750480700?thread_ts=1580718026.447200&cid=C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580762349.483300",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "0f736c5e-46fc-420c-80fa-29b307177a6f",
        "type": "message",
        "text": "<@UCUSW7WVD> \u2014\u00a0I'd love a fuller explanation.",
        "user": "UC2A2ARPT",
        "ts": "1580762438.483800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PIHUB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " \u2014\u00a0I'd love a fuller explanation."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580762349.483300",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "74e326af-3b2d-4ccc-9a95-c35fbf57c65a",
        "type": "message",
        "text": "<@UC2A2ARPT> I totally agree with that! By \"mental model\" I mean what people come to the computer _with_ (which is usually about a problem), and not what the computer tries to 'instill' in them (which I think of more as the information architecture of a _solution_)",
        "user": "UCUSW7WVD",
        "ts": "1580762541.484000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1580762664.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hAj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " I totally agree with that! By \"mental model\" I mean what people come to the computer "
                            },
                            {
                                "type": "text",
                                "text": "with",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (which is usually about a problem), and not what the computer tries to 'instill' in them (which I think of more as the information architecture of a "
                            },
                            {
                                "type": "text",
                                "text": "solution",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "46f0a3cb-51aa-457a-a3f2-d741489fef97",
        "type": "message",
        "text": "I don\u2019t know how seriously we\u2019re disagreeing. If you\u2019re just saying that can sometimes be true, I imagine so. But if you think it\u2019s the norm, I\u2019m going to disagree and say it\u2019s \u201cman bites dog\u201d.",
        "user": "UKJGU23KP",
        "ts": "1580762589.484200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MVm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don\u2019t know how seriously we\u2019re disagreeing. If you\u2019re just saying that can sometimes be true, I imagine so. But if you think it\u2019s the norm, I\u2019m going to disagree and say it\u2019s \u201cman bites dog\u201d."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "ccd0e49d-7090-4882-801a-1817aace08dd",
        "type": "message",
        "text": "I'm not sure to agree with \"For that matter, abstractions are incidental complexity. Again, they're an affordance for thought that isn't strictly necessary.\"\n\nI always understood accidental/incidental complexity as relative to a problem that a human is trying to solve. So the problem and the fact that a human is trying to solve it are important in order to consider whether an abstraction is essential or not.\n\nYou will always express your computation using some kind of abstraction. If your solution is expressed in the language of the domain, I would consider that there is little accidental complexity. But as soon as those abstractions get in your way and you see yourself doing more and more housekeeping then you have accidental complexity and a different abstraction is probably necessary to get rid of it.",
        "user": "UHZUS56SV",
        "ts": "1580764158.484700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z4dnz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not sure to agree with \"For that matter, abstractions are incidental complexity. Again, they're an affordance for thought that isn't strictly necessary.\"\n\nI always understood accidental/incidental complexity as relative to a problem that a human is trying to solve. So the problem and the fact that a human is trying to solve it are important in order to consider whether an abstraction is essential or not.\n\nYou will always express your computation using some kind of abstraction. If your solution is expressed in the language of the domain, I would consider that there is little accidental complexity. But as soon as those abstractions get in your way and you see yourself doing more and more housekeeping then you have accidental complexity and a different abstraction is probably necessary to get rid of it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "44fa7cb9-f87a-4318-b91d-6c769b09c9dc",
        "type": "message",
        "text": "And that's no different from scientific theories. To take the famous example of Ptolemaic epicycles. If you want to predict the position of a planet in our solar system, an heliocentric model is not \"strictly necessary\". It is just much easier because you have a lot less accidental complexity.\n\nWhat is also interesting in this example is that the abstractions of the geocentric model are easier than the heliocentric ones. They just don't scale as well to solve actual problems. Illustrating that what seems harder at first can make things simpler later.",
        "user": "UHZUS56SV",
        "ts": "1580764636.484900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5bB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And that's no different from scientific theories. To take the famous example of Ptolemaic epicycles. If you want to predict the position of a planet in our solar system, an heliocentric model is not \"strictly necessary\". It is just much easier because you have a lot less accidental complexity.\n\nWhat is also interesting in this example is that the abstractions of the geocentric model are easier than the heliocentric ones. They just don't scale as well to solve actual problems. Illustrating that what seems harder at first can make things simpler later."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "aeb9f885-1a75-4c47-b83c-ea1c1716c00b",
        "type": "message",
        "text": "&gt; abstractions of the geocentric model are easier than the heliocentric ones\nI don't follow. Would you mind explaining that point a bit more? Do you mean that we developed the geocentric model first, and thus it was \"easier\" to discover than the later, more elusive heliocentric one?",
        "user": "UC2A2ARPT",
        "ts": "1580766205.485400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1580766271.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CEUZw",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "abstractions of the geocentric model are easier than the heliocentric ones"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't follow. Would you mind explaining that point a bit more? Do you mean that we developed the geocentric model first, and thus it was \"easier\" to discover than the later, more elusive heliocentric one?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "44A37D2C-5F6D-4C36-A203-FAA51654A0BA",
        "type": "message",
        "text": "Easier because circles are easier to describe than ellipses.",
        "user": "UHZUS56SV",
        "ts": "1580767174.487100",
        "team": "T5TCAFTA9",
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "D931193F-820A-4C35-9E17-41B07F3FF41B",
        "type": "message",
        "text": "They\u2019re neat and simple compared to an ellipse.",
        "user": "UHZUS56SV",
        "ts": "1580767256.488100",
        "team": "T5TCAFTA9",
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "67af54ae-3e99-457e-bd3a-9809d37b2970",
        "type": "message",
        "text": "Software is the hardest thing. Fuller version: cheap complexity has large costs that are hidden, long-term, and compounding.",
        "user": "U6KQ2S410",
        "ts": "1580767300.488400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XgrL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Software is the hardest thing. Fuller version: cheap complexity has large costs that are hidden, long-term, and compounding."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580718026.447200",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UFLN9JFRT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "30933ac0-819f-4dc6-b11b-f82078294fec",
        "type": "message",
        "text": "Removing complexity from one part of a system often has the side effect of introducing complexity somewhere else.",
        "user": "UJN1TAYEQ",
        "ts": "1580769494.488800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RSrK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Removing complexity from one part of a system often has the side effect of introducing complexity somewhere else."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580718026.447200",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    }
]