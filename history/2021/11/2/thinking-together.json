[
    {
        "client_msg_id": "e500e9a7-f32a-40c3-be6b-40199115d2c5",
        "type": "message",
        "text": "A thought that\u2019s been crystallizing for me is that the essence of \u2018coding\u2019 is *modeling &amp; simulation* (not e.g. data and functions). These themes show up all the time in FoC contexts, but as far as I can tell they\u2019re rarely the ROOT metaphors of a system.\n\nOf course there are plenty of examples in \u201creal engineering,\u201d what Alan Kay refers to as CAD&lt;-&gt;SIM-&gt;FAB system. Do you know of examples of \u2018convivial computing\u2019 projects where modeling and simulation are the main event, or readings on the topic? What do you think of this premise?\n\nHere\u2019s a recent <https://www.quora.com/Does-Alan-Kay-see-any-new-ideas-in-computing|Quora answer> for more context: *Does Alan Kay see any new ideas in computing?*\n&gt; \u201cNew\u201d is not what I look for. \u201cIdeas that make a qualitative difference over past techniques\u201d are what I\u2019d like to see.\n&gt; \n&gt; Years ago, I\u2019m fairly sure I was aware of pretty much everything regarding computing that was going on in the world. Today, I\u2019m definitely not aware of everything, so it\u2019s reasonably likely that if there was something really great being done somewhere that I wouldn\u2019t know about it.\n&gt; \n&gt; I would be most interested in learning about \u201cqualitatively more expressive\u201d programming that is more in line with top-level engineering practices of the CAD&lt;-&gt;SIM-&gt;FAB systems found in serious engineering of large complex systems in the physical worlds of civil, electrical, automotive, aeronautical, biological, etc. engineering.\n&gt; \n&gt; In the CAD&lt;-&gt;SIM part I\u2019d like to see the designs understandable at the level of visualizable semantic requirements and specifications that can be automatically simulated (on supercomputers if necessary) in real-time, and then safely optimized in various ways for many targets.\n&gt; \n&gt; Isolating semantics in the CAD&lt;-&gt;SIM part implies that what is represented here is a felicitous combination of \u201ccompact and understandable\u201d.\n&gt; \n&gt; The FAB-part pragmatics are very interesting in their own right, and besides efficiencies, should be able to deal with enormous scaling and various kinds of latencies and errors, etc.\n&gt; \n&gt; The above would be the minimal visions and goals that I think systems designers within computing and software engineering should be aiming for.\n&gt; \n&gt; I\u2019m not aware of something like this being worked on at present, but these days this could be just because I haven\u2019t come across it.",
        "user": "U9C92716C",
        "ts": "1635811447.034700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wxvj2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A thought that\u2019s been crystallizing for me is that the essence of \u2018coding\u2019 is "
                            },
                            {
                                "type": "text",
                                "text": "modeling & simulation ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(not e.g. data and functions). These themes show up all the time in FoC contexts, but as far as I can tell they\u2019re rarely the ROOT metaphors of a system.\n\nOf course there are plenty of examples in \u201creal engineering,\u201d what Alan Kay refers to as CAD<->SIM->FAB system. Do you know of examples of \u2018convivial computing\u2019 projects where modeling and simulation are the main event, or readings on the topic? What do you think of this premise?\n\nHere\u2019s a recent "
                            },
                            {
                                "type": "link",
                                "url": "https://www.quora.com/Does-Alan-Kay-see-any-new-ideas-in-computing",
                                "text": "Quora answer"
                            },
                            {
                                "type": "text",
                                "text": " for more context: "
                            },
                            {
                                "type": "text",
                                "text": "Does Alan Kay see any new ideas in computing?",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\u201cNew\u201d is not what I look for. \u201cIdeas that make a qualitative difference over past techniques\u201d are what I\u2019d like to see.\n\nYears ago, I\u2019m fairly sure I was aware of pretty much everything regarding computing that was going on in the world. Today, I\u2019m definitely not aware of everything, so it\u2019s reasonably likely that if there was something really great being done somewhere that I wouldn\u2019t know about it.\n\nI would be most interested in learning about \u201cqualitatively more expressive\u201d programming that is more in line with top-level engineering practices of the CAD<->SIM->FAB systems found in serious engineering of large complex systems in the physical worlds of civil, electrical, automotive, aeronautical, biological, etc. engineering.\n\nIn the CAD<->SIM part I\u2019d like to see the designs understandable at the level of visualizable semantic requirements and specifications that can be automatically simulated (on supercomputers if necessary) in real-time, and then safely optimized in various ways for many targets.\n\nIsolating semantics in the CAD<->SIM part implies that what is represented here is a felicitous combination of \u201ccompact and understandable\u201d.\n\nThe FAB-part pragmatics are very interesting in their own right, and besides efficiencies, should be able to deal with enormous scaling and various kinds of latencies and errors, etc.\n\nThe above would be the minimal visions and goals that I think systems designers within computing and software engineering should be aiming for.\n\nI\u2019m not aware of something like this being worked on at present, but these days this could be just because I haven\u2019t come across it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1635811447.034700",
        "reply_count": 10,
        "reply_users_count": 4,
        "latest_reply": "1636062690.058000",
        "reply_users": [
            "UEBG0NPDK",
            "U9C92716C",
            "UCUSW7WVD",
            "UE6EFEPTQ"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "B3EDA895-7CAD-47DE-8C28-C36AF0DAC12E",
        "type": "message",
        "text": "Simulink, yakindu, and the lifecycle modeling language (LML) folks all come to mind. ",
        "user": "UEBG0NPDK",
        "ts": "1635816561.036500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kPb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Simulink, yakindu, and the lifecycle modeling language (LML) folks all come to mind. "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1635811447.034700",
        "parent_user_id": "U9C92716C"
    },
    {
        "client_msg_id": "2FDE45FD-BAA3-4266-AAE4-9F726DA98336",
        "type": "message",
        "text": "And of course SysML",
        "user": "UEBG0NPDK",
        "ts": "1635816605.036900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aWDE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And of course SysML"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1635811447.034700",
        "parent_user_id": "U9C92716C"
    },
    {
        "client_msg_id": "264177FA-D228-4CBE-8165-7EB0FC9065AA",
        "type": "message",
        "text": "Though I think LML is a better approach",
        "user": "UEBG0NPDK",
        "ts": "1635816623.037500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GQGz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Though I think LML is a better approach"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1635811447.034700",
        "parent_user_id": "U9C92716C"
    },
    {
        "client_msg_id": "43AA9E5A-5908-443A-A191-E9583709BE7B",
        "type": "message",
        "text": "Thanks Chris! I guess I still see those tools in the CAD/SIM/FAB camp, at least Simulink and yakindu, though I prob need to make another category for \u201cbusiness processes\u201d (which I still don't think the UML family has done a great job solving). For me 'convivial computing\u2019 intends something I might use to build/edit my own tools (notes, todos, etc) in a live environment.",
        "user": "U9C92716C",
        "ts": "1635818438.043000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "usu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks Chris! I guess I still see those tools in the CAD/SIM/FAB camp, at least Simulink and yakindu, though I prob need to make another category for \u201cbusiness processes\u201d (which I still don't think the UML family has done a great job solving). For me 'convivial computing\u2019 intends something I might use to build/edit my own tools (notes, todos, etc) in a live environment."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1635811447.034700",
        "parent_user_id": "U9C92716C"
    },
    {
        "client_msg_id": "F0626120-6452-40D4-9FE4-BF54F248D1BD",
        "type": "message",
        "text": "Huh i hadn't taken a close look at LML though, that does look worth knowing",
        "user": "U9C92716C",
        "ts": "1635818575.044100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q+OU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Huh i hadn't taken a close look at LML though, that does look worth knowing"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1635811447.034700",
        "parent_user_id": "U9C92716C"
    },
    {
        "client_msg_id": "8755d8bc-2b13-4c3b-b1d3-2d63f20a739d",
        "type": "message",
        "text": "Also Netlogo which is getting discussed at <https://futureofcoding.slack.com/archives/C5U3SEW6A/p1635772261029400?thread_ts=1635772261.029400&amp;cid=C5U3SEW6A|https://futureofcoding.slack.com/archives/C5U3SEW6A/p1635772261029400?thread_ts=1635772261.029400&amp;cid=C5U3SEW6A>\n\nDalton, are you suggesting using simulation metaphors for things like programming email filters? :thinking_face:\n\nWould HyperCard and HyperTalk fit the bill?",
        "user": "UCUSW7WVD",
        "ts": "1635862299.044600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1635772261029400?thread_ts=1635772261.029400&amp;cid=C5U3SEW6A",
                "fallback": "[November 1st, 2021 6:11 AM] mornymorny: An interesting little application; from what I can tell written in a combination of Logo and Lisp.  You can interactively edit the UI, etc.\nHit the 'Setup' then the 'Go' button to run the code (the source itself is hidden by the scrollbar in the main window).\n<https://codap.concord.org/app/static/dg/en/cert/index.html#shared=https://cfm-shared.concord.org/iGCemjqgrcHduADPwtMM/file.json>\n(Oh, and it is a virus/Covid simulator)",
                "ts": "1635772261.029400",
                "author_id": "UUQ2EQW21",
                "author_subname": "Chris Maughan",
                "channel_team": "T5TCAFTA9",
                "channel_id": "C5U3SEW6A",
                "channel_name": "linking-together",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "An interesting little application; from what I can tell written in a combination of Logo and Lisp.  You can interactively edit the UI, etc.\nHit the 'Setup' then the 'Go' button to run the code (the source itself is hidden by the scrollbar in the main window).\n<https://codap.concord.org/app/static/dg/en/cert/index.html#shared=https://cfm-shared.concord.org/iGCemjqgrcHduADPwtMM/file.json>\n(Oh, and it is a virus/Covid simulator)",
                "message_blocks": [
                    {
                        "team": "T5TCAFTA9",
                        "channel": "C5U3SEW6A",
                        "ts": "1635772261.029400",
                        "message": {
                            "blocks": [
                                {
                                    "type": "rich_text",
                                    "block_id": "Kpi",
                                    "elements": [
                                        {
                                            "type": "rich_text_section",
                                            "elements": [
                                                {
                                                    "type": "text",
                                                    "text": "An interesting little application; from what I can tell written in a combination of Logo and Lisp.  You can interactively edit the UI, etc.\nHit the 'Setup' then the 'Go' button to run the code (the source itself is hidden by the scrollbar in the main window).\n"
                                                },
                                                {
                                                    "type": "link",
                                                    "url": "https://codap.concord.org/app/static/dg/en/cert/index.html#shared=https://cfm-shared.concord.org/iGCemjqgrcHduADPwtMM/file.json"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": "\n(Oh, and it is a virus/Covid simulator)"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "author_name": "Chris Maughan",
                "author_link": "https://futureofcoding.slack.com/team/UUQ2EQW21",
                "author_icon": "https://secure.gravatar.com/avatar/2266cacc8f3c9964e7bfb1c357bf6873.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0024-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1635772261029400?thread_ts=1635772261.029400&amp;cid=C5U3SEW6A",
                "footer": "Thread in #linking-together"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N+M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also Netlogo which is getting discussed at "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1635772261029400?thread_ts=1635772261.029400&cid=C5U3SEW6A",
                                "text": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1635772261029400?thread_ts=1635772261.029400&cid=C5U3SEW6A"
                            },
                            {
                                "type": "text",
                                "text": "\n\nDalton, are you suggesting using simulation metaphors for things like programming email filters? "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face"
                            },
                            {
                                "type": "text",
                                "text": "\n\nWould HyperCard and HyperTalk fit the bill?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1635811447.034700",
        "parent_user_id": "U9C92716C"
    },
    {
        "client_msg_id": "49580b29-5fea-49b1-8e21-aee0688af317",
        "type": "message",
        "text": "Hi folks!\nIt's been a while since my last post in this group, and it feels good to be back with some new FoC-related thoughts: I've been thinking about *the tree structure of file systems* recently and it turns out that they're limiting and require workarounds for relatively common use cases. Files contain data, but don't have children. Folders have children, but can't store data themselves. What if a file system had \"nodes\" that could store data AND have children?\nI've written a blog post about this and would like to hear your thoughts. As I'm not a native speaker in English and not really talented in writing, I'd be interested in feedback regarding the content as well as the general writing style etc.. Thanks in advance and looking forward to interesting discussions!\n<https://fkohlgrueber.github.io/blog/tree-structure-of-file-systems/>",
        "user": "UAL7940NM",
        "ts": "1635883565.055300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Felix\u2019s Blog",
                "title": "The Tree Structure of File Systems",
                "title_link": "https://fkohlgrueber.github.io/blog/tree-structure-of-file-systems/",
                "text": "I\u2019ve been using file system for a long time and have always thought of them as tree data structures. A couple of days ago, I had a realization that seems obvious in retrospect, but didn\u2019t occur to me all those years before: The file system tree is different from what I\u2019d usually implement as a tree structure.",
                "fallback": "Felix\u2019s Blog: The Tree Structure of File Systems",
                "ts": 1635875700,
                "from_url": "https://fkohlgrueber.github.io/blog/tree-structure-of-file-systems/",
                "id": 1,
                "original_url": "https://fkohlgrueber.github.io/blog/tree-structure-of-file-systems/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DZjRI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi folks!\nIt's been a while since my last post in this group, and it feels good to be back with some new FoC-related thoughts: I've been thinking about "
                            },
                            {
                                "type": "text",
                                "text": "the tree structure of file systems",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " recently and it turns out that they're limiting and require workarounds for relatively common use cases. Files contain data, but don't have children. Folders have children, but can't store data themselves. What if a file system had \"nodes\" that could store data AND have children?\nI've written a blog post about this and would like to hear your thoughts. As I'm not a native speaker in English and not really talented in writing, I'd be interested in feedback regarding the content as well as the general writing style etc.. Thanks in advance and looking forward to interesting discussions!\n"
                            },
                            {
                                "type": "link",
                                "url": "https://fkohlgrueber.github.io/blog/tree-structure-of-file-systems/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1635883565.055300",
        "reply_count": 5,
        "reply_users_count": 3,
        "latest_reply": "1635994953.057100",
        "reply_users": [
            "UA14TGLTC",
            "UAL7940NM",
            "U016VUZGUUQ"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "6759577b-7929-4fe7-9055-1f241b6e30ba",
        "type": "message",
        "text": "`index.html` \u2014 not to be facetious, and I see you write about it in the article.  Of all filesystem woes, data stored in a directory proper is not one that comes to mind.\n\nOne thing that does come to mind is treating a directory as thought it were a file.  I mean macOS packages.  <https://en.wikipedia.org/wiki/Package_(macOS)>",
        "user": "UA14TGLTC",
        "ts": "1635922638.055900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QLh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "index.html",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " \u2014 not to be facetious, and I see you write about it in the article.  Of all filesystem woes, data stored in a directory proper is not one that comes to mind.\n\nOne thing that does come to mind is treating a directory as thought it were a file.  I mean macOS packages.  "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Package_(macOS)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1635883565.055300",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "47f38070-e5c8-46fa-b17b-578a11b25968",
        "type": "message",
        "text": "I didn't know about macOS packages, thanks for the hint!",
        "user": "UAL7940NM",
        "ts": "1635927151.056100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pPl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I didn't know about macOS packages, thanks for the hint!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1635883565.055300",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "e5059931-8d7d-491c-b874-b7d342392d90",
        "type": "message",
        "text": "HTML itself is another thing that has this \"data at every level\" structure, in the form of attributes. It's everywhere.\n\nFWIW I think the more interesting problem with filesystem trees is that they're rigidly tree shaped, when tags or 2d tables might sometimes be more useful. :)",
        "user": "U016VUZGUUQ",
        "ts": "1635956482.056300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "55Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "HTML itself is another thing that has this \"data at every level\" structure, in the form of attributes. It's everywhere.\n\nFWIW I think the more interesting problem with filesystem trees is that they're rigidly tree shaped, when tags or 2d tables might sometimes be more useful. :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1635883565.055300",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "4d90f04c-1827-48bd-9cbb-8e038982e32d",
        "type": "message",
        "text": "<@U016VUZGUUQ> yes, file systems being limited to tree structures is an issue. Often, something more general (e.g. a graph) would make more sense. That's something for another blog post some day :wink:",
        "user": "UAL7940NM",
        "ts": "1635957345.056500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QnUA6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016VUZGUUQ"
                            },
                            {
                                "type": "text",
                                "text": " yes, file systems being limited to tree structures is an issue. Often, something more general (e.g. a graph) would make more sense. That's something for another blog post some day "
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1635883565.055300",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "19735620-9379-404c-a640-92c5f29f41a1",
        "type": "message",
        "text": "If only FSs were honest to goodness trees.  Hard links make for big headaches.",
        "user": "UA14TGLTC",
        "ts": "1635994953.057100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cjz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If only FSs were honest to goodness trees.  Hard links make for big headaches."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1635883565.055300",
        "parent_user_id": "UAL7940NM"
    },
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "this will probably sound overly philosophical but i\u2019m not trying to be.. just what seems to happen when i try to coherently define terms.\n\nfirst off, science &amp; engineering is almost always based on the assumption that we share a common \u2018reality,\u2019 which we come to understand through our band-limited, unreliable faculties of sensing and cognition. i will adopt that assumption throughout. studies and experience show our mental models to be wildly inconsistent, both internally (\u2018verification\u2019), measured against reality (\u2018validation\u2019) and compared to other people\u2019s (\u2018coordination\u2019), but they form the basis of pretty much every decision we make.\n\nmy best working def of a model is \u2018something that represents a partial world state\u2019\n- \u2018something\u2019 = has to exist in some form to be useful, whether encoded in a tangible object, a pencil &amp; paper sketch, computer memory, neural circuitry, etc.\n- \u2018represents\u2019 = ultimately in the eye of the beholder; requires some pre-shared bootstrapping model/implementation to be useful (e.g. among humans we have near-universal experiential primitives like \u2018dark/light\u2019, \u2018hot/cold,\u2019 etc)\n- \u2018world\u2019 = all of reality\n- \u2018partial world\u2019 = some subset of reality\n- \u2018state\u2019 = some configuration of that subset of reality (with implicit or explicit precision/likelihood)\n\nrepresentation is kind of subtle even beyond coordination (alan kay\u2019s \u2018communicating with aliens\u2019)... perhaps the most basic representation is a simple \u2018reference\u2019, which still encodes the assumption that there\u2019s a \u2018something\u2019 that\u2019s persistent and recognizable on the other end (\u2018object permanence\u2019). i don\u2019t see a flaw in saying \u2018pointers\u2019 are the most basic form of stateful cognition (and subject to the same foibles as c pointers... is the referent still there? can it still do the same things? does it still have the same properties? has it been replaced by an evil twin?)\n\nmodels can serve a bunch of different roles. e.g. a model can communicate an observation of what i claim the current world state to be, an instruction representing the world state i want a system to produce, or an imagined scenario to reason about.\n\n\u2018simulation\u2019 is a bit slippery; to me the useful primitive to start with is \u2018an ordered sequence of models,\u2019 in which case simulation is something like \u2018an ordered sequence of models representing the time evolution of a particular model according to some update rule\u2019\n\none could think of science as \u2018a process for finding models that best represent the world and finding rules for updating them that predict future world states\u2019, design as \u2018a process for defining models of how we want the world to be,\u2019 and engineering as \u2018a process for implementing rules (science) in order to achieve desired world states (design) based on current world states (science).\u2019 \u2018programming\u2019 tends to muddle all 3 together, whether explicitly or (usually) implicitly.\n\nall that said, yeah, <@UCUSW7WVD> programming email filters is squarely in the realm of what i\u2019m talking about. you start with a model of reality that also includes your computing environment - your machine, its OS, your browser, the mail server, etc etc, which you can always drill down from whatever abstraction your dealing with if needed. you define a model for what unfiltered email is like (\u2018science\u2019), a model of what you want your filtered email to be like (\u2018design\u2019), and come up with (science) &amp; implement (engineering) rules you think will achieve that. simulation is a powerful tool to aid in the \u2018coming up with and implementing rules\u2019 part (\u2019what happens if i project this rule on this inbox model over time?\u2019). to close the loop you also want some nice tools to see if it\u2019s working how you want it to. netlogo enables some of this in a very \u2018science-y\u2019 not \u2018user-y\u2019 context. hypercard gives you some nice tools for very ad hoc experimentation.\n\nwavelength check?",
        "user": "U9C92716C",
        "ts": "1636039327.057300",
        "thread_ts": "1635811447.034700",
        "root": {
            "client_msg_id": "e500e9a7-f32a-40c3-be6b-40199115d2c5",
            "type": "message",
            "text": "A thought that\u2019s been crystallizing for me is that the essence of \u2018coding\u2019 is *modeling &amp; simulation* (not e.g. data and functions). These themes show up all the time in FoC contexts, but as far as I can tell they\u2019re rarely the ROOT metaphors of a system.\n\nOf course there are plenty of examples in \u201creal engineering,\u201d what Alan Kay refers to as CAD&lt;-&gt;SIM-&gt;FAB system. Do you know of examples of \u2018convivial computing\u2019 projects where modeling and simulation are the main event, or readings on the topic? What do you think of this premise?\n\nHere\u2019s a recent <https://www.quora.com/Does-Alan-Kay-see-any-new-ideas-in-computing|Quora answer> for more context: *Does Alan Kay see any new ideas in computing?*\n&gt; \u201cNew\u201d is not what I look for. \u201cIdeas that make a qualitative difference over past techniques\u201d are what I\u2019d like to see.\n&gt; \n&gt; Years ago, I\u2019m fairly sure I was aware of pretty much everything regarding computing that was going on in the world. Today, I\u2019m definitely not aware of everything, so it\u2019s reasonably likely that if there was something really great being done somewhere that I wouldn\u2019t know about it.\n&gt; \n&gt; I would be most interested in learning about \u201cqualitatively more expressive\u201d programming that is more in line with top-level engineering practices of the CAD&lt;-&gt;SIM-&gt;FAB systems found in serious engineering of large complex systems in the physical worlds of civil, electrical, automotive, aeronautical, biological, etc. engineering.\n&gt; \n&gt; In the CAD&lt;-&gt;SIM part I\u2019d like to see the designs understandable at the level of visualizable semantic requirements and specifications that can be automatically simulated (on supercomputers if necessary) in real-time, and then safely optimized in various ways for many targets.\n&gt; \n&gt; Isolating semantics in the CAD&lt;-&gt;SIM part implies that what is represented here is a felicitous combination of \u201ccompact and understandable\u201d.\n&gt; \n&gt; The FAB-part pragmatics are very interesting in their own right, and besides efficiencies, should be able to deal with enormous scaling and various kinds of latencies and errors, etc.\n&gt; \n&gt; The above would be the minimal visions and goals that I think systems designers within computing and software engineering should be aiming for.\n&gt; \n&gt; I\u2019m not aware of something like this being worked on at present, but these days this could be just because I haven\u2019t come across it.",
            "user": "U9C92716C",
            "ts": "1635811447.034700",
            "team": "T5TCAFTA9",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "wxvj2",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "A thought that\u2019s been crystallizing for me is that the essence of \u2018coding\u2019 is "
                                },
                                {
                                    "type": "text",
                                    "text": "modeling & simulation ",
                                    "style": {
                                        "bold": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": "(not e.g. data and functions). These themes show up all the time in FoC contexts, but as far as I can tell they\u2019re rarely the ROOT metaphors of a system.\n\nOf course there are plenty of examples in \u201creal engineering,\u201d what Alan Kay refers to as CAD<->SIM->FAB system. Do you know of examples of \u2018convivial computing\u2019 projects where modeling and simulation are the main event, or readings on the topic? What do you think of this premise?\n\nHere\u2019s a recent "
                                },
                                {
                                    "type": "link",
                                    "url": "https://www.quora.com/Does-Alan-Kay-see-any-new-ideas-in-computing",
                                    "text": "Quora answer"
                                },
                                {
                                    "type": "text",
                                    "text": " for more context: "
                                },
                                {
                                    "type": "text",
                                    "text": "Does Alan Kay see any new ideas in computing?",
                                    "style": {
                                        "bold": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": "\n"
                                }
                            ]
                        },
                        {
                            "type": "rich_text_quote",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "\u201cNew\u201d is not what I look for. \u201cIdeas that make a qualitative difference over past techniques\u201d are what I\u2019d like to see.\n\nYears ago, I\u2019m fairly sure I was aware of pretty much everything regarding computing that was going on in the world. Today, I\u2019m definitely not aware of everything, so it\u2019s reasonably likely that if there was something really great being done somewhere that I wouldn\u2019t know about it.\n\nI would be most interested in learning about \u201cqualitatively more expressive\u201d programming that is more in line with top-level engineering practices of the CAD<->SIM->FAB systems found in serious engineering of large complex systems in the physical worlds of civil, electrical, automotive, aeronautical, biological, etc. engineering.\n\nIn the CAD<->SIM part I\u2019d like to see the designs understandable at the level of visualizable semantic requirements and specifications that can be automatically simulated (on supercomputers if necessary) in real-time, and then safely optimized in various ways for many targets.\n\nIsolating semantics in the CAD<->SIM part implies that what is represented here is a felicitous combination of \u201ccompact and understandable\u201d.\n\nThe FAB-part pragmatics are very interesting in their own right, and besides efficiencies, should be able to deal with enormous scaling and various kinds of latencies and errors, etc.\n\nThe above would be the minimal visions and goals that I think systems designers within computing and software engineering should be aiming for.\n\nI\u2019m not aware of something like this being worked on at present, but these days this could be just because I haven\u2019t come across it."
                                }
                            ]
                        }
                    ]
                }
            ],
            "thread_ts": "1635811447.034700",
            "reply_count": 10,
            "reply_users_count": 4,
            "latest_reply": "1636062690.058000",
            "reply_users": [
                "UEBG0NPDK",
                "U9C92716C",
                "UCUSW7WVD",
                "UE6EFEPTQ"
            ],
            "is_locked": false,
            "subscribed": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wXgse",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this will probably sound overly philosophical but i\u2019m not trying to be.. just what seems to happen when i try to coherently define terms.\n\nfirst off, science & engineering is almost always based on the assumption that we share a common \u2018reality,\u2019 which we come to understand through our band-limited, unreliable faculties of sensing and cognition. i will adopt that assumption throughout. studies and experience show our mental models to be wildly inconsistent, both internally (\u2018verification\u2019), measured against reality (\u2018validation\u2019) and compared to other people\u2019s (\u2018coordination\u2019), but they form the basis of pretty much every decision we make.\n\nmy best working def of a model is \u2018something that represents a partial world state\u2019\n- \u2018something\u2019 = has to exist in some form to be useful, whether encoded in a tangible object, a pencil & paper sketch, computer memory, neural circuitry, etc.\n- \u2018represents\u2019 = ultimately in the eye of the beholder; requires some pre-shared bootstrapping model/implementation to be useful (e.g. among humans we have near-universal experiential primitives like \u2018dark/light\u2019, \u2018hot/cold,\u2019 etc)\n- \u2018world\u2019 = all of reality\n- \u2018partial world\u2019 = some subset of reality\n- \u2018state\u2019 = some configuration of that subset of reality (with implicit or explicit precision/likelihood)\n\nrepresentation is kind of subtle even beyond coordination (alan kay\u2019s \u2018communicating with aliens\u2019)... perhaps the most basic representation is a simple \u2018reference\u2019, which still encodes the assumption that there\u2019s a \u2018something\u2019 that\u2019s persistent and recognizable on the other end (\u2018object permanence\u2019). i don\u2019t see a flaw in saying \u2018pointers\u2019 are the most basic form of stateful cognition (and subject to the same foibles as c pointers... is the referent still there? can it still do the same things? does it still have the same properties? has it been replaced by an evil twin?)\n\nmodels can serve a bunch of different roles. e.g. a model can communicate an observation of what i claim the current world state to be, an instruction representing the world state i want a system to produce, or an imagined scenario to reason about.\n\n\u2018simulation\u2019 is a bit slippery; to me the useful primitive to start with is \u2018an ordered sequence of models,\u2019 in which case simulation is something like \u2018an ordered sequence of models representing the time evolution of a particular model according to some update rule\u2019\n\none could think of science as \u2018a process for finding models that best represent the world and finding rules for updating them that predict future world states\u2019, design as \u2018a process for defining models of how we want the world to be,\u2019 and engineering as \u2018a process for implementing rules (science) in order to achieve desired world states (design) based on current world states (science).\u2019 \u2018programming\u2019 tends to muddle all 3 together, whether explicitly or (usually) implicitly.\n\nall that said, yeah, "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " programming email filters is squarely in the realm of what i\u2019m talking about. you start with a model of reality that also includes your computing environment - your machine, its OS, your browser, the mail server, etc etc, which you can always drill down from whatever abstraction your dealing with if needed. you define a model for what unfiltered email is like (\u2018science\u2019), a model of what you want your filtered email to be like (\u2018design\u2019), and come up with (science) & implement (engineering) rules you think will achieve that. simulation is a powerful tool to aid in the \u2018coming up with and implementing rules\u2019 part (\u2019what happens if i project this rule on this inbox model over time?\u2019). to close the loop you also want some nice tools to see if it\u2019s working how you want it to. netlogo enables some of this in a very \u2018science-y\u2019 not \u2018user-y\u2019 context. hypercard gives you some nice tools for very ad hoc experimentation.\n\nwavelength check?"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "99bd8e47-3159-4d4c-9b7d-343ff8f898bc"
    },
    {
        "client_msg_id": "21d89922-9831-4d0e-b6b4-ed5fd0922303",
        "type": "message",
        "text": "_written before I saw the above_\n\nAbsolutely! For me personally, \"the essence of \u2018coding\u2019 is\u00a0modeling &amp; simulation\" is exactly where I've come from in everything I've done in this space.\n\nI wouldn't just cross out \"e.g. data and functions\" as a result though - you can't exactly throw those out! Even when in the most modelly and simulatey world, you'll need to present data to the user to hold current states. And behaviours of those states is basically going to boil down to something like functions, even if presented more abstractly in pretty graphics. I mean, even Excel - the financial modeller/simulator - has those!\n\nFor me, programming is creating new realities or simulating existing ones. I often refer back to the early Macs which introduced to the world a wordprocessor program that made the page actually look like the printed page you'd end up with, instead of glowing text floating on a black background that bore no relation to it. This is modelling or simulation of printed paper.\n\nIn social media or chat you're modelling or simulating the relationships between people: their social graph. You're simulating them talking (or perhaps passing little paper notes to each other!)\n\nOf course, 3D virtual worlds and Augmented Reality are the extreme of this position, as is the programming of IoT devices.",
        "user": "UE6EFEPTQ",
        "ts": "1636044056.057600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xL8F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "written before I saw the above",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nAbsolutely! For me personally, \"the essence of \u2018coding\u2019 is\u00a0modeling & simulation\" is exactly where I've come from in everything I've done in this space.\n\nI wouldn't just cross out \"e.g. data and functions\" as a result though - you can't exactly throw those out! Even when in the most modelly and simulatey world, you'll need to present data to the user to hold current states. And behaviours of those states is basically going to boil down to something like functions, even if presented more abstractly in pretty graphics. I mean, even Excel - the financial modeller/simulator - has those!\n\nFor me, programming is creating new realities or simulating existing ones. I often refer back to the early Macs which introduced to the world a wordprocessor program that made the page actually look like the printed page you'd end up with, instead of glowing text floating on a black background that bore no relation to it. This is modelling or simulation of printed paper.\n\nIn social media or chat you're modelling or simulating the relationships between people: their social graph. You're simulating them talking (or perhaps passing little paper notes to each other!)\n\nOf course, 3D virtual worlds and Augmented Reality are the extreme of this position, as is the programming of IoT devices."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1635811447.034700",
        "parent_user_id": "U9C92716C"
    },
    {
        "client_msg_id": "900c98ae-e05c-47cb-95b1-d8b45459fc82",
        "type": "message",
        "text": "i\u2019m tracking. to try out my terminology (i know you wrote this before reading), i\u2019m def not throwing out data and functions but kind of putting them in their place. \u2018data\u2019 is the encoding of models in some reconstructable form. \u2018functions\u2019 are rules for transforming models (very useful in simulation or representation). representation is a separate issue.. can be whatever makes the most sense in context: text, diagrams, interactive widgets, spatial audio. a missing concept here is \u2018linking models together.\u2019\n\nall good examples of modeling and simulation, though i wouldn\u2019t say 3D VR is necessarily the extreme.. e.g. you can have rich representation capabilities but very poor modeling &amp; simulation capabilities. this is partly why a lot of MMOs despite flashy graphics struggled to achieve the immersive quality of text-based MUDs.\n\nIMO it\u2019s getting easier &amp; easier to hop around these these layers while programming and it can be hard to keep track of where the lines are drawn, to the detriment of comprehension.",
        "user": "U9C92716C",
        "ts": "1636048731.057800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gx58",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i\u2019m tracking. to try out my terminology (i know you wrote this before reading), i\u2019m def not throwing out data and functions but kind of putting them in their place. \u2018data\u2019 is the encoding of models in some reconstructable form. \u2018functions\u2019 are rules for transforming models (very useful in simulation or representation). representation is a separate issue.. can be whatever makes the most sense in context: text, diagrams, interactive widgets, spatial audio. a missing concept here is \u2018linking models together.\u2019\n\nall good examples of modeling and simulation, though i wouldn\u2019t say 3D VR is necessarily the extreme.. e.g. you can have rich representation capabilities but very poor modeling & simulation capabilities. this is partly why a lot of MMOs despite flashy graphics struggled to achieve the immersive quality of text-based MUDs.\n\nIMO it\u2019s getting easier & easier to hop around these these layers while programming and it can be hard to keep track of where the lines are drawn, to the detriment of comprehension."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1635811447.034700",
        "parent_user_id": "U9C92716C"
    },
    {
        "client_msg_id": "a1a9701a-f34d-4cb2-ad5f-6adc774ee5a0",
        "type": "message",
        "text": "On the new post, I agree with everything up to the email filter bit, which I'm still digesting but it's not resonating as yet!",
        "user": "UE6EFEPTQ",
        "ts": "1636062690.058000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3cjkI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On the new post, I agree with everything up to the email filter bit, which I'm still digesting but it's not resonating as yet!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1635811447.034700",
        "parent_user_id": "U9C92716C"
    }
]