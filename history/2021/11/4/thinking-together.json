[
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "this will probably sound overly philosophical but i\u2019m not trying to be.. just what seems to happen when i try to coherently define terms.\n\nfirst off, science &amp; engineering is almost always based on the assumption that we share a common \u2018reality,\u2019 which we come to understand through our band-limited, unreliable faculties of sensing and cognition. i will adopt that assumption throughout. studies and experience show our mental models to be wildly inconsistent, both internally (\u2018verification\u2019), measured against reality (\u2018validation\u2019) and compared to other people\u2019s (\u2018coordination\u2019), but they form the basis of pretty much every decision we make.\n\nmy best working def of a model is \u2018something that represents a partial world state\u2019\n- \u2018something\u2019 = has to exist in some form to be useful, whether encoded in a tangible object, a pencil &amp; paper sketch, computer memory, neural circuitry, etc.\n- \u2018represents\u2019 = ultimately in the eye of the beholder; requires some pre-shared bootstrapping model/implementation to be useful (e.g. among humans we have near-universal experiential primitives like \u2018dark/light\u2019, \u2018hot/cold,\u2019 etc)\n- \u2018world\u2019 = all of reality\n- \u2018partial world\u2019 = some subset of reality\n- \u2018state\u2019 = some configuration of that subset of reality (with implicit or explicit precision/likelihood)\n\nrepresentation is kind of subtle even beyond coordination (alan kay\u2019s \u2018communicating with aliens\u2019)... perhaps the most basic representation is a simple \u2018reference\u2019, which still encodes the assumption that there\u2019s a \u2018something\u2019 that\u2019s persistent and recognizable on the other end (\u2018object permanence\u2019). i don\u2019t see a flaw in saying \u2018pointers\u2019 are the most basic form of stateful cognition (and subject to the same foibles as c pointers... is the referent still there? can it still do the same things? does it still have the same properties? has it been replaced by an evil twin?)\n\nmodels can serve a bunch of different roles. e.g. a model can communicate an observation of what i claim the current world state to be, an instruction representing the world state i want a system to produce, or an imagined scenario to reason about.\n\n\u2018simulation\u2019 is a bit slippery; to me the useful primitive to start with is \u2018an ordered sequence of models,\u2019 in which case simulation is something like \u2018an ordered sequence of models representing the time evolution of a particular model according to some update rule\u2019\n\none could think of science as \u2018a process for finding models that best represent the world and finding rules for updating them that predict future world states\u2019, design as \u2018a process for defining models of how we want the world to be,\u2019 and engineering as \u2018a process for implementing rules (science) in order to achieve desired world states (design) based on current world states (science).\u2019 \u2018programming\u2019 tends to muddle all 3 together, whether explicitly or (usually) implicitly.\n\nall that said, yeah, <@UCUSW7WVD> programming email filters is squarely in the realm of what i\u2019m talking about. you start with a model of reality that also includes your computing environment - your machine, its OS, your browser, the mail server, etc etc, which you can always drill down from whatever abstraction your dealing with if needed. you define a model for what unfiltered email is like (\u2018science\u2019), a model of what you want your filtered email to be like (\u2018design\u2019), and come up with (science) &amp; implement (engineering) rules you think will achieve that. simulation is a powerful tool to aid in the \u2018coming up with and implementing rules\u2019 part (\u2019what happens if i project this rule on this inbox model over time?\u2019). to close the loop you also want some nice tools to see if it\u2019s working how you want it to. netlogo enables some of this in a very \u2018science-y\u2019 not \u2018user-y\u2019 context. hypercard gives you some nice tools for very ad hoc experimentation.\n\nwavelength check?",
        "user": "U9C92716C",
        "ts": "1636039327.057300",
        "thread_ts": "1635811447.034700",
        "root": {
            "client_msg_id": "e500e9a7-f32a-40c3-be6b-40199115d2c5",
            "type": "message",
            "text": "A thought that\u2019s been crystallizing for me is that the essence of \u2018coding\u2019 is *modeling &amp; simulation* (not e.g. data and functions). These themes show up all the time in FoC contexts, but as far as I can tell they\u2019re rarely the ROOT metaphors of a system.\n\nOf course there are plenty of examples in \u201creal engineering,\u201d what Alan Kay refers to as CAD&lt;-&gt;SIM-&gt;FAB system. Do you know of examples of \u2018convivial computing\u2019 projects where modeling and simulation are the main event, or readings on the topic? What do you think of this premise?\n\nHere\u2019s a recent <https://www.quora.com/Does-Alan-Kay-see-any-new-ideas-in-computing|Quora answer> for more context: *Does Alan Kay see any new ideas in computing?*\n&gt; \u201cNew\u201d is not what I look for. \u201cIdeas that make a qualitative difference over past techniques\u201d are what I\u2019d like to see.\n&gt; \n&gt; Years ago, I\u2019m fairly sure I was aware of pretty much everything regarding computing that was going on in the world. Today, I\u2019m definitely not aware of everything, so it\u2019s reasonably likely that if there was something really great being done somewhere that I wouldn\u2019t know about it.\n&gt; \n&gt; I would be most interested in learning about \u201cqualitatively more expressive\u201d programming that is more in line with top-level engineering practices of the CAD&lt;-&gt;SIM-&gt;FAB systems found in serious engineering of large complex systems in the physical worlds of civil, electrical, automotive, aeronautical, biological, etc. engineering.\n&gt; \n&gt; In the CAD&lt;-&gt;SIM part I\u2019d like to see the designs understandable at the level of visualizable semantic requirements and specifications that can be automatically simulated (on supercomputers if necessary) in real-time, and then safely optimized in various ways for many targets.\n&gt; \n&gt; Isolating semantics in the CAD&lt;-&gt;SIM part implies that what is represented here is a felicitous combination of \u201ccompact and understandable\u201d.\n&gt; \n&gt; The FAB-part pragmatics are very interesting in their own right, and besides efficiencies, should be able to deal with enormous scaling and various kinds of latencies and errors, etc.\n&gt; \n&gt; The above would be the minimal visions and goals that I think systems designers within computing and software engineering should be aiming for.\n&gt; \n&gt; I\u2019m not aware of something like this being worked on at present, but these days this could be just because I haven\u2019t come across it.",
            "user": "U9C92716C",
            "ts": "1635811447.034700",
            "team": "T5TCAFTA9",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "wxvj2",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "A thought that\u2019s been crystallizing for me is that the essence of \u2018coding\u2019 is "
                                },
                                {
                                    "type": "text",
                                    "text": "modeling & simulation ",
                                    "style": {
                                        "bold": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": "(not e.g. data and functions). These themes show up all the time in FoC contexts, but as far as I can tell they\u2019re rarely the ROOT metaphors of a system.\n\nOf course there are plenty of examples in \u201creal engineering,\u201d what Alan Kay refers to as CAD<->SIM->FAB system. Do you know of examples of \u2018convivial computing\u2019 projects where modeling and simulation are the main event, or readings on the topic? What do you think of this premise?\n\nHere\u2019s a recent "
                                },
                                {
                                    "type": "link",
                                    "url": "https://www.quora.com/Does-Alan-Kay-see-any-new-ideas-in-computing",
                                    "text": "Quora answer"
                                },
                                {
                                    "type": "text",
                                    "text": " for more context: "
                                },
                                {
                                    "type": "text",
                                    "text": "Does Alan Kay see any new ideas in computing?",
                                    "style": {
                                        "bold": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": "\n"
                                }
                            ]
                        },
                        {
                            "type": "rich_text_quote",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "\u201cNew\u201d is not what I look for. \u201cIdeas that make a qualitative difference over past techniques\u201d are what I\u2019d like to see.\n\nYears ago, I\u2019m fairly sure I was aware of pretty much everything regarding computing that was going on in the world. Today, I\u2019m definitely not aware of everything, so it\u2019s reasonably likely that if there was something really great being done somewhere that I wouldn\u2019t know about it.\n\nI would be most interested in learning about \u201cqualitatively more expressive\u201d programming that is more in line with top-level engineering practices of the CAD<->SIM->FAB systems found in serious engineering of large complex systems in the physical worlds of civil, electrical, automotive, aeronautical, biological, etc. engineering.\n\nIn the CAD<->SIM part I\u2019d like to see the designs understandable at the level of visualizable semantic requirements and specifications that can be automatically simulated (on supercomputers if necessary) in real-time, and then safely optimized in various ways for many targets.\n\nIsolating semantics in the CAD<->SIM part implies that what is represented here is a felicitous combination of \u201ccompact and understandable\u201d.\n\nThe FAB-part pragmatics are very interesting in their own right, and besides efficiencies, should be able to deal with enormous scaling and various kinds of latencies and errors, etc.\n\nThe above would be the minimal visions and goals that I think systems designers within computing and software engineering should be aiming for.\n\nI\u2019m not aware of something like this being worked on at present, but these days this could be just because I haven\u2019t come across it."
                                }
                            ]
                        }
                    ]
                }
            ],
            "thread_ts": "1635811447.034700",
            "reply_count": 10,
            "reply_users_count": 4,
            "latest_reply": "1636062690.058000",
            "reply_users": [
                "UEBG0NPDK",
                "U9C92716C",
                "UCUSW7WVD",
                "UE6EFEPTQ"
            ],
            "is_locked": false,
            "subscribed": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wXgse",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this will probably sound overly philosophical but i\u2019m not trying to be.. just what seems to happen when i try to coherently define terms.\n\nfirst off, science & engineering is almost always based on the assumption that we share a common \u2018reality,\u2019 which we come to understand through our band-limited, unreliable faculties of sensing and cognition. i will adopt that assumption throughout. studies and experience show our mental models to be wildly inconsistent, both internally (\u2018verification\u2019), measured against reality (\u2018validation\u2019) and compared to other people\u2019s (\u2018coordination\u2019), but they form the basis of pretty much every decision we make.\n\nmy best working def of a model is \u2018something that represents a partial world state\u2019\n- \u2018something\u2019 = has to exist in some form to be useful, whether encoded in a tangible object, a pencil & paper sketch, computer memory, neural circuitry, etc.\n- \u2018represents\u2019 = ultimately in the eye of the beholder; requires some pre-shared bootstrapping model/implementation to be useful (e.g. among humans we have near-universal experiential primitives like \u2018dark/light\u2019, \u2018hot/cold,\u2019 etc)\n- \u2018world\u2019 = all of reality\n- \u2018partial world\u2019 = some subset of reality\n- \u2018state\u2019 = some configuration of that subset of reality (with implicit or explicit precision/likelihood)\n\nrepresentation is kind of subtle even beyond coordination (alan kay\u2019s \u2018communicating with aliens\u2019)... perhaps the most basic representation is a simple \u2018reference\u2019, which still encodes the assumption that there\u2019s a \u2018something\u2019 that\u2019s persistent and recognizable on the other end (\u2018object permanence\u2019). i don\u2019t see a flaw in saying \u2018pointers\u2019 are the most basic form of stateful cognition (and subject to the same foibles as c pointers... is the referent still there? can it still do the same things? does it still have the same properties? has it been replaced by an evil twin?)\n\nmodels can serve a bunch of different roles. e.g. a model can communicate an observation of what i claim the current world state to be, an instruction representing the world state i want a system to produce, or an imagined scenario to reason about.\n\n\u2018simulation\u2019 is a bit slippery; to me the useful primitive to start with is \u2018an ordered sequence of models,\u2019 in which case simulation is something like \u2018an ordered sequence of models representing the time evolution of a particular model according to some update rule\u2019\n\none could think of science as \u2018a process for finding models that best represent the world and finding rules for updating them that predict future world states\u2019, design as \u2018a process for defining models of how we want the world to be,\u2019 and engineering as \u2018a process for implementing rules (science) in order to achieve desired world states (design) based on current world states (science).\u2019 \u2018programming\u2019 tends to muddle all 3 together, whether explicitly or (usually) implicitly.\n\nall that said, yeah, "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " programming email filters is squarely in the realm of what i\u2019m talking about. you start with a model of reality that also includes your computing environment - your machine, its OS, your browser, the mail server, etc etc, which you can always drill down from whatever abstraction your dealing with if needed. you define a model for what unfiltered email is like (\u2018science\u2019), a model of what you want your filtered email to be like (\u2018design\u2019), and come up with (science) & implement (engineering) rules you think will achieve that. simulation is a powerful tool to aid in the \u2018coming up with and implementing rules\u2019 part (\u2019what happens if i project this rule on this inbox model over time?\u2019). to close the loop you also want some nice tools to see if it\u2019s working how you want it to. netlogo enables some of this in a very \u2018science-y\u2019 not \u2018user-y\u2019 context. hypercard gives you some nice tools for very ad hoc experimentation.\n\nwavelength check?"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "99bd8e47-3159-4d4c-9b7d-343ff8f898bc"
    }
]