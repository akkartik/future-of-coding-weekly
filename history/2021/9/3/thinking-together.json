[
    {
        "client_msg_id": "c6fc4b3d-dd7f-4222-b293-08af8b3fd67d",
        "type": "message",
        "text": "Anybody know of a solid GPT-3 generator for GraphQL queries?",
        "user": "U01R76LELBT",
        "ts": "1630620802.050100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jJR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Anybody know of a solid GPT-3 generator for GraphQL queries?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630620802.050100",
        "reply_count": 4,
        "reply_users_count": 3,
        "latest_reply": "1630681595.055200",
        "reply_users": [
            "UF71PR58X",
            "U01R76LELBT",
            "U01JNTE35QS"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "c89fa186-9367-4a0d-8be7-1692aef50588",
        "type": "message",
        "text": "When designing a programming language, what are good resources for designing the error / exception system?",
        "user": "U01AD80KMLK",
        "ts": "1630621354.050800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DRg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When designing a programming language, what are good resources for designing the error / exception system?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630621354.050800",
        "reply_count": 16,
        "reply_users_count": 7,
        "latest_reply": "1630913236.101500",
        "reply_users": [
            "UL2SJ88Q3",
            "U027P92A0N5",
            "U013ZLJARC7",
            "U0264CJ5W83",
            "UJBAJNFLK",
            "UA14TGLTC",
            "UE6EFEPTQ"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "738aa545-8363-46c4-8a59-a8e9b10a4b14",
        "type": "message",
        "text": "Perhaps <https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node312.html|https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node312.html>",
        "user": "UL2SJ88Q3",
        "ts": "1630652592.051000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "29. Conditions",
                "title_link": "https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node312.html",
                "text": "Conditions",
                "fallback": "29. Conditions",
                "from_url": "https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node312.html",
                "service_icon": "https://www.cs.cmu.edu/favicon.ico",
                "service_name": "cs.cmu.edu",
                "id": 1,
                "original_url": "https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node312.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "in/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perhaps "
                            },
                            {
                                "type": "link",
                                "url": "https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node312.html",
                                "text": "https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node312.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7",
                    "UEZQXJK9V"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "8f896a5b-3576-42e8-b3a0-337966356fce",
        "type": "message",
        "text": "Algebraic Effects obviously! :smile:",
        "user": "U027P92A0N5",
        "ts": "1630654359.051300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EGa8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Algebraic Effects obviously! "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK"
    },
    {
        "client_msg_id": "3b57a99b-6367-4ce5-89de-aaaeacd88800",
        "type": "message",
        "text": "The process outlined in <@UL2SJ88Q3>'s link \u2014 \"capture an error, inspect the stack, edit and re-evaluate code, then attempt to continue from the same point\" \u2014 is an amazingly powerful tool for the working programmer.",
        "user": "U013ZLJARC7",
        "ts": "1630661245.052100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MZ1+Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The process outlined in "
                            },
                            {
                                "type": "user",
                                "user_id": "UL2SJ88Q3"
                            },
                            {
                                "type": "text",
                                "text": "'s link \u2014 \"capture an error, inspect the stack, edit and re-evaluate code, then attempt to continue from the same point\" \u2014 is an amazingly powerful tool for the working programmer."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK"
    },
    {
        "client_msg_id": "92aed9d1-0073-412c-887a-2584c8ead03e",
        "type": "message",
        "text": "And I find kinda amusing that that's basically how Algebraic Effects work, but with static type system on top of that. :wink:",
        "user": "U027P92A0N5",
        "ts": "1630661778.052300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2QHYo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And I find kinda amusing that that's basically how Algebraic Effects work, but with static type system on top of that. "
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK"
    },
    {
        "client_msg_id": "420c6bb1-e97f-473e-a928-1deda87806b8",
        "type": "message",
        "text": "Specifically GPT-3? Or are you looking for a fuzz tester?",
        "user": "UF71PR58X",
        "ts": "1630662376.052500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TFFJY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Specifically GPT-3? Or are you looking for a fuzz tester?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630620802.050100",
        "parent_user_id": "U01R76LELBT"
    },
    {
        "client_msg_id": "A2ED0CE2-2F72-412E-9EB5-227970537271",
        "type": "message",
        "text": "Something that could write GraphQL queries for you by specifying what you want in natural language",
        "user": "U01R76LELBT",
        "ts": "1630678133.053900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qJtxo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Something that could write GraphQL queries for you by specifying what you want in natural language"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630620802.050100",
        "parent_user_id": "U01R76LELBT"
    },
    {
        "client_msg_id": "E1C6033B-DC48-4030-A4BE-29420332437B",
        "type": "message",
        "text": "Though I\u2019m curious what you know about with fuzz testers ",
        "user": "U01R76LELBT",
        "ts": "1630678151.054600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PaK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Though I\u2019m curious what you know about with fuzz testers "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630620802.050100",
        "parent_user_id": "U01R76LELBT"
    },
    {
        "client_msg_id": "3eb6bd9e-df51-42c8-932c-b7abf2ff0d74",
        "type": "message",
        "text": "Not sure the models do very well without some implicit understanding of the underlying data.",
        "user": "U01JNTE35QS",
        "ts": "1630681595.055200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WRC8L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure the models do very well without some implicit understanding of the underlying data."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630620802.050100",
        "parent_user_id": "U01R76LELBT"
    },
    {
        "client_msg_id": "372eb97e-2ed2-4206-a5b5-9d9d81cb1bfc",
        "type": "message",
        "text": "<@U027P92A0N5> Algebraic Effects are completely orthogonal to what I've described here, which is a feature of the _development environment_ rather than a property of the language itself.",
        "user": "U013ZLJARC7",
        "ts": "1630683607.055400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kGPbv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U027P92A0N5"
                            },
                            {
                                "type": "text",
                                "text": " Algebraic Effects are completely orthogonal to what I've described here, which is a feature of the "
                            },
                            {
                                "type": "text",
                                "text": "development environment",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " rather than a property of the language itself."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK"
    },
    {
        "client_msg_id": "6ff8712f-d50a-4933-accb-f2b139fc2d97",
        "type": "message",
        "text": "<@U013ZLJARC7> funny enough \"evaluate handler in the context of an error location and continue execution from that point\" was first and foremost implemented in Smalltalk and Common List which support it on the language level. Other IDEs still struggle to implement this functionality in its full. :slightly_smiling_face:",
        "user": "U027P92A0N5",
        "ts": "1630684849.055600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fr7b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " funny enough \"evaluate handler in the context of an error location and continue execution from that point\" was first and foremost implemented in Smalltalk and Common List which support it on the language level. Other IDEs still struggle to implement this functionality in its full. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "reactions": [
            {
                "name": "dart",
                "users": [
                    "U01ULEWACPP",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "18e85b28-20cf-407a-9c38-5518c53c7d04",
        "type": "message",
        "text": "Use monads instead of errors",
        "user": "U0264CJ5W83",
        "ts": "1630698004.055900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mT=nF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Use monads instead of errors"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK"
    },
    {
        "client_msg_id": "bcddc709-71dd-4982-9348-7001f6e2497f",
        "type": "message",
        "text": "<@U027P92A0N5> Common Lisp and Smalltalk make no distinction between \"language\" and \"development environment\", being live systems. Put differently, they are more integrated than anything called IDE today.",
        "user": "UJBAJNFLK",
        "ts": "1630741349.056400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R4b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U027P92A0N5"
                            },
                            {
                                "type": "text",
                                "text": " Common Lisp and Smalltalk make no distinction between \"language\" and \"development environment\", being live systems. Put differently, they are more integrated than anything called IDE today."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U013ZLJARC7",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "3b39dd0d-0990-448e-b03e-22464c9721f8",
        "type": "message",
        "text": "Came here to echo <@U027P92A0N5> about Common Lisp conditions.  Practical Common Lisp has a good introduction <https://gigamonkeys.com/book/beyond-exception-handling-conditions-and-restarts.html>.\n\n<@U013ZLJARC7> had a good tl;dr.\n\nMore generally, I feel we underutilize the stack as a way to abstract.  Instead of explicit passing, build context through selective use of dynamically scoped variables.\n\nAlternatively, I guess there's the aspect oriented notion of CFlow <https://schuchert.github.io/wikispaces/pages/aop/AspectJ_CFlowExplained>.\n\nAnd I guess better functional programmers than me could say something about comonads, but in as much as option, collection, either, and exception monads are all about returning things, there should be a sort of opposite construction.",
        "user": "UA14TGLTC",
        "ts": "1630756988.074700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4DNc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Came here to echo "
                            },
                            {
                                "type": "user",
                                "user_id": "U027P92A0N5"
                            },
                            {
                                "type": "text",
                                "text": " about Common Lisp conditions.  Practical Common Lisp has a good introduction "
                            },
                            {
                                "type": "link",
                                "url": "https://gigamonkeys.com/book/beyond-exception-handling-conditions-and-restarts.html"
                            },
                            {
                                "type": "text",
                                "text": ".\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " had a good tl;dr.\n\nMore generally, I feel we underutilize the stack as a way to abstract.  Instead of explicit passing, build context through selective use of dynamically scoped variables.\n\nAlternatively, I guess there's the aspect oriented notion of CFlow "
                            },
                            {
                                "type": "link",
                                "url": "https://schuchert.github.io/wikispaces/pages/aop/AspectJ_CFlowExplained"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nAnd I guess better functional programmers than me could say something about comonads, but in as much as option, collection, either, and exception monads are all about returning things, there should be a sort of opposite construction."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK"
    },
    {
        "client_msg_id": "27fe90c4-1d91-4ce3-8fc9-08b6cb198f7e",
        "type": "message",
        "text": "Give an example of an error/exception that is meaningful in your language!",
        "user": "UE6EFEPTQ",
        "ts": "1630864989.095000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jQh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Give an example of an error/exception that is meaningful in your language!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK"
    },
    {
        "client_msg_id": "25f55898-1ebd-46be-b031-bf71d1f4b92f",
        "type": "message",
        "text": "I built a complete programming language without them, but then again, I'm eccentric",
        "user": "UE6EFEPTQ",
        "ts": "1630865032.095200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7888",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I built a complete programming language without them, but then again, I'm eccentric"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK"
    },
    {
        "client_msg_id": "55b2781b-0c91-4747-9ee4-db6855875f0e",
        "type": "message",
        "text": "If your programming language is used to model reality in any way, then there shouldn't be any because reality has none either",
        "user": "UE6EFEPTQ",
        "ts": "1630865098.095400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "17m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If your programming language is used to model reality in any way, then there shouldn't be any because reality has none either"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK"
    },
    {
        "client_msg_id": "8da963ce-e8a6-4610-bccc-59633e5d95f9",
        "type": "message",
        "text": "(e.g. electronic circuits - maybe a transistor overheating is an exception?)",
        "user": "UE6EFEPTQ",
        "ts": "1630865144.095600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AllIp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(e.g. electronic circuits - maybe a transistor overheating is an exception?)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK"
    },
    {
        "client_msg_id": "9e5aaba6-2a26-4b6a-9ca0-df2e5af95035",
        "type": "message",
        "text": "My washing machine has exception handling. If I overcharge it, it beeps and shows an error code on the display.\nLegal documents (including law itself) also have exception handling. There's often a description of the \"normal\" case, followed by special treatments for exceptional cases.\nI find the distinction between \"normal\" and \"exceptional\" useful in many circumstances. Some programmers overuse or even abuse exception handling, but overall it looks like a good way of structuring code for humans.",
        "user": "UJBAJNFLK",
        "ts": "1630868132.096000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cPT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My washing machine has exception handling. If I overcharge it, it beeps and shows an error code on the display.\nLegal documents (including law itself) also have exception handling. There's often a description of the \"normal\" case, followed by special treatments for exceptional cases.\nI find the distinction between \"normal\" and \"exceptional\" useful in many circumstances. Some programmers overuse or even abuse exception handling, but overall it looks like a good way of structuring code for humans."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK"
    },
    {
        "client_msg_id": "fb1bb729-b4ca-4d6f-b079-73ecbf353108",
        "type": "message",
        "text": "Hmmmm.. these are both examples of domain level exceptions, also known as \"just normal programming\"!",
        "user": "UE6EFEPTQ",
        "ts": "1630909717.101300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/IPl=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmmmm.. these are both examples of domain level exceptions, also known as \"just normal programming\"!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK"
    },
    {
        "client_msg_id": "a40bc030-aadf-40b2-ab66-d9e20a8fe145",
        "type": "message",
        "text": "Indeed. But without an exception system, normal programming means having the exceptions appear all over the code, either as explicit tests at all levels of abstractions (as in good old C), or as messy types (e.g. monads in Haskell).",
        "user": "UJBAJNFLK",
        "ts": "1630913236.101500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4C0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Indeed. But without an exception system, normal programming means having the exceptions appear all over the code, either as explicit tests at all levels of abstractions (as in good old C), or as messy types (e.g. monads in Haskell)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630621354.050800",
        "parent_user_id": "U01AD80KMLK"
    }
]