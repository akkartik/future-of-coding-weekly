[
    {
        "client_msg_id": "76ae3bc8-d84b-44d1-8f02-668736c96da0",
        "type": "message",
        "text": "Via <@U6KQ2S410> on Twitter, here's F# designer Don Syme articulating his reluctance to adding type classes to #F and his critique of some aspects of typing / type theory in general.\n\n<https://github.com/fsharp/fslang-suggestions/issues/243#issuecomment-916079347>",
        "user": "UC2A2ARPT",
        "ts": "1631478171.047200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1631478191.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jTdQy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Via "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " on Twitter, here's F# designer Don Syme articulating his reluctance to adding type classes to #F and his critique of some aspects of typing / type theory in general.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/fsharp/fslang-suggestions/issues/243#issuecomment-916079347"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1631478171.047200",
        "reply_count": 4,
        "reply_users_count": 3,
        "latest_reply": "1631515544.048500",
        "reply_users": [
            "UC2A2ARPT",
            "UCGAK10LS",
            "UN57U8V53"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "81ad3230-cac2-4112-9455-3e2cafe6f51c",
        "type": "message",
        "text": "&gt; Adding hierarchical type classification can result in programming communities that spend most their time talking about the \"right\" way to organise the universe of type classes, and experience surprisingly dogmatic discussions about that\nI feel seen",
        "user": "UC2A2ARPT",
        "ts": "1631478315.047800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lW=4",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Adding hierarchical type classification can result in programming communities that spend most their time talking about the \"right\" way to organise the universe of type classes, and experience surprisingly dogmatic discussions about that"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI feel seen"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1631478171.047200",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "aba8ac40-6585-48c0-9e4f-f7bcdaa5c9f0",
        "type": "message",
        "text": "FWIW I am also an opponent of hierarchy. It's one of those organizational concepts that has always sounded good in theory, but has always caused problems in practice. Is there even a single historical example of a hierarchical programming language concept making things better without any \"gotchas\"?",
        "user": "UCGAK10LS",
        "ts": "1631491150.048000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BuxMO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FWIW I am also an opponent of hierarchy. It's one of those organizational concepts that has always sounded good in theory, but has always caused problems in practice. Is there even a single historical example of a hierarchical programming language concept making things better without any \"gotchas\"?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1631478171.047200",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "8861db4d-6f5a-4937-8874-9cc52d20c4a4",
        "type": "message",
        "text": "Of course the post is making more than just a point about hierarchy. It's opposing type-level programming.",
        "user": "UCGAK10LS",
        "ts": "1631491389.048200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lwpB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Of course the post is making more than just a point about hierarchy. It's opposing type-level programming."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1631478171.047200",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "2daebd84-1c32-4117-af81-84accd366939",
        "type": "message",
        "text": "*cough* Haskell *cough* OCaml *cough*\n&gt; Adding type-level programming of any kind can lead to communities where the most empowered programmers are those with deep expertise in certain kinds of highly abstract mathematics (e.g. category theory).",
        "user": "UN57U8V53",
        "ts": "1631515544.048500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UN57U8V53",
            "ts": "1631515577.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OjIFK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "cough",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " Haskell "
                            },
                            {
                                "type": "text",
                                "text": "cough ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "OCaml "
                            },
                            {
                                "type": "text",
                                "text": "cough",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Adding type-level programming of any kind can lead to communities where the most empowered programmers are those with deep expertise in certain kinds of highly abstract mathematics (e.g. category theory)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1631478171.047200",
        "parent_user_id": "UC2A2ARPT"
    }
]