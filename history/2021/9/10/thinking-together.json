[
    {
        "client_msg_id": "8C0F0773-56C0-497D-95CB-652494CA9871",
        "type": "message",
        "text": "I know a lot of us here have been influenced by talks like Bret Victor\u2019s \u201cInventing on Principle\u201d. But I\u2019m curious about your favorite papers that are somehow related to the future of coding. I\u2019ll start with mine.\n\nPILOT: A Step Toward Man-Computer Symbiosis - Warren Teitelman\nThis is actually a thesis, so it is a bit long, though much of that length is taken up with a transcript. I will admit there is a lot in this paper that isn\u2019t great. The resulting system is almost certainly something no one would want to use today. But yet in it are such interesting ideas. \nIt is often considered to be the paper that introduced aspect oriented programming, but I believe that sells it a bit short. PILOT is an integrated, live, editing and computational system. It\u2019s goal is to allow programmers to 1) customize their interface and syntax, 2) edit programs they are unfamiliar with 3) make changes not just to current functions in the program, but future ones as well 4) control how the program itself executes and so much more. It is a bit of a historical trip, but includes so many fascinating ideas.\n\nProgramming as Theory Building - Peter Naur\nNaur lays out a view of the activity of programming that is both radical and yet highly attractive. A key consequence on his theory is that the real end product of programming is not the source code, not the build artifact, not the running system, but the knowledge that a programmer builds. So much follows from this. It is a fascinating paper that I highly recommend reading.\n\nThe Structure of a Programming Language Revolution - Richard P Gabriel\nA beautiful paper about the changes to programming language research that Gabriel has seen over his career. I will just leave you with this quote that sets the mood for the paper.\n&gt; That night I pulled the paper down from the ACM server and read it while outside enormous puffed clouds dwelled overhead, lit from beneath by the town of Porto de Galinhas on the Brazilian coast; the smell of burning sugarcane and bitter ocean pushed into my room.\nWhat are your favorites? What papers have really pushed you in a particular direction? What papers do you think people should read, even if you disagree with them? Whatever the criteria for the paper being good, I want to know about it.",
        "user": "UK3LH8CF5",
        "ts": "1631287181.168700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E8Q8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I know a lot of us here have been influenced by talks like Bret Victor\u2019s \u201cInventing on Principle\u201d. But I\u2019m curious about your favorite papers that are somehow related to the future of coding. I\u2019ll start with mine.\n\nPILOT: A Step Toward Man-Computer Symbiosis - Warren Teitelman\nThis is actually a thesis, so it is a bit long, though much of that length is taken up with a transcript. I will admit there is a lot in this paper that isn\u2019t great. The resulting system is almost certainly something no one would want to use today. But yet in it are such interesting ideas. \nIt is often considered to be the paper that introduced aspect oriented programming, but I believe that sells it a bit short. PILOT is an integrated, live, editing and computational system. It\u2019s goal is to allow programmers to 1) customize their interface and syntax, 2) edit programs they are unfamiliar with 3) make changes not just to current functions in the program, but future ones as well 4) control how the program itself executes and so much more. It is a bit of a historical trip, but includes so many fascinating ideas.\n\nProgramming as Theory Building - Peter Naur\nNaur lays out a view of the activity of programming that is both radical and yet highly attractive. A key consequence on his theory is that the real end product of programming is not the source code, not the build artifact, not the running system, but the knowledge that a programmer builds. So much follows from this. It is a fascinating paper that I highly recommend reading.\n\nThe Structure of a Programming Language Revolution - Richard P Gabriel\nA beautiful paper about the changes to programming language research that Gabriel has seen over his career. I will just leave you with this quote that sets the mood for the paper.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That night I pulled the paper down from the ACM server and read it while outside enormous puffed clouds dwelled overhead, lit from beneath by the town of Porto de Galinhas on the Brazilian coast; the smell of burning sugarcane and bitter ocean pushed into my room."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWhat are your favorites? What papers have really pushed you in a particular direction? What papers do you think people should read, even if you disagree with them? Whatever the criteria for the paper being good, I want to know about it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1631287181.168700",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1631491473.004100",
        "reply_users": [
            "UJBAJNFLK",
            "UG0EL18H3",
            "UK3LH8CF5"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "USH01JEDQ",
                    "UC2A2ARPT",
                    "UJBAJNFLK",
                    "U85HCL7JP",
                    "U029GEPS8Q3"
                ],
                "count": 6
            },
            {
                "name": "wink",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c39b5cf7-37de-4530-b210-fee7fef833c9",
        "type": "message",
        "text": "Beyond Programming Languages - Terry Winograd (1979)\nDiscusses higher-level programming which is less about algorithms and data structures and more about different views on a complex software system that can be manipulated by programmers.",
        "user": "UJBAJNFLK",
        "ts": "1631299627.172600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=r2z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Beyond Programming Languages - Terry Winograd (1979)\nDiscusses higher-level programming which is less about algorithms and data structures and more about different views on a complex software system that can be manipulated by programmers."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1631287181.168700",
        "parent_user_id": "UK3LH8CF5",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "U8A5MS6R1",
                    "UA14TGLTC",
                    "UG0EL18H3"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "4b2d81a5-8ef8-423d-a36b-bff0e71d6550",
        "type": "message",
        "text": "I'll second the Winograd paper! A few that have influenced my thoughts around programming tools are:\n\u2022 *Beyond Being There* - This one is mostly about communication media, but given that communication is necessary for coordination, and that coordination is necessary for delivering and maintaining complex systems, having solid communication media is (I believe), a principal factor in the success of any group that wishes to build software:\u00a0<http://worrydream.com/refs/Hollan%20-%20Beyond%20Being%20There.pdf>\n\u2022 *Convivial Design Heuristics for Software Systems* - Stephen Kell talks about how language and environment designers can afford individuals agency and freedom, while limiting their ability to trample the freedoms of others: he gives many great (and counterintuitive) recommendations such as introducing friction when it comes to defining abstractions:\u00a0<https://dl.acm.org/doi/abs/10.1145/3397537.3397543>\n\u2022 *WhyLine* - \"A debugging tool that allows programmers to ask 'Why did' and 'Why didn't' questions about their program's output\". This is interesting to me because it inverts the relationship between programmer and computer. Normally the programmer is the one tasked with coming up with the \"why/why not\" questions: in the case of Whyline, the system generates these questions automatically based on static and dynamic analyses of the running system:\u00a0<https://www.cs.cmu.edu/~NatProg/whyline.html>\n\u2022 *A Programmable Programming Language* - Matthias Felleisen has some great talks on building DSLs in Racket (<https://www.youtube.com/watch?v=z8Pz4bJV3Tk>) but I think his paper does the best job of explaining why language-oriented programming is so powerful (the \"Thoughts\" section of his website is also full of gems:\u00a0<https://felleisen.org/matthias/Thoughts/index.html>):\u00a0<https://cs.brown.edu/~sk/Publications/Papers/Published/fffkbmt-programmable-prog-lang/paper.pdf>\n\u2022 *Revisiting and Broadening the Meta-Design Framework for End-User Development* - This paper builds on the authors' earlier work (<https://www.researchgate.net/publication/220427813_Meta-Design_A_manifesto_for_End-User_Development>) and advocates for open, extensible systems, and for the designers of those systems to engage end-users as co-designers of these kinds of systems, as opposed to building \"walled gardens\" that attempt to anticipate every future need or possible use of the system:\u00a0<https://www.researchgate.net/publication/316734680_Revisiting_and_Broadening_the_Meta-Design_Framework_for_End-User_Development>",
        "user": "UG0EL18H3",
        "ts": "1631476913.000500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UG0EL18H3",
            "ts": "1631476956.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fva",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'll second the Winograd paper! A few that have influenced my thoughts around programming tools are:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Beyond Being There",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " - This one is mostly about communication media, but given that communication is necessary for coordination, and that coordination is necessary for delivering and maintaining complex systems, having solid communication media is (I believe), a principal factor in the success of any group that wishes to build software:\u00a0"
                                    },
                                    {
                                        "type": "link",
                                        "url": "http://worrydream.com/refs/Hollan%20-%20Beyond%20Being%20There.pdf"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Convivial Design Heuristics for Software Systems",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " - Stephen Kell talks about how language and environment designers can afford individuals agency and freedom, while limiting their ability to trample the freedoms of others: he gives many great (and counterintuitive) recommendations such as introducing friction when it comes to defining abstractions:\u00a0"
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://dl.acm.org/doi/abs/10.1145/3397537.3397543"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "WhyLine",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " - \"A debugging tool that allows programmers to ask 'Why did' and 'Why didn't' questions about their program's output\". This is interesting to me because it inverts the relationship between programmer and computer. Normally the programmer is the one tasked with coming up with the \"why/why not\" questions: in the case of Whyline, the system generates these questions automatically based on static and dynamic analyses of the running system:\u00a0"
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://www.cs.cmu.edu/~NatProg/whyline.html"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A Programmable Programming Language",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " - Matthias Felleisen has some great talks on building DSLs in Racket ("
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://www.youtube.com/watch?v=z8Pz4bJV3Tk"
                                    },
                                    {
                                        "type": "text",
                                        "text": ") but I think his paper does the best job of explaining why language-oriented programming is so powerful (the \"Thoughts\" section of his website is also full of gems:\u00a0"
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://felleisen.org/matthias/Thoughts/index.html"
                                    },
                                    {
                                        "type": "text",
                                        "text": "):\u00a0"
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://cs.brown.edu/~sk/Publications/Papers/Published/fffkbmt-programmable-prog-lang/paper.pdf"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Revisiting and Broadening the Meta-Design Framework for End-User Development",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " - This paper builds on the authors' earlier work ("
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://www.researchgate.net/publication/220427813_Meta-Design_A_manifesto_for_End-User_Development"
                                    },
                                    {
                                        "type": "text",
                                        "text": ") and advocates for open, extensible systems, and for the designers of those systems to engage end-users as co-designers of these kinds of systems, as opposed to building \"walled gardens\" that attempt to anticipate every future need or possible use of the system:\u00a0"
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://www.researchgate.net/publication/316734680_Revisiting_and_Broadening_the_Meta-Design_Framework_for_End-User_Development"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "thread_ts": "1631287181.168700",
        "parent_user_id": "UK3LH8CF5"
    },
    {
        "client_msg_id": "43AF972A-6C07-43D5-9C16-1C38BEBB54B6",
        "type": "message",
        "text": "<@UJBAJNFLK> \nJust finished the Winograd Paper. Thank you so much for that recommendation!|\n\n<@UG0EL18H3> \nLove beyond being there. The other\u2019s I have not read, (though I am familiar with racket). Thanks for the recommendations :) Look forward to diving in.",
        "user": "UK3LH8CF5",
        "ts": "1631491473.004100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DyuT9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " \nJust finished the Winograd Paper. Thank you so much for that recommendation!|\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UG0EL18H3"
                            },
                            {
                                "type": "text",
                                "text": " \nLove beyond being there. The other\u2019s I have not read, (though I am familiar with racket). Thanks for the recommendations :) Look forward to diving in."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1631287181.168700",
        "parent_user_id": "UK3LH8CF5"
    }
]