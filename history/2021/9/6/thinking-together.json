[
    {
        "client_msg_id": "86efc96e-9285-4fbd-aa43-4c794748d90c",
        "type": "message",
        "text": "When <@UC2A2ARPT> talks about the data model in Hest (<https://pod.link/1559446316/episode/488217b61f1f644d58a4219f9d0545f1|Hest Podcast, Episode 25>), he mentions things like:\n\n\u2022 AOS: Array of Structs\n\u2022 SOA: Struct of Arrays \nHe also mentions a way to organise data where each property (name, color, position, \u2026) is stored in its own Array \u2013 in contrast to an Array of Objects of Properties.\n\nThis reminded me of a talk I had seen at Unite (Unity Conference) about \u201c<https://unity.com/dots|Data-Oriented Design>\u201d. While it makes a lot of sense in terms of memory usage, caching and lookup performance, I barely see data-oriented design today.\n\nWhat are examples of programming languages or software that are using/promote data-oriented design outside of game development?",
        "user": "U01ULEWACPP",
        "ts": "1630904464.100400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01ULEWACPP",
            "ts": "1630905139.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ubNTp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " talks about the data model in Hest ("
                            },
                            {
                                "type": "link",
                                "url": "https://pod.link/1559446316/episode/488217b61f1f644d58a4219f9d0545f1",
                                "text": "Hest Podcast, Episode 25"
                            },
                            {
                                "type": "text",
                                "text": "), he mentions things like:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "AOS: Array of Structs"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "SOA: Struct of Arrays "
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nHe also mentions a way to organise data where each property (name, color, position, \u2026) is stored in its own Array \u2013 in contrast to an Array of Objects of Properties.\n\nThis reminded me of a talk I had seen at Unite (Unity Conference) about \u201c"
                            },
                            {
                                "type": "link",
                                "url": "https://unity.com/dots",
                                "text": "Data-Oriented Design"
                            },
                            {
                                "type": "text",
                                "text": "\u201d. While it makes a lot of sense in terms of memory usage, caching and lookup performance, I barely see data-oriented design today.\n\nWhat are examples of programming languages or software that are using/promote data-oriented design outside of game development?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630904464.100400",
        "reply_count": 7,
        "reply_users_count": 6,
        "latest_reply": "1631031864.121200",
        "reply_users": [
            "UJBAJNFLK",
            "U027P92A0N5",
            "UK3LH8CF5",
            "U01JNTE35QS",
            "UC2A2ARPT",
            "UEBG0NPDK"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "12a9bd19-fba0-4470-aa6c-51bfb91f2634",
        "type": "message",
        "text": "Scientific computing has much of the same issues as games: large but simply structured datasets, and dealing with hardware limitations in memory and performance. But explicit support in programming languages is rare. One reason why there was a lot of enthusiasm for C++ for scientific computing in the 1990s was the hope for managing the AOS vs. SOA tradeoff better than in Fortran. Not sure it was a success.",
        "user": "UJBAJNFLK",
        "ts": "1630913484.101700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L+YEw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Scientific computing has much of the same issues as games: large but simply structured datasets, and dealing with hardware limitations in memory and performance. But explicit support in programming languages is rare. One reason why there was a lot of enthusiasm for C++ for scientific computing in the 1990s was the hope for managing the AOS vs. SOA tradeoff better than in Fortran. Not sure it was a success."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630904464.100400",
        "parent_user_id": "U01ULEWACPP",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U027P92A0N5",
                    "UA14TGLTC",
                    "UC2A2ARPT"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "ab945e20-ceab-4ab8-9bb0-023a6a625138",
        "type": "message",
        "text": "Probably, \"the languages promoting data-oriented design\" are exactly \"array programming languages\", which are kinda popular again later with the spread of GPGPU, but mostly around scientific computing, DSP and alike. :slightly_smiling_face:\n\nBesides, just SoA isn't _efficient enough_ on modern hardware considering all levels of caching, NUMA and vectorization. Thus in practice for maximum performance people use combined layouts like SoAoS. But for that you have to know the sizes and layouts of your base structures, where and how they are used, and adapt algorithms for that. So no \"one size fits all\" solution here, it's all careful conscious and methodical manual optimisation.",
        "user": "U027P92A0N5",
        "ts": "1630921090.108300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o4C1Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Probably, \"the languages promoting data-oriented design\" are exactly \"array programming languages\", which are kinda popular again later with the spread of GPGPU, but mostly around scientific computing, DSP and alike. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": "\n\nBesides, just SoA isn't "
                            },
                            {
                                "type": "text",
                                "text": "efficient enough",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " on modern hardware considering all levels of caching, NUMA and vectorization. Thus in practice for maximum performance people use combined layouts like SoAoS. But for that you have to know the sizes and layouts of your base structures, where and how they are used, and adapt algorithms for that. So no \"one size fits all\" solution here, it's all careful conscious and methodical manual optimisation."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630904464.100400",
        "parent_user_id": "U01ULEWACPP",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "U01ULEWACPP"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "74d004e9-09cb-4e75-bc97-acf1e6c7879b",
        "type": "message",
        "text": "I know Andrew Kelly just applied some data oriented techniques to zig for compiler performance improvements. <https://vimeo.com/507318005|https://vimeo.com/507318005>",
        "user": "UK3LH8CF5",
        "ts": "1630936000.115800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Vimeo",
                "service_url": "https://vimeo.com/",
                "title": "Zig Live Coding: Applying Data Oriented Design to Tokenization and Parsing",
                "title_link": "https://vimeo.com/507318005",
                "author_name": "Andrew Kelley",
                "author_link": "https://vimeo.com/andrewrk",
                "thumb_url": "https://i.vimeocdn.com/video/1050006686_295x166",
                "thumb_width": 295,
                "thumb_height": 166,
                "fallback": "Vimeo Video: Zig Live Coding: Applying Data Oriented Design to Tokenization and Parsing",
                "video_html": "<iframe src=\"https://player.vimeo.com/video/507318005?autoplay=1&amp;app_id=122963&amp;h=214f5d868e\" width=\"400\" height=\"225\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen title=\"Zig Live Coding: Applying Data Oriented Design to Tokenization and Parsing\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://vimeo.com/507318005",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/vimeo.png",
                "id": 1,
                "original_url": "https://vimeo.com/507318005"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yUA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I know Andrew Kelly just applied some data oriented techniques to zig for compiler performance improvements. "
                            },
                            {
                                "type": "link",
                                "url": "https://vimeo.com/507318005",
                                "text": "https://vimeo.com/507318005"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630904464.100400",
        "parent_user_id": "U01ULEWACPP",
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U01ULEWACPP"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "010af425-ffe4-41ce-b2b5-5dec5ce4c77c",
        "type": "message",
        "text": "I\u2019d recommend looking at <https://www.youtube.com/watch?v=Oj_xgO2uKJM&amp;t=1s>. And also Aarons Hsu\u2019s thesis.",
        "user": "U01JNTE35QS",
        "ts": "1630939797.116100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Aaron Hsu- Program Obesity: A Code Health Epidemic- \u03bbC 2019 Unconference",
                "title_link": "https://www.youtube.com/watch?v=Oj_xgO2uKJM&amp;t=1s",
                "author_name": "LambdaConf",
                "author_link": "https://www.youtube.com/c/LambdaConf",
                "thumb_url": "https://i.ytimg.com/vi/Oj_xgO2uKJM/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Aaron Hsu- Program Obesity: A Code Health Epidemic- \u03bbC 2019 Unconference",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/Oj_xgO2uKJM?feature=oembed&start=1&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=Oj_xgO2uKJM&amp;t=1s",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=Oj_xgO2uKJM&amp;t=1s"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yHL47",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019d recommend looking at "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=Oj_xgO2uKJM&t=1s"
                            },
                            {
                                "type": "text",
                                "text": ". And also Aarons Hsu\u2019s thesis."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630904464.100400",
        "parent_user_id": "U01ULEWACPP",
        "reactions": [
            {
                "name": "raised_hands",
                "users": [
                    "U01ULEWACPP"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "tada",
                "users": [
                    "U01ULEWACPP"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "57cd37bf-9fb0-4abc-9c8f-d645fbd7ac79",
        "type": "message",
        "text": "Jonathan Blow's work-in-progress programming language Jai has <https://github.com/BSVino/JaiPrimer/blob/master/JaiPrimer.md#data-oriented-structures|language-level support> for AOS and SOA:\n\n&gt; However, as programs get larger, it becomes much more difficult to reorganize the data. Testing whether a single, simple change has any effect on performance can take the developer a long time, because once the data structures must change, all of the code that acts on that data structure breaks. So Jai provides mechanisms for automatically transitioning between SoA and AoS without breaking the supporting code.\nWhich makes me wonder if this sort of generality of data access is similar to the approach Clojure takes to its data structures \u2014 and if so, whether they're directly aligned or lie along slightly different axes.",
        "user": "UC2A2ARPT",
        "ts": "1630991108.119500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1630991435.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Cvlw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Jonathan Blow's work-in-progress programming language Jai has "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/BSVino/JaiPrimer/blob/master/JaiPrimer.md#data-oriented-structures",
                                "text": "language-level support"
                            },
                            {
                                "type": "text",
                                "text": " for AOS and SOA:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "However, as programs get larger, it becomes much more difficult to reorganize the data. Testing whether a single, simple change has any effect on performance can take the developer a long time, because once the data structures must change, all of the code that acts on that data structure breaks. So Jai provides mechanisms for automatically transitioning between SoA and AoS without breaking the supporting code."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWhich makes me wonder if this sort of generality of data access is similar to the approach Clojure takes to its data structures \u2014 and if so, whether they're directly aligned or lie along slightly different axes."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630904464.100400",
        "parent_user_id": "U01ULEWACPP",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6dff39fe-8310-425d-9001-629ee52aee95",
        "type": "message",
        "text": "For what it is worth I am fairly sure that Jonathan Blow got rid of those abilities. Instead you have macros and arbitrary compile time code execution that would let you reimplement something like that yourself.",
        "user": "UK3LH8CF5",
        "ts": "1631024587.120300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/AZiY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For what it is worth I am fairly sure that Jonathan Blow got rid of those abilities. Instead you have macros and arbitrary compile time code execution that would let you reimplement something like that yourself."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630904464.100400",
        "parent_user_id": "U01ULEWACPP"
    },
    {
        "client_msg_id": "eace9873-7655-464d-937b-2880007a28fe",
        "type": "message",
        "text": "Anytime someone talks about a column store vs a row store, they\u2019re effectively talking about SoA vs AoS",
        "user": "UEBG0NPDK",
        "ts": "1631031864.121200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bifIq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Anytime someone talks about a column store vs a row store, they\u2019re effectively talking about SoA vs AoS"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630904464.100400",
        "parent_user_id": "U01ULEWACPP",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    }
]