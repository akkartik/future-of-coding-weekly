[
    {
        "client_msg_id": "158ecabf-ebb7-47e3-ba17-7a90293a4055",
        "type": "message",
        "text": "Has anyone seen a study on \"how a DSL becomes a GPL\"? Or, alternatively, \"what is the most common path travelers take before arriving at Greenspun's 10th rule?\"\n\nIs there something like \"DSLS either die or eventually add identifiers, then functions, then branching, then macros, etc\"? I'm curious if you can look ahead and say \"well if this is successful, it will eventual require so many things, so might as well not do a DSL in the beginning and instead start with a GPL and build a library\"",
        "user": "UMVFWPZ36",
        "ts": "1630371359.043100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UMVFWPZ36",
            "ts": "1630371416.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GhK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has anyone seen a study on \"how a DSL becomes a GPL\"? Or, alternatively, \"what is the most common path travelers take before arriving at Greenspun's 10th rule?\"\n\nIs there something like \"DSLS either die or eventually add identifiers, then functions, then branching, then macros, etc\"? I'm curious if you can look ahead and say \"well if this is successful, it will eventual require so many things, so might as well not do a DSL in the beginning and instead start with a GPL and build a library\""
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630371359.043100",
        "reply_count": 6,
        "reply_users_count": 3,
        "latest_reply": "1630573743.045500",
        "reply_users": [
            "U027P92A0N5",
            "U013ZLJARC7",
            "UJBAJNFLK"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "774b9271-984a-4289-aa5f-c02866224151",
        "type": "message",
        "text": "I know only <https://mikehadlow.blogspot.com/2012/05/configuration-complexity-clock.html> but that's not an actual study... :sweat_smile:",
        "user": "U027P92A0N5",
        "ts": "1630396931.043400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "The Configuration Complexity Clock",
                "title_link": "https://mikehadlow.blogspot.com/2012/05/configuration-complexity-clock.html",
                "text": "When I was a young coder, just starting out in the big scary world of enterprise software, an older, far more experienced chap gave me a ste...",
                "fallback": "The Configuration Complexity Clock",
                "image_url": "https://lh5.ggpht.com/-cwTxa5a9p1Q/T6ew7jgDVMI/AAAAAAAAAB4/enYU1SpqQ0E/w1200-h630-p-k-no-nu/ConfigurationComplexityClock_thumb%25255B4%25255D.png?imgmax=800",
                "from_url": "https://mikehadlow.blogspot.com/2012/05/configuration-complexity-clock.html",
                "image_width": 476,
                "image_height": 250,
                "image_bytes": 9664,
                "service_icon": "https://mikehadlow.blogspot.com/favicon.ico",
                "service_name": "mikehadlow.blogspot.com",
                "id": 1,
                "original_url": "https://mikehadlow.blogspot.com/2012/05/configuration-complexity-clock.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yycJR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I know only "
                            },
                            {
                                "type": "link",
                                "url": "https://mikehadlow.blogspot.com/2012/05/configuration-complexity-clock.html"
                            },
                            {
                                "type": "text",
                                "text": " but that's not an actual study... "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630371359.043100",
        "parent_user_id": "UMVFWPZ36"
    },
    {
        "client_msg_id": "9cf99b49-2b87-49e2-aa5f-ef30e00636af",
        "type": "message",
        "text": "I've never seen it studied, but I've seen it happen over and over. This is why DSLs should be embedded in real programming languages.\n<https://twitter.com/jackrusher/status/1348645505811828737>",
        "user": "U013ZLJARC7",
        "ts": "1630399048.043700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/jackrusher|@jackrusher>: Starting a DSL from scratch rather than embedding it in a real programming language is folly. You should use languages that make embedded DSLs easy! <https://pbs.twimg.com/media/ErdHpSyXEAET5-R.jpg>",
                "ts": 1610377119,
                "author_name": "\u2e18Jack Rusher\u203d",
                "author_link": "https://twitter.com/jackrusher/status/1348645505811828737",
                "author_icon": "https://pbs.twimg.com/profile_images/931507447088500736/j50JPYN5_normal.jpg",
                "author_subname": "@jackrusher",
                "text": "Starting a DSL from scratch rather than embedding it in a real programming language is folly. You should use languages that make embedded DSLs easy! <https://pbs.twimg.com/media/ErdHpSyXEAET5-R.jpg>",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/jackrusher/status/1348645505811828737",
                "image_url": "https://pbs.twimg.com/media/ErdHpSyXEAET5-R.jpg",
                "image_width": 1200,
                "image_height": 638,
                "image_bytes": 127947,
                "id": 1,
                "original_url": "https://twitter.com/jackrusher/status/1348645505811828737",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HqHyl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've never seen it studied, but I've seen it happen over and over. This is why DSLs should be embedded in real programming languages.\n"
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/jackrusher/status/1348645505811828737"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630371359.043100",
        "parent_user_id": "UMVFWPZ36",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "41e7606e-2b00-404c-953b-8ce0cf5e523a",
        "type": "message",
        "text": "It's unfair that there is a :100: emoji but not one for 50% agreement!\n\nMy first question when choosing embedded vs. standalone for a DSL is: is the stuff that you encode using the DSL more like \"code\" or more like \"data\"? In the former case, go for embedded (for the reason <@U013ZLJARC7> gave). In the latter case, go for standalone in order to keep your data independent of a single language ecosystem, and thus more widely usable.\n\nThere is of course no clear borderline between code and data, all code being data from another point of view. But in the context of a specific domain, the choice is often obvious.",
        "user": "UJBAJNFLK",
        "ts": "1630480313.044400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UFHO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's unfair that there is a "
                            },
                            {
                                "type": "emoji",
                                "name": "100"
                            },
                            {
                                "type": "text",
                                "text": " emoji but not one for 50% agreement!\n\nMy first question when choosing embedded vs. standalone for a DSL is: is the stuff that you encode using the DSL more like \"code\" or more like \"data\"? In the former case, go for embedded (for the reason "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " gave). In the latter case, go for standalone in order to keep your data independent of a single language ecosystem, and thus more widely usable.\n\nThere is of course no clear borderline between code and data, all code being data from another point of view. But in the context of a specific domain, the choice is often obvious."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630371359.043100",
        "parent_user_id": "UMVFWPZ36",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U027P92A0N5",
                    "UA14TGLTC",
                    "UKJGU23KP"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "d0e9f23c-9d0b-4ed9-a14d-93a407721d97",
        "type": "message",
        "text": "<@UJBAJNFLK> The line between code-like and data-like for me is whether or not the data will be interpreted (in the abstract interpreter sense) and thus encodes computation. If one is \u2014 for example \u2014 just writing a bunch of sensor readings from an experiment, one might as well do it as packed binary data frames. Whereas, if one is creating a specification/configuration language that includes constructs for things like conditionals and loops/recursion, it's already too late \u2014 just use scheme/Smalltalk/FORTH and be done with it. :blush:",
        "user": "U013ZLJARC7",
        "ts": "1630568392.044900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9HBm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " The line between code-like and data-like for me is whether or not the data will be interpreted (in the abstract interpreter sense) and thus encodes computation. If one is \u2014 for example \u2014 just writing a bunch of sensor readings from an experiment, one might as well do it as packed binary data frames. Whereas, if one is creating a specification/configuration language that includes constructs for things like conditionals and loops/recursion, it's already too late \u2014 just use scheme/Smalltalk/FORTH and be done with it. "
                            },
                            {
                                "type": "emoji",
                                "name": "blush"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630371359.043100",
        "parent_user_id": "UMVFWPZ36",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UJBAJNFLK",
                    "U027P92A0N5",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "83509781-e256-4631-85a8-45593af014ad",
        "type": "message",
        "text": "Exactly. I thought a lot about this because my current project in DSL space is very much on the borderline. Leibniz (<https://github.com/khinsen/leibniz-pharo>) is a domain-specific specification language, which does include conditionals etc. (it's a term rewriting system). But its reaon for existence is the documentation of computational models for humans, independently of any concrete implementation in code, so I ended up choosing the standalone approach explicitly to remove the temptation of the quick hack in whoever's favorite programming language of the day.",
        "user": "UJBAJNFLK",
        "ts": "1630573653.045200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "GitHub - khinsen/leibniz-pharo: Leibniz runtime library for Pharo",
                "title_link": "https://github.com/khinsen/leibniz-pharo",
                "text": "Leibniz runtime library for Pharo. Contribute to khinsen/leibniz-pharo development by creating an account on GitHub.",
                "fallback": "GitHub: GitHub - khinsen/leibniz-pharo: Leibniz runtime library for Pharo",
                "image_url": "https://opengraph.githubassets.com/2de1bf5a2657db29e7fd3cd12d4a19b198b3bda868cbec303f00ec006063e3cc/khinsen/leibniz-pharo",
                "image_width": 500,
                "image_height": 250,
                "from_url": "https://github.com/khinsen/leibniz-pharo",
                "image_bytes": 97227,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/khinsen/leibniz-pharo"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kV4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Exactly. I thought a lot about this because my current project in DSL space is very much on the borderline. Leibniz ("
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/khinsen/leibniz-pharo"
                            },
                            {
                                "type": "text",
                                "text": ") is a domain-specific specification language, which does include conditionals etc. (it's a term rewriting system). But its reaon for existence is the documentation of computational models for humans, independently of any concrete implementation in code, so I ended up choosing the standalone approach explicitly to remove the temptation of the quick hack in whoever's favorite programming language of the day."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630371359.043100",
        "parent_user_id": "UMVFWPZ36"
    },
    {
        "client_msg_id": "452270ec-2b37-4661-a0ea-af109f64570e",
        "type": "message",
        "text": "BTW, I do consider a schema for packed binary data frames a DSL, although I am not sure everybody would agree with that.",
        "user": "UJBAJNFLK",
        "ts": "1630573743.045500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4/oDf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "BTW, I do consider a schema for packed binary data frames a DSL, although I am not sure everybody would agree with that."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1630371359.043100",
        "parent_user_id": "UMVFWPZ36"
    }
]