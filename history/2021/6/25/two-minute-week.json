[
    {
        "type": "message",
        "text": "Thinking about node and wire programming of my live coding/synth.",
        "files": [
            {
                "id": "F0260CW5DJS",
                "created": 1624624435,
                "timestamp": 1624624435,
                "name": "2021-06-25 13-26-54.mp4",
                "title": "2021-06-25 13-26-54.mp4",
                "mimetype": "video/mp4",
                "filetype": "mp4",
                "pretty_type": "MPEG 4 Video",
                "user": "UUQ2EQW21",
                "editable": false,
                "size": 35969537,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F0260CW5DJS/2021-06-25_13-26-54.mp4",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F0260CW5DJS/download/2021-06-25_13-26-54.mp4",
                "thumb_video": "https://files.slack.com/files-tmb/T5TCAFTA9-F0260CW5DJS-a9b94b1ce7/2021-06-25_13-26-54_thumb_video.jpeg",
                "thumb_video_w": 3840,
                "thumb_video_h": 2160,
                "permalink": "https://futureofcoding.slack.com/files/UUQ2EQW21/F0260CW5DJS/2021-06-25_13-26-54.mp4",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F0260CW5DJS-7410763ccf",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qc/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thinking about node and wire programming of my live coding/synth."
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UUQ2EQW21",
        "display_as_bot": false,
        "ts": "1624624587.019900",
        "thread_ts": "1624624587.019900",
        "reply_count": 9,
        "reply_users_count": 3,
        "latest_reply": "1624779337.026600",
        "reply_users": [
            "UBN9AFS0N",
            "UUQ2EQW21",
            "UCUSW7WVD"
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1624779337.026600",
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "U0123H7JRDM",
                    "UMVFWPZ36"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "996d01cf-3313-429d-85fe-2f9185f00149",
        "type": "message",
        "text": "great to have you back!",
        "user": "UBN9AFS0N",
        "ts": "1624634464.020000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U5RTb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "great to have you back!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1624624587.019900",
        "parent_user_id": "UUQ2EQW21"
    },
    {
        "client_msg_id": "d9374537-96b0-42ae-8ce3-a889647f4460",
        "type": "message",
        "text": "I see you are joining the church of nodes and wires :smile:",
        "user": "UBN9AFS0N",
        "ts": "1624634475.020200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c3u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see you are joining the church of nodes and wires "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1624624587.019900",
        "parent_user_id": "UUQ2EQW21"
    },
    {
        "type": "message",
        "text": "I never went away, I've just been lurking :wink:\nI've been updating some trading software I occasionally dip into, and playing with a game idea.\nBut the bigger project has always been the live coding tool.  I've always wanted to make the synth be wireable, but I needed time to think about it :wink:",
        "files": [
            {
                "id": "F026E5P0HRS",
                "created": 1624635725,
                "timestamp": 1624635725,
                "name": "solution.mp4",
                "title": "solution.mp4",
                "mimetype": "video/mp4",
                "filetype": "mp4",
                "pretty_type": "MPEG 4 Video",
                "user": "UUQ2EQW21",
                "editable": false,
                "size": 114475,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F026E5P0HRS/solution.mp4",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F026E5P0HRS/download/solution.mp4",
                "thumb_video": "https://files.slack.com/files-tmb/T5TCAFTA9-F026E5P0HRS-a0b221aa0e/solution_thumb_video.jpeg",
                "thumb_video_w": 1000,
                "thumb_video_h": 746,
                "permalink": "https://futureofcoding.slack.com/files/UUQ2EQW21/F026E5P0HRS/solution.mp4",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F026E5P0HRS-d2915f45f8",
                "is_starred": false,
                "has_rich_preview": false
            },
            {
                "id": "F0264UFV3UM",
                "created": 1624635780,
                "timestamp": 1624635780,
                "name": "Screenshot 2020-11-04 09.02.18.png",
                "title": "Screenshot 2020-11-04 09.02.18.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UUQ2EQW21",
                "editable": false,
                "size": 666972,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F0264UFV3UM/screenshot_2020-11-04_09.02.18.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F0264UFV3UM/download/screenshot_2020-11-04_09.02.18.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F0264UFV3UM-985b5b3aff/screenshot_2020-11-04_09.02.18_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F0264UFV3UM-985b5b3aff/screenshot_2020-11-04_09.02.18_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F0264UFV3UM-985b5b3aff/screenshot_2020-11-04_09.02.18_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 203,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F0264UFV3UM-985b5b3aff/screenshot_2020-11-04_09.02.18_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 270,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F0264UFV3UM-985b5b3aff/screenshot_2020-11-04_09.02.18_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F0264UFV3UM-985b5b3aff/screenshot_2020-11-04_09.02.18_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 405,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F0264UFV3UM-985b5b3aff/screenshot_2020-11-04_09.02.18_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 450,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F0264UFV3UM-985b5b3aff/screenshot_2020-11-04_09.02.18_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 540,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F0264UFV3UM-985b5b3aff/screenshot_2020-11-04_09.02.18_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 576,
                "original_w": 3840,
                "original_h": 2160,
                "thumb_tiny": "AwAbADBnloRy6f8AfVNZFB4IPuDmmqmaULgjrQBHJ8uMUzn1NSSnPbFRkD2oAB9T+dJnjqfzpDRQApz/AHx+dIc4+9+tOCrzxTti+nagCNSc8mlI68ihlAbgUmBQAoJxgk/nSE+5/OlHFOAB7UAf/9k=",
                "permalink": "https://futureofcoding.slack.com/files/UUQ2EQW21/F0264UFV3UM/screenshot_2020-11-04_09.02.18.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F0264UFV3UM-00190df5f7",
                "is_starred": false,
                "has_rich_preview": false
            },
            {
                "id": "F0267VCAP34",
                "created": 1624635875,
                "timestamp": 1624635875,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UUQ2EQW21",
                "editable": false,
                "size": 1057334,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F0267VCAP34/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F0267VCAP34/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F0267VCAP34-a007cd038a/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F0267VCAP34-a007cd038a/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F0267VCAP34-a007cd038a/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 161,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F0267VCAP34-a007cd038a/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 215,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F0267VCAP34-a007cd038a/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F0267VCAP34-a007cd038a/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 322,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F0267VCAP34-a007cd038a/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 358,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F0267VCAP34-a007cd038a/image_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 430,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F0267VCAP34-a007cd038a/image_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 458,
                "original_w": 1600,
                "original_h": 716,
                "thumb_tiny": "AwAVADCiWz2FGR6daTI64FH4DmgA4pQecjik49BS9egFADgSe9Jk4NIDijPBoAbSUUUAOB46UcelIOlLQADG08Un4Uo+61JQB//Z",
                "permalink": "https://futureofcoding.slack.com/files/UUQ2EQW21/F0267VCAP34/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F0267VCAP34-f433dd7d4c",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nq8do",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I never went away, I've just been lurking "
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            },
                            {
                                "type": "text",
                                "text": "\nI've been updating some trading software I occasionally dip into, and playing with a game idea.\nBut the bigger project has always been the live coding tool.  I've always wanted to make the synth be wireable, but I needed time to think about it "
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UUQ2EQW21",
        "ts": "1624635898.020400",
        "thread_ts": "1624624587.019900",
        "parent_user_id": "UUQ2EQW21"
    },
    {
        "client_msg_id": "e134dc32-24d5-46d2-b014-d7aaad59b19d",
        "type": "message",
        "text": "This was great! I'm super jealous how slick your UI elements look and how smoothly they animate, now that I've spent some time trying to do similar things. Your bezier curves that you said were \"still not quite right\" look absolutely amazing to me because you actually handle acute-angle curves. Grey-and-orange is a great color scheme.\n\nHave you considered thinking of the programming model in terms of FRP's behaviors? As I understand it, the values flowing in wires in FRP are neither scalars nor arrays but time-varying series which are powerful enough to model both. To model an array you either make each value in the wire an array or put multiple wires together. A scalar is just a value that doesn't change. You can probably also model hysteresis by introducing how often nodes sample from their inputs, something more hardware-inspired that I'm not sure has been tried in FRP.\n\nI got a lot of mileage out of reading David Barbour (<http://twitter.com/awelonblue|twitter.com/awelonblue>) back in the day. Hopefully <https://awelonblue.wordpress.com> will come back one day.\n\nOh, one more thing this video reminded me of: have you looked at the lines community (<https://llllllll.co>)? Seems to be the place to be for people building synthesizers and adjacent stuff.",
        "user": "UCUSW7WVD",
        "ts": "1624638593.020900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nevw3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This was great! I'm super jealous how slick your UI elements look and how smoothly they animate, now that I've spent some time trying to do similar things. Your bezier curves that you said were \"still not quite right\" look absolutely amazing to me because you actually handle acute-angle curves. Grey-and-orange is a great color scheme.\n\nHave you considered thinking of the programming model in terms of FRP's behaviors? As I understand it, the values flowing in wires in FRP are neither scalars nor arrays but time-varying series which are powerful enough to model both. To model an array you either make each value in the wire an array or put multiple wires together. A scalar is just a value that doesn't change. You can probably also model hysteresis by introducing how often nodes sample from their inputs, something more hardware-inspired that I'm not sure has been tried in FRP.\n\nI got a lot of mileage out of reading David Barbour ("
                            },
                            {
                                "type": "link",
                                "url": "http://twitter.com/awelonblue",
                                "text": "twitter.com/awelonblue"
                            },
                            {
                                "type": "text",
                                "text": ") back in the day. Hopefully "
                            },
                            {
                                "type": "link",
                                "url": "https://awelonblue.wordpress.com"
                            },
                            {
                                "type": "text",
                                "text": " will come back one day.\n\nOh, one more thing this video reminded me of: have you looked at the lines community ("
                            },
                            {
                                "type": "link",
                                "url": "https://llllllll.co"
                            },
                            {
                                "type": "text",
                                "text": ")? Seems to be the place to be for people building synthesizers and adjacent stuff."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1624624587.019900",
        "parent_user_id": "UUQ2EQW21"
    },
    {
        "client_msg_id": "9542e9fb-cf29-47f5-8a45-0e57a099a215",
        "type": "message",
        "text": "Thanks <@UCUSW7WVD> I\u2019ve looked at FRP in the past, in relation to Tidal Cycles which was heavily influenced by it, IIRC. I\u2019ll take another look.\nIn my current node implementation (for the demos you've seen before), I have 2 distinct types of 'pin'\n\u2022 Simple data: (bool, int, double, etc.)  Currently these are always 'inputs'; but I don't technically have a limitation on them being outputs too.\n\u2022 Flow Data - a generic representation of data flowing around the graph.  \nFlow data is effectively vectors of simple data types.  For example, 2 audio waves would be represented as:\n    \u25e6 [float, float, float....]\n    \u25e6 [float, float, float...]\nIn my graph, this means that playing a 3-note chord on an input instrument (for the audio case), may well result in several types of flow data running around the graph, typically containing 3 arrays of data, each array being a single 'frame' of audio; say 512 samples.   Important point - this is output/input on a single 'flow' pin, and contains 3 unique 'channels' of 512 float samples:\nFlowData\n{\n     map&lt;int, vector&lt;float&gt;&gt; channels;\n}\nIt is up to the application to determine what 'Flow' data actually means; but the important point is that the graph is evaluated based on finding the output flow and walking back into the graph to satisfy the data flow through it; by finding dependencies and walking back through the graph to fulfil them before computing each node.\n\nThe tricky part is something like an 'Adder' node.  Suppose it wants to take in 2 numbers and produce a result.  In my system, currently, that means that a node outputting a number must convert it to a 1-dimension flow data to output it.  Then the Adder node can read the flow data and extract the number.  This means that you could effectively add 2 arrays of numbers in one compute step in the adder; or multiple entries.  You could also, in theory route 2 seperate flow sources to the same target and multiplex them on arrival.\n\nBut I'm still thinking about if it is appropriate to enforce this transform of scalar values to flow data when outputting from a node, and how this feels to the user.  There is a certain uniformity I like if all data flowing through the graph is represented the same way; but then what if you output from a node 3 streams of numbers in the flow data, but the user hooks that up to a single input number in a node.    Which to pick?  Or is that just an illegal operation?  Is a single-entry flow data valid, but a multi entry not?  Essentially the implicit transforms from simple to flow look like:\n\n[Scalar -&gt; FlowData[Scalar Array, size 1]]                                  Example: output=1.0 input=vector&lt;float&gt;{1.0}\n[FlowData[..] -&gt; Scalar] (only if flow data is dimension 1?)      Example: output=vector&lt;float&gt;{1.0} input=1.0\n[FlowData, FlowData -&gt; FlowData]                                           Example: input=2 * flow data, output=muxed flow data.\n\nThere are technical reasons why I like this design, and flexibility reasons; it accomodates the parallel data flow model which works well for audio/graphics.  It is easy to evaluate the graph, and for the user to reason the direction of evaluation.  What it gives up is the simple ability to wire simple scalar values to simple scalar values directly; that operation is allowed by under the covers it is effectively a conversion.\nIn the UI/demo I am trying to hint at this by having flow data pins sit on the outside of nodes, and conversion from flow data to number be shown as an arrow inside the node next to the number in question.  As well as having arrows for flow data direction.",
        "user": "UUQ2EQW21",
        "ts": "1624709563.023400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eE9kq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " I\u2019ve looked at FRP in the past, in relation to Tidal Cycles which was heavily influenced by it, IIRC. I\u2019ll take another look.\nIn my current node implementation (for the demos you've seen before), I have 2 distinct types of 'pin'\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Simple data: (bool, int, double, etc.)  Currently these are always 'inputs'; but I don't technically have a limitation on them being outputs too."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Flow Data - a generic representation of data flowing around the graph.  "
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nFlow data is effectively vectors of simple data types.  For example, 2 audio waves would be represented as:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "[float, float, float....]"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "[float, float, float...]"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 1
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIn my graph, this means that playing a 3-note chord on an input instrument (for the audio case), may well result in several types of flow data running around the graph, typically containing 3 arrays of data, each array being a single 'frame' of audio; say 512 samples.   Important point - this is output/input on a single 'flow' pin, and contains 3 unique 'channels' of 512 float samples:\nFlowData\n{\n     map<int, vector<float>> channels;\n}\nIt is up to the application to determine what 'Flow' data actually means; but the important point is that the graph is evaluated based on finding the output flow and walking back into the graph to satisfy the data flow through it; by finding dependencies and walking back through the graph to fulfil them before computing each node.\n\nThe tricky part is something like an 'Adder' node.  Suppose it wants to take in 2 numbers and produce a result.  In my system, currently, that means that a node outputting a number must convert it to a 1-dimension flow data to output it.  Then the Adder node can read the flow data and extract the number.  This means that you could effectively add 2 arrays of numbers in one compute step in the adder; or multiple entries.  You could also, in theory route 2 seperate flow sources to the same target and multiplex them on arrival.\n\nBut I'm still thinking about if it is appropriate to enforce this transform of scalar values to flow data when outputting from a node, and how this feels to the user.  There is a certain uniformity I like if all data flowing through the graph is represented the same way; but then what if you output from a node 3 streams of numbers in the flow data, but the user hooks that up to a single input number in a node.    Which to pick?  Or is that just an illegal operation?  Is a single-entry flow data valid, but a multi entry not?  Essentially the implicit transforms from simple to flow look like:\n\n[Scalar -> FlowData[Scalar Array, size 1]]                                  Example: output=1.0 input=vector<float>{1.0}\n[FlowData[..] -> Scalar] (only if flow data is dimension 1?)      Example: output=vector<float>{1.0} input=1.0\n[FlowData, FlowData -> FlowData]                                           Example: input=2 * flow data, output=muxed flow data.\n\nThere are technical reasons why I like this design, and flexibility reasons; it accomodates the parallel data flow model which works well for audio/graphics.  It is easy to evaluate the graph, and for the user to reason the direction of evaluation.  What it gives up is the simple ability to wire simple scalar values to simple scalar values directly; that operation is allowed by under the covers it is effectively a conversion.\nIn the UI/demo I am trying to hint at this by having flow data pins sit on the outside of nodes, and conversion from flow data to number be shown as an arrow inside the node next to the number in question.  As well as having arrows for flow data direction."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1624624587.019900",
        "parent_user_id": "UUQ2EQW21"
    },
    {
        "type": "message",
        "text": "Here's a diagram I did; this is actually how some of the synth currently works.  Forgive my handwriting :wink:",
        "files": [
            {
                "id": "F026ZL0P256",
                "created": 1624709636,
                "timestamp": 1624709636,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UUQ2EQW21",
                "editable": false,
                "size": 1927890,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F026ZL0P256/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F026ZL0P256/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F026ZL0P256-cdfcf08577/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F026ZL0P256-cdfcf08577/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F026ZL0P256-cdfcf08577/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 251,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F026ZL0P256-cdfcf08577/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 335,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F026ZL0P256-cdfcf08577/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F026ZL0P256-cdfcf08577/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 503,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F026ZL0P256-cdfcf08577/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 559,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F026ZL0P256-cdfcf08577/image_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 671,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F026ZL0P256-cdfcf08577/image_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 715,
                "original_w": 2388,
                "original_h": 1668,
                "thumb_tiny": "AwAhADC+pYOQeR2OP0qSmKv+03HvTsUAGQR1FICM4GM0oUCmiNQcgGgB2aCM9MUYHXFLSQDccinHpxRRTAZg45OaXbyTzmlIzQFwc5P0oAQAgsc9elLS0UAFFFFABRRRQAUUUUAf/9k=",
                "permalink": "https://futureofcoding.slack.com/files/UUQ2EQW21/F026ZL0P256/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F026ZL0P256-2bab309c58",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sTEG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's a diagram I did; this is actually how some of the synth currently works.  Forgive my handwriting "
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UUQ2EQW21",
        "display_as_bot": false,
        "ts": "1624709659.023600",
        "thread_ts": "1624624587.019900",
        "parent_user_id": "UUQ2EQW21"
    },
    {
        "client_msg_id": "002f54e6-19ba-4daf-b7b2-c075b0756591",
        "type": "message",
        "text": "Oh, and I didn't find much of David Barbour's writing; a shame the blog is down.  I'm a member of lines community too; some good stuff on there.",
        "user": "UUQ2EQW21",
        "ts": "1624709821.023800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BX49",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh, and I didn't find much of David Barbour's writing; a shame the blog is down.  I'm a member of lines community too; some good stuff on there."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1624624587.019900",
        "parent_user_id": "UUQ2EQW21"
    },
    {
        "client_msg_id": "66AF4153-0CD5-480D-AA79-3DDA54DA1A4F",
        "type": "message",
        "text": "Regarding the UI; it is basically an OpenGL window, with a thin vector graphics library (NanoVG), and my own custom UI on top of that. The colour scheme is influenced by Bitwig, although I have been adding Theme support so I can play with it.",
        "user": "UUQ2EQW21",
        "ts": "1624779301.026300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L+S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Regarding the UI; it is basically an OpenGL window, with a thin vector graphics library (NanoVG), and my own custom UI on top of that. The colour scheme is influenced by Bitwig, although I have been adding Theme support so I can play with it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1624624587.019900",
        "parent_user_id": "UUQ2EQW21"
    },
    {
        "client_msg_id": "CBB1B887-6FCD-4ED5-8A0F-0F33E584F538",
        "type": "message",
        "text": "<https://github.com/memononen/nanovg|https://github.com/memononen/nanovg>",
        "user": "UUQ2EQW21",
        "ts": "1624779337.026600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Dcj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://github.com/memononen/nanovg",
                                "text": "https://github.com/memononen/nanovg"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1624624587.019900",
        "parent_user_id": "UUQ2EQW21"
    }
]