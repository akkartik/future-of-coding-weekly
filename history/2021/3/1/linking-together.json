[
    {
        "client_msg_id": "c48106e9-514e-4691-8328-4b816446ad5e",
        "type": "message",
        "text": "Really complete \"nodes and wires\" app builder: <https://www.noodl.net/>",
        "user": "UBN9AFS0N",
        "ts": "1614595735.073300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Noodl - Create custom apps faster",
                "title_link": "https://www.noodl.net/",
                "text": "Become a full-stack software creator in minutes.",
                "fallback": "Noodl - Create custom apps faster",
                "from_url": "https://www.noodl.net/",
                "service_name": "noodl.net",
                "id": 1,
                "original_url": "https://www.noodl.net/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RCp5/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Really complete \"nodes and wires\" app builder: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.noodl.net/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "reply_count": 28,
        "reply_users_count": 5,
        "latest_reply": "1614754833.086800",
        "reply_users": [
            "UML4ZEKDK",
            "UC2A2ARPT",
            "UJ6LDMMN0",
            "UEBG0NPDK",
            "UBKNXPBAB"
        ],
        "subscribed": true,
        "last_read": "1614754833.086800",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UML4ZEKDK",
                    "UJ6LDMMN0",
                    "UBKNXPBAB"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "391da9fa-f47e-487f-9972-4b0746089d7d",
        "type": "message",
        "text": "I'm always curious how nodes and wires UIs choose to deal with control flow like looping... Looks like this one treats it as just another node: <https://docs.noodl.net/#/nodes/data/for-each>",
        "user": "UML4ZEKDK",
        "ts": "1614603457.073800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Noodl Documentation",
                "title_link": "https://docs.noodl.net/#/nodes/data/for-each",
                "text": "Noodl is a software creation platform",
                "fallback": "Noodl Documentation",
                "from_url": "https://docs.noodl.net/#/nodes/data/for-each",
                "service_icon": "https://docs.noodl.net/favicon.png",
                "service_name": "docs.noodl.net",
                "id": 1,
                "original_url": "https://docs.noodl.net/#/nodes/data/for-each"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bJG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm always curious how nodes and wires UIs choose to deal with control flow like looping... Looks like this one treats it as just another node: "
                            },
                            {
                                "type": "link",
                                "url": "https://docs.noodl.net/#/nodes/data/for-each"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "7aeff208-c551-4044-a79f-e7d0f00a336e",
        "type": "message",
        "text": "It would be nice to see a visual gallery similar to <@UC2A2ARPT>'s codex (<https://github.com/ivanreese/visual-programming-codex>) that focuses specifically on comparing how concepts like looping are handled in each VPL.",
        "user": "UML4ZEKDK",
        "ts": "1614603692.074100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UML4ZEKDK",
            "ts": "1614792527.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qy+lV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It would be nice to see a visual gallery similar to "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": "'s codex ("
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/ivanreese/visual-programming-codex"
                            },
                            {
                                "type": "text",
                                "text": ") that focuses specifically on comparing how concepts like looping are handled in each VPL."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "b10a55c1-bc81-47e3-924a-ac39fe2450fe",
        "type": "message",
        "text": "Hey, this one is neat. It has a few UI conventions (like the nodes sort of snapping together like Scratch blocks) that I don't recall having seen in a node language before.",
        "user": "UC2A2ARPT",
        "ts": "1614621268.074400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MqP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey, this one is neat. It has a few UI conventions (like the nodes sort of snapping together like Scratch blocks) that I don't recall having seen in a node language before."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7951c16d-9dfb-4088-8452-d406bc758344",
        "type": "message",
        "text": "Also, <@UML4ZEKDK> \u2014 Totally agreed on looping constructs being an especially interesting point of comparison. Would love to see someone (else, hah) do that analysis.\n\nBonus round: I just went to add this to the codex and.. well, look who it is! Thanks.",
        "user": "UC2A2ARPT",
        "ts": "1614621362.074700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6SZo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, "
                            },
                            {
                                "type": "user",
                                "user_id": "UML4ZEKDK"
                            },
                            {
                                "type": "text",
                                "text": " \u2014 Totally agreed on looping constructs being an especially interesting point of comparison. Would love to see someone (else, hah) do that analysis.\n\nBonus round: I just went to add this to the codex and.. well, look who it is! Thanks."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b41291e8-3618-4d12-b356-c918e77e1467",
        "type": "message",
        "text": "Haha, I have my own \"new things to eventually do something with\" queue over at <https://github.com/malleable-systems/malleable.systems/issues>, so I'm already in the mindset of adding things to their proper queue (in this case, your codex) when I hear about them. :slightly_smiling_face:",
        "user": "UML4ZEKDK",
        "ts": "1614621490.075000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UML4ZEKDK",
            "ts": "1614792532.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RRL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Haha, I have my own \"new things to eventually do something with\" queue over at "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/malleable-systems/malleable.systems/issues"
                            },
                            {
                                "type": "text",
                                "text": ", so I'm already in the mindset of adding things to their proper queue (in this case, your codex) when I hear about them. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9afdf430-2f63-4ed4-98cf-663b3cd32ffb",
        "type": "message",
        "text": "I also like the idea of mixing nodes'n wires with snapping blocks \u00e0 la Scratch, especially for document structure (DOM) like it is done here in Noodle, and like Mariano has done with his HTML learning with blocks some time ago.",
        "user": "UJ6LDMMN0",
        "ts": "1614630607.075600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L3jf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also like the idea of mixing nodes'n wires with snapping blocks \u00e0 la Scratch, especially for document structure (DOM) like it is done here in Noodle, and like Mariano has done with his HTML learning with blocks some time ago."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "type": "message",
        "text": "the combination of legos and wires was an important part of our design for an efficient node editor before we decided to go in a different direction all together:",
        "files": [
            {
                "id": "F01PS5MM0H0",
                "created": 1614632432,
                "timestamp": 1614632432,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UEBG0NPDK",
                "editable": false,
                "size": 1408336,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F01PS5MM0H0/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F01PS5MM0H0/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PS5MM0H0-097c50f40e/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PS5MM0H0-097c50f40e/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PS5MM0H0-097c50f40e/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 193,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PS5MM0H0-097c50f40e/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 258,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PS5MM0H0-097c50f40e/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PS5MM0H0-097c50f40e/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 387,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PS5MM0H0-097c50f40e/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 430,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PS5MM0H0-097c50f40e/image_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 516,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PS5MM0H0-097c50f40e/image_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 550,
                "original_w": 2122,
                "original_h": 1140,
                "thumb_tiny": "AwAZADCnGqs4DNtHrjNSW9uZ2YBgNvtUasgGGjDH13EVYjvPLztiX060AP8A7OYDPmD/AL5NU6vHUmII8sfnVGgA2mkq3EVEZ+QlmXAPvVV+GINADaXNNpaALMLQB/3p3Ljpg025aFnHkDC454xzUFFAC5pM0UlAH//Z",
                "permalink": "https://futureofcoding.slack.com/files/UEBG0NPDK/F01PS5MM0H0/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F01PS5MM0H0-331ac61393",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "chv8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the combination of legos and wires was an important part of our design for an efficient node editor before we decided to go in a different direction all together:"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UEBG0NPDK",
        "display_as_bot": false,
        "ts": "1614632438.075800",
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "text": "some other variants that might be of interest:",
        "files": [
            {
                "id": "F01Q4QR8N49",
                "created": 1614632693,
                "timestamp": 1614632693,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UEBG0NPDK",
                "editable": false,
                "size": 1340332,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F01Q4QR8N49/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F01Q4QR8N49/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F01Q4QR8N49-7f370704ec/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F01Q4QR8N49-7f370704ec/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F01Q4QR8N49-7f370704ec/image_360.png",
                "thumb_360_w": 321,
                "thumb_360_h": 360,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F01Q4QR8N49-7f370704ec/image_480.png",
                "thumb_480_w": 428,
                "thumb_480_h": 480,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F01Q4QR8N49-7f370704ec/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F01Q4QR8N49-7f370704ec/image_720.png",
                "thumb_720_w": 642,
                "thumb_720_h": 720,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F01Q4QR8N49-7f370704ec/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 897,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F01Q4QR8N49-7f370704ec/image_960.png",
                "thumb_960_w": 856,
                "thumb_960_h": 960,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F01Q4QR8N49-7f370704ec/image_1024.png",
                "thumb_1024_w": 913,
                "thumb_1024_h": 1024,
                "original_w": 1306,
                "original_h": 1464,
                "thumb_tiny": "AwAwACqmBS4FIDSg+tMBvenBc03vSg4oAUjFR08tmmUAOXpT8DFMBpQ2KADvSgCmk80uaAFIxTKdmm0AOWnY/OmA4pc+9AAetOC5pmaXNABTacTTaAP/2Q==",
                "permalink": "https://futureofcoding.slack.com/files/UEBG0NPDK/F01Q4QR8N49/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F01Q4QR8N49-c5ef480f34",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A=l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "some other variants that might be of interest:"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UEBG0NPDK",
        "display_as_bot": false,
        "ts": "1614632699.076000",
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9897b4f6-fc98-40bf-9d92-41f6c468cfc3",
        "type": "message",
        "text": "Very interesting mix!\n\nI like the mix of vertical and horizontal snapping, it can bring some new expressiveness.\n\nI was wondering about the use of tiling for classical sequencing and wires for control flow or data \"stream\". When I used Max/MSP it was great for audio etc., but very bad for executing a series of operations, the wires add clutter. And I thought that tiling boxes might be the solution.",
        "user": "UJ6LDMMN0",
        "ts": "1614634902.076500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XAFU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very interesting mix!\n\nI like the mix of vertical and horizontal snapping, it can bring some new expressiveness.\n\nI was wondering about the use of tiling for classical sequencing and wires for control flow or data \"stream\". When I used Max/MSP it was great for audio etc., but very bad for executing a series of operations, the wires add clutter. And I thought that tiling boxes might be the solution."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "f313e4a9-c2b2-4c9a-bffb-9500511c8ff5",
        "type": "message",
        "text": "Too bad you didn't choose that way <@UEBG0NPDK>, I really like it!",
        "user": "UJ6LDMMN0",
        "ts": "1614635051.076800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KhxPt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Too bad you didn't choose that way "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": ", I really like it!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "slightly_smiling_face",
                "users": [
                    "UEBG0NPDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ed700435-9b19-4c68-9ec0-b00a279e7130",
        "type": "message",
        "text": "yeah, after a bunch of experiments and trying to understand what was actually going on fundamentally we arrived at some useful principles to work from. If you compare the top left to the bottom right, there\u2019s a huge difference in visual clutter.",
        "user": "UEBG0NPDK",
        "ts": "1614635131.077000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P7O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah, after a bunch of experiments and trying to understand what was actually going on fundamentally we arrived at some useful principles to work from. If you compare the top left to the bottom right, there\u2019s a huge difference in visual clutter."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "6cc19839-ffd4-4b6d-bc49-940f310bf44c",
        "type": "message",
        "text": "One of the big things we realized about most node/wire systems is that it\u2019s actually pretty hard to separate the \u201cmain idea\u201d from all the details. This vertical/horizontal split was our attempt at making that be inherent to the structure of the diagram you ended up with. The \u201cwhat\u201d flows top to bottom and the details flow left to right. This means if you read just the \u201cspine\u201d of the diagram, you\u2019ve got a good idea of what\u2019s going on.",
        "user": "UEBG0NPDK",
        "ts": "1614635224.077200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hQ9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One of the big things we realized about most node/wire systems is that it\u2019s actually pretty hard to separate the \u201cmain idea\u201d from all the details. This vertical/horizontal split was our attempt at making that be inherent to the structure of the diagram you ended up with. The \u201cwhat\u201d flows top to bottom and the details flow left to right. This means if you read just the \u201cspine\u201d of the diagram, you\u2019ve got a good idea of what\u2019s going on."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UBN9AFS0N"
                ],
                "count": 2
            }
        ]
    },
    {
        "type": "message",
        "text": "Another thing was making sure that the locuses of action were clear and easily accessed rather than being effectively spread everywhere (which makes a keyboard-heavy flow difficult to imagine)",
        "files": [
            {
                "id": "F01PP9306CD",
                "created": 1614635305,
                "timestamp": 1614635305,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UEBG0NPDK",
                "editable": false,
                "size": 292229,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F01PP9306CD/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F01PP9306CD/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PP9306CD-e730498804/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PP9306CD-e730498804/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PP9306CD-e730498804/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 283,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PP9306CD-e730498804/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 378,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PP9306CD-e730498804/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PP9306CD-e730498804/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 567,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PP9306CD-e730498804/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 630,
                "original_w": 874,
                "original_h": 688,
                "thumb_tiny": "AwAlADChS05M4OMVq/v89Iv/AB6gCjZxpJMA4yME1dNrb7D8gzjsT/jTw0iZaQJt/wBnOf1p+/fExAxwaAMOil7UlAADirn9ov8A3B+ZqlV1LFWjVvOAyM4wP8aAHrqGT86DHtzQ93CzFtrg/QVHNaLHEziXOO2Ov6022thOhYyBcHGKAK9JV42C4/136D/GqFACUoOPSkpaAFLZHQUnfNFFADtx9BTaKKAP/9k=",
                "permalink": "https://futureofcoding.slack.com/files/UEBG0NPDK/F01PP9306CD/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F01PP9306CD-2df1670614",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3Q8xs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another thing was making sure that the locuses of action were clear and easily accessed rather than being effectively spread everywhere (which makes a keyboard-heavy flow difficult to imagine)"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UEBG0NPDK",
        "display_as_bot": false,
        "ts": "1614635365.077400",
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7cf0a053-3dec-4609-9c65-dcebd1297f6d",
        "type": "message",
        "text": "From my notes on it:\n&gt; The \u201cpuzzle box\u201d is a bit like a structure of spreadsheet cells, except rather than an infinite grid, only cells directly connected to an existing cell are available. We differentiate the flow of power and flow of values, by placing slots for the former on the vertical axis, while data slots go on the horizontal axis. By default, cells snap into each other like a block-based editor, but can be pulled apart, revealing a wire when more space is necessary or flow is better demonstrated. Cells usually contain textual \u201cformulas,\u201d which preserves the density of text and makes it easy to edit complex expressions with few actions. They can also have complex domain representations (e.g. the truth table above) that are plugged into and used directly. Using this feels more like excel than any of the previous editors mentioned. There are clear places for action - empty or existing cells - that you navigate to and start typing in.\u00a0\n&gt; \n&gt; The puzzle box takes the best parts of text, nodes, and blocks, while offsetting the downsides of each:\n\u2022 We leverage the density and familiarity of text in each cell\n\u2022 By using wires for branching and complex control, we can maintain the ability to easily understand the flow of the behavior (offsetting the 1D of text). Splitting control out vertically, allows you to quickly \u201cread the spine\u201d and get the main idea of what\u2019s going to happen.\n\u2022 With the connected cells, we get the structure of block-based editors and can make it clear where actions can be performed. This also enables a primarily locate and act flow.\n\u2022 Rather than pure text, we can progressively disclose the internals of the cells, including showing slots only when they\u2019re part of the flow",
        "user": "UEBG0NPDK",
        "ts": "1614635692.077600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gG3x/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "From my notes on it:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The \u201cpuzzle box\u201d is a bit like a structure of spreadsheet cells, except rather than an infinite grid, only cells directly connected to an existing cell are available. We differentiate the flow of power and flow of values, by placing slots for the former on the vertical axis, while data slots go on the horizontal axis. By default, cells snap into each other like a block-based editor, but can be pulled apart, revealing a wire when more space is necessary or flow is better demonstrated. Cells usually contain textual \u201cformulas,\u201d which preserves the density of text and makes it easy to edit complex expressions with few actions. They can also have complex domain representations (e.g. the truth table above) that are plugged into and used directly. Using this feels more like excel than any of the previous editors mentioned. There are clear places for action - empty or existing cells - that you navigate to and start typing in.\u00a0\n\nThe puzzle box takes the best parts of text, nodes, and blocks, while offsetting the downsides of each:"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "We leverage the density and familiarity of text in each cell"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "By using wires for branching and complex control, we can maintain the ability to easily understand the flow of the behavior (offsetting the 1D of text). Splitting control out vertically, allows you to quickly \u201cread the spine\u201d and get the main idea of what\u2019s going to happen."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "With the connected cells, we get the structure of block-based editors and can make it clear where actions can be performed. This also enables a primarily locate and act flow."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Rather than pure text, we can progressively disclose the internals of the cells, including showing slots only when they\u2019re part of the flow"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "d437291b-d1ae-4053-83f6-57d053ae8f56",
        "type": "message",
        "text": "&gt; By default, cells snap into each other like a block-based editor, but can be pulled apart, revealing a wire\nSmart.",
        "user": "UC2A2ARPT",
        "ts": "1614636448.078100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ao2+",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "By default, cells snap into each other like a block-based editor, but can be pulled apart, revealing a wire"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nSmart."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f7fae539-732b-4d25-8304-2952dd0ce1e1",
        "type": "message",
        "text": "I really like all this. Especially the fact that there are several ways to visually assemble and organize things, that are not necessarily exclusive (snapped boxes can be drag and become nodes'n wires) but this gives a palette of representations that you can pick from to make your code the more expressive. It is really in that kind of direction I want to work on!",
        "user": "UJ6LDMMN0",
        "ts": "1614636544.078300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oYKpz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really like all this. Especially the fact that there are several ways to visually assemble and organize things, that are not necessarily exclusive (snapped boxes can be drag and become nodes'n wires) but this gives a palette of representations that you can pick from to make your code the more expressive. It is really in that kind of direction I want to work on!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "5a34a9ff-04d6-4f59-83a3-894e4fb8bccd",
        "type": "message",
        "text": "Yeah, go for it! This was the best we could come up with for this direction after a good bit of trying. I still believe it\u2019d make a badass node editor. :slightly_smiling_face:",
        "user": "UEBG0NPDK",
        "ts": "1614636625.078600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EFDYG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, go for it! This was the best we could come up with for this direction after a good bit of trying. I still believe it\u2019d make a badass node editor. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c82b9fe9-a69c-4473-9676-d81a4274591d",
        "type": "message",
        "text": "&gt; I still believe it\u2019d make a badass node editor.\nWell someone here's gotta do it!",
        "user": "UC2A2ARPT",
        "ts": "1614636682.078800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1614636698.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "leY",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I still believe it\u2019d make a badass node editor."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWell someone here's gotta do it!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "ivan",
                "users": [
                    "UBN9AFS0N"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "1eb3836e-a24c-47ac-b92f-f1c64ff97ded",
        "type": "message",
        "text": "Another thing we teased apart is that there\u2019s a difference between the micro and macro flows of using such an editor and we found almost every system seemed to treat them the same, which is a significant mistake. These node assemblies are all about the micro flow, but how you view/navigate/locate/act on the whole system is something else entirely. It actually has a lot of parallels with micro/macro in RTS games.",
        "user": "UEBG0NPDK",
        "ts": "1614636794.079100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EkI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another thing we teased apart is that there\u2019s a difference between the micro and macro flows of using such an editor and we found almost every system seemed to treat them the same, which is a significant mistake. These node assemblies are all about the micro flow, but how you view/navigate/locate/act on the whole system is something else entirely. It actually has a lot of parallels with micro/macro in RTS games."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "480df007-75ba-45a8-a658-4be0a1fbfbbb",
        "type": "message",
        "text": "I would push back on \"node assemblies are all about the micro flow\" \u2014 your nodes themselves contain things, and a lot of the friction with existing VPLs comes down to (IMO) a misalignment between what's happening within each node vs. what's happening around it. I'd propose: \"node assemblies are all about medium-scale flow\". That is to say, I agree with your point so much that I'd go even further: there are at least 3 distinct scales of concern, and only one of which (the middle one) is attended to by current node-wire tools.",
        "user": "UC2A2ARPT",
        "ts": "1614637125.079600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1614637321.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/PWHK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would push back on \"node assemblies are all about the micro flow\" \u2014 your nodes themselves contain things, and a lot of the friction with existing VPLs comes down to (IMO) a misalignment between what's happening within each node vs. what's happening around it. I'd propose: \"node assemblies are all about medium-scale flow\". That is to say, I agree with your point so much that I'd go even further: there are at least 3 distinct scales of concern, and only one of which (the middle one) is attended to by current node-wire tools."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UEBG0NPDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "4f011c41-bdc3-4035-babc-e6fbae7164d4",
        "type": "message",
        "text": "It was on my plan to work on this kind of stuff, i.e. mixing visual representations. I have been busy with some other stuff, but this discussion and your screenshots made me want to work on it sooner!",
        "user": "UJ6LDMMN0",
        "ts": "1614637188.079900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3qpE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It was on my plan to work on this kind of stuff, i.e. mixing visual representations. I have been busy with some other stuff, but this discussion and your screenshots made me want to work on it sooner!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "d34110ee-c5cb-4be9-9d08-403cbc8c60d9",
        "type": "message",
        "text": "&gt; a misalignment between what\u2019s happening within each node vs. what\u2019s happening around it\nwe had a fairly nice way of unifying nodes and assemblies, such that that was less of a distinction (it also resolved several other problems these systems have, like dealing with state transition rather than dataflow)",
        "user": "UEBG0NPDK",
        "ts": "1614637250.080200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IUyew",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a misalignment between what\u2019s happening within each node vs. what\u2019s happening around it"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "we had a fairly nice way of unifying nodes and assemblies, such that that was less of a distinction (it also resolved several other problems these systems have, like dealing with state transition rather than dataflow)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "99b78ad0-75b6-465a-8051-3abd213340cb",
        "type": "message",
        "text": "More on the fun/cool side, inspired by <@UC2A2ARPT>\u2019s lunchbox sessions, we wanted to make it so that anything can be replaced with it\u2019s representation, but retain its editing semantics. This means, for example, you could replace the wires with pipes and nodes with engine parts, but connecting them still meant semantically connecting them under the covers. :slightly_smiling_face:  There\u2019s a little bit of that in the images above where the picture of mario jumping is the representation of the jump node.",
        "user": "UEBG0NPDK",
        "ts": "1614637488.080600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1614637529.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EX==",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "More on the fun/cool side, inspired by "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": "\u2019s lunchbox sessions, we wanted to make it so that anything can be replaced with it\u2019s representation, but retain its editing semantics. This means, for example, you could replace the wires with pipes and nodes with engine parts, but connecting them still meant semantically connecting them under the covers. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": "  There\u2019s a little bit of that in the images above where the picture of mario jumping is the representation of the jump node."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            },
            {
                "name": "laughing",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "open_mouth",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8fc592e5-6607-4728-b5d9-0a1252fcd087",
        "type": "message",
        "text": "It is another idea I want to dig: having the ability to change the representation of \"programming semantic\", again to choose the one that is the more expressive.",
        "user": "UJ6LDMMN0",
        "ts": "1614637835.081000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nlTg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It is another idea I want to dig: having the ability to change the representation of \"programming semantic\", again to choose the one that is the more expressive."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "d3e56166-83fb-42bb-8d3a-82ee3a25afff",
        "type": "message",
        "text": "Like in your examples for if/then where there are several ways to represent it.",
        "user": "UJ6LDMMN0",
        "ts": "1614637907.081200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bNX5r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Like in your examples for if/then where there are several ways to represent it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "type": "message",
        "text": "<@UEBG0NPDK>: Your wires-and-snapping designs are great, and I'm glad they've sparked so much good discussion. But I want to call attention to something interesting about how Noodl in particular is using snapping...\n\nIt looks like Noodl uses snapping in one place: building layout trees for their views. Here's an example:",
        "files": [
            {
                "id": "F01Q56LPXD2",
                "created": 1614754138,
                "timestamp": 1614754138,
                "name": "Screen Shot 2021-03-02 at 10.48.03 PM.png",
                "title": "Screen Shot 2021-03-02 at 10.48.03 PM.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UBKNXPBAB",
                "editable": false,
                "size": 567255,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F01Q56LPXD2/screen_shot_2021-03-02_at_10.48.03_pm.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F01Q56LPXD2/download/screen_shot_2021-03-02_at_10.48.03_pm.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F01Q56LPXD2-eef197e7af/screen_shot_2021-03-02_at_10.48.03_pm_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F01Q56LPXD2-eef197e7af/screen_shot_2021-03-02_at_10.48.03_pm_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F01Q56LPXD2-eef197e7af/screen_shot_2021-03-02_at_10.48.03_pm_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 244,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F01Q56LPXD2-eef197e7af/screen_shot_2021-03-02_at_10.48.03_pm_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 326,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F01Q56LPXD2-eef197e7af/screen_shot_2021-03-02_at_10.48.03_pm_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F01Q56LPXD2-eef197e7af/screen_shot_2021-03-02_at_10.48.03_pm_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 489,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F01Q56LPXD2-eef197e7af/screen_shot_2021-03-02_at_10.48.03_pm_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 543,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F01Q56LPXD2-eef197e7af/screen_shot_2021-03-02_at_10.48.03_pm_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 652,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F01Q56LPXD2-eef197e7af/screen_shot_2021-03-02_at_10.48.03_pm_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 695,
                "original_w": 2018,
                "original_h": 1370,
                "thumb_tiny": "AwAgADChRRRQApUjqKTBJwOpp55WlgjEsyRkkBj1FMCOQMhwSDnuBTQxrUbTo2PzSSE+pxTJNNiSNnDvlQT2pAUBwaUtkdKbRQBJuAXGc1JZ/wDH3F9ar1NakLcxknABoA2gDk0yf/j3l/3DTBKg/wCWi/nTJ5lMTgOpG096AP/Z",
                "permalink": "https://futureofcoding.slack.com/files/UBKNXPBAB/F01Q56LPXD2/screen_shot_2021-03-02_at_10.48.03_pm.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F01Q56LPXD2-16f5947624",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lVGG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": ": Your wires-and-snapping designs are great, and I'm glad they've sparked so much good discussion. But I want to call attention to something interesting about how Noodl in particular is using snapping...\n\nIt looks like Noodl uses snapping in one place: building layout trees for their views. Here's an example:"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UBKNXPBAB",
        "display_as_bot": false,
        "ts": "1614754144.086400",
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "type": "message",
        "text": "This is interesting to me, because a layout tree is a fundamentally different visual formalism from a nodes-and-wires graph. (I mean, I guess you could build a hierarchical layout with nodes-and-wires, but it wouldn't make many people happy.) But it looks like Noodl does a good job of fluidly integrating the nodes-and-wires formalism with a tree formalism.\n\nIt reads well:\n\u2022 \"Here is the part of the tree that triggers state changes when clicked!\"\n\u2022 \"Here are the parts of the tree that change appearance when the state changes!\"\nArguably, it would be even better if the \"States\" node could connect directly to the actual components in the live preview, rather than just the abstract representations thereof. This would give it a look kind of like that <https://www.youtube.com/watch?v=Gy5m091fOTU|DeepUI demo>, where a node graph connects abstract nodes to concrete objects:",
        "files": [
            {
                "id": "F01PJ8ZQM1V",
                "created": 1614754712,
                "timestamp": 1614754712,
                "name": "DeepUI 1 0-50 screenshot.png",
                "title": "DeepUI 1 0-50 screenshot.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UBKNXPBAB",
                "editable": false,
                "size": 60869,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F01PJ8ZQM1V/deepui_1_0-50_screenshot.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F01PJ8ZQM1V/download/deepui_1_0-50_screenshot.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PJ8ZQM1V-6cd08bb535/deepui_1_0-50_screenshot_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PJ8ZQM1V-6cd08bb535/deepui_1_0-50_screenshot_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PJ8ZQM1V-6cd08bb535/deepui_1_0-50_screenshot_360.png",
                "thumb_360_w": 240,
                "thumb_360_h": 360,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PJ8ZQM1V-6cd08bb535/deepui_1_0-50_screenshot_480.png",
                "thumb_480_w": 320,
                "thumb_480_h": 480,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PJ8ZQM1V-6cd08bb535/deepui_1_0-50_screenshot_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PJ8ZQM1V-6cd08bb535/deepui_1_0-50_screenshot_720.png",
                "thumb_720_w": 480,
                "thumb_720_h": 720,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PJ8ZQM1V-6cd08bb535/deepui_1_0-50_screenshot_800.png",
                "thumb_800_w": 534,
                "thumb_800_h": 800,
                "original_w": 559,
                "original_h": 838,
                "thumb_tiny": "AwAwACClRQKKACijHGaKAAUUCigAooooAKKKKACiiigD/9k=",
                "permalink": "https://futureofcoding.slack.com/files/UBKNXPBAB/F01PJ8ZQM1V/deepui_1_0-50_screenshot.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F01PJ8ZQM1V-1aabca866e",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IXr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is interesting to me, because a layout tree is a fundamentally different visual formalism from a nodes-and-wires graph. (I mean, I guess you could build a hierarchical layout with nodes-and-wires, but it wouldn't make many people happy.) But it looks like Noodl does a good job of fluidly integrating the nodes-and-wires formalism with a tree formalism.\n\nIt reads well:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "style": "bullet",
                        "indent": 0,
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "\"Here is the part of the tree that triggers state changes when clicked!\""
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "\"Here are the parts of the tree that change appearance when the state changes!\""
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nArguably, it would be even better if the \"States\" node could connect directly to the actual components in the live preview, rather than just the abstract representations thereof. This would give it a look kind of like that "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=Gy5m091fOTU",
                                "text": "DeepUI demo"
                            },
                            {
                                "type": "text",
                                "text": ", where a node graph connects abstract nodes to concrete objects:"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UBKNXPBAB",
        "display_as_bot": false,
        "ts": "1614754720.086600",
        "edited": {
            "user": "UBKNXPBAB",
            "ts": "1614754897.000000"
        },
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3699d979-942d-4c4c-bf1e-b66489b56b7e",
        "type": "message",
        "text": "In summary: I'm excited about replacing noodles in node-graph systems with structured snapping, as <@UEBG0NPDK>'s designs show, AND I'm excited about extending node-graph systems to include different visual formalisms, as I believe Noodl is doing!",
        "user": "UBKNXPBAB",
        "ts": "1614754833.086800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UBKNXPBAB",
            "ts": "1614756328.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LoA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In summary: I'm excited about replacing noodles in node-graph systems with structured snapping, as "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": "'s designs show, AND I'm excited about extending node-graph systems to include different visual formalisms, as I believe Noodl is doing!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614595735.073300",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    }
]