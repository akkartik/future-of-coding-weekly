[
    {
        "client_msg_id": "f9227709-8271-49cb-9713-1b95ec7f1eb1",
        "type": "message",
        "text": "Is anyone here experienced with DCI? I have always found it intriguing but I haven't spend enough time understanding it or building a prototype. I just saw <https://vimeo.com/43536416|this talk by Trygve Reenskaug> and he mentions the book <http://clean-ruby.com|Clean Ruby>, has anyone read it?\n(Trygve mentions Engelbart and Alan Kay in the talk :wink:)",
        "user": "U85HCL7JP",
        "ts": "1615602482.185200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U85HCL7JP",
            "ts": "1615602491.000000"
        },
        "attachments": [
            {
                "service_name": "Vimeo",
                "service_url": "https://vimeo.com/",
                "title": "Trygve Reenskaug - Object Orientation Revisited. Simplicity and power with DCI.",
                "title_link": "https://vimeo.com/43536416",
                "author_name": "NDC Conferences",
                "author_link": "https://vimeo.com/ndcconferences",
                "thumb_url": "https://i.vimeocdn.com/video/302282639_295x166.jpg",
                "thumb_width": 295,
                "thumb_height": 166,
                "text": "Nygaard and Dahl invented Simula\u2019s classes and objects to master complex problems. Alan Kay invented object orientation (OO) with its networks of communicating objects to facilitate simple and powerful mental models. His goal was to make computers and programming comprehensible to children of all ages. Mainstream programmers missed the importance of communication in Kay\u2019s OO and misused the term. A better name for their approach is \u2018class orientation\u2019.I have extended Kay\u2019s original OO with explicit concepts and code that specify how objects interact at runtime. With this new paradigm, Data-Context-Interaction (DCI), programmers reason about their code, new team members get quickly up to speed, maintainers lead a better and more productive life. The DCI Context is a new abstraction that supplements the ubiquitous class. While a class says everything about the inside of an object and nothing about the objects surrounding it, a DCI Context says everything about a network of communicating objects and nothing about their insides. The class is great for describing autonomous objects such as the domain objects in the Data part of DCI. The Context is great for describing how use cases are realized by networks of communicating objects. Communication is now a first-class citizen of programming.",
                "fallback": "Vimeo Video: Trygve Reenskaug - Object Orientation Revisited. Simplicity and power with DCI.",
                "video_html": "<iframe src=\"https://player.vimeo.com/video/43536416?autoplay=1&amp;app_id=122963\" width=\"400\" height=\"225\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen title=\"Trygve Reenskaug - Object Orientation Revisited. Simplicity and power with DCI.\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://vimeo.com/43536416",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/vimeo.png",
                "id": 1,
                "original_url": "https://vimeo.com/43536416"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j7h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is anyone here experienced with DCI? I have always found it intriguing but I haven't spend enough time understanding it or building a prototype. I just saw "
                            },
                            {
                                "type": "link",
                                "url": "https://vimeo.com/43536416",
                                "text": "this talk by Trygve Reenskaug"
                            },
                            {
                                "type": "text",
                                "text": " and he mentions the book "
                            },
                            {
                                "type": "link",
                                "url": "http://clean-ruby.com",
                                "text": "Clean Ruby"
                            },
                            {
                                "type": "text",
                                "text": ", has anyone read it?\n(Trygve mentions Engelbart and Alan Kay in the talk "
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1615602482.185200",
        "reply_count": 14,
        "reply_users_count": 3,
        "latest_reply": "1615762499.215800",
        "reply_users": [
            "UFPPABQ7P",
            "U85HCL7JP",
            "USH01JEDQ"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "7ea1352b-963b-43f9-be05-593fadeba0f0",
        "type": "message",
        "text": "Hmm, the first things that come to mind with similar themes are MVC, the <https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design|repository pattern> , and Model View View-Model.",
        "user": "UFPPABQ7P",
        "ts": "1615646222.188400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Designing the infrastructure persistence layer",
                "title_link": "https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design",
                "text": ".NET Microservices Architecture for Containerized .NET Applications | Explore the repository pattern in the design of the infrastructure persistence layer.",
                "fallback": "Designing the infrastructure persistence layer",
                "thumb_url": "https://docs.microsoft.com/en-us/media/logos/logo-ms-social.png",
                "from_url": "https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https://docs.microsoft.com/favicon.ico",
                "service_name": "docs.microsoft.com",
                "id": 1,
                "original_url": "https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g5L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmm, the first things that come to mind with similar themes are MVC, the "
                            },
                            {
                                "type": "link",
                                "url": "https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design",
                                "text": "repository pattern"
                            },
                            {
                                "type": "text",
                                "text": " , and Model View View-Model."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "6312521e-29a3-49be-beac-1505ff4760f6",
        "type": "message",
        "text": "Given it's emphasis on OO (either OOP or Kay OO), it doesn't seem like something that I would personally gravitate towards in comparison to patterns more compatible with data-oriented programming (often found in Rust) or functional programming.",
        "user": "UFPPABQ7P",
        "ts": "1615646348.188700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5Ri",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Given it's emphasis on OO (either OOP or Kay OO), it doesn't seem like something that I would personally gravitate towards in comparison to patterns more compatible with data-oriented programming (often found in Rust) or functional programming."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "1e3c1d04-2290-42cc-be57-818a7e2aa67e",
        "type": "message",
        "text": "There is quite a bit of overlap with these ideas and the big picture of the software I've written. Things like microservices feel like they embody Kay OOP and the OO that Reenskaug describes here. I feel that we can see an advantage to OOP as something which enables a stricter separation of responsibilities, which is essentially what many architectures are currently built around. For example, a Third Party data sync integration is one object, while the browser client is one object, and some auth gateway is another object.",
        "user": "UFPPABQ7P",
        "ts": "1615647133.188900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oAypn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There is quite a bit of overlap with these ideas and the big picture of the software I've written. Things like microservices feel like they embody Kay OOP and the OO that Reenskaug describes here. I feel that we can see an advantage to OOP as something which enables a stricter separation of responsibilities, which is essentially what many architectures are currently built around. For example, a Third Party data sync integration is one object, while the browser client is one object, and some auth gateway is another object."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "cd9a39df-e7c7-45f7-a4fa-19227995a5f6",
        "type": "message",
        "text": "DCI have similarities with MVC because both were created by Trygve! :smile: <https://folk.universitetetioslo.no/trygver/index.html>\nIMO the most interesting idea in DCI is about making the  `compile` path equal to the `runtime` path. I hate having to play computer every time I read code.\nEvery concept that you mentioned above lacks this.",
        "user": "U85HCL7JP",
        "ts": "1615648422.189100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/yTz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "DCI have similarities with MVC because both were created by Trygve! "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https://folk.universitetetioslo.no/trygver/index.html"
                            },
                            {
                                "type": "text",
                                "text": "\nIMO the most interesting idea in DCI is about making the  "
                            },
                            {
                                "type": "text",
                                "text": "compile",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " path equal to the "
                            },
                            {
                                "type": "text",
                                "text": "runtime",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " path. I hate having to play computer every time I read code.\nEvery concept that you mentioned above lacks this."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "FE09832E-846F-466E-8110-69600DE4ADC8",
        "type": "message",
        "text": "Very familiar, have built a few systems in DCI \u2013 also familiar with Jim's book, which is a pretty good dive into DCI but relies on some custom libraries. In my mind, DCI should be doable with language convention alone. Dynamic languages (or langs that support dynamic invocation) are best suited, as method chains will be overridden. DCI also prefers true object-based languages, vs class-based (though Trygve's collaborator Jim Coplien has built DCI systems in C++ and Java, too \u2013\u00a0and has defined a custom DCI language charmingly called `trygve`).\n\nThe idea of DCI is essentially that a model can have a \"role\" snapped onto it as needed, which provides behavior for the model. When you need the system to do something (ie, a use case), you have a use case object load data models, snap roles on them, and the roles provide new functions \u2013 run the functions, then release everything (data model objects go back to being plain vanilla without particular role behaviors).\n\nWhat this does is deconstruct &amp; relieve the pressure put on traditional objects (at least the 90s-00s notions of objects) to be all things for all use cases. Instead, a model primarily becomes just Data (the D in DCI) that can perform different Interactions in different Contexts.\n\nIt cleans up a codebase because what you primarily see are use cases (context object definitions), and then the models and roles that fulfill the use cases. It's easy to learn what a system can do, and the code reveals in a straightforward way how behavior is implemented.\n\nI haven't used it outside of database-oriented projects (tables are nice forcing functions to define models). It worked perfectly in rails. I'm not sure how I'd use it in a strongly-typed language. I think it has a lot of untapped potential.",
        "user": "USH01JEDQ",
        "ts": "1615662915.204800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fu4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very familiar, have built a few systems in DCI \u2013 also familiar with Jim's book, which is a pretty good dive into DCI but relies on some custom libraries. In my mind, DCI should be doable with language convention alone. Dynamic languages (or langs that support dynamic invocation) are best suited, as method chains will be overridden. DCI also prefers true object-based languages, vs class-based (though Trygve's collaborator Jim Coplien has built DCI systems in C++ and Java, too \u2013\u00a0and has defined a custom DCI language charmingly called "
                            },
                            {
                                "type": "text",
                                "text": "trygve",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ").\n"
                            },
                            {
                                "type": "text",
                                "text": "\nThe idea of DCI is essentially that a model can have a \"role\" snapped onto it as needed, which provides behavior for the model. When you need the system to do something (ie, a use case), you have a use case object load data models, snap roles on them, and the roles provide new functions \u2013 run the functions, then release everything (data model objects go back to being plain vanilla without particular role behaviors).\n\nWhat this does is deconstruct & relieve the pressure put on traditional objects (at least the 90s-00s notions of objects) to be all things for all use cases. Instead, a model primarily becomes just Data (the D in DCI) that can perform different Interactions in different Contexts.\n\nIt cleans up a codebase because what you primarily see are use cases (context object definitions), and then the models and roles that fulfill the use cases. It's easy to learn what a system can do, and the code reveals in a straightforward way how behavior is implemented.\n\nI haven't used it outside of database-oriented projects (tables are nice forcing functions to define models). It worked perfectly in rails. I'm not sure how I'd use it in a strongly-typed language. I think it has a lot of untapped potential."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U85HCL7JP"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "bf9df51b-387b-428b-880f-110bc6be3f58",
        "type": "message",
        "text": "Thanks for the explantion <@USH01JEDQ>!\n&gt;  It's easy to learn what a system can do, and the code reveals in a straightforward way how behavior is implemented.\n^ This is the part about DCI that I'm interested the most. Do you have en example a bit more involved than the classic `TransferMoney`?\nI'm looking into introducing DCI to Ruby/Rails codebase :slightly_smiling_face:",
        "user": "U85HCL7JP",
        "ts": "1615665067.205100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "do3ku",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the explantion "
                            },
                            {
                                "type": "user",
                                "user_id": "USH01JEDQ"
                            },
                            {
                                "type": "text",
                                "text": "!\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " It's easy to learn what a system can do, and the code reveals in a straightforward way how behavior is implemented."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "^ This is the part about DCI that I'm interested the most. Do you have en example a bit more involved than the classic "
                            },
                            {
                                "type": "text",
                                "text": "TransferMoney",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "?\nI'm looking into introducing DCI to Ruby/Rails codebase "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "8091b6fc-7063-4079-a5be-44b9d459361c",
        "type": "message",
        "text": "Another question, do you have thoughts about having DCI in a frontend-end framework, e.g. React, Elm, Vue, or even vanilla js?",
        "user": "U85HCL7JP",
        "ts": "1615665423.205300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XQ0uL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another question, do you have thoughts about having DCI in a frontend-end framework, e.g. React, Elm, Vue, or even vanilla js?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "92917FAC-E3A0-4C12-B37C-0C037F64EECB",
        "type": "message",
        "text": "Sure... In one system, which provided an infrastructure service, a useful model was a NetworkInterface, that represented fields like eth0, mac address, local IP. \n\nIt also had enough data that we could assign it a role as a SwitchPort, with functions that could communicate directly to switch firmware.\n\nOne use case was to ChangeSubnet, to move a machine NIC to a different network. The ChangeSubnet object could load the NetworkInterface(s) required for the request, add the SwitchPort role to the NetworkInterface, call a SwitchPort function to essentially change to a new switch port, and then update the NetworkInterface model fields accordingly. So in the end, the machine ended up on a new network, and the state of the row of the NetworkInterface table was properly kept up-to-date.\n\nIn our top level folder, there's a ChangeSubnet ruby file. You look into it to see how the business is done, and how the SwitchPort role is defined.",
        "user": "USH01JEDQ",
        "ts": "1615666886.212300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+ftd0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sure... In one system, which provided an infrastructure service, a useful model was a NetworkInterface, that represented fields like eth0, mac address, local IP. \n"
                            },
                            {
                                "type": "text",
                                "text": "\nIt also had enough data that we could assign it a role as a SwitchPort, with functions that could communicate directly to switch firmware.\n\nOne use case was to ChangeSubnet, to move a machine NIC to a different network. The ChangeSubnet object could load the NetworkInterface(s) required for the request, add the SwitchPort role to the NetworkInterface, call a SwitchPort function to essentially change to a new switch port, and then update the NetworkInterface model fields accordingly. So in the end, the machine ended up on a new network, and the state of the row of the NetworkInterface table was properly kept up-to-date.\n\nIn our top level folder, there's a ChangeSubnet ruby file. You look into it to see how the business is done, and how the SwitchPort role is defined."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP",
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "U85HCL7JP"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "028c425b-d109-476a-bbb3-00f4236d71cb",
        "type": "message",
        "text": "Do you ever need to share Roles/methods between Contexts? Is duplication the way to go?",
        "user": "U85HCL7JP",
        "ts": "1615667658.212500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U85HCL7JP",
            "ts": "1615667679.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RAM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do you ever need to share Roles/methods between Contexts? Is duplication the way to go?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "B1A152F0-56EA-4025-95BD-AE5A2CF9210C",
        "type": "message",
        "text": "Almost never \u2013 we kept roles as a folder of modules, but we could have just done it the recommended way of keeping the definitions in the context file",
        "user": "USH01JEDQ",
        "ts": "1615684038.214000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KS3Sh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Almost never \u2013 we kept roles as a folder of modules, but we could have just done it the recommended way of keeping the definitions in the context file"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U85HCL7JP"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9d8ee773-796b-4a0e-8300-a55362cf43b4",
        "type": "message",
        "text": "&gt; a model primarily becomes just Data (the D in DCI) that can perform different Interactions in different Contexts.\nThe idea sounds similar to what you mentioned <@UFPPABQ7P>:\n&gt; I would personally gravitate towards in comparison to patterns more compatible with data-oriented programming (often found in Rust) \nDo have any resources about `data-oriented programming`?",
        "user": "U85HCL7JP",
        "ts": "1615761283.215100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "btvZs",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a model primarily becomes just Data (the D in DCI) that can perform different Interactions in different Contexts."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe idea sounds similar to what you mentioned "
                            },
                            {
                                "type": "user",
                                "user_id": "UFPPABQ7P"
                            },
                            {
                                "type": "text",
                                "text": ":\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would personally gravitate towards in comparison to patterns more compatible with data-oriented programming (often found in Rust) "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do have any resources about "
                            },
                            {
                                "type": "text",
                                "text": "data-oriented programming",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "1858dc4d-592a-4e6b-8a8a-e0afcc9283d1",
        "type": "message",
        "text": "As we leverage data oriented programming at Storyscript (which I am defining as a strict separation between the data being defined separate from the business logic). Rust is good at this because it has enum types (ADTs / variant types) which make it quite a bit easier to embed business rules and object states into the data directly.\nWe base much of our code around variant types with <https://en.m.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel|MVVM (see wikipedia)> in the frontend TypeScript and an <https://en.m.wikipedia.org/wiki/Entity_component_system#Characteristics|ECS architecture (see \"Characteristics\" on wikipedia)> in the editing engine in Rust.",
        "user": "UFPPABQ7P",
        "ts": "1615762054.215300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "image_url": "https://upload.wikimedia.org/wikipedia/commons/8/87/MVVMPattern.png",
                "image_width": 771,
                "image_height": 232,
                "image_bytes": 18486,
                "title": "Model\u2013view\u2013viewmodel",
                "title_link": "https://en.m.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel",
                "from_url": "https://en.m.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel",
                "author_name": "Wikipedia",
                "author_link": "https://en.wikipedia.org/",
                "text": "Model\u2013view\u2013viewmodel (MVVM) is a software architectural pattern that facilitates the separation of the development of the graphical user interface (the view) \u2013 be it via a markup language or GUI code \u2013 from the development of the business logic or back-end logic (the model) so that the view is not dependent on any specific model platform. The view model of MVVM is a value converter, meaning the view model is responsible for exposing (converting) the data objects from the model in such a way that objects are easily managed and presented. In this respect, the view model is more model than view, and handles most if not all of the view's display logic. The view model may implement a mediator pattern, organizing access to the back-end logic around the set of use cases supported by the view.\nMVVM is a variation of Martin Fowler's Presentation Model design pattern. It was invented by Microsoft architects Ken Cooper and Ted Peters specifically to simplify event-driven programming of user interfaces. The pattern was incorporated into Windows Presentation Foundation (WPF) (Microsoft's .NET graphics system) and Silverlight (WPF's Internet application derivative). John Gossman, one of Microsoft's WPF and Silverlight architects, announced MVVM on his blog in 2005.Model\u2013view\u2013viewmodel is also referred to as model\u2013view\u2013binder, especially in implementations not involving the .NET platform. ZK (a web application framework written in Java) and KnockoutJS (a JavaScript library) use model\u2013view\u2013binder.",
                "fallback": "wikipedia: Model\u2013view\u2013viewmodel",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png",
                "id": 1,
                "original_url": "https://en.m.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel"
            },
            {
                "title": "Entity component system",
                "title_link": "https://en.m.wikipedia.org/wiki/Entity_component_system#Characteristics",
                "from_url": "https://en.m.wikipedia.org/wiki/Entity_component_system#Characteristics",
                "author_name": "Wikipedia",
                "author_link": "https://en.wikipedia.org/",
                "text": "Entity\u2013component\u2013system (ECS) is an architectural pattern that is mostly used in game development. ECS follows the composition over inheritance principle that allows greater flexibility in defining entities where every object in a game's scene is an entity (e.g. enemies, bullets, vehicles, etc.). Every entity consists of one or more components which contains data or state. Therefore, the behavior of an entity can be changed at runtime by systems that add, remove or mutate components. This eliminates the ambiguity problems of deep and wide inheritance hierarchies that are difficult to understand, maintain and extend. Common ECS approaches are highly compatible and often combined with data-oriented design techniques.",
                "fallback": "wikipedia: Entity component system",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png",
                "id": 2,
                "original_url": "https://en.m.wikipedia.org/wiki/Entity_component_system#Characteristics"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5YXG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As we leverage data oriented programming at Storyscript (which I am defining as a strict separation between the data being defined separate from the business logic). Rust is good at this because it has enum types (ADTs / variant types) which make it quite a bit easier to embed business rules and object states into the data directly.\nWe base much of our code around variant types with "
                            },
                            {
                                "type": "link",
                                "url": "https://en.m.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel",
                                "text": "MVVM (see wikipedia)"
                            },
                            {
                                "type": "text",
                                "text": " in the frontend TypeScript and an "
                            },
                            {
                                "type": "link",
                                "url": "https://en.m.wikipedia.org/wiki/Entity_component_system#Characteristics",
                                "text": "ECS architecture (see \"Characteristics\" on wikipedia)"
                            },
                            {
                                "type": "text",
                                "text": " in the editing engine in Rust."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "7daad311-77d6-4dcb-a6b1-b198b963d365",
        "type": "message",
        "text": "<@U85HCL7JP> it sounds like our solutions are more focused on a different approach and need overall, though, since all this code is currently solely being used on a per user basis (one engine instance per document). Our engine's architecture is designed to scale well as additional complexity is added over time (such as parsing to type checking to suggestions based on type checking to personalized suggestions based on multiple sources of suggestions)",
        "user": "UFPPABQ7P",
        "ts": "1615762365.215600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T0C4H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U85HCL7JP"
                            },
                            {
                                "type": "text",
                                "text": " it sounds like our solutions are more focused on a different approach and need overall, though, since all this code is currently solely being used on a per user basis (one engine instance per document). Our engine's architecture is designed to scale well as additional complexity is added over time (such as parsing to type checking to suggestions based on type checking to personalized suggestions based on multiple sources of suggestions)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "df3baa43-b88e-44c3-af0b-58809d15dab4",
        "type": "message",
        "text": "To my knowledge, it feels like Kay object orientation at the isolated service level is unavoidable (at least I haven't seen an API that wasn't basically a Kay object to pass messages back and forth with)",
        "user": "UFPPABQ7P",
        "ts": "1615762499.215800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/ql",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To my knowledge, it feels like Kay object orientation at the isolated service level is unavoidable (at least I haven't seen an API that wasn't basically a Kay object to pass messages back and forth with)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1615602482.185200",
        "parent_user_id": "U85HCL7JP"
    }
]