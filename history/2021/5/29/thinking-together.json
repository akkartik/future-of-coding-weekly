[
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "<@UEBG0NPDK> Thank you for bringing up _Out of the Tar Pit_! I've tried several times to appreciate it, and mostly failed to do so in the past[1]. Your nudge in this context got me to do so one more time, and I got a lot further. This time I went past the preliminaries in chapters 1-7 which had given me a lot of trouble before, and focused on their solution outline in chapters 8-10.\n\nI don't think I'd ever noticed before that their FRP is not Conal Elliott's FRP! Functional _Relational_ Programming, not Functional Reactive Programming. Did everybody else know this? This is the kind of stuff that reminds me that my brain is just a jumble of wires, and all my seeming insights are illusory. I'll call it a Moseley-Marks or MM system, just to get past the camouflage.\n\nHave there been any attempts to build an MM system? Pretty much every FRP mention out there seems to be reactive rather than relational. The closest I got was systems inspired directly by Codd rather than MM: <https://wiki.c2.com/?TutorialDee>\n\nAnyways, once I pruned away the stuff I was distracted by in the past, I see now a kernel of ideas that seem very useful. It's not essential vs accidental complexity that an MM system manages, because I'm skeptical of our ability to separate those categories, but rather functional invariants vs cross-cutting concerns:\n\n\u2022 Base state consisting of immutable value types and relations between them (subsets of points in tuple space).\n\u2022 Functions over value types.\n\u2022 Derived relations that aren't needed to describe the problem, but useful to a specific implementation.\n\u2022 Integrity constraints for base and derived relations.\n\u2022 Hints on what to store, what order to store it, indexes, etc. A Prolog-like search strategy would fit in here, I think.\nThe critical new insight for me: this doesn't have to be an all-encompassing framework. Calling it Functional makes it hard to see that I can actually use the framework even in an imperative setting. Set up a phase of a program where it goes through deriving relations from the input, then query the relation store in various ways to create the desired output. Unlike properties like referential transparency, a little impurity here doesn't actually make it impossible to assess the remainder. I can imagine a fairly conventional language toolchain that adds a `relvar` type, along with operations to insert into, query and clear relational variables. Use them in the \"lumpy\" parts of your program, where you're tempted to duplicate code or no obvious new abstractions present themselves. The toolchain could even give feedback in a complexity score every time it rebuilds a program. The only new domain-independent constraint: you can't mutate a value in the relation store.\n\nThis framework feels enormously useful once I stop expecting it to be a silver bullet, and start thinking of it instead as _a stepping stone to the right architecture_. A dynamically typed store of global state that is easy to query. The problem with mutable global state is really just one of UX: it's too easy to get into situations where mutations get squirreled away where they're easy to forget. Creating immutable copies and local variables can lead to the same pathologies; _they just tend to do so less often_. Given the gradual nature of the benefits, requiring 100% purity to get any benefits feels like a bad trade. The MM system permits more graceful trade-offs.\n\n[1] My opinion of it as of last week, mostly honed in the course of discussions here: <https://lobste.rs/s/1yfrup/into_tar_pit#c_3ikuv9>",
        "user": "UCUSW7WVD",
        "ts": "1622304307.031200",
        "thread_ts": "1622048775.021900",
        "root": {
            "client_msg_id": "b2d1cf44-033f-41db-9745-c2b4dfd934cb",
            "type": "message",
            "text": "SAD theorem\n\nAs programs grow complex, you will be repeatedly forced to either:\n\nmaintain some *State,*\nperform some computations *Again,*\nor *Duplicate* some code.\n\nHas anyone encountered a formulation like this in the literature?",
            "user": "UCUSW7WVD",
            "ts": "1622048775.021900",
            "team": "T5TCAFTA9",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "mr1tn",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "SAD theorem\n\nAs programs grow complex, you will be repeatedly forced to either:\n\nmaintain some "
                                },
                                {
                                    "type": "text",
                                    "text": "State,",
                                    "style": {
                                        "bold": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": "\nperform some computations "
                                },
                                {
                                    "type": "text",
                                    "text": "Again,",
                                    "style": {
                                        "bold": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": "\nor "
                                },
                                {
                                    "type": "text",
                                    "text": "Duplicate",
                                    "style": {
                                        "bold": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " some code.\n\nHas anyone encountered a formulation like this in the literature?"
                                }
                            ]
                        }
                    ]
                }
            ],
            "thread_ts": "1622048775.021900",
            "reply_count": 18,
            "reply_users_count": 9,
            "latest_reply": "1622373659.035300",
            "reply_users": [
                "UBN9AFS0N",
                "UCUSW7WVD",
                "UGWUJUZHT",
                "UKFNXF0F9",
                "UJBAJNFLK",
                "UKDM3GLAJ",
                "UEBG0NPDK",
                "UC2A2ARPT",
                "UJN1TAYEQ"
            ],
            "is_locked": false,
            "subscribed": true,
            "last_read": "1622373659.035300"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W7M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " Thank you for bringing up "
                            },
                            {
                                "type": "text",
                                "text": "Out of the Tar Pit",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "! I've tried several times to appreciate it, and mostly failed to do so in the past[1]. Your nudge in this context got me to do so one more time, and I got a lot further. This time I went past the preliminaries in chapters 1-7 which had given me a lot of trouble before, and focused on their solution outline in chapters 8-10.\n\nI don't think I'd ever noticed before that their FRP is not Conal Elliott's FRP! Functional "
                            },
                            {
                                "type": "text",
                                "text": "Relational",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " Programming, not Functional Reactive Programming. Did everybody else know this? This is the kind of stuff that reminds me that my brain is just a jumble of wires, and all my seeming insights are illusory. I'll call it a Moseley-Marks or MM system, just to get past the camouflage.\n\nHave there been any attempts to build an MM system? Pretty much every FRP mention out there seems to be reactive rather than relational. The closest I got was systems inspired directly by Codd rather than MM: "
                            },
                            {
                                "type": "link",
                                "url": "https://wiki.c2.com/?TutorialDee"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAnyways, once I pruned away the stuff I was distracted by in the past, I see now a kernel of ideas that seem very useful. It's not essential vs accidental complexity that an MM system manages, because I'm skeptical of our ability to separate those categories, but rather functional invariants vs cross-cutting concerns:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Base state consisting of immutable value types and relations between them (subsets of points in tuple space)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Functions over value types."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Derived relations that aren't needed to describe the problem, but useful to a specific implementation."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Integrity constraints for base and derived relations."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Hints on what to store, what order to store it, indexes, etc. A Prolog-like search strategy would fit in here, I think."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe critical new insight for me: this doesn't have to be an all-encompassing framework. Calling it Functional makes it hard to see that I can actually use the framework even in an imperative setting. Set up a phase of a program where it goes through deriving relations from the input, then query the relation store in various ways to create the desired output. Unlike properties like referential transparency, a little impurity here doesn't actually make it impossible to assess the remainder. I can imagine a fairly conventional language toolchain that adds a "
                            },
                            {
                                "type": "text",
                                "text": "relvar",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " type, along with operations to insert into, query and clear relational variables. Use them in the \"lumpy\" parts of your program, where you're tempted to duplicate code or no obvious new abstractions present themselves. The toolchain could even give feedback in a complexity score every time it rebuilds a program. The only new domain-independent constraint: you can't mutate a value in the relation store.\n\nThis framework feels enormously useful once I stop expecting it to be a silver bullet, and start thinking of it instead as "
                            },
                            {
                                "type": "text",
                                "text": "a stepping stone to the right architecture",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". A dynamically typed store of global state that is easy to query. The problem with mutable global state is really just one of UX: it's too easy to get into situations where mutations get squirreled away where they're easy to forget. Creating immutable copies and local variables can lead to the same pathologies; "
                            },
                            {
                                "type": "text",
                                "text": "they just tend to do so less often",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Given the gradual nature of the benefits, requiring 100% purity to get any benefits feels like a bad trade. The MM system permits more graceful trade-offs.\n\n[1] My opinion of it as of last week, mostly honed in the course of discussions here: "
                            },
                            {
                                "type": "link",
                                "url": "https://lobste.rs/s/1yfrup/into_tar_pit#c_3ikuv9"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "1848dfa9-f7ea-4424-8225-abc8a82ad95a",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    }
]