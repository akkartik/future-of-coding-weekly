[
    {
        "client_msg_id": "b2d1cf44-033f-41db-9745-c2b4dfd934cb",
        "type": "message",
        "text": "SAD theorem\n\nAs programs grow complex, you will be repeatedly forced to either:\n\nmaintain some *State,*\nperform some computations *Again,*\nor *Duplicate* some code.\n\nHas anyone encountered a formulation like this in the literature?",
        "user": "UCUSW7WVD",
        "ts": "1622048775.021900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mr1tn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "SAD theorem\n\nAs programs grow complex, you will be repeatedly forced to either:\n\nmaintain some "
                            },
                            {
                                "type": "text",
                                "text": "State,",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nperform some computations "
                            },
                            {
                                "type": "text",
                                "text": "Again,",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nor "
                            },
                            {
                                "type": "text",
                                "text": "Duplicate",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " some code.\n\nHas anyone encountered a formulation like this in the literature?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1622048775.021900",
        "reply_count": 18,
        "reply_users_count": 9,
        "latest_reply": "1622373659.035300",
        "reply_users": [
            "UBN9AFS0N",
            "UCUSW7WVD",
            "UGWUJUZHT",
            "UKFNXF0F9",
            "UJBAJNFLK",
            "UKDM3GLAJ",
            "UEBG0NPDK",
            "UC2A2ARPT",
            "UJN1TAYEQ"
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1622373659.035300",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "5357cc6d-b9db-4807-8ee3-2d6c20362640",
        "type": "message",
        "text": "S and A seem to relate to caching, the D talks about code, but if it talked about data it would definitely be about cache invalidation :stuck_out_tongue:",
        "user": "UBN9AFS0N",
        "ts": "1622052235.022100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vv4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "S and A seem to relate to caching, the D talks about code, but if it talked about data it would definitely be about cache invalidation "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1622048775.021900",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "7cb6010b-ca14-4eb3-ba8d-27c560c6cb05",
        "type": "message",
        "text": "I'm only concerned about the code architecture. S and A are about caching only to the extent that all data structures are caches (a reasonable view)\n\nI'm going to flesh out a concrete case study. But if y'all think of any papers that may be relevant please throw them here.",
        "user": "UCUSW7WVD",
        "ts": "1622053311.022300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Cy7pL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm only concerned about the code architecture. S and A are about caching only to the extent that all data structures are caches (a reasonable view)\n\nI'm going to flesh out a concrete case study. But if y'all think of any papers that may be relevant please throw them here."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1622048775.021900",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "5e2455d5-bbb9-4c39-8e79-9571b9d50bb2",
        "type": "message",
        "text": "right now I can only think of \"On the criteria to be used in decomposing systems into modules\" by parnas",
        "user": "UBN9AFS0N",
        "ts": "1622054892.022600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1622054903.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3fx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "right now I can only think of \"On the criteria to be used in decomposing systems into modules\" by parnas"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1622048775.021900",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b339f552-40d7-4d9b-9411-05cd9bcedcde",
        "type": "message",
        "text": "<https://www.semanticscholar.org/paper/N-degrees-of-separation%3A-multi-dimensional-of-Tarr-Ossher/2618f43d7ada40c94e91d9abbba4456799a7e927>",
        "user": "UBN9AFS0N",
        "ts": "1622055181.023400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "[PDF] N degrees of separation: multi-dimensional separation of concerns | Semantic Scholar",
                "title_link": "https://www.semanticscholar.org/paper/N-degrees-of-separation%3A-multi-dimensional-of-Tarr-Ossher/2618f43d7ada40c94e91d9abbba4456799a7e927",
                "text": "Done well, separation of concerns can provide many software engineering benefits, including reduced complexity, improved reusability, and simpler evolution. The choice of boundaries for separate concerns depends on both requirements on the system and on the kind(s) of decomposition and composition a given formalism supports. The predominant methodologies and formalisms available, however, support only orthogonal separations of concerns, along single dimensions of composition and decomposition. These characteristics lead to a number of well-known and difficult problems. The paper describes a new paradigm for modeling and implementing software artifacts, one that permits separation of overlapping concerns along multiple dimensions of composition and decomposition. This approach addresses numerous problems throughout the software lifecycle in achieving well-engineered, evolvable, flexible software artifacts and traceability across artifacts.",
                "fallback": "[PDF] N degrees of separation: multi-dimensional separation of concerns | Semantic Scholar",
                "image_url": "https://www.semanticscholar.org/img/semantic_scholar_og.png",
                "image_width": 476,
                "image_height": 250,
                "from_url": "https://www.semanticscholar.org/paper/N-degrees-of-separation%3A-multi-dimensional-of-Tarr-Ossher/2618f43d7ada40c94e91d9abbba4456799a7e927",
                "image_bytes": 115258,
                "service_icon": "https://cdn.semanticscholar.org/bfe4c96e24f2b552/img/apple-touch-icon-57x57.png",
                "service_name": "\u00a0",
                "id": 1,
                "original_url": "https://www.semanticscholar.org/paper/N-degrees-of-separation%3A-multi-dimensional-of-Tarr-Ossher/2618f43d7ada40c94e91d9abbba4456799a7e927"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7YQqO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.semanticscholar.org/paper/N-degrees-of-separation%3A-multi-dimensional-of-Tarr-Ossher/2618f43d7ada40c94e91d9abbba4456799a7e927"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1622048775.021900",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "db8ed61f-de21-42c5-aba8-89dcf2e0e9c9",
        "type": "message",
        "text": "Maybe of interest:\n\nNiCad Clone Detector <https://www.researchgate.net/publication/221219568_The_NiCad_clone_detector>\n\nFraming Software Reuse <https://www.amazon.ca/Framing-Software-Reuse-Lessons-World/dp/013327859X>)\n\nMy thoughts on RY as a Programming Primitive\n<https://guitarvydas.github.io/2021/05/24/RY-Repeat-Yourself-as-a-PL-Primitive.html>\n\nStateCharts\n<https://guitarvydas.github.io/2020/12/09/StateCharts.html>)\n\nStateCharts II\n<https://guitarvydas.github.io/2021/02/25/statecharts-(again).html>)",
        "user": "UGWUJUZHT",
        "ts": "1622057526.024800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tgcAP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe of interest:\n\nNiCad Clone Detector "
                            },
                            {
                                "type": "link",
                                "url": "https://www.researchgate.net/publication/221219568_The_NiCad_clone_detector"
                            },
                            {
                                "type": "text",
                                "text": "\n\nFraming Software Reuse "
                            },
                            {
                                "type": "link",
                                "url": "https://www.amazon.ca/Framing-Software-Reuse-Lessons-World/dp/013327859X"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nMy thoughts on RY as a Programming Primitive\n"
                            },
                            {
                                "type": "link",
                                "url": "https://guitarvydas.github.io/2021/05/24/RY-Repeat-Yourself-as-a-PL-Primitive.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\nStateCharts\n"
                            },
                            {
                                "type": "link",
                                "url": "https://guitarvydas.github.io/2020/12/09/StateCharts.html"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nStateCharts II\n"
                            },
                            {
                                "type": "link",
                                "url": "https://guitarvydas.github.io/2021/02/25/statecharts-(again).html"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1622048775.021900",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b4d46d32-d2a9-4623-a041-a35a75285452",
        "type": "message",
        "text": "we might say, there is no such thing called \"state\" once upon a time. \"state\" is a illusion invented to decouple computation.",
        "user": "UKFNXF0F9",
        "ts": "1622077005.026300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WdfB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "we might say, there is no such thing called \"state\" once upon a time. \"state\" is a illusion invented to decouple computation."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1622048775.021900",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "b466a977-deda-44a0-a5d9-bf66e06ed323",
        "type": "message",
        "text": "<@UKFNXF0F9> Spotted just now:\n\n&gt; a filesystem is a kind of network protocol that allows for communicating across time\n<https://tiny.tilde.website/@astrid/103554056156344583>",
        "user": "UCUSW7WVD",
        "ts": "1622078083.026500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C2R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKFNXF0F9"
                            },
                            {
                                "type": "text",
                                "text": " Spotted just now:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a filesystem is a kind of network protocol that allows for communicating across time"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://tiny.tilde.website/@astrid/103554056156344583"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1622048775.021900",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "81f9720d-9396-48f8-b736-0289da7d002c",
        "type": "message",
        "text": "or a abstraction to generalize the past, no matter how many events happened in what order, we can always generalize it as \"same state\", to simplify the integration",
        "user": "UKFNXF0F9",
        "ts": "1622078370.026800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wjz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "or a abstraction to generalize the past, no matter how many events happened in what order, we can always generalize it as \"same state\", to simplify the integration"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1622048775.021900",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "c3bf1bc7-9f88-4ef4-812b-c2446c3f0891",
        "type": "message",
        "text": "Seen from a purely computational perspective, yes. But state is also a feature of our physical universe, and can thus be an important aspect of _models_ of the physical world. Much of the OO vs. FP debate could be eliminated if both sides made a clear distinction between state as part of the model and computational state as an optimization technique.",
        "user": "UJBAJNFLK",
        "ts": "1622090502.027300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xkXK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Seen from a purely computational perspective, yes. But state is also a feature of our physical universe, and can thus be an important aspect of "
                            },
                            {
                                "type": "text",
                                "text": "models",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of the physical world. Much of the OO vs. FP debate could be eliminated if both sides made a clear distinction between state as part of the model and computational state as an optimization technique."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1622048775.021900",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "928d11db-e7a2-4902-b0ad-a7207f9eb5e9",
        "type": "message",
        "text": "S and A do seem like things that can be traded against each other, but I'm having a hard time seeing how D comes in. How does duplicated code trade against State? Is the idea that the branch of code you find yourself in implicitly encodes the state?",
        "user": "UKDM3GLAJ",
        "ts": "1622124581.027600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H/8R+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "S and A do seem like things that can be traded against each other, but I'm having a hard time seeing how D comes in. How does duplicated code trade against State? Is the idea that the branch of code you find yourself in implicitly encodes the state?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1622048775.021900",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c19d5c9e-fef8-4711-a186-616477dac461",
        "type": "message",
        "text": "Say you perform some complex function (rendering some structured data to screen) and then need the result of a sub-computation (where did ___ get drawn?) You could either save some state during the computation (render) or redo a slice of it (a pretend-render function that duplicates some of the logic in render).\n\nPerhaps higher-order functions will help here? I have a tendency to forget them after 2 years of programming in machine code.",
        "user": "UCUSW7WVD",
        "ts": "1622125343.027800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yA7K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Say you perform some complex function (rendering some structured data to screen) and then need the result of a sub-computation (where did ___ get drawn?) You could either save some state during the computation (render) or redo a slice of it (a pretend-render function that duplicates some of the logic in render).\n\nPerhaps higher-order functions will help here? I have a tendency to forget them after 2 years of programming in machine code."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1622048775.021900",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "40f7017f-9f32-4539-932c-34c31116fecb",
        "type": "message",
        "text": "Oh, reusing a HOF would correspond to doing some potentially complex computation again for the complex traversal logic. This reminds me of the Scrap Your Boilerplate papers from the Haskell world.",
        "user": "UCUSW7WVD",
        "ts": "1622125853.028000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1622125887.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gj6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh, reusing a HOF would correspond to doing some potentially complex computation again for the complex traversal logic. This reminds me of the Scrap Your Boilerplate papers from the Haskell world."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1622048775.021900",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "e4f1f81d-c426-4a3b-8b74-ab1eb76e783a",
        "type": "message",
        "text": "This feels very related to the primary thesis of Out of the Tar Pit",
        "user": "UEBG0NPDK",
        "ts": "1622135596.028500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f2KbV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This feels very related to the primary thesis of Out of the Tar Pit"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1622048775.021900",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "<@UEBG0NPDK> Thank you for bringing up _Out of the Tar Pit_! I've tried several times to appreciate it, and mostly failed to do so in the past[1]. Your nudge in this context got me to do so one more time, and I got a lot further. This time I went past the preliminaries in chapters 1-7 which had given me a lot of trouble before, and focused on their solution outline in chapters 8-10.\n\nI don't think I'd ever noticed before that their FRP is not Conal Elliott's FRP! Functional _Relational_ Programming, not Functional Reactive Programming. Did everybody else know this? This is the kind of stuff that reminds me that my brain is just a jumble of wires, and all my seeming insights are illusory. I'll call it a Moseley-Marks or MM system, just to get past the camouflage.\n\nHave there been any attempts to build an MM system? Pretty much every FRP mention out there seems to be reactive rather than relational. The closest I got was systems inspired directly by Codd rather than MM: <https://wiki.c2.com/?TutorialDee>\n\nAnyways, once I pruned away the stuff I was distracted by in the past, I see now a kernel of ideas that seem very useful. It's not essential vs accidental complexity that an MM system manages, because I'm skeptical of our ability to separate those categories, but rather functional invariants vs cross-cutting concerns:\n\n\u2022 Base state consisting of immutable value types and relations between them (subsets of points in tuple space).\n\u2022 Functions over value types.\n\u2022 Derived relations that aren't needed to describe the problem, but useful to a specific implementation.\n\u2022 Integrity constraints for base and derived relations.\n\u2022 Hints on what to store, what order to store it, indexes, etc. A Prolog-like search strategy would fit in here, I think.\nThe critical new insight for me: this doesn't have to be an all-encompassing framework. Calling it Functional makes it hard to see that I can actually use the framework even in an imperative setting. Set up a phase of a program where it goes through deriving relations from the input, then query the relation store in various ways to create the desired output. Unlike properties like referential transparency, a little impurity here doesn't actually make it impossible to assess the remainder. I can imagine a fairly conventional language toolchain that adds a `relvar` type, along with operations to insert into, query and clear relational variables. Use them in the \"lumpy\" parts of your program, where you're tempted to duplicate code or no obvious new abstractions present themselves. The toolchain could even give feedback in a complexity score every time it rebuilds a program. The only new domain-independent constraint: you can't mutate a value in the relation store.\n\nThis framework feels enormously useful once I stop expecting it to be a silver bullet, and start thinking of it instead as _a stepping stone to the right architecture_. A dynamically typed store of global state that is easy to query. The problem with mutable global state is really just one of UX: it's too easy to get into situations where mutations get squirreled away where they're easy to forget. Creating immutable copies and local variables can lead to the same pathologies; _they just tend to do so less often_. Given the gradual nature of the benefits, requiring 100% purity to get any benefits feels like a bad trade. The MM system permits more graceful trade-offs.\n\n[1] My opinion of it as of last week, mostly honed in the course of discussions here: <https://lobste.rs/s/1yfrup/into_tar_pit#c_3ikuv9>",
        "user": "UCUSW7WVD",
        "ts": "1622304307.031200",
        "thread_ts": "1622048775.021900",
        "root": {
            "client_msg_id": "b2d1cf44-033f-41db-9745-c2b4dfd934cb",
            "type": "message",
            "text": "SAD theorem\n\nAs programs grow complex, you will be repeatedly forced to either:\n\nmaintain some *State,*\nperform some computations *Again,*\nor *Duplicate* some code.\n\nHas anyone encountered a formulation like this in the literature?",
            "user": "UCUSW7WVD",
            "ts": "1622048775.021900",
            "team": "T5TCAFTA9",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "mr1tn",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "SAD theorem\n\nAs programs grow complex, you will be repeatedly forced to either:\n\nmaintain some "
                                },
                                {
                                    "type": "text",
                                    "text": "State,",
                                    "style": {
                                        "bold": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": "\nperform some computations "
                                },
                                {
                                    "type": "text",
                                    "text": "Again,",
                                    "style": {
                                        "bold": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": "\nor "
                                },
                                {
                                    "type": "text",
                                    "text": "Duplicate",
                                    "style": {
                                        "bold": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " some code.\n\nHas anyone encountered a formulation like this in the literature?"
                                }
                            ]
                        }
                    ]
                }
            ],
            "thread_ts": "1622048775.021900",
            "reply_count": 18,
            "reply_users_count": 9,
            "latest_reply": "1622373659.035300",
            "reply_users": [
                "UBN9AFS0N",
                "UCUSW7WVD",
                "UGWUJUZHT",
                "UKFNXF0F9",
                "UJBAJNFLK",
                "UKDM3GLAJ",
                "UEBG0NPDK",
                "UC2A2ARPT",
                "UJN1TAYEQ"
            ],
            "is_locked": false,
            "subscribed": true,
            "last_read": "1622373659.035300"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W7M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " Thank you for bringing up "
                            },
                            {
                                "type": "text",
                                "text": "Out of the Tar Pit",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "! I've tried several times to appreciate it, and mostly failed to do so in the past[1]. Your nudge in this context got me to do so one more time, and I got a lot further. This time I went past the preliminaries in chapters 1-7 which had given me a lot of trouble before, and focused on their solution outline in chapters 8-10.\n\nI don't think I'd ever noticed before that their FRP is not Conal Elliott's FRP! Functional "
                            },
                            {
                                "type": "text",
                                "text": "Relational",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " Programming, not Functional Reactive Programming. Did everybody else know this? This is the kind of stuff that reminds me that my brain is just a jumble of wires, and all my seeming insights are illusory. I'll call it a Moseley-Marks or MM system, just to get past the camouflage.\n\nHave there been any attempts to build an MM system? Pretty much every FRP mention out there seems to be reactive rather than relational. The closest I got was systems inspired directly by Codd rather than MM: "
                            },
                            {
                                "type": "link",
                                "url": "https://wiki.c2.com/?TutorialDee"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAnyways, once I pruned away the stuff I was distracted by in the past, I see now a kernel of ideas that seem very useful. It's not essential vs accidental complexity that an MM system manages, because I'm skeptical of our ability to separate those categories, but rather functional invariants vs cross-cutting concerns:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Base state consisting of immutable value types and relations between them (subsets of points in tuple space)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Functions over value types."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Derived relations that aren't needed to describe the problem, but useful to a specific implementation."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Integrity constraints for base and derived relations."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Hints on what to store, what order to store it, indexes, etc. A Prolog-like search strategy would fit in here, I think."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe critical new insight for me: this doesn't have to be an all-encompassing framework. Calling it Functional makes it hard to see that I can actually use the framework even in an imperative setting. Set up a phase of a program where it goes through deriving relations from the input, then query the relation store in various ways to create the desired output. Unlike properties like referential transparency, a little impurity here doesn't actually make it impossible to assess the remainder. I can imagine a fairly conventional language toolchain that adds a "
                            },
                            {
                                "type": "text",
                                "text": "relvar",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " type, along with operations to insert into, query and clear relational variables. Use them in the \"lumpy\" parts of your program, where you're tempted to duplicate code or no obvious new abstractions present themselves. The toolchain could even give feedback in a complexity score every time it rebuilds a program. The only new domain-independent constraint: you can't mutate a value in the relation store.\n\nThis framework feels enormously useful once I stop expecting it to be a silver bullet, and start thinking of it instead as "
                            },
                            {
                                "type": "text",
                                "text": "a stepping stone to the right architecture",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". A dynamically typed store of global state that is easy to query. The problem with mutable global state is really just one of UX: it's too easy to get into situations where mutations get squirreled away where they're easy to forget. Creating immutable copies and local variables can lead to the same pathologies; "
                            },
                            {
                                "type": "text",
                                "text": "they just tend to do so less often",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Given the gradual nature of the benefits, requiring 100% purity to get any benefits feels like a bad trade. The MM system permits more graceful trade-offs.\n\n[1] My opinion of it as of last week, mostly honed in the course of discussions here: "
                            },
                            {
                                "type": "link",
                                "url": "https://lobste.rs/s/1yfrup/into_tar_pit#c_3ikuv9"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "1848dfa9-f7ea-4424-8225-abc8a82ad95a",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c342c511-7a32-433a-b78d-bce42ed7dcfe",
        "type": "message",
        "text": "&gt; I don't think I'd ever noticed before that their FRP is not Conal Elliott's FRP! Functional\u00a0_Relational_\u00a0Programming, not Functional Reactive Programming. Did everybody else know this?\n*nod*\n\n&gt; Have there been any attempts to build an MM system?\nLast time I asked / researched this, I only heard/saw \"no\" beyond the example in the paper. I think a lot of folks (myself included) have made feints in that direction, before diverting off elsewhere for whatever reason.\n\n&gt; It's not essential vs accidental complexity that an MM system manages, *because I'm skeptical of our ability to separate those categories*\nNeed one of those room-scale \":100:\" buttons I can jump up and down on.",
        "user": "UC2A2ARPT",
        "ts": "1622318190.031900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1622318304.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "83s",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't think I'd ever noticed before that their FRP is not Conal Elliott's FRP! Functional\u00a0"
                            },
                            {
                                "type": "text",
                                "text": "Relational",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u00a0Programming, not Functional Reactive Programming. Did everybody else know this?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n*nod*\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Have there been any attempts to build an MM system?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nLast time I asked / researched this, I only heard/saw \"no\" beyond the example in the paper. I think a lot of folks (myself included) have made feints in that direction, before diverting off elsewhere for whatever reason.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's not essential vs accidental complexity that an MM system manages, "
                            },
                            {
                                "type": "text",
                                "text": "because I'm skeptical of our ability to separate those categories",
                                "style": {
                                    "bold": true
                                }
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nNeed one of those room-scale \""
                            },
                            {
                                "type": "emoji",
                                "name": "100"
                            },
                            {
                                "type": "text",
                                "text": "\" buttons I can jump up and down on."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1622048775.021900",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "05a19c64-3cef-4439-89ec-2f2ee6b29e79",
        "type": "message",
        "text": "I think that the Cell language is MM inspired. I'd guess heavily inspired, except that the author doesn't cite the tarpit paper. <http://cell-lang.net/>",
        "user": "UJN1TAYEQ",
        "ts": "1622340174.032500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y4Mb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think that the Cell language is MM inspired. I'd guess heavily inspired, except that the author doesn't cite the tarpit paper. "
                            },
                            {
                                "type": "link",
                                "url": "http://cell-lang.net/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1622048775.021900",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "1778B166-0C6A-478B-8768-AE02D28194E7",
        "type": "message",
        "text": "Many versions of Eve were essentially MM systems that tried out different points in the implementation space. From pure log + view to various forms of mutable. ",
        "user": "UEBG0NPDK",
        "ts": "1622349149.035000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x/h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Many versions of Eve were essentially MM systems that tried out different points in the implementation space. From pure log + view to various forms of mutable. "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1622048775.021900",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f8e2b30a-cab4-4188-904e-9cd6cbf35e15",
        "type": "message",
        "text": "<@UJN1TAYEQ> <http://cell-lang.net/relations.html|http://cell-lang.net/relations.html> cites the paper!",
        "user": "UCUSW7WVD",
        "ts": "1622373659.035300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I94Ke",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "http://cell-lang.net/relations.html",
                                "text": "http://cell-lang.net/relations.html"
                            },
                            {
                                "type": "text",
                                "text": " cites the paper!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1622048775.021900",
        "parent_user_id": "UCUSW7WVD"
    }
]