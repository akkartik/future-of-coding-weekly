[
    {
        "client_msg_id": "23dc7ee3-3fbf-4f84-9332-f382b58c54ee",
        "type": "message",
        "text": "I fully disagree with <@U6KQ2S410>. I don't know where he gets funding for his own research, but for me there is no funding.\n\nFirst of all, I happen to be one of those that would prefer music and movies be as free as FOSS, because a economy based on artificial scarcity is bad in a world of impoverished people. But whatever, the current model for music/movies isn't that bad - those who can afford to pay usually pay, and those who can't, don't. I've lived in the Philippines so I've seen how this works - in practice it doesn't work too badly, as filmmakers get paid and poor people still get entertainment.\n\nProgramming languages is a totally different kettle of fish, where convincing people to use a new tool is already difficult. Why would you want to hinder adoption further by charging money for each copy? Why would you make a tool that OSS fans (myself included) are likely to refuse to use regardless of the merits? The Wolfram language is maybe the best example. It's an excellent tool with an huge library of useful tools, but you have to pay to use it and I think that's why it has gained very little mindshare among developers.\n\nOpen source suffers from quality issues for an obvious reason: people can only afford to do it in their free time, and almost no one is hiring teams to do open source software. But it does not follow that freedom or \"free riding\" is the problem.\n\nCharging for each copy made far more sense before the computer era, and that's why we used that system. In the computer era it makes far more sense to shift to a public funding model where people doing PL research and open-source engineering can apply for grants or UBI or something.\n\nI, for one, would gladly accept minimum wage to work on my PL research and open-source engineering. It sure beats the zero income I'm getting now. I once paid $300 for a compiler when I was a teenager - I had a paper route and could earn that money. But the paid model only worked because (1) there weren't good open source alternatives at the time and (2) I was buying a \"proven\" solution (a C++ compiler) which everybody was telling me was the best way to do software development (I eventually realized this wasn't true and now recognize C++ as a pretty shitty language). If your goal is to do experimental work and really challenge the status quo, how does the paid model work in 2021?",
        "user": "UD6EXQVM0",
        "ts": "1609996902.456400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1609997885.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kDXJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I fully disagree with "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": ". I don't know where he gets funding for his own research, but for me there is no funding.\n\nFirst of all, I happen to be one of those that would prefer music and movies be as free as FOSS, because a economy based on artificial scarcity is bad in a world of impoverished people. But whatever, the current model for music/movies isn't that bad - those who can afford to pay usually pay, and those who can't, don't. I've lived in the Philippines so I've seen how this works - in practice it doesn't work too badly, as filmmakers get paid and poor people still get entertainment.\n\nProgramming languages is a totally different kettle of fish, where convincing people to use a new tool is already difficult. Why would you want to hinder adoption further by charging money for each copy? Why would you make a tool that OSS fans (myself included) are likely to refuse to use regardless of the merits? The Wolfram language is maybe the best example. It's an excellent tool with an huge library of useful tools, but you have to pay to use it and I think that's why it has gained very little mindshare among developers.\n\nOpen source suffers from quality issues for an obvious reason: people can only afford to do it in their free time, and almost no one is hiring teams to do open source software. But it does not follow that freedom or \"free riding\" is the problem.\n\nCharging for each copy made far more sense before the computer era, and that's why we used that system. In the computer era it makes far more sense to shift to a public funding model where people doing PL research and open-source engineering can apply for grants or UBI or something.\n\nI, for one, would gladly accept minimum wage to work on my PL research and open-source engineering. It sure beats the zero income I'm getting now. I once paid $300 for a compiler when I was a teenager - I had a paper route and could earn that money. But the paid model only worked because (1) there weren't good open source alternatives at the time and (2) I was buying a \"proven\" solution (a C++ compiler) which everybody was telling me was the best way to do software development (I eventually realized this wasn't true and now recognize C++ as a pretty shitty language). If your goal is to do experimental work and really challenge the status quo, how does the paid model work in 2021?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1609787901.435600",
        "parent_user_id": "UJFN50C00",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "63c6a624-0fdd-4256-8a32-adf5d7d6d3b3",
        "type": "message",
        "text": "I would further argue that people like me shouldn't have to be businessmen and shouldn't have to found \"startups\" and spend our time fundraising from VCs and wealthy \"angels\". My passion is software, not business. More importantly, it seems very clear that investors are rarely willing to invest in tooling, precisely because it is so hard to charge money for tools, and an ad-based model a la Google/Facebook doesn't work on the command line (one npm package publisher tried it and he got smacked down hard and fast). So why should we lust after the old-fashioned charge-per-copy model again?",
        "user": "UD6EXQVM0",
        "ts": "1609997625.457000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1609997970.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b4+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would further argue that people like me shouldn't have to be businessmen and shouldn't have to found \"startups\" and spend our time fundraising from VCs and wealthy \"angels\". My passion is software, not business. More importantly, it seems very clear that investors are rarely willing to invest in tooling, precisely because it is so hard to charge money for tools, and an ad-based model a la Google/Facebook doesn't work on the command line (one npm package publisher tried it and he got smacked down hard and fast). So why should we lust after the old-fashioned charge-per-copy model again?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1609787901.435600",
        "parent_user_id": "UJFN50C00",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UEZQXJK9V"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "30c0ecfc-2e99-4117-a9f6-cac7be10b848",
        "type": "message",
        "text": "With conceptual tools, you pay with your attention?",
        "user": "UA14TGLTC",
        "ts": "1610005779.457900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "by9XP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "With conceptual tools, you pay with your attention?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1609787901.435600",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "cbd57467-356d-43ed-bfb7-35ad2e025e42",
        "type": "message",
        "text": "<@UD6EXQVM0> I'd like to take up one of your examples, which I happen to know well: the Wolfram language. It's a combination of two things, both very well done: a computational infrastructure, and a huge library of machine-readable knowledge encoded using this infrastructure. Compare with Wikipedia, which is also a huge library of knowledge, but much less machine-readable (in spite of Wikidata, which is a great project), and in particular not executable (something that <@U01AD80KMLK> is working on). There have been many attempts to make an Open Source clone of Mathematica, which have all failed. Wikipedia is the model of open collaboration that everybody points to. So what's the essential difference?\n\nMy analysis: the Wolfram language is a top-down design with a genius in the dictator position (I don't use the term \"genius\" lightly, but Stephen Wolfram is one of the few people I consider derserving it). Wikipedia is a bottom-up effort to which everyone with minimal digital literacy can contribute. We'll get the Open Source equivalent of the Wolfram language when a large enough part of the population acquires sufficient digital literacy to be at ease working with executable knowledge and its strict semantics. Unless of course AI-based mediation makes Wikipedia knowledge robustly executable before that happens. My crystal ball isn't very clear on that question.\n\nThe problem with computing is the requirement of managing precise semantics over multiple level of abstraction. That's a rare competence today. Open Source projects work when they have enough people with that competence (called \"maintainers\") participating over long time spans, whatever their motivation may be. But maintainers can't adopt the right mindset for innovation. Stephen Wolfram can.",
        "user": "UJBAJNFLK",
        "ts": "1610010247.458200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uh/u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UD6EXQVM0"
                            },
                            {
                                "type": "text",
                                "text": " I'd like to take up one of your examples, which I happen to know well: the Wolfram language. It's a combination of two things, both very well done: a computational infrastructure, and a huge library of machine-readable knowledge encoded using this infrastructure. Compare with Wikipedia, which is also a huge library of knowledge, but much less machine-readable (in spite of Wikidata, which is a great project), and in particular not executable (something that "
                            },
                            {
                                "type": "user",
                                "user_id": "U01AD80KMLK"
                            },
                            {
                                "type": "text",
                                "text": " is working on). There have been many attempts to make an Open Source clone of Mathematica, which have all failed. Wikipedia is the model of open collaboration that everybody points to. So what's the essential difference?\n\nMy analysis: the Wolfram language is a top-down design with a genius in the dictator position (I don't use the term \"genius\" lightly, but Stephen Wolfram is one of the few people I consider derserving it). Wikipedia is a bottom-up effort to which everyone with minimal digital literacy can contribute. We'll get the Open Source equivalent of the Wolfram language when a large enough part of the population acquires sufficient digital literacy to be at ease working with executable knowledge and its strict semantics. Unless of course AI-based mediation makes Wikipedia knowledge robustly executable before that happens. My crystal ball isn't very clear on that question.\n\nThe problem with computing is the requirement of managing precise semantics over multiple level of abstraction. That's a rare competence today. Open Source projects work when they have enough people with that competence (called \"maintainers\") participating over long time spans, whatever their motivation may be. But maintainers can't adopt the right mindset for innovation. Stephen Wolfram can."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1609787901.435600",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "71f8cba4-4c87-41b4-b68e-845de907644b",
        "type": "message",
        "text": "The issue is always trust. Once upon a time, we trusted Google to allow chrome to dominate the browser market, see what the trust leads to us. Private owned company gaining monopoly on public infrastructure is dangerous.",
        "user": "UKFNXF0F9",
        "ts": "1610024051.458400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L3TlH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The issue is always trust. Once upon a time, we trusted Google to allow chrome to dominate the browser market, see what the trust leads to us. Private owned company gaining monopoly on public infrastructure is dangerous."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1609970688.450300",
        "parent_user_id": "UKFNXF0F9",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U01FM9NJPRN",
                    "UEZQXJK9V"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "F032C85D-E95D-4C75-94A8-740714917AF6",
        "type": "message",
        "text": "Btw this was a good listen <https://hopeinsource.com/emotional/|https://hopeinsource.com/emotional/>",
        "user": "UKP3B2J5D",
        "ts": "1610029017.459600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Emotional Programming (Omar Rizwan)",
                "title_link": "https://hopeinsource.com/emotional/",
                "text": "What can we learn from someone's last tweets? Omar Rizwan joins Henry to chat about the Dynamicland way of thinking: communal, involving the whole person, user agency. We discuss user control, the problem of lists, industrial open source, materiality and embodiment, knowing through doing, and being aware of your emotions when programming. Also (of course) screenshots. (recorded in August)",
                "fallback": "Emotional Programming (Omar Rizwan)",
                "thumb_url": "https://hopeinsource.com/static/his-d400d9b856edc71e0b8da4a6079868fc.jpg",
                "image_url": "https://hopeinsource.com/static/his-d400d9b856edc71e0b8da4a6079868fc.jpg",
                "from_url": "https://hopeinsource.com/emotional/",
                "thumb_width": 2083,
                "thumb_height": 2083,
                "image_width": 2083,
                "image_height": 2083,
                "image_bytes": 112552,
                "service_icon": "https://hopeinsource.com/favicon.ico",
                "service_name": "hopeinsource.com",
                "id": 1,
                "original_url": "https://hopeinsource.com/emotional/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O0G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Btw this was a good listen "
                            },
                            {
                                "type": "link",
                                "url": "https://hopeinsource.com/emotional/",
                                "text": "https://hopeinsource.com/emotional/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1609538033.428200",
        "parent_user_id": "UKP3B2J5D",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    }
]