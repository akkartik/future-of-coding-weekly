[
    {
        "client_msg_id": "700A060F-CAB0-4E79-9A22-3A2E9CE90D5D",
        "type": "message",
        "text": "didn\u2019t realize that excel had this level of program synthesis behind it: <https://youtu.be/1KimYFzET1w|https://youtu.be/1KimYFzET1w> (backstory of development in thread)",
        "user": "UHWC9PXBL",
        "ts": "1611191896.000800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1611191934.000000"
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Excel Flash Fill For MAJOR Time Saving (7 Examples)",
                "title_link": "https://youtu.be/1KimYFzET1w",
                "author_name": "Leila Gharani",
                "author_link": "https://www.youtube.com/channel/UCJtUOos_MwJa_Ewii-R3cJA",
                "thumb_url": "https://i.ytimg.com/vi/1KimYFzET1w/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Excel Flash Fill For MAJOR Time Saving (7 Examples)",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/1KimYFzET1w?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/1KimYFzET1w",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/1KimYFzET1w"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/5F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "didn\u2019t realize that excel had this level of program synthesis behind it: "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/1KimYFzET1w",
                                "text": "https://youtu.be/1KimYFzET1w"
                            },
                            {
                                "type": "text",
                                "text": " (backstory of development in thread)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1611191896.000800",
        "reply_count": 6,
        "reply_users_count": 4,
        "latest_reply": "1611240628.017200",
        "reply_users": [
            "UHWC9PXBL",
            "UA14TGLTC",
            "U01H6UFHAE9",
            "UBKNXPBAB"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "exploding_head",
                "users": [
                    "U01H6UFHAE9"
                ],
                "count": 1
            },
            {
                "name": "star",
                "users": [
                    "USH01JEDQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "BCA540D4-BB10-4990-A018-20844E6C45D1",
        "type": "message",
        "text": "<https://youtu.be/421gU482xFE|https://youtu.be/421gU482xFE>",
        "user": "UHWC9PXBL",
        "ts": "1611191939.001200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "The story of Flash Fill and (how it shaped) me",
                "title_link": "https://youtu.be/421gU482xFE",
                "author_name": "Microsoft Research",
                "author_link": "https://www.youtube.com/user/MicrosoftResearch",
                "thumb_url": "https://i.ytimg.com/vi/421gU482xFE/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: The story of Flash Fill and (how it shaped) me",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/421gU482xFE?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/421gU482xFE",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/421gU482xFE"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p=D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://youtu.be/421gU482xFE",
                                "text": "https://youtu.be/421gU482xFE"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1611191896.000800",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "B0CB1D58-2C06-47DC-9772-5FE578E003C7",
        "type": "message",
        "text": "<https://youtu.be/dBJLmYjfcbU|https://youtu.be/dBJLmYjfcbU>",
        "user": "UHWC9PXBL",
        "ts": "1611191949.001600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "The actors behind Flash Fill",
                "title_link": "https://youtu.be/dBJLmYjfcbU",
                "author_name": "Microsoft Research",
                "author_link": "https://www.youtube.com/user/MicrosoftResearch",
                "thumb_url": "https://i.ytimg.com/vi/dBJLmYjfcbU/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: The actors behind Flash Fill",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/dBJLmYjfcbU?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/dBJLmYjfcbU",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/dBJLmYjfcbU"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hze",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://youtu.be/dBJLmYjfcbU",
                                "text": "https://youtu.be/dBJLmYjfcbU"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1611191896.000800",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "8091b102-fb0a-4c58-8df7-52c3c278bebd",
        "type": "message",
        "text": "\"Flashfill is not dynamic.\"  :cry:  So close to brilliant.  (Gharani's tutorial is remarkably clear by the way.)",
        "user": "UA14TGLTC",
        "ts": "1611194419.002100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UDeG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Flashfill is not dynamic.\"  "
                            },
                            {
                                "type": "emoji",
                                "name": "cry"
                            },
                            {
                                "type": "text",
                                "text": "  So close to brilliant.  (Gharani's tutorial is remarkably clear by the way.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1611191896.000800",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "caf97231-f2f9-49df-beef-2df6b35516b6",
        "type": "message",
        "text": "MS released it as an SDK: <https://github.com/microsoft/prose>",
        "user": "U01H6UFHAE9",
        "ts": "1611204799.002300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "microsoft/prose",
                "title_link": "https://github.com/microsoft/prose",
                "text": "Microsoft Program Synthesis using Examples SDK is a framework of technologies for the automatic generation of programs from input-output examples. This repo includes samples and sample data for the...",
                "fallback": "GitHub: microsoft/prose",
                "thumb_url": "https://avatars2.githubusercontent.com/u/6154722?s=400&v=4",
                "from_url": "https://github.com/microsoft/prose",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/microsoft/prose"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rPJY5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "MS released it as an SDK: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/microsoft/prose"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1611191896.000800",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "0e6f3a24-c572-440e-bc8f-d591a702df9a",
        "type": "message",
        "text": "I have a simple, yet annoying validation problem.  Can any of you think of a language/framework that makes validating the following sort of schema as clear (or clearer) than the English language specification?\n\nSuppose we have a playhouse with a bunch of rooms.  In each room, we want there to be a box, a ball or two, and no other toys.  If there are two balls, one should be red and the other should be blue.  Report all the rooms that have the wrong toys and exactly what's wrong.",
        "user": "UA14TGLTC",
        "ts": "1611212152.008700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WxJ7L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have a simple, yet annoying validation problem.  Can any of you think of a language/framework that makes validating the following sort of schema as clear (or clearer) than the English language specification?\n\nSuppose we have a playhouse with a bunch of rooms.  In each room, we want there to be a box, a ball or two, and no other toys.  If there are two balls, one should be red and the other should be blue.  Report all the rooms that have the wrong toys and exactly what's wrong."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1611212152.008700",
        "reply_count": 12,
        "reply_users_count": 6,
        "latest_reply": "1611282125.018800",
        "reply_users": [
            "UA14TGLTC",
            "UN9SCH5RD",
            "U013ZLJARC7",
            "UN57U8V53",
            "UHWC9PXBL",
            "U01JNTE35QS"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "58ef0db8-5524-450c-8312-bed542de75e3",
        "type": "message",
        "text": "And yes, coding this up earlier today fizzed my buzz: 34 lines, half an hour, several mistakes.",
        "user": "UA14TGLTC",
        "ts": "1611212659.008800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rlFD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And yes, coding this up earlier today fizzed my buzz: 34 lines, half an hour, several mistakes."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1611212152.008700",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "49751343-aa66-4870-bfce-0a5a733789e5",
        "type": "message",
        "text": "<@UA14TGLTC> \u2013 looks like Google's clone (\"Smart Fill\") generates a spreadsheet formula &amp; exposes it, so it is dynamic. (I can't get it to trigger at all though, so no hands-on experimentation yet.)\n\n<https://www.youtube.com/watch?v=jz690myEAsw>",
        "user": "UBKNXPBAB",
        "ts": "1611212798.009000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UBKNXPBAB",
            "ts": "1611212820.000000"
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "NEW Feature! How to Use Smart Fill in Google Sheets",
                "title_link": "https://www.youtube.com/watch?v=jz690myEAsw",
                "author_name": "Leila Gharani",
                "author_link": "https://www.youtube.com/channel/UCJtUOos_MwJa_Ewii-R3cJA",
                "thumb_url": "https://i.ytimg.com/vi/jz690myEAsw/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: NEW Feature! How to Use Smart Fill in Google Sheets",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/jz690myEAsw?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=jz690myEAsw",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=jz690myEAsw"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=J+g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " \u2013 looks like Google's clone (\"Smart Fill\") generates a spreadsheet formula & exposes it, so it is dynamic. (I can't get it to trigger at all though, so no hands-on experimentation yet.)\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=jz690myEAsw"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1611191896.000800",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "rolling_on_the_floor_laughing",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d21d522d-25df-4af4-9ee9-82cb9db10eda",
        "type": "message",
        "text": "relaxng (XML validator) has an <https://relaxng.org/compact-tutorial-20030326.html#id2815185|interleave> operator for this sort of thing. Its been a while since I last wrote a gramamr but I think it would look something like this:\n```grammar {\n  start = element house { room*}\n  room = element room { box &amp; ((red &amp; blue?) | (blue &amp; red?)) }\n  box = elem box { \"box\" }\n  red = elem ball { \"red\"}\n  blue = elem ball { \"blue\" }\n}```",
        "user": "UN9SCH5RD",
        "ts": "1611214170.009500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UN9SCH5RD",
            "ts": "1611214561.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lxh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "relaxng (XML validator) has an "
                            },
                            {
                                "type": "link",
                                "url": "https://relaxng.org/compact-tutorial-20030326.html#id2815185",
                                "text": "interleave"
                            },
                            {
                                "type": "text",
                                "text": " operator for this sort of thing. Its been a while since I last wrote a gramamr but I think it would look something like this:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "grammar {\n  start = element house { room*}\n  room = element room { box & ((red & blue?) | (blue & red?)) }\n  box = elem box { \"box\" }\n  red = elem ball { \"red\"}\n  blue = elem ball { \"blue\" }\n}"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1611212152.008700",
        "parent_user_id": "UA14TGLTC",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U019CPED6T1",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "43d1d9e5-5515-4a63-b2fb-3c41438ac986",
        "type": "message",
        "text": "or else any other grammar would help (ANTLR, PEG, etc):\n```grammar = \"house\" room*\nroom = \"box\" (\"red ball\" \"blue ball\"? | \"blue ball\" \"red ball\"?)```",
        "user": "UN9SCH5RD",
        "ts": "1611214214.009900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UN9SCH5RD",
            "ts": "1611214612.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vZ19O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "or else any other grammar would help (ANTLR, PEG, etc):\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "grammar = \"house\" room*\nroom = \"box\" (\"red ball\" \"blue ball\"? | \"blue ball\" \"red ball\"?)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1611212152.008700",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "8f56a382-0435-4535-9e91-d247865f4562",
        "type": "message",
        "text": "I think it is useful to think in terms of grammars because then becomes obvious when the thing you are trying to validate is not context free",
        "user": "UN9SCH5RD",
        "ts": "1611214240.010100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jC25",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think it is useful to think in terms of grammars because then becomes obvious when the thing you are trying to validate is not context free"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1611212152.008700",
        "parent_user_id": "UA14TGLTC",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "a0c408ed-d8a4-495a-b2ac-19e73a4f564a",
        "type": "message",
        "text": "in XML world, once you need to validate something were a context free grammar is not enough, you reach for <https://en.wikipedia.org/wiki/Schematron#Sample_rule|Schematron>.",
        "user": "UN9SCH5RD",
        "ts": "1611214303.010300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PLzJP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in XML world, once you need to validate something were a context free grammar is not enough, you reach for "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Schematron#Sample_rule",
                                "text": "Schematron"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1611212152.008700",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "81e7de12-3032-4042-a62c-48e82dc497b3",
        "type": "message",
        "text": "hah had to edit my grammars. Not sure if they match your requirements exactly but you get the idea :stuck_out_tongue:",
        "user": "UN9SCH5RD",
        "ts": "1611214632.010800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pLxtc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "hah had to edit my grammars. Not sure if they match your requirements exactly but you get the idea "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1611212152.008700",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "e524f243-436b-4c08-83ae-48e6bc55d1e6",
        "type": "message",
        "text": "+1 <@UN9SCH5RD>'s suggestion of grammars, to which I'd add any other automata generating-abstractions. For example, regular expressions over the domain of toys (as opposed to the domain of characters).",
        "user": "U013ZLJARC7",
        "ts": "1611217948.011000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N7c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "+1 "
                            },
                            {
                                "type": "user",
                                "user_id": "UN9SCH5RD"
                            },
                            {
                                "type": "text",
                                "text": "'s suggestion of grammars, to which I'd add any other automata generating-abstractions. For example, regular expressions over the domain of toys (as opposed to the domain of characters)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1611212152.008700",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "2F46D033-27B3-4F6B-AA9B-85DCAEDFA4AB",
        "type": "message",
        "text": "This writeup expresses the cleanest approach I know of: <https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/|https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/>",
        "user": "UN57U8V53",
        "ts": "1611230334.012400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Parse, don\u2019t validate",
                "title_link": "https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/",
                "text": "Historically, I\u2019ve struggled to find a concise, simple way to explain what it means to practice type-driven design. Too often, when someone asks me \u201cHow did you come up with this approach?\u201d I find I can\u2019t give them a satisfying answer. I know it didn\u2019t ju...",
                "fallback": "Parse, don\u2019t validate",
                "from_url": "https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/",
                "service_name": "lexi-lambda.github.io",
                "id": 1,
                "original_url": "https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YNP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This writeup expresses the cleanest approach I know of: "
                            },
                            {
                                "type": "link",
                                "url": "https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/",
                                "text": "https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1611212152.008700",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "5AAEB671-E0F0-4A09-9F65-A2E1D79314BB",
        "type": "message",
        "text": "the trickiest part of this is the \u201creport all rooms that have the wrong toys and exactly what\u2019s wrong\u201d\u2014i\u2019d be tempted to reach for the really dynamic grammars that let you pretty easily insert whatever side effects/logic you want, like OMeta/ohm or rebol/red\u2019s parse dialect. do you just want console output or structured data about the errors?",
        "user": "UHWC9PXBL",
        "ts": "1611240042.016100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g6y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the trickiest part of this is the \u201creport all rooms that have the wrong toys and exactly what\u2019s wrong\u201d\u2014i\u2019d be tempted to reach for the really dynamic grammars that let you pretty easily insert whatever side effects/logic you want, like OMeta/ohm or rebol/red\u2019s parse dialect. do you just want console output or structured data about the errors?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1611212152.008700",
        "parent_user_id": "UA14TGLTC",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "DE15839E-2359-4B05-85D1-534E00FDC794",
        "type": "message",
        "text": "found another more detailed video: the prose group seems do be doing awesome stuff! <https://youtu.be/X1YXge3C8RI|https://youtu.be/X1YXge3C8RI>",
        "user": "UHWC9PXBL",
        "ts": "1611240628.017200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Heapcon 2019 | Automated Program Generation from Input-Output Examples - Sumit Gulwani",
                "title_link": "https://youtu.be/X1YXge3C8RI",
                "author_name": "Heapspace",
                "author_link": "https://www.youtube.com/c/HeapspaceRsZajednica",
                "thumb_url": "https://i.ytimg.com/vi/X1YXge3C8RI/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Heapcon 2019 | Automated Program Generation from Input-Output Examples - Sumit Gulwani",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/X1YXge3C8RI?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/X1YXge3C8RI",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/X1YXge3C8RI"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B2qWV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "found another more detailed video: the prose group seems do be doing awesome stuff! "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/X1YXge3C8RI",
                                "text": "https://youtu.be/X1YXge3C8RI"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1611191896.000800",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U01H6UFHAE9",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "3735434f-3012-4994-ae28-5bdd04daffc5",
        "type": "message",
        "text": "After someone asked in private what I was on about up above, I offer as an example this \"regular expressions over sequences\" library in Clojure: <https://github.com/cgrand/seqexp> The relationship between <https://en.wikipedia.org/wiki/Introduction_to_Automata_Theory,_Languages,_and_Computation|formal languages and automata> is a worthwhile area of computer science study for practical minded practitioners. :slightly_smiling_face:",
        "user": "U013ZLJARC7",
        "ts": "1611244481.017600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "cgrand/seqexp",
                "title_link": "https://github.com/cgrand/seqexp",
                "text": "Regexp for sequences! Contribute to cgrand/seqexp development by creating an account on GitHub.",
                "fallback": "GitHub: cgrand/seqexp",
                "thumb_url": "https://avatars.githubusercontent.com/u/47025?s=400&v=4",
                "from_url": "https://github.com/cgrand/seqexp",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/cgrand/seqexp"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fA4x+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "After someone asked in private what I was on about up above, I offer as an example this \"regular expressions over sequences\" library in Clojure: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/cgrand/seqexp"
                            },
                            {
                                "type": "text",
                                "text": " The relationship between "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Introduction_to_Automata_Theory,_Languages,_and_Computation",
                                "text": "formal languages and automata"
                            },
                            {
                                "type": "text",
                                "text": " is a worthwhile area of computer science study for practical minded practitioners. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1611212152.008700",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "8fc32ecc-dd36-4764-8411-f14b5806e960",
        "type": "message",
        "text": "Wouldnt a datalog or mini-kanren style approach be useful?",
        "user": "U01JNTE35QS",
        "ts": "1611261684.018000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kcwM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wouldnt a datalog or mini-kanren style approach be useful?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1611212152.008700",
        "parent_user_id": "UA14TGLTC",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    }
]