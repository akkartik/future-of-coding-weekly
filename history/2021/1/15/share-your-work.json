[
    {
        "client_msg_id": "5e2e423a-5c4f-4899-9a36-657733b71121",
        "type": "message",
        "text": "Err... re-reading this thread, I think I should make it clear that I was NOT suggesting a spreadsheet-like editor as a way of building concepts. I was saying that the editor presented in the video is confusing, and that a separate, predictable way of visualizing the data store wold help ameliorate that problem. For example, any time the user sees data that looks somehow \"wrong\", the user needs to be able to figure out whether it is wrong because (A) the data is actually wrong in the database or (B) a concept is misconfigured or something else, like, they're looking at a different record than they thought they were. If the database is invisible, the user will have a harder time understanding what's going on.",
        "user": "UD6EXQVM0",
        "ts": "1610698252.000300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1610698635.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mOGH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Err... re-reading this thread, I think I should make it clear that I was NOT suggesting a spreadsheet-like editor as a way of building concepts. I was saying that the editor presented in the video is confusing, and that a separate, predictable way of visualizing the data store wold help ameliorate that problem. For example, any time the user sees data that looks somehow \"wrong\", the user needs to be able to figure out whether it is wrong because (A) the data is actually wrong in the database or (B) a concept is misconfigured or something else, like, they're looking at a different record than they thought they were. If the database is invisible, the user will have a harder time understanding what's going on."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591918996.315500",
        "parent_user_id": "UP7N4QVK2"
    },
    {
        "client_msg_id": "3023da71-d418-425a-8f0b-fa04f3f393f2",
        "type": "message",
        "text": "This is one of the many things text editors don't do that seem obvious to me. Others include:\n\u2022 Elastic tabstops (makes proportional fonts more usable in code)\n\u2022 respecting the local whitespace style when inserting newlines (i.e. if I press enter and the previous line starts with 2 tabs followed by 8 spaces, the new line should start with 2 tabs followed by 8 spaces)\n\u2022 highlighting definitions differently than usages, e.g. the \"x\" in \"int x\" might have an outline around it while the \"x\" in \"x++\" would not. As another example, there should be a horizontal line across the editor above every top-level function and class, so that it is easier to see where each new function/class begins. Also, when scrolling down into a large class/function, keep the class/function header visible on the top line of the editor so I can always see at a glance what context I am in\n\u2022 using colors primarily to categorize instead of just representing syntax - e.g. different colors for standard library functions, functions in our Backend API, and functions in the Frontend API. Scratch figured this one out. Multiple categorizations I can switch between with hotkeys might be useful.\n\u2022 Allowing emojis/symbols to be attached to specific entities of interest so it is easier to see at a glance when one of those entities is being used, e.g. attach \u2766 to Console.WriteLine so it \"jumps out\" at me more. Alternately, could use symbols to abbreviate long-winded code, e.g. hiding Console.WriteLine and showing \u2766 in its place.\n\u2022 Defining language keywords that attach to statements and cause them to be highlighted/enlarged or dimmed/shrunk in the editor. Often certain \"key\" parts of a function or class are worth highlighting, and other parts that are pure incidental complexity (e.g. writing a log message or verifying a security flag) and there should be a way to emphasize one and de-emphasize the other.",
        "user": "UD6EXQVM0",
        "ts": "1610719440.000700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1610720582.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Dg/J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is one of the many things text editors don't do that seem obvious to me. Others include:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Elastic tabstops (makes proportional fonts more usable in code)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "respecting the local whitespace style when inserting newlines (i.e. if I press enter and the previous line starts with 2 tabs followed by 8 spaces, the new line should start with 2 tabs followed by 8 spaces)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "highlighting definitions differently than usages, e.g. the \"x\" in \"int x\" might have an outline around it while the \"x\" in \"x++\" would not. As another example, there should be a horizontal line across the editor above every top-level function and class, so that it is easier to see where each new function/class begins. Also, when scrolling down into a large class/function, keep the class/function header visible on the top line of the editor so I can always see at a glance what context I am in"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "using colors primarily to categorize instead of just representing syntax - e.g. different colors for standard library functions, functions in our Backend API, and functions in the Frontend API. Scratch figured this one out. Multiple categorizations I can switch between with hotkeys might be useful."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Allowing emojis/symbols to be attached to specific entities of interest so it is easier to see at a glance when one of those entities is being used, e.g. attach \u2766 to Console.WriteLine so it \"jumps out\" at me more. Alternately, could use symbols to abbreviate long-winded code, e.g. hiding Console.WriteLine and showing \u2766 in its place."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Defining language keywords that attach to statements and cause them to be highlighted/enlarged or dimmed/shrunk in the editor. Often certain \"key\" parts of a function or class are worth highlighting, and other parts that are pure incidental complexity (e.g. writing a log message or verifying a security flag) and there should be a way to emphasize one and de-emphasize the other."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1594221387.371800",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "1CD38ECA-2A46-41D9-BDB4-A172A73F50E9",
        "type": "message",
        "text": "The feature clause feels reminiscent of Darklangs feature flags as a live coding update. This is very interesting so far, nice work",
        "user": "U019CPED6T1",
        "ts": "1610727120.002800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MSjM/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The feature clause feels reminiscent of Darklangs feature flags as a live coding update. This is very interesting so far, nice work"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4"
    },
    {
        "client_msg_id": "CDB6EB07-C1FF-44D0-B682-D10FF5038206",
        "type": "message",
        "text": "After more reading, I believe I fall in the target audience for this language and am growing more excited with each line",
        "user": "U019CPED6T1",
        "ts": "1610727372.003900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TWO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "After more reading, I believe I fall in the target audience for this language and am growing more excited with each line"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4"
    },
    {
        "client_msg_id": "4bcdd093-c04b-4c2d-a7f6-44e8eded32d8",
        "type": "message",
        "text": "One final comment. The free functional syntax reminds me a LOT of Pure's main selling point of term rewriting. It feels like an underrated aspect of programming that allows for a really concise representation",
        "user": "U019CPED6T1",
        "ts": "1610727527.004100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SOa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One final comment. The free functional syntax reminds me a LOT of Pure's main selling point of term rewriting. It feels like an underrated aspect of programming that allows for a really concise representation"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4"
    },
    {
        "client_msg_id": "92581d48-0cf0-480f-936f-1bf7238cb1cc",
        "type": "message",
        "text": "Our new code base isn't yet our main branch, but we are getting close and wanted to share something early I call \"If Spreadsheets and Programming Languages had a baby\" <https://www.youtube.com/watch?v=vn2aJA5ANUc>",
        "user": "UMVFWPZ36",
        "ts": "1610747848.005700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "If Spreadsheets and Programming Languages had a baby",
                "title_link": "https://www.youtube.com/watch?v=vn2aJA5ANUc",
                "author_name": "Breck Yunits",
                "author_link": "https://www.youtube.com/user/kcerb7",
                "thumb_url": "https://i.ytimg.com/vi/vn2aJA5ANUc/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: If Spreadsheets and Programming Languages had a baby",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/vn2aJA5ANUc?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=vn2aJA5ANUc",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=vn2aJA5ANUc"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nf/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Our new code base isn't yet our main branch, but we are getting close and wanted to share something early I call \"If Spreadsheets and Programming Languages had a baby\" "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=vn2aJA5ANUc"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610747848.005700",
        "reply_count": 14,
        "reply_users_count": 5,
        "latest_reply": "1610866285.013100",
        "reply_users": [
            "U01H6UFHAE9",
            "BEYLABLRH",
            "UCUSW7WVD",
            "UMVFWPZ36",
            "UJBAJNFLK"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "USH01JEDQ",
                    "UEZQXJK9V",
                    "UJBAJNFLK"
                ],
                "count": 3
            },
            {
                "name": "+1",
                "users": [
                    "U01H6UFHAE9"
                ],
                "count": 1
            }
        ]
    }
]