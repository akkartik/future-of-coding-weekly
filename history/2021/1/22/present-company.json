[
    {
        "client_msg_id": "e5dadbc7-2171-45a6-9132-00da74476398",
        "type": "message",
        "text": "Ah <@UHWC9PXBL>, OMeta haven't heard that in a while!  Yes friends, an important part here is the detailed error reporting.  I'll need to read Parse, don't validate <@UN57U8V53>.  Seems many non-trivial programming problems have a parsing (state machine) feel, and at one level we have good parsing tools though they seem to be underutilized in practice.  One interesting thing here that counts matter and order does not.  (Of course, one quick fix is to sort the list of toys in a room and then match on that sequence.)\n\nAs for error reporting, here's an idea.  Imagine an interactive grammar generating tool.  We start with golden path of validity (imagine a sorted list), something like:\n```Room = \"box\" (\"blue ball\" \"red ball\" | Color \" ball\")```\nThen the tool would propose invalid sequences for which we have to generate error description productions.  That would be neat.  I suppose other perennial parsing problems are tokenizing nicely so that you can operate on higher-level constructs, and I mean once you are acting on tree-ish data rather than streams, it begins to feel like regular functional programming...",
        "user": "UA14TGLTC",
        "ts": "1611282125.018800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lry4E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah "
                            },
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": ", OMeta haven't heard that in a while!  Yes friends, an important part here is the detailed error reporting.  I'll need to read Parse, don't validate "
                            },
                            {
                                "type": "user",
                                "user_id": "UN57U8V53"
                            },
                            {
                                "type": "text",
                                "text": ".  Seems many non-trivial programming problems have a parsing (state machine) feel, and at one level we have good parsing tools though they seem to be underutilized in practice.  One interesting thing here that counts matter and order does not.  (Of course, one quick fix is to sort the list of toys in a room and then match on that sequence.)\n\nAs for error reporting, here's an idea.  Imagine an interactive grammar generating tool.  We start with golden path of validity (imagine a sorted list), something like:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Room = \"box\" (\"blue ball\" \"red ball\" | Color \" ball\")"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Then the tool would propose invalid sequences for which we have to generate error description productions.  That would be neat.  I suppose other perennial parsing problems are tokenizing nicely so that you can operate on higher-level constructs, and I mean once you are acting on tree-ish data rather than streams, it begins to feel like regular functional programming..."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1611212152.008700",
        "parent_user_id": "UA14TGLTC"
    }
]