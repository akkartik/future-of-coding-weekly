[
    {
        "client_msg_id": "9a5b974e-7e85-4b7f-b096-59129c205e86",
        "type": "message",
        "text": "Thanks <@UMVFWPZ36> , your explanation helps a bit but also raises more questions. It makes perfect sense to have a grid in which each cell is the root of a tree, but I have no idea of how this would be expressed in textual tree notation. Is there a formal grammar somewhere?",
        "user": "UJBAJNFLK",
        "ts": "1611049782.022800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M/P3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UMVFWPZ36"
                            },
                            {
                                "type": "text",
                                "text": " , your explanation helps a bit but also raises more questions. It makes perfect sense to have a grid in which each cell is the root of a tree, but I have no idea of how this would be expressed in textual tree notation. Is there a formal grammar somewhere?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610747848.005700",
        "parent_user_id": "UMVFWPZ36",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMVFWPZ36"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "5dcc3da0-0c89-4347-a262-fb9298b17d75",
        "type": "message",
        "text": "<@U019CPED6T1> thanks for reading ! I'm working on a workflow demo and will record one as soon as humanly possible :slightly_smiling_face:",
        "user": "U01JTCA3KS4",
        "ts": "1611076377.023000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eoNI3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U019CPED6T1"
                            },
                            {
                                "type": "text",
                                "text": " thanks for reading ! I'm working on a workflow demo and will record one as soon as humanly possible "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1609998978.426800",
        "parent_user_id": "U01JTCA3KS4",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U019CPED6T1"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e1f38a92-c524-4076-b964-e88ad8ad8412",
        "type": "message",
        "text": "Tree-sitter is awesome... I was thinking that at some point I would try to figure out how I can take advantage of the tree-sitter parsers in order to translate almost any language into Loyc trees.\n\nI'm not sure if I had seen Babelfish before, but I am immediately confused when I look at their \"<https://github.com/bblfsh/documentation/blob/master/uast/representation-v2.md|universal AST>\" because the core concept it appears to be almost identical to JSON, so I can't guess what the UAST of `Foo(2+2)` might be. The Loyc tree of `Foo(2+2)` is, of course, normally expressed simply as `Foo(2+2)` which is a call to Foo with one argument, and a call to `'+` with two arguments.",
        "user": "UD6EXQVM0",
        "ts": "1611081205.023300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "bblfsh/documentation",
                "title_link": "https://github.com/bblfsh/documentation/blob/master/uast/representation-v2.md",
                "text": "Babelfish documentation (GitBook). Contribute to bblfsh/documentation development by creating an account on GitHub.",
                "fallback": "GitHub: bblfsh/documentation",
                "thumb_url": "https://avatars2.githubusercontent.com/u/25795418?s=400&v=4",
                "from_url": "https://github.com/bblfsh/documentation/blob/master/uast/representation-v2.md",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/bblfsh/documentation/blob/master/uast/representation-v2.md"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p4s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tree-sitter is awesome... I was thinking that at some point I would try to figure out how I can take advantage of the tree-sitter parsers in order to translate almost any language into Loyc trees.\n\nI'm not sure if I had seen Babelfish before, but I am immediately confused when I look at their \""
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/bblfsh/documentation/blob/master/uast/representation-v2.md",
                                "text": "universal AST"
                            },
                            {
                                "type": "text",
                                "text": "\" because the core concept it appears to be almost identical to JSON, so I can't guess what the UAST of "
                            },
                            {
                                "type": "text",
                                "text": "Foo(2+2)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " might be. The Loyc tree of "
                            },
                            {
                                "type": "text",
                                "text": "Foo(2+2)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is, of course, normally expressed simply as "
                            },
                            {
                                "type": "text",
                                "text": "Foo(2+2)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " which is a call to Foo with one argument, and a call to "
                            },
                            {
                                "type": "text",
                                "text": "'+",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with two arguments."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601136299.009000",
        "parent_user_id": "UPVBV34EL"
    },
    {
        "client_msg_id": "787eb852-3993-443c-b863-74db22a39737",
        "type": "message",
        "text": "I also saw tree-hugger at some point - ahh yes I clapped for <https://medium.com/codist-ai/introducing-tree-hugger-source-code-mining-for-human-b5fcd31bef55|your Medium article> - but I'm not sure if I can or should utilize it in some way, given that my codebase is stuck on .NET for the time being.",
        "user": "UD6EXQVM0",
        "ts": "1611081596.023600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1611081894.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nb8R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also saw tree-hugger at some point - ahh yes I clapped for "
                            },
                            {
                                "type": "link",
                                "url": "https://medium.com/codist-ai/introducing-tree-hugger-source-code-mining-for-human-b5fcd31bef55",
                                "text": "your Medium article"
                            },
                            {
                                "type": "text",
                                "text": " - but I'm not sure if I can or should utilize it in some way, given that my codebase is stuck on .NET for the time being."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601136299.009000",
        "parent_user_id": "UPVBV34EL"
    }
]