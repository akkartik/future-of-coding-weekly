[
    {
        "client_msg_id": "b72aaea0-6a56-428e-ae9e-8f7a53554bd2",
        "type": "message",
        "text": "<@UHWC9PXBL> I fully agree. Laptops, tablets and smartphones (which make up most of non-tech people's devices) aren't well suited for really persistent and safe data storage. Limitations are power-consumption, size / upgradability, availability, risk of loss, ...\nI've been thinking about what I've been calling Personal / End-User Home Servers, which is probably very close to what you're describing. This would be a device that's as easy to set up as an Amazon Echo and serves as the central place where personal data / communication is handled.\nThis topic is definitely related. Ideally, it wouldn't be required though. I imagine a distributed system that'd also work without a \"server\". For example, I'd like to be able to use data sync &amp; replication when only having my smartphone and laptop connected. This would lower the barrier of entry (no need to buy and set up another device to get started) of the system, but you'd be able to improve capacity, availability, etc by connecting such a home server device.",
        "user": "UAL7940NM",
        "ts": "1610260690.492700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qMoj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " I fully agree. Laptops, tablets and smartphones (which make up most of non-tech people's devices) aren't well suited for really persistent and safe data storage. Limitations are power-consumption, size / upgradability, availability, risk of loss, ...\nI've been thinking about what I've been calling Personal / End-User Home Servers, which is probably very close to what you're describing. This would be a device that's as easy to set up as an Amazon Echo and serves as the central place where personal data / communication is handled.\nThis topic is definitely related. Ideally, it wouldn't be required though. I imagine a distributed system that'd also work without a \"server\". For example, I'd like to be able to use data sync & replication when only having my smartphone and laptop connected. This would lower the barrier of entry (no need to buy and set up another device to get started) of the system, but you'd be able to improve capacity, availability, etc by connecting such a home server device."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610201089.487900",
        "parent_user_id": "UAL7940NM",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0823a554-cd30-4fe7-a0e3-8c04a26edaf4",
        "type": "message",
        "text": "<@UCUSW7WVD> That's right, confidence that the data you deleted is really gone is important too.\n\nI would consider incrementability (is that even a word?!) a performance optimization. Conceptually, it doesn't matter whether backups or updates are incremental or not, right? Accidental deletion can be prevented by keeping a history (which might be backup snapshots, file system journals, git, ...), but that's independent of incrementability. Incremental updates will become very important in the implementation though, that's right.\n\nThat's a good point! One option is to have the current state stored along with increments what contain the differences \"going backwards\". More recent versions (which are more likely to be accessed) are cheaper to get this way. I'm not sure, but I think git uses something like this internally.",
        "user": "UAL7940NM",
        "ts": "1610261713.492900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cy0s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " That's right, confidence that the data you deleted is really gone is important too.\n\nI would consider incrementability (is that even a word?!) a performance optimization. Conceptually, it doesn't matter whether backups or updates are incremental or not, right? Accidental deletion can be prevented by keeping a history (which might be backup snapshots, file system journals, git, ...), but that's independent of incrementability. Incremental updates will become very important in the implementation though, that's right.\n\nThat's a good point! One option is to have the current state stored along with increments what contain the differences \"going backwards\". More recent versions (which are more likely to be accessed) are cheaper to get this way. I'm not sure, but I think git uses something like this internally."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610201089.487900",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "1db89fe6-81f5-43d4-a74b-b5726510de7e",
        "type": "message",
        "text": "<@UAL7940NM> First of all, your description of the status quo seems correct and complete. As someone trying to help non-techies (also called \"family\") manage their electronic data, I can only confirm that there is no good solution today.\n\nOne aspect I wonder about is the conflation of data storage, data syndication/synchronization, and backup. There are decent solutions to each aspect, but non for the combination, which is however exactly what matters for end users. It's perhaps the syndication'/synchronization aspect that is hardest to solve because it is inherently cross-platform and today's tech world is more oriented towards platform domination than cross-platform mediation.",
        "user": "UJBAJNFLK",
        "ts": "1610272062.493100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L=BU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAL7940NM"
                            },
                            {
                                "type": "text",
                                "text": " First of all, your description of the status quo seems correct and complete. As someone trying to help non-techies (also called \"family\") manage their electronic data, I can only confirm that there is no good solution today.\n\nOne aspect I wonder about is the conflation of data storage, data syndication/synchronization, and backup. There are decent solutions to each aspect, but non for the combination, which is however exactly what matters for end users. It's perhaps the syndication'/synchronization aspect that is hardest to solve because it is inherently cross-platform and today's tech world is more oriented towards platform domination than cross-platform mediation."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610201089.487900",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "0ec52d24-fb91-46b2-8c0f-ad7acd1e706c",
        "type": "message",
        "text": "<@UJBAJNFLK> Thanks!\n\nThat's right. I also noticed that I was mixing synchronization, storage and backup in the post during proofreading. It's pretty hard to distinguish these aspects though. Synchronizing data between devices (when done correctly) also serves as a backup and can improve data availability, regular backups give you history which is also part of many file systems, etc.. Thinking about these aspects from the start will probably lead to a simple solution that performs well on all use-cases.\nSynchronization is indeed a tough problem. I hope that a simple data model and great UX will get me pretty far.",
        "user": "UAL7940NM",
        "ts": "1610286633.493300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+UxSH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " Thanks!\n\nThat's right. I also noticed that I was mixing synchronization, storage and backup in the post during proofreading. It's pretty hard to distinguish these aspects though. Synchronizing data between devices (when done correctly) also serves as a backup and can improve data availability, regular backups give you history which is also part of many file systems, etc.. Thinking about these aspects from the start will probably lead to a simple solution that performs well on all use-cases.\nSynchronization is indeed a tough problem. I hope that a simple data model and great UX will get me pretty far."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610201089.487900",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "9652B37D-ACB8-4340-8ED7-23E02F4F068B",
        "type": "message",
        "text": "<@UAL7940NM> yeah you hit the nail on the head for the kind of thing i was envisioning. the biggest problem is honestly port forwarding for end users. i think that kind of thing could be prototyped on a raspberry pie and use something like hypercore as the storage engine",
        "user": "UHWC9PXBL",
        "ts": "1610309558.495600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xFl9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAL7940NM"
                            },
                            {
                                "type": "text",
                                "text": " yeah you hit the nail on the head for the kind of thing i was envisioning. the biggest problem is honestly port forwarding for end users. i think that kind of thing could be prototyped on a raspberry pie and use something like hypercore as the storage engine"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610201089.487900",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "19c26c14-dc9d-4873-b375-810a849ce1c8",
        "type": "message",
        "text": "<@UHWC9PXBL> there are a couple of options, upnp, hole punching, etc. I'm not an expert but other p2p software seems to have solved this already. I was thinking of using libp2p (which is for example powering IPFS), but hypercore looks interesting too. I'll check it out, thanks :-)",
        "user": "UAL7940NM",
        "ts": "1610312013.495800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Rw7H=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " there are a couple of options, upnp, hole punching, etc. I'm not an expert but other p2p software seems to have solved this already. I was thinking of using libp2p (which is for example powering IPFS), but hypercore looks interesting too. I'll check it out, thanks :-)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610201089.487900",
        "parent_user_id": "UAL7940NM"
    }
]