[
    {
        "client_msg_id": "1a3bf026-d483-4d6b-bb37-93d92aa08de5",
        "type": "message",
        "text": "*Perhaps all programming is distributed programming?*\n\nThis little thread is melting my mind: <https://queer.af/@erincandescent/105562630364133151>\n\nMy mindset for the past 5 years has been that UX = gradual teaching on demand = never lying to the end-user, which implies never telling big lies, only little white lies that are easy to push aside to learn more. But at the heart of everything I did is the big lie that I'm programming \"a\" single unitary computer.\n\nI've always known about many little controllers in our computers, but my mind treated them as exceptions. I think society has this consensual hallucination that software runs \"on top of\" hardware. The past six months (starting from my old realizations about BIOS: <https://futureofcoding.slack.com/archives/C0120A3L30R/p1599112907014300>) have been a slow, painful journey to come to grips with this fact.\n\nBat signal to <@UJKC8B0QN>; this is fodder for your old thread from May 2019 that most software is built across collections of computers. <@UJM9NG84Q> too had a post around the same time that messaging and communication are all, that decomposition is trivial, that focusing on \"programming\" is often a modernist approach. If we started from the assumption that \"coding\" is about orchestrating groups of computers, what would we do differently? What does the UX for programming look like if you also have to specify where computations happen? It seems to make Bret Victor's problem much harder. But following Alan Kay, perhaps we don't yet have the \"hardest and most profound thing to then build every easier thing out of\".\n\nI'm also thinking about Dave Ackley's <https://movablefeastmachine.org>. He started out in security, so he likely knew all this when he started out on his project. You can't secure your computing substrate if you aren't thinking about 90% of the computers in it.\n\nAnyways, likely the fever dream will break in a day or two and I'll go back to ~lying to myself~ programming my little computer. But I thought I'd throw this out while it's fresh.",
        "user": "UCUSW7WVD",
        "ts": "1610778816.014400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1610778843.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9WHc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perhaps all programming is distributed programming?",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nThis little thread is melting my mind: "
                            },
                            {
                                "type": "link",
                                "url": "https://queer.af/@erincandescent/105562630364133151"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMy mindset for the past 5 years has been that UX = gradual teaching on demand = never lying to the end-user, which implies never telling big lies, only little white lies that are easy to push aside to learn more. But at the heart of everything I did is the big lie that I'm programming \"a\" single unitary computer.\n\nI've always known about many little controllers in our computers, but my mind treated them as exceptions. I think society has this consensual hallucination that software runs \"on top of\" hardware. The past six months (starting from my old realizations about BIOS: "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C0120A3L30R/p1599112907014300"
                            },
                            {
                                "type": "text",
                                "text": ") have been a slow, painful journey to come to grips with this fact.\n\nBat signal to "
                            },
                            {
                                "type": "user",
                                "user_id": "UJKC8B0QN"
                            },
                            {
                                "type": "text",
                                "text": "; this is fodder for your old thread from May 2019 that most software is built across collections of computers. "
                            },
                            {
                                "type": "user",
                                "user_id": "UJM9NG84Q"
                            },
                            {
                                "type": "text",
                                "text": " too had a post around the same time that messaging and communication are all, that decomposition is trivial, that focusing on \"programming\" is often a modernist approach. If we started from the assumption that \"coding\" is about orchestrating groups of computers, what would we do differently? What does the UX for programming look like if you also have to specify where computations happen? It seems to make Bret Victor's problem much harder. But following Alan Kay, perhaps we don't yet have the \"hardest and most profound thing to then build every easier thing out of\".\n\nI'm also thinking about Dave Ackley's "
                            },
                            {
                                "type": "link",
                                "url": "https://movablefeastmachine.org"
                            },
                            {
                                "type": "text",
                                "text": ". He started out in security, so he likely knew all this when he started out on his project. You can't secure your computing substrate if you aren't thinking about 90% of the computers in it.\n\nAnyways, likely the fever dream will break in a day or two and I'll go back to "
                            },
                            {
                                "type": "text",
                                "text": "lying to myself",
                                "style": {
                                    "strike": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " programming my little computer. But I thought I'd throw this out while it's fresh."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610778816.014400",
        "reply_count": 9,
        "reply_users_count": 7,
        "latest_reply": "1610956904.029300",
        "reply_users": [
            "UCGAK10LS",
            "U5STGTB3J",
            "U01661S9F34",
            "U8A5MS6R1",
            "UHWC9PXBL",
            "UJBAJNFLK",
            "UCUSW7WVD"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "U01661S9F34"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7566d9ae-3f87-40f5-bc45-6e044419f739",
        "type": "message",
        "text": "I'm definitely of the opinion that distribution should be built into the semantics of every programming language (actors etc.), rather than exposed as a library. That suggestion probably isn't too controversial within this community :slightly_smiling_face:",
        "user": "UCGAK10LS",
        "ts": "1610781197.014800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1610832967.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rma",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm definitely of the opinion that distribution should be built into the semantics of every programming language (actors etc.), rather than exposed as a library. That suggestion probably isn't too controversial within this community "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610778816.014400",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "U019CPED6T1"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "14f94461-04cd-47d5-9333-85bd5d7d2bd3",
        "type": "message",
        "text": "Hi there! Here's part two of my \"Data Storage for Humans\" series:\n<https://fkohlgrueber.github.io/blog/data-storage-part-2/>",
        "user": "UAL7940NM",
        "ts": "1610799148.017200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Felix\u2019s Blog",
                "title": "Data Storage for Humans - Part 2: Requirement implications",
                "title_link": "https://fkohlgrueber.github.io/blog/data-storage-part-2/",
                "text": "This is the second part of my series \u201cData Storage for Humans\u201d. In the first part, I analyzed different options regular users have for storing their data and the problems these options have. I then concluded by providing the following requirements for a \u201creally good solution\u201d. In this second part, I want to take a look at how these requirements affect possible solutions.",
                "fallback": "Felix\u2019s Blog: Data Storage for Humans - Part 2: Requirement implications",
                "ts": 1610793956,
                "from_url": "https://fkohlgrueber.github.io/blog/data-storage-part-2/",
                "id": 1,
                "original_url": "https://fkohlgrueber.github.io/blog/data-storage-part-2/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Awn6b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi there! Here's part two of my \"Data Storage for Humans\" series:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://fkohlgrueber.github.io/blog/data-storage-part-2/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610799148.017200",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1610799235.017400",
        "reply_users": [
            "UAL7940NM"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "216dff8e-d137-4229-88f5-884d7bced7b3",
        "type": "message",
        "text": "As always, I'm looking forward to feedback and great discussions :+1:",
        "user": "UAL7940NM",
        "ts": "1610799235.017400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4AC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As always, I'm looking forward to feedback and great discussions "
                            },
                            {
                                "type": "emoji",
                                "name": "+1"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610799148.017200",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "fa8e19a6-3896-4362-bd25-4c72591eb12d",
        "type": "message",
        "text": "There are all the little systems inside our computers that are somewhat hidden from us, because we usually \u2014 even as developers \u2014 don't get to access them directly. The system takes care of that for us, and we get to benefit from faster image (de)compression or video de-/encoding or disk encryption etc. with API calls that look just like any other API call, but hook into these other processing units offloading some work from the CPU.\n\nBut that's just half the picture. We also more and more program different processors explicitly, with completely different paradigms: CPUs, GPUs, TPUs, \u2026 If your OS lights up pixels on a screen, but doesn't utilize the dedicated graphics processing capabilities of your hardware, you are not using your system \"correctly\". Or at least as effectively and likely also efficiently as you could (should?).\n\nAnd it's only going to get worse, because this complexity is not going to go away. Now with Intel under extreme pressure the times of standardization are over. Sure, everybody will have SoCs soon, and it looks like a form of simplification. But market forces push everyone to differentiate, which will only lead to more complexity on that level. There might be a swing back to the opposite in the far future, when the landscape is much more fragmented than it is today and the commercial benefits of diversification have been used up so that consolidation can kick in again. Until then, it's going to be messy for a while.\n\nI wonder if projects with the goal of simplifying the stack are better off building against a virtualization layer instead of trying to keep up with the further diversifying landscape of hardware architectures. Basically, bring your own (virtual) machine (and perhaps even instruction set), and let the virtualization/emulation figure out translation to actual hardware instructions. You'll likely do exactly that for testing already anyway.",
        "user": "U5STGTB3J",
        "ts": "1610800535.017600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=Pu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are all the little systems inside our computers that are somewhat hidden from us, because we usually \u2014 even as developers \u2014 don't get to access them directly. The system takes care of that for us, and we get to benefit from faster image (de)compression or video de-/encoding or disk encryption etc. with API calls that look just like any other API call, but hook into these other processing units offloading some work from the CPU.\n\nBut that's just half the picture. We also more and more program different processors explicitly, with completely different paradigms: CPUs, GPUs, TPUs, \u2026 If your OS lights up pixels on a screen, but doesn't utilize the dedicated graphics processing capabilities of your hardware, you are not using your system \"correctly\". Or at least as effectively and likely also efficiently as you could (should?).\n\nAnd it's only going to get worse, because this complexity is not going to go away. Now with Intel under extreme pressure the times of standardization are over. Sure, everybody will have SoCs soon, and it looks like a form of simplification. But market forces push everyone to differentiate, which will only lead to more complexity on that level. There might be a swing back to the opposite in the far future, when the landscape is much more fragmented than it is today and the commercial benefits of diversification have been used up so that consolidation can kick in again. Until then, it's going to be messy for a while.\n\nI wonder if projects with the goal of simplifying the stack are better off building against a virtualization layer instead of trying to keep up with the further diversifying landscape of hardware architectures. Basically, bring your own (virtual) machine (and perhaps even instruction set), and let the virtualization/emulation figure out translation to actual hardware instructions. You'll likely do exactly that for testing already anyway."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610778816.014400",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "097598f1-07b8-4409-9e09-21c52c6e7f07",
        "type": "message",
        "text": "&gt; What does the UX for programming look like if you also have to specify where computations happen?\nI love this question. I think this was one of <https://youtu.be/gCWtkvDQ2ZI?t=2158|the fundamental questions> that drove the creation of the <https://www.unisonweb.org|Unison Language> iirc.",
        "user": "U01661S9F34",
        "ts": "1610829657.017900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01661S9F34",
            "ts": "1610830529.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yf+=7",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What does the UX for programming look like if you also have to specify where computations happen?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I love this question. I think this was one of "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/gCWtkvDQ2ZI?t=2158",
                                "text": "the fundamental questions"
                            },
                            {
                                "type": "text",
                                "text": " that drove the creation of the "
                            },
                            {
                                "type": "link",
                                "url": "https://www.unisonweb.org",
                                "text": "Unison Language"
                            },
                            {
                                "type": "text",
                                "text": " iirc."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610778816.014400",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9875ba9a-daec-4146-a240-61a77386d292",
        "type": "message",
        "text": "In another life, when the first generation of Nvidia GPU's that supported CUDA were released, I was working under a National Science Foundation grant to port some algorithms related to GIS (among other things) to run on GPUs. The biggest problem was getting data from the CPU to the GPU and back. GPU's had relatively small onboard memory at the time, and it was very easy to saturate the PCI bus when trying to move the data back and forth. It proved to be a huge bottleneck, and really broke any illusions of \"a single machine.\"",
        "user": "U01661S9F34",
        "ts": "1610830386.018300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01661S9F34",
            "ts": "1610830401.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uXaT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In another life, when the first generation of Nvidia GPU's that supported CUDA were released, I was working under a National Science Foundation grant to port some algorithms related to GIS (among other things) to run on GPUs. The biggest problem was getting data from the CPU to the GPU and back. GPU's had relatively small onboard memory at the time, and it was very easy to saturate the PCI bus when trying to move the data back and forth. It proved to be a huge bottleneck, and really broke any illusions of \"a single machine.\""
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610778816.014400",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d897fa52-66e7-41ca-91d7-c76891599564",
        "type": "message",
        "text": "Well, its not as if you get full programmability at different layers of the stack. Most of the time you have to confirm to specific protocols and data formats, with most of the programmability in a few layers (CPU, GPU, etc..).",
        "user": "U01JNTE35QS",
        "ts": "1610831250.020300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vlv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well, its not as if you get full programmability at different layers of the stack. Most of the time you have to confirm to specific protocols and data formats, with most of the programmability in a few layers (CPU, GPU, etc..)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610831250.020300",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1610833038.020600",
        "reply_users": [
            "UCUSW7WVD"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "8dce2c45-bd06-4a41-8319-bafe84ca0726",
        "type": "message",
        "text": "It's not clear to me who you're responding to. Could you move your note to under a thread please? Thank you!",
        "user": "UCUSW7WVD",
        "ts": "1610833038.020600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nP3FJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's not clear to me who you're responding to. Could you move your note to under a thread please? Thank you!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610831250.020300",
        "parent_user_id": "U01JNTE35QS"
    }
]