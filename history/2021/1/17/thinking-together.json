[
    {
        "client_msg_id": "61a044fc-9473-41e8-9595-c4cd6abfed77",
        "type": "message",
        "text": "&gt; *Perhaps all programming is distributed programming?*\nYes, yes, yes!\n\nIts just that we have established models and tools to create a \"single computer\" abstraction out of _certain kinds_ of smaller computers, e.g. the \"PC\" bundle.\n\nOne way I look at this is to see a bundle as having observable, consistent states and \"inner bundles\". Consider this statement in a C like language:\n`i = j + 1`\nThis \"C-system\" (language + runtime) executes the above statement - you have values for i and j, then after the step, you have a new value for i. To simplify you have the \"state before\" and \"state after\". But if we look at the same system as a collection of \"inner-systems\", the transition consists of various nested states such as moving bits from memory to a register, an operation on the register, then moving it back to anther place in memory. Now the question is: if the first MOV has happened, but addition has not, what is the state _in terms of the C-computer?_ It's not inconsistent, maybe it's in transition? Certainly it is on its way to being consistent and visible in outer system. We can go deeper than MOV - a register isn't a single physical array of memory in the CPU (neither is a \"location in memory\") - theres caches and other kinds of _inner-systems_ all the way. One observable transition in the outer system contains many transitions in the inner systems.\n\n&gt; What does the UX for programming look like if you also have to specify where computations happen?\nThis has been on my mind too and I think for certain parts of programs, we specifically don't want to specify where the computation happens. This is what I sometimes call _topology_ _independent_ programs. Note that location presumes a addressing space. Above, in the C-system, there is no location (the C-system is whole world) and when we zoom into it, we see locations such as cpu, ram, AX, BX or whatever. The compiler made that mapping for us - it organized the inner systems to appear as if its one outer system. (But we could have too, and there are many alternative locations and ways to map that would have all worked out just fine). However if we zoom out from the C-system to a distributed database (or whatever it is part of), the single C-system is now one location in a larger address space, but the database-system will have location independent concepts like a _table_. I think to specify _where_ computation happens, we need to build this idea of mapping the outer-system meaning to the inner-system meaning and distinct address spaces. To do this in a general way would mean we can always scale out to the next level using the same mapping ideas as we did at the previous step out.",
        "user": "U8A5MS6R1",
        "ts": "1610851829.020900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jfn",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perhaps all programming is distributed programming?",
                                "style": {
                                    "bold": true
                                }
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, yes, yes!\n\nIts just that we have established models and tools to create a \"single computer\" abstraction out of "
                            },
                            {
                                "type": "text",
                                "text": "certain kinds",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of smaller computers, e.g. the \"PC\" bundle.\n\nOne way I look at this is to see a bundle as having observable, consistent states and \"inner bundles\". Consider this statement in a C like language:\n"
                            },
                            {
                                "type": "text",
                                "text": "i = j + 1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nThis \"C-system\" (language + runtime) executes the above statement - you have values for i and j, then after the step, you have a new value for i. To simplify you have the \"state before\" and \"state after\". But if we look at the same system as a collection of \"inner-systems\", the transition consists of various nested states such as moving bits from memory to a register, an operation on the register, then moving it back to anther place in memory. Now the question is: if the first MOV has happened, but addition has not, what is the state "
                            },
                            {
                                "type": "text",
                                "text": "in terms of the C-computer? ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "It's not inconsistent, maybe it's in transition? Certainly it is on its way to being consistent and visible in outer system. We can go deeper than MOV - a register isn't a single physical array of memory in the CPU (neither is a \"location in memory\") - theres caches and other kinds of "
                            },
                            {
                                "type": "text",
                                "text": "inner-systems",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " all the way. One observable transition in the outer system contains many transitions in the inner systems.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What does the UX for programming look like if you also have to specify where computations happen?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This has been on my mind too and I think for certain parts of programs, we specifically don't want to specify where the computation happens. This is what I sometimes call "
                            },
                            {
                                "type": "text",
                                "text": "topology",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "independent",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " programs. Note that location presumes a addressing space. Above, in the C-system, there is no location (the C-system is whole world) and when we zoom into it, we see locations such as cpu, ram, AX, BX or whatever. The compiler made that mapping for us - it organized the inner systems to appear as if its one outer system. (But we could have too, and there are many alternative locations and ways to map that would have all worked out just fine). However if we zoom out from the C-system to a distributed database (or whatever it is part of), the single C-system is now one location in a larger address space, but the database-system will have location independent concepts like a "
                            },
                            {
                                "type": "text",
                                "text": "table",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". I think to specify "
                            },
                            {
                                "type": "text",
                                "text": "where",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " computation happens, we need to build this idea of mapping the outer-system meaning to the inner-system meaning and distinct address spaces. To do this in a general way would mean we can always scale out to the next level using the same mapping ideas as we did at the previous step out."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610778816.014400",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "6F63C5D8-CD60-436B-B79E-1B1CEC7919B1",
        "type": "message",
        "text": "my favorite part of the mother of all demos is when the shopping list becomes the map of your commute home via all the stores for the shopping list",
        "user": "UHWC9PXBL",
        "ts": "1610854140.022000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "StM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "my favorite part of the mother of all demos is when the shopping list becomes the map of your commute home via all the stores for the shopping list"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610742663.002400"
    },
    {
        "client_msg_id": "2A0DCD3C-0992-40FE-80D0-E559BCAD91D7",
        "type": "message",
        "text": "this is a great thread and i\u2019m mostly commenting to get notified, but the one thing i\u2019d like to point out is that for whatever reason, it\u2019s pretty _easy_ to forget (or never learn) that all these chips are working together. it\u2019s pretty rare that just the microcontroller for your ram stick needs to be restarted, and it\u2019s even rarer that a failing stick corrupts your word documents. are there any system design lessons we can learn from that? why is it easier to make these smaller and cheaper components reliable than it is to make servers reliable?",
        "user": "UHWC9PXBL",
        "ts": "1610854517.027100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GXeet",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this is a great thread and i\u2019m mostly commenting to get notified, but the one thing i\u2019d like to point out is that for whatever reason, it\u2019s pretty "
                            },
                            {
                                "type": "text",
                                "text": "easy",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to forget (or never learn) that all these chips are working together. it\u2019s pretty rare that just the microcontroller for your ram stick needs to be restarted, and it\u2019s even rarer that a failing stick corrupts your word documents. are there any system design lessons we can learn from that? why is it easier to make these smaller and cheaper components reliable than it is to make servers reliable?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610778816.014400",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6b4858d4-21d4-4afe-b16d-6804fa6e5c70",
        "type": "message",
        "text": "The single-process serial computation (aka \"Turing machine\") is a useful abstraction. It corresponds nicely to how people perform symbolic manipulations by hand. It's also much easier to reason about than distributed computing models.\n\nGiven that the Turing Machine abstraction won't (and shouldn't) go away, let me rephrase the topic of this thread: should it be the dominant abstraction for developing software system? Certainly not. Perhaps the mistake is to consider it a more fundamental abstraction than distributed models, and try to implement the latter in terms of the former. Perhaps it should be the other way round: implement the Turing Machine as a high-level abstraction on top of a more powerful one, as a useful simplification to use when appropriate.",
        "user": "UJBAJNFLK",
        "ts": "1610874234.027400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJBAJNFLK",
            "ts": "1610874381.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kn7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The single-process serial computation (aka \"Turing machine\") is a useful abstraction. It corresponds nicely to how people perform symbolic manipulations by hand. It's also much easier to reason about than distributed computing models.\n\nGiven that the Turing Machine abstraction won't (and shouldn't) go away, let me rephrase the topic of this thread: should it be the dominant abstraction for developing software system? Certainly not. Perhaps the mistake is to consider it a more fundamental abstraction than distributed models, and try to implement the latter in terms of the former. Perhaps it should be the other way round: implement the Turing Machine as a high-level abstraction on top of a more powerful one, as a useful simplification to use when appropriate."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610778816.014400",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "343aa539-7414-4e6f-ba11-c9c9ac9f6436",
        "type": "message",
        "text": "<@UJBAJNFLK> Does Erlang (aka Actor Model) feel like a more powerful model?\n\nThere's also the Smalltalk model of an internet of computers.",
        "user": "UCUSW7WVD",
        "ts": "1610910164.027700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1610910312.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yiSk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " Does Erlang (aka Actor Model) feel like a more powerful model?\n\nThere's also the Smalltalk model of an internet of computers."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610778816.014400",
        "parent_user_id": "UCUSW7WVD"
    }
]