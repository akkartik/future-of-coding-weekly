[
    {
        "client_msg_id": "f97c95dd-0051-44ff-ad00-c920b794c458",
        "type": "message",
        "text": "Installed! Something I always wanted in tools like this was to indicate styles - bold, italic, `code` - in some way, e.g. pitch change, background hum. And some way to indicate punctuation, in a different way from words - like, on the screen I see `Enum.FooFlag | otherFlag` but it shouldn't be spoken quite like `enum foo flag other flag` or `enum dot foo flag vertical bar other flag`",
        "user": "UD6EXQVM0",
        "ts": "1610839291.010000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1610839395.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LCk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Installed! Something I always wanted in tools like this was to indicate styles - bold, italic, "
                            },
                            {
                                "type": "text",
                                "text": "code",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " - in some way, e.g. pitch change, background hum. And some way to indicate punctuation, in a different way from words - like, on the screen I see "
                            },
                            {
                                "type": "text",
                                "text": "Enum.FooFlag | otherFlag",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " but it shouldn't be spoken quite like "
                            },
                            {
                                "type": "text",
                                "text": "enum foo flag other flag",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "enum dot foo flag vertical bar other flag",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1600444046.000800",
        "parent_user_id": "UTG9XLGKZ"
    },
    {
        "client_msg_id": "09607914-4832-4a8c-ac4b-bf7792c264b0",
        "type": "message",
        "text": "I suspect this is the sort of project where Loyc tools would be useful, because there's nothing really Python-specific about the goal here, and since it's Python, you can't (in general) be sure what the types are - so I guess that if you used a <http://loyc.net/loyc-trees/|Loyc tree> as the input to your prediction black box, it might work just as well on other languages.\n\nBut OTOH maybe you've just got a big AI model trained directly on source text and it doesn't actually know or care about the tree structure of the code?\n\nMind you an input module for Python doesn't actually exist, I'm just saying that _in principle_ it looks like a good fit... what do you think?",
        "user": "UD6EXQVM0",
        "ts": "1610843844.010700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rLIP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I suspect this is the sort of project where Loyc tools would be useful, because there's nothing really Python-specific about the goal here, and since it's Python, you can't (in general) be sure what the types are - so I guess that if you used a "
                            },
                            {
                                "type": "link",
                                "url": "http://loyc.net/loyc-trees/",
                                "text": "Loyc tree"
                            },
                            {
                                "type": "text",
                                "text": " as the input to your prediction black box, it might work just as well on other languages.\n\nBut OTOH maybe you've just got a big AI model trained directly on source text and it doesn't actually know or care about the tree structure of the code?\n\nMind you an input module for Python doesn't actually exist, I'm just saying that "
                            },
                            {
                                "type": "text",
                                "text": "in principle",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " it looks like a good fit... what do you think?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601136299.009000",
        "parent_user_id": "UPVBV34EL"
    },
    {
        "client_msg_id": "e6465505-af16-4164-86ef-d4ff9bf01547",
        "type": "message",
        "text": "I don't have sound in the video. What's the concept here?",
        "user": "UD6EXQVM0",
        "ts": "1610844126.010900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=f1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't have sound in the video. What's the concept here?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601313820.018300",
        "parent_user_id": "UG0EL18H3"
    },
    {
        "client_msg_id": "2eb35a2b-ea94-4be4-b8b1-b80db19ca9b2",
        "type": "message",
        "text": "Thanks for the feedback Konrad!\n\nI would say at this stage of the game the 2-D/3-D aspect is\nimportant for the UI of programming. It's like WYSIWYG of\nprogramming.\n\nIn Tree, scope has a semantic meaning but also a geometric\nmeaning\u2014if things are down and to the right, they belong\ntogether.\n\nIn Tree, there aren't infinite ways to write a list. There's\njust one, and it's the way you would do it in the real\nworld: put items next to each other.\n\nThe languages follow constraints imposed by geometry. While\nthis may seem like it would limit creativity, in fact I've\nfound the opposite. By letting you focus on signal, and\nremoving all noise, you can focus on the semantics, and\nreally simplify your code to its essence.\n\nThere are also lots more you can do when you break out of\n1-dimensional, linearly parsed languages. Tree Notation is a\nsubset of Grid Notation. There are other 2-D notations\nout there.\n\nAn example might help. Would be easier to do a visual\nbut could try to put it into words. Imagine a project\nwouldn't be a folder with a bunch of files, but instead one\nfile that you would open with a spreadsheet like IDE. and\nedit like a canvas. What you'd normally put into files you\nwould instead drop an \"anchor\" in some cell in the sheet,\nand start typing. That would be a root tree. And you could\nhave many of them throughout the canvas, instead of 1 file.\nThis is a good structure for languages for simulation. There\nare some things like this, but none of them (AFAIK) have\never made the layout and code isomorphic, and when you do\nthat you don't give up anything, and you make parsing and\ntool building a lot easier.",
        "user": "UMVFWPZ36",
        "ts": "1610844283.011100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q6V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the feedback Konrad!\n\nI would say at this stage of the game the 2-D/3-D aspect is\nimportant for the UI of programming. It's like WYSIWYG of\nprogramming.\n\nIn Tree, scope has a semantic meaning but also a geometric\nmeaning\u2014if things are down and to the right, they belong\ntogether.\n\nIn Tree, there aren't infinite ways to write a list. There's\njust one, and it's the way you would do it in the real\nworld: put items next to each other.\n\nThe languages follow constraints imposed by geometry. While\nthis may seem like it would limit creativity, in fact I've\nfound the opposite. By letting you focus on signal, and\nremoving all noise, you can focus on the semantics, and\nreally simplify your code to its essence.\n\nThere are also lots more you can do when you break out of\n1-dimensional, linearly parsed languages. Tree Notation is a\nsubset of Grid Notation. There are other 2-D notations\nout there.\n\nAn example might help. Would be easier to do a visual\nbut could try to put it into words. Imagine a project\nwouldn't be a folder with a bunch of files, but instead one\nfile that you would open with a spreadsheet like IDE. and\nedit like a canvas. What you'd normally put into files you\nwould instead drop an \"anchor\" in some cell in the sheet,\nand start typing. That would be a root tree. And you could\nhave many of them throughout the canvas, instead of 1 file.\nThis is a good structure for languages for simulation. There\nare some things like this, but none of them (AFAIK) have\never made the layout and code isomorphic, and when you do\nthat you don't give up anything, and you make parsing and\ntool building a lot easier."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610747848.005700",
        "parent_user_id": "UMVFWPZ36"
    },
    {
        "client_msg_id": "edb01d24-b01b-4827-8756-553e519a0a13",
        "type": "message",
        "text": "Now there are also implications for hardware, way down the\nline, but at this stage it's about making things that ditch\na lot of complexity without sacrificing power, and present\nthe user with a code and interface that is a lot more\nisomorphic to our brains which process info in a 2-D and 3-D\nway.",
        "user": "UMVFWPZ36",
        "ts": "1610844426.011400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A0X8d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Now there are also implications for hardware, way down the\nline, but at this stage it's about making things that ditch\na lot of complexity without sacrificing power, and present\nthe user with a code and interface that is a lot more\nisomorphic to our brains which process info in a 2-D and 3-D\nway."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610747848.005700",
        "parent_user_id": "UMVFWPZ36"
    },
    {
        "client_msg_id": "15a3666b-a815-4cd4-9a08-42983557e873",
        "type": "message",
        "text": "What's the point of replying in a thread if you're also sending it to a channel? :slightly_smiling_face:",
        "user": "UCUSW7WVD",
        "ts": "1610846686.012100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fk2cN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What's the point of replying in a thread if you're also sending it to a channel? "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610747848.005700",
        "parent_user_id": "UMVFWPZ36"
    },
    {
        "client_msg_id": "d8477bf0-3367-4b75-aa67-3123cce93d6e",
        "type": "message",
        "text": "(Moving Breck's comment from the top level)\n\n&gt; That's the theory anyway :wink:",
        "user": "UCUSW7WVD",
        "ts": "1610846733.012400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1610846747.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fnz1s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(Moving Breck's comment from the top level)\n\n> That's the theory anyway "
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610747848.005700",
        "parent_user_id": "UMVFWPZ36"
    },
    {
        "client_msg_id": "2b87edbd-4891-41ee-8519-a283fbfc25c0",
        "type": "message",
        "text": "Usually I try to keep one main thought per thread. Tried to split UI vs Hardware",
        "user": "UMVFWPZ36",
        "ts": "1610866242.012900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0z3i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Usually I try to keep one main thought per thread. Tried to split UI vs Hardware"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610747848.005700",
        "parent_user_id": "UMVFWPZ36"
    },
    {
        "client_msg_id": "8d803f26-ef3a-4e38-ae04-0a6393a61f98",
        "type": "message",
        "text": "Is there a way to create a thread inside a thread?",
        "user": "UMVFWPZ36",
        "ts": "1610866285.013100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wNh4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is there a way to create a thread inside a thread?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1610747848.005700",
        "parent_user_id": "UMVFWPZ36"
    },
    {
        "client_msg_id": "e02562c2-758d-46c8-a432-05ac80f25879",
        "type": "message",
        "text": "You are spot on. Our tool is for Python at the moment. But in principle, it can be extended easily to other Languages. I did not know of about Loyc tree. Thanks for the pointers. I had studied two system trying to build the similar functions. One is the (now-defunct) Babelfish (I could not find anymore the original website, but I found this one - <https://dpordomingo.gitbook.io/community-edition/usage/bblfsh>) and tree-sitter (<https://tree-sitter.github.io/tree-sitter/>) docly internally depends on tree-sitter via the open source library tree-hugger (<https://github.com/autosoft-dev/tree-hugger>). The last one was also created and open sourced by us (Codist)",
        "user": "UPVBV34EL",
        "ts": "1610875927.013300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "autosoft-dev/tree-hugger",
                "title_link": "https://github.com/autosoft-dev/tree-hugger",
                "text": "A light-weight, extendable, high level, universal code parser built on top of tree-sitter - autosoft-dev/tree-hugger",
                "fallback": "GitHub: autosoft-dev/tree-hugger",
                "from_url": "https://github.com/autosoft-dev/tree-hugger",
                "thumb_url": "https://repository-images.githubusercontent.com/244139058/009d4e80-b85d-11ea-8e84-3f75772743ac",
                "thumb_width": 250,
                "thumb_height": 250,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/autosoft-dev/tree-hugger"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nhIW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You are spot on. Our tool is for Python at the moment. But in principle, it can be extended easily to other Languages. I did not know of about Loyc tree. Thanks for the pointers. I had studied two system trying to build the similar functions. One is the (now-defunct) Babelfish (I could not find anymore the original website, but I found this one - "
                            },
                            {
                                "type": "link",
                                "url": "https://dpordomingo.gitbook.io/community-edition/usage/bblfsh"
                            },
                            {
                                "type": "text",
                                "text": ") and tree-sitter ("
                            },
                            {
                                "type": "link",
                                "url": "https://tree-sitter.github.io/tree-sitter/"
                            },
                            {
                                "type": "text",
                                "text": ") docly internally depends on tree-sitter via the open source library tree-hugger ("
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/autosoft-dev/tree-hugger"
                            },
                            {
                                "type": "text",
                                "text": "). The last one was also created and open sourced by us (Codist)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601136299.009000",
        "parent_user_id": "UPVBV34EL"
    },
    {
        "client_msg_id": "43da85f3-1cfb-4750-885a-d2ad933bc6c5",
        "type": "message",
        "text": "Thanks for indicating Loyc tree. Gonna give it a look",
        "user": "UPVBV34EL",
        "ts": "1610875955.013600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w7fh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for indicating Loyc tree. Gonna give it a look"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601136299.009000",
        "parent_user_id": "UPVBV34EL"
    }
]