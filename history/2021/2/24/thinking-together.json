[
    {
        "client_msg_id": "8c92a9ed-4ab2-499e-83ab-a3f3017ca3bc",
        "type": "message",
        "text": "On explainability of statistical methods (and their applicability to the FoC, perhaps). \"AI\" explainability is somewhat hot right now as we've realized that it's hard to make systems these work reliably (and trust their output) if we don't really understand why and how they do what they do. On a larger scale, better explainability could lead to faster iteration, better models and more widespread adoption in areas where uncertainty calibrated output is important.\n\nI'm definitely not an expert and mostly focused on NLP, where the majority of research output is measured against various accuracy-based benchmarks with less investigation into the why's &amp; potential biases (though there's some interesting progress like <https://github.com/marcotcr/checklist|CheckList>).\n\n\u2022 Do any of you have experiences with getting explanations out of statistical systems? <@U013ZLJARC7>? \n\u2022 Taking a larger view, any thoughts on how AI might help the Future of Coding (thinking of Codota, Kite, etc.)? ",
        "user": "U01KZQEQVUP",
        "ts": "1614155382.040300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "marcotcr/checklist",
                "title_link": "https://github.com/marcotcr/checklist",
                "text": "Beyond Accuracy: Behavioral Testing of NLP models with CheckList - marcotcr/checklist",
                "fallback": "GitHub: marcotcr/checklist",
                "thumb_url": "https://avatars.githubusercontent.com/u/698010?s=400&v=4",
                "from_url": "https://github.com/marcotcr/checklist",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/marcotcr/checklist"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1zckg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On explainability of statistical methods (and their applicability to the FoC, perhaps). \"AI\" explainability is somewhat hot right now as we've realized that it's hard to make systems these work reliably (and trust their output) if we don't really understand why and how they do what they do. On a larger scale, better explainability could lead to faster iteration, better models and more widespread adoption in areas where uncertainty calibrated output is important.\n\nI'm definitely not an expert and mostly focused on NLP, where the majority of research output is measured against various accuracy-based benchmarks with less investigation into the why's & potential biases (though there's some interesting progress like "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/marcotcr/checklist",
                                "text": "CheckList"
                            },
                            {
                                "type": "text",
                                "text": ").\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Do any of you have experiences with getting explanations out of statistical systems? "
                                    },
                                    {
                                        "type": "user",
                                        "user_id": "U013ZLJARC7"
                                    },
                                    {
                                        "type": "text",
                                        "text": "? "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Taking a larger view, any thoughts on how AI might help the Future of Coding (thinking of Codota, Kite, etc.)? "
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1614155382.040300",
        "reply_count": 9,
        "reply_users_count": 5,
        "latest_reply": "1614205537.052500",
        "reply_users": [
            "U013ZLJARC7",
            "UA14TGLTC",
            "UDQKHNP51",
            "U01KZQEQVUP",
            "UHWC9PXBL"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "29900932-7d3e-486f-b924-3ab69dbc8f18",
        "type": "message",
        "text": "Hi, I\u2019m doing some research into making chatbots, and wondering if anyone knows of existing ways to model the algorithm of a chatbot? I\u2019m also interested in end user programming, so a model that enables that would be ideal. Also, thinking about how to store that algorithm in a declarative, language agnostic way. Any tips/links would be much appreciated :slightly_smiling_face:",
        "user": "UP00ZLX6G",
        "ts": "1614157567.042700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zga56",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi, I\u2019m doing some research into making chatbots, and wondering if anyone knows of existing ways to model the algorithm of a chatbot? I\u2019m also interested in end user programming, so a model that enables that would be ideal. Also, thinking about how to store that algorithm in a declarative, language agnostic way. Any tips/links would be much appreciated "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614157567.042700",
        "reply_count": 17,
        "reply_users_count": 5,
        "latest_reply": "1614608312.077900",
        "reply_users": [
            "UDQKHNP51",
            "UFPPABQ7P",
            "UMVFWPZ36",
            "UP00ZLX6G",
            "U019CPED6T1"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "9c4a9e82-baa7-416b-ba51-4c681dcaaf85",
        "type": "message",
        "text": "It's a deep topic that I don't have time to type about very much atm, but the two lines of inquiry that have worked best for me have been:\n\u2022 Training systems to align labels with other things in a shared latent space. In an art context, that can show itself as a model that can caption images also being able to direct a GAN to generate images based on a caption, as I did here: <https://twitter.com/jackrusher/status/1356902381880025089>\n\u2022 Models that generate computer programs representing their decision process, which gives more of the kind of procedural representation that is sometimes required. (No link because I haven't published any of this stuff).\nIn the \"AI\" + FoC space, I'm probably most excited by <https://arxiv.org/abs/1605.06640|things like this>, which can lead to more human-friendly coding assistants.",
        "user": "U013ZLJARC7",
        "ts": "1614158966.042800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U013ZLJARC7",
            "ts": "1614159308.000000"
        },
        "attachments": [
            {
                "fallback": "<https://twitter.com/jackrusher|@jackrusher>: Trying out #BigGAN + #CLIP on single lines from poems, here are some images generated from the text \"All Watched Over by Machines of Loving Grace\" plus some stylistic guidance. <https://pbs.twimg.com/media/EtSvNdAXUAkVYqc.png>",
                "ts": 1612345712,
                "author_name": "\u2e18Jack Rusher\u203d",
                "author_link": "https://twitter.com/jackrusher/status/1356902381880025089",
                "author_icon": "https://pbs.twimg.com/profile_images/931507447088500736/j50JPYN5_normal.jpg",
                "author_subname": "@jackrusher",
                "text": "Trying out #BigGAN + #CLIP on single lines from poems, here are some images generated from the text \"All Watched Over by Machines of Loving Grace\" plus some stylistic guidance. <https://pbs.twimg.com/media/EtSvNdAXUAkVYqc.png>",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/jackrusher/status/1356902381880025089",
                "image_url": "https://pbs.twimg.com/media/EtSvNdAXUAkVYqc.png",
                "image_width": 512,
                "image_height": 512,
                "image_bytes": 482550,
                "id": 1,
                "original_url": "https://twitter.com/jackrusher/status/1356902381880025089",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            },
            {
                "text": "<https://pbs.twimg.com/media/EtSvNdAXYAMCUeZ.png>",
                "image_url": "https://pbs.twimg.com/media/EtSvNdAXYAMCUeZ.png",
                "image_width": 512,
                "image_height": 512,
                "image_bytes": 421176,
                "id": 2
            },
            {
                "service_name": "arXiv.org",
                "title": "Programming with a Differentiable Forth Interpreter",
                "title_link": "https://arxiv.org/abs/1605.06640",
                "text": "Given that in practice training data is scarce for all but a small set of problems, a core question is how to incorporate prior knowledge into a model. In this paper, we consider the case of prior...",
                "fallback": "arXiv.org: Programming with a Differentiable Forth Interpreter",
                "from_url": "https://arxiv.org/abs/1605.06640",
                "service_icon": "https://static.arxiv.org/static/browse/0.3.2.6/images/icons/favicon.ico",
                "id": 3,
                "original_url": "https://arxiv.org/abs/1605.06640"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M9q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's a deep topic that I don't have time to type about very much atm, but the two lines of inquiry that have worked best for me have been:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Training systems to align labels with other things in a shared latent space. In an art context, that can show itself as a model that can caption images also being able to direct a GAN to generate images based on a caption, as I did here: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://twitter.com/jackrusher/status/1356902381880025089"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Models that generate computer programs representing their decision process, which gives more of the kind of procedural representation that is sometimes required. (No link because I haven't published any of this stuff)."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the \"AI\" + FoC space, I'm probably most excited by "
                            },
                            {
                                "type": "link",
                                "url": "https://arxiv.org/abs/1605.06640",
                                "text": "things like this"
                            },
                            {
                                "type": "text",
                                "text": ", which can lead to more human-friendly coding assistants."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614155382.040300",
        "parent_user_id": "U01KZQEQVUP",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U01KZQEQVUP"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "263df0f9-7e20-4334-b586-717d11851546",
        "type": "message",
        "text": "I was thinking of this quote earlier today, \"[F]or most of us, even a simple image manipulation in Photoshop presents insurmountable\u00a0dif\ufb01culties\u2026 any less-than-perfect edit immediately makes the image look completely unrealistic.\u00a0To put another way, classic visual manipulation paradigm does not prevent the user from \u201cfalling\u00a0off\u201d the manifold of natural images.\" <https://distill.pub/2017/aia/>\n\nI like this idea of a network refolding a domain so that movements in the possibility space lead you to domain-level objects rather than nonsense.",
        "user": "UA14TGLTC",
        "ts": "1614159261.043400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Distill",
                "title": "Using Artificial Intelligence to Augment Human Intelligence",
                "title_link": "https://distill.pub/2017/aia/",
                "text": "By creating user interfaces which let us work with the representations inside machine learning models, we can give people new tools for reasoning.",
                "fallback": "Distill: Using Artificial Intelligence to Augment Human Intelligence",
                "image_url": "https://distill.pub/2017/aia/thumbnail.jpg",
                "image_width": 475,
                "image_height": 250,
                "from_url": "https://distill.pub/2017/aia/",
                "image_bytes": 30405,
                "service_icon": "https://distill.pub/favicon.ico",
                "id": 1,
                "original_url": "https://distill.pub/2017/aia/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sHN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was thinking of this quote earlier today, \"[F]or most of us, even a simple image manipulation in Photoshop presents insurmountable\u00a0dif\ufb01culties\u2026 any less-than-perfect edit immediately makes the image look completely unrealistic.\u00a0To put another way, classic visual manipulation paradigm does not prevent the user from \u201cfalling\u00a0off\u201d the manifold of natural images.\" "
                            },
                            {
                                "type": "link",
                                "url": "https://distill.pub/2017/aia/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI like this idea of a network refolding a domain so that movements in the possibility space lead you to domain-level objects rather than nonsense."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614155382.040300",
        "parent_user_id": "U01KZQEQVUP",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c16a9b11-c49d-40ee-8854-9021c0fae204",
        "type": "message",
        "text": "I wonder if <@UMVFWPZ36> Tree Notation (<https://github.com/treenotation>) can help. I don\u2019t understand it enough to tell. maybe he can chime in",
        "user": "UDQKHNP51",
        "ts": "1614161255.044000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "The Tree Notation Lab",
                "title_link": "https://github.com/treenotation",
                "text": "The Tree Notation Lab is an open source distributed research group that tries to solve complex problems with radically new higher dimensional languages. - The Tree Notation Lab",
                "fallback": "GitHub: The Tree Notation Lab",
                "from_url": "https://github.com/treenotation",
                "thumb_url": "https://avatars.githubusercontent.com/u/51207659?s=280&v=4",
                "thumb_width": 174,
                "thumb_height": 174,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/treenotation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Qw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wonder if "
                            },
                            {
                                "type": "user",
                                "user_id": "UMVFWPZ36"
                            },
                            {
                                "type": "text",
                                "text": " Tree Notation ("
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/treenotation"
                            },
                            {
                                "type": "text",
                                "text": ") can help. I don\u2019t understand it enough to tell. maybe he can chime in"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614157567.042700",
        "parent_user_id": "UP00ZLX6G",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UP00ZLX6G"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e80dc958-5e7e-45df-a763-f737f2a012c8",
        "type": "message",
        "text": "<@U013ZLJARC7>, regarding models that generate computer programs: does the language that describes the program have to obey certain rules?",
        "user": "UDQKHNP51",
        "ts": "1614161355.044300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oJs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": ", regarding models that generate computer programs: does the language that describes the program have to obey certain rules?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614155382.040300",
        "parent_user_id": "U01KZQEQVUP"
    },
    {
        "client_msg_id": "55b3a516-549d-4b3a-9584-c20ea5a7f39f",
        "type": "message",
        "text": "Something along the lines of the following has worked well for me in the past:\n<https://link.springer.com/chapter/10.1007/978-3-030-49435-3_13>\nWe wrote our chatbots in Clojure and stored each state machine as a single mutating document per user device in MongoDB.",
        "user": "UFPPABQ7P",
        "ts": "1614162784.044700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A0YeJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Something along the lines of the following has worked well for me in the past:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://link.springer.com/chapter/10.1007/978-3-030-49435-3_13"
                            },
                            {
                                "type": "text",
                                "text": "\nWe wrote our chatbots in Clojure and stored each state machine as a single mutating document per user device in MongoDB."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614157567.042700",
        "parent_user_id": "UP00ZLX6G",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UP00ZLX6G"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d25fcad4-3aa5-49d1-8694-e78a5a73decf",
        "type": "message",
        "text": "This felt like the best application of Clojure I've ever experienced. The dynamic nature of the language made it easier to rollout new versions without worrying about state machine type incompatibilities between versions.\nThen, Clojure's meta programming capabilities were awesome for incrementally improving our \"DSL\" for specifying chatbots.",
        "user": "UFPPABQ7P",
        "ts": "1614162996.044900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uTh5B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This felt like the best application of Clojure I've ever experienced. The dynamic nature of the language made it easier to rollout new versions without worrying about state machine type incompatibilities between versions.\nThen, Clojure's meta programming capabilities were awesome for incrementally improving our \"DSL\" for specifying chatbots."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614157567.042700",
        "parent_user_id": "UP00ZLX6G"
    },
    {
        "client_msg_id": "30e126be-2e44-4f17-bd83-2d9b8deaf0f9",
        "type": "message",
        "text": "<@U013ZLJARC7> The Forth paper is awesome, thanks for the link. Decomposing the rather general problem of a universal language model into more tractable subcomponents (e.g. one for basic maths/logic &amp; one for general language as in the paper) makes a lot of sense to me. Models that can retrieve facts from knowledge bases are another good use case. Does anyone know of more work in this area?\n<@UA14TGLTC> That's a great example, love the GAN examples. There are quite a few cases like this where the \"action space\" is far larger than usually necessary, leading to quite complicated tools with myriads of e.g. configuration options that only make sense in specific combinations. Imagine code editing assisted by a program like that, or just general text editing..",
        "user": "U01KZQEQVUP",
        "ts": "1614169453.045200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01KZQEQVUP",
            "ts": "1614169483.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EcX0N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " The Forth paper is awesome, thanks for the link. Decomposing the rather general problem of a universal language model into more tractable subcomponents (e.g. one for basic maths/logic & one for general language as in the paper) makes a lot of sense to me. Models that can retrieve facts from knowledge bases are another good use case. Does anyone know of more work in this area?\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " That's a great example, love the GAN examples. There are quite a few cases like this where the \"action space\" is far larger than usually necessary, leading to quite complicated tools with myriads of e.g. configuration options that only make sense in specific combinations. Imagine code editing assisted by a program like that, or just general text editing.."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614155382.040300",
        "parent_user_id": "U01KZQEQVUP"
    },
    {
        "client_msg_id": "b6ee96a6-a0b8-4c2d-be57-2fcc87ab4c7b",
        "type": "message",
        "text": "<@UDQKHNP51> It's easier if the language has little syntax and can be serialized into a stream of tokens. FORTH is my current favorite for this purpose.",
        "user": "U013ZLJARC7",
        "ts": "1614171263.045500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LbVo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDQKHNP51"
                            },
                            {
                                "type": "text",
                                "text": " It's easier if the language has little syntax and can be serialized into a stream of tokens. FORTH is my current favorite for this purpose."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614155382.040300",
        "parent_user_id": "U01KZQEQVUP"
    },
    {
        "client_msg_id": "095cb1e1-496f-4a49-8014-55c51e09a8ee",
        "type": "message",
        "text": "<@U013ZLJARC7> what classes of languages can\u2019t be serialized into a stream of tokens? I\u2019m asking, because I don\u2019t know what features that requires",
        "user": "UDQKHNP51",
        "ts": "1614175303.045800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z5Kvg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " what classes of languages can\u2019t be serialized into a stream of tokens? I\u2019m asking, because I don\u2019t know what features that requires"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614155382.040300",
        "parent_user_id": "U01KZQEQVUP"
    },
    {
        "client_msg_id": "e978fe07-56b7-461b-be90-2826f7b62854",
        "type": "message",
        "text": "<@UDQKHNP51> well, you _can_ serialize anything into tokens, but the more complicated the notation the more rules your network needs to learn to encode it.",
        "user": "U013ZLJARC7",
        "ts": "1614179280.046000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cP0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDQKHNP51"
                            },
                            {
                                "type": "text",
                                "text": " well, you "
                            },
                            {
                                "type": "text",
                                "text": "can",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " serialize anything into tokens, but the more complicated the notation the more rules your network needs to learn to encode it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614155382.040300",
        "parent_user_id": "U01KZQEQVUP"
    },
    {
        "client_msg_id": "18378bbe-55e7-4463-b005-d3de0ae35e7c",
        "type": "message",
        "text": "ok, that makes sense",
        "user": "UDQKHNP51",
        "ts": "1614180749.046200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hpr4x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ok, that makes sense"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614155382.040300",
        "parent_user_id": "U01KZQEQVUP"
    },
    {
        "client_msg_id": "8899486b-6fc2-4d9d-a331-474866ac6084",
        "type": "message",
        "text": "Well that is a weird coincidence. <@UDQKHNP51> are you outside my window? As we speak I'm working on a 2-D Tree Language for chat bots.",
        "user": "UMVFWPZ36",
        "ts": "1614181591.046400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fz7+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well that is a weird coincidence. "
                            },
                            {
                                "type": "user",
                                "user_id": "UDQKHNP51"
                            },
                            {
                                "type": "text",
                                "text": " are you outside my window? As we speak I'm working on a 2-D Tree Language for chat bots."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614157567.042700",
        "parent_user_id": "UP00ZLX6G"
    },
    {
        "client_msg_id": "8e761807-44c3-4364-a509-b3b75e7e84dd",
        "type": "message",
        "text": ":slightly_smiling_face:",
        "user": "UMVFWPZ36",
        "ts": "1614181595.046600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ijMsX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614157567.042700",
        "parent_user_id": "UP00ZLX6G"
    },
    {
        "client_msg_id": "ffa14493-17a2-472f-9ea5-e6d0a9f00be3",
        "type": "message",
        "text": "Tak I'm working on one now where you write your chat bot in a spreadsheet like interface",
        "user": "UMVFWPZ36",
        "ts": "1614181640.046800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rtQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tak I'm working on one now where you write your chat bot in a spreadsheet like interface"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614157567.042700",
        "parent_user_id": "UP00ZLX6G"
    },
    {
        "client_msg_id": "a3cee5df-16b3-40a9-bf9d-6a03f5272c2d",
        "type": "message",
        "text": "I will probably have something to share in a week",
        "user": "UMVFWPZ36",
        "ts": "1614181650.047000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y0Y=C",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I will probably have something to share in a week"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614157567.042700",
        "parent_user_id": "UP00ZLX6G"
    },
    {
        "client_msg_id": "f588cac9-e970-4cb0-99f4-ec617990340b",
        "type": "message",
        "text": "hehe. I\u2019m glad that inspiration made me think of your project :slightly_smiling_face:",
        "user": "UDQKHNP51",
        "ts": "1614181708.047300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GNr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "hehe. I\u2019m glad that inspiration made me think of your project "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614157567.042700",
        "parent_user_id": "UP00ZLX6G"
    },
    {
        "client_msg_id": "70576341-e711-4de5-9744-a5dbab119860",
        "type": "message",
        "text": "ooo, look forward to checking out what you have <@UMVFWPZ36> :slightly_smiling_face:",
        "user": "UP00ZLX6G",
        "ts": "1614189755.047600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lJC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ooo, look forward to checking out what you have "
                            },
                            {
                                "type": "user",
                                "user_id": "UMVFWPZ36"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614157567.042700",
        "parent_user_id": "UP00ZLX6G"
    },
    {
        "client_msg_id": "ce673223-f7ae-4d9f-8a9c-b920fea9dac6",
        "type": "message",
        "text": "I was personally thinking of going down statechart/<https://github.com/davidkpiano/xstate|xstate> path for storing the algorithm",
        "user": "UP00ZLX6G",
        "ts": "1614189809.047800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "davidkpiano/xstate",
                "title_link": "https://github.com/davidkpiano/xstate",
                "text": "State machines and statecharts for the modern web. - davidkpiano/xstate",
                "fallback": "GitHub: davidkpiano/xstate",
                "from_url": "https://github.com/davidkpiano/xstate",
                "thumb_url": "https://repository-images.githubusercontent.com/42455934/17d4b780-7701-11e9-85bd-218eda7703f5",
                "thumb_width": 500,
                "thumb_height": 250,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/davidkpiano/xstate"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J7r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was personally thinking of going down statechart/"
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/davidkpiano/xstate",
                                "text": "xstate"
                            },
                            {
                                "type": "text",
                                "text": " path for storing the algorithm"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614157567.042700",
        "parent_user_id": "UP00ZLX6G"
    },
    {
        "client_msg_id": "4645b00c-58f6-4d36-8b08-4bde3009d601",
        "type": "message",
        "text": "Interesting approach with clojure <@UFPPABQ7P> - not sure I want to learn clojure to do this though. I want something more language agnostic, but I\u2019ll keep it at the back of my mind :slightly_smiling_face:",
        "user": "UP00ZLX6G",
        "ts": "1614189954.048300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k0K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting approach with clojure "
                            },
                            {
                                "type": "user",
                                "user_id": "UFPPABQ7P"
                            },
                            {
                                "type": "text",
                                "text": " - not sure I want to learn clojure to do this though. I want something more language agnostic, but I\u2019ll keep it at the back of my mind "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614157567.042700",
        "parent_user_id": "UP00ZLX6G"
    },
    {
        "client_msg_id": "abb76eae-f93d-4c70-ae69-4aa2bd9800f2",
        "type": "message",
        "text": "We did some chat bot work with Amazon Alexa. We wrote up a white paper about what we learned during the process. \n\nIt was pretty ML heavy. And we didn't use any formal language, but we achieved pretty reasonable results. \n\n<https://scholar.google.com/citations?user=xvLxws8AAAAJ&amp;hl=en#d=gs_md_cita-d&amp;u=%2Fcitations%3Fview_op%3Dview_citation%26hl%3Den%26user%3DxvLxws8AAAAJ%26citation_for_view%3DxvLxws8AAAAJ%3A2osOgNQ5qMEC%26tzom%3D420|https://scholar.google.com/citations?user=xvLxws8AAAAJ&amp;hl=en#d=gs_md_cita-d&amp;u=%2Fcitations%3Fview_op%3Dview_citation%26hl%3Den%26user%3DxvLxws8AAAAJ%26citation_for_view%3DxvLxws8AAAAJ%3A2osOgNQ5qMEC%26tzom%3D420>",
        "user": "U019CPED6T1",
        "ts": "1614191200.048500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sVX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We did some chat bot work with Amazon Alexa. We wrote up a white paper about what we learned during the process. \n\nIt was pretty ML heavy. And we didn't use any formal language, but we achieved pretty reasonable results. \n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://scholar.google.com/citations?user=xvLxws8AAAAJ&hl=en#d=gs_md_cita-d&u=%2Fcitations%3Fview_op%3Dview_citation%26hl%3Den%26user%3DxvLxws8AAAAJ%26citation_for_view%3DxvLxws8AAAAJ%3A2osOgNQ5qMEC%26tzom%3D420",
                                "text": "https://scholar.google.com/citations?user=xvLxws8AAAAJ&hl=en#d=gs_md_cita-d&u=%2Fcitations%3Fview_op%3Dview_citation%26hl%3Den%26user%3DxvLxws8AAAAJ%26citation_for_view%3DxvLxws8AAAAJ%3A2osOgNQ5qMEC%26tzom%3D420"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614157567.042700",
        "parent_user_id": "UP00ZLX6G",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UP00ZLX6G",
                    "U01KZQEQVUP"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "DE9A3FE3-6482-43B8-946C-C2C16E3CA1A2",
        "type": "message",
        "text": "forth has the delicious property of being trivially serializable into tokens because you can read each token as a function that takes a stack and returns a stack, and space as both the token separator and the function composition operator. so you can split a forth program anywhere and replace n tokens with a word in a lookup table that returns the original string of tokens and get the same result (i\u2019m sure there are edge cases, but it\u2019s pretty universal)",
        "user": "UHWC9PXBL",
        "ts": "1614205537.052500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cJEA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "forth has the delicious property of being trivially serializable into tokens because you can read each token as a function that takes a stack and returns a stack, and space as both the token separator and the function composition operator. so you can split a forth program anywhere and replace n tokens with a word in a lookup table that returns the original string of tokens and get the same result (i\u2019m sure there are edge cases, but it\u2019s pretty universal)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614155382.040300",
        "parent_user_id": "U01KZQEQVUP",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U013ZLJARC7",
                    "UDQKHNP51"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "981973f4-2b42-41e2-8d79-48296dda6745",
        "type": "message",
        "text": "This is quite an interesting approach, in making it really accessible in creating bot conversations through a text based markup language: <https://github.com/codename-co/botml> - it\u2019s like markdown/mdx, but for chatbot conversations. Also has a companion visualisation/execution site, <https://bubl.es/#XQAAAAIgAAAAAAAAAABfiIPCEjuxxv0hVrmkVI_FfN6EgMhy4GBa8Ct5ZT8-nlfk__hTTAA|bubl>",
        "user": "UP00ZLX6G",
        "ts": "1614291886.056100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "codename-co/botml",
                "title_link": "https://github.com/codename-co/botml",
                "text": "Powerful markup language for modern chatbots. Contribute to codename-co/botml development by creating an account on GitHub.",
                "fallback": "GitHub: codename-co/botml",
                "from_url": "https://github.com/codename-co/botml",
                "thumb_url": "https://repository-images.githubusercontent.com/65533896/a6d9ce80-c066-11e9-8c5d-11c6cd48815d",
                "thumb_width": 500,
                "thumb_height": 250,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/codename-co/botml"
            },
            {
                "title": "Bubl, personalizable conversational assistant",
                "title_link": "https://bubl.es/#XQAAAAIgAAAAAAAAAABfiIPCEjuxxv0hVrmkVI_FfN6EgMhy4GBa8Ct5ZT8-nlfk__hTTAA",
                "text": "Build, test and share conversational assistants. Make your own private-by-design offline-first real time chatbot, with native support for multi-turn dialogs.",
                "fallback": "Bubl, personalizable conversational assistant",
                "from_url": "https://bubl.es/#XQAAAAIgAAAAAAAAAABfiIPCEjuxxv0hVrmkVI_FfN6EgMhy4GBa8Ct5ZT8-nlfk__hTTAA",
                "service_icon": "https://bubl.es/bubl-icon.550f60e6.png",
                "service_name": "Bubl",
                "id": 2,
                "original_url": "https://bubl.es/#XQAAAAIgAAAAAAAAAABfiIPCEjuxxv0hVrmkVI_FfN6EgMhy4GBa8Ct5ZT8-nlfk__hTTAA"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=nncH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is quite an interesting approach, in making it really accessible in creating bot conversations through a text based markup language: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/codename-co/botml"
                            },
                            {
                                "type": "text",
                                "text": " - it\u2019s like markdown/mdx, but for chatbot conversations. Also has a companion visualisation/execution site, "
                            },
                            {
                                "type": "link",
                                "url": "https://bubl.es/#XQAAAAIgAAAAAAAAAABfiIPCEjuxxv0hVrmkVI_FfN6EgMhy4GBa8Ct5ZT8-nlfk__hTTAA",
                                "text": "bubl"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614157567.042700",
        "parent_user_id": "UP00ZLX6G",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UMVFWPZ36"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "914db58a-89c3-4ccf-a919-fe0b29a90ba3",
        "type": "message",
        "text": "<@UP00ZLX6G> looks cool! would love to chat more if you are up for it. <mailto:breck7@gmail.com|breck7@gmail.com>",
        "user": "UMVFWPZ36",
        "ts": "1614303335.059800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zuz2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UP00ZLX6G"
                            },
                            {
                                "type": "text",
                                "text": " looks cool! would love to chat more if you are up for it. "
                            },
                            {
                                "type": "link",
                                "url": "mailto:breck7@gmail.com",
                                "text": "breck7@gmail.com"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614157567.042700",
        "parent_user_id": "UP00ZLX6G",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UP00ZLX6G"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "cee93279-a411-4101-9a22-72be9f63c860",
        "type": "message",
        "text": "<@UFPPABQ7P> were you working on juji by chance? That seems to be a clojure system backing it: <https://juji.io/docs/reference/>",
        "user": "UP00ZLX6G",
        "ts": "1614516782.074800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Language - Juji Documentation",
                "title_link": "https://juji.io/docs/reference/",
                "text": "Tutorials, guides, and references for Juji AI chatbot creation platform",
                "fallback": "Language - Juji Documentation",
                "from_url": "https://juji.io/docs/reference/",
                "service_icon": "https://juji.io/docs/img/favicon.ico",
                "service_name": "juji.io",
                "id": 1,
                "original_url": "https://juji.io/docs/reference/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ui4x1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFPPABQ7P"
                            },
                            {
                                "type": "text",
                                "text": " were you working on juji by chance? That seems to be a clojure system backing it: "
                            },
                            {
                                "type": "link",
                                "url": "https://juji.io/docs/reference/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614157567.042700",
        "parent_user_id": "UP00ZLX6G"
    },
    {
        "client_msg_id": "7204a3bb-8e81-4d08-bc1c-70f02e74d066",
        "type": "message",
        "text": "<@UP00ZLX6G> I don't see a lot of overlap between Juju, and what I was working on. Ours was largely hand rolled in order to support richer UI component responses in the chats like an address picker.",
        "user": "UFPPABQ7P",
        "ts": "1614596755.077400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M1ARG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UP00ZLX6G"
                            },
                            {
                                "type": "text",
                                "text": " I don't see a lot of overlap between Juju, and what I was working on. Ours was largely hand rolled in order to support richer UI component responses in the chats like an address picker."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614157567.042700",
        "parent_user_id": "UP00ZLX6G"
    },
    {
        "client_msg_id": "d209905e-e444-4552-b6b2-8b9b8bec3539",
        "type": "message",
        "text": "Ah right, in any case Juji do seem like they are using clojure in an interesting alternative use case of creating a generalised AI chatbot platform. They combine data driven (tensorflow) and symbolic/expert system (clojure) approaches. The clojure part seems like it enables the end user programming/DSL dynamic creation part you were talking about\n\n<https://www.youtube.com/watch?v=phA4bMjKvCY>",
        "user": "UP00ZLX6G",
        "ts": "1614608312.077900",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "A Clojure fusion of symbolic and data driven AI - Huahai Yang",
                "title_link": "https://www.youtube.com/watch?v=phA4bMjKvCY",
                "author_name": "ClojureTV",
                "author_link": "https://www.youtube.com/user/ClojureTV",
                "thumb_url": "https://i.ytimg.com/vi/phA4bMjKvCY/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: A Clojure fusion of symbolic and data driven AI - Huahai Yang",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/phA4bMjKvCY?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=phA4bMjKvCY",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=phA4bMjKvCY"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sKJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah right, in any case Juji do seem like they are using clojure in an interesting alternative use case of creating a generalised AI chatbot platform. They combine data driven (tensorflow) and symbolic/expert system (clojure) approaches. The clojure part seems like it enables the end user programming/DSL dynamic creation part you were talking about\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=phA4bMjKvCY"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614157567.042700",
        "parent_user_id": "UP00ZLX6G"
    }
]