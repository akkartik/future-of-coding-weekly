[
    {
        "client_msg_id": "2d0e8e6e-5940-4a78-a0e9-2e2701431a51",
        "type": "message",
        "text": "Has anyone played with V (<https://vlang.io/>)? Is it any good? And relatedly, are there any other C++/Rust competitors to check out (I\u2019m thinking e.g. Jai and Lobster)?",
        "user": "UCUNN529Y",
        "ts": "1613715502.181500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "03iPc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has anyone played with V ("
                            },
                            {
                                "type": "link",
                                "url": "https://vlang.io/"
                            },
                            {
                                "type": "text",
                                "text": ")? Is it any good? And relatedly, are there any other C++/Rust competitors to check out (I\u2019m thinking e.g. Jai and Lobster)?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613715502.181500",
        "reply_count": 5,
        "reply_users_count": 3,
        "latest_reply": "1613722649.183500",
        "reply_users": [
            "U01661S9F34",
            "UN9SCH5RD",
            "U01JNTE35QS"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "e55f8fcc-915f-410b-af5d-6ad660d14257",
        "type": "message",
        "text": "V got a lot of <https://github.com/vlang/v/issues/35|bad press> when it first announced because it overpromised, under-delivered, and had a very caustic founder that fought with everyone... But it's apparently smoothed out since then. Don't how good it is now.\n\nNow I'll plug my favorite: <https://nim-lang.org|Nim>. Similar niche, systems level language, but with lisp style macros. (And looks more like Python or Pascal.)\n\nThere is also <https://ziglang.org|Zig>, <http://odin-lang.org/#:~:text=The%20Odin%20Programming%20Language.%20The%20Odin%20programming%20language,for%20modern%20systems;%20joy%20of%20programming;%20Example%20Code|Odin>, and <https://dlang.org|D-lang> in the alternative systems language space.",
        "user": "U01661S9F34",
        "ts": "1613716922.181600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01661S9F34",
            "ts": "1613716937.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+g1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "V got a lot of "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/vlang/v/issues/35",
                                "text": "bad press"
                            },
                            {
                                "type": "text",
                                "text": " when it first announced because it overpromised, under-delivered, and had a very caustic founder that fought with everyone... But it's apparently smoothed out since then. Don't how good it is now.\n\nNow I'll plug my favorite: "
                            },
                            {
                                "type": "link",
                                "url": "https://nim-lang.org",
                                "text": "Nim"
                            },
                            {
                                "type": "text",
                                "text": ". Similar niche, systems level language, but with lisp style macros. (And looks more like Python or Pascal.)\n\nThere is also "
                            },
                            {
                                "type": "link",
                                "url": "https://ziglang.org",
                                "text": "Zig"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "http://odin-lang.org/#:~:text=The%20Odin%20Programming%20Language.%20The%20Odin%20programming%20language,for%20modern%20systems;%20joy%20of%20programming;%20Example%20Code",
                                "text": "Odin"
                            },
                            {
                                "type": "text",
                                "text": ", and "
                            },
                            {
                                "type": "link",
                                "url": "https://dlang.org",
                                "text": "D-lang"
                            },
                            {
                                "type": "text",
                                "text": " in the alternative systems language space."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613715502.181500",
        "parent_user_id": "UCUNN529Y",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "62cc451a-1640-4510-bd6a-1b06483c3a20",
        "type": "message",
        "text": "<https://scopes.readthedocs.io/en/latest/|Scopes> \"...was started as an alternative to C++ for programming computer games and related tools\" ... \"is written in about 30k lines of C++ code, supports a LLVM as well as a SPIR-V backend (targeting both CPU and GPU with a single codebase), and exports a minimal runtime environment\" ... \"The language is expression-based, but primarily imperative. The syntactical style marries concepts from Scheme and Python\".\n\nSo yeah, perhaps check it out :slightly_smiling_face: I haven't play with it yet but I keep an eye over it.",
        "user": "UN9SCH5RD",
        "ts": "1613717108.182600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Home - Scopes",
                "title_link": "https://scopes.readthedocs.io/en/latest/",
                "text": "None",
                "fallback": "Home - Scopes",
                "from_url": "https://scopes.readthedocs.io/en/latest/",
                "service_icon": "https://scopes.readthedocs.io/favicon.ico",
                "service_name": "scopes.readthedocs.io",
                "id": 1,
                "original_url": "https://scopes.readthedocs.io/en/latest/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZCLD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://scopes.readthedocs.io/en/latest/",
                                "text": "Scopes"
                            },
                            {
                                "type": "text",
                                "text": " \"...was started as an alternative to C++ for programming computer games and related tools\" ... \"is written in about 30k lines of C++ code, supports a LLVM as well as a SPIR-V backend (targeting both CPU and GPU with a single codebase), and exports a minimal runtime environment\" ... \"The language is expression-based, but primarily imperative. The syntactical style marries concepts from Scheme and Python\".\n\nSo yeah, perhaps check it out "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " I haven't play with it yet but I keep an eye over it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613715502.181500",
        "parent_user_id": "UCUNN529Y",
        "reactions": [
            {
                "name": "amiga-tick",
                "users": [
                    "U01661S9F34"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "138165b9-b241-4564-a8b3-6e6a3684312a",
        "type": "message",
        "text": "I always forget about Scopes! That is a really neat language too! :smile:",
        "user": "U01661S9F34",
        "ts": "1613717155.183000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iZsA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I always forget about Scopes! That is a really neat language too! "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613715502.181500",
        "parent_user_id": "UCUNN529Y"
    },
    {
        "client_msg_id": "df33791b-1b3a-40f5-92df-6710fc217061",
        "type": "message",
        "text": "it sounds very interesting, but also a lil esoteric and mostly a one man project which makes it a bit risky. In that regard, Nim is a lot more established already. Me personally, I'm leaning toward Kotlin... In fact, if one considers Kotlin/Native, perhaps it could be put in this list. I'm sure there must be a way to escape the garbage collector.",
        "user": "UN9SCH5RD",
        "ts": "1613717321.183200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VVuf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it sounds very interesting, but also a lil esoteric and mostly a one man project which makes it a bit risky. In that regard, Nim is a lot more established already. Me personally, I'm leaning toward Kotlin... In fact, if one considers Kotlin/Native, perhaps it could be put in this list. I'm sure there must be a way to escape the garbage collector."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613715502.181500",
        "parent_user_id": "UCUNN529Y",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U01661S9F34"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c7f68ced-af08-4e8d-817a-252fed742a00",
        "type": "message",
        "text": "Zig is very interesting, especially the comptime construct that gives a lot of stuff like generics for free. <https://scattered-thoughts.net/writing/assorted-thoughts-on-zig-and-rust/>",
        "user": "U01JNTE35QS",
        "ts": "1613722649.183500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FGL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Zig is very interesting, especially the comptime construct that gives a lot of stuff like generics for free. "
                            },
                            {
                                "type": "link",
                                "url": "https://scattered-thoughts.net/writing/assorted-thoughts-on-zig-and-rust/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613715502.181500",
        "parent_user_id": "UCUNN529Y"
    },
    {
        "client_msg_id": "2419f413-602f-4cf8-87b0-744d3ca0c35a",
        "type": "message",
        "text": "&gt; *Why is it so hard to see code from 5 minutes ago?*\n&gt; \n&gt; A study found that Java developers\u00a0_backtracked_\u00a0every 6 minutes, meaning they reverted their code to a previous state.\u00a0These undo actions come in bursts and are often followed by successive redo actions. In fact, one participant in a different study used undo/redo 40 times in 5 minutes!\u00a0When asked why they did this, they revealed they were trying to view some intermediate state of the code in the middle of a change. Why is it so hard to see code from 5 minutes ago while in the middle of a change?\nThe author later presents a prototype named Yestercode\n\n&gt; It lets you\u00a0_swipe_\u00a0through your code history on a timeline, much like you would a YouTube video. As you make edits, it aggregates them and puts a notch on the timeline for that version. You can then use the timeline to go to a previous version, giving you a side-by-side view with the current version of the code. The previous version is read-only, but still allows copying and pasting from it. It also shows annotations so that you know what has been changed in later versions (much like a diff).\n<https://web.eecs.utk.edu/~azh/blog/yestercode.html>",
        "user": "UC2A2ARPT",
        "ts": "1613750224.185400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1613750230.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nka3f",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Why is it so hard to see code from 5 minutes ago?",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nA study found that Java developers\u00a0"
                            },
                            {
                                "type": "text",
                                "text": "backtracked",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u00a0every 6 minutes, meaning they reverted their code to a previous state.\u00a0These undo actions come in bursts and are often followed by successive redo actions. In fact, one participant in a different study used undo/redo 40 times in 5 minutes!\u00a0When asked why they did this, they revealed they were trying to view some intermediate state of the code in the middle of a change. Why is it so hard to see code from 5 minutes ago while in the middle of a change?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe author later presents a prototype named Yestercode\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It lets you\u00a0"
                            },
                            {
                                "type": "text",
                                "text": "swipe",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u00a0through your code history on a timeline, much like you would a YouTube video. As you make edits, it aggregates them and puts a notch on the timeline for that version. You can then use the timeline to go to a previous version, giving you a side-by-side view with the current version of the code. The previous version is read-only, but still allows copying and pasting from it. It also shows annotations so that you know what has been changed in later versions (much like a diff)."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://web.eecs.utk.edu/~azh/blog/yestercode.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613750224.185400",
        "reply_count": 6,
        "reply_users_count": 6,
        "latest_reply": "1613813649.008900",
        "reply_users": [
            "UC2A2ARPT",
            "U01KZQEQVUP",
            "U016VUZGUUQ",
            "UCUSW7WVD",
            "UHWC9PXBL",
            "U013ZLJARC7"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "1de35444-cfc5-4338-bdce-42813367913d",
        "type": "message",
        "text": "I'd be curious to know how many programmers _don't ever_ hold down on undo to roll back a few hundred changes, do something, and then redo back up to the present. I find myself doing that at least once every few months, and I've heard other folks anecdotally talk about doing the same.",
        "user": "UC2A2ARPT",
        "ts": "1613752814.185700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7G+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd be curious to know how many programmers "
                            },
                            {
                                "type": "text",
                                "text": "don't ever",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " hold down on undo to roll back a few hundred changes, do something, and then redo back up to the present. I find myself doing that at least once every few months, and I've heard other folks anecdotally talk about doing the same."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613750224.185400",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "ee17e9de-2ff9-47db-92c1-6c156df8612d",
        "type": "message",
        "text": "Yeah, bulk undo &amp; redo happens every once in a while. Though mostly I *try* to keep commits and small and use VCS diffs, but when that fails, I'm back to hoping I haven't messed up my redo stack somehow.",
        "user": "U01KZQEQVUP",
        "ts": "1613754237.187700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ejd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, bulk undo & redo happens every once in a while. Though mostly I "
                            },
                            {
                                "type": "text",
                                "text": "try",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to keep commits and small and use VCS diffs, but when that fails, I'm back to hoping I haven't messed up my redo stack somehow."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613750224.185400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "55bf9a04-fe00-48c8-8b08-294f56d48569",
        "type": "message",
        "text": "I don't think I've ever done that, and had no idea it could be widespread. Version control actually does (mostly) solve this problem for me, because I don't feel shy about committing every few minutes if that's what it takes. I do however look at my current git diff a *lot*, and diffs of other recent changes pretty often.\n\nIt's true that it's still a pain to copy-paste out of history or otherwise partially restore it. The UI this author proposes sounds neat, but only if it transparently works with (at least) git.",
        "user": "U016VUZGUUQ",
        "ts": "1613755120.187900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EdP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't think I've ever done that, and had no idea it could be widespread. Version control actually does (mostly) solve this problem for me, because I don't feel shy about committing every few minutes if that's what it takes. I do however look at my current git diff a"
                            },
                            {
                                "type": "text",
                                "text": " lot",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and diffs of other recent changes pretty often.\n\nIt's true that it's still a pain to copy-paste out of history or otherwise partially restore it. The UI this author proposes sounds neat, but only if it transparently works with (at least) git."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613750224.185400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "1e910a45-941a-467c-a85d-5b55326dd4fb",
        "type": "message",
        "text": "As an anecdote, I spent some time yesterday yet again trying to make sense of <http://paulgraham.com/bel.html>. The sources are lots of tiny functions. But there's tons of calls between functions, and I'm constantly yoyoing between them. One of the things I want to enable in my project is allowing functions to be moved around independent of each other, so that I can move related functions around for the duration of a session. Kinda like Tiddlywiki (cross-link <https://futureofcoding.slack.com/archives/C5T9GPWFL/p1613629318245700>) I also recall that the original Light Table demo did this really well.\n\nI think such a feature would help here?",
        "user": "UCUSW7WVD",
        "ts": "1613774192.188300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1613774200.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nE+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As an anecdote, I spent some time yesterday yet again trying to make sense of "
                            },
                            {
                                "type": "link",
                                "url": "http://paulgraham.com/bel.html"
                            },
                            {
                                "type": "text",
                                "text": ". The sources are lots of tiny functions. But there's tons of calls between functions, and I'm constantly yoyoing between them. One of the things I want to enable in my project is allowing functions to be moved around independent of each other, so that I can move related functions around for the duration of a session. Kinda like Tiddlywiki (cross-link "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1613629318245700"
                            },
                            {
                                "type": "text",
                                "text": ") I also recall that the original Light Table demo did this really well.\n\nI think such a feature would help here?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613750224.185400",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "2ecf09cf-f2ac-4904-863b-0fc0a47d525b",
        "type": "message",
        "text": "This paper has a neat notation for programs that transform other programs. It's also as good an intro to the Futamura projections as any I've read.\n\n<https://arxiv.org/abs/1611.09906|https://arxiv.org/abs/1611.09906>",
        "user": "U016VUZGUUQ",
        "ts": "1613774698.190400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "arXiv.org",
                "title": "Revisiting the Futamura Projections: A Diagrammatic Approach",
                "title_link": "https://arxiv.org/abs/1611.09906",
                "text": "The advent of language implementation tools such as PyPy and Truffle/Graal have reinvigorated and broadened interest in topics related to automatic compiler generation and optimization. Given this...",
                "fallback": "arXiv.org: Revisiting the Futamura Projections: A Diagrammatic Approach",
                "from_url": "https://arxiv.org/abs/1611.09906",
                "service_icon": "https://static.arxiv.org/static/browse/0.3.2.6/images/icons/favicon.ico",
                "id": 1,
                "original_url": "https://arxiv.org/abs/1611.09906"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Inw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This paper has a neat notation for programs that transform other programs. It's also as good an intro to the Futamura projections as any I've read.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://arxiv.org/abs/1611.09906",
                                "text": "https://arxiv.org/abs/1611.09906"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS",
                    "UF71PR58X"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            },
            {
                "name": "yum",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    }
]