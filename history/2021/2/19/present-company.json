[
    {
        "client_msg_id": "9554eb64-4363-4116-b52f-4055f67ff13a",
        "type": "message",
        "text": "I looked into Infra myself, and posted my opinion elsewhere. I'll re-post it here in case anyone is interested:\n&gt; Ok, so my conclusion after reading the 18 page Infra paper (a condensation of the thesis): there is nothing I can learn/steal from Infra. It doesn't seem to have many new innovations: it's a mishmash of a structured editor, binary format, and programming-by-example system, all of which have traditionally been addressed as separate research areas. It doesn't make a substantial contribution in any of those areas, IMO.",
        "user": "UCGAK10LS",
        "ts": "1613697789.075500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ozI8c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I looked into Infra myself, and posted my opinion elsewhere. I'll re-post it here in case anyone is interested:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok, so my conclusion after reading the 18 page Infra paper (a condensation of the thesis): there is nothing I can learn/steal from Infra. It doesn't seem to have many new innovations: it's a mishmash of a structured editor, binary format, and programming-by-example system, all of which have traditionally been addressed as separate research areas. It doesn't make a substantial contribution in any of those areas, IMO."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613663800.074600",
        "parent_user_id": "UEDDR6L5Q"
    },
    {
        "client_msg_id": "9ED1313F-34B9-4A4E-AF85-AC35A93A521F",
        "type": "message",
        "text": "<@USL4R0T61>  what did you end up doing for this? Curious as to what your final approach ended up being..",
        "user": "U01JNTE35QS",
        "ts": "1613713555.076600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hLW4T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "USL4R0T61"
                            },
                            {
                                "type": "text",
                                "text": "  what did you end up doing for this? Curious as to what your final approach ended up being.."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1609262937.173100",
        "parent_user_id": "USL4R0T61"
    },
    {
        "client_msg_id": "ea8aa041-f74b-4786-8bdf-9a1bd64320df",
        "type": "message",
        "text": "Thanks for adding your take.\nIf the idea is to take ideas to use in your own projects then that's probably true.\n\nAs a base format, though, it seems like a useful synthesis that would solve/improve a number of present-day problems.\nI'd consider the editor as separate, but an easily-parseable, compact, recursively self-descriptive, structured data format with s-expression-like \"commands\" seems like it has a lot of potential for improving user experience without a heavy abstraction cost.\nIf the data has structure then I assume a general-purpose editor would need to be structured as well. (correct me if I'm misusing the term). The current alternatives seem to be a plethora of subpar general-purpose text formats or custom binary formats for each use-case. I'd be happy to be proven wrong here if there are other, better alternatives! :smile:\nBoth Infra and UTF-8 purport to be general-purpose binary formats, but Infra seems to allow for many more use-cases.\n\n&gt; all of which have traditionally been addressed as separate research areas\nThis jarred for me slightly: siloed research presumably has some benefits for investigating orthogonal concepts, but surely at some point the lessons need to be synthesized for real-world use-cases. In order to have a structured editor or programming-by-example system you need to have some format, and a binary format with the above-described benefits doesn't seem like a bad choice.\n\n(I'm open to being corrected here btw)",
        "user": "UEDDR6L5Q",
        "ts": "1613738433.076800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LBWHQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for adding your take.\nIf the idea is to take ideas to use in your own projects then that's probably true.\n\nAs a base format, though, it seems like a useful synthesis that would solve/improve a number of present-day problems.\nI'd consider the editor as separate, but an easily-parseable, compact, recursively self-descriptive, structured data format with s-expression-like \"commands\" seems like it has a lot of potential for improving user experience without a heavy abstraction cost.\nIf the data has structure then I assume a general-purpose editor would need to be structured as well. (correct me if I'm misusing the term). The current alternatives seem to be a plethora of subpar general-purpose text formats or custom binary formats for each use-case. I'd be happy to be proven wrong here if there are other, better alternatives! "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            },
                            {
                                "type": "text",
                                "text": "\nBoth Infra and UTF-8 purport to be general-purpose binary formats, but Infra seems to allow for many more use-cases.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "all of which have traditionally been addressed as separate research areas"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This jarred for me slightly: siloed research presumably has some benefits for investigating orthogonal concepts, but surely at some point the lessons need to be synthesized for real-world use-cases. In order to have a structured editor or programming-by-example system you need to have some format, and a binary format with the above-described benefits doesn't seem like a bad choice.\n\n(I'm open to being corrected here btw)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613663800.074600",
        "parent_user_id": "UEDDR6L5Q"
    },
    {
        "client_msg_id": "e6b9bf2f-cb18-4fba-8871-caaf1a2cc99a",
        "type": "message",
        "text": "To weaken my previous statement:\nAlthough I feel like I have an appreciation for the benefits of lisp-like things, I've never actually spent that much time with them, and so probably don't fully grok them.\nThe modifications &amp; side-effects being part of the base format definitely has a few question marks in my mind. Something about it appeals on an aesthetic level but I don't feel like I have a great idea of how it would actually be applied in practice",
        "user": "UEDDR6L5Q",
        "ts": "1613739228.077000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i5v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To weaken my previous statement:\nAlthough I feel like I have an appreciation for the benefits of lisp-like things, I've never actually spent that much time with them, and so probably don't fully grok them.\nThe modifications & side-effects being part of the base format definitely has a few question marks in my mind. Something about it appeals on an aesthetic level but I don't feel like I have a great idea of how it would actually be applied in practice"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613663800.074600",
        "parent_user_id": "UEDDR6L5Q"
    },
    {
        "client_msg_id": "70a7fa4a-517f-4bc4-8b57-d65f7ac040dc",
        "type": "message",
        "text": "I think its awesome work. I\u2019m seeing a lot of parallels between this and what we are working on. Especially the notion of patch based commands for derivative structures from trees and graphs. A few observations:\n1. this is a great fit for WASM. The heap format for WASM can mirror this, and there is a strong association with capabilities the host provides (for example, even mathematical computations)\n2. Portions of the structure are mappable to virtual dom to provide a good way to do reactive UI\u2019s.",
        "user": "U01JNTE35QS",
        "ts": "1613748064.077200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vQE=4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think its awesome work. I\u2019m seeing a lot of parallels between this and what we are working on. Especially the notion of patch based commands for derivative structures from trees and graphs. A few observations:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "this is a great fit for WASM. The heap format for WASM can mirror this, and there is a strong association with capabilities the host provides (for example, even mathematical computations)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Portions of the structure are mappable to virtual dom to provide a good way to do reactive UI\u2019s."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1613663800.074600",
        "parent_user_id": "UEDDR6L5Q"
    }
]