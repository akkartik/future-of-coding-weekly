[
    {
        "client_msg_id": "e292ed4d-bf95-4fa7-80f8-926d7a9085c3",
        "type": "message",
        "text": "The Database Inside Your Codebase <https://feifan.blog/posts/the-database-inside-your-codebase|https://feifan.blog/posts/the-database-inside-your-codebase>. Querying a code base like a database has been my dream for years. What are the state of the art for this? I had the idea of designing a language that can query itself for a while but nothing concrete yet.",
        "user": "U01L6HZEHFX",
        "ts": "1613378800.139200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01L6HZEHFX",
            "ts": "1613379035.000000"
        },
        "attachments": [
            {
                "service_name": "The Blog of Feifan Zhou",
                "title": "The Database Inside Your Codebase",
                "title_link": "https://feifan.blog/posts/the-database-inside-your-codebase",
                "text": "Navigating codebases of any meaningful size is difficult. Most of a programmer's time is spent jumping through the codebase, reading or skimming to build a mental model of the constructs and conventions within it. These constructs \u2014 among them: the DSLs, interfaces, and taxonomy of types that exist \u2014 are arguably the most important precursor to understanding where and how to make changes. But these constructs only exist in programmers' heads. It's difficult or impossible to navigate most codebases through the lens of those constructs; programmers lack \"code browsers\" that present the underlying code independently of files and the filesystem hierarchy. Yet code browsers that can do so \u2014 and we'll look at some examples below \u2014 would be incredibly useful. This is because instances of these constructs can be thought of as records in a database, albeit an ad-hoc, poorly-specified database that can only be queried through carefully-crafted regexes.",
                "fallback": "The Blog of Feifan Zhou: The Database Inside Your Codebase",
                "image_url": "https://files.tanagram.app/file/tanagram-data/prod-feifans-blog/joshua-sortino-LqKhnDzSF-8-unsplash.jpg",
                "ts": 1613242431,
                "from_url": "https://feifan.blog/posts/the-database-inside-your-codebase",
                "image_width": 374,
                "image_height": 250,
                "image_bytes": 954111,
                "id": 1,
                "original_url": "https://feifan.blog/posts/the-database-inside-your-codebase"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DN9sN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Database Inside Your Codebase "
                            },
                            {
                                "type": "link",
                                "url": "https://feifan.blog/posts/the-database-inside-your-codebase",
                                "text": "https://feifan.blog/posts/the-database-inside-your-codebase"
                            },
                            {
                                "type": "text",
                                "text": ". Querying a code base like a database has been my dream for years. What are the state of the art for this? I had the idea of designing a language that can query itself for a while but nothing concrete yet."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613378800.139200",
        "reply_count": 4,
        "reply_users_count": 4,
        "latest_reply": "1613420999.144600",
        "reply_users": [
            "UDQBTJ211",
            "UN9SCH5RD",
            "UJBAJNFLK",
            "U01JNTE35QS"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "raised_hands",
                "users": [
                    "U01LAJFKC2K",
                    "U01L6HZEHFX",
                    "U01KZQEQVUP",
                    "UJ6LDMMN0",
                    "U01661S9F34",
                    "UHWC9PXBL"
                ],
                "count": 6
            }
        ]
    },
    {
        "client_msg_id": "5f53b6df-e1e4-4011-8c5d-54e2e8e99a0c",
        "type": "message",
        "text": "JetBrains IDEs tend to have very good static analysis and refactoring, not sure to what extent the model is exposed to query freely. OpenGrok also has some semantic features. Other than that I think you covered most of it in your article.",
        "user": "UDQBTJ211",
        "ts": "1613382097.143600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sHgeo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "JetBrains IDEs tend to have very good static analysis and refactoring, not sure to what extent the model is exposed to query freely. OpenGrok also has some semantic features. Other than that I think you covered most of it in your article."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613378800.139200",
        "parent_user_id": "U01L6HZEHFX",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9168276c-daa7-485e-929f-6fdc0527ade2",
        "type": "message",
        "text": "the two products that come to mind are <https://codeql.github.com/docs/writing-codeql-queries/introduction-to-ql/|Semle's CodeQL> and <https://www.ndepend.com/docs/cqlinq-features#Object|NDepend's CQLinq>",
        "user": "UN9SCH5RD",
        "ts": "1613385144.143800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UN9SCH5RD",
            "ts": "1613385153.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1SgYB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the two products that come to mind are "
                            },
                            {
                                "type": "link",
                                "url": "https://codeql.github.com/docs/writing-codeql-queries/introduction-to-ql/",
                                "text": "Semle's CodeQL"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "https://www.ndepend.com/docs/cqlinq-features#Object",
                                "text": "NDepend's CQLinq"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613378800.139200",
        "parent_user_id": "U01L6HZEHFX"
    },
    {
        "client_msg_id": "30d1bb9a-0275-4e8c-8f3a-5d89b2b0aed5",
        "type": "message",
        "text": "It's a built-in feature of Smalltalk systems. And <@UE1JQM9HQ>'s Glamorous Toolkit is extending this approch to other languages.",
        "user": "UJBAJNFLK",
        "ts": "1613388523.144200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dJ4sH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's a built-in feature of Smalltalk systems. And "
                            },
                            {
                                "type": "user",
                                "user_id": "UE1JQM9HQ"
                            },
                            {
                                "type": "text",
                                "text": "'s Glamorous Toolkit is extending this approch to other languages."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613378800.139200",
        "parent_user_id": "U01L6HZEHFX",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UML4ZEKDK",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "b20f846a-6009-4531-b66f-4d8f08dc29b7",
        "type": "message",
        "text": "Our own platform is built on top of a reactive database model, and the builder assets are stored in the db, as is the executable (VM for now, soon to be wasm). This allows the interesting ability to build tools as apps in our builder, and also to have plugins that are themselves apps built using the builder. Furthermore the database is a git meets mongodb style multi versioned log structured thing so you can also access previous states of all entities.",
        "user": "U01JNTE35QS",
        "ts": "1613420999.144600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DQ7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Our own platform is built on top of a reactive database model, and the builder assets are stored in the db, as is the executable (VM for now, soon to be wasm). This allows the interesting ability to build tools as apps in our builder, and also to have plugins that are themselves apps built using the builder. Furthermore the database is a git meets mongodb style multi versioned log structured thing so you can also access previous states of all entities."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613378800.139200",
        "parent_user_id": "U01L6HZEHFX"
    }
]