[
    {
        "client_msg_id": "06165afc-58dc-4bf5-9240-be1808140864",
        "type": "message",
        "text": "IDK if you are looking for the more \"formal\" side of this but,\nI'm reminded of these projects that I had at the bottom of my bookmarks:\n<https://baturin.org/tools/bnfgen/>\n<https://lcamtuf.coredump.cx/afl/>\nThis kind of technique is used in fuzz testing quite a bit.\nIf you think about formal FSM/Automata theory, the normal way we use a FSM is to feed a string and see if it gets the end state (that's what a parser does).\nYou can also run a FSM in reverse to generate random strings from the grammar. The algorithm is usually something like: Start at the starting state, pick a random node, spit out the string that would match that node, pick the next random node, continue until you get to the finish state.\nTypically you have a way to backtrack out if you end up in an invalid node. Invalid nodes represent parse errors, so you would fail with an error if you were just reading some user input, but since you are generating your own string, the program can rewind out of the bad state.",
        "user": "U01661S9F34",
        "ts": "1613605209.243100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "47UdY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "IDK if you are looking for the more \"formal\" side of this but,\nI'm reminded of these projects that I had at the bottom of my bookmarks:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://baturin.org/tools/bnfgen/"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://lcamtuf.coredump.cx/afl/"
                            },
                            {
                                "type": "text",
                                "text": "\nThis kind of technique is used in fuzz testing quite a bit.\nIf you think about formal FSM/Automata theory, the normal way we use a FSM is to feed a string and see if it gets the end state (that's what a parser does).\nYou can also run a FSM in reverse to generate random strings from the grammar. The algorithm is usually something like: Start at the starting state, pick a random node, spit out the string that would match that node, pick the next random node, continue until you get to the finish state.\nTypically you have a way to backtrack out if you end up in an invalid node. Invalid nodes represent parse errors, so you would fail with an error if you were just reading some user input, but since you are generating your own string, the program can rewind out of the bad state."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613558709.208400",
        "parent_user_id": "UDQKHNP51"
    },
    {
        "client_msg_id": "82572ba1-cab1-4bd0-95f4-a67a8c7c0ad4",
        "type": "message",
        "text": "Interesting! I need to think more about the possible similarity to logic programming (which is already inspiring me in other ways :slightly_smiling_face:)",
        "user": "UCGAK10LS",
        "ts": "1613609273.243400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zbils",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting! I need to think more about the possible similarity to logic programming (which is already inspiring me in other ways "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613528098.183700",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "7be798a8-4f19-4bb5-8e19-f3ddcd5f619b",
        "type": "message",
        "text": "thanks, Ray. I\u2019ll look into them. I\u2019ve heard of Automata Theory, but I don\u2019t know more about it",
        "user": "UDQKHNP51",
        "ts": "1613628956.244000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+ZWw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "thanks, Ray. I\u2019ll look into them. I\u2019ve heard of Automata Theory, but I don\u2019t know more about it"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613558709.208400",
        "parent_user_id": "UDQKHNP51"
    },
    {
        "client_msg_id": "ec9afc78-8b5c-43b3-ba9d-c5b26f114b73",
        "type": "message",
        "text": "does anyone know of a knowledge management tool (Tiddlywiki, Roam) that allows you make linkable identifiers in code blocks?\n\nfor example, if I have this code\n```data Path a = Path Bool [PathSegment a] a```\nI want to make `PathSegment` linkable and have its definition in another tiddler/block/entry, etc.",
        "user": "UDQKHNP51",
        "ts": "1613629318.245700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Cy6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "does anyone know of a knowledge management tool (Tiddlywiki, Roam) that allows you make linkable identifiers in code blocks?\n\nfor example, if I have this code\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "data Path a = Path Bool [PathSegment a] a"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I want to make "
                            },
                            {
                                "type": "text",
                                "text": "PathSegment",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " linkable and have its definition in another tiddler/block/entry, etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613629318.245700",
        "reply_count": 7,
        "reply_users_count": 5,
        "latest_reply": "1613815722.022400",
        "reply_users": [
            "U013ZLJARC7",
            "UDQKHNP51",
            "UAVCC2X70",
            "UCUSW7WVD",
            "UHWC9PXBL"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "U016VUZGUUQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e611df3d-fb71-4bd6-829a-5ffe8eda4c05",
        "type": "message",
        "text": "We're experimenting with linking to/from code segments in NextJournal, but it'll be months before we have anything polished enough to show off.",
        "user": "U013ZLJARC7",
        "ts": "1613642646.246000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x9t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We're experimenting with linking to/from code segments in NextJournal, but it'll be months before we have anything polished enough to show off."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613629318.245700",
        "parent_user_id": "UDQKHNP51"
    },
    {
        "client_msg_id": "8c0c5fa6-3e15-4805-8457-e42b60c15389",
        "type": "message",
        "text": "the features sound great",
        "user": "UDQKHNP51",
        "ts": "1613651178.246200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DrL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the features sound great"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613629318.245700",
        "parent_user_id": "UDQKHNP51",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ae8092e7-8ac8-4fcb-a4b4-af149dc459f4",
        "type": "message",
        "text": "Has anyone stumbled upon interesting research around visual statecharts and state machines. Trying to come up with a really intuitive visual that captures the total power of something like x-state (fancy stuff like parallel state machines, recorded history on state machines....)",
        "user": "U01DX39SB33",
        "ts": "1613680693.247800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cpQ7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has anyone stumbled upon interesting research around visual statecharts and state machines. Trying to come up with a really intuitive visual that captures the total power of something like x-state (fancy stuff like parallel state machines, recorded history on state machines....)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613680693.247800",
        "reply_count": 26,
        "reply_users_count": 9,
        "latest_reply": "1613787910.018700",
        "reply_users": [
            "USL4R0T61",
            "U01DX39SB33",
            "UGWUJUZHT",
            "UC2A2ARPT",
            "U016VUZGUUQ",
            "UEBG0NPDK",
            "UN9SCH5RD",
            "U013ZLJARC7",
            "UHWC9PXBL"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heart_eyes",
                "users": [
                    "USL4R0T61"
                ],
                "count": 1
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U016VUZGUUQ",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "6a36b872-4bce-412c-bcd3-ef2e2a28caa6",
        "type": "message",
        "text": "I'm not aware of any but I'd be willing to help drum up some research. As a nerdy poet without the imagination required to be a mathematician (look up David Hilbert's quote), I feel helping derive visuals of complex subjects may be the only contribution I can bring to the science that I love. Creating something like this could be the single most important contribution in the formation of a benevolent general artificial intelligence.",
        "user": "USL4R0T61",
        "ts": "1613681314.248000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WRiyG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not aware of any but I'd be willing to help drum up some research. As a nerdy poet without the imagination required to be a mathematician (look up David Hilbert's quote), I feel helping derive visuals of complex subjects may be the only contribution I can bring to the science that I love. Creating something like this could be the single most important contribution in the formation of a benevolent general artificial intelligence."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613680693.247800",
        "parent_user_id": "U01DX39SB33"
    },
    {
        "client_msg_id": "75532447-70f0-4097-a9bb-94ed549036cd",
        "type": "message",
        "text": "hehe, I love that quote",
        "user": "U01DX39SB33",
        "ts": "1613682848.248300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fK2a",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "hehe, I love that quote"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613680693.247800",
        "parent_user_id": "U01DX39SB33"
    },
    {
        "client_msg_id": "df0d29f9-ca3b-42ad-95a8-9cfb0f953452",
        "type": "message",
        "text": "If you're free to chat a bit, I'm happy to jump on a call and show you what I'm stuck on and why",
        "user": "U01DX39SB33",
        "ts": "1613682861.248500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dl5Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you're free to chat a bit, I'm happy to jump on a call and show you what I'm stuck on and why"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613680693.247800",
        "parent_user_id": "U01DX39SB33"
    },
    {
        "client_msg_id": "25de618d-7c69-4fee-82e9-6151c2eb3a37",
        "type": "message",
        "text": "I\u2019ve done a lot of practical work with statecharts.\n\nI lean towards cleaving paradigms apart - e.g. statecharts = (1) concurrency and (2) hierarchical state machines.\n\nI  compile diagrams to code and am working on a description of the techniques.\n\nInteresting, related, stuff: FBP (Flow-Based Programming), Drakon, PEG parsing, Full Metal Jacket.\n\nMy reading of Harel\u2019s StateCharts paper is online.",
        "user": "UGWUJUZHT",
        "ts": "1613683210.248700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "31n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019ve done a lot of practical work with statecharts.\n\nI lean towards cleaving paradigms apart - e.g. statecharts = (1) concurrency and (2) hierarchical state machines.\n\nI  compile diagrams to code and am working on a description of the techniques.\n\nInteresting, related, stuff: FBP (Flow-Based Programming), Drakon, PEG parsing, Full Metal Jacket.\n\nMy reading of Harel\u2019s StateCharts paper is online."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613680693.247800",
        "parent_user_id": "U01DX39SB33",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "USL4R0T61",
                    "U01DX39SB33"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "5818a04e-7761-4bf3-8712-7efd04e9fb0d",
        "type": "message",
        "text": "The most interesting recent work that I'm aware of is InterState\n\n<https://www.youtube.com/watch?v=M--9jsuDZis>",
        "user": "UC2A2ARPT",
        "ts": "1613685351.249000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "InterState",
                "title_link": "https://www.youtube.com/watch?v=M--9jsuDZis",
                "author_name": "Steve Oney",
                "author_link": "https://www.youtube.com/channel/UCNmHEWumsRDoiaABVyCRdeg",
                "thumb_url": "https://i.ytimg.com/vi/M--9jsuDZis/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: InterState",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/M--9jsuDZis?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=M--9jsuDZis",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=M--9jsuDZis"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hy0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The most interesting recent work that I'm aware of is InterState\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=M--9jsuDZis"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613680693.247800",
        "parent_user_id": "U01DX39SB33",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "USL4R0T61",
                    "UFPPABQ7P",
                    "U013ZLJARC7",
                    "UHWC9PXBL"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "0c9429f0-45fd-435b-9cca-26e50705b2c2",
        "type": "message",
        "text": "(For lots of examples of visual programming, including some tools specifically focussed on state space visualization (including the aforementioned Drakon and Full Metal Jacket), see the <https://github.com/ivanreese/visual-programming-codex/blob/master/implementations.md|Implementations> page in my <https://github.com/ivanreese/visual-programming-codex/|Visual Programming Codex>)",
        "user": "UC2A2ARPT",
        "ts": "1613685521.249300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1613685526.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8Pf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(For lots of examples of visual programming, including some tools specifically focussed on state space visualization (including the aforementioned Drakon and Full Metal Jacket), see the "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/ivanreese/visual-programming-codex/blob/master/implementations.md",
                                "text": "Implementations"
                            },
                            {
                                "type": "text",
                                "text": " page in my "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/ivanreese/visual-programming-codex/",
                                "text": "Visual Programming Codex"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613680693.247800",
        "parent_user_id": "U01DX39SB33",
        "reactions": [
            {
                "name": "tada",
                "users": [
                    "USL4R0T61",
                    "U01DX39SB33"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "90e550f8-bfbe-437f-bd62-3edc3235a66d",
        "type": "message",
        "text": "I'm gonna shoot a video of my problem and send it over in a bit to give you fine folks a sense of the magnitude of the challenge I'm dealing with",
        "user": "U01DX39SB33",
        "ts": "1613686238.249900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JdpSR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm gonna shoot a video of my problem and send it over in a bit to give you fine folks a sense of the magnitude of the challenge I'm dealing with"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613680693.247800",
        "parent_user_id": "U01DX39SB33",
        "reactions": [
            {
                "name": "boom",
                "users": [
                    "UC2A2ARPT",
                    "USL4R0T61",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "99ed6f32-08b0-4a81-bba7-acf89ea29ce8",
        "type": "message",
        "text": "I almost asked this same question! I ran into the concept of \"behavior trees\" while looking for stuff about HFSMs, and thought they looked interesting  (BTs start on slide 12): <https://web.stanford.edu/class/cs123/lectures/CS123_lec08_HFSM_BT.pdf|https://web.stanford.edu/class/cs123/lectures/CS123_lec08_HFSM_BT.pdf> They apparently originated in video game AI, but in the context of these lecture notes are meant for robot AI. They struck me as an intuitive and powerful state machine formalism, almost a general-purpose code formalism.\n\nAnyway, I would love to see field accounts of these ideas, especially if put in the hands of ostensible non-programmers.",
        "user": "U016VUZGUUQ",
        "ts": "1613686622.250300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U016VUZGUUQ",
            "ts": "1613686655.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AZk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I almost asked this same question! I ran into the concept of \"behavior trees\" while looking for stuff about HFSMs, and thought they looked interesting  (BTs start on slide 12): "
                            },
                            {
                                "type": "link",
                                "url": "https://web.stanford.edu/class/cs123/lectures/CS123_lec08_HFSM_BT.pdf",
                                "text": "https://web.stanford.edu/class/cs123/lectures/CS123_lec08_HFSM_BT.pdf"
                            },
                            {
                                "type": "text",
                                "text": " They apparently originated in video game AI, but in the context of these lecture notes are meant for robot AI. They struck me as an intuitive and powerful state machine formalism, almost a general-purpose code formalism.\n\nAnyway, I would love to see field accounts of these ideas, especially if put in the hands of ostensible non-programmers."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613680693.247800",
        "parent_user_id": "U01DX39SB33",
        "reactions": [
            {
                "name": "point_up_2",
                "users": [
                    "USL4R0T61"
                ],
                "count": 1
            },
            {
                "name": "eyes",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c96a8e9d-11cf-4bf7-83db-41212968912e",
        "type": "message",
        "text": "Why don't we have a group brainstorm session if we still need to explore it?",
        "user": "USL4R0T61",
        "ts": "1613687924.250800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A32bI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Why don't we have a group brainstorm session if we still need to explore it?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613680693.247800",
        "parent_user_id": "U01DX39SB33"
    }
]