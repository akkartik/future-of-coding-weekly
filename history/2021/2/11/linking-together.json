[
    {
        "client_msg_id": "94e38415-4f51-4478-929d-44fc83704ef7",
        "type": "message",
        "text": "To be fair, I actually think this project is perfect for most of the HN user base.  It builds on a safe web stack they're familiar with and significantly reduces boilerplate, which is dreaded\\hated by HN, I guess because users are making a lot of small greenfield web apps\\MVPs\\side projects",
        "user": "UBSMEUXAA",
        "ts": "1612998007.099800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OqGHm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To be fair, I actually think this project is perfect for most of the HN user base.  It builds on a safe web stack they're familiar with and significantly reduces boilerplate, which is dreaded\\hated by HN, I guess because users are making a lot of small greenfield web apps\\MVPs\\side projects"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612994537.098500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "9534f179-e356-42bf-a37f-241446da193e",
        "type": "message",
        "text": "&gt; Wasp is an open source, declarative DSL for devs who want to\u00a0use modern web dev stack\u00a0(React\u00a0, Node.js\u00a0, Prisma\u00a0, ...)\u00a0without writing boilerplate.",
        "user": "UBSMEUXAA",
        "ts": "1612998017.100000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z/6",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wasp is an open source, declarative DSL for devs who want to\u00a0use modern web dev stack\u00a0(React\u00a0, Node.js\u00a0, Prisma\u00a0, ...)\u00a0without writing boilerplate."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612994537.098500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "f428e5e5-ffc8-47b2-9e9f-95a028a7f94c",
        "type": "message",
        "text": "I've actually wondered for a while why there isn't an ML library atop an array language.",
        "user": "UCUSW7WVD",
        "ts": "1613001236.100200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9Te",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've actually wondered for a while why there isn't an ML library atop an array language."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612950875.084700",
        "parent_user_id": "U013ZLJARC7"
    },
    {
        "client_msg_id": "847c2979-f40e-4cf0-8b80-405c108f070d",
        "type": "message",
        "text": "<@UBN9AFS0N> thanks for sharing, yes we got accepted to this YC batch!! I was planning on sharing that on FoC these days but you were faster - it only became public information today, with our HN launch.\nWe are still in alpha, and still have a lot of things to figure out, but getting into a YC is a big step for us in the sense of giving us an opportunity to get a real shot at Wasp.\nAnyway, we are happy to be part of FoC, it has been source of both inspiration and feedback so far and we are looking forward to participating more in the future :).",
        "user": "UUB7RA7PF",
        "ts": "1613002877.100400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zVA=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " thanks for sharing, yes we got accepted to this YC batch!! I was planning on sharing that on FoC these days but you were faster - it only became public information today, with our HN launch.\nWe are still in alpha, and still have a lot of things to figure out, but getting into a YC is a big step for us in the sense of giving us an opportunity to get a real shot at Wasp.\nAnyway, we are happy to be part of FoC, it has been source of both inspiration and feedback so far and we are looking forward to participating more in the future :)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612994537.098500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "fa20175a-68cc-4492-b593-320c12863575",
        "type": "message",
        "text": "<@UHWC9PXBL> I have to admit I was also ready for worse, due to experiences on Reddit, but you will not hear me complain :D. Fingers crossed :crossed_fingers:",
        "user": "UUB7RA7PF",
        "ts": "1613002950.100600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yEii",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " I have to admit I was also ready for worse, due to experiences on Reddit, but you will not hear me complain :D. Fingers crossed "
                            },
                            {
                                "type": "emoji",
                                "name": "crossed_fingers"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612994537.098500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "2e4faad3-2752-4575-8c4c-611e15a6ab0f",
        "type": "message",
        "text": "<@UBN9AFS0N> yes that is us (<@UUB7RA7PF> and <@UU509GSBU>)! Super happy to be part of this community, and let's see where this takes us!",
        "user": "UUB7RA7PF",
        "ts": "1613003019.101600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zEE88",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " yes that is us ("
                            },
                            {
                                "type": "user",
                                "user_id": "UUB7RA7PF"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "user",
                                "user_id": "UU509GSBU"
                            },
                            {
                                "type": "text",
                                "text": ")! Super happy to be part of this community, and let's see where this takes us!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "tada",
                "users": [
                    "UBN9AFS0N",
                    "UU509GSBU"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "4FB79B8C-5EDF-4227-805A-0CB560352482",
        "type": "message",
        "text": "you should put your docs and website copy on github! i have some minor grammar edits already. excited to dig into the project ",
        "user": "UHWC9PXBL",
        "ts": "1613004145.102600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a0rMh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you should put your docs and website copy on github! i have some minor grammar edits already. excited to dig into the project "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612994537.098500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "AA8BD315-E73A-4E62-B4F0-20B300E93800",
        "type": "message",
        "text": "<https://youtu.be/X83vac2uTUs|https://youtu.be/X83vac2uTUs> really pleasant and cool video and visualization of someone doing what i\u2019d call \u201cmath engineering\u201d. the various geometric algebra folks might be interested... because it involves geometry and matrices ",
        "user": "UHWC9PXBL",
        "ts": "1613004213.104400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Extraordinary Conics: The Most Difficult Math Problem I Ever Solved",
                "title_link": "https://youtu.be/X83vac2uTUs",
                "author_name": "CodeParade",
                "author_link": "https://www.youtube.com/channel/UCrv269YwJzuZL3dH5PCgxUw",
                "thumb_url": "https://i.ytimg.com/vi/X83vac2uTUs/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Extraordinary Conics: The Most Difficult Math Problem I Ever Solved",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/X83vac2uTUs?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/X83vac2uTUs",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/X83vac2uTUs"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XGI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://youtu.be/X83vac2uTUs",
                                "text": "https://youtu.be/X83vac2uTUs"
                            },
                            {
                                "type": "text",
                                "text": " really pleasant and cool video and visualization of someone doing what i\u2019d call \u201cmath engineering\u201d. the various geometric algebra folks might be interested... because it involves geometry and matrices "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613004213.104400",
        "reply_count": 3,
        "reply_users_count": 1,
        "latest_reply": "1613071014.109600",
        "reply_users": [
            "UAJKEBGP8"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "a0e0f3c2-ecf7-4031-94da-6c70f821409d",
        "type": "message",
        "text": "<@UHWC9PXBL> They actually are on github, just in different repo (I am regretting more and more that we separated them from the core codebase instead of doing monorepo): <https://github.com/wasp-lang/web> . Feel free to make PRs :slightly_smiling_face:! If you want to dig in deeper let us know, we would be happy to show you around and help if you get stuck with anything.",
        "user": "UUB7RA7PF",
        "ts": "1613005042.104600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "wasp-lang/web",
                "title_link": "https://github.com/wasp-lang/web",
                "text": "Website, docs and blog. Contribute to wasp-lang/web development by creating an account on GitHub.",
                "fallback": "GitHub: wasp-lang/web",
                "thumb_url": "https://avatars.githubusercontent.com/u/55102317?s=400&v=4",
                "from_url": "https://github.com/wasp-lang/web",
                "thumb_width": 294,
                "thumb_height": 294,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/wasp-lang/web"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "klgq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " They actually are on github, just in different repo (I am regretting more and more that we separated them from the core codebase instead of doing monorepo): "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/wasp-lang/web"
                            },
                            {
                                "type": "text",
                                "text": " . Feel free to make PRs "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": "! If you want to dig in deeper let us know, we would be happy to show you around and help if you get stuck with anything."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612994537.098500",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "E2E62F75-71D5-4E00-8F1A-9A2B48B7D96C",
        "type": "message",
        "text": "that\u2019s great to hear! i\u2019ll check it out tomorrow!",
        "user": "UHWC9PXBL",
        "ts": "1613005075.105300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cqTGY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "that\u2019s great to hear! i\u2019ll check it out tomorrow!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612994537.098500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "0b4212cf-f321-45dd-9f97-eef5798aa221",
        "type": "message",
        "text": "I have asked before, \"Where do you get the idea that you can sit down with MATLAB and do anything useful by just typing in some equations roughly the same as you would write them on a piece of paper?\"",
        "user": "UA14TGLTC",
        "ts": "1613027570.106100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aDZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have asked before, \"Where do you get the idea that you can sit down with MATLAB and do anything useful by just typing in some equations roughly the same as you would write them on a piece of paper?\""
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612032903.026500",
        "parent_user_id": "UBSMEUXAA"
    },
    {
        "client_msg_id": "47b98bbb-ae17-446a-b548-5b5de7b940a7",
        "type": "message",
        "text": "<@UCUSW7WVD> I think it's because libraries provide similar features in languages that people are otherwise more comfortable using.",
        "user": "U013ZLJARC7",
        "ts": "1613030466.106300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vjYMj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " I think it's because libraries provide similar features in languages that people are otherwise more comfortable using."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612950875.084700",
        "parent_user_id": "U013ZLJARC7",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "30b438df-c369-4fac-ad72-7439ae7e575e",
        "type": "message",
        "text": "Libraries can also fit more easily into existing systems.",
        "user": "UA14TGLTC",
        "ts": "1613035064.107200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lh/TZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Libraries can also fit more easily into existing systems."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612950875.084700",
        "parent_user_id": "U013ZLJARC7",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "86ad7a60-ab6d-4678-aa1f-070ab89948e0",
        "type": "message",
        "text": "The real point of the thing is how few moving parts there are if one uses the right primitives. There's no reason a library or DSL couldn't make it this easy in another language. (Though likely with longer names :joy_cat:.)",
        "user": "U013ZLJARC7",
        "ts": "1613047245.107700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9z/u/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The real point of the thing is how few moving parts there are if one uses the right primitives. There's no reason a library or DSL couldn't make it this easy in another language. (Though likely with longer names "
                            },
                            {
                                "type": "emoji",
                                "name": "joy_cat"
                            },
                            {
                                "type": "text",
                                "text": ".)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612950875.084700",
        "parent_user_id": "U013ZLJARC7",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7178477d-3df3-4f8a-b6ab-1882c655ac83",
        "type": "message",
        "text": "other cofounder here, I am also in the FoC community but a bit less active than <@UUB7RA7PF> - thank you all for your support and linking the post here :slightly_smiling_face: happy to get your feedback and answer any questions",
        "user": "UU509GSBU",
        "ts": "1613051531.108300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1cpV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "other cofounder here, I am also in the FoC community but a bit less active than "
                            },
                            {
                                "type": "user",
                                "user_id": "UUB7RA7PF"
                            },
                            {
                                "type": "text",
                                "text": " - thank you all for your support and linking the post here "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " happy to get your feedback and answer any questions"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612994537.098500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "086d6e96-c67a-4d4d-adb6-460b01e0f360",
        "type": "message",
        "text": "this was so refreshing to read: <https://litestream.io/blog/why-i-built-litestream/>",
        "user": "UAJKEBGP8",
        "ts": "1613070905.109000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Litestream",
                "title": "Why I Built Litestream",
                "title_link": "https://litestream.io/blog/why-i-built-litestream/",
                "text": "Despite an exponential increase in computing power, our applications require more machines than ever because of architectural decisions made 25 years ago. You can eliminate much of your complexity and cost by using SQLite &amp; Litestream for your production applications.",
                "fallback": "Litestream: Why I Built Litestream",
                "image_url": "https://litestream.io/images/twitter-image.png",
                "ts": 1612915200,
                "from_url": "https://litestream.io/blog/why-i-built-litestream/",
                "image_width": 500,
                "image_height": 250,
                "image_bytes": 245353,
                "service_icon": "https://litestream.io/favicon.ico",
                "id": 1,
                "original_url": "https://litestream.io/blog/why-i-built-litestream/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wmj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this was so refreshing to read: "
                            },
                            {
                                "type": "link",
                                "url": "https://litestream.io/blog/why-i-built-litestream/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "reply_count": 44,
        "reply_users_count": 6,
        "latest_reply": "1613216003.136800",
        "reply_users": [
            "UEBG0NPDK",
            "UAJKEBGP8",
            "U01FAFPDFL4",
            "U01661S9F34",
            "U01KZQEQVUP",
            "UA14TGLTC"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "594ca3ab-594b-4c37-9910-bbaffa2e05b6",
        "type": "message",
        "text": "\u201cI have no idea how to prove it, I just observed that it works\u201d",
        "user": "UAJKEBGP8",
        "ts": "1613071002.109200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eg9wO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\u201cI have no idea how to prove it, I just observed that it works\u201d"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613004213.104400",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "9a881ff4-0c8f-40c3-a18c-afdd2b318456",
        "type": "message",
        "text": "love it!",
        "user": "UAJKEBGP8",
        "ts": "1613071004.109400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iq8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "love it!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613004213.104400",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "8cb6d367-575e-4829-9f0d-87f2267bd788",
        "type": "message",
        "text": "intuition first, hardened proof second",
        "user": "UAJKEBGP8",
        "ts": "1613071014.109600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Otur",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "intuition first, hardened proof second"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613004213.104400",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "503b552b-9026-4e32-8b6d-fcc797890c7b",
        "type": "message",
        "text": "This echos my philosophy as well - almost no one is building a system that really requires more than one machine. The belief that we are has caused us to add so much incidental cruft that if you use industry best practices, you actually _do_ need multiple machines. Taking an extreme example, the entire write load of twitter is only ~6k tweets/s, which can easily fit on a single machine. As another, there\u2019s a great paper from the hyper folks that showed you could serve <http://www.vldb.org/pvldb/vol10/p1921-schuele.pdf|all of the queries to wikipedia from a single instance>. If you use them well, computers are insanely fast. The problem is just that we use them really poorly and because of the incentives around software, we\u2019re more likely to go with our first poor solution to a problem than taking the time to come to a good one. This is how we ended up with things like Hadoop which are millions of lines of code to run 100+ node clusters that <https://blog.acolyer.org/2015/06/05/scalability-but-at-what-cost/|can\u2019t beat a laptop>.",
        "user": "UEBG0NPDK",
        "ts": "1613072679.109800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1613073524.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lZK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This echos my philosophy as well - almost no one is building a system that really requires more than one machine. The belief that we are has caused us to add so much incidental cruft that if you use industry best practices, you actually "
                            },
                            {
                                "type": "text",
                                "text": "do",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " need multiple machines. Taking an extreme example, the entire write load of twitter is only ~6k tweets/s, which can easily fit on a single machine. As another, there\u2019s a great paper from the hyper folks that showed you could serve "
                            },
                            {
                                "type": "link",
                                "url": "http://www.vldb.org/pvldb/vol10/p1921-schuele.pdf",
                                "text": "all of the queries to wikipedia from a single instance"
                            },
                            {
                                "type": "text",
                                "text": ". If you use them well, computers are insanely fast. The problem is just that we use them really poorly and because of the incentives around software, we\u2019re more likely to go with our first poor solution to a problem than taking the time to come to a good one. This is how we ended up with things like Hadoop which are millions of lines of code to run 100+ node clusters that "
                            },
                            {
                                "type": "link",
                                "url": "https://blog.acolyer.org/2015/06/05/scalability-but-at-what-cost/",
                                "text": "can\u2019t beat a laptop"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U5STGTB3J",
                    "U01FAFPDFL4",
                    "UHWC9PXBL",
                    "UPD5QQW81",
                    "U013ZLJARC7",
                    "UML4ZEKDK",
                    "UA14TGLTC"
                ],
                "count": 7
            }
        ]
    },
    {
        "client_msg_id": "5d183e69-e010-4306-aca8-c91280de39f4",
        "type": "message",
        "text": "*oh boy, this hits ^* ",
        "user": "UAJKEBGP8",
        "ts": "1613074498.110100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "br6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "oh boy, this hits ^ ",
                                "style": {
                                    "bold": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "924639d0-e6c1-46a8-8d76-3c167aec7333",
        "type": "message",
        "text": "yeah theres a lot to be said here\u2026 I think the move fast / startup mindset of building \u201cjust enough\u201d software quickly / inefficiently until the next set of scale hits (and new set of engineers can wrangle the PGbouncer ) has been the modus operandi",
        "user": "UAJKEBGP8",
        "ts": "1613074538.110300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qwqKx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah theres a lot to be said here\u2026 I think the move fast / startup mindset of building \u201cjust enough\u201d software quickly / inefficiently until the next set of scale hits (and new set of engineers can wrangle the PGbouncer ) has been the modus operandi"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "9715052b-ed6a-411b-b316-67ff2319ada2",
        "type": "message",
        "text": "the counter to this thinking is Jonathan Blow (and others like ALan Kay ofc).",
        "user": "UAJKEBGP8",
        "ts": "1613074561.110500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0l=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the counter to this thinking is Jonathan Blow (and others like ALan Kay ofc)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "fada6e2d-b4d6-453c-a748-6bec91983ff3",
        "type": "message",
        "text": "Crave Cookie runs on Crystal + sqlite, &lt;$300 a month: <https://www.indiehackers.com/podcast/166-sam-eaton-of-crave-cookie>",
        "user": "UAJKEBGP8",
        "ts": "1613074580.110700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAJKEBGP8",
            "ts": "1613074800.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9N3e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Crave Cookie runs on Crystal + sqlite, <$300 a month: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.indiehackers.com/podcast/166-sam-eaton-of-crave-cookie"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "9c98ae1e-f4f3-4efa-a6ce-62b41ebea79c",
        "type": "message",
        "text": "but this requires a slower, artisan attitude. Which is unfortunate\u2026",
        "user": "UAJKEBGP8",
        "ts": "1613074596.110900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FgUKP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "but this requires a slower, artisan attitude. Which is unfortunate\u2026"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "ff8d155f-d1a1-4a90-b794-76f5677310a5",
        "type": "message",
        "text": "I\u2019m more on the data science side of things, and the layers of abstraction I keep encountering there is absolutely bonkers.",
        "user": "UAJKEBGP8",
        "ts": "1613074615.111200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d2yL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019m more on the data science side of things, and the layers of abstraction I keep encountering there is absolutely bonkers."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "0412dd1f-25dc-4c3a-a53a-d80322ac2694",
        "type": "message",
        "text": "Yeah, the problem is that \u201cfixing\u201d this would require a whole lot of unlearning and re-education, which just isn\u2019t likely to happen",
        "user": "UEBG0NPDK",
        "ts": "1613074681.111500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k4ZQL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, the problem is that \u201cfixing\u201d this would require a whole lot of unlearning and re-education, which just isn\u2019t likely to happen"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "e4a04897-9a3b-44dd-a9ff-0d837f89000f",
        "type": "message",
        "text": "TL;DR my take is that systems software engineering is just software engineering turned into risk management",
        "user": "UAJKEBGP8",
        "ts": "1613074684.111700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/kEv9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "TL;DR my take is that systems software engineering is just software engineering turned into risk management"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "2288a447-4ad2-4486-ae7a-fdb031065e37",
        "type": "message",
        "text": "yup",
        "user": "UAJKEBGP8",
        "ts": "1613074699.111900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hAD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yup"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "a7642ca7-9df3-4f18-b1b0-d770d76f1982",
        "type": "message",
        "text": "ultimately, new inventions tailored to new use cases are probably the only way these types of things go away. E.g. you can\u2019t build \u201cthe next Google\u201d by replicating what Google does, but worse. You have to build the thing that replaces the need for <http://Google.com|Google.com> with a different solution",
        "user": "UAJKEBGP8",
        "ts": "1613074748.112100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yDwxI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ultimately, new inventions tailored to new use cases are probably the only way these types of things go away. E.g. you can\u2019t build \u201cthe next Google\u201d by replicating what Google does, but worse. You have to build the thing that replaces the need for "
                            },
                            {
                                "type": "link",
                                "url": "http://Google.com",
                                "text": "Google.com"
                            },
                            {
                                "type": "text",
                                "text": " with a different solution"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "910a82bf-9742-4503-9fe6-06109e4e9dbd",
        "type": "message",
        "text": "in many ways, true personal computing inventions could reduce the need for all this systems complexity (over time)",
        "user": "UAJKEBGP8",
        "ts": "1613074766.112300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5Yn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in many ways, true personal computing inventions could reduce the need for all this systems complexity (over time)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "c3ca0c9b-f535-4169-9524-f1837fdb6569",
        "type": "message",
        "text": "My hope is to flip the problem on its head and show that part of the problem is we didn\u2019t actually go high level enough. Languages like python still let you specify too many details and those details are what prevent us from creating compilers that output extremely high performance programs by default. We can\u2019t expect everyone to magically become great systems programmers, but giving them tools where a single integer add takes ~30 instructions is hell of a handicap to start with.",
        "user": "UEBG0NPDK",
        "ts": "1613075020.112700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1613075378.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qRSc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My hope is to flip the problem on its head and show that part of the problem is we didn\u2019t actually go high level enough. Languages like python still let you specify too many details and those details are what prevent us from creating compilers that output extremely high performance programs by default. We can\u2019t expect everyone to magically become great systems programmers, but giving them tools where a single integer add takes ~30 instructions is hell of a handicap to start with."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U016VUZGUUQ",
                    "UHWC9PXBL",
                    "UCGAK10LS",
                    "U013ZLJARC7",
                    "UA14TGLTC"
                ],
                "count": 5
            }
        ]
    },
    {
        "client_msg_id": "da3f764a-322c-4806-abd9-78685303c51f",
        "type": "message",
        "text": "Chris Lattner\u2019s (LLVM, Swift) thesis actually talks a bit about this and his attempt to try and create a layout aware compiler",
        "user": "UEBG0NPDK",
        "ts": "1613075104.112900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fm6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Chris Lattner\u2019s (LLVM, Swift) thesis actually talks a bit about this and his attempt to try and create a layout aware compiler"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "4af3d280-930b-4871-9cc3-ae2a19dd6b69",
        "type": "message",
        "text": "rather than trying to convince anyone to unlearn stuff though, something like better compilers seems like a much more likely path to success",
        "user": "UEBG0NPDK",
        "ts": "1613075137.113100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1613075470.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j21L2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "rather than trying to convince anyone to unlearn stuff though, something like better compilers seems like a much more likely path to success"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "acf2d087-38ee-4343-9cf0-34b7daf2a01f",
        "type": "message",
        "text": "it has to just be the default somehow",
        "user": "UEBG0NPDK",
        "ts": "1613075152.113300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ybO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it has to just be the default somehow"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "BBC31952-98CB-4D03-AB77-56DF0B19A88E",
        "type": "message",
        "text": "Well put <@UEBG0NPDK>  <@UAJKEBGP8>. I think this is a general problem of software development, not just \u201csystems engineering\u201d. Too much focus on trends / hypes / frameworks, which causes overcomplicated solutions for even the simplest cases",
        "user": "U01FAFPDFL4",
        "ts": "1613075841.118500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vox7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well put "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": "  "
                            },
                            {
                                "type": "user",
                                "user_id": "UAJKEBGP8"
                            },
                            {
                                "type": "text",
                                "text": ". I think this is a general problem of software development, not just \u201csystems engineering\u201d. Too much focus on trends / hypes / frameworks, which causes overcomplicated solutions for even the simplest cases"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "B723B9A5-CD70-4A8B-B61A-3886CC7E9812",
        "type": "message",
        "text": "Thinking out loud: A higher level language would be a solution, but should probably work across the stack in order to really reduce complexity of entire applications",
        "user": "U01FAFPDFL4",
        "ts": "1613076006.121400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fxg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thinking out loud: A higher level language would be a solution, but should probably work across the stack in order to really reduce complexity of entire applications"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "422858db-6da0-44dc-8eb6-4dc6cc9f8661",
        "type": "message",
        "text": "Fun related anecdote, the, original NASDAQ system ran on a single machine (using Java no less)! <https://signalsandthreads.com/multicast-and-the-markets/#2923>\nIt actually made things a lot easier for making sure transactions were correctly synchronized. Then you just had to make sure the network routed things well.",
        "user": "U01661S9F34",
        "ts": "1613076711.121700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01661S9F34",
            "ts": "1613076743.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MZkG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fun related anecdote, the, original NASDAQ system ran on a single machine (using Java no less)! "
                            },
                            {
                                "type": "link",
                                "url": "https://signalsandthreads.com/multicast-and-the-markets/#2923"
                            },
                            {
                                "type": "text",
                                "text": "\nIt actually made things a lot easier for making sure transactions were correctly synchronized. Then you just had to make sure the network routed things well."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8",
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "UAJKEBGP8",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "770a843a-69db-487d-8e07-3f7196922839",
        "type": "message",
        "text": "<@U01FAFPDFL4> yeah, I think the key really is having system level understand-ability. Even if a language was higher level but the abstractions it was built on are leaky / shaky, you\u2019re in for trouble. Arguably Ruby / Python are higher level in some specific ways but systems understanding is poorer (hence the need for systems engineering / risk management / server-wrangling)",
        "user": "UAJKEBGP8",
        "ts": "1613076998.122100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wy6Z6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01FAFPDFL4"
                            },
                            {
                                "type": "text",
                                "text": " yeah, I think the key really is having system level understand-ability. Even if a language was higher level but the abstractions it was built on are leaky / shaky, you\u2019re in for trouble. Arguably Ruby / Python are higher level in some specific ways but systems understanding is poorer (hence the need for systems engineering / risk management / server-wrangling)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "0480fbb5-6d2a-4338-ab5b-e2933856ab1e",
        "type": "message",
        "text": "Open Problems in Communication and Computation [pdf] - <https://raganwald.com/assets/fractran/open-problems-in-communication-and-computation-1987.pdf|https://raganwald.com/assets/fractran/open-problems-in-communication-and-computation-1987.pdf>",
        "user": "UPVBV34EL",
        "ts": "1613078478.122600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Pxrcn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Open Problems in Communication and Computation [pdf] - "
                            },
                            {
                                "type": "link",
                                "url": "https://raganwald.com/assets/fractran/open-problems-in-communication-and-computation-1987.pdf",
                                "text": "https://raganwald.com/assets/fractran/open-problems-in-communication-and-computation-1987.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613078478.122600",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1613132344.130500",
        "reply_users": [
            "UPVBV34EL"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "3b169819-d95c-488c-979f-bbd5a8d9828e",
        "type": "message",
        "text": "<@UEBG0NPDK>\n&gt; My hope is to flip the problem on its head and show that part of the problem is we didn\u2019t actually go high level enough. Languages like python still let you specify too many details and those details are what prevent us from creating compilers that output extremely high performance programs by default.\nThis reminds me of the Haskell ethos a bit?\nA language designed to describe pure computation at an extremely high level, then let the compiler figure out efficient ways to run those computations. The language is so high level that it didn't support the very concept of side effects (causing them to invent/discover the monad...)\n\nThe result is that the GHC compiler truly is a marvel of modern engineering. But (devils advocate time), It took 30 years of the most advanced CS research to get here, and it still has extremely unpredictable performance gotchas in some places.\n\nMaybe it's because I've been jaded by our current world, but I can't see \"higher level\" as a solution.\n\nMainly because \"creating compilers that output extremely high performance programs by default\" is actually a *really* hard problem for the general case. Part of the problem being: there is no single _general case._ \n\n<@UAJKEBGP8> makes the point, a higher level language often results in poorer systems understanding, not greater. Or to put it another way, all abstractions are leaky eventually... How do you handle it when the leaks happen?",
        "user": "U01661S9F34",
        "ts": "1613082733.122700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RTa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My hope is to flip the problem on its head and show that part of the problem is we didn\u2019t actually go high level enough. Languages like python still let you specify too many details and those details are what prevent us from creating compilers that output extremely high performance programs by default."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This reminds me of the Haskell ethos a bit?\nA language designed to describe pure computation at an extremely high level, then let the compiler figure out efficient ways to run those computations. The language is so high level that it didn't support the very concept of side effects (causing them to invent/discover the monad...)\n\nThe result is that the GHC compiler truly is a marvel of modern engineering. But (devils advocate time), It took 30 years of the most advanced CS research to get here, and it still has extremely unpredictable performance gotchas in some places.\n\nMaybe it's because I've been jaded by our current world, but I can't see \"higher level\" as a solution.\n\nMainly because \"creating compilers that output extremely high performance programs by default\" is actually a "
                            },
                            {
                                "type": "text",
                                "text": "really",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " hard problem for the general case. Part of the problem being: there is no single "
                            },
                            {
                                "type": "text",
                                "text": "general case. ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UAJKEBGP8"
                            },
                            {
                                "type": "text",
                                "text": " makes the point, a higher level language often results in poorer systems understanding, not greater. Or to put it another way, all abstractions are leaky eventually... How do you handle it when the leaks happen?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d09711c3-8de7-48dd-a1bd-23ef088e5da8",
        "type": "message",
        "text": "Haskell focused much more on things that are counter to what would make something understandable and fast, e.g. laziness.",
        "user": "UEBG0NPDK",
        "ts": "1613082811.122900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "28jRi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Haskell focused much more on things that are counter to what would make something understandable and fast, e.g. laziness."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8",
        "reactions": [
            {
                "name": "open_mouth",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f1e1c4cf-3563-4e8a-a5f0-dbb2621f9756",
        "type": "message",
        "text": "There are a handful of patterns we know to have very good performance by default, the question is can we you create a language that can be compiled to those patterns and whose idioms feel natural to the user, such that you\u2019re not constantly trying to go around them (side effects in haskell being a good example).",
        "user": "UEBG0NPDK",
        "ts": "1613083084.123100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qnXl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are a handful of patterns we know to have very good performance by default, the question is can we you create a language that can be compiled to those patterns and whose idioms feel natural to the user, such that you\u2019re not constantly trying to go around them (side effects in haskell being a good example)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "5c5800d7-f0fd-4ac9-8e98-4ef689cef61b",
        "type": "message",
        "text": "Another approach is to separate the specification from the layout ala relational DB world.",
        "user": "UEBG0NPDK",
        "ts": "1613083115.123300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8/wE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another approach is to separate the specification from the layout ala relational DB world."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "03f40529-0d8f-436b-a919-8c645181eba5",
        "type": "message",
        "text": "the logic of a program doesn\u2019t _have_ to bake in access paths, that\u2019s just an artifact of the way our languages evolved. If we didn\u2019t have pointers, arrays, etc, we could have the same kind of logical/physical independence.",
        "user": "UEBG0NPDK",
        "ts": "1613083254.123500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1613083270.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mBMc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the logic of a program doesn\u2019t "
                            },
                            {
                                "type": "text",
                                "text": "have",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to bake in access paths, that\u2019s just an artifact of the way our languages evolved. If we didn\u2019t have pointers, arrays, etc, we could have the same kind of logical/physical independence."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "5cfb9ab7-3f83-43a6-9e63-2c40e8b62fd5",
        "type": "message",
        "text": "A slightly less ambitious version of something like this is the DOTS effort in Unity, where following a relatively small set of conventions allows them to employ a specialized compiler to make your games _much_ faster than what they were on the traditional stack.",
        "user": "UEBG0NPDK",
        "ts": "1613083381.123900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Heu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A slightly less ambitious version of something like this is the DOTS effort in Unity, where following a relatively small set of conventions allows them to employ a specialized compiler to make your games "
                            },
                            {
                                "type": "text",
                                "text": "much",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " faster than what they were on the traditional stack."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "d951f51a-a728-4e31-bfcb-938e2014a2e1",
        "type": "message",
        "text": "First, I have to *fan boy* out a little. I followed Eve for a long time, and I'm a fan of your work. :smile: Thank you. It's an honor to argue on the internet with you :slightly_smiling_face:",
        "user": "U01661S9F34",
        "ts": "1613083710.124100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hImY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "First, I have to "
                            },
                            {
                                "type": "text",
                                "text": "fan boy",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " out a little. I followed Eve for a long time, and I'm a fan of your work. "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            },
                            {
                                "type": "text",
                                "text": " Thank you. It's an honor to argue on the internet with you "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UEBG0NPDK"
                ],
                "count": 1
            },
            {
                "name": "wave",
                "users": [
                    "UEBG0NPDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "69d23e5d-d364-456f-b1f2-ac844539f9a9",
        "type": "message",
        "text": "ok back on topic:\nSIMD intrinsics / vectorization is another low level example of this sort of thing.\nI think it works great when the scope is limited.\nThat's why I'm a fan of the \"DSL\" approach. Many tiny languages that are all good at different things but have a way to communicate.\nI don't want a swiss army knife, I want a tool box.",
        "user": "U01661S9F34",
        "ts": "1613083731.124300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/7eE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ok back on topic:\nSIMD intrinsics / vectorization is another low level example of this sort of thing.\nI think it works great when the scope is limited.\nThat's why I'm a fan of the \"DSL\" approach. Many tiny languages that are all good at different things but have a way to communicate.\nI don't want a swiss army knife, I want a tool box."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "fea45d44-a2f4-4e2d-9747-12896e76a87b",
        "type": "message",
        "text": "SIMD is actually a great example - it is _exceptionally_ difficult to automatically vectorize because the semantics of most languages force your layout to be exactly as you described it.",
        "user": "UEBG0NPDK",
        "ts": "1613083811.124700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k4NG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "SIMD is actually a great example - it is "
                            },
                            {
                                "type": "text",
                                "text": "exceptionally",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " difficult to automatically vectorize because the semantics of most languages force your layout to be exactly as you described it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "dff14d48-a1ed-4b5d-a558-a4774bd04879",
        "type": "message",
        "text": "Imagine for a moment you had a compiler that could make layout choices based on the way data is actually used. E.g. in the case of something like a physics simulation where you\u2019re constantly doing math over a series of objects with x, y, vx, vy, we could choose to store those as x[], y[], vx[], vy[]",
        "user": "UEBG0NPDK",
        "ts": "1613083910.124900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b4d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Imagine for a moment you had a compiler that could make layout choices based on the way data is actually used. E.g. in the case of something like a physics simulation where you\u2019re constantly doing math over a series of objects with x, y, vx, vy, we could choose to store those as x[], y[], vx[], vy[]"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "bfad8411-a7e7-4037-940b-aa4244f93260",
        "type": "message",
        "text": "now vectorization is trivial",
        "user": "UEBG0NPDK",
        "ts": "1613083915.125100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ejgaV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "now vectorization is trivial"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "18e37673-1036-4654-9ffb-a482ddb58a8f",
        "type": "message",
        "text": "(the reality of something like that is actually even more interesting, to go as fast you possibly could, you\u2019d actually want to tile them as something like xxxx,yyyy,vxvxvxvx,vyvyvy for better cache utilization)",
        "user": "UEBG0NPDK",
        "ts": "1613083991.125300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VKmL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(the reality of something like that is actually even more interesting, to go as fast you possibly could, you\u2019d actually want to tile them as something like xxxx,yyyy,vxvxvxvx,vyvyvy for better cache utilization)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "97bf3f97-8496-4873-8e5f-78d890132b4c",
        "type": "message",
        "text": "doing that everywhere would be nuts, it\u2019s so much incidental bookkeeping that no one in their right mind would do that transformation across their whole system and our compilers have their hands tied because layout is explicitly part of the semantics of systems languages.",
        "user": "UEBG0NPDK",
        "ts": "1613084114.125500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1613084478.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UQ2a",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "doing that everywhere would be nuts, it\u2019s so much incidental bookkeeping that no one in their right mind would do that transformation across their whole system and our compilers have their hands tied because layout is explicitly part of the semantics of systems languages."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "235ce219-4ba6-48b3-9c64-16d6cd4f4194",
        "type": "message",
        "text": "ideally you\u2019d want something where you can mostly leave layout to the compiler, but provide a separate explicit specification of it if you really need to. (e.g. where layout has semantic meaning, like a tcp packet)",
        "user": "UEBG0NPDK",
        "ts": "1613084168.125700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8Nw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ideally you\u2019d want something where you can mostly leave layout to the compiler, but provide a separate explicit specification of it if you really need to. (e.g. where layout has semantic meaning, like a tcp packet)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "1d07176c-9446-40be-ae2d-ab4400bf1405",
        "type": "message",
        "text": "I see where you are heading. Something similar already happened for register allocation when we moved up from assembly language. You don't layout your own registers anymore. The compiler has fancy graph coloring algorithms that do it for you.",
        "user": "U01661S9F34",
        "ts": "1613084279.125900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8XmZj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see where you are heading. Something similar already happened for register allocation when we moved up from assembly language. You don't layout your own registers anymore. The compiler has fancy graph coloring algorithms that do it for you."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UEBG0NPDK",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "ebdd7bc9-d071-4d99-98c7-5a10dbb7e429",
        "type": "message",
        "text": "fwiw, I think the DSL approach is totally legit too and I would argue that there\u2019s a pretty thin line between DSL and well architected library. The main issue you face going down the stable of languages route is that eventually you want to take something from your nice sound DSL and use it in your robot movement DSL - then what? How do you translate semantics across different languages? And can people internalize all the little differences between the two? Something like LISP is pretty close to that and the conventional wisdom quickly became \u201cdon\u2019t use macros (the DSL creation feature) unless you absolutely have to.\u201d",
        "user": "UEBG0NPDK",
        "ts": "1613084363.126100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1613084400.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O9c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "fwiw, I think the DSL approach is totally legit too and I would argue that there\u2019s a pretty thin line between DSL and well architected library. The main issue you face going down the stable of languages route is that eventually you want to take something from your nice sound DSL and use it in your robot movement DSL - then what? How do you translate semantics across different languages? And can people internalize all the little differences between the two? Something like LISP is pretty close to that and the conventional wisdom quickly became \u201cdon\u2019t use macros (the DSL creation feature) unless you absolutely have to.\u201d"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    }
]