[
    {
        "client_msg_id": "46a98450-95c9-4040-9e90-c210c5933c66",
        "type": "message",
        "text": "I agree, if you're looking at Infra as a _product_, then you might determine it has practical utility. However, I'm only interested in Infra as a _research artifact_, and from that perspective I personally don't find it very interesting.\n\n&gt; In order to have a structured editor or programming-by-example system you need to have some format, and a binary format with the above-described benefits doesn't seem like a bad choice.\nA structured editor (by definition) presents and allows manipulation of the _abstract structure_ of a document (usually, we talk about ASTs). An abstract structure is a format for a *human* to consume. This is orthogonal to a serialization (\"binary\") format, which is a format for *hardware* to consume. A binary format's only purpose is to instruct the computer how to encode data in its transistors, capacitors, electrons and photons. Only low-level engineers (ideally: OS engineers) need to concern themselves with binary formats, and that's why I consider them orthogonal to structured editing. My conclusion: they are best researched separately. If you are making a _product_, aimed at allowing low-level engineers to manipulate binary formats using structured editors, then that's all well-and-good, but it's not research unless you're doing HCI.\n\n(I'd extend my argument to include programming-by-example but this is getting quite wordy.)",
        "user": "UCGAK10LS",
        "ts": "1613779531.077400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DZA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree, if you're looking at Infra as a "
                            },
                            {
                                "type": "text",
                                "text": "product",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", then you might determine it has practical utility. However, I'm only interested in Infra as a "
                            },
                            {
                                "type": "text",
                                "text": "research artifact",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and from that perspective I personally don't find it very interesting.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In order to have a structured editor or programming-by-example system you need to have some format, and a binary format with the above-described benefits doesn't seem like a bad choice."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nA structured editor (by definition) presents and allows manipulation of the "
                            },
                            {
                                "type": "text",
                                "text": "abstract structure",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of a document (usually, we talk about ASTs). An abstract structure is a format for a "
                            },
                            {
                                "type": "text",
                                "text": "human",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to consume. This is orthogonal to a serialization (\"binary\") format, which is a format for "
                            },
                            {
                                "type": "text",
                                "text": "hardware",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to consume. A binary format's only purpose is to instruct the computer how to encode data in its transistors, capacitors, electrons and photons. Only low-level engineers (ideally: OS engineers) need to concern themselves with binary formats, and that's why I consider them orthogonal to structured editing. My conclusion: they are best researched separately. If you are making a "
                            },
                            {
                                "type": "text",
                                "text": "product",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", aimed at allowing low-level engineers to manipulate binary formats using structured editors, then that's all well-and-good, but it's not research unless you're doing HCI.\n\n(I'd extend my argument to include programming-by-example but this is getting quite wordy.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613663800.074600",
        "parent_user_id": "UEDDR6L5Q"
    },
    {
        "client_msg_id": "9C797369-F291-4132-A1BF-E84A4203E0B9",
        "type": "message",
        "text": "i see the conversation that nick and i have been having in DM has spilled into the real world! i\u2019m definitely on the \u201cinfra is an important piece of work from a research perspective\u201d side and i\u2019ll just copy paste my latest message from DMs here: \n\ni think the core of the infra project is about structural editing done homoiconically. the binary format is just the logical bottom for the homoiconic part. so the reason i don\u2019t see it as a mishmash is that all the structural actions are in the same language as normal data updates. so instead of type.addCase or whatever, you interpret the data structure of a table as representing cases and do a primitive table add when you want to add a case. it\u2019s the same as any other table. having trouble articulating it and maybe it\u2019s something all structure editors have\u2014idk. but infra\u2019s symbol semantics and patch datatype also represent functions in the same plain old data structures\u2014so a function is just a partially interpreted table where some symbols evaluate to themselves. that seems pretty different to me",
        "user": "UHWC9PXBL",
        "ts": "1613785493.002400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=nm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i see the conversation that nick and i have been having in DM has spilled into the real world! i\u2019m definitely on the \u201cinfra is an important piece of work from a research perspective\u201d side and i\u2019ll just copy paste my latest message from DMs here: \n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "i think the core of the infra project is about structural editing done homoiconically. the binary format is just the logical bottom for the homoiconic part. so the reason i don\u2019t see it as a mishmash is that all the structural actions are in the same language as normal data updates. so instead of type.addCase or whatever, you interpret the data structure of a table as representing cases and do a primitive table add when you want to add a case. it\u2019s the same as any other table. having trouble articulating it and maybe it\u2019s something all structure editors have\u2014idk. but infra\u2019s symbol semantics and patch datatype also represent functions in the same plain old data structures\u2014so a function is just a partially interpreted table where some symbols evaluate to themselves. that seems pretty different to me"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613663800.074600",
        "parent_user_id": "UEDDR6L5Q"
    },
    {
        "client_msg_id": "42146E93-40C1-49F2-AA3C-12F406E38A8F",
        "type": "message",
        "text": "i have no idea what the status of the project is but it seems like the last update had to do with UCSB not releasing intellectual property rights?? idk. would love to talk to him if he\u2019s available",
        "user": "UHWC9PXBL",
        "ts": "1613785541.003900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cjLR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i have no idea what the status of the project is but it seems like the last update had to do with UCSB not releasing intellectual property rights?? idk. would love to talk to him if he\u2019s available"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613663800.074600",
        "parent_user_id": "UEDDR6L5Q"
    },
    {
        "client_msg_id": "691BDA18-6B50-49D1-9D5F-D3A6520D415A",
        "type": "message",
        "text": "my impression of the binary format stuff is that it goes a bit further in tying the knot on metacircularity than lisp\u2019s special forms do. in particular: the bit about functions being tables whose symbols evaluate to themselves unless they\u2019re interpreted by passing them a symbol table",
        "user": "UHWC9PXBL",
        "ts": "1613785767.006500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XUnmK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "my impression of the binary format stuff is that it goes a bit further in tying the knot on metacircularity than lisp\u2019s special forms do. in particular: the bit about functions being tables whose symbols evaluate to themselves unless they\u2019re interpreted by passing them a symbol table"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613663800.074600",
        "parent_user_id": "UEDDR6L5Q"
    },
    {
        "client_msg_id": "384E0C3D-14EF-4A41-A4C2-1F6A3A190EB4",
        "type": "message",
        "text": "i\u2019ve printed out and gone through a big chunk of the thesis with a highlighter and it\u2019s extremely hard to talk about lol",
        "user": "UHWC9PXBL",
        "ts": "1613785795.007500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yh1s+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i\u2019ve printed out and gone through a big chunk of the thesis with a highlighter and it\u2019s extremely hard to talk about lol"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613663800.074600",
        "parent_user_id": "UEDDR6L5Q"
    },
    {
        "client_msg_id": "7A936C06-1134-4EA5-A01D-450C311DB550",
        "type": "message",
        "text": "i\u2019m implementing something adjacent, starting with a weird interpretation of edn query language but for javascript objects (insert whatever digression you might imagine)",
        "user": "UHWC9PXBL",
        "ts": "1613785852.009100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8PAZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i\u2019m implementing something adjacent, starting with a weird interpretation of edn query language but for javascript objects (insert whatever digression you might imagine)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613663800.074600",
        "parent_user_id": "UEDDR6L5Q"
    },
    {
        "client_msg_id": "0F013FD1-9C09-422D-A0F9-1C93D33630F4",
        "type": "message",
        "text": "<@UFPPABQ7P> is a big proponent of explaining things over zoom with an ipad if you decide to make this app and want to do some user interviews ",
        "user": "UHWC9PXBL",
        "ts": "1613785994.010600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NJyP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFPPABQ7P"
                            },
                            {
                                "type": "text",
                                "text": " is a big proponent of explaining things over zoom with an ipad if you decide to make this app and want to do some user interviews "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613408375.066300",
        "parent_user_id": "UF71PR58X"
    }
]