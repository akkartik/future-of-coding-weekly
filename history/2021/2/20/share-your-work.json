[
    {
        "client_msg_id": "cf1265f6-fe9f-4344-912b-569cf4c3adaf",
        "type": "message",
        "text": "Yeah, I'd say it's not (or shouldn't be) about \"Haskell\", but a very easy and direct way to build pieces of programs. The fact that you discovered some of the properties which enable that, to be baked into Haskell, is incidental.",
        "user": "UAVCC2X70",
        "ts": "1613775984.126000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7mU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I'd say it's not (or shouldn't be) about \"Haskell\", but a very easy and direct way to build pieces of programs. The fact that you discovered some of the properties which enable that, to be baked into Haskell, is incidental."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613736460.115300",
        "parent_user_id": "U5TCAFTD3",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5TCAFTD3",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "dc953049-25b8-4533-89e4-62cd97032679",
        "type": "message",
        "text": "I've always wanted to get into Haskell more, so I'm squarely in the target audience (rarely has a pitch felt so focused just on me). The risk this has me worrying about is the error experience. How you give good error messages tailored to a small screen without having to fork a Haskell compiler. Or do y'all plan to fork?",
        "user": "UCUSW7WVD",
        "ts": "1613776377.126400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1613776680.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "suo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've always wanted to get into Haskell more, so I'm squarely in the target audience (rarely has a pitch felt so focused just on me). The risk this has me worrying about is the error experience. How you give good error messages tailored to a small screen without having to fork a Haskell compiler. Or do y'all plan to fork?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613736460.115300",
        "parent_user_id": "U5TCAFTD3",
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "U5TCAFTD3",
                    "UHWC9PXBL",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "7cfbb043-b4b6-489a-bfa5-872216949ef5",
        "type": "message",
        "text": "The fact that anyone is asking \"who'd want to use a phone?\" is rather telling of a problem with programming &amp; technology (which Steve is working to solve, here).\n\nImagine a slightly different status quo: Who'd want to use a computer? If you really want to be productive, you're going to need a whole laboratory and your own factory, and your own biodome and space suit.\n\nMy goodness! How badly has programming and technology evolved, that you can't use simple tools to compose logical components in a simple and straightforward way?\n\nIt used to be unthinkable to browse the web or do MANY things, that are now mostly done from \"phones\" now.",
        "user": "UAVCC2X70",
        "ts": "1613776956.126800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1613777070.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LO+7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The fact that anyone is asking \"who'd want to use a phone?\" is rather telling of a problem with programming & technology (which Steve is working to solve, here).\n\nImagine a slightly different status quo: Who'd want to use a computer? If you really want to be productive, you're going to need a whole laboratory and your own factory, and your own biodome and space suit.\n\nMy goodness! How badly has programming and technology evolved, that you can't use simple tools to compose logical components in a simple and straightforward way?\n\nIt used to be unthinkable to browse the web or do MANY things, that are now mostly done from \"phones\" now."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613736460.115300",
        "parent_user_id": "U5TCAFTD3",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5TCAFTD3"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "4bdb0ab0-3852-4351-a63c-e8090b41cb98",
        "type": "message",
        "text": "Still, there does seem to be a big difference between browsing and creating. Writing programs often involves doing multiple things at the same time: research (browser), coding (IDE), running/looking at logs(terminal). It is intensive activity, because problems we are solving are hard, so having proper equipment (multiple displays, keyboard, mouse) does make a difference. That said, maybe I am just old fashioned and future is on the phone who knows! Although, if future woudl be really be on the phone, I would expect some novel kind of interface (like projected screen or keyboard and similar) that enhance both output and input capacity, but then it comes back to being a computer. Don't mind me too much, just thinking out loud. For the context I am Haskell developer.",
        "user": "UUB7RA7PF",
        "ts": "1613778135.127300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UUB7RA7PF",
            "ts": "1613778149.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IK0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Still, there does seem to be a big difference between browsing and creating. Writing programs often involves doing multiple things at the same time: research (browser), coding (IDE), running/looking at logs(terminal). It is intensive activity, because problems we are solving are hard, so having proper equipment (multiple displays, keyboard, mouse) does make a difference. That said, maybe I am just old fashioned and future is on the phone who knows! Although, if future woudl be really be on the phone, I would expect some novel kind of interface (like projected screen or keyboard and similar) that enhance both output and input capacity, but then it comes back to being a computer. Don't mind me too much, just thinking out loud. For the context I am Haskell developer."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613736460.115300",
        "parent_user_id": "U5TCAFTD3"
    },
    {
        "client_msg_id": "ce5df091-02b9-44f6-8889-e575b694d8ea",
        "type": "message",
        "text": "Fair points! I'm sure heavy duty intensive development will stay as you say; but the scope of all software development by anyone (e.g. as a new kind of literacy and/or thinking tool), can expand far beyond that. You certainly wouldn't write a thesis on your phone, but look at all this discussion we are having from my phone! It might have been hard to predict decades ago that people would \"casually\" \"type up\" thing after thing with just their thumbs, but the context for that didn't used to exist (and we have tools and context for this that would have been hard to predict). But certainly, that hasn't become the \"new\" way of sitting down and writing a serious paper. I think the same could apply for creating the \"stuff\" of software. That might not be called \"programming\" though, just like this here is not \"writing a document\" in the sense that that used to (and even still) connotates.",
        "user": "UAVCC2X70",
        "ts": "1613786152.000300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TY3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fair points! I'm sure heavy duty intensive development will stay as you say; but the scope of all software development by anyone (e.g. as a new kind of literacy and/or thinking tool), can expand far beyond that. You certainly wouldn't write a thesis on your phone, but look at all this discussion we are having from my phone! It might have been hard to predict decades ago that people would \"casually\" \"type up\" thing after thing with just their thumbs, but the context for that didn't used to exist (and we have tools and context for this that would have been hard to predict). But certainly, that hasn't become the \"new\" way of sitting down and writing a serious paper. I think the same could apply for creating the \"stuff\" of software. That might not be called \"programming\" though, just like this here is not \"writing a document\" in the sense that that used to (and even still) connotates."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613736460.115300",
        "parent_user_id": "U5TCAFTD3",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U5TCAFTD3",
                    "UUB7RA7PF"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "b356f98d-2b88-4e13-914e-e5a01e02395f",
        "type": "message",
        "text": "<@UUB7RA7PF> Programming is many things. If you restrict your definition to current industrial professional practice, you'll miss many opportunities. Personally, I would love to be able to quickly build interactions on my phone, especially if it let me script away some annoyances in the stock UI.",
        "user": "U013ZLJARC7",
        "ts": "1613808461.001800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wRc6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UUB7RA7PF"
                            },
                            {
                                "type": "text",
                                "text": " Programming is many things. If you restrict your definition to current industrial professional practice, you'll miss many opportunities. Personally, I would love to be able to quickly build interactions on my phone, especially if it let me script away some annoyances in the stock UI."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613736460.115300",
        "parent_user_id": "U5TCAFTD3",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC",
                    "UAVCC2X70"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "b22206ef-6a2e-4e8a-9a88-6bf3df018e15",
        "type": "message",
        "text": "To echo what others have said here, I assume your Compose page here Steve is targeted at Haskellers who, on clicking through on Reflex, say, \"being able to make use of something like that without setup and ceremony sounds great.  Sign me up!\"\n\nComparing to Rails, this announcement comes well before the first public presentation and fifteen minute demo.  Let me add that at Ruby Conf 2004, maybe 3/50 were using Ruby professionally, and the first question to DHH after his presentation was \"What editor is that?\"  Second question was \"Can we get a copy?\"\n\nIf you want a Compose demo to attract Haskell people, Explorable Explanations of some classic Haskell papers?  FRP, STM, and Parsec come to mind.",
        "user": "UA14TGLTC",
        "ts": "1613813549.003000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YxdL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To echo what others have said here, I assume your Compose page here Steve is targeted at Haskellers who, on clicking through on Reflex, say, \"being able to make use of something like that without setup and ceremony sounds great.  Sign me up!\"\n\nComparing to Rails, this announcement comes well before the first public presentation and fifteen minute demo.  Let me add that at Ruby Conf 2004, maybe 3/50 were using Ruby professionally, and the first question to DHH after his presentation was \"What editor is that?\"  Second question was \"Can we get a copy?\"\n\nIf you want a Compose demo to attract Haskell people, Explorable Explanations of some classic Haskell papers?  FRP, STM, and Parsec come to mind."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613736460.115300",
        "parent_user_id": "U5TCAFTD3",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5TCAFTD3"
                ],
                "count": 1
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "a51816dd-d991-4cf1-b62b-e83ba25d44e8",
        "type": "message",
        "text": "I don't know about programming on phones, but iPads sound good.\n\nI've tried Fancade with my son for a few hours.  It's pretty cool.  Pretty powerful.  And fairly inscrutable with terrible documentation to boot.\n\nReally want to see an app in which you (and by you I mean my economist wife) can do non-trivial equation manipulation (calculus, differential equation stuff) and charting.",
        "user": "UA14TGLTC",
        "ts": "1613813834.003200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fPY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't know about programming on phones, but iPads sound good.\n\nI've tried Fancade with my son for a few hours.  It's pretty cool.  Pretty powerful.  And fairly inscrutable with terrible documentation to boot.\n\nReally want to see an app in which you (and by you I mean my economist wife) can do non-trivial equation manipulation (calculus, differential equation stuff) and charting."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613736460.115300",
        "parent_user_id": "U5TCAFTD3",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5TCAFTD3"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "77c24933-580b-409f-8d60-bd594ffd2b26",
        "type": "message",
        "text": "<@UAVCC2X70> <@U013ZLJARC7> You are right, I was approaching this from the standpoint of classical professional software development, and not so much from the view point of \"democratizing\" development for others by making it really smooth and simple on your phone! I am interested to see what is the response on this and what is the right type of experience that can trigger this new kind of behaviour (development on phone), certainly an exciting experiment! Business side sounds somewhat tough, but there is always time to explore that further if usage is there.",
        "user": "UUB7RA7PF",
        "ts": "1613823684.003500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UUB7RA7PF",
            "ts": "1613823727.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lmF5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " You are right, I was approaching this from the standpoint of classical professional software development, and not so much from the view point of \"democratizing\" development for others by making it really smooth and simple on your phone! I am interested to see what is the response on this and what is the right type of experience that can trigger this new kind of behaviour (development on phone), certainly an exciting experiment! Business side sounds somewhat tough, but there is always time to explore that further if usage is there."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613736460.115300",
        "parent_user_id": "U5TCAFTD3",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            },
            {
                "name": "sunglasses",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9a156e8b-399b-4126-bfbd-59a30e84c5de",
        "type": "message",
        "text": "I'm new here, I wrote an introduction at <https://futureofcoding.slack.com/archives/CC2JRGVLK/p1613857840000600>\n\nThe more I learn about other people's future-of-coding experiments, the less original my own ideas seem, to the point where many of them don't seem worth sharing anymore. Do I have anything left to add to the conversation? Maybe! At my day job, I work on codebases of up to 100k lines of code, written by small teams, in mainstream languages. Barring a complete revolution, what incremental improvements can I imagine in my daily workflows? I've started sharing these ideas in a series of video talks, and in some cases also with clickable prototypes.\n\nThe first video <https://youtu.be/8hVuOmgcd04> is an introduction, but to you here in the Future of Coding community, it _might_ feel like I'm preaching to the choir, so feel free to skip ahead. Video 2, 3 and 4 each explain one standalone idea, like \"Stretchy code map\" or \"Call graph navigator\". I'm working on the 5th as we speak. If you prefer to read text over watching video, transcripts are available on my bare-bones website <https://emilprogviz.com/>\n\nI've worked on this in isolation for years, so now I'd love to hear some encouragement, but even more I'd love to hear which particular ideas you like best, or how you would improve on them!",
        "user": "U01NQ4945N1",
        "ts": "1613861522.005800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01NQ4945N1",
            "ts": "1613861781.000000"
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Better programming tools, ep01 - Design philosophy",
                "title_link": "https://youtu.be/8hVuOmgcd04",
                "author_name": "Emil's Programming Viz",
                "author_link": "https://www.youtube.com/channel/UCJW0M7FftAKN-ffgbH9yIdA",
                "thumb_url": "https://i.ytimg.com/vi/8hVuOmgcd04/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Better programming tools, ep01 - Design philosophy",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/8hVuOmgcd04?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/8hVuOmgcd04",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 2,
                "original_url": "https://youtu.be/8hVuOmgcd04"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LgW/V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm new here, I wrote an introduction at "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/CC2JRGVLK/p1613857840000600"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe more I learn about other people's future-of-coding experiments, the less original my own ideas seem, to the point where many of them don't seem worth sharing anymore. Do I have anything left to add to the conversation? Maybe! At my day job, I work on codebases of up to 100k lines of code, written by small teams, in mainstream languages. Barring a complete revolution, what incremental improvements can I imagine in my daily workflows? I've started sharing these ideas in a series of video talks, and in some cases also with clickable prototypes.\n\nThe first video "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/8hVuOmgcd04"
                            },
                            {
                                "type": "text",
                                "text": " is an introduction, but to you here in the Future of Coding community, it "
                            },
                            {
                                "type": "text",
                                "text": "might",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " feel like I'm preaching to the choir, so feel free to skip ahead. Video 2, 3 and 4 each explain one standalone idea, like \"Stretchy code map\" or \"Call graph navigator\". I'm working on the 5th as we speak. If you prefer to read text over watching video, transcripts are available on my bare-bones website "
                            },
                            {
                                "type": "link",
                                "url": "https://emilprogviz.com/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI've worked on this in isolation for years, so now I'd love to hear some encouragement, but even more I'd love to hear which particular ideas you like best, or how you would improve on them!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613861522.005800",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1613922563.013000",
        "reply_users": [
            "UAVCC2X70",
            "UC2A2ARPT",
            "U01NQ4945N1"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UC2A2ARPT",
                    "U01KZQEQVUP",
                    "U012RSHGTFY"
                ],
                "count": 4
            },
            {
                "name": "clap",
                "users": [
                    "UAVCC2X70",
                    "U85HCL7JP",
                    "U01JHG5RQDQ",
                    "U013HU44GLS"
                ],
                "count": 4
            }
        ]
    }
]