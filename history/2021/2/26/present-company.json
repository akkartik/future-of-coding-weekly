[
    {
        "client_msg_id": "51ecc7fc-83ba-4e46-ab1c-11a1dbffa90d",
        "type": "message",
        "text": "What \"How to create your own programming language\" tutorial/resource would you point somebody to, who is not doing it for the first time, roughly knows what they're doing, and is looking for insights on how to do it well?",
        "user": "U5STGTB3J",
        "ts": "1614366089.029100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BJ1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What \"How to create your own programming language\" tutorial/resource would you point somebody to, who is not doing it for the first time, roughly knows what they're doing, and is looking for insights on how to do it well?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614366089.029100",
        "reply_count": 19,
        "reply_users_count": 8,
        "latest_reply": "1614771284.041900",
        "reply_users": [
            "UFB8STN7K",
            "U5STGTB3J",
            "UDQBTJ211",
            "UCGAK10LS",
            "UN9SCH5RD",
            "UEDDR6L5Q",
            "UL5AX4G2H",
            "UAVCC2X70"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "2fd7e221-794d-48e9-9a49-fe71a8567b91",
        "type": "message",
        "text": "What kind of programming language are you planning to build?",
        "user": "UFB8STN7K",
        "ts": "1614366159.029200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h3YT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What kind of programming language are you planning to build?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "9d8a9b3b-d716-4243-ac95-9992787a63e5",
        "type": "message",
        "text": "My own recommendation would be <https://craftinginterpreters.com>, but that's more of a \"first time\" intro. Although you get to build both an interpreter and a compiler + vm, which I think is more advanced (and more what I'm after here). What I also like is that he explains everything without any dependencies required.",
        "user": "U5STGTB3J",
        "ts": "1614366278.029400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kPnZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My own recommendation would be "
                            },
                            {
                                "type": "link",
                                "url": "https://craftinginterpreters.com"
                            },
                            {
                                "type": "text",
                                "text": ", but that's more of a \"first time\" intro. Although you get to build both an interpreter and a compiler + vm, which I think is more advanced (and more what I'm after here). What I also like is that he explains everything without any dependencies required."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UUB7RA7PF"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b7df7ea0-8b74-48e4-9761-d038fd349bb6",
        "type": "message",
        "text": "<@UFB8STN7K> Appreciate you asking that \u2014 we software people are often quick with offering solutions before really understanding the problem\u2026 the thing is, in this case I'm actually looking for a wide variety of different solutions, because I can't describe my problem well. Yet.\n\nI'm looking for different perspectives on how language implementors split that problem into different parts and why. Do you write an interpreter or a compiler? Do you hook into something like LLVM? Do you use a virtual machine? Do you explicitly design for multiple stages/passes (tower of interpreters-style)?\n\nMaybe \"tutorial\" is framing it the wrong way and I'm more looking for design documents and field reports; something like <https://www.goodreads.com/book/show/1168500.LISP_in_Small_Pieces> or <https://www.lua.org/doc/jucs05.pdf>.",
        "user": "U5STGTB3J",
        "ts": "1614367285.029700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1614367305.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "No5gT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFB8STN7K"
                            },
                            {
                                "type": "text",
                                "text": " Appreciate you asking that \u2014 we software people are often quick with offering solutions before really understanding the problem\u2026 the thing is, in this case I'm actually looking for a wide variety of different solutions, because I can't describe my problem well. Yet.\n\nI'm looking for different perspectives on how language implementors split that problem into different parts and why. Do you write an interpreter or a compiler? Do you hook into something like LLVM? Do you use a virtual machine? Do you explicitly design for multiple stages/passes (tower of interpreters-style)?\n\nMaybe \"tutorial\" is framing it the wrong way and I'm more looking for design documents and field reports; something like "
                            },
                            {
                                "type": "link",
                                "url": "https://www.goodreads.com/book/show/1168500.LISP_in_Small_Pieces"
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "link",
                                "url": "https://www.lua.org/doc/jucs05.pdf"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "c430c9cb-00c7-4161-97f1-b6dd5c6264b8",
        "type": "message",
        "text": "I'm particularly interested in the separation of the \"static\" and \"dynamic\" parts and implementations that make conscious design decisions to split them up and have well-defined interfaces between them. So an interpreter-based language would less likely qualify than a compiler+vm approach.",
        "user": "U5STGTB3J",
        "ts": "1614367472.030100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9X3bu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm particularly interested in the separation of the \"static\" and \"dynamic\" parts and implementations that make conscious design decisions to split them up and have well-defined interfaces between them. So an interpreter-based language would less likely qualify than a compiler+vm approach."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "d7600f04-7f42-4856-9341-ff9c388f8517",
        "type": "message",
        "text": "The best resource I\u2019ve found for the high-level design decisions of programming languages is HOPL proceedings. <https://hopl4.sigplan.org/>",
        "user": "UFB8STN7K",
        "ts": "1614367640.030300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFB8STN7K",
            "ts": "1614367646.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P8dAq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The best resource I\u2019ve found for the high-level design decisions of programming languages is HOPL proceedings. "
                            },
                            {
                                "type": "link",
                                "url": "https://hopl4.sigplan.org/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U5STGTB3J",
                    "UML4ZEKDK",
                    "UCUNN529Y"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "73eeb8e3-b182-4cdc-9ce3-ba4cb09d446e",
        "type": "message",
        "text": "You mentioned LLVM - they have a tutorial that walks you through implementing a simple PL (\"Kaleidoscope\"); <https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html>\n\nI haven't done it yet but am planning to in the next few weeks so can report back then",
        "user": "UDQBTJ211",
        "ts": "1614371085.030800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JTC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You mentioned LLVM - they have a tutorial that walks you through implementing a simple PL (\"Kaleidoscope\"); "
                            },
                            {
                                "type": "link",
                                "url": "https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI haven't done it yet but am planning to in the next few weeks so can report back then"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "51EDE09F-9F29-4FAF-9302-17D74C480D66",
        "type": "message",
        "text": "FWIW I\u2019m just planning to translate to Wasm bytecode because it\u2019s far simpler than LLVM, and high quality Wasm compilers and JITs exist (and will be a big focus of the next decade).",
        "user": "UCGAK10LS",
        "ts": "1614379551.034200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PnGCv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FWIW I\u2019m just planning to translate to Wasm bytecode because it\u2019s far simpler than LLVM, and high quality Wasm compilers and JITs exist (and will be a big focus of the next decade)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "6987A577-D477-47A2-AE2A-5EDC6A8B6CE6",
        "type": "message",
        "text": "So the resources I need are along the lines of \u201chow do I efficiently map my language to the Wasm VM? (Or similar VMs?)\u201d",
        "user": "UCGAK10LS",
        "ts": "1614379721.036600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hOP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So the resources I need are along the lines of \u201chow do I efficiently map my language to the Wasm VM? (Or similar VMs?)\u201d"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "8f94a727-c4d3-457b-b386-0d7e121e8faf",
        "type": "message",
        "text": "Because my language is declarative, the challenge is in the *serialization* of the declared computation to a \"sequence of instructions\". For the most part I think this is an *open problem*: there are ideas from existing functional language compilers like \"loop fusion\" and dataflow analyses but I think many of the compilation approaches will depend on the fine details of the language itself. So I'll probably start by reading the literature on FP compilation and then probably have to invent the rest. (Traditional compiler books spend a lot of time on topics like parsing, lexing, type checking, and register allocation, none of which I need: My language isn't based on text files, it doesn't have static types, and Wasm doesn't have registers.)\n\nSo that's my current perspective anyway.",
        "user": "UCGAK10LS",
        "ts": "1614380175.037200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1614393284.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F7kft",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Because my language is declarative, the challenge is in the "
                            },
                            {
                                "type": "text",
                                "text": "serialization",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of the declared computation to a \"sequence of instructions\". For the most part I think this is an "
                            },
                            {
                                "type": "text",
                                "text": "open problem",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": there are ideas from existing functional language compilers like \"loop fusion\" and dataflow analyses but I think many of the compilation approaches will depend on the fine details of the language itself. So I'll probably start by reading the literature on FP compilation and then probably have to invent the rest. (Traditional compiler books spend a lot of time on topics like parsing, lexing, type checking, and register allocation, none of which I need: My language isn't based on text files, it doesn't have static types, and Wasm doesn't have registers.)\n\nSo that's my current perspective anyway."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "032139f9-e054-41ef-8e27-9fa0a7bbf216",
        "type": "message",
        "text": "<https://www.oreilly.com/library/view/masterminds-of-programming/9780596801670/> is interesting as a high level view of the decision taken by authors of major programming languages",
        "user": "UN9SCH5RD",
        "ts": "1614393052.037800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "O\u2019Reilly Online Learning",
                "title": "Masterminds of Programming",
                "title_link": "https://www.oreilly.com/library/view/masterminds-of-programming/9780596801670/",
                "text": "Masterminds of Programming features exclusive interviews with the creators of several historic and highly influential programming languages. In this unique collection, you'll learn about the processes that led to specific \u2026 - Selection from Masterminds of Programming [Book]",
                "fallback": "O\u2019Reilly Online Learning: Masterminds of Programming",
                "thumb_url": "https://www.oreilly.com/library/cover/9780596801670/",
                "from_url": "https://www.oreilly.com/library/view/masterminds-of-programming/9780596801670/",
                "thumb_width": 140,
                "thumb_height": 184,
                "service_icon": "https://www.oreilly.com/library/view/static/images/apple-touch-icon.png",
                "id": 1,
                "original_url": "https://www.oreilly.com/library/view/masterminds-of-programming/9780596801670/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rF9n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.oreilly.com/library/view/masterminds-of-programming/9780596801670/"
                            },
                            {
                                "type": "text",
                                "text": " is interesting as a high level view of the decision taken by authors of major programming languages"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "828da500-b2b6-4b64-a6bc-d0bd670214f9",
        "type": "message",
        "text": "<https://www.amazon.com/Language-Implementation-Patterns-Domain-Specific-Programming/dp/193435645X> has a nice collection of patterns, the scope is not super wide but I think it is a pretty useful resource anyway to get acquainted with a particular way of solving \"language problems\"",
        "user": "UN9SCH5RD",
        "ts": "1614393591.038300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zEuKz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.amazon.com/Language-Implementation-Patterns-Domain-Specific-Programming/dp/193435645X"
                            },
                            {
                                "type": "text",
                                "text": " has a nice collection of patterns, the scope is not super wide but I think it is a pretty useful resource anyway to get acquainted with a particular way of solving \"language problems\""
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "9a473f36-8f64-44a1-a757-4539dd947032",
        "type": "message",
        "text": "For implementation: Bitwise - a stream series where Per Vognsen implements a software-hardware stack from scratch, including a couple of languages. The languages he's creating are fairly low-level, but he brings up considerations that I think would be relevant for most languages.\n<https://github.com/pervognsen/bitwise/>\n<https://www.youtube.com/playlist?list=PLU94OURih-CiP4WxKSMt3UcwMSDM3aTtX>",
        "user": "UEDDR6L5Q",
        "ts": "1614422932.038500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEDDR6L5Q",
            "ts": "1614423105.000000"
        },
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "pervognsen/bitwise",
                "title_link": "https://github.com/pervognsen/bitwise/",
                "text": "Bitwise is an educational project where we create the software/hardware stack for a computer from scratch. - pervognsen/bitwise",
                "fallback": "GitHub: pervognsen/bitwise",
                "thumb_url": "https://avatars.githubusercontent.com/u/123173?s=400&v=4",
                "from_url": "https://github.com/pervognsen/bitwise/",
                "thumb_width": 420,
                "thumb_height": 420,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/pervognsen/bitwise/"
            },
            {
                "service_name": "YouTube",
                "title": "Bitwise",
                "title_link": "https://www.youtube.com/playlist?list=PLU94OURih-CiP4WxKSMt3UcwMSDM3aTtX",
                "text": "Share your videos with friends, family, and the world",
                "fallback": "YouTube: Bitwise",
                "thumb_url": "https://i.ytimg.com/vi/ZjwvMcP3Nf0/hqdefault.jpg?sqp=-oaymwEWCKgBEF5IWvKriqkDCQgBFQAAiEIYAQ==&rs=AOn4CLBIQDU3AYh7X-8YOW_WgaeEmxTwuQ&days_since_epoch=18685",
                "from_url": "https://www.youtube.com/playlist?list=PLU94OURih-CiP4WxKSMt3UcwMSDM3aTtX",
                "thumb_width": 168,
                "thumb_height": 94,
                "service_icon": "https://www.youtube.com/s/desktop/f1c5e957/img/favicon.ico",
                "id": 2,
                "original_url": "https://www.youtube.com/playlist?list=PLU94OURih-CiP4WxKSMt3UcwMSDM3aTtX"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ogext",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For implementation: Bitwise - a stream series where Per Vognsen implements a software-hardware stack from scratch, including a couple of languages. The languages he's creating are fairly low-level, but he brings up considerations that I think would be relevant for most languages.\n"
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/pervognsen/bitwise/"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/playlist?list=PLU94OURih-CiP4WxKSMt3UcwMSDM3aTtX"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "1f05b757-f912-4755-a7e4-cf55b69019d3",
        "type": "message",
        "text": "The Jonathan Blow streams are often good, but past his design streams they're probably a bit too sparse in terms of insight for language development",
        "user": "UEDDR6L5Q",
        "ts": "1614423303.038900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Qaq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Jonathan Blow streams are often good, but past his design streams they're probably a bit too sparse in terms of insight for language development"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "type": "message",
        "text": "Hopefully this isn't too flame-war-like :smile:, but I'd also want to encourage the notion that \"performance is a feature\", particularly when you're creating software infrastructure such as a language compiler.\n(This is more relevant once you have a design/prototype you're happy with and are going to make it available for public consumption.)\nESBuild provides an example of the importance of caring about performance in build tooling (pic attached). Speedups of this order of magnitude significantly improve the ways in which you can use the tool.",
        "files": [
            {
                "id": "F01PLFFJFAP",
                "created": 1614423549,
                "timestamp": 1614423549,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UEDDR6L5Q",
                "editable": false,
                "size": 11174,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F01PLFFJFAP/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F01PLFFJFAP/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PLFFJFAP-c06116ffc3/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PLFFJFAP-c06116ffc3/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PLFFJFAP-c06116ffc3/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 77,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PLFFJFAP-c06116ffc3/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 102,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PLFFJFAP-c06116ffc3/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PLFFJFAP-c06116ffc3/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 153,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F01PLFFJFAP-c06116ffc3/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 170,
                "original_w": 800,
                "original_h": 170,
                "thumb_tiny": "AwAKADDRbOabvPrUhoqZJvZjTGB/WnBh60tA6UJNdQEyPUUuRQKB3qhH/9k=",
                "permalink": "https://futureofcoding.slack.com/files/UEDDR6L5Q/F01PLFFJFAP/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F01PLFFJFAP-f89ba1a9a0",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=cE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hopefully this isn't too flame-war-like "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            },
                            {
                                "type": "text",
                                "text": ", but I'd also want to encourage the notion that \"performance is a feature\", particularly when you're creating software infrastructure such as a language compiler.\n(This is more relevant once you have a design/prototype you're happy with and are going to make it available for public consumption.)\nESBuild provides an example of the importance of caring about performance in build tooling (pic attached). Speedups of this order of magnitude significantly improve the ways in which you can use the tool."
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UEDDR6L5Q",
        "display_as_bot": false,
        "ts": "1614424245.039100",
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "25de3307-1222-433d-83c1-f40c23595739",
        "type": "message",
        "text": "Read SICP to understand how simpler a compiler can be and to make your own language with lisp notation.\n<https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html>",
        "user": "UL5AX4G2H",
        "ts": "1614444803.039300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NfUd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Read SICP to understand how simpler a compiler can be and to make your own language with lisp notation.\n"
                            },
                            {
                                "type": "link",
                                "url": "https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UEDDR6L5Q"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "86d63630-4d1c-47d2-bf9a-640865617478",
        "type": "message",
        "text": "\"Modern Compiler Implementation in Java\" (also versions written for C, ML, etc) covers traditional compiler stuff, but delves really deep into specifics, various strategies for optimization (e.g. register coloring, loop unrolling, etc) and modeling different language paradigms at the low level.\n\nI thoroughly enjoyed this book more than others I've read (e.g. vs what's called \"The dragon book\")\n\n<https://books.google.com/books/about/Modern_Compiler_Implementation_in_Java.html?id=EEyQQgAACAAJ&amp;source=kp_book_description|https://books.google.com/books/about/Modern_Compiler_Implementation_in_Java.html?id=EEyQQgAACAAJ&amp;source=kp_book_description>",
        "user": "UAVCC2X70",
        "ts": "1614458267.039500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1614458330.000000"
        },
        "attachments": [
            {
                "service_name": "Google Books",
                "title": "Modern Compiler Implementation in Java",
                "title_link": "https://books.google.com/books/about/Modern_Compiler_Implementation_in_Java.html?id=EEyQQgAACAAJ&source=kp_book_description",
                "text": "This textbook explains all phases of a modern compiler: lexical analysis, parsing, abstract syntax, semantic actions, intermediate representations, instruction selection via tree matching, dataflow analysis, graph-colouring register allocation with coalescing, and runtime systems. It covers current techniques in code generation and register allocation, as well as functional and object-oriented languages, which are missing from most books on the topic. The author illustrates the most accepted and successful techniques in a concise way, rather than as an exhaustive catalogue of every possible variant. Detailed descriptions of the interfaces between modules of a compiler are illustrated with actual Java classes. A unique feature of the book is a well designed compiler implementation project in Java, including front-end and 'high-tech' back-end phases, so that students can build a complete working compiler in one semester. The textbook is meant for use in a one-semester first course for undergraduates in compiler design. Accompanying support software is available.",
                "fallback": "Google Books: Modern Compiler Implementation in Java",
                "from_url": "https://books.google.com/books/about/Modern_Compiler_Implementation_in_Java.html?id=EEyQQgAACAAJ&source=kp_book_description",
                "thumb_url": "https://books.google.com/books/content?id=EEyQQgAACAAJ&printsec=frontcover&img=1&zoom=1&imgtk=AFLRE71lGT9gziwbvaePl-qR4JDZ_WCsLNgB5wnpQ54lBgeuCaQpNst4DVr3rRsYsg4IK65RrI1eMUMT-hFxtiU8C2uNShWrj6P1mYHy-51zU9Zmr_PoisrJK-sUfnAs_FDpi6UGmKb0",
                "thumb_width": 128,
                "thumb_height": 161,
                "service_icon": "https://books.google.com/favicon.ico",
                "id": 1,
                "original_url": "https://books.google.com/books/about/Modern_Compiler_Implementation_in_Java.html?id=EEyQQgAACAAJ&amp;source=kp_book_description"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V0o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Modern Compiler Implementation in Java\" (also versions written for C, ML, etc) covers traditional compiler stuff, but delves really deep into specifics, various strategies for optimization (e.g. register coloring, loop unrolling, etc) and modeling different language paradigms at the low level.\n\nI thoroughly enjoyed this book more than others I've read (e.g. vs what's called \"The dragon book\")\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://books.google.com/books/about/Modern_Compiler_Implementation_in_Java.html?id=EEyQQgAACAAJ&source=kp_book_description",
                                "text": "https://books.google.com/books/about/Modern_Compiler_Implementation_in_Java.html?id=EEyQQgAACAAJ&source=kp_book_description"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "b9051c6d-ff6c-4dc6-86fd-0f340be755be",
        "type": "message",
        "text": "&gt; SICP\nMIT recently put up the lecture series for this by the book authors: <https://www.youtube.com/playlist?list=PLE18841CABEA24090>\nI'm about to go through it myself",
        "user": "UEDDR6L5Q",
        "ts": "1614458647.039900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEDDR6L5Q",
            "ts": "1614458733.000000"
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "title": "MIT 6.001 Structure and Interpretation, 1986",
                "title_link": "https://www.youtube.com/playlist?list=PLE18841CABEA24090",
                "text": "This course introduces students to the principles of computation. Upon completion of 6.001, students should be able to explain and apply the basic methods fr...",
                "fallback": "YouTube: MIT 6.001 Structure and Interpretation, 1986",
                "thumb_url": "https://i.ytimg.com/vi/2Op3QLzMgSY/hqdefault.jpg?sqp=-oaymwEWCKgBEF5IWvKriqkDCQgBFQAAiEIYAQ==&rs=AOn4CLAbcDJ2Ck-AhIeH-rlZguhttTpvvQ&days_since_epoch=18685",
                "from_url": "https://www.youtube.com/playlist?list=PLE18841CABEA24090",
                "thumb_width": 168,
                "thumb_height": 94,
                "service_icon": "https://www.youtube.com/s/desktop/f1c5e957/img/favicon.ico",
                "id": 1,
                "original_url": "https://www.youtube.com/playlist?list=PLE18841CABEA24090"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=MX",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "SICP"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "MIT recently put up the lecture series for this by the book authors: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/playlist?list=PLE18841CABEA24090"
                            },
                            {
                                "type": "text",
                                "text": "\nI'm about to go through it myself"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "2911edd9-7b1f-4c58-bce8-c2c8a4ec7615",
        "type": "message",
        "text": "I also really enjoyed this one for an imperative (C-family) looking syntax with LISP semantics, and models the execution using continuation passing style *under the hood* (e.g. so you don't see it - like a language that has async and await syntax to make callbacks seem synchronous, but it's just that way by default with no extra syntax).\n\nThis provides for very interesting semantics that's not possible without CPS, such as being able to implement things that break or resume flow (e.g returns, exception-throwing, continuations), using plain old expressions that aren't baked into the compiler.\n\n<http://lisperator.net/pltut/|http://lisperator.net/pltut/>",
        "user": "UAVCC2X70",
        "ts": "1614459125.040600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1614459265.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9Be3T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also really enjoyed this one for an imperative (C-family) looking syntax with LISP semantics, and models the execution using continuation passing style "
                            },
                            {
                                "type": "text",
                                "text": "under the hood",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (e.g. so you don't see it - like a language that has async and await syntax to make callbacks seem synchronous, but it's just that way by default with no extra syntax).\n\nThis provides for very interesting semantics that's not possible without CPS, such as being able to implement things that break or resume flow (e.g returns, exception-throwing, continuations), using plain old expressions that aren't baked into the compiler.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http://lisperator.net/pltut/",
                                "text": "http://lisperator.net/pltut/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "4aae9082-b57e-4d04-a0ce-578d1620bd74",
        "type": "message",
        "text": "Thanks for getting SICP back on my radar. I had read it a long time ago. Turns out just reading the Foreword today tickles a lot more synapses than it did back then\u2026",
        "user": "U5STGTB3J",
        "ts": "1614771284.041900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vBl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for getting SICP back on my radar. I had read it a long time ago. Turns out just reading the Foreword today tickles a lot more synapses than it did back then\u2026"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1614366089.029100",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UL5AX4G2H"
                ],
                "count": 1
            }
        ]
    }
]