[
    {
        "client_msg_id": "7b84a83a-2ec7-4397-a6b9-b1481fbdd7ad",
        "type": "message",
        "text": "Such a cool idea. I knew where he was going after the first paragraph. And yet I never thought of it.",
        "user": "UCUSW7WVD",
        "ts": "1613516663.151400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2Mtg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Such a cool idea. I knew where he was going after the first paragraph. And yet I never thought of it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9ec74d66-7d31-4e1e-bc76-1903c0e1165e",
        "type": "message",
        "text": "<@U8A5MS6R1> \u2014 It has _something_. You can put conveyors (loaded with stuff) on conveyors. But it's weird to think about, and I don't like it, and I'm kinda just ignoring that it is even possible for now. It's emergent from Hest's elements in the way that, say, (absent ASLR, etc) using pointers to that point at your own code is emergent. You can do it but.. don't.\n\nConveyors conveying conveyors even looks weird. They tend to wander around unpredictably. So maybe a good term for them would be \"nomads\".",
        "user": "UC2A2ARPT",
        "ts": "1613518173.151600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aTC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " \u2014 It has "
                            },
                            {
                                "type": "text",
                                "text": "something",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". You can put conveyors (loaded with stuff) on conveyors. But it's weird to think about, and I don't like it, and I'm kinda just ignoring that it is even possible for now. It's emergent from Hest's elements in the way that, say, (absent ASLR, etc) using pointers to that point at your own code is emergent. You can do it but.. don't.\n\nConveyors conveying conveyors even looks weird. They tend to wander around unpredictably. So maybe a good term for them would be \"nomads\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UCUSW7WVD",
                    "UAVCC2X70"
                ],
                "count": 2
            },
            {
                "name": "joy",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            },
            {
                "name": "unicorn_face",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0a88d0a9-877c-4698-958f-d617208523bd",
        "type": "message",
        "text": "Two examples:\n\n<https://twitter.com/spiralganglion/status/1145188460203872256|Bezier curves>. This is just cute for the sake of cute. It doesn't accomplish anything meaningful in terms of code.\n\n<https://twitter.com/spiralganglion/status/1153777314443849728|Whatever the hell this is>.",
        "user": "UC2A2ARPT",
        "ts": "1613518374.152000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1613518379.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X6Abw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Two examples:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/spiralganglion/status/1145188460203872256",
                                "text": "Bezier curves"
                            },
                            {
                                "type": "text",
                                "text": ". This is just cute for the sake of cute. It doesn't accomplish anything meaningful in terms of code.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/spiralganglion/status/1153777314443849728",
                                "text": "Whatever the hell this is"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "469e53f6-73a6-49ef-b37e-4204a83de5a5",
        "type": "message",
        "text": "I've seen the invisible-middle demo before, and kinda nodded along. But the bezier curve, whaa, what the heck is even that? Is it a single curve? Extremely mind-bending.",
        "user": "UCUSW7WVD",
        "ts": "1613518522.152500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SZ5Kb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've seen the invisible-middle demo before, and kinda nodded along. But the bezier curve, whaa, what the heck is even that? Is it a single curve? Extremely mind-bending."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "8bc55d7b-7e72-4ab7-8927-b73704454534",
        "type": "message",
        "text": "The bezier curve thing is just... me dialling-in what I want Hest to _look_ like. It's not actually doing any computation*. It's literally just using the 3 essential language primitives (points, edges, and conveyance) to do the geometric construction of a bezier curve. It's playing off the fact that the programming tools _are_ art tools.\n\n(* thank goodness, because I don't want to even start to think about what it _means_ to do multiple nested layers of conveyors. Gross gross yuck no get it out of my body)",
        "user": "UC2A2ARPT",
        "ts": "1613518849.152700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1613518926.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a0q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The bezier curve thing is just... me dialling-in what I want Hest to "
                            },
                            {
                                "type": "text",
                                "text": "look ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "like. It's not actually doing any computation*. It's literally just using the 3 essential language primitives (points, edges, and conveyance) to do the geometric construction of a bezier curve. It's playing off the fact that the programming tools "
                            },
                            {
                                "type": "text",
                                "text": "are",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " art tools.\n\n(* thank goodness, because I don't want to even start to think about what it "
                            },
                            {
                                "type": "text",
                                "text": "means",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to do multiple nested layers of conveyors. Gross gross yuck no get it out of my body)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "3d4da929-ce6d-4e19-8682-679b08bef59f",
        "type": "message",
        "text": "&gt; I knew where he was going after the first paragraph. And yet I never thought of it.\n<@UCUSW7WVD> \u2014\u00a0Have you played Factorio? Or any of the other process-oriented programming games? (SpaceChem being my favourite, though it's _very_ imperative.)",
        "user": "UC2A2ARPT",
        "ts": "1613519009.153100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1613519053.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fpUQ",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I knew where he was going after the first paragraph. And yet I never thought of it."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " \u2014\u00a0Have you played Factorio? Or any of the other process-oriented programming games? (SpaceChem being my favourite, though it's "
                            },
                            {
                                "type": "text",
                                "text": "very",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " imperative.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "38c76e6e-b1dc-4f9e-9950-c15f8579ebda",
        "type": "message",
        "text": "No, not yet. It's been on my mind to do that. Especially if I do end up taking some time off from Mu.",
        "user": "UCUSW7WVD",
        "ts": "1613520327.153800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "49cE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No, not yet. It's been on my mind to do that. Especially if I do end up taking some time off from Mu."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9e27b5bc-ad89-4653-a678-8c22362ca165",
        "type": "message",
        "text": "It's been a while, but I seem to remember \"points carrying points\" being close to the essence of Bezier curves even if you're not doing visual programming. So, if that's a natural way to implement them in Hest, neato.",
        "user": "U016VUZGUUQ",
        "ts": "1613521412.154300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GdF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's been a while, but I seem to remember \"points carrying points\" being close to the essence of Bezier curves even if you're not doing visual programming. So, if that's a natural way to implement them in Hest, neato."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "362b8d7f-1318-4e77-84a0-09e1220043af",
        "type": "message",
        "text": "The thought of making a programming language feel like a video game is (very) exciting, but I've concluded in the past that a lot of the _*fun*_ in video games is making incremental, measurable progress towards goals. Video games usually set this up by creating webs of _artificial hurdles_, and you obviously don't want to be doing that in a PL. For example, in Factorio you periodically run into bottlenecks in your factory, for example a belt reaches its capacity, or you start running low on a resource. It's _fun_ to resolve these artificial constraints, and that's what most of Factorio is about. There's no analogue of these things for writing code :confused: (except perhaps performance optimization, which is rarely \"fun\").",
        "user": "UCGAK10LS",
        "ts": "1613524717.154800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "teoPi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The thought of making a programming language feel like a video game is (very) exciting, but I've concluded in the past that a lot of the "
                            },
                            {
                                "type": "text",
                                "text": "fun",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in video games is making incremental, measurable progress towards goals. Video games usually set this up by creating webs of "
                            },
                            {
                                "type": "text",
                                "text": "artificial hurdles",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and you obviously don't want to be doing that in a PL. For example, in Factorio you periodically run into bottlenecks in your factory, for example a belt reaches its capacity, or you start running low on a resource. It's "
                            },
                            {
                                "type": "text",
                                "text": "fun",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to resolve these artificial constraints, and that's what most of Factorio is about. There's no analogue of these things for writing code "
                            },
                            {
                                "type": "emoji",
                                "name": "confused"
                            },
                            {
                                "type": "text",
                                "text": " (except perhaps performance optimization, which is rarely \"fun\")."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "d1ce6878-ee71-4a66-bfd7-2fe3d1a77929",
        "type": "message",
        "text": "Disagree, I think? The hurdles don't have to be artificial to be fun. There are lots of times in programming when you can make incremental, measurable progress. If you've got your abstractions and data model set up right, you can crunch your way through e.g. UI or web request handling (recent examples for me). At its best, writing video game code itself feels the same. TDD is (in my understanding) in large part a way to make that feedback loop more repeatable.",
        "user": "U016VUZGUUQ",
        "ts": "1613526096.155200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aex",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Disagree, I think? The hurdles don't have to be artificial to be fun. There are lots of times in programming when you can make incremental, measurable progress. If you've got your abstractions and data model set up right, you can crunch your way through e.g. UI or web request handling (recent examples for me). At its best, writing video game code itself feels the same. TDD is (in my understanding) in large part a way to make that feedback loop more repeatable."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "cde55942-ac77-4fba-8b08-804ded99b2d1",
        "type": "message",
        "text": "I've definitely had fun programming before, don't get me wrong :stuck_out_tongue:. But much of my time spent in the IDE is struggling to figure out what low-level thing needs to be done next, and the correct steps to accomplish it (and then of course, figuring out that you've done something wrong, and trying to figure out _why_ it's wrong). That deep, low-level problem-solving is definitely not as fun as running around building conveyer belts. It tends to be much more mentally exhausting.",
        "user": "UCGAK10LS",
        "ts": "1613534078.155400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y0o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've definitely had fun programming before, don't get me wrong "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            },
                            {
                                "type": "text",
                                "text": ". But much of my time spent in the IDE is struggling to figure out what low-level thing needs to be done next, and the correct steps to accomplish it (and then of course, figuring out that you've done something wrong, and trying to figure out "
                            },
                            {
                                "type": "text",
                                "text": "why",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " it's wrong). That deep, low-level problem-solving is definitely not as fun as running around building conveyer belts. It tends to be much more mentally exhausting."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "f6726381-bdd1-4402-b0fd-eda6c1a471c4",
        "type": "message",
        "text": "Isn't it folklore that programming can never be \"fun\" all the time, because by definition, if you can keep your mental taxation low, then it's because you're doing rote work, and rote work can (and *should*) be automated/abstracted?",
        "user": "UCGAK10LS",
        "ts": "1613534187.155600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DcMH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Isn't it folklore that programming can never be \"fun\" all the time, because by definition, if you can keep your mental taxation low, then it's because you're doing rote work, and rote work can (and "
                            },
                            {
                                "type": "text",
                                "text": "should",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ") be automated/abstracted?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "017cc28c-dee5-4e87-864d-d485dec56798",
        "type": "message",
        "text": "Just watched the recording of \"The mouse holds us\". Really liked the last monologue :slightly_smiling_face: cool stuff.",
        "user": "UN9SCH5RD",
        "ts": "1613536241.155800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CYml",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just watched the recording of \"The mouse holds us\". Really liked the last monologue "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " cool stuff."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612492183.060600",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "1561961d-7d68-4634-a80a-8d382b209a7d",
        "type": "message",
        "text": "&gt; a lot of the\u00a0_*fun*_\u00a0in video games is making incremental, measurable progress towards goals. [lots of good thoughts excised for brevity] There's no analogue of these things for writing code\nI don't believe that that's true. I can't prove it, but it doesn't feel right. But I would totally agree with _There's no *known* analogue of these things for writing code._\n\nI have it as one of my ambient background shower-thought processing tasks to figure out how to design game dynamics (to borrow the sorta dated \"mechanics / dynamics / aesthetics\" framework) that encode programming-related tasks, such that you can enjoy playing with these dynamics in a game-y system while still accomplishing actual creative / expressive work (loathe to say _productive work_, but sub that in if that thought doesn't irritate you the way it does me).\n\nIt's easy to imagine a ton of kinda-bad \"gamification\"-y visions. The most well-known bad example is probably Github's contribution tracking. It incentivizes opening and closing a lot of low-value issues, and making a lot of tiny low-value commits. But Github also fosters the _social motivation_ to write good docs, which is very good (and very conventional) _dynamics_ design.\n\nI think once we're playing in the \"Factorio is my IDE\" space, there's _plenty_ of unexplored possibility and very little should be taken as a given.",
        "user": "UC2A2ARPT",
        "ts": "1613537099.156000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1613574684.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OSYe",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a lot of the\u00a0"
                            },
                            {
                                "type": "text",
                                "text": "fun",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u00a0in video games is making incremental, measurable progress towards goals. [lots of good thoughts excised for brevity] There's no analogue of these things for writing code"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI don't believe that that's true. I can't prove it, but it doesn't feel right. But I would totally agree with "
                            },
                            {
                                "type": "text",
                                "text": "There's no ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "known",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " analogue of these things for writing code.",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nI have it as one of my ambient background shower-thought processing tasks to figure out how to design game dynamics (to borrow the sorta dated \"mechanics / dynamics / aesthetics\" framework) that encode programming-related tasks, such that you can enjoy playing with these dynamics in a game-y system while still accomplishing actual creative / expressive work (loathe to say "
                            },
                            {
                                "type": "text",
                                "text": "productive work",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but sub that in if that thought doesn't irritate you the way it does me).\n\nIt's easy to imagine a ton of kinda-bad \"gamification\"-y visions. The most well-known bad example is probably Github's contribution tracking. It incentivizes opening and closing a lot of low-value issues, and making a lot of tiny low-value commits. But Github also fosters the "
                            },
                            {
                                "type": "text",
                                "text": "social motivation",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to write good docs, which is very good (and very conventional) "
                            },
                            {
                                "type": "text",
                                "text": "dynamics",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " design.\n\nI think once we're playing in the \"Factorio is my IDE\" space, there's "
                            },
                            {
                                "type": "text",
                                "text": "plenty",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of unexplored possibility and very little should be taken as a given."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "U01JHG5RQDQ",
                    "UML4ZEKDK",
                    "UHWC9PXBL"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "1c591c5e-9ccc-40ac-a61c-7eab77096e87",
        "type": "message",
        "text": "If you can prove me wrong, you'll be a legend Ivan  :heart_eyes:. I'm ready to implement (steal :smirk:) promising ideas at a moment's notice. But yeah, the key point is not to add artificial elements to the act of programming, such that you're able to \"score points\" and get dopamine hits whilst doing very little actual work. I definitely see gamification working for chores like code review, which can be quite rote.",
        "user": "UCGAK10LS",
        "ts": "1613537589.156300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1613537690.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o2wTs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you can prove me wrong, you'll be a legend Ivan  "
                            },
                            {
                                "type": "emoji",
                                "name": "heart_eyes"
                            },
                            {
                                "type": "text",
                                "text": ". I'm ready to implement (steal "
                            },
                            {
                                "type": "emoji",
                                "name": "smirk"
                            },
                            {
                                "type": "text",
                                "text": ") promising ideas at a moment's notice. But yeah, the key point is not to add artificial elements to the act of programming, such that you're able to \"score points\" and get dopamine hits whilst doing very little actual work. I definitely see gamification working for chores like code review, which can be quite rote."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ccea155a-7eae-4e02-aa3a-681467f93f73",
        "type": "message",
        "text": "Yes, the key is to make sure the goals or \"points\" are real. This probably means they need to be self-defined, seeing how measuring software productivity is an open problem and will likely remain that way forever.\n\nI just remembered: possibly the most video-game-like experience I've had while \"programming\" was my brief experience trying to prove things in Coq. Real goals (of a sort, these were practice problems), with a little dopamine hit when I proved each one, including subgoals. Sometimes I had to think creatively, sometimes I could just grind through. Similar to the TDD example, I guess, treating a spec as the goal. If it's not exactly a research direction in itself, I think this is at least a potential payoff of improving the ergonomics of formal methods.",
        "user": "U016VUZGUUQ",
        "ts": "1613545263.157300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WCBKy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, the key is to make sure the goals or \"points\" are real. This probably means they need to be self-defined, seeing how measuring software productivity is an open problem and will likely remain that way forever.\n\nI just remembered: possibly the most video-game-like experience I've had while \"programming\" was my brief experience trying to prove things in Coq. Real goals (of a sort, these were practice problems), with a little dopamine hit when I proved each one, including subgoals. Sometimes I had to think creatively, sometimes I could just grind through. Similar to the TDD example, I guess, treating a spec as the goal. If it's not exactly a research direction in itself, I think this is at least a potential payoff of improving the ergonomics of formal methods."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS",
                    "U013ZLJARC7",
                    "UC2A2ARPT"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "41437FC5-D84E-4A80-9ACE-F82B38E00D7B",
        "type": "message",
        "text": "Always Bet on Text, by the designer of Rust\n\n&gt; I figured I should just post this somewhere so I can make future reference to how I feel about the matter, anytime someone asks me about such-and-such video, 3D, game or \"dynamic\" multimedia system. Don't get me wrong, I like me some illustrations, photos, movies and music.\n&gt; But text wins by a mile. Text is everything. My thoughts on this are quite absolute: text is the most powerful, useful, effective communication technology ever, period.\n<https://graydon2.dreamwidth.org/193447.html|https://graydon2.dreamwidth.org/193447.html>\n\n<https://news.ycombinator.com/item?id=26164001|https://news.ycombinator.com/item?id=26164001>",
        "user": "U01L1TTFP62",
        "ts": "1613561494.159300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01L1TTFP62",
            "ts": "1613561521.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "soMK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Always Bet on Text, by the designer of Rust\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I figured I should just post this somewhere so I can make future reference to how I feel about the matter, anytime someone asks me about such-and-such video, 3D, game or \"dynamic\" multimedia system. Don't get me wrong, I like me some illustrations, photos, movies and music."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But text wins by a mile. Text is everything. My thoughts on this are quite absolute: text is the most powerful, useful, effective communication technology ever, period."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://graydon2.dreamwidth.org/193447.html",
                                "text": "https://graydon2.dreamwidth.org/193447.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=26164001",
                                "text": "https://news.ycombinator.com/item?id=26164001"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613561494.159300",
        "reply_count": 8,
        "reply_users_count": 7,
        "latest_reply": "1613789184.004200",
        "reply_users": [
            "U01L1TTFP62",
            "UCUSW7WVD",
            "U016VUZGUUQ",
            "U01JNTE35QS",
            "U8A5MS6R1",
            "U013ZLJARC7",
            "UHWC9PXBL"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "7154E1D2-91D8-43CD-A9DB-D9B18399E1E6",
        "type": "message",
        "text": "I just find this sentiment to be so tunnel visioned and almost Luddite. I get to the point where it's just disappointing.\n\nAlso, by their pictures, they have an ironically broad definition of text.",
        "user": "U01L1TTFP62",
        "ts": "1613561658.161300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pjB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just find this sentiment to be so tunnel visioned and almost Luddite. I get to the point where it's just disappointing.\n"
                            },
                            {
                                "type": "text",
                                "text": "\nAlso, by their pictures, they have an ironically broad definition of text."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613561494.159300",
        "parent_user_id": "U01L1TTFP62",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U01JHG5RQDQ",
                    "UC2A2ARPT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "e9c8fedc-52eb-47cc-bafd-837ea4913ea4",
        "type": "message",
        "text": "It's a long-standing debate. I think it's natural that people lie all along the spectrum.\n\nWhy do you find the definition of text broad, though? Everything in the pictures is in Unicode? That seems a useful definition of 'text'.",
        "user": "UCUSW7WVD",
        "ts": "1613564099.161500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rESy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's a long-standing debate. I think it's natural that people lie all along the spectrum.\n\nWhy do you find the definition of text broad, though? Everything in the pictures is in Unicode? That seems a useful definition of 'text'."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613561494.159300",
        "parent_user_id": "U01L1TTFP62"
    },
    {
        "client_msg_id": "a3acb310-dc95-4e90-bc84-36a783ca56d9",
        "type": "message",
        "text": "&gt; Isn't it folklore that programming can never be \"fun\" all the time, because by definition, if you can keep your mental taxation low, then it's because you're doing rote work, and rote work can (and\u00a0*should*) be automated/abstracted?\nI don't think fun comes from low mental taxation, but rather operating at the edge of one's capabilities. (See: Flow, &amp;c). Tooling drives me crazy primarily when it breaks my flow states and makes me deal with nonsense rather than focusing my attention on the problem I'm trying to solve.",
        "user": "U013ZLJARC7",
        "ts": "1613569348.161700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U013ZLJARC7",
            "ts": "1613569422.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Gh",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Isn't it folklore that programming can never be \"fun\" all the time, because by definition, if you can keep your mental taxation low, then it's because you're doing rote work, and rote work can (and\u00a0"
                            },
                            {
                                "type": "text",
                                "text": "should",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ") be automated/abstracted?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't think fun comes from low mental taxation, but rather operating at the edge of one's capabilities. (See: Flow, &c). Tooling drives me crazy primarily when it breaks my flow states and makes me deal with nonsense rather than focusing my attention on the problem I'm trying to solve."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613514848.149300",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U5STGTB3J",
                    "U8A5MS6R1",
                    "UA14TGLTC"
                ],
                "count": 3
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UCUSW7WVD",
                    "UCGAK10LS"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "5d16817d-682f-461f-aaa4-6a93a570c946",
        "type": "message",
        "text": "I don't think it's super clear what his argument is. I think it's very true that text is the _safe_ bet, given its flexibility and how hard it is to get that same expressiveness in other media. It would be a mistake to say that means text is the only way forever and any alternative is doomed, and I suspect that's why Graydon danced around actually saying that.\n\nWith that said, using math notation as an example in the context of computer systems is a bit iffy. I mean, he's mostly talking about encoding and transmission, but it's hard to separate \"text is awesome\" from the existing widespread tooling, and that latter part is not totally there for math (it exists, but in small patches relative to the larger ecosystem). Again, not exactly what he said, so I might just totally be projecting my bias here.\n\nI would definitely say that if you're going to go beyond text, natively supporting math notation would be a good direction to go. Casually using a bar for division in a large formula would be great.",
        "user": "U016VUZGUUQ",
        "ts": "1613575655.162900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=LPt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't think it's super clear what his argument is. I think it's very true that text is the "
                            },
                            {
                                "type": "text",
                                "text": "safe",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " bet, given its flexibility and how hard it is to get that same expressiveness in other media. It would be a mistake to say that means text is the only way forever and any alternative is doomed, and I suspect that's why Graydon danced around actually saying that.\n\nWith that said, using math notation as an example in the context of computer systems is a bit iffy. I mean, he's mostly talking about encoding and transmission, but it's hard to separate \"text is awesome\" from the existing widespread tooling, and that latter part is not totally there for math (it exists, but in small patches relative to the larger ecosystem). Again, not exactly what he said, so I might just totally be projecting my bias here.\n\nI would definitely say that if you're going to go beyond text, natively supporting math notation would be a good direction to go. Casually using a bar for division in a large formula would be great."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613561494.159300",
        "parent_user_id": "U01L1TTFP62"
    },
    {
        "client_msg_id": "11f20a71-ab41-47ec-b425-95846a9e231d",
        "type": "message",
        "text": "This is such a narrow minded statement - has he not heard of Tufte, Feynman diagrams, Ken Iverson, or even electrical circuits?",
        "user": "U01JNTE35QS",
        "ts": "1613579493.163100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kD0mx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is such a narrow minded statement - has he not heard of Tufte, Feynman diagrams, Ken Iverson, or even electrical circuits?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613561494.159300",
        "parent_user_id": "U01L1TTFP62",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "742c91a3-f916-42f8-ae17-585cb6a95558",
        "type": "message",
        "text": "APL is notably dead, replaced by text-based descendants, so I think that example bears out his point. Feynman diagrams are helpful, but IIUC more combinatorial schematics than complete descriptions, for which you need... well, math, which is still closer to text than pictures. Electrical circuits and Tufte (if you mean <https://www.edwardtufte.com/tufte/|this one>) are solving entirely different problems than Graydon is (granted, implicitly) considering, so I don't think those are germane examples. Graydon may be cynical here, but I don't think he's narrow-minded.\n\nEd: he might even consider APL text to some extent. Between the abstraction level and semi-related pictures, it's hard to say precisely what his point is and isn't.",
        "user": "U016VUZGUUQ",
        "ts": "1613598776.163700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U016VUZGUUQ",
            "ts": "1613599004.000000"
        },
        "attachments": [
            {
                "title": "The Work of Edward Tufte and Graphics Press",
                "title_link": "https://www.edwardtufte.com/tufte/",
                "text": "Edward Tufte home page for books, posters, sculpture, fine art and one-day course: Presenting Data and Information",
                "fallback": "The Work of Edward Tufte and Graphics Press",
                "from_url": "https://www.edwardtufte.com/tufte/",
                "service_name": "edwardtufte.com",
                "id": 1,
                "original_url": "https://www.edwardtufte.com/tufte/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nld",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "APL is notably dead, replaced by text-based descendants, so I think that example bears out his point. Feynman diagrams are helpful, but IIUC more combinatorial schematics than complete descriptions, for which you need... well, math, which is still closer to text than pictures. Electrical circuits and Tufte (if you mean "
                            },
                            {
                                "type": "link",
                                "url": "https://www.edwardtufte.com/tufte/",
                                "text": "this one"
                            },
                            {
                                "type": "text",
                                "text": ") are solving entirely different problems than Graydon is (granted, implicitly) considering, so I don't think those are germane examples. Graydon may be cynical here, but I don't think he's narrow-minded.\n\nEd: he might even consider APL text to some extent. Between the abstraction level and semi-related pictures, it's hard to say precisely what his point is and isn't."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613561494.159300",
        "parent_user_id": "U01L1TTFP62"
    },
    {
        "client_msg_id": "ab62af67-2a65-49bb-a324-9b7db3c32594",
        "type": "message",
        "text": "It's really cool.",
        "user": "UF3V37GCE",
        "ts": "1613600324.164100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "noT/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's really cool."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612982723.095800",
        "parent_user_id": "UJ6LDMMN0"
    },
    {
        "client_msg_id": "3bb4f450-a844-4b68-acb1-5ef2ced23dc4",
        "type": "message",
        "text": "Now this scratch model exisits as financial language in Cardano.",
        "user": "UF3V37GCE",
        "ts": "1613600378.164300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZybF=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Now this scratch model exisits as financial language in Cardano."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612982723.095800",
        "parent_user_id": "UJ6LDMMN0"
    },
    {
        "client_msg_id": "06f95888-325e-4805-9825-ff8304a6dd85",
        "type": "message",
        "text": "<https://www.youtube.com/watch?v=GqKxLiaY4-s>",
        "user": "UF3V37GCE",
        "ts": "1613600399.164500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Cardano Starter Kit #001b - The Marlowe Playground (mini-lesson)",
                "title_link": "https://www.youtube.com/watch?v=GqKxLiaY4-s",
                "author_name": "Workshop Maybe",
                "author_link": "https://www.youtube.com/c/WorkshopMaybe",
                "thumb_url": "https://i.ytimg.com/vi/GqKxLiaY4-s/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Cardano Starter Kit #001b - The Marlowe Playground (mini-lesson)",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/GqKxLiaY4-s?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=GqKxLiaY4-s",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=GqKxLiaY4-s"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "riQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=GqKxLiaY4-s"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612982723.095800",
        "parent_user_id": "UJ6LDMMN0",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    }
]