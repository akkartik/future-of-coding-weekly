[
    {
        "client_msg_id": "ca15a2cc-4832-4424-b621-9089e100cab4",
        "type": "message",
        "text": "<@UAVCC2X70> I think by \"actually\" circular you mean that in practice each version is built by the previous version. That way you end up with the \"trusting trust\" problem. So to avoid turning into C, I think you often want a non-circular solution as well that you continue to maintain. Which puts some pressure on the benefits.\n\nMetacircularity is still often a good idea, but not self-evidently so. So I really wish posts like this would start by articulating their goals and why metacircularity makes sense for them.",
        "user": "UCUSW7WVD",
        "ts": "1613191464.131900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B2Mh7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " I think by \"actually\" circular you mean that in practice each version is built by the previous version. That way you end up with the \"trusting trust\" problem. So to avoid turning into C, I think you often want a non-circular solution as well that you continue to maintain. Which puts some pressure on the benefits.\n\nMetacircularity is still often a good idea, but not self-evidently so. So I really wish posts like this would start by articulating their goals and why metacircularity makes sense for them."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612344518.049600",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "b6791ddd-8f29-4449-9d3f-1eb6a16f90ba",
        "type": "message",
        "text": "In answer to \"actually circular\" and also \"good but not self-evident\" (and I may be projecting, so take it with a grain of salt as _my perspective_):\n\nI think many programmers sense something deeply powerful or profound about metacircularity (a thing \"making itself\" or \"running itself\", etc.), but can't substantiate why. The response to this dissonance ranges from dismissing it as intriguing but useless; to finding \"usefulness\" that is then over-attributed with that sense of power or profoundness.\n\nThe powerful idea is that software is made of lever-making-levers: We can potentially leverage all the power of programming, to leverage all the power of programming. That power that is just sitting there, largely untapped; and the (usually unconscious but strong) intuition is that some kind of circular bootstrapping will unlock some form of power like that.\n\nThe problem is that the circle needs to be _complete_ for that to work, and there are two approaches one can attempt:\n(1) A bootstraps B bootstraps C ... forever. This is a nonsense path.\n(2) A bootstraps A.\n\nThe problem is that there are plenty of examples that LOOK like option 2, but they are all in fact, option 1. In the example at the top of this thread, that runtime _is not_ running _itself_. It is a running a _copy_ of itself. That _in itself_ is no different than just having the one layer. If it it's because of the \"sandboxing\", well how is that different than writing your own custom runtime for (those java components) in _any_ language or platform at all? It being the same language is ... nice, I guess? Ok, so maybe it's the fact that the \"top\" runtime itself can be controlled or modified or interfaced with from the \"bottom\" one?  I admit that's cool; but the same could be said of the same runtime hosted on a _different_ runtime / stack. So what does this kind of \"bootstrapping\" buy, other than \"same language\"?\n\nAnd it's a similar story for something being able to \"evaluate itself\" (or [anything] itself). Usually that the \"itself\" is not actually _it*self*._\n\nSo stepping back, this is just A hosts B. B just happens to be a _copy_ of A. And if that seems deeply exciting or profound for _some reason_ -- that's because there _is_ enormous potential power down that path because of what it makes _possible_. But unless that power is actually tapped into, then it's just a fact; and I personally think that the programmer psyche struggles at this point to intuit that the circularity is not complete, or what the meaningfulness is behind the intuition of power.\n\nIt's like if there were giant robot arms with a joystick that can be used to build or do anything, and we use them to build all kinds of amazing machines that are intuitive to use and easy to interact with, depending on what the thing is. But we do this construction by using the arms to manually construct each thing, piece by piece (aka \"coding\"). What the heck? Why not make machines to make it easier to make machines? Break away from thinking of everything in terms of up/down/grab/release, and make tools that can be used in whatever direct terms makes sense. Use the arms to change the arms into something better. Except that the arms are not changeable as they are; so, create arms that *are* changeable by using arms. And none of this: use arm-A to make arm-B and then use arm-B to .... no no, make a self-changeable arm, and then just use that arm! Oh, I need to be able to reach like this today? (adjusts-self) There. THAT is meta*circular*\n\nInteresting parallel: Living structure is by definition, metacircular",
        "user": "UAVCC2X70",
        "ts": "1613197350.132300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1613236279.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KcvR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In answer to \"actually circular\" and also \"good but not self-evident\" (and I may be projecting, so take it with a grain of salt as "
                            },
                            {
                                "type": "text",
                                "text": "my perspective",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "):\n\nI think many programmers sense something deeply powerful or profound about metacircularity (a thing \"making itself\" or \"running itself\", etc.), but can't substantiate why. The response to this dissonance ranges from dismissing it as intriguing but useless; to finding \"usefulness\" that is then over-attributed with that sense of power or profoundness.\n\nThe powerful idea is that software is made of lever-making-levers: We can potentially leverage all the power of programming, to leverage all the power of programming. That power that is just sitting there, largely untapped; and the (usually unconscious but strong) intuition is that some kind of circular bootstrapping will unlock some form of power like that.\n\nThe problem is that the circle needs to be "
                            },
                            {
                                "type": "text",
                                "text": "complete",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for that to work, and there are two approaches one can attempt:\n(1) A bootstraps B bootstraps C ... forever. This is a nonsense path.\n(2) A bootstraps A.\n\nThe problem is that there are plenty of examples that LOOK like option 2, but they are all in fact, option 1. In the example at the top of this thread, that runtime "
                            },
                            {
                                "type": "text",
                                "text": "is not",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " running "
                            },
                            {
                                "type": "text",
                                "text": "itself",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". It is a running a "
                            },
                            {
                                "type": "text",
                                "text": "copy",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of itself. That "
                            },
                            {
                                "type": "text",
                                "text": "in itself",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is no different than just having the one layer. If it it's because of the \"sandboxing\", well how is that different than writing your own custom runtime for (those java components) in "
                            },
                            {
                                "type": "text",
                                "text": "any",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " language or platform at all? It being the same language is ... nice, I guess? Ok, so maybe it's the fact that the \"top\" runtime itself can be controlled or modified or interfaced with from the \"bottom\" one?  I admit that's cool; but the same could be said of the same runtime hosted on a "
                            },
                            {
                                "type": "text",
                                "text": "different",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " runtime / stack. So what does this kind of \"bootstrapping\" buy, other than \"same language\"?\n\nAnd it's a similar story for something being able to \"evaluate itself\" (or [anything] itself). Usually that the \"itself\" is not actually "
                            },
                            {
                                "type": "text",
                                "text": "it*self*.",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nSo stepping back, this is just A hosts B. B just happens to be a "
                            },
                            {
                                "type": "text",
                                "text": "copy",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of A. And if that seems deeply exciting or profound for "
                            },
                            {
                                "type": "text",
                                "text": "some reason",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " -- that's because there "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " enormous potential power down that path because of what it makes "
                            },
                            {
                                "type": "text",
                                "text": "possible",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". But unless that power is actually tapped into, then it's just a fact; and I personally think that the programmer psyche struggles at this point to intuit that the circularity is not complete, or what the meaningfulness is behind the intuition of power.\n\nIt's like if there were giant robot arms with a joystick that can be used to build or do anything, and we use them to build all kinds of amazing machines that are intuitive to use and easy to interact with, depending on what the thing is. But we do this construction by using the arms to manually construct each thing, piece by piece (aka \"coding\"). What the heck? Why not make machines to make it easier to make machines? Break away from thinking of everything in terms of up/down/grab/release, and make tools that can be used in whatever direct terms makes sense. Use the arms to change the arms into something better. Except that the arms are not changeable as they are; so, create arms that *are* changeable by using arms. And none of this: use arm-A to make arm-B and then use arm-B to .... no no, make a self-changeable arm, and then just use that arm! Oh, I need to be able to reach like this today? (adjusts-self) There. THAT is meta*circular*\n\nInteresting parallel: Living structure is by definition, metacircular"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612344518.049600",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "e21eb482-d8f8-4e4d-bffc-632b4c692e44",
        "type": "message",
        "text": "This is a really interesting topic. How does say Python fair here? It's the staple ingredient in most popular data science / machine learning oriented stacks. Most heavy computation is done indirectly via libraries who in turn call out to tightly optimized C++ or GPU code. On the plus side, that gives you the flexibility of a high level language to declaring your computational flow in with the heavy work done in optimized land. Of course, this also makes it a lot of \"fun\" if you want to customize / inject yourself into some part of the computation, since you need to drop down to Cython or so.\n\nOn a secondary note, what do you think of Blow's Jai language? <https://inductive.no/jai/|Here>'s a some information on Jai for the unfimilar - basically, C++ \"but better\", intended for games but quite general.",
        "user": "U01KZQEQVUP",
        "ts": "1613212519.135900",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Inductive",
                "title": "jai programming language resources and information",
                "title_link": "https://inductive.no/jai/",
                "text": "jai is an exciting new programming language being developed by Jonathan Blow. This website contains resources and information about this new language.",
                "fallback": "Inductive: jai programming language resources and information",
                "from_url": "https://inductive.no/jai/",
                "service_icon": "https://inductive.no/wp-content/uploads/2015/04/icon.png",
                "id": 1,
                "original_url": "https://inductive.no/jai/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C6HT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is a really interesting topic. How does say Python fair here? It's the staple ingredient in most popular data science / machine learning oriented stacks. Most heavy computation is done indirectly via libraries who in turn call out to tightly optimized C++ or GPU code. On the plus side, that gives you the flexibility of a high level language to declaring your computational flow in with the heavy work done in optimized land. Of course, this also makes it a lot of \"fun\" if you want to customize / inject yourself into some part of the computation, since you need to drop down to Cython or so.\n\nOn a secondary note, what do you think of Blow's Jai language? "
                            },
                            {
                                "type": "link",
                                "url": "https://inductive.no/jai/",
                                "text": "Here"
                            },
                            {
                                "type": "text",
                                "text": "'s a some information on Jai for the unfimilar - basically, C++ \"but better\", intended for games but quite general."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    },
    {
        "client_msg_id": "1892e02c-bb80-48c4-b3e3-89af7f15f645",
        "type": "message",
        "text": "\"almost no one is building a system that really requires more than one machine\" \u2014 have hundreds of billions of dollars of transactions to prove it.  Guess I'll retire after overseeing $1T.  We've always used one server \u2014 running Rails!  :wolf:  Except for that one time when had a calculation that needed parallelizing over a few hundred EC2 instances.  We used Redis.",
        "user": "UA14TGLTC",
        "ts": "1613216003.136800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DWmNH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"almost no one is building a system that really requires more than one machine\" \u2014 have hundreds of billions of dollars of transactions to prove it.  Guess I'll retire after overseeing $1T.  We've always used one server \u2014 running Rails!  "
                            },
                            {
                                "type": "emoji",
                                "name": "wolf"
                            },
                            {
                                "type": "text",
                                "text": "  Except for that one time when had a calculation that needed parallelizing over a few hundred EC2 instances.  We used Redis."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1613070905.109000",
        "parent_user_id": "UAJKEBGP8"
    }
]