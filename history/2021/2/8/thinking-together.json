[
    {
        "client_msg_id": "02e212de-f8d2-4402-bf11-fed43599ef59",
        "type": "message",
        "text": "<@U016LEA3J1H> Typed holes are interesting. <https://hazel.org/|Hazel> (which I linked earlier) is perhaps the most interesting iteration of the idea, because it _propagates_ erroneous subexpressions (instead of crashing), and shows you them in the output. However, I don't believe they've developed a means of programmatically _recovering from_ (responding to) such an error. Their goal is mainly to aid code comprehension and debugging.",
        "user": "UCGAK10LS",
        "ts": "1612747339.133800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1612747467.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=JH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016LEA3J1H"
                            },
                            {
                                "type": "text",
                                "text": " Typed holes are interesting. "
                            },
                            {
                                "type": "link",
                                "url": "https://hazel.org/",
                                "text": "Hazel"
                            },
                            {
                                "type": "text",
                                "text": " (which I linked earlier) is perhaps the most interesting iteration of the idea, because it "
                            },
                            {
                                "type": "text",
                                "text": "propagates",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " erroneous subexpressions (instead of crashing), and shows you them in the output. However, I don't believe they've developed a means of programmatically "
                            },
                            {
                                "type": "text",
                                "text": "recovering from",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (responding to) such an error. Their goal is mainly to aid code comprehension and debugging."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612656314.123000",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "cbb3aaf2-2c9b-4ecd-9f16-cec37b828d06",
        "type": "message",
        "text": "<@U016VUZGUUQ> Yeah for text-string languages it's probably not realistic (unless your language looks something like Dan Cook's suggestions). I am indeed focusing on structured editing in my own work.",
        "user": "UCGAK10LS",
        "ts": "1612747414.134200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MYj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016VUZGUUQ"
                            },
                            {
                                "type": "text",
                                "text": " Yeah for text-string languages it's probably not realistic (unless your language looks something like Dan Cook's suggestions). I am indeed focusing on structured editing in my own work."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612656314.123000",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U016VUZGUUQ",
                    "UA14TGLTC",
                    "U013ZLJARC7"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "6e7fb728-6ba0-41ce-b9a4-6d1515a68e26",
        "type": "message",
        "text": "Oh! How about Leet?\n\n<https://en.m.wikipedia.org/wiki/Leet_(programming_language)|https://en.m.wikipedia.org/wiki/Leet_(programming_language)>",
        "user": "UAVCC2X70",
        "ts": "1612772658.135200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Leet (programming language)",
                "title_link": "https://en.m.wikipedia.org/wiki/Leet_(programming_language)",
                "from_url": "https://en.m.wikipedia.org/wiki/Leet_(programming_language)",
                "author_name": "Wikipedia",
                "author_link": "https://en.wikipedia.org/",
                "text": "Leet (or L33t) is an esoteric programming language based loosely on Brainfuck and named for the resemblance of its source code to the symbolic language \"L33t 5p34k\". L33t was designed by Stephen McGreal and Alex Mole to be as confusing as possible. It is Turing-complete and has the possibility for self-modifying code. Software written in the language can make network connections and may therefore be used to write malware.",
                "fallback": "wikipedia: Leet (programming language)",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png",
                "id": 1,
                "original_url": "https://en.m.wikipedia.org/wiki/Leet_(programming_language)"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mb5r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh! How about Leet?\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://en.m.wikipedia.org/wiki/Leet_(programming_language)",
                                "text": "https://en.m.wikipedia.org/wiki/Leet_(programming_language)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612656314.123000",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "flushed",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3e435859-4a19-4415-83fb-d87c01c4f4df",
        "type": "message",
        "text": "From a toy/game/tangible media perspective, the Rubik cube can be very intuitive once you've learnt the algorithms. It's also a blend of muscle memory, memorising, intuition and learning.",
        "user": "UP00ZLX6G",
        "ts": "1612775594.135500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rGRe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "From a toy/game/tangible media perspective, the Rubik cube can be very intuitive once you've learnt the algorithms. It's also a blend of muscle memory, memorising, intuition and learning."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612400942.093500",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "b725b48e-0ec4-4c12-9099-0e05feafe6b6",
        "type": "message",
        "text": "<@U016VUZGUUQ> tree languages have no such thing as syntax errors and are very composable.",
        "user": "UMVFWPZ36",
        "ts": "1612802542.135800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MUq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016VUZGUUQ"
                            },
                            {
                                "type": "text",
                                "text": " tree languages have no such thing as syntax errors and are very composable."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1612656314.123000",
        "parent_user_id": "UCGAK10LS"
    }
]