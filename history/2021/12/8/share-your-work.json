[
    {
        "client_msg_id": "04ce6749-2fe0-47f0-912d-bdc498c35d5f",
        "type": "message",
        "text": "Hi all! I\u2019ve been diving into CRDT tech lately to build local-first collaborative apps. So far I had a great experience with Yjs - but I found the API a bit cumbersome.\nI\u2019ve been working a new open source library to make it _really easy_ to work with state that\u2019s shared across multiple users and that syncs automatically. It supports React, Vue, Svelte, or plain javascript.\n\nBy using Javascript Proxies, the API looks just like a regular app, e.g.: `store.todos.push( { completed: true, title: \"write code\" } );` - and the Reactive Programming model makes it effortless to listen to changes.\n\nAnway, I just put it live on <https://syncedstore.org/> - would really welcome your feedback!\n\nPS: it\u2019s also on HN (see \u201cshow\u201d page), comments / votes there are always appreciated to help a fellow FoCer ;)",
        "user": "U01FAFPDFL4",
        "ts": "1638967398.085500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01FAFPDFL4",
            "ts": "1638969577.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CiF7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi all! I\u2019ve been diving into CRDT tech lately to build local-first collaborative apps. So far I had a great experience with Yjs - but I found the API a bit cumbersome.\nI\u2019ve been working a new open source library to make it "
                            },
                            {
                                "type": "text",
                                "text": "really easy",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to work with state that\u2019s shared across multiple users and that syncs automatically. It supports React, Vue, Svelte, or plain javascript.\n\nBy using Javascript Proxies, the API looks just like a regular app, e.g.: "
                            },
                            {
                                "type": "text",
                                "text": "store.todos.push( { completed: true, title: \"write code\" } );",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " - and the Reactive Programming model makes it effortless to listen to changes.\n\nAnway, I just put it live on "
                            },
                            {
                                "type": "link",
                                "url": "https://syncedstore.org/"
                            },
                            {
                                "type": "text",
                                "text": " - would really welcome your feedback!\n\nPS: it\u2019s also on HN (see \u201cshow\u201d page), comments / votes there are always appreciated to help a fellow FoCer ;)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1638967398.085500",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1639201173.096700",
        "reply_users": [
            "U01ULEWACPP"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U02E4DAQGSZ",
                    "U02PDVC9CNT"
                ],
                "count": 2
            },
            {
                "name": "wave",
                "users": [
                    "U02E4DAQGSZ",
                    "UPX3PH28N"
                ],
                "count": 2
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U02E4DAQGSZ",
                    "U025QL52Q3S",
                    "UA14TGLTC",
                    "UPX3PH28N"
                ],
                "count": 4
            }
        ]
    },
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "Why webcode is different\n1. a notebook is both front end and the backend and the technical documentation and the code repository and runtime. True seamless code sharing. No additional infra required. corrorally -&gt; libraries can be packaged as frontend and backend too\n2. The environment is 100% browser. No tools to install. No \"pip install\", no \"webpack\", no compiling. You can do it all from a chromebook or mobile device, for instance\n3. It takes about 40ms for code changes to become visible remotely. Compared to 2 mins for lambda. The inner development loop is supercharged. You can develop live in prod. The iteration speed is incredible, partly due to instant deploys, partly due to Observable hot code reloading No setup required, its like that out of the box.\n4. True production debugging using vanilla browser tools. No simulacrum of a debugger. It's just the normal debugger everyone already uses, which means other debugging technology can be layered on top without problems (e.g. time travel debugging <https://www.replay.io/>)\nThis is built on Observablehq, so it gets all its FoC features. Literate programming, Commenting, 1-click forking, version control, Functional Reactive Programming env, partial recompilation etc. No need for Github or git, remember, this is 100% browser based, you get all this on any device that supports a web browser. You can fix and deploy things on your mobile phone.\n\nYou can manage a whole microservice, including technical documentation and project management, in a single page of web editable code. For instance, this twitter bot is hosted on webcode <https://observablehq.com/@endpointservices/twitter-bot>. This is a whole IndieAuth oauth server. (<https://observablehq.com/@endpointservices/auth>)",
        "user": "U02E4DAQGSZ",
        "ts": "1638971673.086400",
        "thread_ts": "1638518880.058900",
        "root": {
            "client_msg_id": "24f8dea0-e233-4770-970e-9c0f4958eef7",
            "type": "message",
            "text": "Hi, I have built a serverless runtime for <http://observablehq.com|observablehq.com> called <https://webcode.run>. This extends Observable's reactive notebooks to the backend. Its unique features are instant deploys, and it can redirect traffic to your browser, so you can do devtool or console.log debugging against production traffic. It's a unique way of sharing code across frontend and backend.\n\nMy aim is to create a serverless environment that is a pleasure to use as a developer. I am really desperate for feedback, so if you give it a go let know the positives and negatives.",
            "user": "U02E4DAQGSZ",
            "ts": "1638518880.058900",
            "team": "T5TCAFTA9",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "W4fc",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Hi, I have built a serverless runtime for "
                                },
                                {
                                    "type": "link",
                                    "url": "http://observablehq.com",
                                    "text": "observablehq.com"
                                },
                                {
                                    "type": "text",
                                    "text": " called "
                                },
                                {
                                    "type": "link",
                                    "url": "https://webcode.run"
                                },
                                {
                                    "type": "text",
                                    "text": ". This extends Observable's reactive notebooks to the backend. Its unique features are instant deploys, and it can redirect traffic to your browser, so you can do devtool or console.log debugging against production traffic. It's a unique way of sharing code across frontend and backend.\n\nMy aim is to create a serverless environment that is a pleasure to use as a developer. I am really desperate for feedback, so if you give it a go let know the positives and negatives."
                                }
                            ]
                        }
                    ]
                }
            ],
            "thread_ts": "1638518880.058900",
            "reply_count": 16,
            "reply_users_count": 3,
            "latest_reply": "1639207795.105000",
            "reply_users": [
                "UJBAJNFLK",
                "U02E4DAQGSZ",
                "U01ULEWACPP"
            ],
            "is_locked": false,
            "subscribed": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+5t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Why webcode is different\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "a notebook is both front end and the backend and the technical documentation and the code repository and runtime. True seamless code sharing. No additional infra required. corrorally -> libraries can be packaged as frontend and backend too"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The environment is 100% browser. No tools to install. No \"pip install\", no \"webpack\", no compiling. You can do it all from a chromebook or mobile device, for instance"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "It takes about 40ms for code changes to become visible remotely. Compared to 2 mins for lambda. The inner development loop is supercharged. You can develop live in prod. The iteration speed is incredible, partly due to instant deploys, partly due to Observable hot code reloading No setup required, its like that out of the box."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "True production debugging using vanilla browser tools. No simulacrum of a debugger. It's just the normal debugger everyone already uses, which means other debugging technology can be layered on top without problems (e.g. time travel debugging "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://www.replay.io/"
                                    },
                                    {
                                        "type": "text",
                                        "text": ")"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is built on Observablehq, so it gets all its FoC features. Literate programming, Commenting, 1-click forking, version control, Functional Reactive Programming env, partial recompilation etc. No need for Github or git, remember, this is 100% browser based, you get all this on any device that supports a web browser. You can fix and deploy things on your mobile phone.\n\nYou can manage a whole microservice, including technical documentation and project management, in a single page of web editable code. For instance, this twitter bot is hosted on webcode "
                            },
                            {
                                "type": "link",
                                "url": "https://observablehq.com/@endpointservices/twitter-bot"
                            },
                            {
                                "type": "text",
                                "text": ". This is a whole IndieAuth oauth server. ("
                            },
                            {
                                "type": "link",
                                "url": "https://observablehq.com/@endpointservices/auth"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "0a18ae2d-2c99-45fa-bdd9-87adf98ed401",
        "edited": {
            "user": "U02E4DAQGSZ",
            "ts": "1638971955.000000"
        },
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U02M6PM725T",
                    "U01FAFPDFL4"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "b5d1bb67-fee9-44d7-b884-11bcfe0fa526",
        "type": "message",
        "text": ":wave:  We are discussing the <https://coalesce.getdbt.com/talks/engineering-structure-with-dbt-data-science-chaos-with-deepnote/|future of analytics engineering and notebooks> \u2014 Coalesce @ 5:25 EST today!",
        "user": "U02CTKC6J5S",
        "ts": "1638992608.088200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://coalesce.getdbt.com/talks/engineering-structure-with-dbt-data-science-chaos-with-deepnote/",
                "image_url": "https://s3.amazonaws.com/heysummit-production/media/uploads/events/coalesce-2021/3khU6jeXXeqY3PUeeKenGG.png",
                "image_width": 478,
                "image_height": 250,
                "image_bytes": 420651,
                "service_icon": "https://s3.amazonaws.com/heysummit-production/media/uploads/events/coalesce-2021/v4YCNBxJC4qsQunYjSNZKg.png",
                "id": 1,
                "original_url": "https://coalesce.getdbt.com/talks/engineering-structure-with-dbt-data-science-chaos-with-deepnote/",
                "fallback": "Coalesce 2021",
                "text": "Allan Campopiano &amp; Elizabeth Dlha",
                "title": "Coalesce 2021",
                "title_link": "https://coalesce.getdbt.com/talks/engineering-structure-with-dbt-data-science-chaos-with-deepnote/",
                "service_name": "coalesce.getdbt.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WvLD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "wave"
                            },
                            {
                                "type": "text",
                                "text": "  We are discussing the "
                            },
                            {
                                "type": "link",
                                "url": "https://coalesce.getdbt.com/talks/engineering-structure-with-dbt-data-science-chaos-with-deepnote/",
                                "text": "future of analytics engineering and notebooks"
                            },
                            {
                                "type": "text",
                                "text": " \u2014 Coalesce @ 5:25 EST today!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1638992608.088200",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1639005841.088700",
        "reply_users": [
            "U02PDVC9CNT"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "smiley",
                "users": [
                    "U02E4DAQGSZ",
                    "U02PDVC9CNT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "2bb60bc1-7e14-4437-ad07-ae9e547366ba",
        "type": "message",
        "text": "For future, is there a calendar of ~FoC events? Would have loved to make time for this but didn't check slack til a bit later tonight",
        "user": "U02PDVC9CNT",
        "ts": "1639005841.088700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GySb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For future, is there a calendar of ~FoC events? Would have loved to make time for this but didn't check slack til a bit later tonight"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1638992608.088200",
        "parent_user_id": "U02CTKC6J5S"
    },
    {
        "client_msg_id": "96FE4E88-1B6D-446D-9D83-568E161B1D0E",
        "type": "message",
        "text": "I think this is a perfect use case for Proxies! Because there\u2019s no new API for modifying data structures, the sync behavior can even be implemented (enabled) into an existing application retrospectively. Looking forward to give it a try! ",
        "user": "U01ULEWACPP",
        "ts": "1639201173.096700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I8jX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think this is a perfect use case for Proxies! Because there\u2019s no new API for modifying data structures, the sync behavior can even be implemented (enabled) into an existing application retrospectively. Looking forward to give it a try! "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1638967398.085500",
        "parent_user_id": "U01FAFPDFL4",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U01FAFPDFL4"
                ],
                "count": 1
            }
        ]
    }
]