[
    {
        "client_msg_id": "8445f9ce-c4c6-4841-9673-309d9a918f83",
        "type": "message",
        "text": "Hey friends, it's been sometime since I posted an update on Gadget. For those unfamiliar with Gadget, we're trying to build a development platform that steps in and handles the bs boilerplate/repetitive stuff for you, but then steps out of your way and lets you code when you prefer. The platform is nearing completion and launch, if anyone is interested in playing with the alpha, ping me.\n\nThis demo is. a bit longer (20 min) but in that time, I build and productionize a full set of APIs to power a kanban board (with auth, access control and the works) and run some graphQL mutations to show that its all real.\n\n<https://www.loom.com/share/732816bb327c4155b61199d2d1733c56>\n\nFeedback welcome!",
        "user": "U01DX39SB33",
        "ts": "1617997306.003600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Loom",
                "service_url": "https://www.loom.com",
                "title": "Create a new App - Gadget",
                "title_link": "https://www.loom.com/share/732816bb327c4155b61199d2d1733c56",
                "thumb_url": "https://cdn.loom.com/sessions/thumbnails/732816bb327c4155b61199d2d1733c56-00001.gif",
                "thumb_width": 1024,
                "thumb_height": 640,
                "fallback": "Loom Video: Create a new App - Gadget",
                "video_html": "<iframe src=\"https://www.loom.com/embed/732816bb327c4155b61199d2d1733c56?autoplay=1\" frameborder=\"0\" width=\"1152\" height=\"864\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>",
                "video_html_width": 1152,
                "video_html_height": 864,
                "from_url": "https://www.loom.com/share/732816bb327c4155b61199d2d1733c56",
                "id": 1,
                "original_url": "https://www.loom.com/share/732816bb327c4155b61199d2d1733c56"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pg+f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey friends, it's been sometime since I posted an update on Gadget. For those unfamiliar with Gadget, we're trying to build a development platform that steps in and handles the bs boilerplate/repetitive stuff for you, but then steps out of your way and lets you code when you prefer. The platform is nearing completion and launch, if anyone is interested in playing with the alpha, ping me.\n\nThis demo is. a bit longer (20 min) but in that time, I build and productionize a full set of APIs to power a kanban board (with auth, access control and the works) and run some graphQL mutations to show that its all real.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.loom.com/share/732816bb327c4155b61199d2d1733c56"
                            },
                            {
                                "type": "text",
                                "text": "\n\nFeedback welcome!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1617997306.003600",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1618084307.005500",
        "reply_users": [
            "UC2A2ARPT",
            "U01KZQEQVUP",
            "U01T2PC8LBA"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "439483fe-cbdb-44e4-b188-07576a7b9440",
        "type": "message",
        "text": "[moved from top level, original post by <@U01DX39SB33>]\n\nFor the statechart enthusiasts, go to ~6 min and watch our take on Harel's statechart which we modified to accomodate CRUD itself\nSo we're using the statechart to manage all of your application's logic, including CRUD.",
        "user": "UC2A2ARPT",
        "ts": "1617998041.004900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/rH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[moved from top level, original post by "
                            },
                            {
                                "type": "user",
                                "user_id": "U01DX39SB33"
                            },
                            {
                                "type": "text",
                                "text": "]\n\nFor the statechart enthusiasts, go to ~6 min and watch our take on Harel's statechart which we modified to accomodate CRUD itself\nSo we're using the statechart to manage all of your application's logic, including CRUD."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1617997306.003600",
        "parent_user_id": "U01DX39SB33"
    },
    {
        "client_msg_id": "22ee25f4-73fb-435c-ae31-a5c6691bc5c4",
        "type": "message",
        "text": "This is really cool. That's all.",
        "user": "U01KZQEQVUP",
        "ts": "1618038452.005300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i0LP6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is really cool. That's all."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1617997306.003600",
        "parent_user_id": "U01DX39SB33"
    },
    {
        "client_msg_id": "4fb6cdc7-3fb9-4923-b436-6344f7e03d1e",
        "type": "message",
        "text": "<@U01DX39SB33> Love the emphasis on declarative modeling and state machines - I think you guys sell yourselves short when you say it's for \"reducing boilerplate\". Lots of template/code generators exist that overemphasize ease of getting started, but end up delivering complex solutions when the app scales and people realize what they needed was better architecture, and not 2-days shaved off by skipping boilerplate. Software being hard *isn't* about mundane tasks like boilerplate, but rather our focus on easy solutions complecting together into something unmanageable.\n\nWhat are the semantics around the infrastructure abstraction you guys have in Gadget? Seems like a lot of thought was put into scalability with Kubernetes and Cloud Functions (curious about the use of both, was there a reason why it couldn't be all serverless, or all K8s?), but given the product hasn't launched yet it's not clear how infrastructure is actually handled (terraform templates generated by gadget? custom code serving as the main engine, and cloud functions being the primary user code?). Would love some clarification on this side of the story",
        "user": "U01T2PC8LBA",
        "ts": "1618084307.005500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7Es",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01DX39SB33"
                            },
                            {
                                "type": "text",
                                "text": " Love the emphasis on declarative modeling and state machines - I think you guys sell yourselves short when you say it's for \"reducing boilerplate\". Lots of template/code generators exist that overemphasize ease of getting started, but end up delivering complex solutions when the app scales and people realize what they needed was better architecture, and not 2-days shaved off by skipping boilerplate. Software being hard "
                            },
                            {
                                "type": "text",
                                "text": "isn't",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " about mundane tasks like boilerplate, but rather our focus on easy solutions complecting together into something unmanageable.\n\nWhat are the semantics around the infrastructure abstraction you guys have in Gadget? Seems like a lot of thought was put into scalability with Kubernetes and Cloud Functions (curious about the use of both, was there a reason why it couldn't be all serverless, or all K8s?), but given the product hasn't launched yet it's not clear how infrastructure is actually handled (terraform templates generated by gadget? custom code serving as the main engine, and cloud functions being the primary user code?). Would love some clarification on this side of the story"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1617997306.003600",
        "parent_user_id": "U01DX39SB33"
    }
]