[
    {
        "client_msg_id": "a6312406-a48e-4673-aeba-c8d3791972c4",
        "type": "message",
        "text": "A question for people knowledgeable in smalltalk: Can you send a smalltalk image to another smalltalk image as an object? How would that look like?",
        "user": "UJFN50C00",
        "ts": "1619523594.127400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJFN50C00",
            "ts": "1619523628.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cgk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A question for people knowledgeable in smalltalk: Can you send a smalltalk image to another smalltalk image as an object? How would that look like?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1619523594.127400",
        "reply_count": 8,
        "reply_users_count": 5,
        "latest_reply": "1619856279.175000",
        "reply_users": [
            "UA14TGLTC",
            "U01L6HZEHFX",
            "UJBAJNFLK",
            "UJFN50C00",
            "URKQXRCAC"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "b59cf4e3-d244-4426-aadc-981f7b00207f",
        "type": "message",
        "text": "A worthy question and a worthwhile endeavor.  Living in he Smalltalk-lite land of Ruby, my firm does have a way of sending object graphs to each other that's somewhat (and could be better) integrated into our bug tracker.\n\nAn intrinsic problem is how to merge/switch/select-part of two images.  I'm sure there are good solutions just wish I knew about them back when a different group was trying to collaborate with Lisp images.",
        "user": "UA14TGLTC",
        "ts": "1619579209.128500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ks0/b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A worthy question and a worthwhile endeavor.  Living in he Smalltalk-lite land of Ruby, my firm does have a way of sending object graphs to each other that's somewhat (and could be better) integrated into our bug tracker.\n\nAn intrinsic problem is how to merge/switch/select-part of two images.  I'm sure there are good solutions just wish I knew about them back when a different group was trying to collaborate with Lisp images."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1619523594.127400",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "28ea30c9-b17a-4a7e-aadd-fa047bfeeea9",
        "type": "message",
        "text": "That sounds fascinating. Can you elaborate more on your approach to handle Ruby object graphs?",
        "user": "U01L6HZEHFX",
        "ts": "1619581420.128800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V4B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That sounds fascinating. Can you elaborate more on your approach to handle Ruby object graphs?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1619523594.127400",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "a161507d-0490-499c-9808-bf15de3d7f8f",
        "type": "message",
        "text": "There are many Smalltalk systems, which could handle this differently. The one I know is Pharo. It has a class `SmalltalkImage`, which might look like what you are looking for, but it's really an entry point to access low-level system information. It's not an object that you could archive or send around. \"The image\" is not an object, it's the set of all objects. Better avoid Russel's paradox by not having the image be an element of itself!\n\nHowever, you can do things that come very close to what you describe. For example, you can ask class `Object` for all instances of itself and its subclasses, and send those around the world. That's all objects in the system, including their classes. You might run into resource limits trying to send them from one image to another, I didn't try. If you want to play with this, I suggest Fuel (<https://github.com/theseion/Fuel>) as the most adequate serialization framework for large sets of objects.",
        "user": "UJBAJNFLK",
        "ts": "1619625826.137400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "theseion/Fuel",
                "title_link": "https://github.com/theseion/Fuel",
                "text": "Fuel, the Smalltalk object serializer. Contribute to theseion/Fuel development by creating an account on GitHub.",
                "fallback": "GitHub: theseion/Fuel",
                "image_url": "https://opengraph.githubassets.com/0bbba3e9d0ebe5287d6b0fd19316a4528e707753de4f41ec20634f3cf9b473bb/theseion/Fuel",
                "image_width": 500,
                "image_height": 250,
                "from_url": "https://github.com/theseion/Fuel",
                "image_bytes": 125510,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/theseion/Fuel"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jXu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are many Smalltalk systems, which could handle this differently. The one I know is Pharo. It has a class "
                            },
                            {
                                "type": "text",
                                "text": "SmalltalkImage",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", which might look like what you are looking for, but it's really an entry point to access low-level system information. It's not an object that you could archive or send around. \"The image\" is not an object, it's the set of all objects. Better avoid Russel's paradox by not having the image be an element of itself!\n\nHowever, you can do things that come very close to what you describe. For example, you can ask class "
                            },
                            {
                                "type": "text",
                                "text": "Object",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for all instances of itself and its subclasses, and send those around the world. That's all objects in the system, including their classes. You might run into resource limits trying to send them from one image to another, I didn't try. If you want to play with this, I suggest Fuel ("
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/theseion/Fuel"
                            },
                            {
                                "type": "text",
                                "text": ") as the most adequate serialization framework for large sets of objects."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1619523594.127400",
        "parent_user_id": "UJFN50C00",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJFN50C00"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UJFN50C00"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "5d284ee3-3954-4e60-bc19-f377a1ea31c1",
        "type": "message",
        "text": "Thank you for sharing your insight!",
        "user": "UJFN50C00",
        "ts": "1619683188.154700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fY5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you for sharing your insight!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1619523594.127400",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "da1b94d2-23ac-4e88-a968-a3cd5d120bc2",
        "type": "message",
        "text": "<@U01L6HZEHFX> We're basic.  So far we've managed with `Marshal.dump` and `Marshal.load`.  Classic Ruby dark side: quicker, easier, more seductive.  Dump to file, send to somebody else.  Is this unsound?  Absolutely!  But for a decade plus it's only occasionally been a problem: when dumps get into the 100s of MB.  A rewrite some years back to use a database like a normal Rails shop failed, so I may try something different.  Would have tried already if we weren't living in the end-times.",
        "user": "UA14TGLTC",
        "ts": "1619686175.156200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bBZc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01L6HZEHFX"
                            },
                            {
                                "type": "text",
                                "text": " We're basic.  So far we've managed with "
                            },
                            {
                                "type": "text",
                                "text": "Marshal.dump",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "Marshal.load",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  Classic Ruby dark side: quicker, easier, more seductive.  Dump to file, send to somebody else.  Is this unsound?  Absolutely!  But for a decade plus it's only occasionally been a problem: when dumps get into the 100s of MB.  A rewrite some years back to use a database like a normal Rails shop failed, so I may try something different.  Would have tried already if we weren't living in the end-times."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1619523594.127400",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "06D1C91D-1B92-4711-9A39-F0CE460977F6",
        "type": "message",
        "text": "<@UJFN50C00> what do you want to achieve? For me it is not clear what you want. There are many directions this could go. ",
        "user": "URKQXRCAC",
        "ts": "1619719064.159600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=yqu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJFN50C00"
                            },
                            {
                                "type": "text",
                                "text": " what do you want to achieve? For me it is not clear what you want. There are many directions this could go. "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1619523594.127400",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "7990DF7B-D2AA-4A02-B42D-D0BFBE4D5E87",
        "type": "message",
        "text": "Just thinking about the relationship between object and image",
        "user": "UJFN50C00",
        "ts": "1619721708.160400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sFwhd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just thinking about the relationship between object and image"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1619523594.127400",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "957756C0-FFD3-4C46-AAFC-87035F6F2B4C",
        "type": "message",
        "text": "Well I think most Smalltalk implementations will not regard there image as an Object. The VM is probably often the element responsible for reading the image and creating the actual Objects (including Class, CompiledMethod, Context, etc) and continue execution where it left of when being saved.\nThat said, it would definitely be possible to see it as an Object. A Smalltalk implementation could even run (simulate?) the environment inside a supplied image. Do remember that things like garbage collection are often (must often) be done by the VM. So simulation is not trivial and might require quite a few extra features in the \u2018receiving\u2019 Smalltalk image. HTH",
        "user": "URKQXRCAC",
        "ts": "1619856279.175000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y+Jkz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well I think most Smalltalk implementations will not regard there image as an Object. The VM is probably often the element responsible for reading the image and creating the actual Objects (including Class, CompiledMethod, Context, etc) and continue execution where it left of when being saved.\n"
                            },
                            {
                                "type": "text",
                                "text": "That said, it would definitely be possible to see it as an Object. A Smalltalk implementation could even run (simulate?) the environment inside a supplied image. Do remember that things like garbage collection are often (must often) be done by the VM. So simulation is not trivial and might require quite a few extra features in the \u2018receiving\u2019 Smalltalk image. HTH"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1619523594.127400",
        "parent_user_id": "UJFN50C00"
    }
]