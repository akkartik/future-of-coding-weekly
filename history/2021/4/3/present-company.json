[
    {
        "client_msg_id": "be2ba929-7acf-44c5-a717-c06212686f7f",
        "type": "message",
        "text": "I'm currently learning about WASM+WASI, and I was wondering: what's the big difference with the JVM, aside from the lack of a GC (which arguably is a pretty big deal)?  Why couldn't we decide to adapt the JVM to the needs of WASM, and instead went ahead and created a whole new byte code language?  I've searched online, but most answers are unsatisfactory, e.g. JVM sandboxing isn't secure enough (if so, can't we improve it?), JVM depends too much on Oracle (I thought OpenJDK had solved that problem), and so on.  Curious to know if someone here has an interesting explanation or a good article on the subject :thinking_face:",
        "user": "UMHG81CBH",
        "ts": "1617445751.017000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qvriY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm currently learning about WASM+WASI, and I was wondering: what's the big difference with the JVM, aside from the lack of a GC (which arguably is a pretty big deal)?  Why couldn't we decide to adapt the JVM to the needs of WASM, and instead went ahead and created a whole new byte code language?  I've searched online, but most answers are unsatisfactory, e.g. JVM sandboxing isn't secure enough (if so, can't we improve it?), JVM depends too much on Oracle (I thought OpenJDK had solved that problem), and so on.  Curious to know if someone here has an interesting explanation or a good article on the subject "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1617445751.017000",
        "reply_count": 10,
        "reply_users_count": 7,
        "latest_reply": "1617593024.023200",
        "reply_users": [
            "UJBAJNFLK",
            "UMHG81CBH",
            "U016VUZGUUQ",
            "U01S0CZ3B1P",
            "UH7GU4TAM",
            "UCUSW7WVD",
            "UML4ZEKDK"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "b22f2460-a2c9-4d42-a340-d98d20dc9c68",
        "type": "message",
        "text": "Most arguments I have seen for WASM are about being low-level, language-neutral, high-performance, etc. in comparison to existing \"managed\" languages. But I guess there's also a dose of neophilia. The JVM is 25 years old. It can't be the solution to today's problems because otherwise, tons of highly payed engineers would have been blind!",
        "user": "UJBAJNFLK",
        "ts": "1617448093.017100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o/Lo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Most arguments I have seen for WASM are about being low-level, language-neutral, high-performance, etc. in comparison to existing \"managed\" languages. But I guess there's also a dose of neophilia. The JVM is 25 years old. It can't be the solution to today's problems because otherwise, tons of highly payed engineers would have been blind!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1617445751.017000",
        "parent_user_id": "UMHG81CBH"
    },
    {
        "client_msg_id": "3f4b8825-d64b-467b-b420-f30e74591d87",
        "type": "message",
        "text": "Yeah that was the feeling I got from a lot of stuff I read: people are excited about it because it's the New Thing!!  Which doesn't mean it's not better, but the tone of the discourse makes it harder to find a more \"objective\" comparison with older technologies like the JVM.",
        "user": "UMHG81CBH",
        "ts": "1617460744.017300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "65PE9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah that was the feeling I got from a lot of stuff I read: people are excited about it because it's the New Thing!!  Which doesn't mean it's not better, but the tone of the discourse makes it harder to find a more \"objective\" comparison with older technologies like the JVM."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1617445751.017000",
        "parent_user_id": "UMHG81CBH"
    },
    {
        "client_msg_id": "fc14533a-9aa8-40ec-b09f-fff45dabe55e",
        "type": "message",
        "text": "I guess it's probably more fun to write a new standard than to try and \"retrofit\" an existing bytecode into something else",
        "user": "UMHG81CBH",
        "ts": "1617460795.017500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UYi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I guess it's probably more fun to write a new standard than to try and \"retrofit\" an existing bytecode into something else"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1617445751.017000",
        "parent_user_id": "UMHG81CBH"
    },
    {
        "client_msg_id": "f8608707-3446-416a-ae3e-20026352027e",
        "type": "message",
        "text": "If you're aiming for security, it's a lot easier to build it in from the start than try to retrofit it. I'm guessing one does not simply improve the JVM's security.",
        "user": "U016VUZGUUQ",
        "ts": "1617469060.017700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wgD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you're aiming for security, it's a lot easier to build it in from the start than try to retrofit it. I'm guessing one does not simply improve the JVM's security."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1617445751.017000",
        "parent_user_id": "UMHG81CBH"
    },
    {
        "client_msg_id": "3e631a50-5a22-4d48-8e8e-b6f3ce6b421c",
        "type": "message",
        "text": "Also, the realization that WASM is built for a new platform is important. Tying it to the JVM could mean that significant, early changes to WASM meant either quarreling with those who maintain the JVM spec (waste of time) or forking from it (and thus creating a separate WASM again, but likely worse)",
        "user": "U01S0CZ3B1P",
        "ts": "1617472139.017900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01S0CZ3B1P",
            "ts": "1617472159.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vLu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, the realization that WASM is built for a new platform is important. Tying it to the JVM could mean that significant, early changes to WASM meant either quarreling with those who maintain the JVM spec (waste of time) or forking from it (and thus creating a separate WASM again, but likely worse)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1617445751.017000",
        "parent_user_id": "UMHG81CBH",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "80a1d515-2ef9-4c37-b24a-000827f668ce",
        "type": "message",
        "text": "There are lots of great initiatives we're seeing in WASM, like better JavaScript interoperability and integration of a type system, that have the potential to enable smoother high speed software development for the web and ensure language interoperability with languages all sharing a target that isn't tightly coupled to a CPU architecture. Lots of interesting research that wouldn't be possible trying to lobby a legacy system.\n\nNo GC is also huge. I don't think many people are saying the JVM is bad though : )",
        "user": "U01S0CZ3B1P",
        "ts": "1617472309.018200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01S0CZ3B1P",
            "ts": "1617472378.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jztu5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are lots of great initiatives we're seeing in WASM, like better JavaScript interoperability and integration of a type system, that have the potential to enable smoother high speed software development for the web and ensure language interoperability with languages all sharing a target that isn't tightly coupled to a CPU architecture. Lots of interesting research that wouldn't be possible trying to lobby a legacy system.\n\nNo GC is also huge. I don't think many people are saying the JVM is bad though : )"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1617445751.017000",
        "parent_user_id": "UMHG81CBH"
    },
    {
        "client_msg_id": "c2c54448-c16b-49b7-9cef-7b3b4326867f",
        "type": "message",
        "text": "Wasm grew naturally out of the use cases of asm.js\n\nThe fact that all the browser vendors saw value in asm.js and optimized their JS engines to support it was a big deal. I couldn't imagine the big 3 starting with a blank slate and agreeing on anything.",
        "user": "UH7GU4TAM",
        "ts": "1617480147.018600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oUgR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wasm grew naturally out of the use cases of asm.js\n\nThe fact that all the browser vendors saw value in asm.js and optimized their JS engines to support it was a big deal. I couldn't imagine the big 3 starting with a blank slate and agreeing on anything."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1617445751.017000",
        "parent_user_id": "UMHG81CBH"
    },
    {
        "client_msg_id": "3be69fa9-3eae-4818-9167-c82892e418e6",
        "type": "message",
        "text": "<@U01S0CZ3B1P> Very interesting allusions to the pragmatics of standards in your comments:\n\n1. If you're going to fork, it can be more memorable to make something intended for a very different situation look different. \"It's the same except this one little change\" falls into an uncanny valley that can interfere with adoption.\n2. If the goal is a standard people agree to not fork, starting from a fork perhaps sets the wrong example.\nVery interesting. I'm not sure I agree (why does a new standard not feel like a fork?) but you definitely got new neurons firing in my brain.",
        "user": "UCUSW7WVD",
        "ts": "1617481659.018800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "87hK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01S0CZ3B1P"
                            },
                            {
                                "type": "text",
                                "text": " Very interesting allusions to the pragmatics of standards in your comments:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "If you're going to fork, it can be more memorable to make something intended for a very different situation look different. \"It's the same except this one little change\" falls into an uncanny valley that can interfere with adoption."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "If the goal is a standard people agree to not fork, starting from a fork perhaps sets the wrong example."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "offset": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nVery interesting. I'm not sure I agree (why does a new standard not feel like a fork?) but you definitely got new neurons firing in my brain."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1617445751.017000",
        "parent_user_id": "UMHG81CBH",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U85HCL7JP"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "08e215c2-1802-469e-b51d-52bdf5470b1d",
        "type": "message",
        "text": "I think when a standard is established as a fork of another, especially for a compiler target, there are advantages to making the fork strictly a superset of the ecosystem so that tooling is easy to build (just fork the tools made for the original standard!), and because of this it's much more difficult to justify making a breaking change to the original spec than to justify adding new features.\n\nStarting from first principles, however, is a wild west - because every possible specification to fit the desired criteria will likely have a comparable time cost for implementing tooling, there are no deterrents from building precisely what's necessary and no excuse is required for breaking compatibility.\n\nAs you mentioned, the marketing story is relevant - and unfortunately is one of the most important aspects of the decision. Example: I didn't touch JVM languages for years because I hated the clunky verbosity of Java, but Clojure's now the language I use the most!",
        "user": "U01S0CZ3B1P",
        "ts": "1617510474.019000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6Lbn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think when a standard is established as a fork of another, especially for a compiler target, there are advantages to making the fork strictly a superset of the ecosystem so that tooling is easy to build (just fork the tools made for the original standard!), and because of this it's much more difficult to justify making a breaking change to the original spec than to justify adding new features.\n\nStarting from first principles, however, is a wild west - because every possible specification to fit the desired criteria will likely have a comparable time cost for implementing tooling, there are no deterrents from building precisely what's necessary and no excuse is required for breaking compatibility.\n\nAs you mentioned, the marketing story is relevant - and unfortunately is one of the most important aspects of the decision. Example: I didn't touch JVM languages for years because I hated the clunky verbosity of Java, but Clojure's now the language I use the most!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1617445751.017000",
        "parent_user_id": "UMHG81CBH",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "BFC36E15-0326-4A32-A38C-91C9B43EEF66",
        "type": "message",
        "text": "It\u2019s still early days but one of the many future Wasm proposals (<https://github.com/WebAssembly/proposals|https://github.com/WebAssembly/proposals>) is for a GC (<https://github.com/WebAssembly/gc/blob/master/proposals/gc/Overview.md|https://github.com/WebAssembly/gc/blob/master/proposals/gc/Overview.md>) to efficiently support various languages that expect it (like those on the JVM).",
        "user": "UML4ZEKDK",
        "ts": "1617593024.023200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "WebAssembly/proposals",
                "title_link": "https://github.com/WebAssembly/proposals",
                "text": "Tracking WebAssembly proposals. Contribute to WebAssembly/proposals development by creating an account on GitHub.",
                "fallback": "GitHub: WebAssembly/proposals",
                "thumb_url": "https://avatars.githubusercontent.com/u/11578470?s=400&v=4",
                "from_url": "https://github.com/WebAssembly/proposals",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/WebAssembly/proposals"
            },
            {
                "service_name": "GitHub",
                "title": "WebAssembly/gc",
                "title_link": "https://github.com/WebAssembly/gc/blob/master/proposals/gc/Overview.md",
                "text": "Branch of the spec repo scoped to discussion of GC integration in WebAssembly - WebAssembly/gc",
                "fallback": "GitHub: WebAssembly/gc",
                "thumb_url": "https://avatars.githubusercontent.com/u/11578470?s=400&v=4",
                "from_url": "https://github.com/WebAssembly/gc/blob/master/proposals/gc/Overview.md",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 2,
                "original_url": "https://github.com/WebAssembly/gc/blob/master/proposals/gc/Overview.md"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "37M6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It\u2019s still early days but one of the many future Wasm proposals ("
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/WebAssembly/proposals",
                                "text": "https://github.com/WebAssembly/proposals"
                            },
                            {
                                "type": "text",
                                "text": ") is for a GC ("
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/WebAssembly/gc/blob/master/proposals/gc/Overview.md",
                                "text": "https://github.com/WebAssembly/gc/blob/master/proposals/gc/Overview.md"
                            },
                            {
                                "type": "text",
                                "text": ") to efficiently support various languages that expect it (like those on the JVM)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1617445751.017000",
        "parent_user_id": "UMHG81CBH"
    }
]