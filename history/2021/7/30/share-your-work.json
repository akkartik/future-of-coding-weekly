[
    {
        "type": "message",
        "text": "The Mu computer can now render images. It uses dithering to approximate arbitrary colors using a 256-color palette.\n\n<https://archive.org/details/akkartik-mu-2021-07-30> (video; 9 minutes)\n\nMain project page: <https://github.com/akkartik/mu>",
        "files": [
            {
                "id": "F029S3S1598",
                "created": 1627676489,
                "timestamp": 1627676489,
                "name": "mu-image.png",
                "title": "mu-image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UCUSW7WVD",
                "editable": false,
                "size": 597502,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F029S3S1598/mu-image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F029S3S1598/download/mu-image.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F029S3S1598-7bb9458fa8/mu-image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F029S3S1598-7bb9458fa8/mu-image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F029S3S1598-7bb9458fa8/mu-image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 277,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F029S3S1598-7bb9458fa8/mu-image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 369,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F029S3S1598-7bb9458fa8/mu-image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F029S3S1598-7bb9458fa8/mu-image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 554,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F029S3S1598-7bb9458fa8/mu-image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 616,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F029S3S1598-7bb9458fa8/mu-image_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 739,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F029S3S1598-7bb9458fa8/mu-image_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 788,
                "image_exif_rotation": 1,
                "original_w": 2044,
                "original_h": 1573,
                "thumb_tiny": "AwAkADCNWYJlnPI4+Y1F5kn99vzptFArjvNk/vt+dHmSf32/Om0UxDDPLk/vG/OlWeUnmRvzpDg9qX8KAuO5op3akNACCilFJQA2iiimBPsHmuvOFBxTAoKOfTFSn/j4k+h/lTF/1Un0H86kY3GGA9cU9kA9fvlaYfvj8Klf/wBqmmIiaMAScn5TgVHU8n3Zv94f1qChAf/Z",
                "permalink": "https://futureofcoding.slack.com/files/UCUSW7WVD/F029S3S1598/mu-image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F029S3S1598-b167d4cbdb",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vqP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Mu computer can now render images. It uses dithering to approximate arbitrary colors using a 256-color palette.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://archive.org/details/akkartik-mu-2021-07-30"
                            },
                            {
                                "type": "text",
                                "text": " (video; 9 minutes)\n\nMain project page: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/akkartik/mu"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UCUSW7WVD",
        "display_as_bot": false,
        "ts": "1627676505.001600",
        "thread_ts": "1627676505.001600",
        "reply_count": 5,
        "reply_users_count": 2,
        "latest_reply": "1627770124.004000",
        "reply_users": [
            "U0282PL61U1",
            "UCUSW7WVD"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UKDM3GLAJ",
                    "UE0H4170F",
                    "U013ZLJARC7",
                    "UJ6LDMMN0"
                ],
                "count": 5
            },
            {
                "name": "heart",
                "users": [
                    "U01661S9F34",
                    "U8A5MS6R1",
                    "U0123H7JRDM",
                    "UF6RLAL7J"
                ],
                "count": 4
            },
            {
                "name": "open_mouth",
                "users": [
                    "U015TBQ2091"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0168f110-a60a-4a86-8ba6-cc47a578f17b",
        "type": "message",
        "text": "That lisp syntax - I have built something <https://plannr.xyzzyapps.link/docs/tools.html|quite similar >and I am calling it p-expressions / r-expressions / f-expressions \u2026 is this a completely a new lisp ? My approach is to build a transpiler over hylang and I have written an app with this dialect. I am trying to move towards the direction of newtonscript where I want to introduce more \u201cnatural language\u201d primitives over lisp especially for `setv`.",
        "user": "U0282PL61U1",
        "ts": "1627766831.002900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U0282PL61U1",
            "ts": "1627769782.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HFct",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That lisp syntax - I have built something "
                            },
                            {
                                "type": "link",
                                "url": "https://plannr.xyzzyapps.link/docs/tools.html",
                                "text": "quite similar "
                            },
                            {
                                "type": "text",
                                "text": "and I am calling it p-expressions / r-expressions / f-expressions \u2026 is this a completely a new lisp ? My approach is to build a transpiler over hylang and I have written an app with this dialect. I am trying to move towards the direction of newtonscript where I want to introduce more \u201cnatural language\u201d primitives over lisp especially for "
                            },
                            {
                                "type": "text",
                                "text": "setv",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1627676505.001600",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "fe2e6b1c-e102-4eac-ab6c-538dbf82aabd",
        "type": "message",
        "text": "Yeah, it's a new concoction. You can read more about it at <https://github.com/akkartik/mu/tree/main/shell#readme|https://github.com/akkartik/mu/tree/main/shell#readme>. I spent a few years noodling on Lisp variants like Readable s-expressions a few years ago when I worked on <https://github.com/akkartik/wart|https://github.com/akkartik/wart> So I reused some of those ideas here. But I don't care too much about these syntax issues anymore. These days the first thing I evaluate a language on is how many languages it takes to build it, starting from machine code.",
        "user": "UCUSW7WVD",
        "ts": "1627768865.003200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MJr/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, it's a new concoction. You can read more about it at "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/akkartik/mu/tree/main/shell#readme",
                                "text": "https://github.com/akkartik/mu/tree/main/shell#readme"
                            },
                            {
                                "type": "text",
                                "text": ". I spent a few years noodling on Lisp variants like Readable s-expressions a few years ago when I worked on "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/akkartik/wart",
                                "text": "https://github.com/akkartik/wart"
                            },
                            {
                                "type": "text",
                                "text": " So I reused some of those ideas here. But I don't care too much about these syntax issues anymore. These days the first thing I evaluate a language on is how many languages it takes to build it, starting from machine code."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1627676505.001600",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "214fdf9d-9af4-44c4-b76d-753263b83fd4",
        "type": "message",
        "text": "I will add a reference to it.  <http://users.rcn.com/david-moon/Lunar/|Lunar> is the only implementation I know that supports an alternate syntax. My conclusion with respect to the syntax of lisp is .. lisp has an inflexible space-based lexer. I am not particularly interested in supporting infix notation as much as I am interested in getting rid of scope related parens.",
        "user": "U0282PL61U1",
        "ts": "1627769668.003500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZbOM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I will add a reference to it.  "
                            },
                            {
                                "type": "link",
                                "url": "http://users.rcn.com/david-moon/Lunar/",
                                "text": "Lunar"
                            },
                            {
                                "type": "text",
                                "text": " is the only implementation I know that supports an alternate syntax. My conclusion with respect to the syntax of lisp is .. lisp has an inflexible space-based lexer. I am not particularly interested in supporting infix notation as much as I am interested in getting rid of scope related parens."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1627676505.001600",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "e30a20ae-c1bf-4ca2-98ad-e90d34d486ee",
        "type": "message",
        "text": "Yeah, that's fair. Do you care about having Lisp macros?",
        "user": "UCUSW7WVD",
        "ts": "1627769789.003800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cF=X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, that's fair. Do you care about having Lisp macros?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1627676505.001600",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "08c8f770-a65e-4471-9937-56b0794e7eb6",
        "type": "message",
        "text": "S-expressions are completely supported as I will be parsing them as is. Parens begin s-expression parsing. Additionally I am getting rid of reader macros in favour of general preprocessing and template based code generation. Another goal is to build a two way syntax parsers that will take s-expressions syntax and translate it freely to and from the new syntax so that you can use an editor to read and port code.",
        "user": "U0282PL61U1",
        "ts": "1627770124.004000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U0282PL61U1",
            "ts": "1627770258.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "syI5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "S-expressions are completely supported as I will be parsing them as is. Parens begin s-expression parsing. Additionally I am getting rid of reader macros in favour of general preprocessing and template based code generation. Another goal is to build a two way syntax parsers that will take s-expressions syntax and translate it freely to and from the new syntax so that you can use an editor to read and port code."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1627676505.001600",
        "parent_user_id": "UCUSW7WVD"
    }
]