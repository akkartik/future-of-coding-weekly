[
    {
        "client_msg_id": "e55680c2-d752-4d36-b6dd-9083f5d7126b",
        "type": "message",
        "text": "Anyone have a big list of all the different verbs you typically do with arbitrary data, at a very general/abstract level? I'm thinking things like split, join, count, clone, shuffle, map, filter, reduce, sort, annotate, simplify, store, load, print, splice, reverse, invert...",
        "user": "UC2A2ARPT",
        "ts": "1625710827.187800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PcV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Anyone have a big list of all the different verbs you typically do with arbitrary data, at a very general/abstract level? I'm thinking things like split, join, count, clone, shuffle, map, filter, reduce, sort, annotate, simplify, store, load, print, splice, reverse, invert..."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "reply_count": 25,
        "reply_users_count": 10,
        "latest_reply": "1626103817.215400",
        "reply_users": [
            "UGWUJUZHT",
            "U0123H7JRDM",
            "UC2A2ARPT",
            "USH01JEDQ",
            "UMVFWPZ36",
            "U013ZLJARC7",
            "UCUSW7WVD",
            "UKJGU23KP",
            "U01JNTE35QS",
            "UE6EFEPTQ"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UNCP67JSK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d92379e5-5b8d-4025-a2cb-10fb01e0dff1",
        "type": "message",
        "text": "Sounds like brainstorming.  You might also want to look at <http://rhymezone.com|rhymezone.com> and <http://b-rhymes.com|b-rhymes.com> and the various synonym dictionaries and thesauri.",
        "user": "UGWUJUZHT",
        "ts": "1625714707.187900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3fXx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sounds like brainstorming.  You might also want to look at "
                            },
                            {
                                "type": "link",
                                "url": "http://rhymezone.com",
                                "text": "rhymezone.com"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "http://b-rhymes.com",
                                "text": "b-rhymes.com"
                            },
                            {
                                "type": "text",
                                "text": " and the various synonym dictionaries and thesauri."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "3BB1F4C6-C4B6-414C-9B92-9FDA768BAC37",
        "type": "message",
        "text": "Are you planning to implement this list of data operations in Hest as functions which you can connect to and visualize the data flows and whats happens with it? The list seems already quite complete. Maybe \"send\" and \"receive\"? To send and receive to and from external (http etc) endpoints",
        "user": "U0123H7JRDM",
        "ts": "1625727409.193100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "itF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are you planning to implement this list of data operations in Hest as functions which you can connect to and visualize the data flows and whats happens with it? The list seems already quite complete. Maybe \"send\" and \"receive\"? To send and receive to and from external (http etc) endpoints"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "1dbe3a72-4243-4aba-9431-89b8366d67cb",
        "type": "message",
        "text": "&gt; ...in Hest...\nNot quite :)\n&gt; The list seems already quite complete\nMatter of perspective, I suppose. If you took a look at all the function names in your typical structures / collections library \u2014 say, the Ruby standard library, or much of Clojure.core, or Boost, or what have you \u2014\u00a0you'd find plenty more verbs than what I've listed. Magnitudes more, even. And even if many of these verbs are just different words for the same concept (select / filter / pluck / so on), having a little flexibility in tone or interpretation is valuable when ideating. So for that reason, I'm curious to see if anyone's made an effort to collect a body of these sorts of terms.",
        "user": "UC2A2ARPT",
        "ts": "1625727999.193600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GhdE",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "...in Hest..."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not quite :)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The list seems already quite complete"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Matter of perspective, I suppose. If you took a look at all the function names in your typical structures / collections library \u2014 say, the Ruby standard library, or much of Clojure.core, or Boost, or what have you \u2014\u00a0you'd find plenty more verbs than what I've listed. Magnitudes more, even. And even if many of these verbs are just different words for the same concept (select / filter / pluck / so on), having a little flexibility in tone or interpretation is valuable when ideating. So for that reason, I'm curious to see if anyone's made an effort to collect a body of these sorts of terms."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "48E612BF-4391-45D8-BFF0-AB258B717DFC",
        "type": "message",
        "text": "Maybe pick a respected functional library like lodash?",
        "user": "USH01JEDQ",
        "ts": "1625753584.202300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6MDz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe pick a respected functional library like lodash?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "254dc499-bc27-4900-9cb5-e5a3f005b4d4",
        "type": "message",
        "text": "The R Studio Cheat Sheets are amazing (<https://www.rstudio.com/resources/cheatsheets/>) and well worth printing out",
        "user": "UMVFWPZ36",
        "ts": "1625785160.202500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x93yj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The R Studio Cheat Sheets are amazing ("
                            },
                            {
                                "type": "link",
                                "url": "https://www.rstudio.com/resources/cheatsheets/"
                            },
                            {
                                "type": "text",
                                "text": ") and well worth printing out"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "c5c2c97a-3b60-4014-9923-b7da1bb042ed",
        "type": "message",
        "text": "The dplyr one in particular would be relevant",
        "user": "UMVFWPZ36",
        "ts": "1625785237.202800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FrMd1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The dplyr one in particular would be relevant"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "2dd7d88c-2191-4649-b013-7412af170606",
        "type": "message",
        "text": "Not only which verbs exist, but also the semantics of each one, vary quite a bit between different PL cultures, so I haven't a single lexicon. It would be a fun project to build a translation table, though.",
        "user": "U013ZLJARC7",
        "ts": "1625821469.203000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UQHz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not only which verbs exist, but also the semantics of each one, vary quite a bit between different PL cultures, so I haven't a single lexicon. It would be a fun project to build a translation table, though."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "U01KL1XH4R1"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "ef2d21b7-7a3f-4227-b9bd-c36495529b25",
        "type": "message",
        "text": "I get the sense Ivan is only concerned with names (i.e. English semantics) at the moment.",
        "user": "UCUSW7WVD",
        "ts": "1625823379.203200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1310",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I get the sense Ivan is only concerned with names (i.e. English semantics) at the moment."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "043dc7f3-e18d-4220-be6a-49538728ec28",
        "type": "message",
        "text": "I'm in the divergent phase of ideating \u2014 I want to see a huge spread of options, and sort of feel my way through them.\n\nThanks for the suggestions so far!",
        "user": "UC2A2ARPT",
        "ts": "1625845939.203400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xtu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm in the divergent phase of ideating \u2014 I want to see a huge spread of options, and sort of feel my way through them.\n\nThanks for the suggestions so far!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "2289A0FD-3E1C-4A81-8EDF-F4042072AD08",
        "type": "message",
        "text": "Haven\u2019t gotten past the abstract, but this looks relevant: <https://web.cs.ucdavis.edu/~devanbu/tse-coils-paper.pdf|https://web.cs.ucdavis.edu/~devanbu/tse-coils-paper.pdf>",
        "user": "UKJGU23KP",
        "ts": "1625852541.204400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9gcC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Haven\u2019t gotten past the abstract, but this looks relevant: "
                            },
                            {
                                "type": "link",
                                "url": "https://web.cs.ucdavis.edu/~devanbu/tse-coils-paper.pdf",
                                "text": "https://web.cs.ucdavis.edu/~devanbu/tse-coils-paper.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "41850E70-EB92-4410-8B17-34D021F17740",
        "type": "message",
        "text": "I have a follow up question: is there a list of matching visual icons somewhere to all of these data operations? ",
        "user": "U0123H7JRDM",
        "ts": "1625924918.206600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "64Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have a follow up question: is there a list of matching visual icons somewhere to all of these data operations? "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UNCP67JSK"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "f0ce2b19-6755-4e01-a5fc-ed3cf0a80b62",
        "type": "message",
        "text": "Yeah, there's a lot of talk about the desire for universal protocols, standards, terminology, interoperability... but let's get some universal iconography going while we're at it!",
        "user": "UC2A2ARPT",
        "ts": "1625935442.206800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WPu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, there's a lot of talk about the desire for universal protocols, standards, terminology, interoperability... but let's get some universal iconography going while we're at it!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "dccdf897-3154-4da7-a95b-9b61fc9d75c1",
        "type": "message",
        "text": "<@U0123H7JRDM> check out the visual icons in the dplyr cheat sheet. Best I've seen",
        "user": "UMVFWPZ36",
        "ts": "1625935596.207100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b5b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U0123H7JRDM"
                            },
                            {
                                "type": "text",
                                "text": " check out the visual icons in the dplyr cheat sheet. Best I've seen"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "type": "message",
        "text": "ie:",
        "files": [
            {
                "id": "F028CP4SG56",
                "created": 1625935653,
                "timestamp": 1625935653,
                "name": "Screen Shot 2021-07-10 at 6.47.22 AM.png",
                "title": "Screen Shot 2021-07-10 at 6.47.22 AM.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UMVFWPZ36",
                "editable": false,
                "size": 45309,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F028CP4SG56/screen_shot_2021-07-10_at_6.47.22_am.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F028CP4SG56/download/screen_shot_2021-07-10_at_6.47.22_am.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F028CP4SG56-c1a71fc27a/screen_shot_2021-07-10_at_6.47.22_am_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F028CP4SG56-c1a71fc27a/screen_shot_2021-07-10_at_6.47.22_am_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F028CP4SG56-c1a71fc27a/screen_shot_2021-07-10_at_6.47.22_am_360.png",
                "thumb_360_w": 348,
                "thumb_360_h": 274,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F028CP4SG56-c1a71fc27a/screen_shot_2021-07-10_at_6.47.22_am_160.png",
                "original_w": 348,
                "original_h": 274,
                "thumb_tiny": "AwAlADC67MGOG/Ch2cOQH/lxSu5DEADj2pGdxIQNu36UrjEWRsYLDP4UokPXcPpxQJGzg7T9B/8AXpd7YHK0xDhIPb86eOlMDEngrin0AQucOflWlZiH+4pHrTi6A4PX6Ux9m5stg9+KAAMc4aNePQH/AApc/wCwv5UDyio6HHtS/us9B+VAByTwi1JUf7oHoMj2p6sG6GgCJxl2pzR5bOR7UjffapKSGM8s/wB4flS7WHRh+VOpaYhuH/vD8qUZxycmgd6WgD//2Q==",
                "permalink": "https://futureofcoding.slack.com/files/UMVFWPZ36/F028CP4SG56/screen_shot_2021-07-10_at_6.47.22_am.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F028CP4SG56-f0a362739b",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yX4r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ie:"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UMVFWPZ36",
        "display_as_bot": false,
        "ts": "1625935656.207300",
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "clinking_glasses",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0461fe6d-0b68-435a-9d43-6311b0588e91",
        "type": "message",
        "text": "these are not yet clear for me, I myself am  looking for more simple icons (examples like \"print\" and \"save\"... ignoring that we no longer use 3.5inch discs to store data;-) ). Although to show the subtle difference between those different join types, simple icons might be too limiting. There's probably a lot to be learned from Electronic symbols, where different international standards exist. Symbols for flow diagrams are also standardized , same for UML.",
        "user": "U0123H7JRDM",
        "ts": "1625940461.207500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kp=q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "these are not yet clear for me, I myself am  looking for more simple icons (examples like \"print\" and \"save\"... ignoring that we no longer use 3.5inch discs to store data;-) ). Although to show the subtle difference between those different join types, simple icons might be too limiting. There's probably a lot to be learned from Electronic symbols, where different international standards exist. Symbols for flow diagrams are also standardized , same for UML."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "37b95642-e58f-4c44-92ad-cbc40e791d13",
        "type": "message",
        "text": "<@U0123H7JRDM> yeah I can see how they are still confusing. What I love about them is they provide enough detail to actually write an implementation",
        "user": "UMVFWPZ36",
        "ts": "1625958048.207700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g4e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U0123H7JRDM"
                            },
                            {
                                "type": "text",
                                "text": " yeah I can see how they are still confusing. What I love about them is they provide enough detail to actually write an implementation"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "8b782695-29bb-43bf-9dd6-160d0ba30b02",
        "type": "message",
        "text": "&gt; There's probably a lot to be learned from Electronic symbols, where different international standards exist\nThis is my biz :). For instance, here's a little interactive graphic on my site that details a few common symbols used in the schematic for a (atypically complex, mind) hydraulic valve: <https://www.lunchboxsessions.com/materials/hydraulic-schematic-symbols/describe-this-valve-puzzle>\n\nSpitballing, there's around 100 symbols in common usage in hydraulic and electrical schematics, as standardized by ANSI and ISO. With even just the few dozen most popular ones, you can visually describe the gist of pretty much any system/circuit. The more obscure symbols just let you express things a little more succinctly, for the most part.\n\nMakes me wonder whether anyone has given Clojure this treatment, but using icons in place of the names: <https://twitter.com/jackrusher/status/1399651095408939008>\n\nOne last thought \u2014 hydraulic schematics arguably have it easier than electrical schematics or programming languages, since many of the hydraulic schematic symbols are just simplified drawings of the actual physical form of the object being represented.",
        "user": "UC2A2ARPT",
        "ts": "1625969347.207900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ljWj",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's probably a lot to be learned from Electronic symbols, where different international standards exist"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis is my biz :). For instance, here's a little interactive graphic on my site that details a few common symbols used in the schematic for a (atypically complex, mind) hydraulic valve: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.lunchboxsessions.com/materials/hydraulic-schematic-symbols/describe-this-valve-puzzle"
                            },
                            {
                                "type": "text",
                                "text": "\n\nSpitballing, there's around 100 symbols in common usage in hydraulic and electrical schematics, as standardized by ANSI and ISO. With even just the few dozen most popular ones, you can visually describe the gist of pretty much any system/circuit. The more obscure symbols just let you express things a little more succinctly, for the most part.\n\nMakes me wonder whether anyone has given Clojure this treatment, but using icons in place of the names: "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/jackrusher/status/1399651095408939008"
                            },
                            {
                                "type": "text",
                                "text": "\n\nOne last thought \u2014 hydraulic schematics arguably have it easier than electrical schematics or programming languages, since many of the hydraulic schematic symbols are just simplified drawings of the actual physical form of the object being represented."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UMVFWPZ36"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "5b6fe253-e5c9-465e-94c1-16750a58e29d",
        "type": "message",
        "text": "<@UCUSW7WVD> what I mean by semantics is that, for example:\n\u2022 Clojure's `reduce` takes a function, an optional initial value, and a sequence. `(reduce #(assoc %1 (str %2) %2) {} [1 2 3 4]) ; =&gt; {\"1\" 1, \"2\" 2, \"3\" 3, \"4\" 4}`\n\u2022 Ruby calls this `collect`, but instead of being a function it's an Array method that doesn't take an initial value: `[ \"a\", \"b\", \"c\", \"d\" ].collect { |x| x + \"!\" } #=&gt; [\"a!\", \"b!\", \"c!\", \"d!\"]`\n\u2022 APL calls the same operation reduce, but spells it `/`  and uses it as a modifier to another operation: `+/1 2 3 4 5 \u235d 15`\n... and so on. These are all translations of the same concept, but they have cultural differences that make an exact translation impossible.",
        "user": "U013ZLJARC7",
        "ts": "1626016377.208400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U013ZLJARC7",
            "ts": "1626016622.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6mtZa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " what I mean by semantics is that, for example:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Clojure's "
                                    },
                                    {
                                        "type": "text",
                                        "text": "reduce",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " takes a function, an optional initial value, and a sequence. "
                                    },
                                    {
                                        "type": "text",
                                        "text": "(reduce #(assoc %1 (str %2) %2) {} [1 2 3 4]) ; => {\"1\" 1, \"2\" 2, \"3\" 3, \"4\" 4}",
                                        "style": {
                                            "code": true
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Ruby calls this "
                                    },
                                    {
                                        "type": "text",
                                        "text": "collect",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ", but instead of being a function it's an Array method that doesn't take an initial value: "
                                    },
                                    {
                                        "type": "text",
                                        "text": "[ \"a\", \"b\", \"c\", \"d\" ].collect { |x| x + \"!\" } #=> [\"a!\", \"b!\", \"c!\", \"d!\"]",
                                        "style": {
                                            "code": true
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "APL calls the same operation reduce, but spells it "
                                    },
                                    {
                                        "type": "text",
                                        "text": "/",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "  and uses it as a modifier to another operation: "
                                    },
                                    {
                                        "type": "text",
                                        "text": "+/1 2 3 4 5 \u235d 15",
                                        "style": {
                                            "code": true
                                        }
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "... and so on. These are all translations of the same concept, but they have cultural differences that make an exact translation impossible."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC",
                    "UNCP67JSK"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "c2320e59-cbe4-45e3-a762-f5f69af14e17",
        "type": "message",
        "text": "Yeah, I went through that same thought process myself.",
        "user": "UCUSW7WVD",
        "ts": "1626016685.208800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a5vp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I went through that same thought process myself."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8D8B5652-28F4-4428-AE94-1AF40AD506D9",
        "type": "message",
        "text": "<@U013ZLJARC7> having them all laid out in the same place would be wonderful, not to put them all together on a single album (indeed impossible), but instead to make a killer mixtape.",
        "user": "UC2A2ARPT",
        "ts": "1626017436.212100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1626017447.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "URh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " having them all laid out in the same place would be wonderful, not to put them all together on a single album (indeed impossible), but instead to make a killer mixtape."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "acfecd28-6d8f-407b-ae5d-4b2ea3152f7a",
        "type": "message",
        "text": "I have a book called Symbol Sourcebook: An Authoritative Guide to International Graphic Symbols by Drefuss which is always fun to flip through",
        "user": "UMVFWPZ36",
        "ts": "1626020975.212500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xjw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have a book called Symbol Sourcebook: An Authoritative Guide to International Graphic Symbols by Drefuss which is always fun to flip through"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3b137b7a-d774-49c6-a2d2-37e6bcd368f4",
        "type": "message",
        "text": "I would reuse the work done in APL or K, the full list of verbs and adverbs would be a good starting point. Along with this are some key elements of the implementation (such as sort returning indices rather than returning values). I also think that many of these can be implemented on top of some basic primitives - BQN does this pretty well.",
        "user": "U01JNTE35QS",
        "ts": "1626053450.212800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aBDW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would reuse the work done in APL or K, the full list of verbs and adverbs would be a good starting point. Along with this are some key elements of the implementation (such as sort returning indices rather than returning values). I also think that many of these can be implemented on top of some basic primitives - BQN does this pretty well."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMVFWPZ36"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "52D6543E-A4FA-4951-8239-51A6548D65F6",
        "type": "message",
        "text": "<@U013ZLJARC7> You say translation table, but I wonder whether it\u2019s tractable to write a program that does a literal n x n compilation. Give me a loop like operation, then rewrite it in all the different languages.",
        "user": "UKJGU23KP",
        "ts": "1626060381.215000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KLZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " You say translation table, but I wonder whether it\u2019s tractable to write a program that does a literal n x n compilation. Give me a loop like operation, then rewrite it in all the different languages."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "e7032c4c-b398-484a-8921-85de49f36ec9",
        "type": "message",
        "text": "<@UKJGU23KP> well, there's always <http://rosettacode.org/wiki/Loops/For> :slightly_smiling_face:",
        "user": "U013ZLJARC7",
        "ts": "1626080046.215200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L26C",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKJGU23KP"
                            },
                            {
                                "type": "text",
                                "text": " well, there's always "
                            },
                            {
                                "type": "link",
                                "url": "http://rosettacode.org/wiki/Loops/For"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "dc7f7a1d-2d75-4db4-8c73-f4771e55826b",
        "type": "message",
        "text": "merge - as in, merge two lists? or is that covered in another word already?\nare you looking for natural language words, or programmer-familiar ones?\nare you looking just for transforms or also queries (which is a kinda transform)?",
        "user": "UE6EFEPTQ",
        "ts": "1626103817.215400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rbA2X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "merge - as in, merge two lists? or is that covered in another word already?\nare you looking for natural language words, or programmer-familiar ones?\nare you looking just for transforms or also queries (which is a kinda transform)?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1625710827.187800",
        "parent_user_id": "UC2A2ARPT"
    }
]