[
    {
        "client_msg_id": "4f78deac-5bae-47d8-bd9c-cc4c21d5ba31",
        "type": "message",
        "text": "I find most programming tools and libraries remarkably hard to learn (usually because of a lack of documentation or poor-quality documentation), but perhaps even more amazing is how everybody acts like these things aren't hard to learn, as if maybe I have a learning disability even though I got A's in school. At the same time I feel (strongly) like I produce better code than almost everyone else. It's as if I'm unusually competent at production and unusually incompetent at consumption. It is confusing. I have various ideas about teaching, but they might be very effective if everybody else has a different learning style.",
        "user": "UD6EXQVM0",
        "ts": "1584663848.419200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1584664378.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kZ2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I find most programming tools and libraries remarkably hard to learn (usually because of a lack of documentation or poor-quality documentation), but perhaps even more amazing is how everybody acts like these things aren't hard to learn, as if maybe I have a learning disability even though I got A's in school. At the same time I feel (strongly) like I produce better code than almost everyone else. It's as if I'm unusually competent at production and unusually incompetent at consumption. It is confusing. I have various ideas about teaching, but they might be very effective if everybody else has a different learning style."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584643351.400400",
        "parent_user_id": "UN06QADNV",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c73bc827-c7ae-4d74-8374-e91579db79f1",
        "type": "message",
        "text": "Anyway, it seems like really good teaching is hard. I was really impressed with how <http://vuemastery.com|vuemastery.com> teaches Vue - at least the non-paywalled videos I saw have lots of great animations nicely timed to the instructor, but the animations sure look labor-intensive. <http://scrimba.com|scrimba.com> probably has much better \"bang for the buck\" in terms of \"teaching effectiveness per unit of time it takes to put a course together\", since the viewer can play with the code at any time and the instructor need not put lots of work into fancy animations.",
        "user": "UD6EXQVM0",
        "ts": "1584664097.419400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1584664199.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q5w6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Anyway, it seems like really good teaching is hard. I was really impressed with how "
                            },
                            {
                                "type": "link",
                                "url": "http://vuemastery.com",
                                "text": "vuemastery.com"
                            },
                            {
                                "type": "text",
                                "text": " teaches Vue - at least the non-paywalled videos I saw have lots of great animations nicely timed to the instructor, but the animations sure look labor-intensive. "
                            },
                            {
                                "type": "link",
                                "url": "http://scrimba.com",
                                "text": "scrimba.com"
                            },
                            {
                                "type": "text",
                                "text": " probably has much better \"bang for the buck\" in terms of \"teaching effectiveness per unit of time it takes to put a course together\", since the viewer can play with the code at any time and the instructor need not put lots of work into fancy animations."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584643351.400400",
        "parent_user_id": "UN06QADNV"
    },
    {
        "client_msg_id": "c5ef19e9-79b4-41f1-857b-74e344126329",
        "type": "message",
        "text": "Anyway, since watching Bret Victor's \"Inventing on Principle\" I was sure I wanted to \"Invent on Principle\" as he suggested, but the tricky part is figuring out what my Big Principle is.\n\nOne angle I've homed in on is the principle that \"easy-sounding things should be easy\". Programming is full of things that seem like they should be easy, but are *unnecessarily* hard in practice. Things like drawing graphics efficiently (you can start easily with Windows Forms but if you want efficient drawing you have to make this massive leap over to DirectX, in which case, good luck implementing your GUI widgets by hand) playing music and sounds (okay, playing a .wav file might be a simple static method call, but generating audio continuously or playing an mp3 or opus stream might be far more difficult), or keeping a user interface synchronized with the underlying data model (but see SwiftUI, Assisticant, MobX/KnockoutJS for reactive solutions in Swift, C# and JS respectively)\n\nIn this view, then, the problem isn't so much education, the problem is that our tools are too hard to use. If the tools were easier, education would be easier too.\n\nTaking this a step further, I think there should be a toolset that allows a single universal education.\n\nWe haven't figured out what the \"ideal\" programming language looks like yet, as there are so many ideas still being explored (consider Unison, Idris, JAI, Nim, Ceylon, as well as the languages made by people right here in FoC). However, there are a lot of ideas that are highly useful and fairly universal: interfaces, unit testing, sequences (including singly-linked lists, growable arrays and hashtables, semi-persistent data structures (ask me about them), functional programming, ranges and slices of collections, <http://loyc.net/loyc-trees/|universal syntax trees>, serialization, asynchronous functions, symbols like in Lisps/Ruby/JS, reactive state, geometry primitives like points, infinite lines, planes, affine matricies, garbage collection slash refcounting with weak refs, graphics, sound, sending UDP packets...\n\nI would like to be part of a group that develops a really good <http://loyc.net/2014/design-elements-of-mlsl.html|multi-language standard library> and implements it in several languages. If such a library were widely available and if people bothered to learn it, it would bestow the ability to write code in many languages more easily. It would also be useful as the basis of tools for converting code between languages (the hardest part of converting code from one mainstream language to another is dealing with differences between standard libraries, since the actual semantics of popular languages are, at least on some level, fairly similar.)",
        "user": "UD6EXQVM0",
        "ts": "1584666274.420200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1584673216.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YXAZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Anyway, since watching Bret Victor's \"Inventing on Principle\" I was sure I wanted to \"Invent on Principle\" as he suggested, but the tricky part is figuring out what my Big Principle is.\n\nOne angle I've homed in on is the principle that \"easy-sounding things should be easy\". Programming is full of things that seem like they should be easy, but are "
                            },
                            {
                                "type": "text",
                                "text": "unnecessarily",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " hard in practice. Things like drawing graphics efficiently (you can start easily with Windows Forms but if you want efficient drawing you have to make this massive leap over to DirectX, in which case, good luck implementing your GUI widgets by hand) playing music and sounds (okay, playing a .wav file might be a simple static method call, but generating audio continuously or playing an mp3 or opus stream might be far more difficult), or keeping a user interface synchronized with the underlying data model (but see SwiftUI, Assisticant, MobX/KnockoutJS for reactive solutions in Swift, C# and JS respectively)\n\nIn this view, then, the problem isn't so much education, the problem is that our tools are too hard to use. If the tools were easier, education would be easier too.\n\nTaking this a step further, I think there should be a toolset that allows a single universal education.\n\nWe haven't figured out what the \"ideal\" programming language looks like yet, as there are so many ideas still being explored (consider Unison, Idris, JAI, Nim, Ceylon, as well as the languages made by people right here in FoC). However, there are a lot of ideas that are highly useful and fairly universal: interfaces, unit testing, sequences (including singly-linked lists, growable arrays and hashtables, semi-persistent data structures (ask me about them), functional programming, ranges and slices of collections, "
                            },
                            {
                                "type": "link",
                                "url": "http://loyc.net/loyc-trees/",
                                "text": "universal syntax trees"
                            },
                            {
                                "type": "text",
                                "text": ", serialization, asynchronous functions, symbols like in Lisps/Ruby/JS, reactive state, geometry primitives like points, infinite lines, planes, affine matricies, garbage collection slash refcounting with weak refs, graphics, sound, sending UDP packets...\n\nI would like to be part of a group that develops a really good "
                            },
                            {
                                "type": "link",
                                "url": "http://loyc.net/2014/design-elements-of-mlsl.html",
                                "text": "multi-language standard library"
                            },
                            {
                                "type": "text",
                                "text": " and implements it in several languages. If such a library were widely available and if people bothered to learn it, it would bestow the ability to write code in many languages more easily. It would also be useful as the basis of tools for converting code between languages (the hardest part of converting code from one mainstream language to another is dealing with differences between standard libraries, since the actual semantics of popular languages are, at least on some level, fairly similar.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584643351.400400",
        "parent_user_id": "UN06QADNV"
    },
    {
        "client_msg_id": "30174bb8-2b2d-4291-99bd-a7a5e3c02797",
        "type": "message",
        "text": "I also think certain programming principles are much more important than others. Bad code typically results from violating one of the following principles that I follow:\n\n1. Separate concerns!!! A program is like a house: just as walls give a house structure, separation of concerns gives a program structure. Most programming languages do not facilitate separation of concerns because they allow almost anything to touch almost anything else. Programmer discipline is required to create imaginary walls where no connections are allowed. For example, a language typically can't stop the GUI from directly running SQL update commands, so the wall between GUI and a specific data persistence library rests only in the minds of the developers. (I think some people \"solve\" this lack of compiler enforcement with \"microservices architectures\", but any solution that involves huge amounts of otherwise unnecessary plumbing code is not a good solution.)\n2. The Generalized Don't Repeat Yourself principle: avoid not just repeating information or business logic in multiple places, but minimize repetition of any patterns whatsoever. Elegant code minimizes the number of tokens in the program.\n3. Create functions and abstractions appropriately, but avoid excessive layering/wrapping (doing so is often motivated by prior failure to refactor, or failure to test, leading to brittle code you don't dare touch). There is an appropriate number of layers of abstraction; too many or too few is confusing (and many programs have *both* too many *and* too few, in different places).\n4. Minimize the number of code entities by merging things that turn out to be very similar. For example, I realized that \"logging\" and \"reporting warnings and errors\" are essentially the same thing, so in the <http://core.loyc.net|Loyc.Essentials >way of doing things you would use the same interface `IMessageSink` for both (sometimes I wonder if no one else has noticed this). Similarly I often see interfaces like `ISomethingRetriever` whose job is to retrieve some kind of object given some kind of key. That's basically a dictionary! Just implement `IReadOnlyDictionary`, you fool, or whatever your language's equivalent is. Do not create a new and different interface every time you need to retrieve a new kind of object. More broadly, design both your interfaces and your components to be generic, reusable, and ignorant.\n5. Pick good names and write documentation that describes things in a _different way_ than the names do. I often write documentation for a class *before* its code, which leads to clear thinking and good separation of concerns. (However I have to correct the documentation later because I usually tweak something or change plans midstream.) Documentation of large-scale entities (classes, modules) and mutable state (e.g. invariants) is often more important than documentation of small-scale entities (small functions and code blocks).\n6. Write good tests (or prove correctness)\n7. Think long and hard about your decisions. _Agonize over them._ You'll never come up with an optimal design by doing the first thing that comes to mind. Even after you implement it, be on the lookout for a better approach (either so you can use it in the future, or ideally, improve the original code).\n8. Be on the lookout for new and better general-purpose techniques, and then actually use those techniques. I am slightly irritated whenever I see professional developers using strings when they should be using <https://www.codeproject.com/Articles/34753/Symbols-as-extensible-enums-2-2-2|Symbols>. Why? Do you use strings in C# because it doesn't have Symbols? But you've seen Symbols in Ruby and ES6 - take the lesson you learned in the other language and apply it to C#.\n(When I wrote this I was thinking of the question \"what events stand out as important learning points in your path to technical enlightenment?\" but now I see that, rather than answer the question, I've simply explained what I think an enlightened programmer *does*. I don't remember how I learned this stuff, but I am quite convinced of its importance.)",
        "user": "UD6EXQVM0",
        "ts": "1584667089.420700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1584671721.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XcK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also think certain programming principles are much more important than others. Bad code typically results from violating one of the following principles that I follow:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Separate concerns!!! A program is like a house: just as walls give a house structure, separation of concerns gives a program structure. Most programming languages do not facilitate separation of concerns because they allow almost anything to touch almost anything else. Programmer discipline is required to create imaginary walls where no connections are allowed. For example, a language typically can't stop the GUI from directly running SQL update commands, so the wall between GUI and a specific data persistence library rests only in the minds of the developers. (I think some people \"solve\" this lack of compiler enforcement with \"microservices architectures\", but any solution that involves huge amounts of otherwise unnecessary plumbing code is not a good solution.)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The Generalized Don't Repeat Yourself principle: avoid not just repeating information or business logic in multiple places, but minimize repetition of any patterns whatsoever. Elegant code minimizes the number of tokens in the program."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Create functions and abstractions appropriately, but avoid excessive layering/wrapping (doing so is often motivated by prior failure to refactor, or failure to test, leading to brittle code you don't dare touch). There is an appropriate number of layers of abstraction; too many or too few is confusing (and many programs have "
                                    },
                                    {
                                        "type": "text",
                                        "text": "both",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " too many "
                                    },
                                    {
                                        "type": "text",
                                        "text": "and",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " too few, in different places)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Minimize the number of code entities by merging things that turn out to be very similar. For example, I realized that \"logging\" and \"reporting warnings and errors\" are essentially the same thing, so in the "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http://core.loyc.net",
                                        "text": "Loyc.Essentials "
                                    },
                                    {
                                        "type": "text",
                                        "text": "way of doing things you would use the same interface "
                                    },
                                    {
                                        "type": "text",
                                        "text": "IMessageSink",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " for both (sometimes I wonder if no one else has noticed this). Similarly I often see interfaces like "
                                    },
                                    {
                                        "type": "text",
                                        "text": "ISomethingRetriever",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " whose job is to retrieve some kind of object given some kind of key. That's basically a dictionary! Just implement "
                                    },
                                    {
                                        "type": "text",
                                        "text": "IReadOnlyDictionary",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ", you fool, or whatever your language's equivalent is. Do not create a new and different interface every time you need to retrieve a new kind of object. More broadly, design both your interfaces and your components to be generic, reusable, and ignorant."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Pick good names and write documentation that describes things in a "
                                    },
                                    {
                                        "type": "text",
                                        "text": "different way",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " than the names do. I often write documentation for a class "
                                    },
                                    {
                                        "type": "text",
                                        "text": "before",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " its code, which leads to clear thinking and good separation of concerns. (However I have to correct the documentation later because I usually tweak something or change plans midstream.) Documentation of large-scale entities (classes, modules) and mutable state (e.g. invariants) is often more important than documentation of small-scale entities (small functions and code blocks)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Write good tests (or prove correctness)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Think long and hard about your decisions. "
                                    },
                                    {
                                        "type": "text",
                                        "text": "Agonize over them.",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " You'll never come up with an optimal design by doing the first thing that comes to mind. Even after you implement it, be on the lookout for a better approach (either so you can use it in the future, or ideally, improve the original code)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Be on the lookout for new and better general-purpose techniques, and then actually use those techniques. I am slightly irritated whenever I see professional developers using strings when they should be using "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://www.codeproject.com/Articles/34753/Symbols-as-extensible-enums-2-2-2",
                                        "text": "Symbols"
                                    },
                                    {
                                        "type": "text",
                                        "text": ". Why? Do you use strings in C# because it doesn't have Symbols? But you've seen Symbols in Ruby and ES6 - take the lesson you learned in the other language and apply it to C#."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n(When I wrote this I was thinking of the question \"what events stand out as important learning points in your path to technical enlightenment?\" but now I see that, rather than answer the question, I've simply explained what I think an enlightened programmer "
                            },
                            {
                                "type": "text",
                                "text": "does",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". I don't remember how I learned this stuff, but I am quite convinced of its importance.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584643351.400400",
        "parent_user_id": "UN06QADNV"
    },
    {
        "client_msg_id": "d50b66c6-f192-4b2f-a98b-4ad2df36119c",
        "type": "message",
        "text": "<@UAVCC2X70> I've been thinking of making a \"WYSIWYT\" (what you see is what you type) editor for (the newer version of) <http://loyc.net/les/|LES>. The advantage of this approach would be that LES is not designed as a programming language, but rather as a foundation for building languages (especially DSLs), and so the editor could be re-used for various languages. Also, presumably while building the editor I could _figure out_ how to generalize parts of it so that those parts could be used to build WYSIWYT editors for somewhat different-looking languages... anyway, this is just a thing I'd like to do, but I might never find the time for it unless I pair up with someone, so I thought I'd mention it. I am also curious to hear about what you're building.",
        "user": "UD6EXQVM0",
        "ts": "1584672264.423600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1584672306.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bres",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " I've been thinking of making a \"WYSIWYT\" (what you see is what you type) editor for (the newer version of) "
                            },
                            {
                                "type": "link",
                                "url": "http://loyc.net/les/",
                                "text": "LES"
                            },
                            {
                                "type": "text",
                                "text": ". The advantage of this approach would be that LES is not designed as a programming language, but rather as a foundation for building languages (especially DSLs), and so the editor could be re-used for various languages. Also, presumably while building the editor I could "
                            },
                            {
                                "type": "text",
                                "text": "figure out",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " how to generalize parts of it so that those parts could be used to build WYSIWYT editors for somewhat different-looking languages... anyway, this is just a thing I'd like to do, but I might never find the time for it unless I pair up with someone, so I thought I'd mention it. I am also curious to hear about what you're building."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584235196.324400",
        "parent_user_id": "U01003H81UM",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "U01003H81UM"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d95f8ff1-71aa-44f6-bfd8-6363217f47c0",
        "type": "message",
        "text": "I'm fascinated by the sentence \"The secret sauce was a kind of mathematics and design that seems quite missing today\" - I see code monkeys all around, banging out hundreds of thousands of lines of code as though this were normal and appropriate. Can we teach developers not to do this? Can we teach the missing mathematics and design with a \"Systems Sciences Department\"?",
        "user": "UD6EXQVM0",
        "ts": "1584672756.423900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1584672792.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VlPj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm fascinated by the sentence \"The secret sauce was a kind of mathematics and design that seems quite missing today\" - I see code monkeys all around, banging out hundreds of thousands of lines of code as though this were normal and appropriate. Can we teach developers not to do this? Can we teach the missing mathematics and design with a \"Systems Sciences Department\"?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584042706.253500",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "12e34a8b-6889-443f-9dfc-83c754102d1f",
        "type": "message",
        "text": "Training Picasso is a tricky business, and isn't going necessarily going to be rewarded or feel rewarding.  Writing LoC feels like progress, and searching for unified, elegant mathematics doesn't mean you're going to find it.",
        "user": "UA14TGLTC",
        "ts": "1584691038.425400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hwp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Training Picasso is a tricky business, and isn't going necessarily going to be rewarded or feel rewarding.  Writing LoC feels like progress, and searching for unified, elegant mathematics doesn't mean you're going to find it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584042706.253500",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "920336F8-153A-4EEB-B4B1-E7037EC616D4",
        "type": "message",
        "text": "So what does that mean? What \u201ckind of mathematics and design\u201d?",
        "user": "U5STGTB3J",
        "ts": "1584691619.428300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vOcu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So what does that mean? What \u201ckind of mathematics and design\u201d?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584042706.253500",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "960c61c3-9feb-4fba-9293-595a6730bb42",
        "type": "message",
        "text": "*The Cambridge Handbook of Computing Education\u00a0Research*\n<https://www.cambridge.org/core/books/cambridge-handbook-of-computing-education-research/F8CFAF7B81A8F6BF5C663412BA0A943D>\n\n&gt; This Handbook describes the extent and shape of computing education research today. Over fifty leading researchers from academia and industry (including Google and Microsoft) have contributed chapters that together define and expand the evidence base. The foundational chapters set the field in context, articulate expertise from key disciplines, and form a practical guide for new researchers. They address what can be learned empirically, methodologically and theoretically from each area. The topic chapters explore issues that are of current interest, why they matter, and what is already known. They include discussion of motivational context, implications for practice, and open questions which might suggest future research. The authors provide an authoritative introduction to the field which is essential reading for policy makers, as well as both new and established researchers.\n",
        "user": "UF1ATC4RF",
        "ts": "1584701103.429700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UF1ATC4RF",
            "ts": "1584701113.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uT6NV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Cambridge Handbook of Computing Education\u00a0Research",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.cambridge.org/core/books/cambridge-handbook-of-computing-education-research/F8CFAF7B81A8F6BF5C663412BA0A943D"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This Handbook describes the extent and shape of computing education research today. Over fifty leading researchers from academia and industry (including Google and Microsoft) have contributed chapters that together define and expand the evidence base. The foundational chapters set the field in context, articulate expertise from key disciplines, and form a practical guide for new researchers. They address what can be learned empirically, methodologically and theoretically from each area. The topic chapters explore issues that are of current interest, why they matter, and what is already known. They include discussion of motivational context, implications for practice, and open questions which might suggest future research. The authors provide an authoritative introduction to the field which is essential reading for policy makers, as well as both new and established researchers."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ],
        "thread_ts": "1584701103.429700",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1584701118.430000",
        "reply_users": [
            "UF1ATC4RF"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UAJKEBGP8",
                    "U01038KJXRB",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "f0830ee7-5ece-48dd-aa58-f15e5c55cb9f",
        "type": "message",
        "text": "Found this from Philip Guo\u2019s daily vlog series - <https://www.youtube.com/watch?v=j7lg9SSBSsk>",
        "user": "UF1ATC4RF",
        "ts": "1584701118.430000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "2020-03-19 : PG Daily #4",
                "title_link": "https://www.youtube.com/watch?v=j7lg9SSBSsk",
                "author_name": "Philip Guo",
                "author_link": "https://www.youtube.com/user/pgbovine",
                "thumb_url": "https://i.ytimg.com/vi/j7lg9SSBSsk/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: 2020-03-19 : PG Daily #4",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https://www.youtube.com/embed/j7lg9SSBSsk?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https://www.youtube.com/watch?v=j7lg9SSBSsk",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=j7lg9SSBSsk"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2yOnw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Found this from Philip Guo\u2019s daily vlog series - "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=j7lg9SSBSsk"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584701103.429700",
        "parent_user_id": "UF1ATC4RF"
    },
    {
        "client_msg_id": "1a8ab86c-d047-438e-909f-23108e236e18",
        "type": "message",
        "text": "`So then the question is \u2026 are you interested in turning unmotivated students into computational thinkers? Or do you want to teach motivated students better Python?`\nIt\u2019s a very interesting angle to think about it from; thank you. I am interested in removing unnecessary blocker to knowledge acquisition; and hopefully - creating environments which are strong enablers of knowledge sharing. <http://Dataquest.io|Dataquest.io> does seem to be built on some very similar ideas. Are you aware of any platforms that take a similar approach for non-data science fields in technology? My personal interest with this space is I want to be able to understand technical things faster. I feel quite a few things in programming are relatively straight forward; however - getting the key insights and understanding which are at the core of an approach / idea can be, for me, a somewhat difficult process. I\u2019m just trying to take that angle and see if it can be turned into something that other people also find useful.\n\n`\"Programming\" is usually taught in terms of learning a specific language or tool`\nI am far too ashamed to go into any level of detail of how badly messed up my \u201cfoundational\u201d concepts of programming were; based on the introductory C++ courses I did at Uni. This extended many years into my professional career. And - how do I know when I \u201cfixed\u201d it? So terrifying.\n\n`write documentation that describes things in a different way than the names do`\nOh man; this is a hill I will die on! Billions of years of evolution culminates in\n// Finds project by Id\ngetProjectById",
        "user": "UN06QADNV",
        "ts": "1584702338.430300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "isqib",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "`So then the question is \u2026 are you interested in turning unmotivated students into computational thinkers? Or do you want to teach motivated students better Python?`\nIt\u2019s a very interesting angle to think about it from; thank you. I am interested in removing unnecessary blocker to knowledge acquisition; and hopefully - creating environments which are strong enablers of knowledge sharing. "
                            },
                            {
                                "type": "link",
                                "url": "http://Dataquest.io",
                                "text": "Dataquest.io"
                            },
                            {
                                "type": "text",
                                "text": " does seem to be built on some very similar ideas. Are you aware of any platforms that take a similar approach for non-data science fields in technology? My personal interest with this space is I want to be able to understand technical things faster. I feel quite a few things in programming are relatively straight forward; however - getting the key insights and understanding which are at the core of an approach / idea can be, for me, a somewhat difficult process. I\u2019m just trying to take that angle and see if it can be turned into something that other people also find useful.\n\n`\"Programming\" is usually taught in terms of learning a specific language or tool`\nI am far too ashamed to go into any level of detail of how badly messed up my \u201cfoundational\u201d concepts of programming were; based on the introductory C++ courses I did at Uni. This extended many years into my professional career. And - how do I know when I \u201cfixed\u201d it? So terrifying.\n\n`write documentation that describes things in a different way than the names do`\nOh man; this is a hill I will die on! Billions of years of evolution culminates in\n// Finds project by Id\ngetProjectById"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584643351.400400",
        "parent_user_id": "UN06QADNV"
    },
    {
        "client_msg_id": "a45a7ff9-ad22-40c6-93f0-121533477bcb",
        "type": "message",
        "text": "If I were to summarize my goals right now it would be: Build a competitor to Udemy. A platform optimized to teach programming concepts. Base courses on open source code sets to create rich; real world scenarios.\n\nSo; I\u2019m trying to \u201clearn\u201d things I\u2019m interested in; and at the same time, think about the process I use - to see if I can wrap it up into something that would be valuable to other people.\n\nOn the implementation level; having a url that links into an arbitrarily sophisticated environment is a great enabler. I came across these guys (and have had a few discussions with them) <https://www.gitpod.io/education/> - they are building a more open source version of vs-code. And then there is; as far as I can tell; a slightly more open source version of the gitpod \u201cauto-environment\u201d idea from Redhat <https://developers.redhat.com/blog/2019/09/17/eclipse-che-kubernetes-native-ide-version-7-now-available/>. So there are some quite powerful building blocks that could be leveraged.\n\nThis tweet poped into my feed a few days back - and is getting quite a warm response - <https://twitter.com/LostInTangent/status/1236672803123814400>. I see it as being in a similar space of putting knowledge into code sets.\n\nA rough outline of the types of features I have in mind to explore:\n\n1.) A focus on discoverability. StackOverflow has set the bar on being able to find extremely specific results; and the goal would be to bring a similar experience to course content. How to achieve this is the big open question. Currently I\u2019m thinking along the lines of getting rid of Chapters and capturing the \u201cstructure\u201d of the knowledge in the course - and perhaps from there; allowing users to explore in an autonomous way.\n\n2.) A way to \"layer on\" complexity. I always find the early exercises overly simple; try to jump ahead; and then have to go back to try find where supporting info is addressed. This seems to come back to creating support for users to navigate the \u201cstructure\u201d of the knowledge.\n\n3.) A platform which allows linking through all related topics. Similar to following articles in wikipedia - being able to start in a course on <https://github.com/zio/zio> and end up learning the relevant Category theory. (At least I think that's where users would end up.) And again; this seem to be back to the same core idea of knowledge having a structure - everything is a graph!!!\n\n4.) Being able to immerse in real world ASAP. The jump between \"exercise tasks\" and \"real world\" often is large; but with environment support, and leveraging open source, the context of the lesson can be enriched. I\u2019m hoping this can embrace the principle of `Everything should be made as simple as possible, but no simpler.` Whilst things often get buried in accidental complexity; it is also easy to forget actual complexity. I think <https://github.com/promises-aplus/promises-spec/issues/94> is a really interesting real world scenario. If the community could have that discussion again; could we have better ways of framing \u201cknown\u201d information so that people with different backgrounds could get up to speed efficiently - towards the goal of having more progressive debates and reaching what in retrospect are agreed to be \u201ccorrect\u201d decisions.",
        "user": "UN06QADNV",
        "ts": "1584702366.430500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UN06QADNV",
            "ts": "1584702389.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KrxK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If I were to summarize my goals right now it would be: Build a competitor to Udemy. A platform optimized to teach programming concepts. Base courses on open source code sets to create rich; real world scenarios.\n\nSo; I\u2019m trying to \u201clearn\u201d things I\u2019m interested in; and at the same time, think about the process I use - to see if I can wrap it up into something that would be valuable to other people.\n\nOn the implementation level; having a url that links into an arbitrarily sophisticated environment is a great enabler. I came across these guys (and have had a few discussions with them) "
                            },
                            {
                                "type": "link",
                                "url": "https://www.gitpod.io/education/"
                            },
                            {
                                "type": "text",
                                "text": " - they are building a more open source version of vs-code. And then there is; as far as I can tell; a slightly more open source version of the gitpod \u201cauto-environment\u201d idea from Redhat "
                            },
                            {
                                "type": "link",
                                "url": "https://developers.redhat.com/blog/2019/09/17/eclipse-che-kubernetes-native-ide-version-7-now-available/"
                            },
                            {
                                "type": "text",
                                "text": ". So there are some quite powerful building blocks that could be leveraged.\n\nThis tweet poped into my feed a few days back - and is getting quite a warm response - "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/LostInTangent/status/1236672803123814400"
                            },
                            {
                                "type": "text",
                                "text": ". I see it as being in a similar space of putting knowledge into code sets.\n\nA rough outline of the types of features I have in mind to explore:\n\n1.) A focus on discoverability. StackOverflow has set the bar on being able to find extremely specific results; and the goal would be to bring a similar experience to course content. How to achieve this is the big open question. Currently I\u2019m thinking along the lines of getting rid of Chapters and capturing the \u201cstructure\u201d of the knowledge in the course - and perhaps from there; allowing users to explore in an autonomous way.\n\n2.) A way to \"layer on\" complexity. I always find the early exercises overly simple; try to jump ahead; and then have to go back to try find where supporting info is addressed. This seems to come back to creating support for users to navigate the \u201cstructure\u201d of the knowledge.\n\n3.) A platform which allows linking through all related topics. Similar to following articles in wikipedia - being able to start in a course on "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/zio/zio"
                            },
                            {
                                "type": "text",
                                "text": " and end up learning the relevant Category theory. (At least I think that's where users would end up.) And again; this seem to be back to the same core idea of knowledge having a structure - everything is a graph!!!\n\n4.) Being able to immerse in real world ASAP. The jump between \"exercise tasks\" and \"real world\" often is large; but with environment support, and leveraging open source, the context of the lesson can be enriched. I\u2019m hoping this can embrace the principle of `Everything should be made as simple as possible, but no simpler.` Whilst things often get buried in accidental complexity; it is also easy to forget actual complexity. I think "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/promises-aplus/promises-spec/issues/94"
                            },
                            {
                                "type": "text",
                                "text": " is a really interesting real world scenario. If the community could have that discussion again; could we have better ways of framing \u201cknown\u201d information so that people with different backgrounds could get up to speed efficiently - towards the goal of having more progressive debates and reaching what in retrospect are agreed to be \u201ccorrect\u201d decisions."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584643351.400400",
        "parent_user_id": "UN06QADNV"
    },
    {
        "client_msg_id": "fe71c8ce-3da0-458a-83c1-3d38c104f85e",
        "type": "message",
        "text": "---\nThere where lots of interesting points in this thread already - so hopefully once I start creating \"content\" I can loop back to them and dig into more detail.\n\nIf anyone is interested in collaborating - please let me know",
        "user": "UN06QADNV",
        "ts": "1584702490.431300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YANQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "---\nThere where lots of interesting points in this thread already - so hopefully once I start creating \"content\" I can loop back to them and dig into more detail.\n\nIf anyone is interested in collaborating - please let me know"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584643351.400400",
        "parent_user_id": "UN06QADNV"
    },
    {
        "client_msg_id": "19f3dca2-cbca-449c-b2c3-de5ce3f86ba8",
        "type": "message",
        "text": "&gt; One angle I\u2019ve homed in on is the principle that \u201ceasy-sounding things should be easy\u201d. Programming is full of things that seem like they should be easy, but are *unnecessarily* hard in practice.\n<@U5Y7114NS> 100% agree. A few points:\n\n\u2022 In video game design, people often talk about \u201ceasy to start, hard to master\u201d. I kinda like that approach and that\u2019s essentially what MS Excel does. You can simulate complex stuff in Excel, but if you just want to add a bunch of numbers, create a plot, its REALLY easy to do so. Python on the other hand has like an hour of setup and a bunch of different tools and libraries to learn just to do that simple set of tasks that you can do more quickly on a piece of paper!\n\u2022 Another thing I\u2019ll say, that Bret / Dynamicland people talk about a lot that I agree with \u2026 is that the fundamental REAL logic in most programs is very simple and short to express. However, bringing that to life adds the remaining 95% of code. Compatability with standards, browsers, optimizing performance, GUI, low level hardware stuff, etc. All of that is powered by brittle, complex, opaque software. I like what Bret said in an interview last year \u2026 \u201cthe real world simulates itself\u201d, so the code for your unique logic / idea is very simple and minimal and can be understood and iterated on quickly. A lot of it can fit in your short-term memory (Alan Kay talks about getting things down to \u201ca few pages of code\u201d, which was the threshold under which even 6 year olds can program).\n&gt; Anyway, it seems like really good teaching is hard. I was really impressed with how <http://vuemastery.com|vuemastery.com> teaches Vue\nAfter 5 years in this trying to teach aliens (what I call people you can\u2019t see :stuck_out_tongue:) technical things, I\u2019ve come to appreciate that \u201clearning styles\u201d, \u201cteaching well\u201d, \u201cmotivating students\u201d, and all other phrases like this are MOSTLY BS (not completely, but mostly). This is a very strong statement, but in my opinion \u2026 it fundamentally comes down to teacher-learner fit (or content-learner fit). If you\u2019re highly motivated and have a clear goal, and the learning content or teacher is teaching towards those goals, then everything is great! The student will say things like \u201cI like how this teacher teaches\u201d or \u201cthis meets my learning style\u201d \u2026 but harmony in learning + teaching goals I think explains MOST of the stories people say. This is maybe a hot take, but just my perspective :stuck_out_tongue: There\u2019s still room for innovation though on the edges (people who are semi motivated but need to have a few aha moments delivered via fun videos or interactive simulations before they make a bigger learning commitment, etc).",
        "user": "UAJKEBGP8",
        "ts": "1584714145.431500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qu5RK",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One angle I\u2019ve homed in on is the principle that \u201ceasy-sounding things should be easy\u201d. Programming is full of things that seem like they should be easy, but are "
                            },
                            {
                                "type": "text",
                                "text": "unnecessarily",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " hard in practice."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5Y7114NS"
                            },
                            {
                                "type": "text",
                                "text": " 100% agree. A few points:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "In video game design, people often talk about \u201ceasy to start, hard to master\u201d. I kinda like that approach and that\u2019s essentially what MS Excel does. You can simulate complex stuff in Excel, but if you just want to add a bunch of numbers, create a plot, its REALLY easy to do so. Python on the other hand has like an hour of setup and a bunch of different tools and libraries to learn just to do that simple set of tasks that you can do more quickly on a piece of paper!"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Another thing I\u2019ll say, that Bret / Dynamicland people talk about a lot that I agree with \u2026 is that the fundamental REAL logic in most programs is very simple and short to express. However, bringing that to life adds the remaining 95% of code. Compatability with standards, browsers, optimizing performance, GUI, low level hardware stuff, etc. All of that is powered by brittle, complex, opaque software. I like what Bret said in an interview last year \u2026 \u201cthe real world simulates itself\u201d, so the code for your unique logic / idea is very simple and minimal and can be understood and iterated on quickly. A lot of it can fit in your short-term memory (Alan Kay talks about getting things down to \u201ca few pages of code\u201d, which was the threshold under which even 6 year olds can program)."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Anyway, it seems like really good teaching is hard. I was really impressed with how "
                            },
                            {
                                "type": "link",
                                "url": "http://vuemastery.com",
                                "text": "vuemastery.com"
                            },
                            {
                                "type": "text",
                                "text": " teaches Vue"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "After 5 years in this trying to teach aliens (what I call people you can\u2019t see "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            },
                            {
                                "type": "text",
                                "text": ") technical things, I\u2019ve come to appreciate that \u201clearning styles\u201d, \u201cteaching well\u201d, \u201cmotivating students\u201d, and all other phrases like this are MOSTLY BS (not completely, but mostly). This is a very strong statement, but in my opinion \u2026 it fundamentally comes down to teacher-learner fit (or content-learner fit). If you\u2019re highly motivated and have a clear goal, and the learning content or teacher is teaching towards those goals, then everything is great! The student will say things like \u201cI like how this teacher teaches\u201d or \u201cthis meets my learning style\u201d \u2026 but harmony in learning + teaching goals I think explains MOST of the stories people say. This is maybe a hot take, but just my perspective "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            },
                            {
                                "type": "text",
                                "text": " There\u2019s still room for innovation though on the edges (people who are semi motivated but need to have a few aha moments delivered via fun videos or interactive simulations before they make a bigger learning commitment, etc)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584643351.400400",
        "parent_user_id": "UN06QADNV",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D",
                    "UD6EXQVM0"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "4dd59a98-6f07-4246-a4dd-f3e52cfe9cc1",
        "type": "message",
        "text": "&gt; <http://Dataquest.io|Dataquest.io> does seem to be built on some very similar ideas. Are you aware of any platforms that take a similar approach for non-data science fields in technology?\n<@UN06QADNV> oh yeah there\u2019s a few.\n\n\u2022 <http://Codecademy.com|Codecademy.com>: Python, JS, other stuff (including data science)\n\u2022 <http://Katacoda.com|Katacoda.com>: for devops-y stuff, purchased by O\u2019Reilley.\n\u2022 <http://Codeschool.co|Codeschool> was bought by Pluralsight but mostly hasn\u2019t gone anywhere (PS has struggled to switch away from video based learning)\n\u2022 <http://Datacamp.com|Datacamp.com>: data science (Just throwing it in here)\n\u2022 There\u2019s a few smaller niche sites that teach specific things, like <https://www.sqlhabit.com/> and <http://sqlbolt.com|sqlbolt.com> \u2026 both for SQL",
        "user": "UAJKEBGP8",
        "ts": "1584714285.431700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "SQL Habit \u2013 practical SQL course for Product Managers, Marketers, Designers etc",
                "title_link": "https://www.sqlhabit.com/",
                "text": "Learn SQL by following fictional startup story, solving business challenges and working with real data.",
                "fallback": "SQL Habit \u2013 practical SQL course for Product Managers, Marketers, Designers etc",
                "image_url": "https://www.sqlhabit.com/sqlhabit_practical_sql_course.jpg",
                "from_url": "https://www.sqlhabit.com/",
                "image_width": 476,
                "image_height": 250,
                "image_bytes": 213061,
                "service_name": "sqlhabit.com",
                "id": 1,
                "original_url": "https://www.sqlhabit.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z+d",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http://Dataquest.io",
                                "text": "Dataquest.io"
                            },
                            {
                                "type": "text",
                                "text": " does seem to be built on some very similar ideas. Are you aware of any platforms that take a similar approach for non-data science fields in technology?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UN06QADNV"
                            },
                            {
                                "type": "text",
                                "text": " oh yeah there\u2019s a few.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "http://Codecademy.com",
                                        "text": "Codecademy.com"
                                    },
                                    {
                                        "type": "text",
                                        "text": ": Python, JS, other stuff (including data science)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "http://Katacoda.com",
                                        "text": "Katacoda.com"
                                    },
                                    {
                                        "type": "text",
                                        "text": ": for devops-y stuff, purchased by O\u2019Reilley."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "http://Codeschool.co",
                                        "text": "Codeschool"
                                    },
                                    {
                                        "type": "text",
                                        "text": " was bought by Pluralsight but mostly hasn\u2019t gone anywhere (PS has struggled to switch away from video based learning)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "http://Datacamp.com",
                                        "text": "Datacamp.com"
                                    },
                                    {
                                        "type": "text",
                                        "text": ": data science (Just throwing it in here)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "There\u2019s a few smaller niche sites that teach specific things, like "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://www.sqlhabit.com/"
                                    },
                                    {
                                        "type": "text",
                                        "text": " and "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http://sqlbolt.com",
                                        "text": "sqlbolt.com"
                                    },
                                    {
                                        "type": "text",
                                        "text": " \u2026 both for SQL"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1584643351.400400",
        "parent_user_id": "UN06QADNV"
    },
    {
        "client_msg_id": "af114a4b-420c-4771-96c9-47c1e82a0e1e",
        "type": "message",
        "text": "<@UN06QADNV> building a Udemy / Datacamp / Codecademy competitor is interesting but ultimately I\u2019ve come to appreciate the following:\n\n\u2022 Teaching consumers is effing hard. If you care about learning outcomes, the best thing is to add on a lot of things that students\u2019 motivational investment. This is what coding bootcamps do .. they make you pay a lot of money (weeds out people who aren\u2019t serious), they make you take a basic coding interview exam (weeds out people who aren\u2019t serious), they\u2019re often in person (shared struggle with other students), etc. They use the techniques universities use (old teaching methods with LOTS of carrots / sticks to \u201cmotivate\u201d people). \n\u2022 If you instead care about being \u201cinnovative\u201d in how you teach, the challenge here is that \u2026 customers don\u2019t REALLY care about learning in some fancy new way, they just have a specific job to be done (<https://hbr.org/2016/09/know-your-customers-jobs-to-be-done>) that\u2019s either \u201cI want a pay raise / move up in seniority in my existing job\u201d or \u201cI want to switch into a new career\u201d. There\u2019s a small sliver that wants to \u201clearn for fun / curiosity\u201d, but that\u2019s competitive as F (competing for the job of fun has an endless sea of competition, including Twitch, Youtube, and video games / tv shows). Soooo if you want to build some cool whizbang learning environment \u2026 you still have to answer the question of \u201cwhat job is being served / solved better? and for whom?\u201c. You want to teach with only interactive explanations? Cool! Which learners meet their goals better b/c of it? And btw creating interactive simulations is time consuming and expensive, which means your \u2018learning rate\u2019 from your customers is a lot slower which means your competitors that just make lots of videos \u2026 may end up solving the job in a good enough way for most students at a lower price. \n\u2022 Hopefully that didn\u2019t come off too much like a rant :stuck_out_tongue: I guess I spent 5 years here in this space and I felt like not enough rigor was applied to thinking about the customers\u2019 actual desires, and instead more time was spent on feel-good things like \u201chands on learning\u201d (which is still cool and interesting, but insufficient!)",
        "user": "UAJKEBGP8",
        "ts": "1584714702.432000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Harvard Business Review",
                "title": "Know Your Customers\u2019 \u201cJobs to Be Done\u201d",
                "title_link": "https://hbr.org/2016/09/know-your-customers-jobs-to-be-done",
                "text": "Is innovation inherently a hit-or-miss endeavor? Not if you understand why customers make the choices they do.",
                "fallback": "Harvard Business Review: Know Your Customers\u2019 \u201cJobs to Be Done\u201d",
                "image_url": "https://hbr.org/resources/images/article_assets/2016/07/R1609D_CAM.jpg",
                "ts": 1472702400,
                "from_url": "https://hbr.org/2016/09/know-your-customers-jobs-to-be-done",
                "image_width": 532,
                "image_height": 250,
                "image_bytes": 445584,
                "service_icon": "https://hbr.org/resources/images/favicon.ico",
                "id": 1,
                "original_url": "https://hbr.org/2016/09/know-your-customers-jobs-to-be-done"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8=cV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UN06QADNV"
                            },
                            {
                                "type": "text",
                                "text": " building a Udemy / Datacamp / Codecademy competitor is interesting but ultimately I\u2019ve come to appreciate the following:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Teaching consumers is effing hard. If you care about learning outcomes, the best thing is to add on a lot of things that students\u2019 motivational investment. This is what coding bootcamps do .. they make you pay a lot of money (weeds out people who aren\u2019t serious), they make you take a basic coding interview exam (weeds out people who aren\u2019t serious), they\u2019re often in person (shared struggle with other students), etc. They use the techniques universities use (old teaching methods with LOTS of carrots / sticks to \u201cmotivate\u201d people). "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "If you instead care about being \u201cinnovative\u201d in how you teach, the challenge here is that \u2026 customers don\u2019t REALLY care about learning in some fancy new way, they just have a specific job to be done ("
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://hbr.org/2016/09/know-your-customers-jobs-to-be-done"
                                    },
                                    {
                                        "type": "text",
                                        "text": ") that\u2019s either \u201cI want a pay raise / move up in seniority in my existing job\u201d or \u201cI want to switch into a new career\u201d. There\u2019s a small sliver that wants to \u201clearn for fun / curiosity\u201d, but that\u2019s competitive as F (competing for the job of fun has an endless sea of competition, including Twitch, Youtube, and video games / tv shows). Soooo if you want to build some cool whizbang learning environment \u2026 you still have to answer the question of \u201cwhat job is being served / solved better? and for whom?\u201c. You want to teach with only interactive explanations? Cool! Which learners meet their goals better b/c of it? And btw creating interactive simulations is time consuming and expensive, which means your \u2018learning rate\u2019 from your customers is a lot slower which means your competitors that just make lots of videos \u2026 may end up solving the job in a good enough way for most students at a lower price. "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Hopefully that didn\u2019t come off too much like a rant "
                                    },
                                    {
                                        "type": "emoji",
                                        "name": "stuck_out_tongue"
                                    },
                                    {
                                        "type": "text",
                                        "text": " I guess I spent 5 years here in this space and I felt like not enough rigor was applied to thinking about the customers\u2019 actual desires, and instead more time was spent on feel-good things like \u201chands on learning\u201d (which is still cool and interesting, but insufficient!)"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1584643351.400400",
        "parent_user_id": "UN06QADNV",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD6EXQVM0"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9a5a5452-dbb6-4d32-9e58-d1ff78737f91",
        "type": "message",
        "text": "<@UN06QADNV> anyway I can talk about this stuff for ages :stuck_out_tongue: I\u2019m still a big fan of creating rich, learning environments for learning to code (even if we\u2019re just teaching people current stuff like Python and JS). But I actually am thinking now that I\u2019d rather work on the infrastructure side of this. Basically make it easy for universities and companies to create their OWN courses that are highly tailored for their needs, but without being devops experts and needing a 10 person software eng team to stand this up!\n\nThat _seems_ like what Gitpod is doing a little? But Gitpod and <http://Repl.it|Repl.it> both are focused on developers instead I think?\n\nEDIT: looks like there\u2019s at least one startup in this space: <https://www.codesters.com/?lang=en>\n\nEDIT2: <https://www.codio.com/>",
        "user": "UAJKEBGP8",
        "ts": "1584714781.432300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAJKEBGP8",
            "ts": "1584715118.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4+N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UN06QADNV"
                            },
                            {
                                "type": "text",
                                "text": " anyway I can talk about this stuff for ages "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            },
                            {
                                "type": "text",
                                "text": " I\u2019m still a big fan of creating rich, learning environments for learning to code (even if we\u2019re just teaching people current stuff like Python and JS). But I actually am thinking now that I\u2019d rather work on the infrastructure side of this. Basically make it easy for universities and companies to create their OWN courses that are highly tailored for their needs, but without being devops experts and needing a 10 person software eng team to stand this up!\n\nThat "
                            },
                            {
                                "type": "text",
                                "text": "seems",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " like what Gitpod is doing a little? But Gitpod and Repl.it both are focused on developers instead I think?\n\nEDIT: looks like there\u2019s at least one startup in this space: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.codesters.com/?lang=en"
                            },
                            {
                                "type": "text",
                                "text": "\n\nEDIT2: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.codio.com/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584643351.400400",
        "parent_user_id": "UN06QADNV",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD6EXQVM0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e5769551-a3ea-4a2b-af38-de0797d68cf4",
        "type": "message",
        "text": "if y\u2019all wanna hop on a Google hangout / zoom to chat more, I\u2019m always down :slightly_smiling_face:",
        "user": "UAJKEBGP8",
        "ts": "1584714802.432500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xH886",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if y\u2019all wanna hop on a Google hangout / zoom to chat more, I\u2019m always down "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584643351.400400",
        "parent_user_id": "UN06QADNV"
    },
    {
        "client_msg_id": "19bbf4d8-676b-41c9-9cd6-f3f0703231e0",
        "type": "message",
        "text": "<@UN06QADNV> Re: the summary of your goals, the way I\u2019ve thought about such a system in the past is a directed graph with two types of alternating nodes: concepts and explanations, where an explanation is for one concept and may rely on many existing concepts to explain the new concept. Similarly, there may be many explanations for the same concept (each relying on different precursor concepts). I think one hard part of this is that concepts may disagree with each other, and explanations may be more or less useful to different people (different sets of things they already understand/believe, and different styles of thinking). But it still seems (to me) like the \u201ccorrect\u201d way to organize educational information.",
        "user": "UKDM3GLAJ",
        "ts": "1584716328.433000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x96yF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UN06QADNV"
                            },
                            {
                                "type": "text",
                                "text": " Re: the summary of your goals, the way I\u2019ve thought about such a system in the past is a directed graph with two types of alternating nodes: concepts and explanations, where an explanation is for one concept and may rely on many existing concepts to explain the new concept. Similarly, there may be many explanations for the same concept (each relying on different precursor concepts). I think one hard part of this is that concepts may disagree with each other, and explanations may be more or less useful to different people (different sets of things they already understand/believe, and different styles of thinking). But it still seems (to me) like the \u201ccorrect\u201d way to organize educational information."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584643351.400400",
        "parent_user_id": "UN06QADNV",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD6EXQVM0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "919f8333-3689-4e8b-968c-6af6e0ce1c49",
        "type": "message",
        "text": "<https://malleable.systems/catalog/>\n&gt; This catalog highlights projects, people, groups, research, discussions, and other initiatives in the malleable software community. It is our hope that bringing more awareness to these efforts will lead to greater collaboration and better systems for us all that support the\u00a0<https://malleable.systems/mission/|essential principles>\u00a0of malleability.",
        "user": "UF1ATC4RF",
        "ts": "1584718681.433400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UF1ATC4RF",
            "ts": "1584718701.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "62+N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://malleable.systems/catalog/"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This catalog highlights projects, people, groups, research, discussions, and other initiatives in the malleable software community. It is our hope that bringing more awareness to these efforts will lead to greater collaboration and better systems for us all that support the\u00a0"
                            },
                            {
                                "type": "link",
                                "url": "https://malleable.systems/mission/",
                                "text": "essential principles"
                            },
                            {
                                "type": "text",
                                "text": "\u00a0of malleability."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U8A5MS6R1",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "829c7eea-779b-49a8-bc49-94a5b0375240",
        "type": "message",
        "text": "First time I\u2019ve heard of \u201cMalleable Systems\u201d. From what I could gather it refers to systems that permit end user programmability / heavy customisability",
        "user": "UF1ATC4RF",
        "ts": "1584718837.435500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VJ0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "First time I\u2019ve heard of \u201cMalleable Systems\u201d. From what I could gather it refers to systems that permit end user programmability / heavy customisability"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584718837.435500",
        "reply_count": 14,
        "reply_users_count": 9,
        "latest_reply": "1584814759.485300",
        "reply_users": [
            "UJ6LDMMN0",
            "UML4ZEKDK",
            "UF1ATC4RF",
            "UEQ6M68H0",
            "U8A5MS6R1",
            "UCUSW7WVD",
            "UKDM3GLAJ",
            "UAVCC2X70",
            "UJN1TAYEQ"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "e3839bf7-771e-4739-8078-ea94c76ec07b",
        "type": "message",
        "text": "It seems that this is an initiative launched by <@UML4ZEKDK> who contributes to this slack every now and then.",
        "user": "UJ6LDMMN0",
        "ts": "1584722443.435800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FBK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It seems that this is an initiative launched by "
                            },
                            {
                                "type": "user",
                                "user_id": "UML4ZEKDK"
                            },
                            {
                                "type": "text",
                                "text": " who contributes to this slack every now and then."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584718837.435500",
        "parent_user_id": "UF1ATC4RF"
    },
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "Thanks for posting! :smile: Yes, this is a new community blog and project library I'm organising. As the home page mentions (<https://malleable.systems>), it's about resetting the balance of power so that users are much more in control of software. There's a large spectrum of work under this umbrella: from making parts of existing programs customisable by users through to systems where anything can be redefined by anyone. I'm hoping this new community site will get more people excited and interested in this.\n\nI'd love to have any feedback (positive, negative, anything) on this. I'm also looking for other people to contribute posts and projects, so please reach out if anyone's interested! :smile:",
        "user": "UML4ZEKDK",
        "ts": "1584723107.436000",
        "thread_ts": "1584718837.435500",
        "root": {
            "client_msg_id": "829c7eea-779b-49a8-bc49-94a5b0375240",
            "type": "message",
            "text": "First time I\u2019ve heard of \u201cMalleable Systems\u201d. From what I could gather it refers to systems that permit end user programmability / heavy customisability",
            "user": "UF1ATC4RF",
            "ts": "1584718837.435500",
            "team": "T5TCAFTA9",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "VJ0",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "First time I\u2019ve heard of \u201cMalleable Systems\u201d. From what I could gather it refers to systems that permit end user programmability / heavy customisability"
                                }
                            ]
                        }
                    ]
                }
            ],
            "thread_ts": "1584718837.435500",
            "reply_count": 14,
            "reply_users_count": 9,
            "latest_reply": "1584814759.485300",
            "reply_users": [
                "UJ6LDMMN0",
                "UML4ZEKDK",
                "UF1ATC4RF",
                "UEQ6M68H0",
                "U8A5MS6R1",
                "UCUSW7WVD",
                "UKDM3GLAJ",
                "UAVCC2X70",
                "UJN1TAYEQ"
            ],
            "subscribed": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "29G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for posting! "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            },
                            {
                                "type": "text",
                                "text": " Yes, this is a new community blog and project library I'm organising. As the home page mentions ("
                            },
                            {
                                "type": "link",
                                "url": "https://malleable.systems"
                            },
                            {
                                "type": "text",
                                "text": "), it's about resetting the balance of power so that users are much more in control of software. There's a large spectrum of work under this umbrella: from making parts of existing programs customisable by users through to systems where anything can be redefined by anyone. I'm hoping this new community site will get more people excited and interested in this.\n\nI'd love to have any feedback (positive, negative, anything) on this. I'm also looking for other people to contribute posts and projects, so please reach out if anyone's interested! "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "c9b1f291-c28a-4e78-ba52-5fb140e761bb",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UMWF81HTP"
                ],
                "count": 2
            }
        ]
    },
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "<@UML4ZEKDK> - you might find some interesting links here which you can add to malleable systems\n<https://www.notion.so/Building-Blocks-For-The-Future-Of-Computing-7f74066de66749d59939a91ab13ec960>",
        "user": "UF1ATC4RF",
        "ts": "1584723468.436600",
        "thread_ts": "1584718837.435500",
        "root": {
            "client_msg_id": "829c7eea-779b-49a8-bc49-94a5b0375240",
            "type": "message",
            "text": "First time I\u2019ve heard of \u201cMalleable Systems\u201d. From what I could gather it refers to systems that permit end user programmability / heavy customisability",
            "user": "UF1ATC4RF",
            "ts": "1584718837.435500",
            "team": "T5TCAFTA9",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "VJ0",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "First time I\u2019ve heard of \u201cMalleable Systems\u201d. From what I could gather it refers to systems that permit end user programmability / heavy customisability"
                                }
                            ]
                        }
                    ]
                }
            ],
            "thread_ts": "1584718837.435500",
            "reply_count": 14,
            "reply_users_count": 9,
            "latest_reply": "1584814759.485300",
            "reply_users": [
                "UJ6LDMMN0",
                "UML4ZEKDK",
                "UF1ATC4RF",
                "UEQ6M68H0",
                "U8A5MS6R1",
                "UCUSW7WVD",
                "UKDM3GLAJ",
                "UAVCC2X70",
                "UJN1TAYEQ"
            ],
            "subscribed": false
        },
        "attachments": [
            {
                "service_name": "Yoshiki's Workspace on Notion",
                "title": "Building Blocks For The Future Of Computing",
                "title_link": "https://www.notion.so/Building-Blocks-For-The-Future-Of-Computing-7f74066de66749d59939a91ab13ec960",
                "text": "The purpose of this document is to catalog projects that rethink how we think with computers.",
                "fallback": "Yoshiki's Workspace on Notion: Building Blocks For The Future Of Computing",
                "image_url": "https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F3d695b93-af63-4d23-986c-68972849d711%2Fwe_shape_our_tools.png?table=block&id=efe07ca6-0a12-4dc4-a264-bb92c85a1720&width=2050&cache=v2",
                "from_url": "https://www.notion.so/Building-Blocks-For-The-Future-Of-Computing-7f74066de66749d59939a91ab13ec960",
                "image_width": 709,
                "image_height": 168,
                "image_bytes": 6420,
                "id": 1,
                "original_url": "https://www.notion.so/Building-Blocks-For-The-Future-Of-Computing-7f74066de66749d59939a91ab13ec960"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QiP7h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UML4ZEKDK"
                            },
                            {
                                "type": "text",
                                "text": " - you might find some interesting links here which you can add to malleable systems\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.notion.so/Building-Blocks-For-The-Future-Of-Computing-7f74066de66749d59939a91ab13ec960"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "826ecafc-4e91-4a8e-a456-4d45ab8c2021"
    },
    {
        "client_msg_id": "568d88ce-0912-469e-9e6e-8e0b05e7792b",
        "type": "message",
        "text": "<@UMWF81HTP>\u2019s project I believe, who\u2019s already listed on your website :slightly_smiling_face:",
        "user": "UF1ATC4RF",
        "ts": "1584723558.437200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B=03",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UMWF81HTP"
                            },
                            {
                                "type": "text",
                                "text": "\u2019s project I believe, who\u2019s already listed on your website "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584718837.435500",
        "parent_user_id": "UF1ATC4RF"
    },
    {
        "client_msg_id": "752df0e1-ad29-4392-af29-b32d4862ab9f",
        "type": "message",
        "text": "Ah, thanks for passing that along, I hadn't seen that one yet. I'll look through it for projects to add. :grin:\n\nYes, <@UMWF81HTP> has a lot of great ideas in this space. Some days, I am tempted to try building each idea he tweets about. :smile:",
        "user": "UML4ZEKDK",
        "ts": "1584727468.437500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0im",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, thanks for passing that along, I hadn't seen that one yet. I'll look through it for projects to add. "
                            },
                            {
                                "type": "emoji",
                                "name": "grin"
                            },
                            {
                                "type": "text",
                                "text": "\n\nYes, "
                            },
                            {
                                "type": "user",
                                "user_id": "UMWF81HTP"
                            },
                            {
                                "type": "text",
                                "text": " has a lot of great ideas in this space. Some days, I am tempted to try building each idea he tweets about. "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584718837.435500",
        "parent_user_id": "UF1ATC4RF",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UMWF81HTP"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "24a9efe7-8050-41c1-90c7-202c414084b8",
        "type": "message",
        "text": "Malleable software is a pipedream. Sure, in games there will be user generated content; using the nice tools provided various games allow level creation. Some games are super creative, like Super Mario Maker. But that doesn't mean you can change the underlying game in any way. It is far too complex and would be mostly dangerous for users to modify. It would also break their copyright control on which their economic foundation rests. In the other side of the world, open source software is typically so large and complex that only a few people can modify it.\n\nThe implications in terms of liability for mistakes is a big issue. Open source freeware has nobody to sue, and since it is free, you can't complain too much.\n\nSoftware is so intrinsically complex, that unless the complexity is drastically reduced, users are not going to have any control whatsoever, except perhaps for picking a few colors. Reducing complexity would do more to enable malleability than trying to enable more access. If it is spaghetti down there, what is the point of the trap-door letting you access it?",
        "user": "UEQ6M68H0",
        "ts": "1584740354.438900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Dbo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Malleable software is a pipedream. Sure, in games there will be user generated content; using the nice tools provided various games allow level creation. Some games are super creative, like Super Mario Maker. But that doesn't mean you can change the underlying game in any way. It is far too complex and would be mostly dangerous for users to modify. It would also break their copyright control on which their economic foundation rests. In the other side of the world, open source software is typically so large and complex that only a few people can modify it.\n\nThe implications in terms of liability for mistakes is a big issue. Open source freeware has nobody to sue, and since it is free, you can't complain too much.\n\nSoftware is so intrinsically complex, that unless the complexity is drastically reduced, users are not going to have any control whatsoever, except perhaps for picking a few colors. Reducing complexity would do more to enable malleability than trying to enable more access. If it is spaghetti down there, what is the point of the trap-door letting you access it?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584718837.435500",
        "parent_user_id": "UF1ATC4RF",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "ULM3U6275",
                    "UA14TGLTC"
                ],
                "count": 2
            },
            {
                "name": "-1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "face_with_raised_eyebrow",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UUVSSA60K"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "46392899-5462-4a04-918b-b1faf475aa65",
        "type": "message",
        "text": "Yeah - the command line is a just a 'special kind of UI'. This position can open up quite a bit of fluidity in how powerful command interfaces may be integrated with other visual models. The Unix legacy of teletype machines informs much of the primitive stdio model (streams of dead text), which is quite unfortunate on modern machines IMO.",
        "user": "U8A5MS6R1",
        "ts": "1584741621.439300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1584741670.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ffZS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah - the command line is a just a 'special kind of UI'. This position can open up quite a bit of fluidity in how powerful command interfaces may be integrated with other visual models. The Unix legacy of teletype machines informs much of the primitive stdio model (streams of dead text), which is quite unfortunate on modern machines IMO."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584544384.396000",
        "parent_user_id": "USH01JEDQ"
    },
    {
        "client_msg_id": "0c51eb92-20ed-49cd-9c62-2c44dee4c516",
        "type": "message",
        "text": "I've been researching formal logic and came across Begriffsschrift, a book by Gottlob Frege which details what I would consider the first programming language in history. It was published in 1879 yet many of the ideas outlined in its premise remind me of what this community is trying to accomplish. The actual notation that this book describes is not too relevant but I would encourage you to read the four page premise that Frege wrote. Note that this comes after the translator's note, which is the first thing in the PDF. <https://www.informationphilosopher.com/solutions/philosophers/frege/Frege_Begriffsschrift.pdf|PDF is here>.",
        "user": "UP54KN8TX",
        "ts": "1584743125.448400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s+rog",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been researching formal logic and came across Begriffsschrift, a book by Gottlob Frege which details what I would consider the first programming language in history. It was published in 1879 yet many of the ideas outlined in its premise remind me of what this community is trying to accomplish. The actual notation that this book describes is not too relevant but I would encourage you to read the four page premise that Frege wrote. Note that this comes after the translator's note, which is the first thing in the PDF. "
                            },
                            {
                                "type": "link",
                                "url": "https://www.informationphilosopher.com/solutions/philosophers/frege/Frege_Begriffsschrift.pdf",
                                "text": "PDF is here"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584743125.448400",
        "reply_count": 9,
        "reply_users_count": 3,
        "latest_reply": "1584824128.486500",
        "reply_users": [
            "UJN1TAYEQ",
            "UP54KN8TX",
            "UFPRPSA4S"
        ],
        "subscribed": false
    },
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "Well, malleable software is definitely a very different world than the one we live in today and requires new tools, different approaches for wiring things together, UI concepts that aren\u2019t in regular use today... a long list of things that are currently missing.\n\nSo, it\u2019s certainty a lot of work that may take many years. Despite the vast amount of work required, in my view we must do it to give people (all people, not just experts) more control over software so it works in ways specific to them.\n\nI don\u2019t want to be trapped in this world of isolated apps. The current ecosystem is not the world of computing for me, so I\u2019m planning to do everything I can to change it.",
        "user": "UML4ZEKDK",
        "ts": "1584744527.457900",
        "thread_ts": "1584718837.435500",
        "root": {
            "client_msg_id": "829c7eea-779b-49a8-bc49-94a5b0375240",
            "type": "message",
            "text": "First time I\u2019ve heard of \u201cMalleable Systems\u201d. From what I could gather it refers to systems that permit end user programmability / heavy customisability",
            "user": "UF1ATC4RF",
            "ts": "1584718837.435500",
            "team": "T5TCAFTA9",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "VJ0",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "First time I\u2019ve heard of \u201cMalleable Systems\u201d. From what I could gather it refers to systems that permit end user programmability / heavy customisability"
                                }
                            ]
                        }
                    ]
                }
            ],
            "thread_ts": "1584718837.435500",
            "reply_count": 14,
            "reply_users_count": 9,
            "latest_reply": "1584814759.485300",
            "reply_users": [
                "UJ6LDMMN0",
                "UML4ZEKDK",
                "UF1ATC4RF",
                "UEQ6M68H0",
                "U8A5MS6R1",
                "UCUSW7WVD",
                "UKDM3GLAJ",
                "UAVCC2X70",
                "UJN1TAYEQ"
            ],
            "subscribed": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CAQoE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well, malleable software is definitely a very different world than the one we live in today and requires new tools, different approaches for wiring things together, UI concepts that aren\u2019t in regular use today... a long list of things that are currently missing.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "So, it\u2019s certainty a lot of work that may take many years. Despite the vast amount of work required, in my view we must do it to give people (all people, not just experts) more control over software so it works in ways specific to them.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "I don\u2019t want to be trapped in this world of isolated apps. The current ecosystem is not the world of computing for me, so I\u2019m planning to do everything I can to change it."
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "8757DD64-2C62-42A1-9DB2-802D41F39B06",
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "U8A5MS6R1",
                    "UAVCC2X70",
                    "UMWF81HTP"
                ],
                "count": 3
            },
            {
                "name": "+1",
                "users": [
                    "UJN1TAYEQ",
                    "UUVSSA60K",
                    "UD6EXQVM0",
                    "UMWF81HTP",
                    "UJ6LDMMN0"
                ],
                "count": 5
            }
        ]
    },
    {
        "client_msg_id": "fd891cae-3be5-4c56-b44a-586a3febe527",
        "type": "message",
        "text": "Mel Conway pointed out (and others have I assume) that writing, arithmetic and calendar were once the \"sole property of a priest class\". Sure we're not going to have the masses write compilers, low level drivers for spaceships or designing billion transitor chips, but they sure could be doing a lot more than reading/writing emails and clicking play buttons. <https://twitter.com/conways_law/status/1039584547178987520>",
        "user": "U8A5MS6R1",
        "ts": "1584744928.458300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/conways_law|@conways_law>: 2/2\nb. How is understanding this ubiquitous technology going to become so accessible to everybody that it will be taught in primary school? (Along with arithmetic, writing, &amp; calendar, also once the sole property of a priest class. No the answer is not teaching every kid to code)",
                "ts": 1536691245,
                "author_name": "Mel Conway",
                "author_link": "https://twitter.com/conways_law/status/1039584547178987520",
                "author_icon": "https://pbs.twimg.com/profile_images/2649916905/a47e31ae3c5712e3feaa5c6b445c3744_normal.jpeg",
                "author_subname": "@conways_law",
                "text": "2/2\nb. How is understanding this ubiquitous technology going to become so accessible to everybody that it will be taught in primary school? (Along with arithmetic, writing, &amp; calendar, also once the sole property of a priest class. No the answer is not teaching every kid to code)",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/conways_law/status/1039584547178987520",
                "id": 1,
                "original_url": "https://twitter.com/conways_law/status/1039584547178987520",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z3f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Mel Conway pointed out (and others have I assume) that writing, arithmetic and calendar were once the \"sole property of a priest class\". Sure we're not going to have the masses write compilers, low level drivers for spaceships or designing billion transitor chips, but they sure could be doing a lot more than reading/writing emails and clicking play buttons. "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/conways_law/status/1039584547178987520"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584718837.435500",
        "parent_user_id": "UF1ATC4RF",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UML4ZEKDK",
                    "UA14TGLTC",
                    "UMWF81HTP"
                ],
                "count": 3
            },
            {
                "name": "heart",
                "users": [
                    "UML4ZEKDK",
                    "UCUSW7WVD",
                    "UAVCC2X70"
                ],
                "count": 3
            }
        ]
    }
]