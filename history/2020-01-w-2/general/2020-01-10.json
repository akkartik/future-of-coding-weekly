[
    {
        "client_msg_id": "52d63bf1-b1fb-401f-a3b5-83e1c2f190e5",
        "type": "message",
        "text": "<http://symbolflux.com/luciditystory.html>\n&gt; Lucidity is a new way of understanding what programs are doing as they execute.\n&gt; I've been working on it off and on since 2014, but it's looking like I won't be able to continue. So, I'm sharing what I have and telling the story of the project's origins.\n_[edit] Author:_ <https://twitter.com/Westoncb>\n_I realize this might be misread so adding author link_",
        "user": "U8A5MS6R1",
        "ts": "1578615869.087300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1578617614.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wgc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http://symbolflux.com/luciditystory.html"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lucidity is a new way of understanding what programs are doing as they execute.\nI've been working on it off and on since 2014, but it's looking like I won't be able to continue. So, I'm sharing what I have and telling the story of the project's origins."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[edit] Author: ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/Westoncb"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "I realize this might be misread so adding author link",
                                "style": {
                                    "italic": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578615869.087300",
        "reply_count": 4,
        "reply_users_count": 3,
        "latest_reply": "1578680533.104200",
        "reply_users": [
            "U8A5MS6R1",
            "UEQ6M68H0",
            "UC2A2ARPT"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD31LGQKB",
                    "UC2A2ARPT",
                    "ULM3U6275",
                    "UJ6LDMMN0"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "81467718-cb4b-46c1-8087-c5b3f1e798a8",
        "type": "message",
        "text": "I liked this metaphor in the write-up:\n&gt;  As a metaphor for ordinary programming, imagine a setup where two people work together to build a castle out of legos. Jill comes up with instructions for how to assemble it, Jack follows the instructions in a separate room with no windows. So Jill hands off the instructions, then after a while Jack returns with the lego creation that resulted from following them.",
        "user": "U8A5MS6R1",
        "ts": "1578617651.088200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1578847516.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XR9lj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I liked this metaphor in the write-up:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " As a metaphor for ordinary programming, imagine a setup where two people work together to build a castle out of legos. Jill comes up with instructions for how to assemble it, Jack follows the instructions in a separate room with no windows. So Jill hands off the instructions, then after a while Jack returns with the lego creation that resulted from following them."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578615869.087300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "b3586904-00f9-4c2f-a240-17c098553ecd",
        "type": "message",
        "text": "on HN: <https://news.ycombinator.com/item?id=22005495>",
        "user": "U8A5MS6R1",
        "ts": "1578617986.090100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZMYJt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "on HN: "
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=22005495"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578615869.087300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "d57269d2-d06d-41dc-a152-22ecf8c5118d",
        "type": "message",
        "text": "Re: History of spreadsheets -  \"Founders at Work: Stories of Startups' Early Days\"  by Jessica Livingston - has a chapter on Visicalc and one on Lotus 123.  Both are page turners.\n\nRe: Dan Bricklin - He has a github account with an opensource JavaScript spreadsheet -  Audrey used it to build a google style opensource spreadsheet.   <https://github.com/audreyt/ethercalc>",
        "user": "UP6G25H35",
        "ts": "1578636346.095000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "19d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Re: History of spreadsheets -  \"Founders at Work: Stories of Startups' Early Days\"  by Jessica Livingston - has a chapter on Visicalc and one on Lotus 123.  Both are page turners.\n\nRe: Dan Bricklin - He has a github account with an opensource JavaScript spreadsheet -  Audrey used it to build a google style opensource spreadsheet.   "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/audreyt/ethercalc"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "7626ee4a-4cd4-4df1-a785-c9b43c2a4923",
        "type": "message",
        "text": "<@URMEM88JG> I do like CodeCombat, is CodeCombat looking for staff?",
        "user": "UP6G25H35",
        "ts": "1578639799.095200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IFgbu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "URMEM88JG"
                            },
                            {
                                "type": "text",
                                "text": " I do like CodeCombat, is CodeCombat looking for staff?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578383938.028900",
        "parent_user_id": "UP6G25H35"
    },
    {
        "client_msg_id": "fa38ee63-e543-499f-9b4f-50b4579cde9d",
        "type": "message",
        "text": "Lucidity is a great piece of work, he tackles visualization of more complex structures.",
        "user": "UEQ6M68H0",
        "ts": "1578644766.095400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lH+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lucidity is a great piece of work, he tackles visualization of more complex structures."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578615869.087300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "b90e6598-a859-4756-b381-43fe0647c4b2",
        "type": "message",
        "text": "Joel dismisses Lotus Improv as an overly complex tool. And he uses its lack of market success as a measure of its intrinsic quality. Well, when you are just shipping your product and your CEO Steve Jobs gets re-hired at Apple, and the NextStep machine is scuttled, which happens to be the only machine your software will run on, that creates an interesting marketing problem. Do you wait years for Jobs to blend in his NextStep technology, creating OSX which was utter crap for several versions?  The true merits or weaknesses of the Improv product never got to be experienced by any appreciable number of users. There is a very expensive spreadsheet type of product that allows you to share generic formulas, which was one of the features of Improv, so some of the key concepts do exist out there. But never judge quality by volume of sales. Faberge didn't make very many eggs, but they are still admired greatly.\n\nAnd i disagree that Excel is some paragon of virtue. It is a very powerful product, but i find it very clumsy the way they have poured in so much function and hidden lots of things. Although the MS Wizard approach does work for dumb users (of which there are many), in the creative software area, MS has never had a successful product that I can think of. They have tried over and over to win desktop publishing, or painting software, and they fail because Wizards presuppose a known goal, and creative work is often exploratory. Having made very successful kids software like Flying Colors, all you need to do with a kid is show them the basics and they run with it into directions you don't expect. Minecraft is an example of a very successful creative product, arguably the most successful creative toy ever made. I am sure the author of Minecraft never imagined how far people would take that product.",
        "user": "UEQ6M68H0",
        "ts": "1578645718.095600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1578645831.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XRp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Joel dismisses Lotus Improv as an overly complex tool. And he uses its lack of market success as a measure of its intrinsic quality. Well, when you are just shipping your product and your CEO Steve Jobs gets re-hired at Apple, and the NextStep machine is scuttled, which happens to be the only machine your software will run on, that creates an interesting marketing problem. Do you wait years for Jobs to blend in his NextStep technology, creating OSX which was utter crap for several versions?  The true merits or weaknesses of the Improv product never got to be experienced by any appreciable number of users. There is a very expensive spreadsheet type of product that allows you to share generic formulas, which was one of the features of Improv, so some of the key concepts do exist out there. But never judge quality by volume of sales. Faberge didn't make very many eggs, but they are still admired greatly.\n\nAnd i disagree that Excel is some paragon of virtue. It is a very powerful product, but i find it very clumsy the way they have poured in so much function and hidden lots of things. Although the MS Wizard approach does work for dumb users (of which there are many), in the creative software area, MS has never had a successful product that I can think of. They have tried over and over to win desktop publishing, or painting software, and they fail because Wizards presuppose a known goal, and creative work is often exploratory. Having made very successful kids software like Flying Colors, all you need to do with a kid is show them the basics and they run with it into directions you don't expect. Minecraft is an example of a very successful creative product, arguably the most successful creative toy ever made. I am sure the author of Minecraft never imagined how far people would take that product."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578521118.066600",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "22c5dc3c-b396-4ec5-b488-8cce906bac77",
        "type": "message",
        "text": "I'm trying the Product Hunt thing to launch the Newsletter, go and check it out: <https://www.producthunt.com/posts/future-of-coding-weekly>",
        "user": "UBN9AFS0N",
        "ts": "1578648136.096400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Product Hunt",
                "title": "Future of Coding Weekly  - Weekly Digest of resources from the Future of Coding | Product Hunt",
                "title_link": "https://www.producthunt.com/posts/future-of-coding-weekly",
                "text": "A Weekly Digest of interesting resources shared in/around the Future of Coding Community at <https://futureofcoding.org/> Learn more here: <https://futureofcoding.org/about>",
                "fallback": "Product Hunt: Future of Coding Weekly  - Weekly Digest of resources from the Future of Coding | Product Hunt",
                "image_url": "https://ph-files.imgix.net/307e69d9-8c8e-4422-8bd8-813a014439eb?auto=format&fit=crop&h=512&w=1024",
                "from_url": "https://www.producthunt.com/posts/future-of-coding-weekly",
                "image_width": 500,
                "image_height": 250,
                "image_bytes": 86451,
                "service_icon": "https://assets.producthunt.com/assets/ph-ios-icon-e1733530a1bfc41080db8161823f1ef262cdbbc933800c0a2a706f70eb9c277a.png",
                "id": 1,
                "original_url": "https://www.producthunt.com/posts/future-of-coding-weekly"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QjrP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm trying the Product Hunt thing to launch the Newsletter, go and check it out: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.producthunt.com/posts/future-of-coding-weekly"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578648136.096400",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1578654584.097300",
        "reply_users": [
            "UPVBV34EL",
            "UFLN9JFRT"
        ],
        "subscribed": true,
        "last_read": "1578654584.097300",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "USJSL2NVB"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0decd58e-fd01-4f33-9dc5-c53c68926977",
        "type": "message",
        "text": "Upvoted :slightly_smiling_face:",
        "user": "UPVBV34EL",
        "ts": "1578651783.096700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CqF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Upvoted "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578648136.096400",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "tada",
                "users": [
                    "UBN9AFS0N"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "770bb6e3-8b31-4a72-b616-97c153589488",
        "type": "message",
        "text": "<https://twitter.com/ocornut/status/1215572213639843840>",
        "user": "UBN9AFS0N",
        "ts": "1578652740.097100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/ocornut|@ocornut>: Modern software dependencies illustrated <https://twitter.com/shachaf/status/1215468796250509312>",
                "ts": 1578649974,
                "author_name": "Omar",
                "author_link": "https://twitter.com/ocornut/status/1215572213639843840",
                "author_icon": "https://pbs.twimg.com/profile_images/622944390600732672/S6g469rf_normal.jpg",
                "author_subname": "@ocornut",
                "text": "Modern software dependencies illustrated <https://twitter.com/shachaf/status/1215468796250509312>",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/ocornut/status/1215572213639843840",
                "id": 1,
                "original_url": "https://twitter.com/ocornut/status/1215572213639843840",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            },
            {
                "fallback": "<https://twitter.com/shachaf|@shachaf>: When you (in Facebook's words) \"Set up a modern web app by running one command\", this is what happens: <https://npm.anvaka.com/#/view/2d/react-scripts>",
                "ts": 1578625318,
                "author_name": "shachaf",
                "author_link": "https://twitter.com/shachaf/status/1215468796250509312",
                "author_icon": "https://pbs.twimg.com/profile_images/1201618403372306433/nJ-IaIu-_normal.jpg",
                "author_subname": "@shachaf",
                "text": "When you (in Facebook's words) \"Set up a modern web app by running one command\", this is what happens: <https://npm.anvaka.com/#/view/2d/react-scripts>",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/shachaf/status/1215468796250509312",
                "indent": true,
                "color": "32BBF3",
                "id": 2,
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4SN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://twitter.com/ocornut/status/1215572213639843840"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "exploding_head",
                "users": [
                    "UHDQ62M4P",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "c2e44526-cdd9-4245-9595-6988339963f7",
        "type": "message",
        "text": "Upvoted",
        "user": "UFLN9JFRT",
        "ts": "1578654584.097300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Glv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Upvoted"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578648136.096400",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1::skin-tone-4",
                "users": [
                    "UBN9AFS0N"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ee850350-96ab-4077-af84-ff28c2630aae",
        "type": "message",
        "text": "really interesting: <http://symbolflux.com/luciditystory.html>",
        "user": "UGLSY9X3J",
        "ts": "1578659439.097900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tg7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "really interesting: "
                            },
                            {
                                "type": "link",
                                "url": "http://symbolflux.com/luciditystory.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578659439.097900",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1578684600.107100",
        "reply_users": [
            "UC2A2ARPT"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U8A5MS6R1",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "d3100cfa-1066-4f61-abc3-d124cf79475e",
        "type": "message",
        "text": "love the detailing of the story: <http://symbolflux.com/luciditystory.html#section-6>",
        "user": "UGLSY9X3J",
        "ts": "1578659467.098200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9Te",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "love the detailing of the story: "
                            },
                            {
                                "type": "link",
                                "url": "http://symbolflux.com/luciditystory.html#section-6"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "a268c912-6c67-40fe-8e4a-17066678c6a3",
        "type": "message",
        "text": "Just wait until you put a breakpoint into the method in the abstract window class that redraws windows\u2026. Nobody would ever do that in Smalltalk\u2026 :flushed:",
        "user": "UK22Z72L8",
        "ts": "1578675377.098400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j9HN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just wait until you put a breakpoint into the method in the abstract window class that redraws windows\u2026. Nobody would ever do that in Smalltalk\u2026 "
                            },
                            {
                                "type": "emoji",
                                "name": "flushed"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6d141702-efe3-4c1b-bdc7-0ca5fd43722c",
        "type": "message",
        "text": "I do think though, that the image-based approach is a great way to learn programming - and it\u2019s easier to think concretely and then level up gradually with abstractions. It\u2019s also good for modelling things - have your interactive model be directly manipulatable - a la the naked objects approach.",
        "user": "UK22Z72L8",
        "ts": "1578675478.098700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "utl/0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I do think though, that the image-based approach is a great way to learn programming - and it\u2019s easier to think concretely and then level up gradually with abstractions. It\u2019s also good for modelling things - have your interactive model be directly manipulatable - a la the naked objects approach."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "3aca161a-9a73-4237-9dce-8a80bf203175",
        "type": "message",
        "text": "I\u2019m trying to track down a Dave Parnas quote - apparently he said something like \u201cYou can\u2019t get from the informal to the formal by formal means.\u201d I think it was in the context of his work \u201cA rational design process: How and Why to fake it\u201d. Does anyone know or have an idea where I could look to find it?",
        "user": "UK22Z72L8",
        "ts": "1578675872.100700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UK22Z72L8",
            "ts": "1578675897.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YOf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019m trying to track down a Dave Parnas quote - apparently he said something like \u201cYou can\u2019t get from the informal to the formal by formal means.\u201d I think it was in the context of his work \u201cA rational design process: How and Why to fake it\u201d. Does anyone know or have an idea where I could look to find it?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578675872.100700",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1578921342.164100",
        "reply_users": [
            "UJN1TAYEQ",
            "UPGGES4M6",
            "UK22Z72L8"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "cc231426-32e6-487a-9355-4d06d432d7da",
        "type": "message",
        "text": "There's a difference between system-in-use and system-under-development. There's a difference between SUD-liveness and the SUD and SIU being the same system. When you have liveness you could just live edit your system in use, but you don't have to. E.g. you could spin up a 'nested smalltalk' and put a breakpoint in that one.",
        "user": "U8A5MS6R1",
        "ts": "1578676649.100900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7UUCk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's a difference between system-in-use and system-under-development. There's a difference between SUD-liveness and the SUD and SIU being the same system. When you have liveness you could just live edit your system in use, but you don't have to. E.g. you could spin up a 'nested smalltalk' and put a breakpoint in that one."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e4e287f9-8315-40cc-a8f5-c74b8ffbfd98",
        "type": "message",
        "text": "Sure, but it's interesting to point out seams where composability breaks down. Smalltalk lets you open any class, and set a breakpoint anywhere in it. Why do some combinations of those actions not work? How many such combinations exist?\n\nThe whole argument of Smalltalk is that you don't need to worry about the distinction between inside and outside, SIU and SUD.\n\nTo me it seems analogous to your point about sort in shell scripts vs C.",
        "user": "UCUSW7WVD",
        "ts": "1578677619.101500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8oTD=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sure, but it's interesting to point out seams where composability breaks down. Smalltalk lets you open any class, and set a breakpoint anywhere in it. Why do some combinations of those actions not work? How many such combinations exist?\n\nThe whole argument of Smalltalk is that you don't need to worry about the distinction between inside and outside, SIU and SUD.\n\nTo me it seems analogous to your point about sort in shell scripts vs C."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "d378a597-5313-4c5a-8ae7-96377a532cc0",
        "type": "message",
        "text": "The quote is attributed to Alan Perlis, but maybe he was quoting someone else. \"One can't proceed from the informal to the formal by formal means.\" From \"Epigrams in Programming\" by Alan Perlis, ACM SIGPLAN Notices, September 1982.",
        "user": "UJN1TAYEQ",
        "ts": "1578677621.101700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Zacq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The quote is attributed to Alan Perlis, but maybe he was quoting someone else. \"One can't proceed from the informal to the formal by formal means.\" From \"Epigrams in Programming\" by Alan Perlis, ACM SIGPLAN Notices, September 1982."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578675872.100700",
        "parent_user_id": "UK22Z72L8"
    },
    {
        "client_msg_id": "ad31f23c-e40e-4dc6-a56f-f4910ad3c998",
        "type": "message",
        "text": "iirc David Mackenzie talks about this in Mechanizing Proof; Perlis felt that mechanized proof proceeded from the informal to the formal by formal means.",
        "user": "UPGGES4M6",
        "ts": "1578677861.102000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lDC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "iirc David Mackenzie talks about this in Mechanizing Proof; Perlis felt that mechanized proof proceeded from the informal to the formal by formal means."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578675872.100700",
        "parent_user_id": "UK22Z72L8"
    },
    {
        "client_msg_id": "e028cf16-f7b6-48a8-ac50-49e7f51bad7e",
        "type": "message",
        "text": "Yes, I see the point in the first paragraph. Don't see the analogy (yet).\n\nPerhaps a slightly better distinction than SIU/SUD is calling these kernel-like parts and non-kernel parts, of the system? I see this similar to how you'd probably use a sandbox when developing a kernel module, even if your kernel allows dynamically reloading kernel modules. Seems like this space needs more exploration - like how do you identify the parts that you *shouldn't* live reload, and how you pin these..\n\nThis reminds me of a nice essay on designing in Erlang (which supports live reloading), which talked about think about Erlang processes as different 'rings', e.g. ring0 is the kernel - most critical processes - and so on. Unfortunately, I can't find it now.",
        "user": "U8A5MS6R1",
        "ts": "1578679645.102200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "38LV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, I see the point in the first paragraph. Don't see the analogy (yet).\n\nPerhaps a slightly better distinction than SIU/SUD is calling these kernel-like parts and non-kernel parts, of the system? I see this similar to how you'd probably use a sandbox when developing a kernel module, even if your kernel allows dynamically reloading kernel modules. Seems like this space needs more exploration - like how do you identify the parts that you "
                            },
                            {
                                "type": "text",
                                "text": "shouldn't",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " live reload, and how you pin these..\n\nThis reminds me of a nice essay on designing in Erlang (which supports live reloading), which talked about think about Erlang processes as different 'rings', e.g. ring0 is the kernel - most critical processes - and so on. Unfortunately, I can't find it now."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "2fc5fa9a-d782-47d2-845a-7b7f73b06630",
        "type": "message",
        "text": "If we want a system that is live editable \"all the way down\", then the situation is more complicated than just SUD vs SIU, or kernel vs user-space. A full system has many layers. If we are live editing the code at layer N, then the SUD and SIU can share layers 0..N-1, but we fork layers N and above. If we are live editing the GPU driver, we need 2 physical GPUs, one connected to the SUD and one connected to the SIU. We can crash the GPU connected to the driver we are live editing without losing our development environment. If we are live editing the window manager, we don't need two GPUs, the SUD and SIU can share the same GPU driver instance. If we are live editing a declarative description of a new window theme, then, as long as the window theme API is \"safe\", we don't need to fork the window system to apply the new theme.",
        "user": "UJN1TAYEQ",
        "ts": "1578679887.102400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9arG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If we want a system that is live editable \"all the way down\", then the situation is more complicated than just SUD vs SIU, or kernel vs user-space. A full system has many layers. If we are live editing the code at layer N, then the SUD and SIU can share layers 0..N-1, but we fork layers N and above. If we are live editing the GPU driver, we need 2 physical GPUs, one connected to the SUD and one connected to the SIU. We can crash the GPU connected to the driver we are live editing without losing our development environment. If we are live editing the window manager, we don't need two GPUs, the SUD and SIU can share the same GPU driver instance. If we are live editing a declarative description of a new window theme, then, as long as the window theme API is \"safe\", we don't need to fork the window system to apply the new theme."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U8A5MS6R1",
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "b40bfc95-6462-4e6d-bb25-157edf0f27c5",
        "type": "message",
        "text": "This is such a cool project. The author seems to have really good taste in animation. There are a lot of subtle details to the animation that help me follow what's happening as the data structures evolve. For instance, the way boxes flash black when they're first added, and how that black fades out quite slowly. It's a balancing act between being being too subtle and missing out on what's happening, and being too overt and causing information overload. This black-fade solution works well whether you're looking right up close or zoomed way out, and strikes a great balance.",
        "user": "UC2A2ARPT",
        "ts": "1578680533.104200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1578684420.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FZ=fS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is such a cool project. The author seems to have really good taste in animation. There are a lot of subtle details to the animation that help me follow what's happening as the data structures evolve. For instance, the way boxes flash black when they're first added, and how that black fades out quite slowly. It's a balancing act between being being too subtle and missing out on what's happening, and being too overt and causing information overload. This black-fade solution works well whether you're looking right up close or zoomed way out, and strikes a great balance."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578615869.087300",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d8d8b641-308f-461a-8e4a-e149888e9386",
        "type": "message",
        "text": "\u201cBut never judge quality by volume of sales\u201d Yup. As Benjamin Graham said: \u201cIn the short run, the market is a voting machine, but in the long run, it is a weighing machine\u201d\n\nWhen people assume the short term has done the weighing, they take every attribute of a successful company or product, and claim it\u2019s success was a direct consequence of that attribute.\n\nIn the 1990s, it was commonly said that design doesn\u2019t matter because Microsoft (with bad design) beat Apple (with good design). Then the iPhone appeared and the industry did 180 degree turn on that opinion. This is one anecdote, but practically every industry opinion has taken turns like this. Having lived through so many of these, I\u2019ve come to the opinion that companies/products are successful not because of every attribute, but *despite* most of them.",
        "user": "ULM3U6275",
        "ts": "1578681940.104500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1578683325.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9gjG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\u201cBut never judge quality by volume of sales\u201d Yup. As Benjamin Graham said: \u201cIn the short run, the market is a voting machine, but in the long run, it is a weighing machine\u201d\n\nWhen people assume the short term has done the weighing, they take every attribute of a successful company or product, and claim it\u2019s success was a direct consequence of that attribute.\n\nIn the 1990s, it was commonly said that design doesn\u2019t matter because Microsoft (with bad design) beat Apple (with good design). Then the iPhone appeared and the industry did 180 degree turn on that opinion. This is one anecdote, but practically every industry opinion has taken turns like this. Having lived through so many of these, I\u2019ve come to the opinion that companies/products are successful not because of every attribute, but "
                            },
                            {
                                "type": "text",
                                "text": "despite",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " most of them."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578521118.066600",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "2639F15E-60C7-4E46-BEE4-1D920B05F3E6",
        "type": "message",
        "text": "Thanks. Very thoughtful comments gave me a lot to think about ",
        "user": "UFLN9JFRT",
        "ts": "1578682312.106100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FOiT=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks. Very thoughtful comments gave me a lot to think about "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578521118.066600",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "839e4fe9-96d1-4a75-b421-4e9190013006",
        "type": "message",
        "text": "<@U8A5MS6R1>, the analogy:\n\n* Unix is all about reuse, about doing one thing and doing it well. Except that doesn't always work.\n* Smalltalk is all about being able to modify the environment from within the environment. Except that doesn't always work.\n\n&gt; Perhaps a slightly better distinction than SIU/SUD is calling these kernel-like parts and non-kernel parts, of the system? I see this similar to how you'd probably use a sandbox when developing a kernel module, even if your kernel allows dynamically reloading kernel modules. Seems like this space needs more exploration - like how do you identify the parts that you shouldn't live reload, and how you pin these..\nCan I make a similar claim for Unix? :slightly_smiling_face: We know how to identify the parts that can't reuse things: processes that don't use the same shared libraries.\n\nI think both are reasonable points, but they're bolted on to the underlying uniformity. So they provide apology but don't really address the two criticisms above.",
        "user": "UCUSW7WVD",
        "ts": "1578682355.106300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1578684580.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ePR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": ", the analogy:\n\n* Unix is all about reuse, about doing one thing and doing it well. Except that doesn't always work.\n* Smalltalk is all about being able to modify the environment from within the environment. Except that doesn't always work.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perhaps a slightly better distinction than SIU/SUD is calling these kernel-like parts and non-kernel parts, of the system? I see this similar to how you'd probably use a sandbox when developing a kernel module, even if your kernel allows dynamically reloading kernel modules. Seems like this space needs more exploration - like how do you identify the parts that you shouldn't live reload, and how you pin these.."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nCan I make a similar claim for Unix? "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " We know how to identify the parts that can't reuse things: processes that don't use the same shared libraries.\n\nI think both are reasonable points, but they're bolted on to the underlying uniformity. So they provide apology but don't really address the two criticisms above."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "fa9a4abd-84cf-4555-b0b0-2356b67df356",
        "type": "message",
        "text": "Here's a relevant paragraph from the paper I've been working on, that I wrote before this thread. I'm curious if anybody here would quibble with it.\n\n&gt; Mu's strategies borrow much from past work. For example, Forth systems emphasize parsimonious dependencies but give up on safety in the process. Smalltalk systems emphasize safety while exposing a large fraction of their internals. However, there usually remains a kernel that requires exiting Smalltalk to modify. Lisp Machines built up all the way from custom hardware while remaining safe. Lisp, Forth and Smalltalk all emphasize uniform notation, though they also have strong and divergent opinions on what that notation should be. While they all expose their internals to modification in various structured ways, it seems easy for small modifications to their internals to cause regressions both subtle and catastrophic. Modification requires expertise of all the scenarios their environments are designed to handle, expertise that can only be obtained out of band from the tools themselves.",
        "user": "UCUSW7WVD",
        "ts": "1578682732.106500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cDocy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's a relevant paragraph from the paper I've been working on, that I wrote before this thread. I'm curious if anybody here would quibble with it.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Mu's strategies borrow much from past work. For example, Forth systems emphasize parsimonious dependencies but give up on safety in the process. Smalltalk systems emphasize safety while exposing a large fraction of their internals. However, there usually remains a kernel that requires exiting Smalltalk to modify. Lisp Machines built up all the way from custom hardware while remaining safe. Lisp, Forth and Smalltalk all emphasize uniform notation, though they also have strong and divergent opinions on what that notation should be. While they all expose their internals to modification in various structured ways, it seems easy for small modifications to their internals to cause regressions both subtle and catastrophic. Modification requires expertise of all the scenarios their environments are designed to handle, expertise that can only be obtained out of band from the tools themselves."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "7de53be1-88b4-4a5d-a5e2-66a300c58ab6",
        "type": "message",
        "text": "This was posted just yesterday here in <#C5T9GPWFL|general> \u2014\u00a0anyone who would comment in this thread, please comment there instead: <https://futureofcoding.slack.com/archives/C5T9GPWFL/p1578615869087300>",
        "user": "UC2A2ARPT",
        "ts": "1578684600.107100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1578684606.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d5k5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This was posted just yesterday here in "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": " \u2014\u00a0anyone who would comment in this thread, please comment there instead: "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1578615869087300"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578659439.097900",
        "parent_user_id": "UGLSY9X3J"
    },
    {
        "client_msg_id": "134b43b4-3883-4dd9-a901-052cd9f24d0e",
        "type": "message",
        "text": "<@UP6G25H35> Right now we are looking for two game developers in China, six remote salespeople in the US, two curriculum developers (one in SF, one either in San Francisco or remote anywhere), and one event marketer remote in the US. In the future we may do more hiring in China and Australia. I wish we had the budget for some more FoC-interested engineers and will definitely share any open roles along those lines when we open them in <#CGMJ7323Z|jobs>.",
        "user": "URMEM88JG",
        "ts": "1578685113.107500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Bwi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UP6G25H35"
                            },
                            {
                                "type": "text",
                                "text": " Right now we are looking for two game developers in China, six remote salespeople in the US, two curriculum developers (one in SF, one either in San Francisco or remote anywhere), and one event marketer remote in the US. In the future we may do more hiring in China and Australia. I wish we had the budget for some more FoC-interested engineers and will definitely share any open roles along those lines when we open them in "
                            },
                            {
                                "type": "channel",
                                "channel_id": "CGMJ7323Z"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578383938.028900",
        "parent_user_id": "UP6G25H35"
    },
    {
        "client_msg_id": "efddac79-5c42-42be-b04f-6e38fc3974bc",
        "type": "message",
        "text": "In automative history there are numerous breakthrough/stellar products that bombed, like the Pierce Arrow or the Chrysler Airflow. There are so  many great products that somehow don't get their day in the sun.\n\nOr how about the history of Mr. Collins, who was a radio genius during WW2 and made tube-based radios that were capable of passing the Navy droptest, which is where you take the product and drop it 3 ft onto concrete. and have it still work? He took all of his WW2 money and invested in a message switching system around 1959... the air force couldn't understand it at the time, but it predates the internet by quite a bit. People couldn't understand it at the time what it meant.\n\nSomebody needs to write a book about the greatest ideas in history that didn't get their chance to have their design in the marketplace where it could have been a contender.\n\nConsider the unfortunate fate of the Chrysler Turbine car, which worked fine, and could have revolutionized cars but got caught up in the financial mess at the parent company. Re the Chrysler Turbine car, which has an excellent book about its history, one of the key engineers Williams continued working on turbine engines, and created the motor for that most lethal weapon, the cruise missile, which gets about 8000 miles on a tank of gas. That is a case where a component of a doomed project resurfaces, and finds its niche where it is uniquely optimal.",
        "user": "UEQ6M68H0",
        "ts": "1578688229.107700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cIN3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In automative history there are numerous breakthrough/stellar products that bombed, like the Pierce Arrow or the Chrysler Airflow. There are so  many great products that somehow don't get their day in the sun.\n\nOr how about the history of Mr. Collins, who was a radio genius during WW2 and made tube-based radios that were capable of passing the Navy droptest, which is where you take the product and drop it 3 ft onto concrete. and have it still work? He took all of his WW2 money and invested in a message switching system around 1959... the air force couldn't understand it at the time, but it predates the internet by quite a bit. People couldn't understand it at the time what it meant.\n\nSomebody needs to write a book about the greatest ideas in history that didn't get their chance to have their design in the marketplace where it could have been a contender.\n\nConsider the unfortunate fate of the Chrysler Turbine car, which worked fine, and could have revolutionized cars but got caught up in the financial mess at the parent company. Re the Chrysler Turbine car, which has an excellent book about its history, one of the key engineers Williams continued working on turbine engines, and created the motor for that most lethal weapon, the cruise missile, which gets about 8000 miles on a tank of gas. That is a case where a component of a doomed project resurfaces, and finds its niche where it is uniquely optimal."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578521118.066600",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0132280f-9b3d-40b1-9aad-3e877a477059",
        "type": "message",
        "text": "<@UCUSW7WVD> re analogy - ah I see!\n\nAgree that 'more is needed'. Protections around Smalltalk's powerful meta-features has definitely been brought up but never really fixed afaik.",
        "user": "U8A5MS6R1",
        "ts": "1578694940.107900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a/c1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " re analogy - ah I see!\n\nAgree that 'more is needed'. Protections around Smalltalk's powerful meta-features has definitely been brought up but never really fixed afaik."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N"
    }
]