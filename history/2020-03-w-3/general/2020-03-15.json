[
    {
        "type": "message",
        "text": "Hey everyone, as someone who's new to language oriented programming (e.g. language workbenches, projectional editors, etc), are there any commonly used libraries or tooling?\nFor context, I'm trying to make a very simple projectional editor that has a 1-1 mapping between basic GLSL-esque language and a visual nodegraph representation. Normally I just reach for a handrolled parser &amp; LLVM and lots of scaffolding/boilerplate making the visual editor. What I'm trying to do now is just make it be one editor",
        "user": "U01003H81UM",
        "ts": "1584235196.324400",
        "team": "T5TCAFTA9",
        "thread_ts": "1584235196.324400",
        "reply_count": 45,
        "reply_users_count": 3,
        "latest_reply": "1586039519.136900",
        "reply_users": [
            "UAVCC2X70",
            "UD6EXQVM0",
            "U01003H81UM"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "60241537-50a9-406e-8b47-944407c70c83",
        "type": "message",
        "text": "It seems like pretty much everybody is working in a different environment?",
        "user": "UD3AK9JRF",
        "ts": "1584241624.324800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H4LV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It seems like pretty much everybody is working in a different environment?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "7b152b9c-4eb8-4e44-bff7-574b29c2d978",
        "type": "message",
        "text": "But I wonder if <https://gtoolkit.com> would work for you?",
        "user": "UD3AK9JRF",
        "ts": "1584241702.325100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Glamorous Toolkit",
                "title_link": "https://gtoolkit.com/",
                "text": "Glamorous Toolkit is the moldable development environment",
                "fallback": "Glamorous Toolkit",
                "from_url": "https://gtoolkit.com/",
                "service_icon": "https://gtoolkit.com/favicon.ico",
                "service_name": "gtoolkit.com",
                "id": 1,
                "original_url": "https://gtoolkit.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eWW/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But I wonder if "
                            },
                            {
                                "type": "link",
                                "url": "https://gtoolkit.com"
                            },
                            {
                                "type": "text",
                                "text": " would work for you?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584241702.325100",
        "reply_count": 31,
        "reply_users_count": 10,
        "latest_reply": "1585044181.011500",
        "reply_users": [
            "U01003H81UM",
            "UD3AK9JRF",
            "UEQ6M68H0",
            "UE1JQM9HQ",
            "ULM3U6275",
            "UJN1TAYEQ",
            "U8A5MS6R1",
            "UJBAJNFLK",
            "URKQXRCAC",
            "UA14TGLTC"
        ],
        "subscribed": false
    },
    {
        "type": "message",
        "text": "That looks super awesome",
        "user": "U01003H81UM",
        "ts": "1584241749.325400",
        "team": "T5TCAFTA9",
        "thread_ts": "1584241702.325100",
        "parent_user_id": "UD3AK9JRF"
    },
    {
        "client_msg_id": "4affcf4e-756e-46ed-8956-043757854b3c",
        "type": "message",
        "text": "It does, and the developers are on this Slack. I have no idea how easily it\u2019ll plug into everything else you need to use.",
        "user": "UD3AK9JRF",
        "ts": "1584241776.325600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=6T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It does, and the developers are on this Slack. I have no idea how easily it\u2019ll plug into everything else you need to use."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584241702.325100",
        "parent_user_id": "UD3AK9JRF"
    },
    {
        "type": "message",
        "text": "Yeah, and even if it's not very moldable (ha ha), MIT license + opensource is a pretty close second best solution to having a library",
        "user": "U01003H81UM",
        "ts": "1584241857.325800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01003H81UM",
            "ts": "1584241876.000000"
        },
        "thread_ts": "1584241702.325100",
        "parent_user_id": "UD3AK9JRF"
    },
    {
        "client_msg_id": "298e7cf1-535e-426c-a6cd-3fc2d1d9b94e",
        "type": "message",
        "text": "Hmm, I'd say that any \"mutable\" log can be recreated from an initial state and an append-only sequence of the mutations. So nothing, right?\n\nI think this is also called \"event sourcing\"?",
        "user": "UAVCC2X70",
        "ts": "1584244007.326100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1584245457.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rjb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmm, I'd say that any \"mutable\" log can be recreated from an initial state and an append-only sequence of the mutations. So nothing, right?\n\nI think this is also called \"event sourcing\"?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H"
    },
    {
        "client_msg_id": "e7b31ae4-1a78-4576-a9dc-aff2851094c3",
        "type": "message",
        "text": "I think 'append only' is a sound idea. You can encode everything in it. But then you can encode everything in any database. The question is what exactly is the information recorded in the log and where does it exist?\n\nTime is encoded implicitly in many places - any API call to a library, or message going to a service (assume both are stateful) has implicit time. The state itself has implicit time. Any copy of information has implicit time (e.g. a cache in front of a database implicitly refers to a specific time in the database (per entity)).",
        "user": "U8A5MS6R1",
        "ts": "1584244853.326400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U=rF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think 'append only' is a sound idea. You can encode everything in it. But then you can encode everything in any database. The question is what exactly is the information recorded in the log and where does it exist?\n\nTime is encoded implicitly in many places - any API call to a library, or message going to a service (assume both are stateful) has implicit time. The state itself has implicit time. Any copy of information has implicit time (e.g. a cache in front of a database implicitly refers to a specific time in the database (per entity))."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H"
    },
    {
        "client_msg_id": "b333d635-0985-421b-871e-cb4accc96c83",
        "type": "message",
        "text": "Another often overlooked place is the 'code version' itself refers to some time. When you roll out a new version to a part of the system, the code there is newer (~time) than the other code. The data/information in dbs etc usually does not make the code time explicit - maybe it should.",
        "user": "U8A5MS6R1",
        "ts": "1584245036.326600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h/lWL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another often overlooked place is the 'code version' itself refers to some time. When you roll out a new version to a part of the system, the code there is newer (~time) than the other code. The data/information in dbs etc usually does not make the code time explicit - maybe it should."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UDKTZSD6H"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "03b9b613-18ce-4497-a00d-80e8a9572797",
        "type": "message",
        "text": "Any information displayed to the user on any screen has implicit time (it represents the info at a specific time) - sometimes this is explicit as a version number. Essentially any projection of information has associated time.",
        "user": "U8A5MS6R1",
        "ts": "1584245373.326800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7e5Yt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Any information displayed to the user on any screen has implicit time (it represents the info at a specific time) - sometimes this is explicit as a version number. Essentially any projection of information has associated time."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H"
    },
    {
        "client_msg_id": "b46c6b3b-d35c-414d-8333-dac9743b41b2",
        "type": "message",
        "text": "I suppose that's even true of the messages in this thread :)",
        "user": "UAVCC2X70",
        "ts": "1584245623.327100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1584245828.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rPi5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I suppose that's even true of the messages in this thread :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H"
    },
    {
        "client_msg_id": "1d145550-b343-4331-abd6-9f54e9f6b637",
        "type": "message",
        "text": "Glamorous toolkit is a smalltalk product built in Pharo to my knowledge. It is Tudor Girba's project, and he has spent years on this very complex system. Given Smalltalk's great age, Pharo is indeed one of the most sophisticated IDE's on the planet. However, I find smalltalk horrible, and although i tried learning it with the Adele Goldberg Smalltalk-80 book, it just seemed perverse to send the message \"plus\" to the number 2 along with a message content of 2 to add 2+2. I gave it a try, but after learning Assembler, PL/1, FORTRAN, i must have been contaminated by the Algol family to the point where smalltalk is a no-go.",
        "user": "UEQ6M68H0",
        "ts": "1584246120.327600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fo5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Glamorous toolkit is a smalltalk product built in Pharo to my knowledge. It is Tudor Girba's project, and he has spent years on this very complex system. Given Smalltalk's great age, Pharo is indeed one of the most sophisticated IDE's on the planet. However, I find smalltalk horrible, and although i tried learning it with the Adele Goldberg Smalltalk-80 book, it just seemed perverse to send the message \"plus\" to the number 2 along with a message content of 2 to add 2+2. I gave it a try, but after learning Assembler, PL/1, FORTRAN, i must have been contaminated by the Algol family to the point where smalltalk is a no-go."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584241702.325100",
        "parent_user_id": "UD3AK9JRF"
    },
    {
        "client_msg_id": "2acd889a-86b0-41c4-aee4-c75a613dd34a",
        "type": "message",
        "text": "Yeah. I think it's not just 'time' but also the information model. E.g. what is time associated with? Even pseudo time by itself it is pointless. What is useful is a 'fact' in some information schema. E.g. (property a, value b, time t) which is true at some time. Stuff usually put in the append only event logs. So what does the info model look like. Is it key/value with global keys? How does adding a new key fit in? WHere do agents/nodes fit in and how is intention encoded? E.g. how do we represent that the user clicked a button? They were looking at a version of some information (list of facts at time t) but there is lag and uncertainly until the fact is 'accepted' by the system. So I think we have to even make nodes explicit in our model. Then all messages become idempotent since everything is explicit (x said y at time t) - and can be replicated, distributed without issue.",
        "user": "U8A5MS6R1",
        "ts": "1584246206.327800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1584246223.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E6iC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah. I think it's not just 'time' but also the information model. E.g. what is time associated with? Even pseudo time by itself it is pointless. What is useful is a 'fact' in some information schema. E.g. (property a, value b, time t) which is true at some time. Stuff usually put in the append only event logs. So what does the info model look like. Is it key/value with global keys? How does adding a new key fit in? WHere do agents/nodes fit in and how is intention encoded? E.g. how do we represent that the user clicked a button? They were looking at a version of some information (list of facts at time t) but there is lag and uncertainly until the fact is 'accepted' by the system. So I think we have to even make nodes explicit in our model. Then all messages become idempotent since everything is explicit (x said y at time t) - and can be replicated, distributed without issue."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "text": "Yeah, after looking at it, unfortunately won't be too useful other than for architecture design inspiration. I have hard requirement around gamedev usecases  so i'm stuck to a C-like language",
        "user": "U01003H81UM",
        "ts": "1584246979.328100",
        "team": "T5TCAFTA9",
        "thread_ts": "1584241702.325100",
        "parent_user_id": "UD3AK9JRF"
    },
    {
        "client_msg_id": "a26a63d7-2585-4bcf-8180-847d473ab29c",
        "type": "message",
        "text": "Thanks for the mention, <@UD3AK9JRF>.\n\n<@U01003H81UM>: Glamorous Toolkit has a rather extensive infrastructure for various languages, including C. The environment itself is implemented in Pharo, indeed. However, it is meant to be a platform for creating system-specific (not just language specific) environments. This also includes debugging and inspection, too, not just the editing part.\n\nGT comes with a dedicated graphical stack. The actual rendering is based on Skia (<https://skia.org>).\n\nIf you are looking at only editing, you might also want to take a look at MPS (<https://www.jetbrains.com/mps>).\n\nIn any case, if you have questions about GT, I\u2019d be happy to address them.",
        "user": "UE1JQM9HQ",
        "ts": "1584253461.328400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "JetBrains",
                "title": "MPS: The Domain-Specific Language Creator by JetBrains",
                "title_link": "https://www.jetbrains.com/mps",
                "text": "Use the MPS platform to create your own domain-specific language that speaks to your business needs.",
                "fallback": "JetBrains: MPS: The Domain-Specific Language Creator by JetBrains",
                "image_url": "http://resources.jetbrains.com/storage/products/mps/img/meta/mps_1280x800.png",
                "fields": [
                    {
                        "title": "Platforms:",
                        "value": "Windows, macOS, Linux",
                        "short": true
                    }
                ],
                "from_url": "https://www.jetbrains.com/mps",
                "image_width": 400,
                "image_height": 250,
                "image_bytes": 1632542,
                "service_icon": "https://www.jetbrains.com/favicon.ico",
                "id": 1,
                "original_url": "https://www.jetbrains.com/mps"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IpqOH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the mention, "
                            },
                            {
                                "type": "user",
                                "user_id": "UD3AK9JRF"
                            },
                            {
                                "type": "text",
                                "text": ".\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U01003H81UM"
                            },
                            {
                                "type": "text",
                                "text": ": Glamorous Toolkit has a rather extensive infrastructure for various languages, including C. The environment itself is implemented in Pharo, indeed. However, it is meant to be a platform for creating system-specific (not just language specific) environments. This also includes debugging and inspection, too, not just the editing part.\n\nGT comes with a dedicated graphical stack. The actual rendering is based on Skia ("
                            },
                            {
                                "type": "link",
                                "url": "https://skia.org"
                            },
                            {
                                "type": "text",
                                "text": ").\n\nIf you are looking at only editing, you might also want to take a look at MPS ("
                            },
                            {
                                "type": "link",
                                "url": "https://www.jetbrains.com/mps"
                            },
                            {
                                "type": "text",
                                "text": ").\n\nIn any case, if you have questions about GT, I\u2019d be happy to address them."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584241702.325100",
        "parent_user_id": "UD3AK9JRF",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "U01003H81UM"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "36fe850b-a7be-4ed0-b784-7a153add4d18",
        "type": "message",
        "text": "<@UAVCC2X70> Could it be: <https://www.expressionsofchange.org/videos/> by any chance?",
        "user": "UDKTZSD6H",
        "ts": "1584280460.329100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F=7J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " Could it be: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.expressionsofchange.org/videos/"
                            },
                            {
                                "type": "text",
                                "text": " by any chance?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H"
    },
    {
        "client_msg_id": "32c59e30-3c2c-46e7-8462-47fa16d208be",
        "type": "message",
        "text": "<@UAVCC2X70> Also, your second comment reminded me of Operational Transformation: <https://hackernoon.com/operational-transformation-the-real-time-collaborative-editing-algorithm-bf8756683f66>",
        "user": "UDKTZSD6H",
        "ts": "1584280588.330000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QLT8I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " Also, your second comment reminded me of Operational Transformation: "
                            },
                            {
                                "type": "link",
                                "url": "https://hackernoon.com/operational-transformation-the-real-time-collaborative-editing-algorithm-bf8756683f66"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H"
    },
    {
        "client_msg_id": "7a0a38f3-c53a-4714-b023-0ed646dd5280",
        "type": "message",
        "text": "<@U8A5MS6R1> That tripartite: Concept/Data Structures/Whole systems partition makes a lot of sense. This is really something I would like to explore, especially in the context of a design tool which I think holds a lot of promise.\n\nAnd the idea of making identity of nodes explicit is also very interesting. That would turn it into a conversation between agents and a coherent story emerging from it. Reminds me of Conversation Theory from Cybernetics:  <http://worrydream.com/refs/Bolt%20-%20Graphical%20Conversation%20Theory.pdf>",
        "user": "UDKTZSD6H",
        "ts": "1584281284.330800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UDKTZSD6H",
            "ts": "1584281421.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/Hp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " That tripartite: Concept/Data Structures/Whole systems partition makes a lot of sense. This is really something I would like to explore, especially in the context of a design tool which I think holds a lot of promise.\n\nAnd the idea of making identity of nodes explicit is also very interesting. That would turn it into a conversation between agents and a coherent story emerging from it. Reminds me of Conversation Theory from Cybernetics:  "
                            },
                            {
                                "type": "link",
                                "url": "http://worrydream.com/refs/Bolt%20-%20Graphical%20Conversation%20Theory.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "C7F79AAA-3646-40E3-8317-24BD2EE5A2C2",
        "type": "message",
        "text": "<@UEQ6M68H0> Curious that the consistent message sending semantics you hate about Smalltalk is exactly what I love about it.",
        "user": "ULM3U6275",
        "ts": "1584296240.334800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FtOX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " Curious that the consistent message sending semantics you hate about Smalltalk is exactly what I love about it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584241702.325100",
        "parent_user_id": "UD3AK9JRF",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UE1JQM9HQ",
                    "U8A5MS6R1",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "ae1ab258-7b93-484e-88ec-52bc9c891288",
        "type": "message",
        "text": "Lamdu and Unision are interesting but I don't see how they model time differently at runtime. They do model the 'code' differently though.",
        "user": "U8A5MS6R1",
        "ts": "1584304150.335500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YzU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lamdu and Unision are interesting but I don't see how they model time differently at runtime. They do model the 'code' differently though."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "05999b2f-88a2-43ae-98bb-aaf42841edce",
        "type": "message",
        "text": "How much access to the GPU do you have from within Glamorous Toolkit? Is there support for OpenGL, Vulkan, DX 12, Metal? Skia is a 2D graphics API; how do I render in 3D?",
        "user": "UJN1TAYEQ",
        "ts": "1584305134.335800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LLUDM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How much access to the GPU do you have from within Glamorous Toolkit? Is there support for OpenGL, Vulkan, DX 12, Metal? Skia is a 2D graphics API; how do I render in 3D?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584241702.325100",
        "parent_user_id": "UD3AK9JRF"
    },
    {
        "client_msg_id": "b1462158-c7c8-4f23-bf4c-2c0d6ed6480e",
        "type": "message",
        "text": "Yeah the appeal of Smalltalk or IO is reducing 'many different kinds of things' to different cases of 'very few kinds of things'. Basic arithmetic operators, control flow and function are all built up from the core object-message-method idea. This almost seems philosophically 'mathematical' - reducing the number of ideas.\n\nNow I'm not saying these are the best core set of ideas (and not saying they're not), but just trying to elaborate on the motivation and appeal.",
        "user": "U8A5MS6R1",
        "ts": "1584305820.336400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QWuV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah the appeal of Smalltalk or IO is reducing 'many different kinds of things' to different cases of 'very few kinds of things'. Basic arithmetic operators, control flow and function are all built up from the core object-message-method idea. This almost seems philosophically 'mathematical' - reducing the number of ideas.\n\nNow I'm not saying these are the best core set of ideas (and not saying they're not), but just trying to elaborate on the motivation and appeal."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584241702.325100",
        "parent_user_id": "UD3AK9JRF"
    },
    {
        "client_msg_id": "79aa8d1e-8f2c-4677-a9b5-3c588de064e8",
        "type": "message",
        "text": "Re: Smalltalk. My concerns with Smalltalk for my project are: [1] It compiles to interpreted bytecode, so a compiler and interpreter for my language is expected to run a lot slower than one written in C++ (which I am currently using). [2] I need to be able to use specialized graphics libraries written in C++, that have no equivalent in other languages. Binding to C++ from another language is not easy. [3] How practical is it to build a GPU accelerated 3D user interface within Smalltalk? If I have to rebuild the graphics &amp; UI stack from scratch then I'm not getting any benefit.",
        "user": "UJN1TAYEQ",
        "ts": "1584305927.336600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WIHsD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Re: Smalltalk. My concerns with Smalltalk for my project are: [1] It compiles to interpreted bytecode, so a compiler and interpreter for my language is expected to run a lot slower than one written in C++ (which I am currently using). [2] I need to be able to use specialized graphics libraries written in C++, that have no equivalent in other languages. Binding to C++ from another language is not easy. [3] How practical is it to build a GPU accelerated 3D user interface within Smalltalk? If I have to rebuild the graphics & UI stack from scratch then I'm not getting any benefit."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584241702.325100",
        "parent_user_id": "UD3AK9JRF"
    },
    {
        "client_msg_id": "24faf3ae-8de2-4c4b-8e8c-dd39550d87e2",
        "type": "message",
        "text": "If someone wanted to use SmallTalk for speedy direct graphics stuff, maybe you'd want to generate C or something like that? i.e. use ST as the meta language. Isn't Pharo self hosting using this method?",
        "user": "U8A5MS6R1",
        "ts": "1584306383.336800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g6Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If someone wanted to use SmallTalk for speedy direct graphics stuff, maybe you'd want to generate C or something like that? i.e. use ST as the meta language. Isn't Pharo self hosting using this method?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584241702.325100",
        "parent_user_id": "UD3AK9JRF"
    }
]