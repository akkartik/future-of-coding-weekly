[
    {
        "client_msg_id": "9b2fa41b-a47c-4574-98d8-195d7abeae64",
        "type": "message",
        "text": "I can only personally account for hundreds, maybe a thousand, as a person of limited attention.",
        "user": "UA14TGLTC",
        "ts": "1584154546.317100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hXtt2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I can only personally account for hundreds, maybe a thousand, as a person of limited attention."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584042706.253500",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "0729a84b-b2ae-4225-a887-bdc9ec8f2351",
        "type": "message",
        "text": "<@UHDQ62M4P> I don't know if there's hundreds of thousands of \"reinvent computing\" or \"self contained system\" type of projects",
        "user": "UAVCC2X70",
        "ts": "1584157731.317300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wZsE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHDQ62M4P"
                            },
                            {
                                "type": "text",
                                "text": " I don't know if there's hundreds of thousands of \"reinvent computing\" or \"self contained system\" type of projects"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584042706.253500",
        "parent_user_id": "UFB8STN7K",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6dffb22d-e536-4838-9bf2-09c7dfefdcd6",
        "type": "message",
        "text": "No, probably not.. but hundred definitely sounds too low. There's probably a 100 on this slack, let alone outside of it",
        "user": "UHDQ62M4P",
        "ts": "1584162706.317600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=cvUo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No, probably not.. but hundred definitely sounds too low. There's probably a 100 on this slack, let alone outside of it"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584042706.253500",
        "parent_user_id": "UFB8STN7K",
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "da937464-813e-48ce-9d4f-bfe77f736682",
        "type": "message",
        "text": "<https://medium.com/s/story/lets-pretend-this-never-happened-8abf0bc9648c>",
        "user": "U8A5MS6R1",
        "ts": "1584162895.317900",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Medium",
                "title": "The Flawed History of Graphical User Interfaces",
                "title_link": "https://medium.com/s/story/lets-pretend-this-never-happened-8abf0bc9648c",
                "text": "Why innovation in computing has been stymied for decades",
                "fallback": "Medium: The Flawed History of Graphical User Interfaces",
                "image_url": "https://miro.medium.com/focal/1200/632/80/37/1*-1aIrzEU9Kamv1oLwYzK-w.jpeg",
                "fields": [
                    {
                        "title": "Reading time",
                        "value": "5 min read",
                        "short": true
                    }
                ],
                "ts": 1542077433,
                "from_url": "https://medium.com/s/story/lets-pretend-this-never-happened-8abf0bc9648c",
                "image_width": 475,
                "image_height": 250,
                "image_bytes": 206544,
                "service_icon": "https://cdn-images-1.medium.com/fit/c/152/152/1*8I-HPL0bfoIzGied-dzOvA.png",
                "id": 1,
                "original_url": "https://medium.com/s/story/lets-pretend-this-never-happened-8abf0bc9648c"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pBA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://medium.com/s/story/lets-pretend-this-never-happened-8abf0bc9648c"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584162895.317900",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1584626568.399800",
        "reply_users": [
            "UAVCC2X70",
            "UD6EXQVM0",
            "U5STGTB3J"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJBAJNFLK",
                    "UAVCC2X70"
                ],
                "count": 2
            }
        ]
    },
    {
        "type": "message",
        "text": "Finally got some time to round up the prior art on a largely forgotten idea in computing called managed time.  I think this in some ways is what version control does to files, but think of it at a more granular level of variables and functions and the kinds of interactions that will spawn off.\n\nGot the hint initially from Alan Kay\u2019s writings and I think there is a lot of fertile areas here to dig into here: <https://prabros.com/readings-on-time>\n\nWould love to hear your feedback if I have missed some related material in this post.",
        "files": [
            {
                "id": "F01007P0NRW",
                "created": 1584170134,
                "timestamp": 1584170134,
                "name": "readings-on-time-cover.png",
                "title": "readings-on-time-cover.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UDKTZSD6H",
                "editable": false,
                "size": 662356,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F01007P0NRW/readings-on-time-cover.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F01007P0NRW/download/readings-on-time-cover.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F01007P0NRW-cf5cb4420e/readings-on-time-cover_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F01007P0NRW-cf5cb4420e/readings-on-time-cover_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F01007P0NRW-cf5cb4420e/readings-on-time-cover_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 360,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F01007P0NRW-cf5cb4420e/readings-on-time-cover_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 480,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F01007P0NRW-cf5cb4420e/readings-on-time-cover_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F01007P0NRW-cf5cb4420e/readings-on-time-cover_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 720,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F01007P0NRW-cf5cb4420e/readings-on-time-cover_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 800,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F01007P0NRW-cf5cb4420e/readings-on-time-cover_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 960,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F01007P0NRW-cf5cb4420e/readings-on-time-cover_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 1024,
                "image_exif_rotation": 1,
                "original_w": 1200,
                "original_h": 1200,
                "thumb_tiny": "AwAwADC80oVwpByafVS6ZPPjXA34zknAAqSKbzHaJsZAzkd6AHiZC20NzUlVxbYbhu2M0+SeOIqHPJoAloqrczNG8eCwU85A61ZUkqCeDigCvc2wmcSA4cDHsaW3txCxcnLkY47VYprKG6jpQA6q91A0wG0r171Iyoo5zyexpQqMDx9aAHICFAJ57mmQsSGDHJDd6R3itx8zbc/U1IrBlDKQQeQRQA2XOz5ajikLcZ5zU1IqIn3VA+lAA67sc4xUZ3R5xznknH6VLRQBBPAZSGBwduCDUkMflRKgOcDrT6KAP//Z",
                "permalink": "https://futureofcoding.slack.com/files/UDKTZSD6H/F01007P0NRW/readings-on-time-cover.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F01007P0NRW-67c179ca1d",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": true,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0Kz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Finally got some time to round up the prior art on a largely forgotten idea in computing called managed time.  I think this in some ways is what version control does to files, but think of it at a more granular level of variables and functions and the kinds of interactions that will spawn off.\n\nGot the hint initially from Alan Kay\u2019s writings and I think there is a lot of fertile areas here to dig into here: "
                            },
                            {
                                "type": "link",
                                "url": "https://prabros.com/readings-on-time"
                            },
                            {
                                "type": "text",
                                "text": "\n\nWould love to hear your feedback if I have missed some related material in this post."
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UDKTZSD6H",
        "display_as_bot": false,
        "ts": "1584170145.320600",
        "client_msg_id": "74d3c746-1745-4f1b-b6b5-0d96f3d53f87",
        "thread_ts": "1584170145.320600",
        "reply_count": 20,
        "reply_users_count": 5,
        "latest_reply": "1584380073.349900",
        "reply_users": [
            "UD3AK9JRF",
            "UAVCC2X70",
            "U8A5MS6R1",
            "UDKTZSD6H",
            "UJ6LDMMN0"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UC2A2ARPT",
                    "UD31LGQKB",
                    "UBSMEUXAA",
                    "UAHHWT22U",
                    "U8A5MS6R1",
                    "UFQQ3P867",
                    "UD3AK9JRF",
                    "UJ6LDMMN0",
                    "U01038KJXRB"
                ],
                "count": 10
            }
        ]
    },
    {
        "client_msg_id": "fba8bbf1-0447-4d48-bf33-ed7cb862500c",
        "type": "message",
        "text": "Thanks. This is nicely put together. I don\u2019t have much to add but I wish I did\u2014there\u2019s so much more thinking to be done in this space!\n\nI guess I would throw linear programming in there as a way to reason about time. I switch back and forth between Rust and Swift these days, and am more and more uncomfortable writing in languages with no way of saying \u201cno one else can change, or ever refer to, this value after this point.\u201d It\u2019s just so much harder to reason about the behavior of an application.\n\nOn an unrelated note, I\u2019ve thrown my chips on the logic programming square here, following Bloom and others. I feel there\u2019s a great deal of exploration to be done even just with the theory and application of CRDTs. Logic programming gives me huge flexibility to express new ideas in terms of a single \u201chappened before\u201d relation. I know that building in theorem proving a la Alloy or TLA+ would help a lot too, as would interactive tools for visualizing and debugging.\nIf anyone else is exploring anything like this please let me know. I\u2019ve only just begun.",
        "user": "UD3AK9JRF",
        "ts": "1584215471.321700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UD3AK9JRF",
            "ts": "1584215494.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EFj8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks. This is nicely put together. I don\u2019t have much to add but I wish I did\u2014there\u2019s so much more thinking to be done in this space!\n\nI guess I would throw linear programming in there as a way to reason about time. I switch back and forth between Rust and Swift these days, and am more and more uncomfortable writing in languages with no way of saying \u201cno one else can change, or ever refer to, this value after this point.\u201d It\u2019s just so much harder to reason about the behavior of an application.\n\nOn an unrelated note, I\u2019ve thrown my chips on the logic programming square here, following Bloom and others. I feel there\u2019s a great deal of exploration to be done even just with the theory and application of CRDTs. Logic programming gives me huge flexibility to express new ideas in terms of a single \u201chappened before\u201d relation. I know that building in theorem proving a la Alloy or TLA+ would help a lot too, as would interactive tools for visualizing and debugging.\nIf anyone else is exploring anything like this please let me know. I\u2019ve only just begun."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UDKTZSD6H",
                    "U85HCL7JP"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "dc9f7388-475f-422b-b54e-062d4401994a",
        "type": "message",
        "text": "There was a project that did something like this (i.e. references to variables and functions are bound to whatever version of them existed at the time the programmer coded the reference).\n\nAm I thinking of Lambdu?",
        "user": "UAVCC2X70",
        "ts": "1584216616.322100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Etu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There was a project that did something like this (i.e. references to variables and functions are bound to whatever version of them existed at the time the programmer coded the reference).\n\nAm I thinking of Lambdu?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H"
    },
    {
        "client_msg_id": "6bb5dc10-e04e-4e8c-8f5c-6ab14815c6a9",
        "type": "message",
        "text": "A related idea of mine:\n\n* Small set of datatypes (think JSON), all code is made of those too (think Lisp). Lexical scope (execution context) is also stored this way at runtime (think Scheme).\n\n* All operations (with few exceptions) in \"code\" therefore amounts to operating on that kind of data / structure.\n\n* If that's the whole universe of a running program, then user interaction also boils down to (directly or indirectly) causing the same kind of operations on the same kind of structure.\n\n* Coding involves editing a live structure, rather than writing text.\n\n* \"Code\" is actually stored as a list (or DAG, actually) of operations to apply, in some context.\n\n* Coding is done by recording (rather than just doing-and-forgetting) actions manually taken by the coder on live structure. The current state of \"the code\" is actually a pure function of actions taken.\n\n* Effectively, there's no difference between \"code\" and \"programming\", and both can be reviewed as a time- (or ordered)-sequence of actions, with \"the past\" edited directly to see what the result is in different cases, etc. Effectively it's the same kind of stuff could do with a GIT history.\n\nSo the lines between code, data, programming, user interaction (with full undo/redo history tree), and source control, are all blurred.",
        "user": "UAVCC2X70",
        "ts": "1584218269.322300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5cE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A related idea of mine:\n\n* Small set of datatypes (think JSON), all code is made of those too (think Lisp). Lexical scope (execution context) is also stored this way at runtime (think Scheme).\n\n* All operations (with few exceptions) in \"code\" therefore amounts to operating on that kind of data / structure.\n\n* If that's the whole universe of a running program, then user interaction also boils down to (directly or indirectly) causing the same kind of operations on the same kind of structure.\n\n* Coding involves editing a live structure, rather than writing text.\n\n* \"Code\" is actually stored as a list (or DAG, actually) of operations to apply, in some context.\n\n* Coding is done by recording (rather than just doing-and-forgetting) actions manually taken by the coder on live structure. The current state of \"the code\" is actually a pure function of actions taken.\n\n* Effectively, there's no difference between \"code\" and \"programming\", and both can be reviewed as a time- (or ordered)-sequence of actions, with \"the past\" edited directly to see what the result is in different cases, etc. Effectively it's the same kind of stuff could do with a GIT history.\n\nSo the lines between code, data, programming, user interaction (with full undo/redo history tree), and source control, are all blurred."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UDKTZSD6H"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "914a5afe-c9fa-48f8-ae46-f764dda832da",
        "type": "message",
        "text": "Lamdu does do something like this IIRC. They 'copy' the type signature of the function into every call site. When you modify the function definition signature, they know both - the old signature a call site was bound to, and the new one of the definition. Of course because it is projectional editing, the 'copy' is usually hidden when you look the call site.",
        "user": "U8A5MS6R1",
        "ts": "1584218274.322500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "71=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lamdu does do something like this IIRC. They 'copy' the type signature of the function into every call site. When you modify the function definition signature, they know both - the old signature a call site was bound to, and the new one of the definition. Of course because it is projectional editing, the 'copy' is usually hidden when you look the call site."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H"
    },
    {
        "client_msg_id": "97fe0c20-53fe-448b-9a6c-af2eafbc9bf7",
        "type": "message",
        "text": "You maybe thinking of <https://www.unisonweb.org>",
        "user": "UD3AK9JRF",
        "ts": "1584218935.322700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "The Unison language",
                "title_link": "https://www.unisonweb.org/",
                "text": "A friendly programming language from the future.",
                "fallback": "The Unison language",
                "from_url": "https://www.unisonweb.org/",
                "service_name": "unisonweb.org",
                "id": 1,
                "original_url": "https://www.unisonweb.org"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dcCma",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You maybe thinking of "
                            },
                            {
                                "type": "link",
                                "url": "https://www.unisonweb.org"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UAVCC2X70",
                    "U8A5MS6R1"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "40f4a4f9-880b-4c39-bde4-29e949ed501e",
        "type": "message",
        "text": "Following on to my earlier reply, Nikolas G\u00f6bel wrote a nice, if terse, round-up of ideas relevant to time (and divergence) in databases here: <https://www.nikolasgoebel.com/2019/12/30/perspectives-2019.html>",
        "user": "UD3AK9JRF",
        "ts": "1584219180.323000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UD3AK9JRF",
            "ts": "1584219431.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eZB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Following on to my earlier reply, Nikolas G\u00f6bel wrote a nice, if terse, round-up of ideas relevant to time (and divergence) in databases here: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.nikolasgoebel.com/2019/12/30/perspectives-2019.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UDKTZSD6H"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "289b1ee0-eb22-4e8f-af9b-8d685ab907c4",
        "type": "message",
        "text": "When I look at this space, I think of the discussions and approaches as within three *vague* categories.\n\nFirst is the 'essence' of the ideas - e.g. McCarthy's association of facts with pseudo/logical time (and possibly place). This is really a variant of the meta idea \"make the implicit explicit\".\n\nSecond is 'data structure' oriented approaches. These are CRDTs, Datomic and such. We consider 'just data' flowing and persisted within the system and try to tag it with pseudo timestamps. We try to auto merge, query on a consistent 'view'. All data references have the psuedo timestamp. Even MVCC (and git) have this flavor - the git hash is the 'pseudo timestamp' of git data.\n\nThird is the 'system' oriented approaches - here it's not just about data but entire systems and subsystems have pseudo time. Examples are Reed's NAMOS, Jefferson's Virtual Time, the Croquet project, etc. The main difference I see here is *all messages* have the psuedo time attached. It's not just querying and modifying data, but any message between to nodes will have the pseudo time attached, which specifies which 'version' of the world the message comes from and refers to.",
        "user": "U8A5MS6R1",
        "ts": "1584219435.323400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1584219478.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1fc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When I look at this space, I think of the discussions and approaches as within three "
                            },
                            {
                                "type": "text",
                                "text": "vague",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " categories.\n\nFirst is the 'essence' of the ideas - e.g. McCarthy's association of facts with pseudo/logical time (and possibly place). This is really a variant of the meta idea \"make the implicit explicit\".\n\nSecond is 'data structure' oriented approaches. These are CRDTs, Datomic and such. We consider 'just data' flowing and persisted within the system and try to tag it with pseudo timestamps. We try to auto merge, query on a consistent 'view'. All data references have the psuedo timestamp. Even MVCC (and git) have this flavor - the git hash is the 'pseudo timestamp' of git data.\n\nThird is the 'system' oriented approaches - here it's not just about data but entire systems and subsystems have pseudo time. Examples are Reed's NAMOS, Jefferson's Virtual Time, the Croquet project, etc. The main difference I see here is "
                            },
                            {
                                "type": "text",
                                "text": "all messages",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " have the psuedo time attached. It's not just querying and modifying data, but any message between to nodes will have the pseudo time attached, which specifies which 'version' of the world the message comes from and refers to."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UDKTZSD6H",
                    "U85HCL7JP"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6533768a-8963-4a4c-9550-aa80a3c009d3",
        "type": "message",
        "text": "Sure. You could say: the development of concepts, the development of tools, and the coherent deployment of tools in the real world.",
        "user": "UD3AK9JRF",
        "ts": "1584219703.323700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RzaRm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sure. You could say: the development of concepts, the development of tools, and the coherent deployment of tools in the real world."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H"
    },
    {
        "client_msg_id": "8f759b36-f4ca-493d-8e48-3e53d4bae18f",
        "type": "message",
        "text": "I\u2019m interested in informing our concepts as well as we can by studying the way time is encoded, implicitly and explicitly, in our existing tools and practices. What concepts can you not encode directly in a system built on an append-only event log?",
        "user": "UD3AK9JRF",
        "ts": "1584220126.324000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sruHy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019m interested in informing our concepts as well as we can by studying the way time is encoded, implicitly and explicitly, in our existing tools and practices. What concepts can you not encode directly in a system built on an append-only event log?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584170145.320600",
        "parent_user_id": "UDKTZSD6H",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    }
]