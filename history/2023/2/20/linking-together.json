[
    {
        "client_msg_id": "42bd9002-5af2-43ed-b5cf-0aa37208d6aa",
        "type": "message",
        "text": "C-rusted: The Advantages of Rust, in C, without the Disadvantages - <https://arxiv.org/abs/2302.05331>",
        "user": "UPVBV34EL",
        "ts": "1676880530.090719",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BvK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "C-rusted: The Advantages of Rust, in C, without the Disadvantages - "
                            },
                            {
                                "type": "link",
                                "url": "https://arxiv.org/abs/2302.05331"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://arxiv.org/abs/2302.05331",
                "service_icon": "https://static.arxiv.org/static/browse/0.3.4/images/icons/favicon.ico",
                "id": 1,
                "original_url": "https://arxiv.org/abs/2302.05331",
                "fallback": "arXiv.org: C-rusted: The Advantages of Rust, in C, without the Disadvantages",
                "text": "C-rusted is an innovative technology whereby C programs can be (partly)\nannotated so as to express: ownership, exclusivity and shareability of\nlanguage, system and user-defined resources; dynamic properties of objects and\nthe way they evolve during program execution; nominal typing and subtyping. The\n(partially) annotated C programs can be translated with unmodified versions of\nany compilation toolchain capable of processing ISO C code. The annotated C\nprogram parts can be validated by static analysis: if the static analyzer flags\nno error, then the annotations are provably coherent among themselves and with\nrespect to annotated C code, in which case said annotated parts are provably\nexempt from a large class of logic, security, and run-time errors.",
                "title": "C-rusted: The Advantages of Rust, in C, without the Disadvantages",
                "title_link": "https://arxiv.org/abs/2302.05331",
                "service_name": "arXiv.org"
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U013ZLJARC7",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "20c9df52-4995-49ec-9edf-b002f3bae792",
        "type": "message",
        "text": "<https://austinhenley.com/blog/uxaicoding.html|Papers on the UX of AI programming assistants>\n\nThis is a list of research papers investigating the user experience of AI-powered programming assistants (e.g., Copilot)",
        "user": "UBN9AFS0N",
        "ts": "1676925172.714399",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vKGJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://austinhenley.com/blog/uxaicoding.html",
                                "text": "Papers on the UX of AI programming assistants"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThis is a list of research papers investigating the user experience of AI-powered programming assistants (e.g., Copilot)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "image_url": "https://austinhenley.com/blog/images/humanaicoding.png",
                "image_width": 700,
                "image_height": 584,
                "image_bytes": 1073591,
                "from_url": "https://austinhenley.com/blog/uxaicoding.html",
                "id": 1,
                "original_url": "https://austinhenley.com/blog/uxaicoding.html",
                "fallback": "Papers on the UX of AI programming assistants",
                "text": "A list of research papers investigating the user experience of AI-powered programming assistants (e.g., Copilot).",
                "title": "Papers on the UX of AI programming assistants",
                "title_link": "https://austinhenley.com/blog/uxaicoding.html",
                "service_name": "austinhenley.com"
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U04MZSH4534",
                    "UPVBV34EL"
                ],
                "count": 2
            }
        ]
    }
]