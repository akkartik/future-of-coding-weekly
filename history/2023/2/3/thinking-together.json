[
    {
        "client_msg_id": "4de1dd61-64cb-4db8-b7a8-42d555226acf",
        "type": "message",
        "text": "What are some great ways to present code in a book/docs? Especially when the code is growing, being modified, etc.?\n\n<https://twitter.com/dubroy/status/1621533688159768577>",
        "user": "UBN9AFS0N",
        "ts": "1675439262.538229",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V1bL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What are some great ways to present code in a book/docs? Especially when the code is growing, being modified, etc.?\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/dubroy/status/1621533688159768577"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://twitter.com/dubroy/status/1621533688159768577",
                "ts": 1675438732,
                "image_url": "https://pbs.twimg.com/media/FoDXzpMWQAEQbqs.jpg",
                "image_width": 1200,
                "image_height": 675,
                "image_bytes": 106452,
                "id": 1,
                "original_url": "https://twitter.com/dubroy/status/1621533688159768577",
                "fallback": "<https://twitter.com/dubroy|@dubroy>: What are some great ways to present code in a book/docs? Especially when the code is growing, being modified, etc.?\n\nI like what <https://twitter.com/munificentbob|@munificentbob> does in Crafting Interpreters\u2026what are some other good examples?",
                "text": "What are some great ways to present code in a book/docs? Especially when the code is growing, being modified, etc.?\n\nI like what <https://twitter.com/munificentbob|@munificentbob> does in Crafting Interpreters\u2026what are some other good examples?",
                "author_name": "Patrick Dubroy \ud83d\udc49 @dubroy@hachyderm.io",
                "author_link": "https://twitter.com/dubroy/status/1621533688159768577",
                "author_icon": "https://pbs.twimg.com/profile_images/720549513178402816/sNuufv6K_normal.jpg",
                "author_subname": "@dubroy",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "thread_ts": "1675439262.538229",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1675441140.184559",
        "reply_users": [
            "U016VUZGUUQ",
            "U04717WKH5K"
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1675441140.184559"
    },
    {
        "client_msg_id": "a7b6269b-107a-402d-a954-201280d99285",
        "type": "message",
        "text": "Re presentation: If you're showing incremental modifications of a piece of code, I like just bolding the new bits. Maybe comment out deletions: not great style in real code, but helps show the whole diff while still being copy-pastable. Unified diffs or whatever are hard to read and highlighting alone is not adequate IMO (and not always possible)... Otherwise I'm not quite sure what the question is.\n\nFor reference, Bob went really hard with how he handled code in \"Crafting Interpreters\". <https://journal.stuffwithstuff.com/2020/04/05/crafting-crafting-interpreters/|https://journal.stuffwithstuff.com/2020/04/05/crafting-crafting-interpreters/> It's all worth reading IMO, but Ctrl-F \"build system\" if you want to focus on the code part. :)",
        "user": "U016VUZGUUQ",
        "ts": "1675440252.566559",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QMu7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Re presentation: If you're showing incremental modifications of a piece of code, I like just bolding the new bits. Maybe comment out deletions: not great style in real code, but helps show the whole diff while still being copy-pastable. Unified diffs or whatever are hard to read and highlighting alone is not adequate IMO (and not always possible)... Otherwise I'm not quite sure what the question is.\n\nFor reference, Bob went really hard with how he handled code in \"Crafting Interpreters\". "
                            },
                            {
                                "type": "link",
                                "url": "https://journal.stuffwithstuff.com/2020/04/05/crafting-crafting-interpreters/",
                                "text": "https://journal.stuffwithstuff.com/2020/04/05/crafting-crafting-interpreters/"
                            },
                            {
                                "type": "text",
                                "text": " It's all worth reading IMO, but Ctrl-F \"build system\" if you want to focus on the code part. :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U016VUZGUUQ",
            "ts": "1675442372.000000"
        },
        "thread_ts": "1675439262.538229",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "c3d7f5f2-2b5f-4748-8a06-2918f8f07e18",
        "type": "message",
        "text": "Long ago, Bruce Eckel also released the toolchain he used for similar purposes in one of his _Thinking in Java_ books. Or if you want to go super-old school, dust off Knuth and use CWeb/Literate Programming",
        "user": "U04717WKH5K",
        "ts": "1675441140.184559",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Feb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Long ago, Bruce Eckel also released the toolchain he used for similar purposes in one of his "
                            },
                            {
                                "type": "text",
                                "text": "Thinking in Java",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " books. Or if you want to go super-old school, dust off Knuth and use CWeb/Literate Programming"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1675439262.538229",
        "parent_user_id": "UBN9AFS0N"
    }
]