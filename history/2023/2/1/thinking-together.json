[
    {
        "client_msg_id": "f45f6d0c-234a-4a91-97ba-ddd28c48d52d",
        "type": "message",
        "text": "Should a good tool/framework/language not only \"make easy things easy, and hard things possible\", but also (generally) make patterns effortless, and anti-patterns painful?",
        "user": "ULM3U6275",
        "ts": "1675283935.164309",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EU65",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Should a good tool/framework/language not only \"make easy things easy, and hard things possible\", but also (generally) make patterns effortless, and anti-patterns painful?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1675283935.164309",
        "reply_count": 19,
        "reply_users_count": 8,
        "latest_reply": "1675414800.471099",
        "reply_users": [
            "UCUSW7WVD",
            "U03TX2GT080",
            "UBSMEUXAA",
            "U02U0AS3J49",
            "U016VUZGUUQ",
            "UGWUJUZHT",
            "U017TE5R09M",
            "UA14TGLTC"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "deea7da8-28df-4529-847a-def5b3d48bcd",
        "type": "message",
        "text": "Yes. But there's always a good question here of how objective some doctrine separating patterns and anti-patterns is. If you're not opinionated enough then the things people can create (with the mechanisms you provide) hit complexity limits sooner. If you are too opinionated you turn people off who might work differently than you but no less effectively.\n\nEarly RoR seems like a nice case study in hitting a sweet spot of opinionated-ness.",
        "user": "UCUSW7WVD",
        "ts": "1675291358.338259",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aGqPm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes. But there's always a good question here of how objective some doctrine separating patterns and anti-patterns is. If you're not opinionated enough then the things people can create (with the mechanisms you provide) hit complexity limits sooner. If you are too opinionated you turn people off who might work differently than you but no less effectively.\n\nEarly RoR seems like a nice case study in hitting a sweet spot of opinionated-ness."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1675283935.164309",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U03TX2GT080",
                    "UJBAJNFLK",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "bdb2e5d7-2658-48e1-b9ee-2406891dc984",
        "type": "message",
        "text": "Slightly related, but someone told me that a \u201cgood tool/framework/language\u201d should allow you to make ugly things",
        "user": "U03TX2GT080",
        "ts": "1675294600.574339",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "860a",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Slightly related, but someone told me that a \u201cgood tool/framework/language\u201d should allow you to make ugly things"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U03TX2GT080",
            "ts": "1675294621.000000"
        },
        "thread_ts": "1675283935.164309",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UBSMEUXAA"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0a3ebb0a-efad-4f17-9fab-d95b9476dca9",
        "type": "message",
        "text": "I think a lot of popular environments are popular because you can do ugly things easier",
        "user": "UBSMEUXAA",
        "ts": "1675299289.934389",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TOsT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think a lot of popular environments are popular because you can do ugly things easier"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1675283935.164309",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "65c70c7b-ca91-4df9-ad7f-9e06ef06d03e",
        "type": "message",
        "text": "that's kind of the whole web",
        "user": "UBSMEUXAA",
        "ts": "1675299306.066359",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vpZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "that's kind of the whole web"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1675283935.164309",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "77c468a6-87c8-4c41-90fd-f168434022ed",
        "type": "message",
        "text": "but also maybe Unity 3D, and maybe Python, and even C :slightly_smiling_face:",
        "user": "UBSMEUXAA",
        "ts": "1675299355.534069",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F2kp5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "but also maybe Unity 3D, and maybe Python, and even C "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1675283935.164309",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "8f79eb85-c064-462f-b34c-903656c10968",
        "type": "message",
        "text": "I'm reading ugly as \"ugly hacks\" or \"ugly code\"",
        "user": "UBSMEUXAA",
        "ts": "1675299383.448149",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t=f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm reading ugly as \"ugly hacks\" or \"ugly code\""
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1675283935.164309",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "ec7d776c-1973-4c06-be9b-de1e82bc1839",
        "type": "message",
        "text": "It's also maybe why it's harder for environments that force you down a prescriptive path or fast path or safe path but are more rigid are maybe not as popular",
        "user": "UBSMEUXAA",
        "ts": "1675299441.715139",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RNrL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's also maybe why it's harder for environments that force you down a prescriptive path or fast path or safe path but are more rigid are maybe not as popular"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1675283935.164309",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "d8d09f6e-bd04-47b3-a260-0a74b1f47a70",
        "type": "message",
        "text": "even if they are more \"correct\" for some value of correctness",
        "user": "UBSMEUXAA",
        "ts": "1675299459.410179",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ha7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "even if they are more \"correct\" for some value of correctness"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1675283935.164309",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "831cebf5-86ed-4de7-bf8f-297e7981f144",
        "type": "message",
        "text": "Popularity comes from whether people could bear to learn them. Fewer people are motivated by perfection than are motivated by progress. Systems that only let you do it right make it harder to do anything at all, and harder to learn, which injures popularity. We learn by trial and error, not by reading docs. Feedback, not guardrails. By the time you know Python well, doing functional programming in Python is easier than learning Haskell. &lt;/opinion&gt;",
        "user": "U02U0AS3J49",
        "ts": "1675305694.068289",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DJp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Popularity comes from whether people could bear to learn them. Fewer people are motivated by perfection than are motivated by progress. Systems that only let you do it right make it harder to do anything at all, and harder to learn, which injures popularity. We learn by trial and error, not by reading docs. Feedback, not guardrails. By the time you know Python well, doing functional programming in Python is easier than learning Haskell. </opinion>"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1675283935.164309",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UBSMEUXAA",
                    "UJBAJNFLK"
                ],
                "count": 2
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U016VUZGUUQ",
                    "UDQBTJ211"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "9fbba7c2-28b8-4547-87a7-3673a66b5e18",
        "type": "message",
        "text": "I think there's room for systems with varying degrees of opinionatedness and encouraging/discouraging certain patterns. For instance, systems deliberately aimed at newer users (consider Scratch) or narrow use cases (e.g. scripting DSL for a particular app) have a good case for being opinionated. Something to build a whole business on, less so, largely for reasons Jason laid out.\n\nAlso, even leaving aside the subjectivity, what constitutes a good or bad pattern is (at least in some cases) dependent on the system and all its interactions, particularly interactions with complicated stuff like human habits and attention. So you don't necessarily know at design time what you want to encourage. Unless, you know, it's a 1-1 analog with a pattern that produces security vulns across ecosystems or somesuch, then you probably want to avoid making that the path of least resistance...",
        "user": "U016VUZGUUQ",
        "ts": "1675311023.070539",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q932F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think there's room for systems with varying degrees of opinionatedness and encouraging/discouraging certain patterns. For instance, systems deliberately aimed at newer users (consider Scratch) or narrow use cases (e.g. scripting DSL for a particular app) have a good case for being opinionated. Something to build a whole business on, less so, largely for reasons Jason laid out.\n\nAlso, even leaving aside the subjectivity, what constitutes a good or bad pattern is (at least in some cases) dependent on the system and all its interactions, particularly interactions with complicated stuff like human habits and attention. So you don't necessarily know at design time what you want to encourage. Unless, you know, it's a 1-1 analog with a pattern that produces security vulns across ecosystems or somesuch, then you probably want to avoid making that the path of least resistance..."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1675283935.164309",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "02d9cdcf-5458-45d6-b74c-f83bbc6f325c",
        "type": "message",
        "text": "I think you can support making ugly things and still be very opionated though. For example Scratch is beginner friendly but anyone that pushes Scratch a little bit beyond its core purpose of teaching the basics of programming is probably doing something ugly with it",
        "user": "UBSMEUXAA",
        "ts": "1675314273.506869",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4Kwyd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think you can support making ugly things and still be very opionated though. For example Scratch is beginner friendly but anyone that pushes Scratch a little bit beyond its core purpose of teaching the basics of programming is probably doing something ugly with it"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1675283935.164309",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "8278e7e9-343e-48e0-b728-4e34f7f5de04",
        "type": "message",
        "text": "And in some cases exploiting poorly defined behavior of the system to get their thing working",
        "user": "UBSMEUXAA",
        "ts": "1675314318.879639",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3QZn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And in some cases exploiting poorly defined behavior of the system to get their thing working"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1675283935.164309",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "a938ef0c-4952-41e9-9dc1-0646cbc4c268",
        "type": "message",
        "text": "Pico8 is another place where people do heinous things even though it is extremely opionated",
        "user": "UBSMEUXAA",
        "ts": "1675314488.149599",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X+xQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Pico8 is another place where people do heinous things even though it is extremely opionated"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1675283935.164309",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "c8db9c91-d24d-49e4-8caa-dddf71247fbe",
        "type": "message",
        "text": "Flash was another thing like that",
        "user": "UBSMEUXAA",
        "ts": "1675314498.108729",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gESo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Flash was another thing like that"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1675283935.164309",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "4ed5dfb6-5065-4339-bca1-7dc47d2fb145",
        "type": "message",
        "text": "But I think you have to have some of that if you're making a programming environment where easy things are easy (you have to have an opinion on what's easy) and hard things are possible (you need to have enough flexibility and tricka to allow for ugliness)",
        "user": "UBSMEUXAA",
        "ts": "1675314625.506649",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NGq0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But I think you have to have some of that if you're making a programming environment where easy things are easy (you have to have an opinion on what's easy) and hard things are possible (you need to have enough flexibility and tricka to allow for ugliness)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1675283935.164309",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "13f40712-5e94-443a-ae14-9c02a7d4e9e1",
        "type": "message",
        "text": "I agree and disagree.  A +tool+ should make anti-patterns painful - yes.  A +tool+ should not make hard things possible.  My ideal +environment+ is one which allows me to choose the most appropriate paradigm/tool for the sub-problem that I want to think about.  That ideal environment should make it easy to compose solutions to uber-problems by plumbing sub-solutions together, regardless of the paradigm used.  To make hard things possible, I should be able to use Assembler (line-oriented or tree-oriented (Assembler, C, etc. vs ASTs, CSTs, Lisp)) and bolt these bits into the overall solution.  The last time I touched such an environment, was the UNIX command-line (#!/bin/bash, #!/usr/bin/env node, #!/usr/bin/env python, etc., etc.).  The problems with the UNIX Shell are (1) it over-specifies (!) the format of IPCs by insisting that the special byte 0x0a terminate every blob of IPC bytes, and, (2) the Shell\u2019s insistence on using 1D notation (sequential characters, leading to the unrealistic restriction that commands have exactly one input and exactly two outputs (the UNIX kernel allows more of each, but the shell does not encourage this)).",
        "user": "UGWUJUZHT",
        "ts": "1675339056.587149",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SUHA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree and disagree.  A +tool+ should make anti-patterns painful - yes.  A +tool+ should not make hard things possible.  My ideal +environment+ is one which allows me to choose the most appropriate paradigm/tool for the sub-problem that I want to think about.  That ideal environment should make it easy to compose solutions to uber-problems by plumbing sub-solutions together, regardless of the paradigm used.  To make hard things possible, I should be able to use Assembler (line-oriented or tree-oriented (Assembler, C, etc. vs ASTs, CSTs, Lisp)) and bolt these bits into the overall solution.  The last time I touched such an environment, was the UNIX command-line (#!/bin/bash, #!/usr/bin/env node, #!/usr/bin/env python, etc., etc.).  The problems with the UNIX Shell are (1) it over-specifies (!) the format of IPCs by insisting that the special byte 0x0a terminate every blob of IPC bytes, and, (2) the Shell\u2019s insistence on using 1D notation (sequential characters, leading to the unrealistic restriction that commands have exactly one input and exactly two outputs (the UNIX kernel allows more of each, but the shell does not encourage this))."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1675283935.164309",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "845449d9-f7b9-4330-9b34-c61aa615262b",
        "type": "message",
        "text": "Yes and yes! :slightly_smiling_face:\n\nYes, we need to have a variety of \u201cparadigms\u201d, which I would call _architectural styles_ at our disposal.\n\n<https://blog.metaobject.com/2019/02/why-architecture-oriented-programming.html>",
        "user": "U017TE5R09M",
        "ts": "1675360122.613349",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5CU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes and yes! "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\n\nYes, we need to have a variety of \u201cparadigms\u201d, which I would call "
                            },
                            {
                                "type": "text",
                                "text": "architectural styles",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " at our disposal.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://blog.metaobject.com/2019/02/why-architecture-oriented-programming.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://blog.metaobject.com/2019/02/why-architecture-oriented-programming.html",
                "service_icon": "https://blog.metaobject.com/favicon.ico",
                "id": 1,
                "original_url": "https://blog.metaobject.com/2019/02/why-architecture-oriented-programming.html",
                "fallback": "Why Architecture Oriented Programming Matters",
                "text": "On re-reading John Hughes influential Why Functional Programming Matters , two things stood out for me. The first was the claim that, \"......",
                "title": "Why Architecture Oriented Programming Matters",
                "title_link": "https://blog.metaobject.com/2019/02/why-architecture-oriented-programming.html",
                "service_name": "blog.metaobject.com"
            }
        ],
        "thread_ts": "1675283935.164309",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "bd293281-d6a8-4c18-bb2e-1ece2456dc25",
        "type": "message",
        "text": "And also yes, although Unix pipes/filters is architecturally/structurally great, and often a better fit than call/return (procedures, functions, methods), it suffers from <https://dl.acm.org/doi/10.1109/32.908958|packaging mismatch>.\n\nThat\u2019s why for <http://objective.st|Objective-S>, I chose <https://dl.acm.org/doi/10.1145/3359619.3359748?cid=81316491227|Polymorphic Write Streams>, which generalise pipes/filters (and can be specialised to pipes/filters in order to interoperate).\n\nAlthough I don\u2019t mention it, that paper already mostly shows why filters are in a sense more fundamental than procedures.",
        "user": "U017TE5R09M",
        "ts": "1675360530.487659",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0Fk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And also yes, although Unix pipes/filters is architecturally/structurally great, and often a better fit than call/return (procedures, functions, methods), it suffers from "
                            },
                            {
                                "type": "link",
                                "url": "https://dl.acm.org/doi/10.1109/32.908958",
                                "text": "packaging mismatch"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nThat\u2019s why for "
                            },
                            {
                                "type": "link",
                                "url": "http://objective.st",
                                "text": "Objective-S"
                            },
                            {
                                "type": "text",
                                "text": ", I chose "
                            },
                            {
                                "type": "link",
                                "url": "https://dl.acm.org/doi/10.1145/3359619.3359748?cid=81316491227",
                                "text": "Polymorphic Write Streams"
                            },
                            {
                                "type": "text",
                                "text": ", which generalise pipes/filters (and can be specialised to pipes/filters in order to interoperate).\n\nAlthough I don\u2019t mention it, that paper already mostly shows why filters are in a sense more fundamental than procedures."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1675283935.164309",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d3592a30-3372-44f1-83f8-fec337f39cce",
        "type": "message",
        "text": "One way Ruby (and Rails by both implementation and shared philosophy) manage is by realizing that if people keep trying to do things a certain way, we should probably help them \u2014 even if the edge cases are really messy.\n\nIn contrast, when functional programming in, say, Haskell, I don't feel laden with accidental complexity, but I do feel burdened with getting all my cases right.",
        "user": "UA14TGLTC",
        "ts": "1675414800.471099",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LNWZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One way Ruby (and Rails by both implementation and shared philosophy) manage is by realizing that if people keep trying to do things a certain way, we should probably help them \u2014 even if the edge cases are really messy.\n\nIn contrast, when functional programming in, say, Haskell, I don't feel laden with accidental complexity, but I do feel burdened with getting all my cases right."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1675283935.164309",
        "parent_user_id": "ULM3U6275"
    }
]