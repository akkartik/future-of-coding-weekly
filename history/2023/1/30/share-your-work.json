[
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "Just finished listening\u2026great!\n\nSome thoughts on the whole \u201cdrawing the interface\u201d vs. \u201cbuilding a machine arranging widgets using a grammar\u201d:\n\n1. Widgets vs. drawn UI\nWe used to actually be much more in the \u201cdraw the interface\u201d space, basically Views that draw what they have to display. Widgets were added later on for standard interactive elements such as text boxes and sliders etc.\n\nAnd there was a clear distinction, in that for most applications, the dynamic content (document) would be drawn dynamically using a custom view, whereas ancillary/auxiliary information (inspectors etc.) would be fixed layouts of widgets, which might be dynamically enabled or disabled.\n\nBut the whole structure of the UI was largely fixed (dynamic content inside the views + widgets in static layouts).\n\nAlthough there was a bit of a trend towards widgets, that trend really took off with the Web and the iPhone.\n\nWith the iPhone, the content both got more dynamic, partly due to latency hiding with animations, partly due to the small screen making it necessary to hide unused UI, rather than juts disable it, and at the same time our tooling got more static, with UIViews that have dynamic content discouraged and preference given to static layers that are moved in and out and around.\n\nWith the DOM, you really don\u2019t have many options except to change the structure if you want dynamic content (Canvas notwithstanding).\n\nSo we\u2019ve been moving more and more towards a situation where even purely informational applications display their information via these static/rigid widget sets, at the same time that they information got more dynamic.",
        "user": "U017TE5R09M",
        "ts": "1675090374.403969",
        "thread_ts": "1670554845.886979",
        "root": {
            "client_msg_id": "b4e7257c-3bee-43b0-a502-e4d8c6b9ebe2",
            "type": "message",
            "text": "Future of Coding \u2022 Episode 60\nBret Victor \u2022 Magic Ink\n:link: <https://futureofcoding.org/episodes/060>\n\nHey, ya'll ever hear of this guy? He posts some _wild_ stuff. Feels like it might be relevant to the folks here. Maybe a little fringe. For instance, he thinks that software could be \u2014 get this \u2014 _better!_ You might be surprised to learn that I also think software could be better. Radical idea, yes, but it feels like it's finally time for us to take the idea seriously.\n\nNext month, we're reading Peter Naur's Programming as Theory Building, with a little bit of Gilbert Ryle's The Concept of Mind as background.",
            "user": "UC2A2ARPT",
            "ts": "1670554845.886979",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "Ii=70",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Future of Coding \u2022 Episode 60\nBret Victor \u2022 Magic Ink\n"
                                },
                                {
                                    "type": "emoji",
                                    "name": "link",
                                    "unicode": "1f517"
                                },
                                {
                                    "type": "text",
                                    "text": " "
                                },
                                {
                                    "type": "link",
                                    "url": "https://futureofcoding.org/episodes/060"
                                },
                                {
                                    "type": "text",
                                    "text": "\n\nHey, ya'll ever hear of this guy? He posts some "
                                },
                                {
                                    "type": "text",
                                    "text": "wild ",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": "stuff. Feels like it might be relevant to the folks here. Maybe a little fringe. For instance, he thinks that software could be \u2014 get this \u2014 "
                                },
                                {
                                    "type": "text",
                                    "text": "better!",
                                    "style": {
                                        "italic": true
                                    }
                                },
                                {
                                    "type": "text",
                                    "text": " You might be surprised to learn that I also think software could be better. Radical idea, yes, but it feels like it's finally time for us to take the idea seriously.\n\nNext month, we're reading Peter Naur's Programming as Theory Building, with a little bit of Gilbert Ryle's The Concept of Mind as background."
                                }
                            ]
                        }
                    ]
                }
            ],
            "team": "T5TCAFTA9",
            "thread_ts": "1670554845.886979",
            "reply_count": 6,
            "reply_users_count": 3,
            "latest_reply": "1675098024.595069",
            "reply_users": [
                "U03CEGR3HSL",
                "UA14TGLTC",
                "U017TE5R09M"
            ],
            "is_locked": false,
            "subscribed": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qSuR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just finished listening\u2026great!\n\nSome thoughts on the whole \u201cdrawing the interface\u201d vs. \u201cbuilding a machine arranging widgets using a grammar\u201d:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Widgets vs. drawn UI"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWe used to actually be much more in the \u201cdraw the interface\u201d space, basically Views that draw what they have to display. Widgets were added later on for standard interactive elements such as text boxes and sliders etc.\n\nAnd there was a clear distinction, in that for most applications, the dynamic content (document) would be drawn dynamically using a custom view, whereas ancillary/auxiliary information (inspectors etc.) would be fixed layouts of widgets, which might be dynamically enabled or disabled.\n\nBut the whole structure of the UI was largely fixed (dynamic content inside the views + widgets in static layouts).\n\nAlthough there was a bit of a trend towards widgets, that trend really took off with the Web and the iPhone.\n\nWith the iPhone, the content both got more dynamic, partly due to latency hiding with animations, partly due to the small screen making it necessary to hide unused UI, rather than juts disable it, and at the same time our tooling got more static, with UIViews that have dynamic content discouraged and preference given to static layers that are moved in and out and around.\n\nWith the DOM, you really don\u2019t have many options except to change the structure if you want dynamic content (Canvas notwithstanding).\n\nSo we\u2019ve been moving more and more towards a situation where even purely informational applications display their information via these static/rigid widget sets, at the same time that they information got more dynamic."
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "58bb16fe-757c-4c15-814c-575eff680364",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8926bfdb-6c49-4ce0-9489-707113a02047",
        "type": "message",
        "text": "I've implemented Effect handlers in my language <https://vimeo.com/794219638>\nThis is now the whole feature set I wanted to version 2 of my language. Now all that's left is to actually use it",
        "user": "U03LMRE6MQE",
        "ts": "1675109516.195169",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dX7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've implemented Effect handlers in my language "
                            },
                            {
                                "type": "link",
                                "url": "https://vimeo.com/794219638"
                            },
                            {
                                "type": "text",
                                "text": "\nThis is now the whole feature set I wanted to version 2 of my language. Now all that's left is to actually use it"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://vimeo.com/794219638",
                "video_html": "<iframe src=\"https://player.vimeo.com/video/794219638?h=61d39dcf1b&amp;autoplay=1&amp;app_id=122963\" width=\"400\" height=\"225\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen title=\"30/01/2023, Effect Handlers\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "thumb_url": "https://i.vimeocdn.com/video/1599338787-c2856cb7a02d3d82fec9caf234f9b3dda832ff93849d29b09ca293d24a252b66-d_295x166",
                "thumb_width": 295,
                "thumb_height": 166,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/vimeo.png",
                "id": 1,
                "original_url": "https://vimeo.com/794219638",
                "fallback": "Vimeo Video: 30/01/2023, Effect Handlers",
                "title": "30/01/2023, Effect Handlers",
                "title_link": "https://vimeo.com/794219638",
                "author_name": "crowdhailer",
                "author_link": "https://vimeo.com/crowdhailer",
                "service_name": "Vimeo",
                "service_url": "https://vimeo.com/"
            }
        ]
    }
]