[
    {
        "client_msg_id": "8a3abad1-a0f6-4bca-aaf0-c6e8e5b8ccbd",
        "type": "message",
        "text": "Future of Coding \u2022 Episode 61\nPeter Naur \u2022 Programming as Theory Building\n:heart_hands: <https://futureofcoding.org/episodes/061>\n\nWhat a bop! This paper offers a compelling explanation for many of the difficulties we encounter when maintaining large, long-lived programs. It makes us question the value of source code notation, commenting, documentation, and other artifacts of the programming activity, especially when it comes to communicating the ideas behind a program between different people working on it. When we work on our FoC projects, are we even understanding the right misunderstandings of our understandings? To make sense of that nonsense, we turn to the master of terrible bulls#$% (Ivan's take, not Jimmy's) \u2014 Gilbert Ryle!\n\nNext month, we're honouring the recently-deceased Fred Brooks by dancing on (or, perhaps, with) Mythical Man-Month and No Silver Bullet.",
        "user": "UC2A2ARPT",
        "ts": "1673042540.979739",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MvuL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Future of Coding \u2022 Episode 61\nPeter Naur \u2022 Programming as Theory Building\n"
                            },
                            {
                                "type": "emoji",
                                "name": "heart_hands",
                                "unicode": "1faf6"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.org/episodes/061"
                            },
                            {
                                "type": "text",
                                "text": "\n\nWhat a bop! This paper offers a compelling explanation for many of the difficulties we encounter when maintaining large, long-lived programs. It makes us question the value of source code notation, commenting, documentation, and other artifacts of the programming activity, especially when it comes to communicating the ideas behind a program between different people working on it. When we work on our FoC projects, are we even understanding the right misunderstandings of our understandings? To make sense of that nonsense, we turn to the master of terrible bulls#$% (Ivan's take, not Jimmy's) \u2014 Gilbert Ryle!\n\nNext month, we're honouring the recently-deceased Fred Brooks by dancing on (or, perhaps, with) Mythical Man-Month and No Silver Bullet."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1673042540.979739",
        "reply_count": 4,
        "reply_users_count": 2,
        "latest_reply": "1673206040.609059",
        "reply_users": [
            "U03CEGR3HSL",
            "U0378MDUG1Y"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "tada",
                "users": [
                    "U03CEGR3HSL",
                    "U0123H7JRDM",
                    "UJBAJNFLK",
                    "U04AMFXENTF",
                    "U013ZLJARC7",
                    "UAJ9DV971"
                ],
                "count": 6
            }
        ]
    },
    {
        "client_msg_id": "c6de6541-64da-4823-b18e-350b24577a2d",
        "type": "message",
        "text": "I just started the download. I can't wait to have time to listen!",
        "user": "U03CEGR3HSL",
        "ts": "1673042938.579059",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O8tTS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just started the download. I can't wait to have time to listen!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1673042540.979739",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b96982a8-a0e5-4a30-b402-f7bea12d8c56",
        "type": "message",
        "text": "This was a great listen, and I think it's your best episode since the reboot. I've seen this paper and its thesis mangled many times and I think you both did a good job of putting in the work to understand it and find ways to explain it.\n\nMy boring response to Ivan's question about why one would treat a theory as a single object is that it is easier to talk about that way to try and explain the concept to someone who hasn't heard it before, much like all of the weightless massless pulleys one encounters in a physics class.\n\nAs usual, the best parts are those where you are working to understand and/or explain the author's intent and the worst parts are those where you criticize the author. Nobody's perfect, but very few of us who study the very best works of the brightest minds in our field will be qualified to distinguish the difference between an error and a point that we do not understand. Your discussions are both more enlightening and more respectable when you approach these masters from the perspective of students, rather than critics.",
        "user": "U03CEGR3HSL",
        "ts": "1673205162.790269",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+ty",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This was a great listen, and I think it's your best episode since the reboot. I've seen this paper and its thesis mangled many times and I think you both did a good job of putting in the work to understand it and find ways to explain it.\n\nMy boring response to Ivan's question about why one would treat a theory as a single object is that it is easier to talk about that way to try and explain the concept to someone who hasn't heard it before, much like all of the weightless massless pulleys one encounters in a physics class.\n\nAs usual, the best parts are those where you are working to understand and/or explain the author's intent and the worst parts are those where you criticize the author. Nobody's perfect, but very few of us who study the very best works of the brightest minds in our field will be qualified to distinguish the difference between an error and a point that we do not understand. Your discussions are both more enlightening and more respectable when you approach these masters from the perspective of students, rather than critics."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1673042540.979739",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "01F3019F-0D3B-4FD3-9E9D-C822E8E63126",
        "type": "message",
        "text": "Im curious how the use of programming paradigms relates to theory building. Paradigms (particularly the combination of them) seem to be part of the foundation in which we build more domain-specific theories off of. :thinking_face: ",
        "user": "U0378MDUG1Y",
        "ts": "1673205574.397829",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qNQ9y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Im curious how the use of programming paradigms relates to theory building. Paradigms (particularly the combination of them) seem to be part of the foundation in which we build more domain-specific theories off of. "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1673042540.979739",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "c98505ea-4ccd-4036-9fcc-11e541df23d7",
        "type": "message",
        "text": "<@U0378MDUG1Y>  I think that's a good example of Ivan's point about the theory of a program not being a single object, but rather an amorpheus and growing mass, assuming I understand him correctly.\n\nI would speculate that the theory of any given program incorporates within it to varying degrees some portion of the theory of the associated language, paradigms, operating system, operating environment, and to whatever extent the program maps to objects in the real world, the theory of manipulating those real-world objects.\n\nThere was recently a great blog post linked to on Hacker News about the problems with on-demand learning. <https://www.jernesto.com/articles/learning.html|https://www.jernesto.com/articles/learning.html>\n\nOne problem that I did not see addressed in that article is that if you just look up answers for specific needs, you will not tend to develop a theory of how to apply the language, libraries, paradigms etc. that you are using, and to borrow a phrase from Brooks that I'm sure we will hear in the next episode, without possessing your own theory your code is unlikely to possess conceptual integrity.",
        "user": "U03CEGR3HSL",
        "ts": "1673206040.609059",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SUYc0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U0378MDUG1Y"
                            },
                            {
                                "type": "text",
                                "text": "  I think that's a good example of Ivan's point about the theory of a program not being a single object, but rather an amorpheus and growing mass, assuming I understand him correctly.\n\nI would speculate that the theory of any given program incorporates within it to varying degrees some portion of the theory of the associated language, paradigms, operating system, operating environment, and to whatever extent the program maps to objects in the real world, the theory of manipulating those real-world objects.\n\nThere was recently a great blog post linked to on Hacker News about the problems with on-demand learning. "
                            },
                            {
                                "type": "link",
                                "url": "https://www.jernesto.com/articles/learning.html",
                                "text": "https://www.jernesto.com/articles/learning.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\nOne problem that I did not see addressed in that article is that if you just look up answers for specific needs, you will not tend to develop a theory of how to apply the language, libraries, paradigms etc. that you are using, and to borrow a phrase from Brooks that I'm sure we will hear in the next episode, without possessing your own theory your code is unlikely to possess conceptual integrity."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U03CEGR3HSL",
            "ts": "1673206582.000000"
        },
        "thread_ts": "1673042540.979739",
        "parent_user_id": "UC2A2ARPT"
    }
]