[
    {
        "client_msg_id": "f107a264-137b-4e8d-a42d-bdda79723645",
        "type": "message",
        "text": "Anyone planning to read anything interesting and future of code adjacent this weekend?",
        "user": "UMQ6LR9NZ",
        "ts": "1681503432.978039",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aY8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Anyone planning to read anything interesting and future of code adjacent this weekend?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1681503432.978039",
        "reply_count": 12,
        "reply_users_count": 5,
        "latest_reply": "1681630401.536129",
        "reply_users": [
            "UC2A2ARPT",
            "UMQ6LR9NZ",
            "U5STGTB3J",
            "UJBAJNFLK",
            "U01JNTE35QS"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "f3ddd896-559e-47be-85cb-68a35358a3ac",
        "type": "message",
        "text": "I mean, my particular FoC interests are quite visual in nature, and so I'm just picking up WebGPU now that it's about to ship in Chrome. So for a certain perhaps _stretched_ definition of \"FoC adjacent\", I'll be reading <http://webgpufundamentals.org|webgpufundamentals.org> (by <@UC6997THT>) and perhaps some stuff about ray tracing.\n\nYou?",
        "user": "UC2A2ARPT",
        "ts": "1681514567.923089",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FqHc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I mean, my particular FoC interests are quite visual in nature, and so I'm just picking up WebGPU now that it's about to ship in Chrome. So for a certain perhaps "
                            },
                            {
                                "type": "text",
                                "text": "stretched",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " definition of \"FoC adjacent\", I'll be reading "
                            },
                            {
                                "type": "link",
                                "url": "http://webgpufundamentals.org",
                                "text": "webgpufundamentals.org"
                            },
                            {
                                "type": "text",
                                "text": " (by "
                            },
                            {
                                "type": "user",
                                "user_id": "UC6997THT"
                            },
                            {
                                "type": "text",
                                "text": ") and perhaps some stuff about ray tracing.\n\nYou?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1681514586.000000"
        },
        "thread_ts": "1681503432.978039",
        "parent_user_id": "UMQ6LR9NZ",
        "reactions": [
            {
                "name": "ribbit",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            },
            {
                "name": "clap",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UJ6LDMMN0"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "2b8aa58d-707c-4f16-85e1-ac68deb141f6",
        "type": "message",
        "text": "I\u2019ve been going down an APL rabbit hole, lately\u2026so, maybe that.",
        "user": "UMQ6LR9NZ",
        "ts": "1681518023.266279",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kODcE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019ve been going down an APL rabbit hole, lately\u2026so, maybe that."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1681503432.978039",
        "parent_user_id": "UMQ6LR9NZ",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "fist",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "aa74bd20-1cd4-4479-9dca-8846e900760f",
        "type": "message",
        "text": "Ah yes, Apple. Good programming language, that.\n\n(Sorry \u2014 reference to next month's episode. Just hide it under your hat.)",
        "user": "UC2A2ARPT",
        "ts": "1681519607.378439",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8RbW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah yes, Apple. Good programming language, that.\n\n(Sorry \u2014 reference to next month's episode. Just hide it under your hat.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1681519645.000000"
        },
        "thread_ts": "1681503432.978039",
        "parent_user_id": "UMQ6LR9NZ",
        "reactions": [
            {
                "name": "womans_hat",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "A68ACAF6-5900-44F0-9845-3C859F208BFF",
        "type": "message",
        "text": "<@UMQ6LR9NZ> I\u2019d like to learn more about your APL weekend \u2014 what are you reading? Did you find a good resource that talks about an APL _implementation_ (apart from the original Iverson papers)?",
        "user": "U5STGTB3J",
        "ts": "1681549086.000889",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9Lzgh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UMQ6LR9NZ"
                            },
                            {
                                "type": "text",
                                "text": " I\u2019d like to learn more about your APL weekend \u2014 what are you reading? Did you find a good resource that talks about an APL "
                            },
                            {
                                "type": "text",
                                "text": "implementation",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": " (apart from the original Iverson papers)?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1681503432.978039",
        "parent_user_id": "UMQ6LR9NZ"
    },
    {
        "client_msg_id": "6B7BA5EB-0AEC-4CDB-A0D9-4D6F18041B9F",
        "type": "message",
        "text": "<@U5STGTB3J> I haven\u2019t read anything about implementations, but I have looked at the few open source ones I\u2019ve run across and found those pretty interesting. \n\n\u2022 <http://kona.github.io/#/|Kona>\n\u2022 <https://github.com/JohnEarnest/ok|oK>\n\u2022 <https://github.com/JohnEarnest/Decker|lil> (embedded in the larger decker project)\n\u2022 <https://mlochbaum.github.io/BQN/|bqn> \nI\u2019ve also found the J wiki and the kdb+ and q websites really helpful. ",
        "user": "UMQ6LR9NZ",
        "ts": "1681557820.768129",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M+Vx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " I haven\u2019t read anything about implementations, but I have looked at the few open source ones I\u2019ve run across and found those pretty interesting. \n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "http://kona.github.io/#/",
                                        "text": "Kona"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https://github.com/JohnEarnest/ok",
                                        "text": "oK"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https://github.com/JohnEarnest/Decker",
                                        "text": "lil"
                                    },
                                    {
                                        "type": "text",
                                        "text": " (embedded in the larger decker project)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https://mlochbaum.github.io/BQN/",
                                        "text": "bqn"
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "offset": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI\u2019ve also found the J wiki and the kdb+ and q websites really helpful. "
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UMQ6LR9NZ",
            "ts": "1681558211.000000"
        },
        "thread_ts": "1681503432.978039",
        "parent_user_id": "UMQ6LR9NZ",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5STGTB3J"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0b8275b4-d3b3-4466-945b-2d134557153f",
        "type": "message",
        "text": "Also interesting in my opinion: APRIL, an APL dialect embedded in Common Lisp (<https://github.com/phantomics/april>). I see APL more as a DSL, so it makes sense to embed it into a wider ecosystem.",
        "user": "UJBAJNFLK",
        "ts": "1681565769.167159",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fJGo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also interesting in my opinion: APRIL, an APL dialect embedded in Common Lisp ("
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/phantomics/april"
                            },
                            {
                                "type": "text",
                                "text": "). I see APL more as a DSL, so it makes sense to embed it into a wider ecosystem."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1681503432.978039",
        "parent_user_id": "UMQ6LR9NZ",
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UMQ6LR9NZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9105CA2B-8889-4EA6-B339-23AC122286B7",
        "type": "message",
        "text": "I can see why it comes across as a DSL, but I\u2019m mostly interested in it for its fundamental design around arrays as the primary data structure. Kind of like Lisp with lists. Commercial implementations ride on that wave because it gives them interesting ways to optimize for parallel execution. But I think it\u2019s an interesting design decision to basically treat everything as a collection and kind of look at a single scalar as an \u201cexception\u201d and design a language around that.",
        "user": "U5STGTB3J",
        "ts": "1681567071.987839",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7+Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I can see why it comes across as a DSL, but I\u2019m mostly interested in it for its fundamental design around arrays as the primary data structure. Kind of like Lisp with lists. Commercial implementations ride on that wave because it gives them interesting ways to optimize for parallel execution. But I think it\u2019s an interesting design decision to basically treat everything as a collection and kind of look at a single scalar as an \u201cexception\u201d and design a language around that."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1681503432.978039",
        "parent_user_id": "UMQ6LR9NZ"
    },
    {
        "client_msg_id": "01a39960-9235-4fc9-8242-89c0489e151d",
        "type": "message",
        "text": "Arrays as a primary data structure are interesting indeed, but the problem of the APL family has always been that arrays are its _only_ data structure (in contrast to Lisp, that has other data structures besides lists). Nested/boxed arrays were a big step forward, but they remain limited and, together with the weak abstraction facilities, make APL a pain to use for many tasks. Add to this that typical implementations don't care about interfacing to the rest of the world, and you easily trap yourself in an island that is fascinating but limited.\nHowever, as you say, the notion of plain values being a special case (\"rank 0\") of a uniform collection type is interesting and pratically relevant. It's what makes it difficult to implement APL ideas in other languages. This has been the main struggle in the early days of Numerical Python, when we tried to make Python scalars work as rank-0 arrays (and mostly failed). Later NumPy versions introduced its own scalar types for that reason, which have then been an eternal source of confusion for many users (\"why is an element of a float array not a float?\").",
        "user": "UJBAJNFLK",
        "ts": "1681568673.227079",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cjv6P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Arrays as a primary data structure are interesting indeed, but the problem of the APL family has always been that arrays are its "
                            },
                            {
                                "type": "text",
                                "text": "only",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " data structure (in contrast to Lisp, that has other data structures besides lists). Nested/boxed arrays were a big step forward, but they remain limited and, together with the weak abstraction facilities, make APL a pain to use for many tasks. Add to this that typical implementations don't care about interfacing to the rest of the world, and you easily trap yourself in an island that is fascinating but limited.\nHowever, as you say, the notion of plain values being a special case (\"rank 0\") of a uniform collection type is interesting and pratically relevant. It's what makes it difficult to implement APL ideas in other languages. This has been the main struggle in the early days of Numerical Python, when we tried to make Python scalars work as rank-0 arrays (and mostly failed). Later NumPy versions introduced its own scalar types for that reason, which have then been an eternal source of confusion for many users (\"why is an element of a float array not a float?\")."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1681503432.978039",
        "parent_user_id": "UMQ6LR9NZ"
    },
    {
        "client_msg_id": "dd794cc5-58c3-4650-bfc4-1f1408a1b8a2",
        "type": "message",
        "text": "k has dictionaries, and derivatives like Kerf even added tables as first class constructs. Also Russ Cox solving the advent of code using ivy is pretty interesting\u2026 <https://www.youtube.com/watch?v=ek1yjc9sSag>",
        "user": "U01JNTE35QS",
        "ts": "1681572379.009039",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IyLh4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "k has dictionaries, and derivatives like Kerf even added tables as first class constructs. Also Russ Cox solving the advent of code using ivy is pretty interesting\u2026 "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=ek1yjc9sSag"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://www.youtube.com/watch?v=ek1yjc9sSag",
                "thumb_url": "https://i.ytimg.com/vi/ek1yjc9sSag/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/ek1yjc9sSag?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"AoC 2021 Day 1 using Ivy\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=ek1yjc9sSag",
                "fallback": "YouTube Video: AoC 2021 Day 1 using Ivy",
                "title": "AoC 2021 Day 1 using Ivy",
                "title_link": "https://www.youtube.com/watch?v=ek1yjc9sSag",
                "author_name": "Russ Cox",
                "author_link": "https://www.youtube.com/@rscgolang",
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/"
            }
        ],
        "thread_ts": "1681503432.978039",
        "parent_user_id": "UMQ6LR9NZ"
    },
    {
        "client_msg_id": "b669d99a-e5aa-49f5-8afd-5d22b684f942",
        "type": "message",
        "text": "Aaron Hsu\u2019s thesis is interesting reading as well..",
        "user": "U01JNTE35QS",
        "ts": "1681572454.135039",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A=c1P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Aaron Hsu\u2019s thesis is interesting reading as well.."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1681503432.978039",
        "parent_user_id": "UMQ6LR9NZ"
    },
    {
        "client_msg_id": "d09241e2-7164-47a6-95a8-8a57850f3b47",
        "type": "message",
        "text": "<https://scholarworks.iu.edu/dspace/handle/2022/24749>",
        "user": "U01JNTE35QS",
        "ts": "1681572456.329009",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wsJm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://scholarworks.iu.edu/dspace/handle/2022/24749"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1681503432.978039",
        "parent_user_id": "UMQ6LR9NZ"
    },
    {
        "client_msg_id": "06ec9a85-7b7a-4d85-bfb8-ed693f357d63",
        "type": "message",
        "text": "Thanks! I haven't played with K yet, nor any of its derivatives. And Ivy looks interesting as well as a pragmatic tool that makes APL more accessible in a command-line environment.",
        "user": "UJBAJNFLK",
        "ts": "1681630401.536129",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CJ+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks! I haven't played with K yet, nor any of its derivatives. And Ivy looks interesting as well as a pragmatic tool that makes APL more accessible in a command-line environment."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1681503432.978039",
        "parent_user_id": "UMQ6LR9NZ"
    }
]