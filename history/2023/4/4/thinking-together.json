[
    {
        "client_msg_id": "adf74b14-9202-4255-a5e3-eadbf2904a6f",
        "type": "message",
        "text": "I've been thinking about how the state of a running program could be modeled as the definition of a program changing over time. This seems closely related to \"image\" based programming systems, right? Does anyone have thoughts or reading related to this?\n\n(I got there thinking about the branchable/forkable database trend which tries to tie program version to state version.)",
        "user": "UKB1S7ZMY",
        "ts": "1680622758.013259",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n97Pe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been thinking about how the state of a running program could be modeled as the definition of a program changing over time. This seems closely related to \"image\" based programming systems, right? Does anyone have thoughts or reading related to this?\n\n(I got there thinking about the branchable/forkable database trend which tries to tie program version to state version.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UKB1S7ZMY",
            "ts": "1680623133.000000"
        },
        "thread_ts": "1680622758.013259",
        "reply_count": 11,
        "reply_users_count": 7,
        "latest_reply": "1680764953.591719",
        "reply_users": [
            "UDQBTJ211",
            "U050XKVAGKF",
            "U016VUZGUUQ",
            "UCGAK10LS",
            "U013ZLJARC7",
            "UKB1S7ZMY",
            "U0296ACR13M"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "9f99bf65-5c07-4dc8-8e13-170f36354bf5",
        "type": "message",
        "text": "I'm not sure I follow. Does the definition of a program change at runtime?\n\nDo you mean to include user inputs as part of the definition?",
        "user": "UDQBTJ211",
        "ts": "1680632462.878839",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EdR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not sure I follow. Does the definition of a program change at runtime?\n\nDo you mean to include user inputs as part of the definition?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UDQBTJ211",
            "ts": "1680632505.000000"
        },
        "thread_ts": "1680622758.013259",
        "parent_user_id": "UKB1S7ZMY"
    },
    {
        "client_msg_id": "7842E3B9-A285-4FE5-A285-6062201C784D",
        "type": "message",
        "text": "Would you consider something like Redux or Recoil and a React SPA as an image? ",
        "user": "U050XKVAGKF",
        "ts": "1680632687.062039",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gbcl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Would you consider something like Redux or Recoil and a React SPA as an image? "
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1680622758.013259",
        "parent_user_id": "UKB1S7ZMY"
    },
    {
        "client_msg_id": "649dece9-4714-44a6-9a8c-a80108051bed",
        "type": "message",
        "text": "I do think about this a lot, particularly in the context of partial evaluation, where (in short) you can supply part of the arguments to a program and get a result program that has all the consequences of that argument baked in (as opposed to partial application, where you supplying an argument probably just builds a closure).\n\nI mean, a program changing over time is kind of how beta reduction is technically defined, right? Transformation from one lambda term to the next. The problem is, implementations using that strategy aren't (IMO) really feasible. They're not efficient, and there tends to be ambiguity as to the next step, where IIRC different choices determine whether the thing even converges.\n\nOne of my goals is a computational formalism that efficiently supports partial evaluation and this sort of program -&gt; program mindset in general. (Key point: you want to be able to output \"data\", therefore data is a program)\n\nI'm not precisely sure what you mean by the forkable database trend. Can you give an example? I feel like I've heard of a couple different things that answer that description in very different ways.",
        "user": "U016VUZGUUQ",
        "ts": "1680642020.570359",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rq5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I do think about this a lot, particularly in the context of partial evaluation, where (in short) you can supply part of the arguments to a program and get a result program that has all the consequences of that argument baked in (as opposed to partial application, where you supplying an argument probably just builds a closure).\n\nI mean, a program changing over time is kind of how beta reduction is technically defined, right? Transformation from one lambda term to the next. The problem is, implementations using that strategy aren't (IMO) really feasible. They're not efficient, and there tends to be ambiguity as to the next step, where IIRC different choices determine whether the thing even converges.\n\nOne of my goals is a computational formalism that efficiently supports partial evaluation and this sort of program -> program mindset in general. (Key point: you want to be able to output \"data\", therefore data is a program)\n\nI'm not precisely sure what you mean by the forkable database trend. Can you give an example? I feel like I've heard of a couple different things that answer that description in very different ways."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U016VUZGUUQ",
            "ts": "1680642074.000000"
        },
        "thread_ts": "1680622758.013259",
        "parent_user_id": "UKB1S7ZMY"
    },
    {
        "client_msg_id": "2bf19fbe-a65a-4d8a-b3c5-23da8005b9bf",
        "type": "message",
        "text": "<@UKB1S7ZMY> I <https://twitter.com/NickSmit_/status/1563114360360222720|tweeted about this> a while ago. At some point in the future, I'd like to develop a programming environment based on this principle.",
        "user": "UCGAK10LS",
        "ts": "1680654191.497209",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Odw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKB1S7ZMY"
                            },
                            {
                                "type": "text",
                                "text": " I "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/NickSmit_/status/1563114360360222720",
                                "text": "tweeted about this"
                            },
                            {
                                "type": "text",
                                "text": " a while ago. At some point in the future, I'd like to develop a programming environment based on this principle."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://twitter.com/NickSmit_/status/1563114360360222720",
                "ts": 1661510479,
                "id": 1,
                "original_url": "https://twitter.com/NickSmit_/status/1563114360360222720",
                "fallback": "<https://twitter.com/NickSmit_|@NickSmit_>: Something I\u2019ve recently realized: a running program is just a static program with some extra data (an event history). There\u2019s no reason we shouldn\u2019t be able to fork, edit, undo &amp; redo running programs (and archive them) just as we do with static ones.",
                "text": "Something I\u2019ve recently realized: a running program is just a static program with some extra data (an event history). There\u2019s no reason we shouldn\u2019t be able to fork, edit, undo &amp; redo running programs (and archive them) just as we do with static ones.",
                "author_name": "Nick Smith",
                "author_link": "https://twitter.com/NickSmit_/status/1563114360360222720",
                "author_icon": "https://pbs.twimg.com/profile_images/1626448356049571842/LFXhkiZC_normal.jpg",
                "author_subname": "@NickSmit_",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "thread_ts": "1680622758.013259",
        "parent_user_id": "UKB1S7ZMY"
    },
    {
        "client_msg_id": "4eafb499-d255-4575-b780-bca41293a1f5",
        "type": "message",
        "text": "Do you mean this sort of thing? <https://www.youtube.com/watch?v=72y2EC5fkcE>",
        "user": "U013ZLJARC7",
        "ts": "1680690146.248489",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u+V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do you mean this sort of thing? "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=72y2EC5fkcE"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://www.youtube.com/watch?v=72y2EC5fkcE",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "thumb_url": "https://i.ytimg.com/vi/72y2EC5fkcE/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/72y2EC5fkcE?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen title=\"Tomorrow Corporation Tech Demo\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=72y2EC5fkcE",
                "fallback": "YouTube Video: Tomorrow Corporation Tech Demo",
                "title": "Tomorrow Corporation Tech Demo",
                "title_link": "https://www.youtube.com/watch?v=72y2EC5fkcE",
                "author_name": "retrogameinternals",
                "author_link": "https://www.youtube.com/@retrogameinternals4707",
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/"
            }
        ],
        "thread_ts": "1680622758.013259",
        "parent_user_id": "UKB1S7ZMY"
    },
    {
        "client_msg_id": "2754b1fb-8bd4-4b05-b21a-2e248588aa52",
        "type": "message",
        "text": "<@U050XKVAGKF> An image in this sense would contain both code and the state. It's like your editor is a whole OS that you can modify at runtime: <https://en.wikipedia.org/wiki/Smalltalk#Image-based_persistence>",
        "user": "UKB1S7ZMY",
        "ts": "1680700640.141419",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w54",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U050XKVAGKF"
                            },
                            {
                                "type": "text",
                                "text": " An image in this sense would contain both code and the state. It's like your editor is a whole OS that you can modify at runtime: "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Smalltalk#Image-based_persistence"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1680622758.013259",
        "parent_user_id": "UKB1S7ZMY"
    },
    {
        "client_msg_id": "7cca64ee-b500-4436-abaf-30604896f474",
        "type": "message",
        "text": "I think the difficulty I have with this is that there's no real model of change; it happens in this uncontrolled imperative kind of way that makes it hard to do version control and the things <@UCGAK10LS> is talking about",
        "user": "UKB1S7ZMY",
        "ts": "1680700766.397499",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5Cmw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the difficulty I have with this is that there's no real model of change; it happens in this uncontrolled imperative kind of way that makes it hard to do version control and the things "
                            },
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " is talking about"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1680622758.013259",
        "parent_user_id": "UKB1S7ZMY"
    },
    {
        "client_msg_id": "86179bd5-68ae-42d5-9ffe-0d416ec1ba1f",
        "type": "message",
        "text": "Maybe you want event sourcing baked in to the environment?  <https://martinfowler.com/eaaDev/EventSourcing.html|https://martinfowler.com/eaaDev/EventSourcing.html>\n\nYou could explicitly treat the input as an event stream, and treat the program as a reducer over that stream. It does get interesting when that input depends on program output that depends on previous input.",
        "user": "U016VUZGUUQ",
        "ts": "1680701230.373259",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+tSd5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe you want event sourcing baked in to the environment?  "
                            },
                            {
                                "type": "link",
                                "url": "https://martinfowler.com/eaaDev/EventSourcing.html",
                                "text": "https://martinfowler.com/eaaDev/EventSourcing.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\nYou could explicitly treat the input as an event stream, and treat the program as a reducer over that stream. It does get interesting when that input depends on program output that depends on previous input."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://martinfowler.com/eaaDev/EventSourcing.html",
                "service_icon": "https://martinfowler.com/favicon.ico",
                "thumb_url": "https://martinfowler.com/logo-sq.png",
                "thumb_width": 144,
                "thumb_height": 144,
                "id": 1,
                "original_url": "https://martinfowler.com/eaaDev/EventSourcing.html",
                "fallback": "martinfowler.com: Event Sourcing",
                "text": "Capture all changes to an application state as a sequence of events.",
                "title": "Event Sourcing",
                "title_link": "https://martinfowler.com/eaaDev/EventSourcing.html",
                "service_name": "martinfowler.com"
            }
        ],
        "thread_ts": "1680622758.013259",
        "parent_user_id": "UKB1S7ZMY"
    },
    {
        "client_msg_id": "2705125a-2f40-46cf-bb42-217bb1dfcbe6",
        "type": "message",
        "text": "<@UCGAK10LS> love that thread!",
        "user": "UKB1S7ZMY",
        "ts": "1680701309.156079",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8iKx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " love that thread!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1680622758.013259",
        "parent_user_id": "UKB1S7ZMY",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "58e97c2a-652f-4ef8-8b2c-d477af681ecf",
        "type": "message",
        "text": "<@U016VUZGUUQ> yep! FRP models this dependency just fine, but to make history editing work nicely you need to know about causality. I.e. \"what past event is responsible for allowing some future event to happen?\"",
        "user": "UKB1S7ZMY",
        "ts": "1680701426.560359",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "soT=N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016VUZGUUQ"
                            },
                            {
                                "type": "text",
                                "text": " yep! FRP models this dependency just fine, but to make history editing work nicely you need to know about causality. I.e. \"what past event is responsible for allowing some future event to happen?\""
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1680622758.013259",
        "parent_user_id": "UKB1S7ZMY"
    },
    {
        "client_msg_id": "04f1cff8-1722-4cfe-b633-ceaf92c7396d",
        "type": "message",
        "text": "In my structure editor tech it is possible to store both logic and data in the same interpretable data structure fairly efficiently (I've written a custom sequential tree). Because of this, creating clones/forks and storing snapshots/images of both state and logic is trivial. Diffing and merging should be possible too, but obviously come with their caveats.\n\nCurrently one use case I'm thinking for this would be stateful cloud functions. It should be easy and fast to write the snapshot to a persistent storage and then load it when the function needs to run, and then write the possibly changed version back to wait for the next run. Keeping the snapshots in storage would work as a free history of the program state (and logic) that you'd be able to open up in the structure editor. Of course, it won't just scale to infinity size persistent data and handling concurrent requests would be an extra hurdle. However, it should work fairly well for what is usually required of cloud functions. It is also able to keep much of the interpreted intermediate results and only recompute what's necessary.\n\nEmitting some kind of \"rewind\" messages to external systems still wouldn't be easy, but could be possible by diffing the snapshots and then constructing the rewind message from the diff..",
        "user": "U0296ACR13M",
        "ts": "1680764953.591719",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cGa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In my structure editor tech it is possible to store both logic and data in the same interpretable data structure fairly efficiently (I've written a custom sequential tree). Because of this, creating clones/forks and storing snapshots/images of both state and logic is trivial. Diffing and merging should be possible too, but obviously come with their caveats.\n\nCurrently one use case I'm thinking for this would be stateful cloud functions. It should be easy and fast to write the snapshot to a persistent storage and then load it when the function needs to run, and then write the possibly changed version back to wait for the next run. Keeping the snapshots in storage would work as a free history of the program state (and logic) that you'd be able to open up in the structure editor. Of course, it won't just scale to infinity size persistent data and handling concurrent requests would be an extra hurdle. However, it should work fairly well for what is usually required of cloud functions. It is also able to keep much of the interpreted intermediate results and only recompute what's necessary.\n\nEmitting some kind of \"rewind\" messages to external systems still wouldn't be easy, but could be possible by diffing the snapshots and then constructing the rewind message from the diff.."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U0296ACR13M",
            "ts": "1680765408.000000"
        },
        "thread_ts": "1680622758.013259",
        "parent_user_id": "UKB1S7ZMY"
    }
]