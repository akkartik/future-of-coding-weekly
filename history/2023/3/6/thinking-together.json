[
    {
        "client_msg_id": "09f8369b-2140-4487-a60c-3dbedfb64914",
        "type": "message",
        "text": "Do y'all know of any editors with undo/redo behavior that's more interesting/granular than just scrubbing through all of the edits you've done to a file in order?\nI often find my self wanting \"undo the last change to *this function*\" :thinking_face:",
        "user": "U04MAEU6VHN",
        "ts": "1678128873.587829",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5pSt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do y'all know of any editors with undo/redo behavior that's more interesting/granular than just scrubbing through all of the edits you've done to a file in order?\nI often find my self wanting \"undo the last change to *this function*\" "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face",
                                "unicode": "1f914"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1678128873.587829",
        "reply_count": 20,
        "reply_users_count": 11,
        "latest_reply": "1678600586.201779",
        "reply_users": [
            "UC2A2ARPT",
            "U04MAEU6VHN",
            "U04S390M7EZ",
            "U04MTMF6Y4W",
            "UBKNXPBAB",
            "U016VUZGUUQ",
            "UCUSW7WVD",
            "U013ZLJARC7",
            "UDQBTJ211",
            "U04QV8SD54G",
            "U02JQA5FY5C"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "gem",
                "users": [
                    "U04BPBG8VN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d2df5e0a-8b58-49b4-a784-9b33111499e8",
        "type": "message",
        "text": "Some 3d modelling tools have separate undo/redo stacks for different parts of the program. For instance, undo/redo for changes to your viewport are separate from undo/redo for changes to objects in your scene, which are separate from undo/redo to changes in your F-curve editor or node-wire material editor.",
        "user": "UC2A2ARPT",
        "ts": "1678129079.802049",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ept",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some 3d modelling tools have separate undo/redo stacks for different parts of the program. For instance, undo/redo for changes to your viewport are separate from undo/redo for changes to objects in your scene, which are separate from undo/redo to changes in your F-curve editor or node-wire material editor."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN"
    },
    {
        "client_msg_id": "7d75a72e-6adf-4ded-a118-e49cd0e5b546",
        "type": "message",
        "text": "Yeah, that makes sense, sounds like those are basically different editors, that each maintain their own stack",
        "user": "U04MAEU6VHN",
        "ts": "1678129163.744079",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zlvH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, that makes sense, sounds like those are basically different editors, that each maintain their own stack"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN"
    },
    {
        "client_msg_id": "E955ECC7-484E-457B-AF97-29B96F6C7CB1",
        "type": "message",
        "text": "I really love vim\u2019s tree based undo. It\u2019s like git for keystrokes - edits on top of edits create branching histories. ",
        "user": "U04S390M7EZ",
        "ts": "1678129825.901739",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NeOS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really love vim\u2019s tree based undo. It\u2019s like git for keystrokes - edits on top of edits create branching histories. "
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U04QB9V2RNG",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "FBF177AC-E09C-4AC1-8604-B63D71B23DA2",
        "type": "message",
        "text": "It isn\u2019t localized like you describe. Also impossible to use without a plugin to visualize the tree, like Gundo.vim: <https://advancedweb.hu/assets/posts/vim-undo-tree/gundo-1b34fafe3700f571c821123a52eaf29d43dae7c72aa88e04b4dd42916ae3ee2a.jpg|https://advancedweb.hu/assets/posts/vim-undo-tree/gundo-1b34fafe3700f571c821123a52eaf29d43dae7c72aa88e04b4dd42916ae3ee2a.jpg>. \n\n\u201cLocal change history\u201d is a really cool idea; I think I would struggle to define the boundaries for my undo-space in a consistent way. Sometimes I\u2019m working on one function / module; sometimes I\u2019m pushing larger globs of code around. ",
        "user": "U04S390M7EZ",
        "ts": "1678130205.241669",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=/j7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It isn\u2019t localized like you describe. Also impossible to use without a plugin to visualize the tree, like Gundo.vim: "
                            },
                            {
                                "type": "link",
                                "url": "https://advancedweb.hu/assets/posts/vim-undo-tree/gundo-1b34fafe3700f571c821123a52eaf29d43dae7c72aa88e04b4dd42916ae3ee2a.jpg",
                                "text": "https://advancedweb.hu/assets/posts/vim-undo-tree/gundo-1b34fafe3700f571c821123a52eaf29d43dae7c72aa88e04b4dd42916ae3ee2a.jpg"
                            },
                            {
                                "type": "text",
                                "text": ". \n\n\u201cLocal change history\u201d is a really cool idea; I think I would struggle to define the boundaries for my undo-space in a consistent way. Sometimes "
                            },
                            {
                                "type": "text",
                                "text": "I\u2019m"
                            },
                            {
                                "type": "text",
                                "text": " working on one function / module; sometimes "
                            },
                            {
                                "type": "text",
                                "text": "I\u2019m"
                            },
                            {
                                "type": "text",
                                "text": " pushing larger globs of code around. "
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://advancedweb.hu/assets/posts/vim-undo-tree/gundo-1b34fafe3700f571c821123a52eaf29d43dae7c72aa88e04b4dd42916ae3ee2a.jpg",
                "image_url": "https://advancedweb.hu/assets/posts/vim-undo-tree/gundo-1b34fafe3700f571c821123a52eaf29d43dae7c72aa88e04b4dd42916ae3ee2a.jpg",
                "image_width": 1112,
                "image_height": 962,
                "image_bytes": 87211,
                "id": 1,
                "original_url": "https://advancedweb.hu/assets/posts/vim-undo-tree/gundo-1b34fafe3700f571c821123a52eaf29d43dae7c72aa88e04b4dd42916ae3ee2a.jpg",
                "fallback": "1112x962px image"
            }
        ],
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN"
    },
    {
        "client_msg_id": "55da0a8c-a0f2-425e-9c2c-81fc14d09910",
        "type": "message",
        "text": "Yeah, there would definitely be changes at different levels, it'll be a challenge to represent things in a way that doesn't break either the large or the small case.",
        "user": "U04MAEU6VHN",
        "ts": "1678130300.831899",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nOAx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, there would definitely be changes at different levels, it'll be a challenge to represent things in a way that doesn't break either the large or the small case."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN"
    },
    {
        "client_msg_id": "f75a1bcd-6b5a-4abf-a44b-af68f63a0e50",
        "type": "message",
        "text": "One hacky idea is to have the main history stack/tree be for the whole editor, but have a \"view history of this function\" and allow you to \"revert\" to a previous state, which actually adds a change to the main history stack.",
        "user": "U04MAEU6VHN",
        "ts": "1678130389.239849",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "edkNn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One hacky idea is to have the main history stack/tree be for the whole editor, but have a \"view history of this function\" and allow you to \"revert\" to a previous state, which actually adds a change to the main history stack."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN"
    },
    {
        "client_msg_id": "E232C10C-C67F-4973-930D-8843D767EFFF",
        "type": "message",
        "text": "Thinking about a version control system which understands code structure led me to visualize it as basically node/wire visual programming, where undo histories are held both at the node level (function, module, class) and for the overall canvas (file, project?). I think that\u2019s pretty much what you described. \n\nRephrasing a bit, maybe one way to think about it is expanding the hierarchy of undo scopes: most people today have project scope (version control) and file scope (editor undo). Higher up the hierarchy than project scope - integration scope, maybe? - depends on monorepo; I guess API versioning and pinning is kind of this as well. Lower down the hierarchy is function edit history.",
        "user": "U04S390M7EZ",
        "ts": "1678131344.824979",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dmR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thinking about a version control system which understands code structure led me to visualize it as basically node/wire visual programming, where undo histories are held both at the node level (function, module, class) and for the overall canvas (file, project?). I think that\u2019s pretty much what you described. \n\nRephrasing a bit, maybe one way to think about it is expanding the hierarchy of undo scopes: most people today have project scope (version control) and file scope (editor undo). Higher up the hierarchy than project scope - integration scope, maybe? - depends on monorepo; I guess API versioning and pinning is kind of this as well. Lower down the hierarchy is function edit history."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN"
    },
    {
        "client_msg_id": "F85365F7-C95C-46C6-A725-1C93BF2D6036",
        "type": "message",
        "text": "Solidworks has a UI tree that sound like the opposite side of vim\u2019s graph. There\u2019s a command history where you can go to any previous point and change a parameter, if it still creates a valid model, changes trickle down. Porting that to a code editor could be something like:\nif x is editted on commit 4 and there are no errors; then merge to present; else (attempt to edit in between commits so some test is satisfied?)",
        "user": "U04MTMF6Y4W",
        "ts": "1678132994.788819",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JYrUv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Solidworks has a UI tree that sound like the opposite side of vim\u2019s graph. There\u2019s a command history where you can go to any previous point and change a parameter, if it still creates a valid model, changes trickle down. Porting that to a code editor could be something like:\nif x is editted on commit 4 and there are no errors; then merge to present; else (attempt to edit in between commits so some test is satisfied?)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN"
    },
    {
        "client_msg_id": "77EC0DAE-CE5B-4C26-8642-21CCD21FC041",
        "type": "message",
        "text": "Oh interesting. So kind of a \u201cback to the future\u201d time traveling editor model. Is there a challenge with deep historical changes having unintentional outcomes after the changes propagate? \n\nwhen you \u201cundo\u201d, does it undo the change you made to the historical command, or remove the effects of the most recent command (leaving the \u201caltered history\u201d in place)?",
        "user": "U04S390M7EZ",
        "ts": "1678138068.641939",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x0zk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh interesting. So kind of a \u201cback to the future\u201d time traveling editor model. Is there a challenge with deep historical changes having unintentional outcomes after the changes propagate? \n\nwhen you \u201cundo\u201d, does it undo the change you made to the historical command, or remove the effects of the most recent command (leaving the \u201caltered history\u201d in place)?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN"
    },
    {
        "client_msg_id": "9A22673F-EF98-43D3-9ED6-D5B51A6F9FDD",
        "type": "message",
        "text": "Yes, going further back tends generally means more commands depending on each other with potential to break. I think the best description would be \u201cmodifying\u201d a previous command (which could include a delete/hide). After that it attempts to rebuild to current state, or as far as it can get before something breaks. There is also a normal CTRL+Z which you rarely use as a \u201cgood\u201d Solidworks user. ",
        "user": "U04MTMF6Y4W",
        "ts": "1678140038.668399",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v+l1z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, going f"
                            },
                            {
                                "type": "text",
                                "text": "u"
                            },
                            {
                                "type": "text",
                                "text": "rther back "
                            },
                            {
                                "type": "text",
                                "text": "tends generally"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "means more"
                            },
                            {
                                "type": "text",
                                "text": " commands depending on each other with potential to break. "
                            },
                            {
                                "type": "text",
                                "text": "I"
                            },
                            {
                                "type": "text",
                                "text": " think the best description would be \u201cmodifying\u201d a previous command (which could include a delete/hide). After that it attempts to rebuild to current state, or as far as it can get before something breaks. There is also a normal CTRL+Z which "
                            },
                            {
                                "type": "text",
                                "text": "you "
                            },
                            {
                                "type": "text",
                                "text": "rarely use as a \u201cgood\u201d Solidworks user. "
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN"
    },
    {
        "client_msg_id": "09f954c2-39a7-4462-967d-65e0eedc8e5c",
        "type": "message",
        "text": "Amusingly, <https://observablehq.com/|Observable> lacks global undo, but because CodeMirror implements nice undo functionality, it still has per-cell-editor undo. It\u2019s granular undo by default / accident.",
        "user": "UBKNXPBAB",
        "ts": "1678143975.157189",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QdXF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Amusingly, "
                            },
                            {
                                "type": "link",
                                "url": "https://observablehq.com/",
                                "text": "Observable"
                            },
                            {
                                "type": "text",
                                "text": " lacks global undo, but because CodeMirror implements nice undo functionality, it still has per-cell-editor undo. It\u2019s granular undo by default / accident."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UBKNXPBAB",
            "ts": "1678144024.000000"
        },
        "attachments": [
            {
                "from_url": "https://observablehq.com/",
                "service_icon": "https://static.observablehq.com/favicon-512.0667824687f99c942a02e06e2db1a060911da0bf3606671676a255b1cf97b4fe.png",
                "thumb_url": "https://static.observablehq.com/assets/og-image.png",
                "thumb_width": 400,
                "thumb_height": 414,
                "id": 1,
                "original_url": "https://observablehq.com/",
                "fallback": "Observable: Collaborative data platform and canvas | Observable",
                "text": "Powered by Community, collaborate with your entire team from technical to non-technical users and get to data insights, faster. Bring your data to life.",
                "title": "Collaborative data platform and canvas | Observable",
                "title_link": "https://observablehq.com/",
                "service_name": "Observable"
            }
        ],
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "US370TRJA"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "4acd2a9e-8375-4bf2-a7ec-a19a77dc7eb0",
        "type": "message",
        "text": "A possible UI for text would be to select an arbitrary region (maybe a function, maybe bigger/smaller) and undo changes that intersect with that region.  Or use said selection as a filter for other fancy operations on undo history. (Which presumably gets really interesting when you try to have undo history for the selection itself, a la Blender and what I wish I had in Kakoune (vim-like selection heavy editor)).\n\nIn practice, I tend to delete by commenting until I'm ready to commit to Git, so I can undo either by reverting or uncommenting. Which is to say, I'm interested in this feature. :melting_face:",
        "user": "U016VUZGUUQ",
        "ts": "1678144228.332479",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4hc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A possible UI for text would be to select an arbitrary region (maybe a function, maybe bigger/smaller) and undo changes that intersect with that region.  Or use said selection as a filter for other fancy operations on undo history. (Which presumably gets really interesting when you try to have undo history for the selection itself, a la Blender and what I wish I had in Kakoune (vim-like selection heavy editor)).\n\nIn practice, I tend to delete by commenting until I'm ready to commit to Git, so I can undo either by reverting or uncommenting. Which is to say, I'm interested in this feature. "
                            },
                            {
                                "type": "emoji",
                                "name": "melting_face",
                                "unicode": "1fae0"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U016VUZGUUQ",
            "ts": "1678144290.000000"
        },
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN"
    },
    {
        "client_msg_id": "8a4734b4-eb79-446e-842f-a6d9e5d7ace2",
        "type": "message",
        "text": "My reaction was the same as <@UBKNXPBAB>. Organizing code by definition is an easy and intuitive way to get per function undo. Having multiple kinds of undo seems like it might be confusing some of the time.",
        "user": "UCUSW7WVD",
        "ts": "1678154102.349479",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UFvK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My reaction was the same as "
                            },
                            {
                                "type": "user",
                                "user_id": "UBKNXPBAB"
                            },
                            {
                                "type": "text",
                                "text": ". Organizing code by definition is an easy and intuitive way to get per function undo. Having multiple kinds of undo seems like it might be confusing some of the time."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1678156998.000000"
        },
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN"
    },
    {
        "client_msg_id": "311896ec-10e9-47ea-b1f8-ea2075ec8310",
        "type": "message",
        "text": "I use the emacs version of that tree-based undo system. It's very cool, but not granular in the way you want. IIRC the Smalltalk environment I used in the late 80s had scoped undo in the individual editors, which is more along these lines.",
        "user": "U013ZLJARC7",
        "ts": "1678170397.734329",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=8n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I use the emacs version of that tree-based undo system. It's very cool, but not granular in the way you want. IIRC the Smalltalk environment I used in the late 80s had scoped undo in the individual editors, which is more along these lines."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U04QV8SD54G"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "1b4a019b-99d6-46d4-9dff-65abafed6c59",
        "type": "message",
        "text": "I think you might be able to get this from git if you pushed every single change as a commit and used interactive rebase",
        "user": "UDQBTJ211",
        "ts": "1678174641.686369",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BjvhX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think you might be able to get this from git if you pushed every single change as a commit and used interactive rebase"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN"
    },
    {
        "client_msg_id": "ae46c3da-c94d-4c4d-bf7f-4184f73f5262",
        "type": "message",
        "text": "(I mean do that behind the scenes as a way of implementing it)",
        "user": "UDQBTJ211",
        "ts": "1678174679.382249",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CIZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(I mean do that behind the scenes as a way of implementing it)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN"
    },
    {
        "client_msg_id": "4c997ba8-48a4-4f25-a209-5eb7fd979876",
        "type": "message",
        "text": "I've implemented an undo/redo system on top of mercurial before when building an in-browser editor\n\nI believe GIMP has had for a long time planned an event-sourcing style system where you are recording *actions* not state and can add or remove actions to recreate state at any time. This means that you can do things like build up a series of operations, then go and remove some of the operations in the middle, or maybe even change the image you're operating on without redoing the operations.\n\nGIMP still hasn't implemented this, but I believe it is how FreeCAD works",
        "user": "U04QV8SD54G",
        "ts": "1678304859.443069",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QGxe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've implemented an undo/redo system on top of mercurial before when building an in-browser editor\n\nI believe GIMP has had for a long time planned an event-sourcing style system where you are recording "
                            },
                            {
                                "type": "text",
                                "text": "actions",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " not state and can add or remove actions to recreate state at any time. This means that you can do things like build up a series of operations, then go and remove some of the operations in the middle, or maybe even change the image you're operating on without redoing the operations.\n\nGIMP still hasn't implemented this, but I believe it is how FreeCAD works"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN"
    },
    {
        "type": "message",
        "text": "and also yes, I also use `undo-tree` in emacs",
        "files": [
            {
                "id": "F04T3EEHAHJ",
                "created": 1678304894,
                "timestamp": 1678304894,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U04QV8SD54G",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 76556,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F04T3EEHAHJ/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F04T3EEHAHJ/download/image.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F04T3EEHAHJ-881afb738b/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F04T3EEHAHJ-881afb738b/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F04T3EEHAHJ-881afb738b/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 248,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F04T3EEHAHJ-881afb738b/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 331,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F04T3EEHAHJ-881afb738b/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F04T3EEHAHJ-881afb738b/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 497,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F04T3EEHAHJ-881afb738b/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 552,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F04T3EEHAHJ-881afb738b/image_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 662,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F04T3EEHAHJ-881afb738b/image_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 707,
                "image_exif_rotation": 1,
                "original_w": 1742,
                "original_h": 1202,
                "thumb_tiny": "AwAhADClRRRQAUD+lFA/pQAUUUUAFFGDRigAoFGKXadmccUAJRRRQBZb7x+tRjpUjfeP1qMdKkBr/dH1NR96kf7o+pqPvVALQOoooHUUAf/Z",
                "permalink": "https://futureofcoding.slack.com/files/U04QV8SD54G/F04T3EEHAHJ/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F04T3EEHAHJ-b8f3c52c36",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "U04QV8SD54G",
        "display_as_bot": false,
        "ts": "1678304897.110769",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mUVCv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and also yes, I also use "
                            },
                            {
                                "type": "text",
                                "text": "undo-tree",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in emacs"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "b72f6e57-7cf2-4f0c-819a-b0efb8e3b1b1",
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN"
    },
    {
        "client_msg_id": "8ba9a34b-9a3f-4cd0-a182-e4fba1c28a31",
        "type": "message",
        "text": "maybe a poor-man and somewhat pragmatic approach would be to just have each function in a separate file, then you get undo per function with standard out of the shelf solution",
        "user": "U02JQA5FY5C",
        "ts": "1678442585.175859",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1u/AQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "maybe a poor-man and somewhat pragmatic approach would be to just have each function in a separate file, then you get undo per function with standard out of the shelf solution"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U02JQA5FY5C",
            "ts": "1678442624.000000"
        },
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN"
    },
    {
        "client_msg_id": "b97e1ba0-0dd9-4710-bd7d-655d6c39faa0",
        "type": "message",
        "text": "fortunately for me I'm throwing out the \"code lives in text files\" thing altogether, so I have quite a bit of flexibility :smile:",
        "user": "U04MAEU6VHN",
        "ts": "1678600586.201779",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=E=We",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "fortunately for me I'm throwing out the \"code lives in text files\" thing altogether, so I have quite a bit of flexibility "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1678128873.587829",
        "parent_user_id": "U04MAEU6VHN",
        "reactions": [
            {
                "name": "fire",
                "users": [
                    "U02JQA5FY5C"
                ],
                "count": 1
            }
        ]
    }
]