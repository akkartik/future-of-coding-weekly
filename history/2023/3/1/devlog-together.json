[
    {
        "client_msg_id": "79561535-c558-49cf-8e02-76957121d4ab",
        "type": "message",
        "text": "Thinking about building some visual programming tools after taking a break for a while. One fun idea that popped up: hybrid text + node-wire environment where you can _wire to the text_. Like, a word in the text can act as a node. Probably been done somewhere, but I haven't seen it, so I'm kinda jamming on the thought. Like, what if Natto but you exploded the frames, brought some of Bret's Tangle in there, little bit of that style of annotating an image+paragraph by coloring a word the same as a corresponding thing in the image. Constants in the text live-update, etc etc.",
        "user": "UC2A2ARPT",
        "ts": "1677629762.002999",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "trmt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thinking about building some visual programming tools after taking a break for a while. One fun idea that popped up: hybrid text + node-wire environment where you can "
                            },
                            {
                                "type": "text",
                                "text": "wire to the text",
                                "style": {
                                    "bold": false,
                                    "italic": true,
                                    "strike": false
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Like, a word in the text can act as a node. Probably been done somewhere, but I haven't seen it, so I'm kinda jamming on the thought. Like, what if Natto but you exploded the frames, brought some of Bret's Tangle in there, little bit of that style of annotating an image+paragraph by coloring a word the same as a corresponding thing in the image. Constants in the text live-update, etc etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1677630266.000000"
        },
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "USH01JEDQ",
                    "U023V63MF6V",
                    "UMQ6LR9NZ",
                    "U013ZLJARC7",
                    "UML4ZEKDK"
                ],
                "count": 5
            },
            {
                "name": "pray",
                "users": [
                    "UMQ6LR9NZ",
                    "UHWC9PXBL",
                    "UA14TGLTC"
                ],
                "count": 3
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U03R0B9U1GD"
                ],
                "count": 2
            },
            {
                "name": "exploding_head",
                "users": [
                    "U03R0B9U1GD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "684717a5-8aca-499a-b590-dc50151fab1a",
        "type": "message",
        "text": "FWIW - here\u2019s how I think about it...  You are programming a MACHINE. Every bit of syntax has to DO something (have a meaning).  [The meaning of comments is \u201cto be ignored by the machine\u201d.  A lot of other syntactic baubles have that same meaning - e.g. stick people and clouds].  What does it mean to connect a wire to a word?  What happens if you connect that same wire to a different word?",
        "user": "UGWUJUZHT",
        "ts": "1677633753.693619",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kRfk2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FWIW - here\u2019s how I think about it...  You are programming a MACHINE. Every bit of syntax has to DO something (have a meaning).  [The meaning of comments is \u201cto be ignored by the machine\u201d.  A lot of other syntactic baubles have that same meaning - e.g. stick people and clouds].  What does it mean to connect a wire to a word?  What happens if you connect that same wire to a different word?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1677633753.693619",
        "reply_count": 12,
        "reply_users_count": 8,
        "latest_reply": "1677848436.311349",
        "reply_users": [
            "UC2A2ARPT",
            "U02U0AS3J49",
            "UMQ6LR9NZ",
            "UCUSW7WVD",
            "UGWUJUZHT",
            "U03R0B9U1GD",
            "UE1JQM9HQ",
            "U017TE5R09M"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "DF761846-3162-45FB-AE7A-0554F55A6523",
        "type": "message",
        "text": "One issue I have with comments is that they are monochromatic / monotonous. Not many programming environments let you be expressive with your comments. You can't distinguish a \"what\" comment from a \"why\" comment by any means other than verbose writing or pidgin syntax.\n\nI'm big on finding ways for person-to-person expression within a codebase to be a lot richer.",
        "user": "UC2A2ARPT",
        "ts": "1677634251.889409",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gzz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One issue I have with comments is that they are monochromatic / monotonous"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Not many programming environments let you be expressive with your comments"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " You can't distinguish a \"what\" comment from a \"why\" comment by any means other than verbose writing or pidgin syntax"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n\nI'm big on finding ways for person-to-person expression within a codebase to be a lot richer"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1677633753.693619",
        "parent_user_id": "UGWUJUZHT"
    },
    {
        "client_msg_id": "248F4368-1185-4CC0-8D4C-F376B11643C8",
        "type": "message",
        "text": "One reason to allow wiring to text would be that it enables a bit more flexibility as you move between a text paradigm and a node paradigm. Like, let's say you have an existing textual codebase written in some traditional language. You want to use a node-based programming tool to expand on that codebase. If the node tool is smart about integrating with text, it can be layered-in atop the existing text \u2014 the text can be incorporated as an element within the new graphical node canvas. Wiring directly to text might be a nice way to make that transition feel more.. node-y.",
        "user": "UC2A2ARPT",
        "ts": "1677634515.655399",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VsLO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One reason to allow wiring to text would be that it enables a bit more flexibility as you move between a text paradigm and a node paradigm"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Like, let's say you have an existing textual codebase written in some traditional language"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " You want to use a node-based programming tool to expand on that codebase"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " If the node tool is smart about integrating with text, it can be layered-in atop the existing text \u2014 the text can be incorporated as an element within the new graphical node canvas"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Wiring directly to text might be a nice way to make that transition feel more.. node-y"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1677633753.693619",
        "parent_user_id": "UGWUJUZHT"
    },
    {
        "client_msg_id": "4CF8E84B-637A-4270-9108-1627EC594016",
        "type": "message",
        "text": "A common alternative is just treating either the nodes or the text as an FFI, or communicating over some network-like abstraction. That's arms-length. It's invisible.",
        "user": "UC2A2ARPT",
        "ts": "1677634603.205609",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qil",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A common alternative is just treating either the nodes or the text as an FFI, or communicating over some network-like abstraction"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " That's arms-length"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " It's invisible"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1677633753.693619",
        "parent_user_id": "UGWUJUZHT"
    },
    {
        "client_msg_id": "47274ac3-ffa0-4012-839d-75920e9c1cad",
        "type": "message",
        "text": "I would like to have better tools for annotating code with its relationships to legal text that it models. I don't need there to be a visual line (though it might not hurt), but I do need a convenient way to create an \"annotation\" which includes disjoint segments of text, where annotations can overlap one another, and can be linked from symbols in the code, so that when I mouse-over the relevant code, the linked sections of text are highlighted, or something. There's a lot of room to improve the way code and text relate to each other. If you could even implement something like that inside Jupyter I think it would be illustrative.",
        "user": "U02U0AS3J49",
        "ts": "1677634801.283029",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hBR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would like to have better tools for annotating code with its relationships to legal text that it models. I don't need there to be a visual line (though it might not hurt), but I do need a convenient way to create an \"annotation\" which includes disjoint segments of text, where annotations can overlap one another, and can be linked from symbols in the code, so that when I mouse-over the relevant code, the linked sections of text are highlighted, or something. There's a lot of room to improve the way code and text relate to each other. If you could even implement something like that inside Jupyter I think it would be illustrative."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1677633753.693619",
        "parent_user_id": "UGWUJUZHT"
    },
    {
        "client_msg_id": "7f9dae33-5b3f-4d57-a8f5-ae6505a4f9de",
        "type": "message",
        "text": "<@UC2A2ARPT> oh oh oh! I dig this idea a lot! I\u2019ve been playing with a way to allow text/files to exist in relation to one another \u2014 at first I thought about doing this through a bespoke editor, but realized I didn\u2019t wanna reinvent that particular wheel \u2014 I was aiming someplace between text files\u2026I didn\u2019t care about how they were generated. I care about finding a way to make multiple text files touch and look at each other and reference each other.\n\nMy mental model for this is something like the talmud, where you\u2019ve got a core text (maybe your executable program) but then all these layers of commentary around it, in orbit. The commentary is held in place by the core text, but may not actually only be about that core text, it is also in context and talking to other commentaries and other pieces of text that are core to other stuff.\n\n\u2026sorta rabbit hole around \u201call text is hypertext\u201d and pleading with a tool to let it happen.",
        "user": "UMQ6LR9NZ",
        "ts": "1677635622.132609",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3Ll",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " oh oh oh! I dig this idea a lot! I\u2019ve been playing with a way to allow text/files to exist in relation to one another \u2014 at first I thought about doing this through a bespoke editor, but realized I didn\u2019t wanna reinvent that particular wheel \u2014 I was aiming someplace between text files\u2026I didn\u2019t care about how they were generated. I care about finding a way to make multiple text files touch and look at each other and reference each other.\n\nMy mental model for this is something like the talmud, where you\u2019ve got a core text (maybe your executable program) but then all these layers of commentary around it, in orbit. The commentary is held in place by the core text, but may not actually only be about that core text, it is also in context and talking to other commentaries and other pieces of text that are core to other stuff.\n\n\u2026sorta rabbit hole around \u201call text is hypertext\u201d and pleading with a tool to let it happen."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UMQ6LR9NZ",
            "ts": "1677635785.000000"
        },
        "thread_ts": "1677633753.693619",
        "parent_user_id": "UGWUJUZHT",
        "reactions": [
            {
                "name": "fire",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "95ff4363-59aa-45c3-9059-9a1179d9bdab",
        "type": "message",
        "text": "I use 3 different colors for comments, though I hadn't thought to distinguish what from why comments: <https://news.ycombinator.com/item?id=21665105#21665366|https://news.ycombinator.com/item?id=21665105#21665366>",
        "user": "UCUSW7WVD",
        "ts": "1677644148.561319",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "di6yg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I use 3 different colors for comments, though I hadn't thought to distinguish what from why comments: "
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=21665105#21665366",
                                "text": "https://news.ycombinator.com/item?id=21665105#21665366"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1677633753.693619",
        "parent_user_id": "UGWUJUZHT",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "text": "Since I built this, my thoughts have been running in the direction of turning it into a full graph editor.\n\nHowever, all the graphs I want to create also have other constraints. Sometimes I want a sort of activity diagram (<https://plantuml.com/activity-diagram-beta|https://plantuml.com/activity-diagram-beta>), other times I want some edges always be horizontal and to line up with similar edges.\n\nI've also been thinking about the clunky drawing primitives I chose in <http://akkartik.name/lines.html|http://akkartik.name/lines.html>. Writing text inside shapes doesn't really work, which is like literally the first thing one might want to do with line drawings.\n\nPutting these thoughts together, I've been imagining a 2-level tool with a tray on the left like in <http://recursivedrawing.com/|Recursive Drawing> or <https://www.inkandswitch.com/crosscut/|Crosscut>, where I can draw some primitives into the tool tray and then attach hotkeys to them to compose them into pictures in the main area.",
        "files": [
            {
                "id": "F04RL7V82RL",
                "created": 1677654764,
                "timestamp": 1677654764,
                "name": "recursive.jpg",
                "title": "recursive.jpg",
                "mimetype": "image/jpeg",
                "filetype": "jpg",
                "pretty_type": "JPEG",
                "user": "UCUSW7WVD",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 12071,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F04RL7V82RL/recursive.jpg",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F04RL7V82RL/download/recursive.jpg",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F04RL7V82RL-a166f7c483/recursive_64.jpg",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F04RL7V82RL-a166f7c483/recursive_80.jpg",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F04RL7V82RL-a166f7c483/recursive_360.jpg",
                "thumb_360_w": 360,
                "thumb_360_h": 249,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F04RL7V82RL-a166f7c483/recursive_480.jpg",
                "thumb_480_w": 480,
                "thumb_480_h": 332,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F04RL7V82RL-a166f7c483/recursive_160.jpg",
                "original_w": 640,
                "original_h": 443,
                "thumb_tiny": "AwAhADC+nLGpMVHHweKkoAMUYFUp9RSGV49hJUdQe9UxPcyKDJKUAbI4wW+n+e9AGzikI4qnbRXKgNvOP7rnJP8AhV09KAI4/vVn6jcyxXIWOQqAo4FaEf3qhuLCK4kLszhj6GgDLhjE/myzSbQpBJxnOauWiG4uWkZw8Sn5Qe3px2qUabGsLxh2+Yg5PbFS2lqLVGAYsW6mgCxQelFB6UARL1p1NXrTqACiiigAooooA//Z",
                "permalink": "https://futureofcoding.slack.com/files/UCUSW7WVD/F04RL7V82RL/recursive.jpg",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F04RL7V82RL-7d05adac96",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            },
            {
                "id": "F04SGGDGCBS",
                "created": 1677654772,
                "timestamp": 1677654772,
                "name": "crosscut.png",
                "title": "crosscut.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UCUSW7WVD",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 19880,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F04SGGDGCBS/crosscut.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F04SGGDGCBS/download/crosscut.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F04SGGDGCBS-5d25ba11b5/crosscut_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F04SGGDGCBS-5d25ba11b5/crosscut_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F04SGGDGCBS-5d25ba11b5/crosscut_360.png",
                "thumb_360_w": 303,
                "thumb_360_h": 128,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F04SGGDGCBS-5d25ba11b5/crosscut_160.png",
                "original_w": 303,
                "original_h": 128,
                "thumb_tiny": "AwAUADC8SAQM/hQxxj5gPwpcHPXj6UjHGOQPrWbbtr/X4jFp+BTKkrRbCEwKQjjpTqQ9KAGbQTnmloooskAUbjRSUALuNGTSUUAf/9k=",
                "permalink": "https://futureofcoding.slack.com/files/UCUSW7WVD/F04SGGDGCBS/crosscut.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F04SGGDGCBS-a7734bae7d",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UCUSW7WVD",
        "ts": "1677654869.010439",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZYJK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Since I built this, my thoughts have been running in the direction of turning it into a full graph editor.\n\nHowever, all the graphs I want to create also have other constraints. Sometimes I want a sort of activity diagram ("
                            },
                            {
                                "type": "link",
                                "url": "https://plantuml.com/activity-diagram-beta",
                                "text": "https://plantuml.com/activity-diagram-beta"
                            },
                            {
                                "type": "text",
                                "text": "), other times I want some edges always be horizontal and to line up with similar edges.\n\nI've also been thinking about the clunky drawing primitives I chose in "
                            },
                            {
                                "type": "link",
                                "url": "http://akkartik.name/lines.html",
                                "text": "http://akkartik.name/lines.html"
                            },
                            {
                                "type": "text",
                                "text": ". Writing text inside shapes doesn't really work, which is like literally the first thing one might want to do with line drawings.\n\nPutting these thoughts together, I've been imagining a 2-level tool with a tray on the left like in "
                            },
                            {
                                "type": "link",
                                "url": "http://recursivedrawing.com/",
                                "text": "Recursive Drawing"
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "link",
                                "url": "https://www.inkandswitch.com/crosscut/",
                                "text": "Crosscut"
                            },
                            {
                                "type": "text",
                                "text": ", where I can draw some primitives into the tool tray and then attach hotkeys to them to compose them into pictures in the main area."
                            }
                        ]
                    }
                ]
            }
        ],
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1677657240.000000"
        },
        "client_msg_id": "c13a180c-387c-48b6-ac19-8218c9dd6f2d",
        "thread_ts": "1676798153.605919",
        "parent_user_id": "UCUSW7WVD",
        "subtype": "thread_broadcast",
        "root": {
            "type": "message",
            "text": "Today I put together a little visualizer for Mastodon threads. The graph layout is nothing special, but:\n\u2022 it has structured keyboard shortcuts (up for parent, down for child, left/right for siblings) which might be more useful for understanding a complex thread\n\u2022 as always you can live-edit it so it's hopefully easy to improve\nOne other little integration: opening links in browsers opens up all sorts of cross-platform cans of worms, so I ended up just copying a URL to the clipboard any time you click on a toot.\n\n<https://git.sr.ht/~akkartik/mastodon-unfurl.love>",
            "files": [
                {
                    "id": "F04QNMABSGZ",
                    "created": 1676798095,
                    "timestamp": 1676798095,
                    "name": "mastodon-unfurl.webm",
                    "title": "mastodon-unfurl.webm",
                    "mimetype": "video/webm",
                    "filetype": "webm",
                    "pretty_type": "WebM",
                    "user": "UCUSW7WVD",
                    "user_team": "T5TCAFTA9",
                    "editable": false,
                    "size": 2930698,
                    "mode": "hosted",
                    "is_external": false,
                    "external_type": "",
                    "is_public": true,
                    "public_url_shared": false,
                    "display_as_bot": false,
                    "username": "",
                    "transcription": {
                        "status": "none"
                    },
                    "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F04QNMABSGZ/mastodon-unfurl.webm",
                    "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F04QNMABSGZ/download/mastodon-unfurl.webm",
                    "hls": "https://files.slack.com/files-tmb/T5TCAFTA9-F04QNMABSGZ-15e33414d5/file.m3u8?_xcb=0c52d",
                    "hls_embed": "data:application/vnd.apple.mpegurl;base64,I0VYVE0zVQojRVhULVgtVkVSU0lPTjozCiNFWFQtWC1JTkRFUEVOREVOVC1TRUdNRU5UUwojRVhULVgtU1RSRUFNLUlORjpCQU5EV0lEVEg9MTIwOTUxMCxBVkVSQUdFLUJBTkRXSURUSD0xMTM2MDEzLENPREVDUz0iYXZjMS42NDAwMjgsbXA0YS40MC41IixSRVNPTFVUSU9OPTE5MjB4MTAwNCxGUkFNRS1SQVRFPTI5Ljk3MApkYXRhOmFwcGxpY2F0aW9uL3ZuZC5hcHBsZS5tcGVndXJsO2Jhc2U2NCxJMFZZVkUwelZRb2pSVmhVTFZndFZrVlNVMGxQVGpvekNpTkZXRlF0V0MxVVFWSkhSVlJFVlZKQlZFbFBUam8zQ2lORldGUXRXQzFOUlVSSlFTMVRSVkZWUlU1RFJUb3hDaU5GV0ZRdFdDMVFURUZaVEVsVFZDMVVXVkJGT2xaUFJBb2pSVmhVU1U1R09qWXVNREEyTEFwb2RIUndjem92TDJacGJHVnpMbk5zWVdOckxtTnZiUzltYVd4bGN5MTBiV0l2VkRWVVEwRkdWRUU1TFVZd05GRk9UVUZDVTBkYUxURTFaVE16TkRFMFpEVXZabWxzWlY5SVh6STJORjh4T1RJd2VERXdPREJmTmpVd01FdENVRk5mTjFGV1FsSmZNREF3TURFdWRITUtJMFZZVkVsT1JqbzJMakF3Tml3S2FIUjBjSE02THk5bWFXeGxjeTV6YkdGamF5NWpiMjB2Wm1sc1pYTXRkRzFpTDFRMVZFTkJSbFJCT1MxR01EUlJUazFCUWxOSFdpMHhOV1V6TXpReE5HUTFMMlpwYkdWZlNGOHlOalJmTVRreU1IZ3hNRGd3WHpZMU1EQkxRbEJUWHpkUlZrSlNYekF3TURBeUxuUnpDaU5GV0ZSSlRrWTZOUzR4TURVc0NtaDBkSEJ6T2k4dlptbHNaWE11YzJ4aFkyc3VZMjl0TDJacGJHVnpMWFJ0WWk5VU5WUkRRVVpVUVRrdFJqQTBVVTVOUVVKVFIxb3RNVFZsTXpNME1UUmtOUzltYVd4bFgwaGZNalkwWHpFNU1qQjRNVEE0TUY4Mk5UQXdTMEpRVTE4M1VWWkNVbDh3TURBd015NTBjd29qUlZoVUxWZ3RSVTVFVEVsVFZBbz0KI0VYVC1YLVNUUkVBTS1JTkY6QkFORFdJRFRIPTc0ODc0NCxBVkVSQUdFLUJBTkRXSURUSD02ODQ1MTIsQ09ERUNTPSJhdmMxLjY0MDAxZixtcDRhLjQwLjUiLFJFU09MVVRJT049MTI4MHg2NzAsRlJBTUUtUkFURT0yOS45NzAKaHR0cHM6Ly9maWxlcy5zbGFjay5jb20vZmlsZXMtdG1iL1Q1VENBRlRBOS1GMDRRTk1BQlNHWi0xNWUzMzQxNGQ1L2ZpbGVfSF8yNjRfMTI4MHg3MjBfMzUwMEtCUFNfN1FWQlIubTN1OAo=",
                    "mp4_low": "https://files.slack.com/files-tmb/T5TCAFTA9-F04QNMABSGZ-15e33414d5/file_trans.mp4",
                    "duration_ms": 17117,
                    "media_display_type": "video",
                    "thumb_video": "https://files.slack.com/files-tmb/T5TCAFTA9-F04QNMABSGZ-15e33414d5/mastodon-unfurl_thumb_video.jpeg",
                    "thumb_video_w": 1919,
                    "thumb_video_h": 1003,
                    "permalink": "https://futureofcoding.slack.com/files/UCUSW7WVD/F04QNMABSGZ/mastodon-unfurl.webm",
                    "permalink_public": "https://slack-files.com/T5TCAFTA9-F04QNMABSGZ-778e0eee0c",
                    "is_starred": false,
                    "has_rich_preview": false,
                    "file_access": "visible"
                }
            ],
            "upload": false,
            "user": "UCUSW7WVD",
            "display_as_bot": false,
            "ts": "1676798153.605919",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "qCDe",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Today I put together a little visualizer for Mastodon threads. The graph layout is nothing special, but:\n"
                                }
                            ]
                        },
                        {
                            "type": "rich_text_list",
                            "elements": [
                                {
                                    "type": "rich_text_section",
                                    "elements": [
                                        {
                                            "type": "text",
                                            "text": "it has structured keyboard shortcuts (up for parent, down for child, left/right for siblings) which might be more useful for understanding a complex thread"
                                        }
                                    ]
                                },
                                {
                                    "type": "rich_text_section",
                                    "elements": [
                                        {
                                            "type": "text",
                                            "text": "as always you can live-edit it so it's hopefully easy to improve"
                                        }
                                    ]
                                }
                            ],
                            "style": "bullet",
                            "indent": 0,
                            "border": 0
                        },
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "\nOne other little integration: opening links in browsers opens up all sorts of cross-platform cans of worms, so I ended up just copying a URL to the clipboard any time you click on a toot.\n\n"
                                },
                                {
                                    "type": "link",
                                    "url": "https://git.sr.ht/~akkartik/mastodon-unfurl.love"
                                }
                            ]
                        }
                    ]
                }
            ],
            "edited": {
                "user": "UCUSW7WVD",
                "ts": "1676798406.000000"
            },
            "client_msg_id": "dc1208f1-9bed-421d-9f1b-26e67b1bf8f9",
            "thread_ts": "1676798153.605919",
            "reply_count": 6,
            "reply_users_count": 4,
            "latest_reply": "1677695118.929019",
            "reply_users": [
                "UJBAJNFLK",
                "U013ZLJARC7",
                "UCUSW7WVD",
                "U03R0B9U1GD"
            ],
            "is_locked": false,
            "subscribed": false
        },
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "211fbdb2-c9c9-4b09-b93a-ee2d18d82860",
        "type": "message",
        "text": "Agreed: coments suck.  The Goal should be to never need to write comments.\n\nFWIW: my solution is to begin with software components.  A Component is asynchronous and owns input ports (green circles) and output ports (yellow circles) and may contain other Components or be attached (via the ports and wires) to other Components. My syntax for a Component is a rectangle (as drawn, say, on a physical whiteboard on a wall). Synchronous code cannot be componentized (easily), so I mark synchronous code by putting it into red-coloured rectangles and dropping the red rectangles inside of non-red rectangles (async Components).  There are two separable issues - (1) explaining to the machine (aka \u201ccomputer\u201d) what to do and (2) explaining to other humans why 1 was written the way it was.  Frothing aside: operating system processes are simply Greenspun\u2019s 10th Rule bloatware versions of Components.  Code libraries are always red-boxed. Lisp 1.5 anonymous functions are less bloatware-y versions of the basic idea.  Closures are optimized anonymous functions (optimized along exactly one axis (i.e. the fervent, religious belief that \u201cefficiency\u201d can mean only one thing)).  So-called \u201cprogramming languages\u201d are 1950s IDEs for explaining to stupid machines what to do.  Later, these old-fashioned IDEs were given double-duty by conflating the issues of communicating with dumb machines and of communicating with other humans.  I find it more fruitful to fully separate these 2 issues, then to drape \u201csyntax\u201d (sugar sprinkles) over the manifestations to provide less-glaring results that cover both issues (syntax, to me is: hybrid diagrams (such as Excalidraw, <http://draw.io|draw.io>, SVG, etc. that encompass text), i.e. text-based programs are but a subset of less-textual programs)",
        "user": "UGWUJUZHT",
        "ts": "1677665841.665449",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xu+lN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Agreed: coments suck.  The Goal should be to never need to write comments.\n\nFWIW: my solution is to begin with software components.  A Component is asynchronous and owns input ports (green circles) and output ports (yellow circles) and may contain other Components or be attached (via the ports and wires) to other Components. My syntax for a Component is a rectangle (as drawn, say, on a physical whiteboard on a wall). Synchronous code cannot be componentized (easily), so I mark synchronous code by putting it into red-coloured rectangles and dropping the red rectangles inside of non-red rectangles (async Components).  There are two separable issues - (1) explaining to the machine (aka \u201ccomputer\u201d) what to do and (2) explaining to other humans why 1 was written the way it was.  Frothing aside: operating system processes are simply Greenspun\u2019s 10th Rule bloatware versions of Components.  Code libraries are always red-boxed. Lisp 1.5 anonymous functions are less bloatware-y versions of the basic idea.  Closures are optimized anonymous functions (optimized along exactly one axis (i.e. the fervent, religious belief that \u201cefficiency\u201d can mean only one thing)).  So-called \u201cprogramming languages\u201d are 1950s IDEs for explaining to stupid machines what to do.  Later, these old-fashioned IDEs were given double-duty by conflating the issues of communicating with dumb machines and of communicating with other humans.  I find it more fruitful to fully separate these 2 issues, then to drape \u201csyntax\u201d (sugar sprinkles) over the manifestations to provide less-glaring results that cover both issues (syntax, to me is: hybrid diagrams (such as Excalidraw, "
                            },
                            {
                                "type": "link",
                                "url": "http://draw.io",
                                "text": "draw.io"
                            },
                            {
                                "type": "text",
                                "text": ", SVG, etc. that encompass text), i.e. text-based programs are but a subset of less-textual programs)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1677633753.693619",
        "parent_user_id": "UGWUJUZHT"
    },
    {
        "type": "message",
        "text": "",
        "files": [
            {
                "id": "F04RTNP070S",
                "created": 1677665992,
                "timestamp": 1677665992,
                "name": "notes 7 2023-03-01 04.41.16.excalidraw.png",
                "title": "notes 7 2023-03-01 04.41.16.excalidraw.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UGWUJUZHT",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 157133,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F04RTNP070S/notes_7_2023-03-01_04.41.16.excalidraw.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F04RTNP070S/download/notes_7_2023-03-01_04.41.16.excalidraw.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F04RTNP070S-bd81fabf6f/notes_7_2023-03-01_04.41.16.excalidraw_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F04RTNP070S-bd81fabf6f/notes_7_2023-03-01_04.41.16.excalidraw_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F04RTNP070S-bd81fabf6f/notes_7_2023-03-01_04.41.16.excalidraw_360.png",
                "thumb_360_w": 337,
                "thumb_360_h": 360,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F04RTNP070S-bd81fabf6f/notes_7_2023-03-01_04.41.16.excalidraw_480.png",
                "thumb_480_w": 449,
                "thumb_480_h": 480,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F04RTNP070S-bd81fabf6f/notes_7_2023-03-01_04.41.16.excalidraw_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F04RTNP070S-bd81fabf6f/notes_7_2023-03-01_04.41.16.excalidraw_720.png",
                "thumb_720_w": 674,
                "thumb_720_h": 720,
                "original_w": 692,
                "original_h": 739,
                "thumb_tiny": "AwAwACzRxkdcUbeev6UvTjijP0oAF6fjS0g+tLQAUUUUANPQ9+abkZ6H86eRwRTApFADs5A+tOpoFOoAKKKKAG4zmjb/ALR/SlPy5NJu/wA4oAUdTSYznPHNAYZPX8qNwBP+FABt9z+lHc0b/wDODSgd/WgD/9k=",
                "permalink": "https://futureofcoding.slack.com/files/UGWUJUZHT/F04RTNP070S/notes_7_2023-03-01_04.41.16.excalidraw.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F04RTNP070S-188c9603fb",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "UGWUJUZHT",
        "display_as_bot": false,
        "ts": "1677666000.967379",
        "client_msg_id": "05ca3403-0819-49b3-ab05-11e91624b0f4",
        "thread_ts": "1677633753.693619",
        "parent_user_id": "UGWUJUZHT",
        "reactions": [
            {
                "name": "star",
                "users": [
                    "U03R0B9U1GD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8bcf3adf-687a-4dc1-b933-f9f48fcc3601",
        "type": "message",
        "text": "[*] meta - ugh I did it again.  My comment should have been a thread attached to the original note,  but, instead it is a note unto itself.  I would normally delete my comment and move it to a thread hung off of the original note, but there are now comments attached to my what-should-have-been-a-comment and I don\u2019t know what to do.  This is an example of bad UI design (Slack\u2019s fault).  Commenting is mode-ful.  Entering the first comment requires a different action than entering subsequent comments.",
        "user": "UGWUJUZHT",
        "ts": "1677666072.874489",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qEy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[*] meta - ugh I did it again.  My comment should have been a thread attached to the original note,  but, instead it is a note unto itself.  I would normally delete my comment and move it to a thread hung off of the original note, but there are now comments attached to my what-should-have-been-a-comment and I don\u2019t know what to do.  This is an example of bad UI design (Slack\u2019s fault).  Commenting is mode-ful.  Entering the first comment requires a different action than entering subsequent comments."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1677633753.693619",
        "parent_user_id": "UGWUJUZHT",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U03R0B9U1GD",
                    "UC2A2ARPT",
                    "UCUSW7WVD"
                ],
                "count": 3
            },
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "41e0b91f-9b7e-4afd-b4bd-6286e51773f1",
        "type": "message",
        "text": "<@UC2A2ARPT> I would love to see this!",
        "user": "U03R0B9U1GD",
        "ts": "1677666518.996109",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ILRPD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " I would love to see this!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1677633753.693619",
        "parent_user_id": "UGWUJUZHT",
        "reactions": [
            {
                "name": "beers",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b281824f-bcf2-4779-b37e-368039311394",
        "type": "message",
        "text": "<@UC2A2ARPT> You would need a reasonably flexible graphical support for that :slightly_smiling_face:",
        "user": "UE1JQM9HQ",
        "ts": "1677736810.584969",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UPI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " You would need a reasonably flexible graphical support for that "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1677633753.693619",
        "parent_user_id": "UGWUJUZHT",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7f95ea52-eb93-4a17-9a86-682687e8aa95",
        "type": "message",
        "text": "For a while, NeXT\u2019s gcc supported RTF input files.  Fun times\u2026.",
        "user": "U017TE5R09M",
        "ts": "1677848436.311349",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sgc8z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For a while, NeXT\u2019s gcc supported RTF input files.  Fun times\u2026."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U017TE5R09M",
            "ts": "1677848453.000000"
        },
        "thread_ts": "1677633753.693619",
        "parent_user_id": "UGWUJUZHT"
    }
]