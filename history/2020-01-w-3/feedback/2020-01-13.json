[
    {
        "client_msg_id": "655f40d1-7a91-4a17-9c81-d7e4a9fe40cd",
        "type": "message",
        "text": "Got these from twitter in response to my blog post tweet. Really on point:\n1. <https://repository.upenn.edu/cgi/viewcontent.cgi?article=1074&amp;context=library_papers> Architectural Mismatch: Why Reuse is Still SoHard\n2. <https://www.researchgate.net/publication/3188141_Avoiding_packaging_mismatch_with_flexible_packaging> Avoiding packaging mismatch with flexible packaging",
        "user": "U8A5MS6R1",
        "ts": "1578893159.031200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BcgJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Got these from twitter in response to my blog post tweet. Really on point:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https://repository.upenn.edu/cgi/viewcontent.cgi?article=1074&context=library_papers"
                                    },
                                    {
                                        "type": "text",
                                        "text": " Architectural Mismatch: Why Reuse is Still SoHard"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https://www.researchgate.net/publication/3188141_Avoiding_packaging_mismatch_with_flexible_packaging"
                                    },
                                    {
                                        "type": "text",
                                        "text": " Avoiding packaging mismatch with flexible packaging"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "f2da4498-6ac8-441d-b212-34c01885b18d",
        "type": "message",
        "text": "Oh drat, I just submitted my paper earlier today. The first link might have been a citation with a few more days.",
        "user": "UCUSW7WVD",
        "ts": "1578893661.031400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1578923325.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5QOow",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh drat, I just submitted my paper earlier today. The first link might have been a citation with a few more days."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "a9bf579b-efa1-404f-8798-36d1c215a377",
        "type": "message",
        "text": "I found myself rereading an older thread (<https://futureofcoding.slack.com/archives/C5T9GPWFL/p1568748321207400>). In particular, <@UJBAJNFLK>'s paper on reusable vs re-editable code seems very relevant: <https://hal.archives-ouvertes.fr/hal-01966146/document>",
        "user": "UCUSW7WVD",
        "ts": "1578902869.031700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1568748321207400",
                "fallback": "[September 17th, 2019 12:25 PM] steve447: Would folks here agree that what most developers spend most of their time on is (roughly speaking) rewriting code that\u2019s been written before instead of implementing logic truly unique to their application?",
                "ts": "1568748321.207400",
                "author_id": "ULM3U6275",
                "author_subname": "Steve Dekorte",
                "channel_id": "C5T9GPWFL",
                "channel_name": "general",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "Would folks here agree that what most developers spend most of their time on is (roughly speaking) rewriting code that\u2019s been written before instead of implementing logic truly unique to their application?",
                "author_name": "Steve Dekorte",
                "author_link": "https://futureofcoding.slack.com/team/ULM3U6275",
                "author_icon": "https://secure.gravatar.com/avatar/7588e3d3aa94ba40f57f495ec8c3206b.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1568748321207400",
                "footer": "Thread in #general"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bwT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I found myself rereading an older thread ("
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1568748321207400"
                            },
                            {
                                "type": "text",
                                "text": "). In particular, "
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": "'s paper on reusable vs re-editable code seems very relevant: "
                            },
                            {
                                "type": "link",
                                "url": "https://hal.archives-ouvertes.fr/hal-01966146/document"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "f04d1e67-4845-4109-ac80-8fe716efd7dd",
        "type": "message",
        "text": "Thanks <@UCUSW7WVD> for making Slack notify me of this thread that I have somehow missed! It's a topic I have been thinking about for a long time, ending up writing a blog post (<https://blog.khinsen.net/posts/2016/03/04/composition-is-the-root-of-all-evil/>) and an article (<https://hal.archives-ouvertes.fr/hal-02117720>) on it (plus the one already cited).\n\nMany aspects of the problem have already been mentioned here, so let me add just the one I feel missing: there is insufficient incentive in computing to make people agree on interfaces (APIs, data formats, programming languages, ...). In the physical world, a machine shop is free to define and make their own screws, but there is a high cost associated with deviating from industry standards, because important economies of scale are lost. In the world of bits, there are few such economies, making it cheap to introduce different interfaces (neither better nor worse, just different) for strategic or ideological reasons.\nThe rise of a few big players has aggravated that problem, leading to the information silos and walled gardens we have today. In parallel, we hardly see standardization efforts any more - all the major standards in computing are more than 20 years old. Standards happen in markets where no player can hope to achieve dominance but everyone has a shared interest in growth of the market as a whole.\nNow add Conway's law (<https://en.wikipedia.org/wiki/Conway's_law>) and you see the link between this situation and the increasing concentration of power/capital in the economy in general. Which raises the question of what kind of organization could favor more composability in computing.",
        "user": "UJBAJNFLK",
        "ts": "1578916049.032300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Composition is the root of all evil",
                "title_link": "https://blog.khinsen.net/posts/2016/03/04/composition-is-the-root-of-all-evil/",
                "text": "Think of all the things you hate about using computers in doing research. Software installation. Getting your colleagues' scripts to work on your machine. System updates that break your computational code. The multitude of file formats and the eternal nee...",
                "fallback": "Composition is the root of all evil",
                "from_url": "https://blog.khinsen.net/posts/2016/03/04/composition-is-the-root-of-all-evil/",
                "service_name": "blog.khinsen.net",
                "id": 1,
                "original_url": "https://blog.khinsen.net/posts/2016/03/04/composition-is-the-root-of-all-evil/"
            },
            {
                "title": "A Dream of Simplicity: Scientific Computing on Turing Machines",
                "title_link": "https://hal.archives-ouvertes.fr/hal-02117720",
                "text": "Frustrated by another failed software installation? Wondering why you can't reproduce your colleagues' computations? This story will tell you why. It won't magically solve your problems, but it does point out a glimpse of hope for the future. It's one of those days in the life of a computational scientist. Your desktop computer is busy updating its operating system and doesn't have any time left for you. The installation of your favorite simulation software on the new supercomputer doesn't advance beyond an error message extending over 500 lines. And your data analysis hasn't made much progress either: the results change when you use more or fewer processors, which doesn't look right. You already asked Siri for advice, but as so often is the case, that conversation led absolutely nowhere. Computers are complex, frustrating machines. If only we could have simple ones that just did what we tell them to do! Maybe it's a good idea to go back to the basics. Ever heard of Turing machines? They were invented in 1937 by Alan Turing, 1 and they're as simple as computers can get. No keyboard, no screen, no hard disk-no operating system either, nor any voices pestering you. You write your instructions on a tape, put the tape into the machine, and push a button. The machine starts working, moving the tape back and forth. When it stops, you take out the tape again and read off the result. Computing couldn't be simpler! Turing invented the machine that was later named after him as a purely theoretical concept. There wasn't much real computing hardware available back then, but people eventually built physical realizations (<http://www.legoturingmachine.org/lego-turing-machine|www.legoturingmachine.org/lego-turing-machine>, <http://aturingmachine.com>, and",
                "fallback": "A Dream of Simplicity: Scientific Computing on Turing Machines",
                "from_url": "https://hal.archives-ouvertes.fr/hal-02117720",
                "service_name": "hal.archives-ouvertes.fr",
                "id": 2,
                "original_url": "https://hal.archives-ouvertes.fr/hal-02117720"
            },
            {
                "title": "Conway's law",
                "title_link": "https://en.wikipedia.org/wiki/Conway's_law",
                "from_url": "https://en.wikipedia.org/wiki/Conway's_law",
                "author_name": "Wikipedia",
                "author_link": "https://en.wikipedia.org/",
                "text": "Conway's law is an adage stating that organizations design systems that mirror their own communication structure. It is named after computer programmer Melvin Conway, who introduced the idea in 1967. His original wording was:\n\norganizations which design systems ... are constrained to produce designs which are copies of the communication structures of these organizations.\n\nThe law is based on the reasoning that in order for a software module to function, multiple authors must communicate frequently with each other. Therefore, the software interface structure of a system will reflect the social boundaries of the organization(s) that produced it, across which communication is more difficult. Conway's law was intended as a valid sociological observation, although sometimes it's used in a humorous context. It was dubbed Conway's law by participants at the 1968 National Symposium on Modular <http://Programming.In|Programming.In> colloquial terms, it means software or automated systems end up \"shaped like\" the organizational structure they are designed in or designed for. Some interpretations of the law say this organizational pattern mirroring is a helpful feature of such systems, while other interpretations say it's merely a result of human nature or organizational bias.",
                "fallback": "wikipedia: Conway's law",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png",
                "id": 3,
                "original_url": "https://en.wikipedia.org/wiki/Conway's_law"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "stiT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " for making Slack notify me of this thread that I have somehow missed! It's a topic I have been thinking about for a long time, ending up writing a blog post ("
                            },
                            {
                                "type": "link",
                                "url": "https://blog.khinsen.net/posts/2016/03/04/composition-is-the-root-of-all-evil/"
                            },
                            {
                                "type": "text",
                                "text": ") and an article ("
                            },
                            {
                                "type": "link",
                                "url": "https://hal.archives-ouvertes.fr/hal-02117720"
                            },
                            {
                                "type": "text",
                                "text": ") on it (plus the one already cited).\n\nMany aspects of the problem have already been mentioned here, so let me add just the one I feel missing: there is insufficient incentive in computing to make people agree on interfaces (APIs, data formats, programming languages, ...). In the physical world, a machine shop is free to define and make their own screws, but there is a high cost associated with deviating from industry standards, because important economies of scale are lost. In the world of bits, there are few such economies, making it cheap to introduce different interfaces (neither better nor worse, just different) for strategic or ideological reasons.\nThe rise of a few big players has aggravated that problem, leading to the information silos and walled gardens we have today. In parallel, we hardly see standardization efforts any more - all the major standards in computing are more than 20 years old. Standards happen in markets where no player can hope to achieve dominance but everyone has a shared interest in growth of the market as a whole.\nNow add Conway's law ("
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Conway's_law"
                            },
                            {
                                "type": "text",
                                "text": ") and you see the link between this situation and the increasing concentration of power/capital in the economy in general. Which raises the question of what kind of organization could favor more composability in computing."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "UFLN9JFRT"
                ],
                "count": 2
            },
            {
                "name": "100",
                "users": [
                    "U8A5MS6R1",
                    "UFLN9JFRT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "28b5b3f7-3645-4ce1-ab88-acda8c83c7ea",
        "type": "message",
        "text": "No Code Data Science Update: Drag &amp; Drop Basket, Workspaces and Search\n\nEasier drag &amp; drop of one or more items across long distances or across screens with the basket.\n\nWorkspaces can be created to work on different tasks and search used to navigate between them.\n\n<https://www.youtube.com/watch?v=g1LyPBPNJiI>",
        "user": "UBN9AFS0N",
        "ts": "1578924156.032900",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "No Code Data Science Update: Drag &amp; Drop Basket, Workspaces and Search",
                "title_link": "https://www.youtube.com/watch?v=g1LyPBPNJiI",
                "author_name": "Instadeq",
                "author_link": "https://www.youtube.com/channel/UCz4zYu_PV7OjCNrNZyYiXzg",
                "thumb_url": "https://i.ytimg.com/vi/g1LyPBPNJiI/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: No Code Data Science Update: Drag & Drop Basket, Workspaces and Search",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/g1LyPBPNJiI?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=g1LyPBPNJiI",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=g1LyPBPNJiI"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Beg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No Code Data Science Update: Drag & Drop Basket, Workspaces and Search\n\nEasier drag & drop of one or more items across long distances or across screens with the basket.\n\nWorkspaces can be created to work on different tasks and search used to navigate between them.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=g1LyPBPNJiI"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578924156.032900",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1578931280.033600",
        "reply_users": [
            "UAZT04VT4",
            "UBN9AFS0N",
            "ULM3U6275"
        ],
        "subscribed": true,
        "last_read": "1578931280.033600",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UAZT04VT4"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "48f283e4-4e19-4f11-bba7-bb31df18e30b",
        "type": "message",
        "text": "That looks very helpful. It would be nice if you had some example data as additional context, so you could see [0 1] has values like \u201cProduct1\u201d, \u201cProdukt2\".",
        "user": "UAZT04VT4",
        "ts": "1578926838.033200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8U4d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That looks very helpful. It would be nice if you had some example data as additional context, so you could see [0 1] has values like \u201cProduct1\u201d, \u201cProdukt2\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578924156.032900",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "21f89836-e4fc-4ebe-b560-882c3f5adbd7",
        "type": "message",
        "text": "great idea, I will have to see how to handle paths that expand to a whole table :slightly_smiling_face:",
        "user": "UBN9AFS0N",
        "ts": "1578927366.033400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VG=o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "great idea, I will have to see how to handle paths that expand to a whole table "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578924156.032900",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "36fd224d-c5f8-4989-9b37-ff35e7892b73",
        "type": "message",
        "text": "Cool feature. This is like the NeXT File Viewer shelf but with a nice collapse feature.",
        "user": "ULM3U6275",
        "ts": "1578931280.033600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vm+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cool feature. This is like the NeXT File Viewer shelf but with a nice collapse feature."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578924156.032900",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "slightly_smiling_face",
                "users": [
                    "UBN9AFS0N"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "bde2ea92-3b16-4028-beff-db4330ebe8b9",
        "type": "message",
        "text": "<@UMWF81HTP> Thank you kindly for your feedback :slightly_smiling_face: I\u2019ll DM you to follow-up",
        "user": "UJKKBAMLL",
        "ts": "1578933684.034100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=BFS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UMWF81HTP"
                            },
                            {
                                "type": "text",
                                "text": " Thank you kindly for your feedback "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " I\u2019ll DM you to follow-up"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578685227.003500",
        "parent_user_id": "UJKKBAMLL"
    },
    {
        "client_msg_id": "e44723c7-0e81-4339-8200-6b2b90be84f0",
        "type": "message",
        "text": "Excellent stuff, <@UJBAJNFLK>! (I think I'd only seen one of these papers earlier.) The blog post is :100:. I share the perspective of the broader (English?) meaning composition. Really when I want to combine virtual object A (file) and virtual object B (program) I want them to compose at the 'highest level of meaning' represented by these object, but the bit formats and other intermediate languages are always 'in the way'.",
        "user": "U8A5MS6R1",
        "ts": "1578949730.034500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DK3Cu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Excellent stuff, "
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": "! (I think I'd only seen one of these papers earlier.) The blog post is "
                            },
                            {
                                "type": "emoji",
                                "name": "100"
                            },
                            {
                                "type": "text",
                                "text": ". I share the perspective of the broader (English?) meaning composition. Really when I want to combine virtual object A (file) and virtual object B (program) I want them to compose at the 'highest level of meaning' represented by these object, but the bit formats and other intermediate languages are always 'in the way'."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "36dcf48e-bda4-48b2-9547-a39183c2f77d",
        "type": "message",
        "text": "Wish I'd seen this earlier so I could link from my blog post - added now.",
        "user": "U8A5MS6R1",
        "ts": "1578951275.034700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HCL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wish I'd seen this earlier so I could link from my blog post - added now."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1"
    }
]