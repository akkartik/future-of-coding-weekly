[
    {
        "client_msg_id": "f176fa35-d06c-45cf-b5ed-3c5cefe6f4f9",
        "type": "message",
        "text": "The GUI/CLI dichotomy which is quite pronounced in the Unix world, is very blurry in some other models, e.g. Lisp Machines: \n\nUpdated link!\n\n<https://futureofcoding.slack.com/archives/C5T9GPWFL/p1578217655400200?thread_ts=1578217655.400200&amp;cid=C5T9GPWFL|https://futureofcoding.slack.com/archives/C5T9GPWFL/p1578217655400200?thread_ts=1578217655.400200&amp;cid=C5T9GPWFL>",
        "user": "U8A5MS6R1",
        "ts": "1584575675.398800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1584586605.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vJy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The GUI/CLI dichotomy which is quite pronounced in the Unix world, is very blurry in some other models, e.g. Lisp Machines: \n\nUpdated link!\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1578217655400200?thread_ts=1578217655.400200&cid=C5T9GPWFL",
                                "text": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1578217655400200?thread_ts=1578217655.400200&cid=C5T9GPWFL"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584544384.396000",
        "parent_user_id": "USH01JEDQ"
    },
    {
        "client_msg_id": "8482ff73-949a-40a8-a095-33b0e99b51b0",
        "type": "message",
        "text": "As far as I can tell, that is a link to this Slack.",
        "user": "UD3AK9JRF",
        "ts": "1584579716.399100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8Pw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As far as I can tell, that is a link to this Slack."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584544384.396000",
        "parent_user_id": "USH01JEDQ"
    },
    {
        "client_msg_id": "ff3be9c0-4279-479d-b1a9-6a80ece610fe",
        "type": "message",
        "text": "I think he's hallucinating some conspiracy theory over what is really just a \"Worse is Better\" scenario. It's sad, there are some great motivating observations in there, but it's all written from a very privileged tech bro perspective.\n\nI wish more people would not buy into the simplistic \"end user is stupid\" narrative when it was more like \"end users don't want to and shouldn't have to care about all that computing stuff and just get stuff done\". The first comment and the author's response to it are also valuable to look at.",
        "user": "U5STGTB3J",
        "ts": "1584626568.399800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1584626608.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GqyY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think he's hallucinating some conspiracy theory over what is really just a \"Worse is Better\" scenario. It's sad, there are some great motivating observations in there, but it's all written from a very privileged tech bro perspective.\n\nI wish more people would not buy into the simplistic \"end user is stupid\" narrative when it was more like \"end users don't want to and shouldn't have to care about all that computing stuff and just get stuff done\". The first comment and the author's response to it are also valuable to look at."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584162895.317900",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "4c0476cb-86ed-4654-bc4f-0c45f58e366d",
        "type": "message",
        "text": "Hi all,\n\nI would be interested to hear thoughts on the current state of educational environments for programming skills and paradigms.\u00a0\n\nI'm wondering if with a somewhat enhanced approach to sharing knowledge in our domain - certain things could be learnt (far?) more efficiently. Stretch goal would be to be learn the interesting parts of the go lang compiler in the morning, and compare their design decisions and trade offs to the internals of the dotty compiler in the afternoon.\u00a0\n\nTo me; its another angle on \"accidental complexity.\" There certainly are a number of hard bits in building and understanding software; but, whenever I start to get my head somewhat around a code set; I generally feel that the interesting / insightful / useful bits of the solution are far too buried in boilerplate and various other forms of noise.\n\nI think the \"learning\" angle is a useful perspective to keep in mind. I do mainly mean it in the read a textbook / blog post, watch a youtube video, attend a (virtual) conference, go to coding bootcamp / university, onboard a new joiner to your team kinda\u00a0way. But; I also feel that \"learning\" is pretty much all we are every trying to do. \"Learn\" how to implement this Rest API and make it slightly more testable than our last attempt. \"Learn\" what the root cause of this bug taking down our entire production platform is etc.\n\nOf course; all thoughts and comments welcome - I would be interested to hear peoples\u00a0views on points such as\n- what events stand out as important learning points in your path to technical enlightenment?\n- what approaches have been used to \"get up to speed\" in order to contribute to open source software? Perhaps from the \"how did you learn enough stuff to be useful\" perspective\n- how well (or not) have you seen the \"living\" knowledge of a code-set be managed in secular projects?\n- Is Udemy all we should hope for; or could we build better environments within which to have our\u00a0discussions?",
        "user": "UN06QADNV",
        "ts": "1584643351.400400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qeyc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi all,\n\nI would be interested to hear thoughts on the current state of educational environments for programming skills and paradigms.\u00a0\n\nI'm wondering if with a somewhat enhanced approach to sharing knowledge in our domain - certain things could be learnt (far?) more efficiently. Stretch goal would be to be learn the interesting parts of the go lang compiler in the morning, and compare their design decisions and trade offs to the internals of the dotty compiler in the afternoon.\u00a0\n\nTo me; its another angle on \"accidental complexity.\" There certainly are a number of hard bits in building and understanding software; but, whenever I start to get my head somewhat around a code set; I generally feel that the interesting / insightful / useful bits of the solution are far too buried in boilerplate and various other forms of noise.\n\nI think the \"learning\" angle is a useful perspective to keep in mind. I do mainly mean it in the read a textbook / blog post, watch a youtube video, attend a (virtual) conference, go to coding bootcamp / university, onboard a new joiner to your team kinda\u00a0way. But; I also feel that \"learning\" is pretty much all we are every trying to do. \"Learn\" how to implement this Rest API and make it slightly more testable than our last attempt. \"Learn\" what the root cause of this bug taking down our entire production platform is etc.\n\nOf course; all thoughts and comments welcome - I would be interested to hear peoples\u00a0views on points such as\n- what events stand out as important learning points in your path to technical enlightenment?\n- what approaches have been used to \"get up to speed\" in order to contribute to open source software? Perhaps from the \"how did you learn enough stuff to be useful\" perspective\n- how well (or not) have you seen the \"living\" knowledge of a code-set be managed in secular projects?\n- Is Udemy all we should hope for; or could we build better environments within which to have our\u00a0discussions?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584643351.400400",
        "reply_count": 18,
        "reply_users_count": 5,
        "latest_reply": "1584716328.433000",
        "reply_users": [
            "UAJKEBGP8",
            "UAVCC2X70",
            "UD6EXQVM0",
            "UN06QADNV",
            "UKDM3GLAJ"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC",
                    "UD6EXQVM0",
                    "UQPHR6Y3S"
                ],
                "count": 4
            },
            {
                "name": "bulb",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c721c9a3-0580-42c2-ba22-1fcfcadd79cc",
        "type": "message",
        "text": "hey Brent, I\u2019ve spent the last 5 years in online learning. I\u2019ll speak specifically to \u201cIs Udemy all we should hope for\u201d?\n\nSpecifically, the company I worked for created an integrated environment for learning python, data science, etc (similar to Codecademy, hands-on, problem solving based approach). This was helpful for students that were motivated, b/c they no longer had to spend hours debugging command line / installation / other computer issues. They could just focus on debugging their Python code (we also showed variable state to help a tiny bit with debugging, but it was definitely no \u201cPython tutor\u201d like environment).\n\nI think better environments can help highly motivated students, but not unmotivated students.. a word I\u2019m using in the broadest sense and in a non-judgmental way. A biology student that doesn\u2019t need to code or w/e I\u2019d argue is unmotivated. So then the question is \u2026 are you interested in turning unmotivated students into computational thinkers? Or do you want to teach motivated students better Python?\n\nThose are 2 very different problems :stuck_out_tongue:",
        "user": "UAJKEBGP8",
        "ts": "1584647438.404100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eQFK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "hey Brent, I\u2019ve spent the last 5 years in online learning. I\u2019ll speak specifically to \u201cIs Udemy all we should hope for\u201d?\n\nSpecifically, the company I worked for created an integrated environment for learning python, data science, etc (similar to Codecademy, hands-on, problem solving based approach). This was helpful for students that were motivated, b/c they no longer had to spend hours debugging command line / installation / other computer issues. They could just focus on debugging their Python code (we also showed variable state to help a tiny bit with debugging, but it was definitely no \u201cPython tutor\u201d like environment).\n\nI think better environments can help highly motivated students, but not unmotivated students.. a word I\u2019m using in the broadest sense and in a non-judgmental way. A biology student that doesn\u2019t need to code or w/e I\u2019d argue is unmotivated. So then the question is \u2026 are you interested in turning unmotivated students into computational thinkers? Or do you want to teach motivated students better Python?\n\nThose are 2 very different problems "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584643351.400400",
        "parent_user_id": "UN06QADNV",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b2f4fcca-a54e-49e3-a326-ba383b14ff4b",
        "type": "message",
        "text": "So there's two different things going on here:\n* Learning \"programming\" (e.g. education)\n* Learning what's in a certain codebase, or how to use a specific tool or language or framework.\n\nI'll comment on the first:\n\n\"Programming\" is usually taught in terms of learning a specific language or tool, and getting it to compile and it's nuances, etc. In other words, in terms of the second category, above. I think that's a mistake, but that's NOT what programming IS. It's just what it HAPPENS to entail right now, as currently practiced / implemented. How the heck can we improve on or escape from any of that is it's taught that \"programming\" is getting a Java app to build, etc.\n\nInstead, I think we need custom tools or environments or whatever, that expose the now concrete concepts of programming to be explored. This might not be an actual language, or might be very sandboxed; but the important thing is the CONCEPTS.\n\nLearning using traditional programming bloat just gets in the way. People end up focusing more on the syntax to get a Java class to compile (sometimes not even knowing yet what that even means), and the understanding of what's being programmed and what that means, is lost / mixed up with a ton of boilerplate and tooling that is NOT PROGRAMMING. It's very confusing for new Learners.\n\nIt's true really of any language or tool. \"Learning python\" is not learning \"programming\" -- though some of that still happens as a side effect, that's not the same thing, and it's learned in a very specific context; the student will think that they are \"learning programming\" because they've learned some python commands; they will think that's what it means to program",
        "user": "UAVCC2X70",
        "ts": "1584647986.416000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1584648242.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1tB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So there's two different things going on here:\n* Learning \"programming\" (e.g. education)\n* Learning what's in a certain codebase, or how to use a specific tool or language or framework.\n\nI'll comment on the first:\n\n\"Programming\" is usually taught in terms of learning a specific language or tool, and getting it to compile and it's nuances, etc. In other words, in terms of the second category, above. I think that's a mistake, but that's NOT what programming IS. It's just what it HAPPENS to entail right now, as currently practiced / implemented. How the heck can we improve on or escape from any of that is it's taught that \"programming\" is getting a Java app to build, etc.\n\nInstead, I think we need custom tools or environments or whatever, that expose the now concrete concepts of programming to be explored. This might not be an actual language, or might be very sandboxed; but the important thing is the CONCEPTS.\n\nLearning using traditional programming bloat just gets in the way. People end up focusing more on the syntax to get a Java class to compile (sometimes not even knowing yet what that even means), and the understanding of what's being programmed and what that means, is lost / mixed up with a ton of boilerplate and tooling that is NOT PROGRAMMING. It's very confusing for new Learners.\n\nIt's true really of any language or tool. \"Learning python\" is not learning \"programming\" -- though some of that still happens as a side effect, that's not the same thing, and it's learned in a very specific context; the student will think that they are \"learning programming\" because they've learned some python commands; they will think that's what it means to program"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584643351.400400",
        "parent_user_id": "UN06QADNV"
    },
    {
        "client_msg_id": "1d04950a-9a0e-4c94-87e6-031d8a9cf563",
        "type": "message",
        "text": "Strongly agree, and I think most people here would, that programming is definitely not just \u201cPython\u201d or \u201cjavascript\u201d .. which are just temporary quirks. However, I wonder how you\u2019d define \u201cprogramming\u201d? Is it general computing? Is it the art of creating programs to do something creative / accomplish a task? Excel is kinda programming but the learning curve for that is very different than it is for a \u201creal\u201d language like Python or JavaScript (again real in quotation marks).\n\nAlso, sadly, I don\u2019t think there\u2019s much of an appetite / audience for \u201cgeneral programming\u201d knowledge. Everyone\u2019s rushing to teach \u201cpractical\u201d skills. Even in K-12 they teach Python often, or they\u2019ll teach a more conceptual pre-cursor like block based programming / Scratch .. but then level up to \u201creal\u201d coding like Python. Part of the problem too is .. teaching kids (or even new adults) something that feels like the fake version of the \u201creal\u201d thing can be demoralizing. One day, the \u201creal\u201d programming thing will feel a lot more like Excel (which I guess why this community exists) and the ramp from conceptual program to \u201creal\u201d programming will be smoother",
        "user": "UAJKEBGP8",
        "ts": "1584648446.416400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O8tK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Strongly agree, and I think most people here would, that programming is definitely not just \u201cPython\u201d or \u201cjavascript\u201d .. which are just temporary quirks. However, I wonder how you\u2019d define \u201cprogramming\u201d? Is it general computing? Is it the art of creating programs to do something creative / accomplish a task? Excel is kinda programming but the learning curve for that is very different than it is for a \u201creal\u201d language like Python or JavaScript (again real in quotation marks).\n\nAlso, sadly, I don\u2019t think there\u2019s much of an appetite / audience for \u201cgeneral programming\u201d knowledge. Everyone\u2019s rushing to teach \u201cpractical\u201d skills. Even in K-12 they teach Python often, or they\u2019ll teach a more conceptual pre-cursor like block based programming / Scratch .. but then level up to \u201creal\u201d coding like Python. Part of the problem too is .. teaching kids (or even new adults) something that feels like the fake version of the \u201creal\u201d thing can be demoralizing. One day, the \u201creal\u201d programming thing will feel a lot more like Excel (which I guess why this community exists) and the ramp from conceptual program to \u201creal\u201d programming will be smoother"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584643351.400400",
        "parent_user_id": "UN06QADNV"
    },
    {
        "client_msg_id": "35a84096-798d-4921-8e94-9aa13060a836",
        "type": "message",
        "text": "but I think the question of \u201cwhat programming\u201d actually is, is quite interesting. I don\u2019t know if we\u2019ve quite figured it out b/c programming always lives in the assumptions and trappings of a pre-existing language of some kind!",
        "user": "UAJKEBGP8",
        "ts": "1584648479.416600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c1xn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "but I think the question of \u201cwhat programming\u201d actually is, is quite interesting. I don\u2019t know if we\u2019ve quite figured it out b/c programming always lives in the assumptions and trappings of a pre-existing language of some kind!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584643351.400400",
        "parent_user_id": "UN06QADNV"
    },
    {
        "client_msg_id": "345b84b0-6fb7-4258-9776-2fbb728dd6ca",
        "type": "message",
        "text": "I'd say that Bret Victor captures very well what programming is / is not, in \"Learning Programming\"\n\n<http://worrydream.com/LearnableProgramming/|http://worrydream.com/LearnableProgramming/>",
        "user": "UAVCC2X70",
        "ts": "1584648804.416800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1584694290.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I+qi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd say that Bret Victor captures very well what programming is / is not, in \"Learning Programming\"\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http://worrydream.com/LearnableProgramming/",
                                "text": "http://worrydream.com/LearnableProgramming/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584643351.400400",
        "parent_user_id": "UN06QADNV"
    },
    {
        "client_msg_id": "ED4D7966-8376-4E01-9A26-B63EF811F8D2",
        "type": "message",
        "text": "No such dichotomy in Smalltalk either. The common point between Smalltalk and Lisp machines: the system comes with a GUI by default, it\u2019s not an optional add-on.",
        "user": "UJBAJNFLK",
        "ts": "1584649231.419000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MfGp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No such dichotomy in Smalltalk either. The common point between Smalltalk and Lisp machines: the system comes with a GUI by default, it\u2019s not an optional add-on."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584544384.396000",
        "parent_user_id": "USH01JEDQ"
    }
]