[
    {
        "client_msg_id": "256a38f8-51d3-47bb-a5d9-b18455ee6126",
        "type": "message",
        "text": "Also\u2026 why? Why talk to a computer like this? It is very silly. Here is difference: `Start. Open tax folder. Open each 1099. Get the amount earned\u2026\u2026 1000 steps later`  *VS* `computer, do my taxes` \u2014 The later is better. Drawing: `Start. Draw circle. Draw smaller circle inside. Draw 15 lines on top of the circle......` *VS* `Draw an eye.`\nLess than 0.3% of the world need the former while 99% need the later.",
        "user": "UJKKBAMLL",
        "ts": "1590098515.047100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IYP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also\u2026 why? Why talk to a computer like this? It is very silly. Here is difference: "
                            },
                            {
                                "type": "text",
                                "text": "Start. Open tax folder. Open each 1099. Get the amount earned\u2026\u2026 1000 steps later",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  "
                            },
                            {
                                "type": "text",
                                "text": "VS",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "computer, do my taxes",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " \u2014 The later is better. Drawing: "
                            },
                            {
                                "type": "text",
                                "text": "Start. Draw circle. Draw smaller circle inside. Draw 15 lines on top of the circle......",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "VS",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "Draw an eye.",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nLess than 0.3% of the world need the former while 99% need the later."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3222218D-F69D-4970-ABB7-F4E7A69B40A8",
        "type": "message",
        "text": "Are you saying, drop everything and write AGI?",
        "user": "UFEQUBNNT",
        "ts": "1590098840.049800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sY4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are you saying, drop everything and write AGI?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "1c91cca5-0326-440a-9e6e-78bc7e711301",
        "type": "message",
        "text": "Same problems different day. Look, generating Python code is not exciting. The problem is not \u201cjust\u201d writing the code. We often forget there is learning git, infra, package management, and like a million other things that this OpenAI does not help with for the other 99% of the world that *cannot code* and regardless of an AI helping them type strange looking Python \u2014 it will not change the fact that most people cannot code.\n\nIt\u2019s impressive, sure, but think about who benefits by writing Python faster\u2026? Is speed really the problem?",
        "user": "UJKKBAMLL",
        "ts": "1590099002.050000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QM9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Same problems different day. Look, generating Python code is not exciting. The problem is not \u201cjust\u201d writing the code. We often forget there is learning git, infra, package management, and like a million other things that this OpenAI does not help with for the other 99% of the world that "
                            },
                            {
                                "type": "text",
                                "text": "cannot code",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and regardless of an AI helping them type strange looking Python \u2014 it will not change the fact that most people cannot code.\n\nIt\u2019s impressive, sure, but think about who benefits by writing Python faster\u2026? Is speed really the problem?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "fcba5069-0a60-436a-a68c-7dca7d55178f",
        "type": "message",
        "text": "Python, and all other languages, remain to low for most people and that will not change. We need something higher-level than classes, functions, variables and importing libraries. :thinking_face:",
        "user": "UJKKBAMLL",
        "ts": "1590099070.050500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nMHU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Python, and all other languages, remain to low for most people and that will not change. We need something higher-level than classes, functions, variables and importing libraries. "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "eb1b202a-b48d-486a-94c5-be77da6c8823",
        "type": "message",
        "text": "The world is not black and white. I order things on Amazon but they still need to be built by real people in a factory. Drop everything? Heck no! But creating software still remains out of reach for *most* the worlds population.",
        "user": "UJKKBAMLL",
        "ts": "1590099253.053200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJKKBAMLL",
            "ts": "1590099262.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nO6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The world is not black and white. I order things on Amazon but they still need to be built by real people in a factory. Drop everything? Heck no! But creating software still remains out of reach for "
                            },
                            {
                                "type": "text",
                                "text": "most",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the worlds population."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "01b86b6b-a28c-4223-a7dc-fa32e4d22f69",
        "type": "message",
        "text": "There will be farmers, there will be chefs and there will be waiters in the future of coding. I just think we should stop thinking about farmers only.",
        "user": "UJKKBAMLL",
        "ts": "1590099313.054000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HB6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There will be farmers, there will be chefs and there will be waiters in the future of coding. I just think we should stop thinking about farmers only."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "c7492eaa-71e5-4f9f-8e09-e1e7de6de05e",
        "type": "message",
        "text": "I will come to no surprise that I think this presentation by Microsoft was not inspiring nor fully utilizing the OpenAI framework to empower more people. It may have only made it easier for people who already know how to code\u2026 :shrug:",
        "user": "UJKKBAMLL",
        "ts": "1590099486.056400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/6v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I will come to no surprise that I think this presentation by Microsoft was not inspiring nor fully utilizing the OpenAI framework to empower more people. It may have only made it easier for people who already know how to code\u2026 "
                            },
                            {
                                "type": "emoji",
                                "name": "shrug"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "03F75AB0-661E-4083-97E1-54B0915CA4CC",
        "type": "message",
        "text": "The first time I saw tech like this was in Scratch to help beginners learn to code. They could write what they wanted the code to do (\u201cmake the ball bounce\u201d) and get a handful of snippets that they could steal from. And it worked the other way, so if they were unsure what some code did, they could press a button to get potential descriptions based on how people had described similar code. Very handy for learners.",
        "user": "UFEQUBNNT",
        "ts": "1590099498.056600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFEQUBNNT",
            "ts": "1590099510.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dsE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The first time I saw tech like this was in Scratch to help beginners learn to code. They could write what they wanted the code to do (\u201cmake the ball bounce\u201d) and get a handful of snippets that they could steal from. And it worked the other way, so if they were unsure what some code did, they could press a button to get potential descriptions based on how people had described similar code. Very handy for learners."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "73d7dfdc-720a-4345-b2b3-83c03a8afe6b",
        "type": "message",
        "text": "<@UA8HY8R7B> we are bringing Storyscript as a business to the market. Happy to share how/why",
        "user": "UJKKBAMLL",
        "ts": "1590099595.056900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xtYf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA8HY8R7B"
                            },
                            {
                                "type": "text",
                                "text": " we are bringing Storyscript as a business to the market. Happy to share how/why"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081535.029500",
        "parent_user_id": "UA8HY8R7B"
    },
    {
        "client_msg_id": "a5a13bfa-6cea-4ca2-be5c-dea95b25d1cb",
        "type": "message",
        "text": "Darklang is also going to market.",
        "user": "UJKKBAMLL",
        "ts": "1590099650.057100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N2I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Darklang is also going to market."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081535.029500",
        "parent_user_id": "UA8HY8R7B"
    },
    {
        "client_msg_id": "6a2b0b21-83c2-4cdc-a2be-72fc857a78d1",
        "type": "message",
        "text": "Right, but Scratch is a structured editor and essentially all-in-one. Python is far from that.",
        "user": "UJKKBAMLL",
        "ts": "1590099727.057300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJKKBAMLL",
            "ts": "1590099761.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BNs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Right, but Scratch is a structured editor and essentially all-in-one. Python is far from that."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "f96210e3-ac1d-43d3-8dbe-d2db6e644394",
        "type": "message",
        "text": "Now, if this was built into Darklang\u2026 now we are talking.",
        "user": "UJKKBAMLL",
        "ts": "1590099834.058800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EN7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Now, if this was built into Darklang\u2026 now we are talking."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "F952ECB9-378B-47BF-BC2E-AA6B5A99993A",
        "type": "message",
        "text": "A key part of the demo is that it puts you in conversation with the computer about processes _grounded in the language of your code base_. It happens that Python is part of the shared language they used in this demo, but it\u2019s really impressive that it is even conversant in verbs the user themselves defined.\n\nI can\u2019t say I\u2019d get any more or less out of it if they\u2019d done it in Dark? The value of the demo isn\u2019t in your ability to download it today, is it?",
        "user": "UFEQUBNNT",
        "ts": "1590100175.063700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFEQUBNNT",
            "ts": "1590100194.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=hMk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A key part of the demo is that it puts you in conversation with the computer about processes "
                            },
                            {
                                "type": "text",
                                "text": "grounded in the language of your code base",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". It happens that Python is part of the shared language they used in this demo, but it\u2019s really impressive that it is even conversant in verbs the user themselves defined.\n\nI can\u2019t say I\u2019d get any more or less out of it if they\u2019d done it in Dark? The value of the demo isn\u2019t in your ability to download it today, is it?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "C615CA52-41E9-4B8C-ACF7-EAF507E5C1ED",
        "type": "message",
        "text": "Honestly if they swapped out Python for system hotkeys then you\u2019d be well on your way to being able to type \u201ccomputer, do my taxes\u201d so I\u2019m having trouble figuring out your disappointment.",
        "user": "UFEQUBNNT",
        "ts": "1590100309.065900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFEQUBNNT",
            "ts": "1590100364.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4oup",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Honestly if they swapped out Python for system hotkeys then you\u2019d be well on your way to being able to type \u201ccomputer, do my taxes\u201d so I\u2019m having trouble figuring out your disappointment."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9915d71b-9adf-48d8-8879-ced78ee03c4e",
        "type": "message",
        "text": "&gt; If this \u201cplain english programming\u201d is compiled ... you have to represent the entire programs state in text.",
        "user": "UEBG0NPDK",
        "ts": "1590100347.066100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hmeDA",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If this \u201cplain english programming\u201d is compiled ... you have to represent the entire programs state in text."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "672feaa0-ae2c-4212-b5a4-0588842acb53",
        "type": "message",
        "text": "I\u2019m sorry, explain to me how system hotkeys can do my taxes?",
        "user": "UJKKBAMLL",
        "ts": "1590100357.066300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i2ieM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019m sorry, explain to me how system hotkeys can do my taxes?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "f63a9239-f5f0-410b-80fd-9abd5ad7da74",
        "type": "message",
        "text": "That's a very odd thing to say. Compilation has nothing to do with text or state.",
        "user": "UEBG0NPDK",
        "ts": "1590100363.066500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j9Uq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's a very odd thing to say. Compilation has nothing to do with text or state."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "010c3cf4-0ed7-4ad1-a098-68acfc23f699",
        "type": "message",
        "text": "Compilation is just the translation of semantics in one form to semantics in another form. We compile goals to motor actions all the time. Or thoughts to drawings, recipes, exercise routines, advice, and conversation.",
        "user": "UEBG0NPDK",
        "ts": "1590100447.068600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7t9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Compilation is just the translation of semantics in one form to semantics in another form. We compile goals to motor actions all the time. Or thoughts to drawings, recipes, exercise routines, advice, and conversation."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "242e31d2-b14c-47d7-b971-f89d3125cd7c",
        "type": "message",
        "text": "Perhaps you mean something else?",
        "user": "UEBG0NPDK",
        "ts": "1590100479.069400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o+=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perhaps you mean something else?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "f80fb925-d7e1-4e63-b801-f17de2dc4f40",
        "type": "message",
        "text": "I think they picked Python for a reason. That reason being that their demos are search results in StackOverflow. I\u2019m not inspired by writing the code they demoed because all that is in libraries. They did the simple stuff\u2026. how is that impressive? What about the hard stuff? I don\u2019t think it will anything to say about it. Python and essentially every single language has constructs and design principles that require abstraction and refactoring when the domain changes or knowledge is exposed. `this function reverses a list` is nothing. `this function fetches our customers from stripe and filters by company, then cross checks the results against our salesforce`\u2026. now that is something real",
        "user": "UJKKBAMLL",
        "ts": "1590100592.071100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ots",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think they picked Python for a reason. That reason being that their demos are search results in StackOverflow. I\u2019m not inspired by writing the code they demoed because all that is in libraries. They did the simple stuff\u2026. how is that impressive? What about the hard stuff? I don\u2019t think it will anything to say about it. Python and essentially every single language has constructs and design principles that require abstraction and refactoring when the domain changes or knowledge is exposed. "
                            },
                            {
                                "type": "text",
                                "text": "this function reverses a list",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is nothing. "
                            },
                            {
                                "type": "text",
                                "text": "this function fetches our customers from stripe and filters by company, then cross checks the results against our salesforce",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u2026. now that is something real"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "cda6932f-3f68-4365-8a07-c350bda26dfb",
        "type": "message",
        "text": "Language itself is exceedingly general, so it seems unlikely that broadness is an inherent wall that can't be overcome. It _is_ true that different domains use different vocabulary and different cognitive tools, but they're accessible within the same framework. You can move from one domain to the other in the course of a single sentence.",
        "user": "UEBG0NPDK",
        "ts": "1590100628.071600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4XJmI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Language itself is exceedingly general, so it seems unlikely that broadness is an inherent wall that can't be overcome. It "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " true that different domains use different vocabulary and different cognitive tools, but they're accessible within the same framework. You can move from one domain to the other in the course of a single sentence."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "254AE421-8AD1-4D55-9020-BB74383F62D8",
        "type": "message",
        "text": "The same way you do if you use tax software by pressing keys. If you wrote it out in Plain English, it\u2019d look like \u201cOpen browser. Navigate to <http://taxcut.com|taxcut.com>. Type username. Type password. Paste my 1099.\u201d with more words because I\u2019m on my phone :stuck_out_tongue: The point is, every process, transcribed, is code, so interpreting natural language into code is a big deal, if not exactly what you were calling for in the other thread.",
        "user": "UFEQUBNNT",
        "ts": "1590100674.072600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/bwv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The same way you do if you use tax software by pressing keys. If you wrote it out in Plain English, it\u2019d look like \u201cOpen browser. Navigate to "
                            },
                            {
                                "type": "link",
                                "url": "http://taxcut.com",
                                "text": "taxcut.com"
                            },
                            {
                                "type": "text",
                                "text": ". Type username. Type password. Paste my 1099.\u201d with more words because I\u2019m on my phone "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            },
                            {
                                "type": "text",
                                "text": " The point is, every process, transcribed, is code, so interpreting natural language into code is a big deal, if not exactly what you were calling for in the other thread."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "10c832e5-d0c6-41e2-afc0-b9e40da37cee",
        "type": "message",
        "text": "It\u2019s the unique stuff that counts. All these businesses have different constraints, services, environments, processes\u2026 OMG it\u2019s endless. The OpenAI demoed is nothing but a search result in SO",
        "user": "UJKKBAMLL",
        "ts": "1590100677.072800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4jGU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It\u2019s the unique stuff that counts. All these businesses have different constraints, services, environments, processes\u2026 OMG it\u2019s endless. The OpenAI demoed is nothing but a search result in SO"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "66bc5dcf-c014-42c0-95f0-4f60643791fd",
        "type": "message",
        "text": "&gt;  interpreting natural language into code is a big deal\nThis is where I, respectfully, disagree. At least in the context of code being a programming language currently on the market today.",
        "user": "UJKKBAMLL",
        "ts": "1590100744.073900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mYLm",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " interpreting natural language into code is a big deal"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is where I, respectfully, disagree. At least in the context of code being a programming language currently on the market today."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "bc3105b1-ace1-470f-b66e-082f30aa66c8",
        "type": "message",
        "text": "Art _is_ definitely a language in so many ways. From the vocabulary and idioms to how we evaluate and even experience it. It's a domain with a set of actions and rules that has a wonderfully open and powerful set of semantics.",
        "user": "UEBG0NPDK",
        "ts": "1590100819.075500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1590100830.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F6wy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Art "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " definitely a language in so many ways. From the vocabulary and idioms to how we evaluate and even experience it. It's a domain with a set of actions and rules that has a wonderfully open and powerful set of semantics."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "2A8CF919-BD51-4F69-960C-4405EA9BEA6E",
        "type": "message",
        "text": "I personally look forward to instructing a computer to help me generate any code required as input to every language you ever create. :smile:",
        "user": "UFEQUBNNT",
        "ts": "1590100837.076000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vo=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I personally look forward to instructing a computer to help me generate any code required as input to every language you ever create. "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "86eba66e-98fe-43d2-9f39-0e2078000bb2",
        "type": "message",
        "text": "Oh, I certainly am too. It\u2019s what I\u2019m building at Storyscript\u2026 but it\u2019s NOT translating to Python",
        "user": "UJKKBAMLL",
        "ts": "1590100874.076200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gcHr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh, I certainly am too. It\u2019s what I\u2019m building at Storyscript\u2026 but it\u2019s NOT translating to Python"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "1327d2d8-4c16-46f4-9fb3-b709dacf8079",
        "type": "message",
        "text": "`create a form with an email and after it's submitted put the results in my excel table` That is WAY better NLP. And\u2026 it works in Storyscript.",
        "user": "UJKKBAMLL",
        "ts": "1590100915.076800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "paS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "create a form with an email and after it's submitted put the results in my excel table",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " That is WAY better NLP. And\u2026 it works in Storyscript."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "bb022611-097c-4c39-9fb6-d53725ef0215",
        "type": "message",
        "text": "I would argue the problem with something like what's presented in the post isn't that it's NL talking about drawing. It's that it's _only_ NL. To contradict your point about broadness of scope, to capture the domain of something like art you need much more than words and you'll need much more than turtle graphics.",
        "user": "UEBG0NPDK",
        "ts": "1590100978.077500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/wn5v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would argue the problem with something like what's presented in the post isn't that it's NL talking about drawing. It's that it's "
                            },
                            {
                                "type": "text",
                                "text": "only",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " NL. To contradict your point about broadness of scope, to capture the domain of something like art you need much more than words and you'll need much more than turtle graphics."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UFEQUBNNT",
                    "UHWC9PXBL",
                    "UMWF81HTP",
                    "U9C92716C"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "261a47bc-baa3-4177-b8b3-99063bd9d3cd",
        "type": "message",
        "text": "`upload zoom recordings to youtube and slack me the link`\u2026. Try doing this in OpenAI to Python. Sure you can\u2026 but you still have to deploy it, manage env, etc. etc. etc. The code is meaningless without being able to execute it effectively.",
        "user": "UJKKBAMLL",
        "ts": "1590100984.077700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YpFWl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "upload zoom recordings to youtube and slack me the link",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u2026. Try doing this in OpenAI to Python. Sure you can\u2026 but you still have to deploy it, manage env, etc. etc. etc. The code is meaningless without being able to execute it effectively."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "type": "message",
        "text": "",
        "files": [
            {
                "id": "F013NHM195M",
                "created": 1590101011,
                "timestamp": 1590101011,
                "name": "Screen Shot 2020-05-05 at 7.39.49 AM.png",
                "title": "Screen Shot 2020-05-05 at 7.39.49 AM.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UJKKBAMLL",
                "editable": false,
                "size": 71663,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F013NHM195M/screen_shot_2020-05-05_at_7.39.49_am.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F013NHM195M/download/screen_shot_2020-05-05_at_7.39.49_am.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F013NHM195M-60407edefb/screen_shot_2020-05-05_at_7.39.49_am_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F013NHM195M-60407edefb/screen_shot_2020-05-05_at_7.39.49_am_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F013NHM195M-60407edefb/screen_shot_2020-05-05_at_7.39.49_am_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 210,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F013NHM195M-60407edefb/screen_shot_2020-05-05_at_7.39.49_am_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 280,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F013NHM195M-60407edefb/screen_shot_2020-05-05_at_7.39.49_am_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F013NHM195M-60407edefb/screen_shot_2020-05-05_at_7.39.49_am_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 420,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F013NHM195M-60407edefb/screen_shot_2020-05-05_at_7.39.49_am_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 467,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F013NHM195M-60407edefb/screen_shot_2020-05-05_at_7.39.49_am_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 560,
                "original_w": 994,
                "original_h": 580,
                "thumb_tiny": "AwAcADDRwc9TRz6n8qdTcDP/ANagA59T+VAyT1NAwP8A9VLz7UAGD6mjHuaOfaloAKTBJzk/SlooAZg/3m/KjB/vN+VPooARR15J+tLRRQB//9k=",
                "permalink": "https://futureofcoding.slack.com/files/UJKKBAMLL/F013NHM195M/screen_shot_2020-05-05_at_7.39.49_am.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F013NHM195M-0601f60d76",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": true,
        "user": "UJKKBAMLL",
        "display_as_bot": false,
        "ts": "1590101014.078100",
        "client_msg_id": "00881498-3b4c-4505-bff4-7445ac98378f",
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "1d7a8f17-216e-4394-995e-ee1a8ce614a7",
        "type": "message",
        "text": "You see the difference here? The above is serverless, gitless, codeless, envless, deployless. It\u2019s voice powered, context free, click-to login and runs out of the box.",
        "user": "UJKKBAMLL",
        "ts": "1590101064.079200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1+E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You see the difference here? The above is serverless, gitless, codeless, envless, deployless. It\u2019s voice powered, context free, click-to login and runs out of the box."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "89bbb60d-e70d-4b9d-a7a3-c7bba4929d70",
        "type": "message",
        "text": "PS it\u2019s not a programming language. It\u2019s not compiled, not interpreted, not transpiled.",
        "user": "UJKKBAMLL",
        "ts": "1590101099.079900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FWH+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "PS it\u2019s not a programming language. It\u2019s not compiled, not interpreted, not transpiled."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "fa95c84a-5adc-46cd-aa27-278bfdf44f8e",
        "type": "message",
        "text": "PSS I did not type that code, it was entirely generated.",
        "user": "UJKKBAMLL",
        "ts": "1590101164.081200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vrT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "PSS I did not type that code, it was entirely generated."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "8c4ff1f1-e590-470d-80c1-72aaa8483ea8",
        "type": "message",
        "text": "But you _will_ need words, even if you have the most perfect set of tools in existence - afterall how would you communicate which tool you used to a friend? Or the motivation behind the art? How would others talk about how it made them feel? Or make a shopping list for the paint?",
        "user": "UEBG0NPDK",
        "ts": "1590101182.081400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e+pE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But you "
                            },
                            {
                                "type": "text",
                                "text": "will",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " need words, even if you have the most perfect set of tools in existence - afterall how would you communicate which tool you used to a friend? Or the motivation behind the art? How would others talk about how it made them feel? Or make a shopping list for the paint?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "B3EC70DE-704D-4A29-945B-834CE5EC8B79",
        "type": "message",
        "text": "It\u2019s hard to tell from a screenshot, but the interaction seems structurally identical?",
        "user": "UFEQUBNNT",
        "ts": "1590101183.081600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JKN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It\u2019s hard to tell from a screenshot, but the interaction seems structurally identical?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "dbbdd986-5e77-4691-a291-f20a4254768f",
        "type": "message",
        "text": "Without the language, we wouldn't have Bob Ross :slightly_smiling_face:",
        "user": "UEBG0NPDK",
        "ts": "1590101240.081800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MI0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Without the language, we wouldn't have Bob Ross "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "9aab2289-ead2-48ef-a0be-fbbf58d875c1",
        "type": "message",
        "text": "If the differences are not obvious ( `serverless, gitless, codeless, envless, deployless` ) than I\u2019m not getting my point across.",
        "user": "UJKKBAMLL",
        "ts": "1590101272.082000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d2q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If the differences are not obvious ( "
                            },
                            {
                                "type": "text",
                                "text": "serverless, gitless, codeless, envless, deployless",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ) than I\u2019m not getting my point across."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "0d08b863-b942-48fe-9241-cf97dd3a06ba",
        "type": "message",
        "text": "And it\u2019s not structurally identical. Python does not have built-in WYSYIGS and you still have all the traditional concerns as listed above.",
        "user": "UJKKBAMLL",
        "ts": "1590101324.083300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wxN/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And it\u2019s not structurally identical. Python does not have built-in WYSYIGS and you still have all the traditional concerns as listed above."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "e81c9854-47b3-4ecb-92f8-3324b34bee18",
        "type": "message",
        "text": "&gt; Why talk to a computer like this? It is very silly.",
        "user": "UEBG0NPDK",
        "ts": "1590101330.083600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QdQhD",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Why talk to a computer like this? It is very silly."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "fc5d591f-f629-444a-98ab-249c77f920e1",
        "type": "message",
        "text": "Ok, \u201cstate\u201d was the wrong word to choose. Maybe \u201cthe source of truth\u201d is better. Same issue: plain-text compilation requires that the full truth is represented in the plain text which has significant limitations.",
        "user": "UJKKBAMLL",
        "ts": "1590101411.084900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=JCI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok, \u201cstate\u201d was the wrong word to choose. Maybe \u201cthe source of truth\u201d is better. Same issue: plain-text compilation requires that the full truth is represented in the plain text which has significant limitations."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "3c5afebc-b820-4c7f-b87d-1068096eed70",
        "type": "message",
        "text": "It's exactly how we talk to anyone that requires step by step instructions. A chef teaching a new line cook, an art teacher walking you through how to paint your first watercolor sky...",
        "user": "UEBG0NPDK",
        "ts": "1590101419.085300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZbN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's exactly how we talk to anyone that requires step by step instructions. A chef teaching a new line cook, an art teacher walking you through how to paint your first watercolor sky..."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "237b13fb-4024-40e8-a074-bc9191424cb2",
        "type": "message",
        "text": "\u201cLanguage itself is exceedingly general\u201d is this not the problem of Eve? Why be general when you can be more pragmatic to scope to a domain. For example (not to plug it again, but it\u2019s good example) Storyscript is not for gaming or drawing. It\u2019s for business-logic QA and workflows. That scope makes our \u201clanguage\u201d (which it\u2019s not really) can be designed differently.",
        "user": "UJKKBAMLL",
        "ts": "1590101527.087300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rqsxx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\u201cLanguage itself is exceedingly general\u201d is this not the problem of Eve? Why be general when you can be more pragmatic to scope to a domain. For example (not to plug it again, but it\u2019s good example) Storyscript is not for gaming or drawing. It\u2019s for business-logic QA and workflows. That scope makes our \u201clanguage\u201d (which it\u2019s not really) can be designed differently."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "69316553-B136-4739-817D-B7D0213386BB",
        "type": "message",
        "text": "It seems like you also really like to be able to generate code from natural language, and since that\u2019s the only part of the demo I think is significant, we\u2019re good :+1::skin-tone-3:",
        "user": "UFEQUBNNT",
        "ts": "1590101550.087600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "br3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It seems like you also really like to be able to generate code from natural language, and since that\u2019s the only part of the demo I think is significant, we\u2019re good "
                            },
                            {
                                "type": "emoji",
                                "name": "+1",
                                "skin_tone": 3
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "50a92e48-5d1c-46fb-a82a-023813bcd900",
        "type": "message",
        "text": ":rolling_on_the_floor_laughing:   :heart:  you Tom! \u2014 We can agree on that for sure. But I implore you to think about the implications of using Python (or other languages) because it\u2019s not easy, it\u2019s seriously a pain in the ass and why only 0.3% of the world can do it.",
        "user": "UJKKBAMLL",
        "ts": "1590101612.087800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJKKBAMLL",
            "ts": "1590101625.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vI3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "rolling_on_the_floor_laughing"
                            },
                            {
                                "type": "text",
                                "text": "   "
                            },
                            {
                                "type": "emoji",
                                "name": "heart"
                            },
                            {
                                "type": "text",
                                "text": "  you Tom! \u2014 We can agree on that for sure. But I implore you to think about the implications of using Python (or other languages) because it\u2019s not easy, it\u2019s seriously a pain in the ass and why only 0.3% of the world can do it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "2b8661ab-d8cd-48b8-aad6-3e3a57b0b624",
        "type": "message",
        "text": "<@UEBG0NPDK> This conversation above sheds more light on our discussion. Thank you!",
        "user": "UJKKBAMLL",
        "ts": "1590101668.089000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GWXWq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " This conversation above sheds more light on our discussion. Thank you!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "DA3B17D2-975E-494F-9A79-A77D983EE00E",
        "type": "message",
        "text": "Absolutely! We\u2019re in such agreement there, and I\u2019m honestly thrilled at seeing you take this direction in Storyscript.",
        "user": "UFEQUBNNT",
        "ts": "1590101670.089200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OIxa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Absolutely! We\u2019re in such agreement there, and I\u2019m honestly thrilled at seeing you take this direction in Storyscript."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1",
        "reactions": [
            {
                "name": "man-bowing",
                "users": [
                    "UJKKBAMLL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "2ebfdc2c-47a0-4534-818c-c48f6eb5d4bf",
        "type": "message",
        "text": "Ignoring Storyscript for a moment, as a Python developer myself, I don\u2019t see the demo as being \u201cthat\u201d useful in how I write code. Most my code is unique business-logic requiring constraints and very intentional abstractions that I\u2019m not optimistic OpenAI will account for. I would however use this demo\u2019s talents on generating the most basic functionality in my application so that I don\u2019t need to search SO :wink:",
        "user": "UJKKBAMLL",
        "ts": "1590101808.089500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dW+6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ignoring Storyscript for a moment, as a Python developer myself, I don\u2019t see the demo as being \u201cthat\u201d useful in how I write code. Most my code is unique business-logic requiring constraints and very intentional abstractions that I\u2019m not optimistic OpenAI will account for. I would however use this demo\u2019s talents on generating the most basic functionality in my application so that I don\u2019t need to search SO "
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "dc2c51cc-4402-4fa4-880b-948829cadf88",
        "type": "message",
        "text": "It makes your language easier to design and easier to be business-wise successful, but it's not somehow fundamentally better. Generality isn't a problem to be solved, it's a thing to strive for. Language, math, art, kinesthetics, and so on are ridiculously general and have taken us from quite literally nothing to the civilization we have now. Narrower things fill in the details, but they don't expand the canvas. So no. I don't see generality as \"the problem of Eve.\" :slightly_smiling_face:",
        "user": "UEBG0NPDK",
        "ts": "1590101872.090400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f+Bt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It makes your language easier to design and easier to be business-wise successful, but it's not somehow fundamentally better. Generality isn't a problem to be solved, it's a thing to strive for. Language, math, art, kinesthetics, and so on are ridiculously general and have taken us from quite literally nothing to the civilization we have now. Narrower things fill in the details, but they don't expand the canvas. So no. I don't see generality as \"the problem of Eve.\" "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "C25010FF-8FEF-49E3-B909-7580C143939D",
        "type": "message",
        "text": "I think if it reaches GPT-level understanding of language (a high bar and a low bar), it should be able to converse using your abstractions. I think that was the point of the part of the demo where they said \u201cprint a receipt\u201d and it did so using the helper method that retrieved all the line items.",
        "user": "UFEQUBNNT",
        "ts": "1590102013.092600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "691t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think if it reaches GPT-level understanding of language (a high bar and a low bar), it should be able to converse using your abstractions. I think that was the point of the part of the demo where they said \u201cprint a receipt\u201d and it did so using the helper method that retrieved all the line items."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "44a72919-6040-42d9-818a-12f9a82059fc",
        "type": "message",
        "text": "It really just depends on your goals and what tools/experience/insights you have at your disposal.",
        "user": "UEBG0NPDK",
        "ts": "1590102047.092800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6zr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It really just depends on your goals and what tools/experience/insights you have at your disposal."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "022dc426-122a-4532-851e-18f678748839",
        "type": "message",
        "text": "I admit that my perspective of Eve is my own. Regardless, the demos shows how to make frontend and games which are domains that have better tools to achieve these problems, not to mention they are quite different (especially the users). I do think it was the lack of focus and to broad of scope.",
        "user": "UJKKBAMLL",
        "ts": "1590102068.093000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8xML",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I admit that my perspective of Eve is my own. Regardless, the demos shows how to make frontend and games which are domains that have better tools to achieve these problems, not to mention they are quite different (especially the users). I do think it was the lack of focus and to broad of scope."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "e1f53146-a4ba-42e5-bf0d-ac4c8dfa89e6",
        "type": "message",
        "text": "It's sad that we see Python and Excel withering away in their generality :stuck_out_tongue:",
        "user": "UEBG0NPDK",
        "ts": "1590102107.093200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pUTn=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's sad that we see Python and Excel withering away in their generality "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK",
        "reactions": [
            {
                "name": "grin",
                "users": [
                    "U6FKVSVCK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "a0ac0f0f-944c-4ab5-9ed6-95ed9234d9eb",
        "type": "message",
        "text": "Or the internet for that matter.",
        "user": "UEBG0NPDK",
        "ts": "1590102132.093400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mo8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Or the internet for that matter."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "324b0579-f6dc-4afb-bbfb-47a902064a70",
        "type": "message",
        "text": "I mostly agree too.",
        "user": "UJKKBAMLL",
        "ts": "1590102142.093600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vCj2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I mostly agree too."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "61fb8319-b201-4bd5-9b0b-4e61c3b11b4a",
        "type": "message",
        "text": "&gt;  Language, math, art, kinesthetics, and so on are ridiculously general\n\u201cProgramming\u201d is an art and it has many mediums and abstraction layers. Just like in art and language and math, there are differnt requirements at different levels of need. Languages are not abstracted enough\u2026 but we do have hope. I can \u201ccode\u201d without code already. \u201cAlexa, what is 1+1\u201d It\u2019s basic\u2026 yes\u2026 but it\u2019s betting smarter. With time, it will do things like `weekly, look at the forecast and adjust the number of drivers required to deliver food by comparing average orders and weather`",
        "user": "UJKKBAMLL",
        "ts": "1590102360.093900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F3H",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " Language, math, art, kinesthetics, and so on are ridiculously general"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\u201cProgramming\u201d is an art and it has many mediums and abstraction layers. Just like in art and language and math, there are differnt requirements at different levels of need. Languages are not abstracted enough\u2026 but we do have hope. I can \u201ccode\u201d without code already. \u201cAlexa, what is 1+1\u201d It\u2019s basic\u2026 yes\u2026 but it\u2019s betting smarter. With time, it will do things like "
                            },
                            {
                                "type": "text",
                                "text": "weekly, look at the forecast and adjust the number of drivers required to deliver food by comparing average orders and weather",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "54fe548f-05a0-4889-b0f0-2dbb1032811e",
        "type": "message",
        "text": "^^ That problem today *requires* programming. But I promise you that it will not in the near future.",
        "user": "UJKKBAMLL",
        "ts": "1590102384.094100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A0H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "^^ That problem today "
                            },
                            {
                                "type": "text",
                                "text": "requires",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " programming. But I promise you that it will not in the near future."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "4a03c0fb-48c4-4301-95c4-5ba639eebca0",
        "type": "message",
        "text": "Futhermore, we won\u2019t be writing this by saying `Start. New cron weekly. set variable weather to accuweather forcast for date\u2026..`",
        "user": "UJKKBAMLL",
        "ts": "1590102445.094300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7koEI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Futhermore, we won\u2019t be writing this by saying "
                            },
                            {
                                "type": "text",
                                "text": "Start. New cron weekly. set variable weather to accuweather forcast for date\u2026..",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "a751f369-1f76-4d10-9a77-bf46840a2eb5",
        "type": "message",
        "text": "`print(\u201cData {}\u201c)` is NOT \u201cprint a receipt\u201d\u2026 print a receipt is format data and send data to the receipt printer to be printed on paper :wink: :rolling_on_the_floor_laughing:  Great an AI can call a \u201cprint\u201d function but it\u2019s light-years away from figuring out how to connect to a EPOS TM88\u2026. (which I did professionally for years, it\u2019s a fucking nightmare to manage that complexity)",
        "user": "UJKKBAMLL",
        "ts": "1590102597.095500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1AK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "`print(\u201cData {}\u201c)` is NOT \u201cprint a receipt\u201d\u2026 print a receipt is format data and send data to the receipt printer to be printed on paper "
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "rolling_on_the_floor_laughing"
                            },
                            {
                                "type": "text",
                                "text": "  Great an AI can call a \u201cprint\u201d function but it\u2019s light-years away from figuring out how to connect to a EPOS TM88\u2026. (which I did professionally for years, it\u2019s a fucking nightmare to manage that complexity)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "38a74c65-59b9-4e62-b013-b1b2c431a0f5",
        "type": "message",
        "text": "The AI would help me write 1 line of code while I, manually, have to figure out how to write thousands to abstract the stupid escape character sequence to cut the paper. Yes, it left scars HAHA",
        "user": "UJKKBAMLL",
        "ts": "1590102673.096800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iWyM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The AI would help me write 1 line of code while I, manually, have to figure out how to write thousands to abstract the stupid escape character sequence to cut the paper. Yes, it left scars HAHA"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "5f9acb1f-90b4-4e31-80eb-5e17fa02b939",
        "type": "message",
        "text": "I think Python, Rust, Go, Typescript, CSS, etc. etc. are good languages, they solve problems in their domain well. We all know that to be a fact. The tooling will get better and new languages will replace old ones, yet remains that only very few NEED to and CAN understand this domain level. I\u2019m not sure AI and NLP have much to help with on this level of abstraction\u2026. but the level where the rest of the world needs technology (like Alexa and Siri level) where voice is king\u2026 that level of abstraction should not be for Python or any other language of today.",
        "user": "UJKKBAMLL",
        "ts": "1590102864.098600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wamI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think Python, Rust, Go, Typescript, CSS, etc. etc. are good languages, they solve problems in their domain well. We all know that to be a fact. The tooling will get better and new languages will replace old ones, yet remains that only very few NEED to and CAN understand this domain level. I\u2019m not sure AI and NLP have much to help with on this level of abstraction\u2026. but the level where the rest of the world needs technology (like Alexa and Siri level) where voice is king\u2026 that level of abstraction should not be for Python or any other language of today."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "1f0c2374-e176-45ee-9e29-7f8410408bb8",
        "type": "message",
        "text": "It might be worth actually reading the article rather than skimming it. It's presenting a different perspective on how english might be a better python than python is.",
        "user": "UEBG0NPDK",
        "ts": "1590103133.101700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J7sQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It might be worth actually reading the article rather than skimming it. It's presenting a different perspective on how english might be a better python than python is."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U9C92716C"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "043ca0f5-c4b5-4fd8-8363-b82874f45848",
        "type": "message",
        "text": "You may disagree with that, but you're not doing so in a constructive way that points to actual fallacies in the argument.",
        "user": "UEBG0NPDK",
        "ts": "1590103172.102000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ljwA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You may disagree with that, but you're not doing so in a constructive way that points to actual fallacies in the argument."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "35b8ddf4-9a8f-426e-9049-b4ebb8903ebc",
        "type": "message",
        "text": "It seems like the conversation in thread might be talking about several different (and mostly orthogonal!) things at once. How general a language's capabilities are, what it's input methods are, and even where on the spectrum of implicitness (draw an eye) to explicitness (start an arc at X100Y50, ...) it falls are all completely separable decisions.",
        "user": "UDZRT1962",
        "ts": "1590103610.105600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UDZRT1962",
            "ts": "1590103981.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cJO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It seems like the conversation in thread might be talking about several different (and mostly orthogonal!) things at once. How general a language's capabilities are, what it's input methods are, and even where on the spectrum of implicitness (draw an eye) to explicitness (start an arc at X100Y50, ...) it falls are all completely separable decisions."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "1c93b4a5-79ed-45fe-9d26-4109015865b2",
        "type": "message",
        "text": "It's useful to explore each of those axes separately -- I often find the most interesting ideas in the easy-to-overlook nooks formed by combining an odd set of positions.",
        "user": "UDZRT1962",
        "ts": "1590103672.105900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zRXIB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's useful to explore each of those axes separately -- I often find the most interesting ideas in the easy-to-overlook nooks formed by combining an odd set of positions."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "70e0bb69-1d28-4db6-9296-5504cf6a0364",
        "type": "message",
        "text": "Relatedly, most languages actually occupy a range rather than a point on those axes, which often provides a much better experience than one endpoint or the other ever could. As an easy example, I might struggle to perfectly recreate the mona lisa working only at the \"draw an eye\" level (and it'd take me ages to try to recreate it using only assembly...), but I'd likely have a much easier time of it if I could start there and then successively increase the explicitness of my instructions until I got the desired look.",
        "user": "UDZRT1962",
        "ts": "1590103867.106700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UDZRT1962",
            "ts": "1590103906.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FRDy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Relatedly, most languages actually occupy a range rather than a point on those axes, which often provides a much better experience than one endpoint or the other ever could. As an easy example, I might struggle to perfectly recreate the mona lisa working only at the \"draw an eye\" level (and it'd take me ages to try to recreate it using only assembly...), but I'd likely have a much easier time of it if I could start there and then successively increase the explicitness of my instructions until I got the desired look."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "4e9fef96-afbd-4bd1-afae-0095d281c544",
        "type": "message",
        "text": ":point_up: that is what the new thing we're working on is trying to cover: how do you create an environment that lets you seamlessly flow between high level implicit statements to low-level explicit refinement?",
        "user": "UEBG0NPDK",
        "ts": "1590103981.107900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1590103989.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7jz/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "point_up"
                            },
                            {
                                "type": "text",
                                "text": " that is what the new thing we're working on is trying to cover: how do you create an environment that lets you seamlessly flow between high level implicit statements to low-level explicit refinement?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK",
        "reactions": [
            {
                "name": "open_mouth",
                "users": [
                    "U9C92716C"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b3fdce21-7bc6-4383-9efe-13efef21af98",
        "type": "message",
        "text": "One subtlety here that will probably limit the practical impact of this in the near future -- the process of verifying whether the generated code is correct or not is essentially the same as debugging somebody else's code without them around. For functions on the simpler side, that may be a simple enough task, but as complexity increases that difficulty scales superlinearly.",
        "user": "UDZRT1962",
        "ts": "1590105076.120000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UDZRT1962",
            "ts": "1590105101.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SuGaG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One subtlety here that will probably limit the practical impact of this in the near future -- the process of verifying whether the generated code is correct or not is essentially the same as debugging somebody else's code without them around. For functions on the simpler side, that may be a simple enough task, but as complexity increases that difficulty scales superlinearly."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UJKKBAMLL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "3EB54E48-967B-4F1C-B028-1697304E4147",
        "type": "message",
        "text": "Steve, I\u2019m really curious where the rubber meets the road in your ideal system.\n\nIf someone said to you, \u201cWeekly, look at the forecast and adjust the number of drivers required to deliver food by comparing average orders and weather,\u201d wouldn\u2019t you start by looking at your tools an *compiling* your available actions into a *procedure* to achieve your goal? You might defer some of that work, and you might keep the original request in mind to evaluate your effectiveness and correct course over time, but so long as the request is made using language and not a timed series of motor commands injected as electrical impulses directly into your brain stem, it seems compilation is an essential part of the process of doing someone else\u2019s work\u2026 yet you seem to hate compilation in every form people have discussed today, be it template matching of pseudo-English all the way down to machine code, or ML-based machine translation to Python\u2014but somehow compilation of short English phrases to Storyscript gets it right?\n\nLike\u2026 what if PEP bottomed out at Storyscript, or the OpenAI system emitted Storyscript, allowing someone to write three Storyscript statements using only one command? Neither of those systems were written to preclude this, but you act like their existence is unjustified because they don't.",
        "user": "UFEQUBNNT",
        "ts": "1590106355.124300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFEQUBNNT",
            "ts": "1590106374.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U+j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Steve, I\u2019m really curious where the rubber meets the road in your ideal system.\n\nIf someone said to you, \u201cWeekly, look at the forecast and adjust the number of drivers required to deliver food by comparing average orders and weather,\u201d wouldn\u2019t you start by looking at your tools an "
                            },
                            {
                                "type": "text",
                                "text": "compiling ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "your available actions into a "
                            },
                            {
                                "type": "text",
                                "text": "procedure ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "to achieve your goal? You might defer some of that work, and you might keep the original request in mind to evaluate your effectiveness and correct course over time, but so long as the request is made using language and not a timed series of motor commands injected as electrical impulses directly into your brain stem, it seems compilation is an essential part of the process of doing someone else\u2019s work\u2026 yet you seem to hate compilation in every form people have discussed today, be it template matching of pseudo-English all the way down to machine code, or ML-based machine translation to Python\u2014but somehow compilation of short English phrases to Storyscript gets it right?\n\nLike\u2026 what if PEP bottomed out at Storyscript, or the OpenAI system emitted Storyscript, allowing someone to write three Storyscript statements using only one command? Neither of those systems were written to preclude this, but you act like their existence is unjustified because they don't."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "F918CB9F-B95C-474F-BB8E-178C81098E39",
        "type": "message",
        "text": "With previous Eves you\u2019ve published reading lists of related tech. Do you have a reading list for this one yet? Holes and project templates are the extent of what I\u2019ve seen for being able to refine software into existence.",
        "user": "UFEQUBNNT",
        "ts": "1590107023.128800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vrYh0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "With previous Eves you\u2019ve published reading lists of related tech. Do you have a reading list for this one yet? Holes and project templates are the extent of what I\u2019ve seen for being able to refine software into existence."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "9ff6a412-bcd8-4630-9adc-38ca110d026f",
        "type": "message",
        "text": "In the programming world, Self and the Alternate Reality Toolkit are the closest things I know of. Entity Component System engines are related as well. As Ivan mentioned in another thread, 3d software definitely has this feel and there are lots of games to really dive into: Minecraft, Factorio, Dreams, Little Big Planet, etc.",
        "user": "UEBG0NPDK",
        "ts": "1590108150.129000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i=r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the programming world, Self and the Alternate Reality Toolkit are the closest things I know of. Entity Component System engines are related as well. As Ivan mentioned in another thread, 3d software definitely has this feel and there are lots of games to really dive into: Minecraft, Factorio, Dreams, Little Big Planet, etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "a1a3b870-879b-46b8-ba85-674b7b8f28cf",
        "type": "message",
        "text": "FWIW, the new project doesn't have the same goal as Eve did. We're less concerned with explicitly trying to get end users into programming, though the approach may help do that. We just want to make an environment that we actually want to live in. :slightly_smiling_face:",
        "user": "UEBG0NPDK",
        "ts": "1590108475.129200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ydXB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FWIW, the new project doesn't have the same goal as Eve did. We're less concerned with explicitly trying to get end users into programming, though the approach may help do that. We just want to make an environment that we actually want to live in. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT",
                    "UML4ZEKDK",
                    "U9C92716C"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "e1bb2067-345b-40f0-83fe-29c0e4f30575",
        "type": "message",
        "text": "We'll see where that ends up landing on the accessibility spectrum.",
        "user": "UEBG0NPDK",
        "ts": "1590108540.129400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8jUQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We'll see where that ends up landing on the accessibility spectrum."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "591856f3-18c6-4a66-8229-80b23acee7ae",
        "type": "message",
        "text": "I have to say I'm impressed with how well this natural language system appears to work.\n\nI share some of the earlier concerns in this thread that it might be very difficult to tell what's going on when things _aren't_ working as intended\u2014 not just in terms of how the syntax is being parsed, but what the compiler and resultant program are actually _doing_.\n\nThe most difficult part of programming\u2014\u00a0mental simulation of invisible processes\u2014\u00a0is not really fixed by making the program into plain English. I'd hypothesize that an unambiguous notation is actually an aid to mental simulation, not a hindrance (it removes some guessing/degrees of freedom about what the computer might be thinking).\n\nOf course the use of a symbolic notation itself requires more complex mental simulation (i.e. of a parser/lexer/compiler), and this \"bootstrapping problem\" adds yet another layer of difficulty that makes even getting started with programming so hard for many beginners. But I think it's a big fallacy to think that removing this initial barrier is what will open up programming. It's just the first hurdle; after that comes a lifetime of mentally emulating every program you work with.\n\nIt's my thesis that the future of programming will not come about until the need for mental simulation is largely removed. But this is a really interesting and unexpected peek into perhaps another, new niche of programming.",
        "user": "U6FKVSVCK",
        "ts": "1590112448.129700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U6FKVSVCK",
            "ts": "1590112508.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qZv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have to say I'm impressed with how well this natural language system appears to work.\n\nI share some of the earlier concerns in this thread that it might be very difficult to tell what's going on when things "
                            },
                            {
                                "type": "text",
                                "text": "aren't",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " working as intended\u2014 not just in terms of how the syntax is being parsed, but what the compiler and resultant program are actually "
                            },
                            {
                                "type": "text",
                                "text": "doing",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nThe most difficult part of programming\u2014\u00a0mental simulation of invisible processes\u2014\u00a0is not really fixed by making the program into plain English. I'd hypothesize that an unambiguous notation is actually an aid to mental simulation, not a hindrance (it removes some guessing/degrees of freedom about what the computer might be thinking).\n\nOf course the use of a symbolic notation itself requires more complex mental simulation (i.e. of a parser/lexer/compiler), and this \"bootstrapping problem\" adds yet another layer of difficulty that makes even getting started with programming so hard for many beginners. But I think it's a big fallacy to think that removing this initial barrier is what will open up programming. It's just the first hurdle; after that comes a lifetime of mentally emulating every program you work with.\n\nIt's my thesis that the future of programming will not come about until the need for mental simulation is largely removed. But this is a really interesting and unexpected peek into perhaps another, new niche of programming."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "60ec41b7-e8d2-449f-8174-fa42c80804ea",
        "type": "message",
        "text": "Lynxtool is also a company now. :slightly_smiling_face:",
        "user": "U6FKVSVCK",
        "ts": "1590113260.130000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2vg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lynxtool is also a company now. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081535.029500",
        "parent_user_id": "UA8HY8R7B"
    },
    {
        "client_msg_id": "D34379F3-717A-4124-8927-E934197305A0",
        "type": "message",
        "text": "Thanks, Chris!",
        "user": "UFEQUBNNT",
        "ts": "1590113352.130400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sVItu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks, Chris!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "CF8C1416-06D0-4B77-9EDE-D21C3F9A41FA",
        "type": "message",
        "text": "<@U6FKVSVCK> Are there ambiguities in the notation?",
        "user": "UFEQUBNNT",
        "ts": "1590113933.131000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XW3a",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U6FKVSVCK"
                            },
                            {
                                "type": "text",
                                "text": " Are there ambiguities in the notation?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "3d413030-c35d-46dd-9a70-ac96bb697413",
        "type": "message",
        "text": "<@UJKKBAMLL> <@UEBG0NPDK> One problem with \"Programming in plain English\" is the exceptions problem. This is just not solvable unless you can solve the exceptions problem. Ripple Down Rules explains the problem, and describes a good human solution. The issues relates to rules. Rules typically have exceptions. This was made clear by some guy trying to create an expert system in a hospital. Experts would come to him with new rules for the expert system. He would code them in. Then they would come with a new rule than was an exception to the old rule. And so he invented Ripple Down Rules. This is a problem for coding, because, you need to uncover the exceptions. When given a text description of a problem, a lot of what a programmer does is look for the exceptions to the rule, the edge cases. Then they make a judgement call of if to include code that handles the exception or not. If you look at a program, sometimes it is mostly exceptions. It required a human to extract all the exceptions and then code them.\nUntil a computer can work through a text description of a problem, and some how uncover the exceptions, I don't think we will see this kind of thing working.",
        "user": "UP6G25H35",
        "ts": "1590118560.131600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xn58l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJKKBAMLL"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " One problem with \"Programming in plain English\" is the exceptions problem. This is just not solvable unless you can solve the exceptions problem. Ripple Down Rules explains the problem, and describes a good human solution. The issues relates to rules. Rules typically have exceptions. This was made clear by some guy trying to create an expert system in a hospital. Experts would come to him with new rules for the expert system. He would code them in. Then they would come with a new rule than was an exception to the old rule. And so he invented Ripple Down Rules. This is a problem for coding, because, you need to uncover the exceptions. When given a text description of a problem, a lot of what a programmer does is look for the exceptions to the rule, the edge cases. Then they make a judgement call of if to include code that handles the exception or not. If you look at a program, sometimes it is mostly exceptions. It required a human to extract all the exceptions and then code them.\nUntil a computer can work through a text description of a problem, and some how uncover the exceptions, I don't think we will see this kind of thing working."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "2c9a0671-f1fc-4088-988a-8a6b8a30e1cb",
        "type": "message",
        "text": "<@UFEQUBNNT> There is ambiguity in English, so certainly!\n\nThe compiler will make some choice in the face of ambiguity (including possibly to error; I don't know what this system does), but the human will still be faced with the problem of predicting what disambiguating choice the computer will make.\n\nIt seems like the compiler is doing a sort of \"fuzzy match\" (?), so not being an AGI, it will certainly not guess correctly what the programmer meant in all cases. So when that happens, the human will be tasked with figuring out what the computer _thought_ they meant.",
        "user": "U6FKVSVCK",
        "ts": "1590118647.131800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U6FKVSVCK",
            "ts": "1590118671.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zyo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFEQUBNNT"
                            },
                            {
                                "type": "text",
                                "text": " There is ambiguity in English, so certainly!\n\nThe compiler will make some choice in the face of ambiguity (including possibly to error; I don't know what this system does), but the human will still be faced with the problem of predicting what disambiguating choice the computer will make.\n\nIt seems like the compiler is doing a sort of \"fuzzy match\" (?), so not being an AGI, it will certainly not guess correctly what the programmer meant in all cases. So when that happens, the human will be tasked with figuring out what the computer "
                            },
                            {
                                "type": "text",
                                "text": "thought",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " they meant."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "2e24988a-6cf8-4499-bb30-f882b7195ef8",
        "type": "message",
        "text": "<@U6FKVSVCK> I though we had good solutions to the ambiguity in English problem already. Systems like <https://donotpay.com/> can already handle ambiguity. I have not tested one, but I understand they do work successfully.",
        "user": "UP6G25H35",
        "ts": "1590119940.132300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "DoNotPay - The World's First Robot Lawyer",
                "title_link": "https://donotpay.com/",
                "fallback": "DoNotPay - The World's First Robot Lawyer",
                "image_url": "https://donotpay.com/static/iphone.png",
                "from_url": "https://donotpay.com/",
                "image_width": 299,
                "image_height": 250,
                "image_bytes": 404136,
                "service_icon": "https://donotpay.com/static/apple-touch-icon.png",
                "service_name": "donotpay.com",
                "id": 1,
                "original_url": "https://donotpay.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2ZTau",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U6FKVSVCK"
                            },
                            {
                                "type": "text",
                                "text": " I though we had good solutions to the ambiguity in English problem already. Systems like "
                            },
                            {
                                "type": "link",
                                "url": "https://donotpay.com/"
                            },
                            {
                                "type": "text",
                                "text": " can already handle ambiguity. I have not tested one, but I understand they do work successfully."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "89d105ab-51da-45ce-9661-2e0f83ae3d40",
        "type": "message",
        "text": "<@UP6G25H35> English (and pretty much all spoken language) is known to not be unambiguously parseable. Ex: \"The boy lured the duck with a loaf of bread.\" Who had the bread, the boy or the duck? We humans know from world knowledge about ducks and loaves and animal behavior that one interpretation is more likely to be true; but either interpretation is a valid grammatical parsing. You basically couldn't solve this kind of problem in general without having a fully world-educated AGI. Even then, we can construct grammatical sentences that intelligent humans can't disambiguate with more information.",
        "user": "U6FKVSVCK",
        "ts": "1590120579.132800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4/wN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UP6G25H35"
                            },
                            {
                                "type": "text",
                                "text": " English (and pretty much all spoken language) is known to not be unambiguously parseable. Ex: \"The boy lured the duck with a loaf of bread.\" Who had the bread, the boy or the duck? We humans know from world knowledge about ducks and loaves and animal behavior that one interpretation is more likely to be true; but either interpretation is a valid grammatical parsing. You basically couldn't solve this kind of problem in general without having a fully world-educated AGI. Even then, we can construct grammatical sentences that intelligent humans can't disambiguate with more information."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "a1d4bde0-68a2-4afb-958f-2394b42a2c11",
        "type": "message",
        "text": "\"Update the variable with the value 3\". What happens there? Am I writing the value \"3\" to something, or am I searching for something which has the value \"3\"? We could imagine circumstances where it'd be obvious to a human programmer, but I wouldn't expect a compiler to do better than chance.",
        "user": "U6FKVSVCK",
        "ts": "1590120688.133000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U6FKVSVCK",
            "ts": "1590121057.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OKk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Update the variable with the value 3\". What happens there? Am I writing the value \"3\" to something, or am I searching for something which has the value \"3\"? We could imagine circumstances where it'd be obvious to a human programmer, but I wouldn't expect a compiler to do better than chance."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "fcee56ec-d3a5-4915-8bda-67824874cc84",
        "type": "message",
        "text": "YC startup school is free - and you get paid to do YCombinator, also if you complete you get $100,000 last I checked. There is also <http://www.paulgraham.com/articles.html> - you can find top 10 lists for these essays. Many good videos here <https://huzzaz.com/createdby/startuptheory> the ones with paul graham in tend to stand out. While I like these videos, I think the essays are better.\n\nThere are other training course, but they are dwarfed by YC.",
        "user": "UP6G25H35",
        "ts": "1590120748.133200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Huzzaz",
                "title": "Startup Theory is on Huzzaz!",
                "title_link": "https://huzzaz.com/createdby/startuptheory",
                "text": "Video collections created by Startup Theory",
                "fallback": "Huzzaz: Startup Theory is on Huzzaz!",
                "from_url": "https://huzzaz.com/createdby/startuptheory",
                "thumb_url": "https://huzzaz.com/coverphotos/startuptheory.jpg",
                "thumb_width": 200,
                "thumb_height": 200,
                "service_icon": "https://huzzaz.com/favicon.ico",
                "id": 1,
                "original_url": "https://huzzaz.com/createdby/startuptheory"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zU4+T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "YC startup school is free - and you get paid to do YCombinator, also if you complete you get $100,000 last I checked. There is also "
                            },
                            {
                                "type": "link",
                                "url": "http://www.paulgraham.com/articles.html"
                            },
                            {
                                "type": "text",
                                "text": " - you can find top 10 lists for these essays. Many good videos here "
                            },
                            {
                                "type": "link",
                                "url": "https://huzzaz.com/createdby/startuptheory"
                            },
                            {
                                "type": "text",
                                "text": " the ones with paul graham in tend to stand out. While I like these videos, I think the essays are better.\n\nThere are other training course, but they are dwarfed by YC."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081535.029500",
        "parent_user_id": "UA8HY8R7B"
    },
    {
        "client_msg_id": "95a83adb-7131-4dc4-b8e8-664edf9fed9b",
        "type": "message",
        "text": "In PEP, you'd write one of those parses as `Put 3 into the variable` and the other as something like (guessing) `Find a variable with the value 3`. I don't think its goal is to let you write whatever you want, just to ensure you don't ever have to write `var = 3` or `variables.select { |v| v == 3 }` .\n\n`a.foo()` is ambiguous in JavaScript, and we've put a lot of engineering effort into being able to tell you which `foo` it will be. PEP seems simple enough that you could probably do it easily, maybe statically.",
        "user": "UFEQUBNNT",
        "ts": "1590121757.133900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5az",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In PEP, you'd write one of those parses as "
                            },
                            {
                                "type": "text",
                                "text": "Put 3 into the variable",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and the other as something like (guessing) "
                            },
                            {
                                "type": "text",
                                "text": "Find a variable with the value 3",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". I don't think its goal is to let you write whatever you want, just to ensure you don't ever have to write "
                            },
                            {
                                "type": "text",
                                "text": "var = 3",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "variables.select { |v| v == 3 }",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " .\n\n"
                            },
                            {
                                "type": "text",
                                "text": "a.foo()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is ambiguous in JavaScript, and we've put a lot of engineering effort into being able to tell you which "
                            },
                            {
                                "type": "text",
                                "text": "foo",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " it will be. PEP seems simple enough that you could probably do it easily, maybe statically."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "da922fd6-406c-47cf-81da-692629e2ec3b",
        "type": "message",
        "text": "I made a language with no regularity, where most AST nodes presented as English-looking sentences/phrases with slots for arguments. I made it a blocks language because my parsing skills are ~0, and solved the \"I don't know what to type\" problem with autocomplete. Docstrings let you disambiguate the results if some were too similar to tell. If you haven't tried such a language, give it a shot, because I think the most obvious potential pitfalls are red herrings.",
        "user": "UFEQUBNNT",
        "ts": "1590122338.134100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UXa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I made a language with no regularity, where most AST nodes presented as English-looking sentences/phrases with slots for arguments. I made it a blocks language because my parsing skills are ~0, and solved the \"I don't know what to type\" problem with autocomplete. Docstrings let you disambiguate the results if some were too similar to tell. If you haven't tried such a language, give it a shot, because I think the most obvious potential pitfalls are red herrings."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "39bc40a4-7e41-4b2c-8dc6-b90d0b61d407",
        "type": "message",
        "text": "What would happen if the programmer wrote the sentence that I did?",
        "user": "U6FKVSVCK",
        "ts": "1590122478.134400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RtM+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What would happen if the programmer wrote the sentence that I did?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "0B94F23C-63AB-490F-880C-133AC5B9F6E3",
        "type": "message",
        "text": "In PEP, I dunno. I don\u2019t have Windows. :( In mine, you\u2019d have an ordered list of likely parses to choose from.",
        "user": "UFEQUBNNT",
        "ts": "1590122556.135800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CfU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In PEP, I dunno. I don\u2019t have Windows. :( In mine, you\u2019d have an ordered list of likely parses to choose from."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "U6FKVSVCK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d95807e1-5cb5-4e2c-9e7a-23a33d5901f5",
        "type": "message",
        "text": "Awesome thanks for the responses and the pointers. I will DM you individually.",
        "user": "UA8HY8R7B",
        "ts": "1590125163.136200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KQGD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Awesome thanks for the responses and the pointers. I will DM you individually."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081535.029500",
        "parent_user_id": "UA8HY8R7B"
    },
    {
        "client_msg_id": "87e2b87b-3868-4aec-b8c8-199e3f6d6033",
        "type": "message",
        "text": "So they\u2019re just throwing ML at the problem, much surprised, very wow.\n\nI agree with steve here - an ML trained on a bunch of snippets from github/SO is 99% sure not to have or understand what I\u2019m doing when I\u2019m juggling the domain abstractions. Yeah it could help with writing down the boilerplate, but wtf do we even write boilerplate then? Just make a template instead of making an \u201cAI\u201d.\n\nI mean, it\u2019s a good idea, but so far away from reality that doing this is just picking the low hanging fruit and saying \u201coooh future\u201d.",
        "user": "UNBPP291C",
        "ts": "1590129686.137000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LPvsR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So they\u2019re just throwing ML at the problem, much surprised, very wow.\n\nI agree with steve here - an ML trained on a bunch of snippets from github/SO is 99% sure not to have or understand what I\u2019m doing when I\u2019m juggling the domain abstractions. Yeah it could help with writing down the boilerplate, but wtf do we even write boilerplate then? Just make a template instead of making an \u201cAI\u201d.\n\nI mean, it\u2019s a good idea, but so far away from reality that doing this is just picking the low hanging fruit and saying \u201coooh future\u201d."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJKKBAMLL",
                    "U013HU44GLS"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "cddc6185-5bb6-458c-bfa0-ce42463ff779",
        "type": "message",
        "text": "Hello All, today we announced our first open source library \"Tree-hugger: Source Code Mining for Human\".\n\nWe published an article about it. Please have a read - <https://medium.com/codist-ai/introducing-tree-hugger-source-code-mining-for-human-b5fcd31bef55>\n\nAlso, here is the repo - <https://github.com/autosoft-dev/tree-hugger>\n\nDo not forget to star :star: it if you feel it may help you :wink:",
        "user": "UPVBV34EL",
        "ts": "1590137321.137300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UPVBV34EL",
            "ts": "1590153627.000000"
        },
        "attachments": [
            {
                "fallback": "autosoft-dev/tree-hugger",
                "text": "A light-weight, extendable, high level, universal code parser built on top of tree-sitter",
                "title": "autosoft-dev/tree-hugger",
                "footer": "<https://github.com/autosoft-dev/tree-hugger|autosoft-dev/tree-hugger>",
                "id": 2,
                "footer_icon": "https://github.githubassets.com/favicon.ico",
                "ts": 1583063186,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Stars",
                        "value": "2",
                        "short": true
                    },
                    {
                        "title": "Language",
                        "value": "Python",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https://github.com/autosoft-dev/tree-hugger",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1qk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hello All, today we announced our first open source library \"Tree-hugger: Source Code Mining for Human\".\n\nWe published an article about it. Please have a read - "
                            },
                            {
                                "type": "link",
                                "url": "https://medium.com/codist-ai/introducing-tree-hugger-source-code-mining-for-human-b5fcd31bef55"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAlso, here is the repo - "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/autosoft-dev/tree-hugger"
                            },
                            {
                                "type": "text",
                                "text": "\n\nDo not forget to star "
                            },
                            {
                                "type": "emoji",
                                "name": "star"
                            },
                            {
                                "type": "text",
                                "text": " it if you feel it may help you "
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UPU0YJ1CM"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "fa153980-b8a0-4bc6-a5e5-752f7d308ea7",
        "type": "message",
        "text": "Maybe a bit late to the party but there is also Finder replacement app for mac <https://www.raskinformac.com/>",
        "user": "UPRSF90CW",
        "ts": "1590145462.137800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UKT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe a bit late to the party but there is also Finder replacement app for mac "
                            },
                            {
                                "type": "link",
                                "url": "https://www.raskinformac.com/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589469455.386200",
        "parent_user_id": "UAZT04VT4"
    },
    {
        "client_msg_id": "8afe0a2f-d81c-4c75-9467-f03eaad6fa90",
        "type": "message",
        "text": "Hi all\nI'm working on DataPipes a flow-based editor for macOS. That is kind of my tribute to QuartzComposer that introduced me to the idea of flow-based programming. I always wanted to use this approach to something else than graphics - and here it is.\nThe main idea is to use flow-based approach to dealing with data without touching code and as a result make it easier to use real(istic) data in the design process.\n\nHere is the short screencast of the current alpha version, any feedback highly appreciated!\n\nPS: If you think the app is worth your attention please join early access list at <https://DataPipes.app>\n\n<https://www.youtube.com/watch?v=0t7pv2FbDxk>",
        "user": "UPRSF90CW",
        "ts": "1590146193.138500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UPRSF90CW",
            "ts": "1590146269.000000"
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "DataPipes - native macOS app that is unleashing design with data potential",
                "title_link": "https://www.youtube.com/watch?v=0t7pv2FbDxk",
                "author_name": "DataPipes",
                "author_link": "https://www.youtube.com/channel/UCc5Q5T7seMvOB_qH9xHbxvQ",
                "thumb_url": "https://i.ytimg.com/vi/0t7pv2FbDxk/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: DataPipes - native macOS app that is unleashing design with data potential",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/0t7pv2FbDxk?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=0t7pv2FbDxk",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=0t7pv2FbDxk"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nnc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi all\nI'm working on DataPipes a flow-based editor for macOS. That is kind of my tribute to QuartzComposer that introduced me to the idea of flow-based programming. I always wanted to use this approach to something else than graphics - and here it is.\nThe main idea is to use flow-based approach to dealing with data without touching code and as a result make it easier to use real(istic) data in the design process.\n\nHere is the short screencast of the current alpha version, any feedback highly appreciated!\n\nPS: If you think the app is worth your attention please join early access list at "
                            },
                            {
                                "type": "link",
                                "url": "https://DataPipes.app"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=0t7pv2FbDxk"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590146193.138500",
        "reply_count": 11,
        "reply_users_count": 4,
        "latest_reply": "1590169965.150500",
        "reply_users": [
            "UUQ2EQW21",
            "UPRSF90CW",
            "UE0ETTCG7",
            "UU8H7M823"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UE0ETTCG7",
                    "UA14TGLTC",
                    "UU8H7M823",
                    "U0143PC0UTC",
                    "UML4ZEKDK"
                ],
                "count": 5
            }
        ]
    },
    {
        "client_msg_id": "0e7bb616-b308-4a33-ae19-a5e8dc150214",
        "type": "message",
        "text": "Nice!  The 'ElectronFree' comment at the end made me curious?  Are you striving to be pure JS?",
        "user": "UUQ2EQW21",
        "ts": "1590146851.138800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hyDlE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nice!  The 'ElectronFree' comment at the end made me curious?  Are you striving to be pure JS?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590146193.138500",
        "parent_user_id": "UPRSF90CW"
    },
    {
        "client_msg_id": "12fc0ead-8c66-43b2-b5ed-a3c7d1e227ed",
        "type": "message",
        "text": "And why is that a good thing :slightly_smiling_face: ?",
        "user": "UUQ2EQW21",
        "ts": "1590146867.139000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GqYT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And why is that a good thing "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " ?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590146193.138500",
        "parent_user_id": "UPRSF90CW"
    },
    {
        "client_msg_id": "35f1e768-85ab-4b40-b131-119e26809ebf",
        "type": "message",
        "text": ":slightly_smiling_face: well far, far from it. I'm tired of those almost working UIs built on top of web stack and advertised as apps. Hence I've decided to go full native.",
        "user": "UPRSF90CW",
        "ts": "1590147204.139200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SEzP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " well far, far from it. I'm tired of those almost working UIs built on top of web stack and advertised as apps. Hence I've decided to go full native."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590146193.138500",
        "parent_user_id": "UPRSF90CW",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UU8H7M823",
                    "UML4ZEKDK"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "5DCDFB4E-D85E-4668-9268-B8B77484C05F",
        "type": "message",
        "text": "<@UNBPP291C> <@UDZRT1962> :pray: Well said. I'm happy you both see that the challenges of generating and validating code that's is beyond simple functions.",
        "user": "UJKKBAMLL",
        "ts": "1590148724.142700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6gw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UNBPP291C"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UDZRT1962"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "pray"
                            },
                            {
                                "type": "text",
                                "text": " Well said. I'm happy you both see that the challenges of generating and validating code that's is beyond simple functions."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "14B44221-0111-49E5-851D-254046BAA9F3",
        "type": "message",
        "text": "<@UFEQUBNNT> I believe a 1:1 chat would be more productive to answer your question. It's not easy to articulate the subtleties and UX without going into the small details.",
        "user": "UJKKBAMLL",
        "ts": "1590148878.145600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JOxk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFEQUBNNT"
                            },
                            {
                                "type": "text",
                                "text": " I believe a 1:1 chat would be more productive to answer your question. It's not easy to articulate the subtleties and UX without going into the small details."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "7587fac0-7112-468f-a28c-2aecffd17fa5",
        "type": "message",
        "text": "I have no skin in the game regarding this argument, I was just curious.  By full native you mean?  i.e. what is the UI/language tech?",
        "user": "UUQ2EQW21",
        "ts": "1590152414.146000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b/s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have no skin in the game regarding this argument, I was just curious.  By full native you mean?  i.e. what is the UI/language tech?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590146193.138500",
        "parent_user_id": "UPRSF90CW"
    },
    {
        "client_msg_id": "ebba6760-b343-45e6-878e-5425f4979a18",
        "type": "message",
        "text": "Sure thing. Nothing fancy I guess, just swift + objective c using AppKit (aka Cocoa).",
        "user": "UPRSF90CW",
        "ts": "1590153749.146300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hfJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sure thing. Nothing fancy I guess, just swift + objective c using AppKit (aka Cocoa)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590146193.138500",
        "parent_user_id": "UPRSF90CW"
    },
    {
        "client_msg_id": "48ca736c-913e-40b0-8a4c-e1aa0ec1e36e",
        "type": "message",
        "text": "Looks good! I'd love to hear any more thoughts on use cases you think DataPipes is a particularly good fit for, and if there are any other exiting visual programming environments besides Quartz Composer that you think it would be interesting to compare it to?",
        "user": "UE0ETTCG7",
        "ts": "1590160827.146800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DaPM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Looks good! I'd love to hear any more thoughts on use cases you think DataPipes is a particularly good fit for, and if there are any other exiting visual programming environments besides Quartz Composer that you think it would be interesting to compare it to?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590146193.138500",
        "parent_user_id": "UPRSF90CW"
    },
    {
        "client_msg_id": "e9df1765-1cb3-4c26-a1e6-3eba36a62525",
        "type": "message",
        "text": "Also there was an interesting thread on Hacker News about visual programming yesterday in case you missed it <https://news.ycombinator.com/item?id=23252448>",
        "user": "UE0ETTCG7",
        "ts": "1590160852.147000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w3Nj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also there was an interesting thread on Hacker News about visual programming yesterday in case you missed it "
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=23252448"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590146193.138500",
        "parent_user_id": "UPRSF90CW"
    },
    {
        "type": "message",
        "text": "I dunno, maybe we're off in weeds that are only interesting to me, but could you point to where the boilerplate is in this example?\n\nThe bodies of these functions were written by the ML model and required making several design decisions without human intervention, about how values should be computed, what nearby methods could be reused, and what output should look like. I think in any other context, we'd call the parts that the human wrote \"boilerplate\" and the parts that the computer wrote \"programming\".",
        "files": [
            {
                "id": "F014HFTPF5X",
                "created": 1590165065,
                "timestamp": 1590165065,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UFEQUBNNT",
                "editable": false,
                "size": 1015862,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F014HFTPF5X/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F014HFTPF5X/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F014HFTPF5X-4efc8174f5/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F014HFTPF5X-4efc8174f5/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F014HFTPF5X-4efc8174f5/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 240,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F014HFTPF5X-4efc8174f5/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 319,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F014HFTPF5X-4efc8174f5/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F014HFTPF5X-4efc8174f5/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 479,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F014HFTPF5X-4efc8174f5/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 532,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F014HFTPF5X-4efc8174f5/image_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 639,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F014HFTPF5X-4efc8174f5/image_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 681,
                "original_w": 1683,
                "original_h": 1120,
                "thumb_tiny": "AwAfADDRIGRxR+FKR703JFAC/wDAaAB/do3EdRSg0AJwOxp1JuHv+VGQaAAkHuKb/wACpWpKAHYz3NKKb9aTI9TQA+imcep5pw57mgD/2Q==",
                "permalink": "https://futureofcoding.slack.com/files/UFEQUBNNT/F014HFTPF5X/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F014HFTPF5X-e8b8b987aa",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": true,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uIl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I dunno, maybe we're off in weeds that are only interesting to me, but could you point to where the boilerplate is in this example?\n\nThe bodies of these functions were written by the ML model and required making several design decisions without human intervention, about how values should be computed, what nearby methods could be reused, and what output should look like. I think in any other context, we'd call the parts that the human wrote \"boilerplate\" and the parts that the computer wrote \"programming\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UFEQUBNNT",
        "display_as_bot": false,
        "ts": "1590165068.147200",
        "edited": {
            "user": "UFEQUBNNT",
            "ts": "1590165093.000000"
        },
        "client_msg_id": "125f1100-9cae-4e5b-aaac-5a4c05c1f32e",
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "509968e0-0bf8-48f0-b403-d67041365625",
        "type": "message",
        "text": "AFAIK flow-based UI (or something akin to) is used by a couple of ETL tools (<http://parabola.io|parabola.io> for example). My goal however is to be closer to a designer, tinkerer needs - so not scalability but flexibility rather.\nDataPipes should allow its users to quickly build something useful for prototyping needs. Easy to tweak, refactor, and change without coding.\nI'm just starting so we will see how it ends.\n\nRe HN - tnx, I have not seen that discussion.",
        "user": "UPRSF90CW",
        "ts": "1590165212.147700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wWju",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "AFAIK flow-based UI (or something akin to) is used by a couple of ETL tools ("
                            },
                            {
                                "type": "link",
                                "url": "http://parabola.io",
                                "text": "parabola.io"
                            },
                            {
                                "type": "text",
                                "text": " for example). My goal however is to be closer to a designer, tinkerer needs - so not scalability but flexibility rather.\nDataPipes should allow its users to quickly build something useful for prototyping needs. Easy to tweak, refactor, and change without coding.\nI'm just starting so we will see how it ends.\n\nRe HN - tnx, I have not seen that discussion."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590146193.138500",
        "parent_user_id": "UPRSF90CW",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UE0ETTCG7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0c9f703a-a795-4550-b3d0-260dd889178b",
        "type": "message",
        "text": "This is dope! I used QC heavily for design, and worked on origami.design\n\nMy main feedback is in two parts:\n- how are you imagining implementing repeating lists with randomization within? R u thinking the Iterator route from QC or Spreads from Vvvv?\n- big reason QC was so great was live refresh, would love to see this work without clicking that button at the top and refreshing in the browser (maybe quick hack to use python httpwatcher to reserve)",
        "user": "UU8H7M823",
        "ts": "1590165690.148400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "szX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is dope! I used QC heavily for design, and worked on origami.design\n\nMy main feedback is in two parts:\n- how are you imagining implementing repeating lists with randomization within? R u thinking the Iterator route from QC or Spreads from Vvvv?\n- big reason QC was so great was live refresh, would love to see this work without clicking that button at the top and refreshing in the browser (maybe quick hack to use python httpwatcher to reserve)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590146193.138500",
        "parent_user_id": "UPRSF90CW"
    },
    {
        "client_msg_id": "e0ffa2dd-f339-4fcd-a84a-1ded742dded2",
        "type": "message",
        "text": "3rd feedback is sharing to other folks is important and I can imagine a local json server not being super helpful when sharing a live proto with someone else, what r ur thoughts for tackling that? It was def a big blocker for adoption of origami studio/QC files not to be able to share freely and view on the web",
        "user": "UU8H7M823",
        "ts": "1590165763.148600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TqT3x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "3rd feedback is sharing to other folks is important and I can imagine a local json server not being super helpful when sharing a live proto with someone else, what r ur thoughts for tackling that? It was def a big blocker for adoption of origami studio/QC files not to be able to share freely and view on the web"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590146193.138500",
        "parent_user_id": "UPRSF90CW"
    },
    {
        "client_msg_id": "b0365178-4782-47d8-97d0-31b676a21ba7",
        "type": "message",
        "text": "<@UFEQUBNNT> the above cannot be generated by OpenAI, there are many assumptions that it made and decisions that it made which throw many red flags for me. However again, I think we are on different pages here because what I see in this screenshot is the \u201csimple\u201d parts of coding, the \u201chard\u201d parts concern the abstractions, security, data integrity, integration and scope concerns that an AI, in the general purpose sense, cannot manage well (and I think never will unless you narrow the scope).\n<@UDZRT1962> was spot on when hinting at verifying generated code. The system may have come up with multiple potential candidates, How do you pick them? How do you provide the extra context or params when required. <@UFEQUBNNT> I promise you that this demo was hacked\u2026 I have little confidence that the results you see are fully using OpenAI. I would love to try it out and give it just a little ambiguity and see it fail constantly.\nThere is so many issues with the above\u2026 I don\u2019t even know where to start. I would bet :moneybag: it was mostly faked.",
        "user": "UJKKBAMLL",
        "ts": "1590166638.148900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJKKBAMLL",
            "ts": "1590166641.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qR8qr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFEQUBNNT"
                            },
                            {
                                "type": "text",
                                "text": " the above cannot be generated by OpenAI, there are many assumptions that it made and decisions that it made which throw many red flags for me. However again, I think we are on different pages here because what I see in this screenshot is the \u201csimple\u201d parts of coding, the \u201chard\u201d parts concern the abstractions, security, data integrity, integration and scope concerns that an AI, in the general purpose sense, cannot manage well (and I think never will unless you narrow the scope).\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UDZRT1962"
                            },
                            {
                                "type": "text",
                                "text": " was spot on when hinting at verifying generated code. The system may have come up with multiple potential candidates, How do you pick them? How do you provide the extra context or params when required. "
                            },
                            {
                                "type": "user",
                                "user_id": "UFEQUBNNT"
                            },
                            {
                                "type": "text",
                                "text": " I promise you that this demo was hacked\u2026 I have little confidence that the results you see are fully using OpenAI. I would love to try it out and give it just a little ambiguity and see it fail constantly.\nThere is so many issues with the above\u2026 I don\u2019t even know where to start. I would bet "
                            },
                            {
                                "type": "emoji",
                                "name": "moneybag"
                            },
                            {
                                "type": "text",
                                "text": " it was mostly faked."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "0a9a4d01-3b75-41ee-ae6c-09ac72fe3744",
        "type": "message",
        "text": ":stuck_out_tongue: Never promised my system was good, just that the problems the people in my user studies ran into had nothing to do with parsing. People loved that their autocomplete/search results looked like \"Play a major scale starting at [note]\" instead of \"play_scale(base_note)\". I wish I'd written more down, but oh well.",
        "user": "UFEQUBNNT",
        "ts": "1590166689.149200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MjN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            },
                            {
                                "type": "text",
                                "text": " Never promised my system was good, just that the problems the people in my user studies ran into had nothing to do with parsing. People loved that their autocomplete/search results looked like \"Play a major scale starting at [note]\" instead of \"play_scale(base_note)\". I wish I'd written more down, but oh well."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "e89a5439-3551-44bd-9c77-269e44f0e3d0",
        "type": "message",
        "text": "Think about all the ambiguity. Understanding the variable scope, the class structure, the functions available, the user intent\u2026 it\u2019s far to much and far to complex to \u201cjust generate\u201d it\u2026 This is at best snake oil..",
        "user": "UJKKBAMLL",
        "ts": "1590166717.149400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nG1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Think about all the ambiguity. Understanding the variable scope, the class structure, the functions available, the user intent\u2026 it\u2019s far to much and far to complex to \u201cjust generate\u201d it\u2026 This is at best snake oil.."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "df4466b6-46ec-43e7-93f4-a81bc8e0e372",
        "type": "message",
        "text": "FWIW -- I think it's very plausible that this particular example was generated honestly by the team. This is a pattern that I'd expect to be well-represented in the corpus of training material available on github, and so I'd expect the AI to usually get close. Particularly when using logical constraints as part of the generation process (think techniques like SRL). Occasionally, close will end up being completely correct. The issue with trying to use this for writing production code is that even an 80% success rate on individual expressions produces a *lot* of bugs over time without skilled programmers constantly debugging newly generated additions. I think it's probably a wash for most programmers to try to use this for development (assuming it's in that state), but reflecting more on it, this seems like potentially a *huge* _accessibility_ boost for programmers who are blind or have lost dexterity. Definitely an avenue worth exploring more on the road to AGI. :slightly_smiling_face:",
        "user": "UDZRT1962",
        "ts": "1590167233.149700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+XAC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FWIW -- I think it's very plausible that this particular example was generated honestly by the team. This is a pattern that I'd expect to be well-represented in the corpus of training material available on github, and so I'd expect the AI to usually get close. Particularly when using logical constraints as part of the generation process (think techniques like SRL). Occasionally, close will end up being completely correct. The issue with trying to use this for writing production code is that even an 80% success rate on individual expressions produces a "
                            },
                            {
                                "type": "text",
                                "text": "lot",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of bugs over time without skilled programmers constantly debugging newly generated additions. I think it's probably a wash for most programmers to try to use this for development (assuming it's in that state), but reflecting more on it, this seems like potentially a "
                            },
                            {
                                "type": "text",
                                "text": "huge",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "accessibility",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " boost for programmers who are blind or have lost dexterity. Definitely an avenue worth exploring more on the road to AGI. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            },
            {
                "name": "fire",
                "users": [
                    "UJKKBAMLL"
                ],
                "count": 1
            },
            {
                "name": "muscle",
                "users": [
                    "UJKKBAMLL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "798f2337-712a-4d5f-9a8c-fd25ebed0315",
        "type": "message",
        "text": "Tnx Julius, you raised IMHO some of the most important issues I was dealing with :)\n\n1. Re: lists - as of now there two ways already builtin - either the generator node has 'Repeat' port that takes the number of generations to make, or you can use sequences, something closer to iterator pattern than strictly imperative loop with its body\n2. Live refresh - that's absolutely a priority for me too, so the current connect-run-repat chore will be gone forever\n3. Sharing - from the very beginning I was thinking about the flow runtime engine to be ready to work on the server as well. So it easy to imagine the third icon in the toolbar saying \"Deploy to Cloud\" (with all consequences on data privacy etc).\n",
        "user": "UPRSF90CW",
        "ts": "1590169965.150500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B7dCN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tnx Julius, you raised IMHO some of the most important issues I was dealing with :)\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Re: lists - as of now there two ways already builtin - either the generator node has 'Repeat' port that takes the number of generations to make, or you can use sequences, something closer to iterator pattern than strictly imperative loop with its body"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Live refresh - that's absolutely a priority for me too, so the current connect-run-repat chore will be gone forever"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Sharing - from the very beginning I was thinking about the flow runtime engine to be ready to work on the server as well. So it easy to imagine the third icon in the toolbar saying \"Deploy to Cloud\" (with all consequences on data privacy etc)."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ],
        "thread_ts": "1590146193.138500",
        "parent_user_id": "UPRSF90CW",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UU8H7M823"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0dfcded3-cf55-4924-a875-1c0efbc92089",
        "type": "message",
        "text": "Having built systems that can take arbitrary english and write sophisticated queries with high accuracy, these examples seem entirely doable given the technologies we have. Also knowing several of the people at OpenAI, including Sam, it's extremely unlikely the demos were \"mostly faked.\" Are they general? Dunno. They made no claims that it was and we'd need to see more. But either way it's probably wrong to be so convicted that it's all just lies.\n\nIn general, you'll gain much more from evaluating things from the prospective of how they _could_ work, rather than assuming they're impossible and the people behind them are just using smoke and mirrors. It's also better for the community if we assume people are showing things in good faith, instead of trying to trick you.",
        "user": "UEBG0NPDK",
        "ts": "1590171162.150700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "==uD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Having built systems that can take arbitrary english and write sophisticated queries with high accuracy, these examples seem entirely doable given the technologies we have. Also knowing several of the people at OpenAI, including Sam, it's extremely unlikely the demos were \"mostly faked.\" Are they general? Dunno. They made no claims that it was and we'd need to see more. But either way it's probably wrong to be so convicted that it's all just lies.\n\nIn general, you'll gain much more from evaluating things from the prospective of how they "
                            },
                            {
                                "type": "text",
                                "text": "could",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " work, rather than assuming they're impossible and the people behind them are just using smoke and mirrors. It's also better for the community if we assume people are showing things in good faith, instead of trying to trick you."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "430e3dfa-c820-4cc4-bea6-112392ea0dbf",
        "type": "message",
        "text": "<@UJKKBAMLL> For what it's worth, when I made this comment - <https://futureofcoding.slack.com/archives/CCL5VVBAN/p1587142633117200?thread_ts=1587131460.117000&amp;cid=CCL5VVBAN> - my immediate reaction to your demo had been \"this must be faked\"!",
        "user": "UDQBTJ211",
        "ts": "1590171578.150900",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/CCL5VVBAN/p1587142633117200?thread_ts=1587131460.117000&amp;cid=CCL5VVBAN",
                "fallback": "[April 17th, 2020 9:57 AM] chrisknott: It's very impressive.\n\nAre you able to explain a bit more about how the NLP works? For example, how does it know to map \"Intercom messages\" to \"intercom.openChats\"? Or how does it know to say \"who are\" customers, rather than \"what is\" customers etc?",
                "ts": "1587142633.117200",
                "author_id": "UDQBTJ211",
                "author_subname": "Chris Knott",
                "channel_id": "CCL5VVBAN",
                "channel_name": "feedback",
                "is_msg_unfurl": true,
                "is_reply_unfurl": true,
                "text": "It's very impressive.\n\nAre you able to explain a bit more about how the NLP works? For example, how does it know to map \"Intercom messages\" to \"intercom.openChats\"? Or how does it know to say \"who are\" customers, rather than \"what is\" customers etc?",
                "author_name": "Chris Knott",
                "author_link": "https://futureofcoding.slack.com/team/UDQBTJ211",
                "author_icon": "https://avatars.slack-edge.com/2019-02-14/551655871797_2624b1e78c0a9eaed529_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/CCL5VVBAN/p1587142633117200?thread_ts=1587131460.117000&amp;cid=CCL5VVBAN",
                "footer": "From a thread in #feedback"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2yf2z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJKKBAMLL"
                            },
                            {
                                "type": "text",
                                "text": " For what it's worth, when I made this comment - "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/CCL5VVBAN/p1587142633117200?thread_ts=1587131460.117000&cid=CCL5VVBAN"
                            },
                            {
                                "type": "text",
                                "text": " - my immediate reaction to your demo had been \"this must be faked\"!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "2f885537-96a8-4a1a-8ca6-19bbde19d226",
        "type": "message",
        "text": "<@UDQBTJ211> It was faked, of course! That\u2019s what marketing is all about.",
        "user": "UJKKBAMLL",
        "ts": "1590171944.151200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sP1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDQBTJ211"
                            },
                            {
                                "type": "text",
                                "text": " It was faked, of course! That\u2019s what marketing is all about."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "01494338-5891-4ee9-8e93-f6541fa7bc4a",
        "type": "message",
        "text": "I never said it was real and it should be obvious that it was faked. The fact remains that we *are* building this and have made significant progress. Still remains, the scope of Python and challenges that come in the GPPL world are vast and the OpenAI won\u2019t be able to generate code beyond simple functions that got seeded with nearly perfect concepts. In their demo, if you remove just one word it would fail to produce the code because that one less word created ambiguity that no AI can resolve because the answer is in your head.",
        "user": "UJKKBAMLL",
        "ts": "1590172093.151400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mhqgx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I never said it was real and it should be obvious that it was faked. The fact remains that we "
                            },
                            {
                                "type": "text",
                                "text": "are",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " building this and have made significant progress. Still remains, the scope of Python and challenges that come in the GPPL world are vast and the OpenAI won\u2019t be able to generate code beyond simple functions that got seeded with nearly perfect concepts. In their demo, if you remove just one word it would fail to produce the code because that one less word created ambiguity that no AI can resolve because the answer is in your head."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    },
    {
        "client_msg_id": "1ab648e3-4929-428f-bcac-2b373b4d12b0",
        "type": "message",
        "text": "<@UEBG0NPDK> I\u2019m not assuming they were intentionally tricking anyone, or being malicious. I do think however, based on experience and research in this category, that the words which were seeded to OpenAI were methodical and predefined. Like as if \u201cIf you say this exact phrase, we can generate this code\u201d. I say this with confidence because if you change even small parts of the sentence than you lose scope/context and add ambiguity which the AI cannot understand.",
        "user": "UJKKBAMLL",
        "ts": "1590172554.151600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sdD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " I\u2019m not assuming they were intentionally tricking anyone, or being malicious. I do think however, based on experience and research in this category, that the words which were seeded to OpenAI were methodical and predefined. Like as if \u201cIf you say this exact phrase, we can generate this code\u201d. I say this with confidence because if you change even small parts of the sentence than you lose scope/context and add ambiguity which the AI cannot understand."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081839.030800",
        "parent_user_id": "UH85W1ML1"
    }
]