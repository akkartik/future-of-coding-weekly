[
    {
        "client_msg_id": "0417a2d4-1157-495b-929b-769f75214b85",
        "type": "message",
        "text": "What do people here think about t-expressions?\n<https://srfi.schemers.org/srfi-110/srfi-110.html|https://srfi.schemers.org/srfi-110/srfi-110.html>\n<@UCUSW7WVD> I noticed your name in the acknowledgements, do you have any comments?",
        "user": "UT60XSVCN",
        "ts": "1590712683.260000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "SRFI 110: Sweet-expressions (t-expressions)",
                "title_link": "https://srfi.schemers.org/srfi-110/srfi-110.html",
                "text": "This defines sweet-expressions (t-expressions) for Scheme, building on neoteric-expressions (n-expressions) and curly-infix-expressions (c-expressions). This defines an approach to making Scheme more 'readable' by adding syntactically-meaningful indentation, as well as supporting infix and functions whose names precede the opening parenthesis.",
                "fallback": "SRFI 110: Sweet-expressions (t-expressions)",
                "from_url": "https://srfi.schemers.org/srfi-110/srfi-110.html",
                "service_name": "srfi.schemers.org",
                "id": 1,
                "original_url": "https://srfi.schemers.org/srfi-110/srfi-110.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kJy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What do people here think about t-expressions?\n"
                            },
                            {
                                "type": "link",
                                "url": "https://srfi.schemers.org/srfi-110/srfi-110.html",
                                "text": "https://srfi.schemers.org/srfi-110/srfi-110.html"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " I noticed your name in the acknowledgements, do you have any comments?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590712683.260000",
        "reply_count": 25,
        "reply_users_count": 4,
        "latest_reply": "1590947901.285100",
        "reply_users": [
            "UCUSW7WVD",
            "UJN1TAYEQ",
            "UJBAJNFLK",
            "UA14TGLTC"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7fa7ab9c-95c1-4399-8dac-47330e4c2379",
        "type": "message",
        "text": "This looks like the best summary of my opinion: <https://news.ycombinator.com/item?id=8503353#8507385>\n\nIn searching for it I also ran into <http://www.arclanguage.org/item?id=17084>, which seems like a fun thread in general.",
        "user": "UCUSW7WVD",
        "ts": "1590714531.260200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Msp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This looks like the best summary of my opinion: "
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=8503353#8507385"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIn searching for it I also ran into "
                            },
                            {
                                "type": "link",
                                "url": "http://www.arclanguage.org/item?id=17084"
                            },
                            {
                                "type": "text",
                                "text": ", which seems like a fun thread in general."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590712683.260000",
        "parent_user_id": "UT60XSVCN"
    },
    {
        "client_msg_id": "2eaac98d-fd31-4bdf-ac0e-63395407e27b",
        "type": "message",
        "text": "I think it is very difficult to create a new programming language syntax that, on one hand, is \"homoiconic\" and \"general\" (the goals for t-expressions), and that on the other hand, has the characteristics of a well designed notation, including suggestiveness, readability and usability.",
        "user": "UJN1TAYEQ",
        "ts": "1590719246.260400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yrx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think it is very difficult to create a new programming language syntax that, on one hand, is \"homoiconic\" and \"general\" (the goals for t-expressions), and that on the other hand, has the characteristics of a well designed notation, including suggestiveness, readability and usability."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590712683.260000",
        "parent_user_id": "UT60XSVCN"
    },
    {
        "client_msg_id": "C34CF8F5-69B9-46E1-972F-3E1E6B893D7B",
        "type": "message",
        "text": "My take on this is that if the goal of a syntax is malleability and simplicity, plain s-expressions are impossible to beat, an readability and usability can be ensured by tool support. All the proposed alternatives have failed so far because they didn\u2019t start out with a clear alternative set of compromises. They want to better in some respect, but don\u2019t say which price they are wiling to pay for that.",
        "user": "UJBAJNFLK",
        "ts": "1590728190.266500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C1ox",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My take on this is that if the goal of a syntax is malleability and simplicity, plain s-expressions are impossible to beat, an readability and usability can be ensured by tool support. All the proposed alternatives have failed so far because they didn\u2019t start out with a clear alternative set of compromises. They want to better in some respect, but don\u2019t say which price they are wiling to pay for that."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590712683.260000",
        "parent_user_id": "UT60XSVCN"
    },
    {
        "client_msg_id": "320fc3bb-d954-44e2-a373-986dbdc22db5",
        "type": "message",
        "text": "<@UJBAJNFLK> I'm curious to hear what you think of my proposal: <http://akkartik.name/post/wart>. I don't work on it anymore and the rest of the language has fatal issues, but I still think the whitespace and infix support was quite elegant.",
        "user": "UCUSW7WVD",
        "ts": "1590730277.266700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p0d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " I'm curious to hear what you think of my proposal: "
                            },
                            {
                                "type": "link",
                                "url": "http://akkartik.name/post/wart"
                            },
                            {
                                "type": "text",
                                "text": ". I don't work on it anymore and the rest of the language has fatal issues, but I still think the whitespace and infix support was quite elegant."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590712683.260000",
        "parent_user_id": "UT60XSVCN"
    },
    {
        "client_msg_id": "75eddd5d-b09e-4362-bb69-26d54d10b2be",
        "type": "message",
        "text": "Hi Scott, one of the emphases of Codestrates v2 is that it is easy to expose code in a user interface and edit it collaboratively. We also want to get at the potential weaknesses of the platform by creating a challenge that might come a bit at odds with the immediate affordances of the platform.",
        "user": "UERRYNVMM",
        "ts": "1590736326.266900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8UU62",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi Scott, one of the emphases of Codestrates v2 is that it is easy to expose code in a user interface and edit it collaboratively. We also want to get at the potential weaknesses of the platform by creating a challenge that might come a bit at odds with the immediate affordances of the platform."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590661937.255600",
        "parent_user_id": "UERRYNVMM",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UBSMEUXAA"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "cb37762e-c33e-47f7-adc7-2d67a41f5d25",
        "type": "message",
        "text": "<@U0115U1RCSW> Great to know that you worked there. I really liked the work source-d did.",
        "user": "UPVBV34EL",
        "ts": "1590737011.267100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UPVBV34EL",
            "ts": "1590737116.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MoJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U0115U1RCSW"
                            },
                            {
                                "type": "text",
                                "text": " Great to know that you worked there. I really liked the work source-d did."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590637979.252300",
        "parent_user_id": "UPU0YJ1CM",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0115U1RCSW"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d6ad2614-0a1e-40f7-860c-6d4001cbef8e",
        "type": "message",
        "text": "Great <@U0115U1RCSW>! I was a bit disappointed when realising your repo were not updated anymore^^",
        "user": "UPU0YJ1CM",
        "ts": "1590756201.268000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C22cY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great "
                            },
                            {
                                "type": "user",
                                "user_id": "U0115U1RCSW"
                            },
                            {
                                "type": "text",
                                "text": "! I was a bit disappointed when realising your repo were not updated anymore^^"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590637979.252300",
        "parent_user_id": "UPU0YJ1CM"
    },
    {
        "client_msg_id": "1d88db75-57e4-43eb-91ca-3f7e98b37810",
        "type": "message",
        "text": "One of my fundamental requirements for a programming language syntax is that values print as constructor expressions, which, when evaluated, reconstruct the original value. For example,\n```&gt;&gt;&gt; 2 + 2\n4\n&gt;&gt;&gt; \"foo\" ++ \"bar\"\n\"foobar\"\n&gt;&gt;&gt; [1,2,3] ++ [4,5,6]\n[1,2,3,4,5,6]```\nThe above REPL session shows a language where numbers, strings and lists print as constructor expressions.\n\nI don't *think* this requirement is in conflict with simplicity and malleability. However, Lisp dialects (languages with S-expression syntax) do not meet this requirement for lists, although they meet it for numbers and strings. For example, quoting from the Wart paper,\n```1 + 1\n\u21d2 2\n\n'(1 2 3)\n\u21d2 (1 2 3)```\nPhilip Wadler wrote about how this causes problems for teaching Lisp to undergraduates:\n&gt; The difference between (1 2 3) and (quote (1 2 3)) is subtle, and it inevitably confuses students. In particular, it plays havoc with the substitution model of evaluation.\nFrom \"A critique of Abelson and Sussman -or- Why calculating is better than scheming\" <https://www.cs.kent.ac.uk/people/staff/dat/miranda/wadler87.pdf>",
        "user": "UJN1TAYEQ",
        "ts": "1590760560.268200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QpGf+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One of my fundamental requirements for a programming language syntax is that values print as constructor expressions, which, when evaluated, reconstruct the original value. For example,\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": ">>> 2 + 2\n4\n>>> \"foo\" ++ \"bar\"\n\"foobar\"\n>>> [1,2,3] ++ [4,5,6]\n[1,2,3,4,5,6]"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The above REPL session shows a language where numbers, strings and lists print as constructor expressions.\n\nI don't "
                            },
                            {
                                "type": "text",
                                "text": "think",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " this requirement is in conflict with simplicity and malleability. However, Lisp dialects (languages with S-expression syntax) do not meet this requirement for lists, although they meet it for numbers and strings. For example, quoting from the Wart paper,\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "1 + 1\n\u21d2 2\n\n'(1 2 3)\n\u21d2 (1 2 3)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Philip Wadler wrote about how this causes problems for teaching Lisp to undergraduates:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The difference between (1 2 3) and (quote (1 2 3)) is subtle, and it inevitably confuses students. In particular, it plays havoc with the substitution model of evaluation."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "From \"A critique of Abelson and Sussman -or- Why calculating is better than scheming\" "
                            },
                            {
                                "type": "link",
                                "url": "https://www.cs.kent.ac.uk/people/staff/dat/miranda/wadler87.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590712683.260000",
        "parent_user_id": "UT60XSVCN",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 2
            },
            {
                "name": "100",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            },
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "076f589f-c072-415d-896b-6a33c8064ef1",
        "type": "message",
        "text": "What if the CLIs had better previews of their effects as many GUIs do?",
        "user": "UA14TGLTC",
        "ts": "1590771653.268600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dXB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What if the CLIs had better previews of their effects as many GUIs do?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590616757.241600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "fff5a2ab-f42e-439d-908a-58c2b3a44365",
        "type": "message",
        "text": "<@UJN1TAYEQ> Yes!  Quote is weird this way.",
        "user": "UA14TGLTC",
        "ts": "1590771767.269100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zrS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " Yes!  Quote is weird this way."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590712683.260000",
        "parent_user_id": "UT60XSVCN"
    },
    {
        "client_msg_id": "558f1a16-37b1-4db2-95e6-eedd450a74f8",
        "type": "message",
        "text": "<@UCUSW7WVD> Wart looks interesting in many respects, in particular the way it deals with name overloading and how it encourages forking. But the topic here is syntax, which I think is not explained in sufficient detail on your page.\n\nApparently you are trading in simplicity for \"normality\" in the sense of allowing familiar infix expressions. The price to pay is a distinction between standard identifiers and infix operator identifiers. OK, but what are those rules? Is it by character class, as in Smalltalk? Some characters are only allowed in infix identifiers, and others only in standard identifiers? With mixing forbidden? Then... how do you handle the creation of synthetic identifiers in macros? Stuff like Lisp's gensym.\n\nAnother detail that is unclear is the indentation analysis. What would be the parenthesized form of\n`def foo`\n    `foo bar`\n  `foo bar`\n(assuming this is legal syntax?) That's where edge cases tend to get messy in various indentation-based proposals I have seen.",
        "user": "UJBAJNFLK",
        "ts": "1590772506.269300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tBp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " Wart looks interesting in many respects, in particular the way it deals with name overloading and how it encourages forking. But the topic here is syntax, which I think is not explained in sufficient detail on your page.\n\nApparently you are trading in simplicity for \"normality\" in the sense of allowing familiar infix expressions. The price to pay is a distinction between standard identifiers and infix operator identifiers. OK, but what are those rules? Is it by character class, as in Smalltalk? Some characters are only allowed in infix identifiers, and others only in standard identifiers? With mixing forbidden? Then... how do you handle the creation of synthetic identifiers in macros? Stuff like Lisp's gensym.\n\nAnother detail that is unclear is the indentation analysis. What would be the parenthesized form of\n"
                            },
                            {
                                "type": "text",
                                "text": "def foo",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "    foo bar",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "  foo bar",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n(assuming this is legal syntax?) That's where edge cases tend to get messy in various indentation-based proposals I have seen."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590712683.260000",
        "parent_user_id": "UT60XSVCN"
    },
    {
        "client_msg_id": "45f6a7dc-d69d-4bd3-90c5-9dfb0287ac22",
        "type": "message",
        "text": "<@UJN1TAYEQ> You could fix that by printing all values with a quote prefix, right? I think I have seen this proposed for some Lisp.",
        "user": "UJBAJNFLK",
        "ts": "1590772622.269500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WWE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " You could fix that by printing all values with a quote prefix, right? I think I have seen this proposed for some Lisp."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590712683.260000",
        "parent_user_id": "UT60XSVCN"
    },
    {
        "client_msg_id": "537ab3f4-4d65-4009-ae89-60c6ae5b8e4b",
        "type": "message",
        "text": "<http://acko.net/blog/software-development-as-advanced-damage-control/>\n\n&gt;  When you look at code from a data-centric view, a lot of things start to look like stale or inconsistent data problems. I don't like using the word \"cache\" for this because it focuses on the negative, the absence of fresh input. The real issue is data dependencies, which are connections that must be maintained in order to present a cohesive view and cohesive behavior, derived from a changing input model.",
        "user": "U71PMQ1V0",
        "ts": "1590774956.270400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U71PMQ1V0",
            "ts": "1590777389.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6Nlc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http://acko.net/blog/software-development-as-advanced-damage-control/"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " When you look at code from a data-centric view, a lot of things start to look like stale or inconsistent data problems. I don't like using the word \"cache\" for this because it focuses on the negative, the absence of fresh input. The real issue is data dependencies, which are connections that must be maintained in order to present a cohesive view and cohesive behavior, derived from a changing input model."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590774956.270400",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1590918326.283900",
        "reply_users": [
            "UES04SML7",
            "UA14TGLTC",
            "U5STGTB3J"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT",
                    "U010RH58PL7",
                    "UML4ZEKDK",
                    "UETFVV24Q",
                    "UHWC9PXBL",
                    "UES04SML7",
                    "UJBAJNFLK",
                    "UA14TGLTC",
                    "UPRSF90CW",
                    "U5STGTB3J"
                ],
                "count": 10
            }
        ]
    },
    {
        "client_msg_id": "6125c9d2-62f9-4b8f-ab73-eba58defc00e",
        "type": "message",
        "text": "<https://ourmachinery.com/post/the-story-behind-the-truth-designing-a-data-model/>\n\n&gt; In short, by putting a lot of responsibilities on the data model you can make the UI code for the editor a lot simpler. This is really important to us, because one of the problems we had in Bitsquid/Stingray was that we spent _a lot_ of time on developing UI and tools. Sometimes we would spend 30 minutes to add a feature to the runtime and then a week to create a UI for it. In The Machinery we wanted to address that imbalance and make sure that we could write tool and UI code as efficiently as runtime code.\n<https://ourmachinery.com/writing-tools-faster.html>\n\n&gt; *How Do We Fix it?*\n&gt; Automate undo, copy/paste, etc with a well-defined data model\n&gt; Less busy-work\n&gt; Minimize and own the tech stack\n&gt; Make things explicit and easy to understand\n&gt; Avoid changing frameworks\n&gt; Control performance\n&gt; Reuse UIs and generate them automatically from data\n&gt; Properties, Tree, Graph, etc\n&gt; Don't have to create an UI for everything.",
        "user": "U71PMQ1V0",
        "ts": "1590775184.271300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U71PMQ1V0",
            "ts": "1590777384.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NNEO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://ourmachinery.com/post/the-story-behind-the-truth-designing-a-data-model/"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In short, by putting a lot of responsibilities on the data model you can make the UI code for the editor a lot simpler. This is really important to us, because one of the problems we had in Bitsquid/Stingray was that we spent "
                            },
                            {
                                "type": "text",
                                "text": "a lot",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of time on developing UI and tools. Sometimes we would spend 30 minutes to add a feature to the runtime and then a week to create a UI for it. In The Machinery we wanted to address that imbalance and make sure that we could write tool and UI code as efficiently as runtime code."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://ourmachinery.com/writing-tools-faster.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How Do We Fix it?",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nAutomate undo, copy/paste, etc with a well-defined data model\nLess busy-work\nMinimize and own the tech stack\nMake things explicit and easy to understand\nAvoid changing frameworks\nControl performance\nReuse UIs and generate them automatically from data\nProperties, Tree, Graph, etc\nDon't have to create an UI for everything."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "e114635a-bfd2-497f-9074-8b6b1d5af7a6",
        "type": "message",
        "text": "<@UJBAJNFLK> Thanks for thinking about this!\n\nThe rule for inserting parens is: *Multi-word lines without leading parens are grouped with later indented lines.* That's it. I work through some implications at <https://github.com/akkartik/wart/blob/master/004optional_parens>\n\nTo tweak your above example a little to make it legal code:\n```def (foo)\n    prn 1\n  prn 2```\nNow `(foo)` prints:\n```1\n2```\n---\n\n&gt; The price to pay is a distinction between standard identifiers and infix operator identifiers. OK, but what are those rules? Is it by character class, as in Smalltalk? Some characters are only allowed in infix identifiers, and others only in standard identifiers? With mixing forbidden? Then... how do you handle the creation of synthetic identifiers in macros? Stuff like Lisp's gensym.\nYeah, disjoint character classes. The major restriction is that you can't use `-` in variables, which is a bitter pill to swallow. (Mu gave up Lisp to get back `-` :slightly_smiling_face:)\n\nI don't follow the gensym question. Wart expands `$x` inside macros to something like `x1234`. But it doesn't support infix operators. Is that what you're wondering? It never occurred to me to create new infix operators inside macros.",
        "user": "UCUSW7WVD",
        "ts": "1590776623.271700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1590777030.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5JD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for thinking about this!\n\nThe rule for inserting parens is: "
                            },
                            {
                                "type": "text",
                                "text": "Multi-word lines without leading parens are grouped with later indented lines.",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " That's it. I work through some implications at "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/akkartik/wart/blob/master/004optional_parens"
                            },
                            {
                                "type": "text",
                                "text": "\n\nTo tweak your above example a little to make it legal code:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "def (foo)\n    prn 1\n  prn 2"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Now "
                            },
                            {
                                "type": "text",
                                "text": "(foo)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " prints:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "1\n2"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "---\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The price to pay is a distinction between standard identifiers and infix operator identifiers. OK, but what are those rules? Is it by character class, as in Smalltalk? Some characters are only allowed in infix identifiers, and others only in standard identifiers? With mixing forbidden? Then... how do you handle the creation of synthetic identifiers in macros? Stuff like Lisp's gensym."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, disjoint character classes. The major restriction is that you can't use "
                            },
                            {
                                "type": "text",
                                "text": "-",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in variables, which is a bitter pill to swallow. (Mu gave up Lisp to get back "
                            },
                            {
                                "type": "text",
                                "text": "-",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nI don't follow the gensym question. Wart expands "
                            },
                            {
                                "type": "text",
                                "text": "$x",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " inside macros to something like "
                            },
                            {
                                "type": "text",
                                "text": "x1234",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". But it doesn't support infix operators. Is that what you're wondering? It never occurred to me to create new infix operators inside macros."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590712683.260000",
        "parent_user_id": "UT60XSVCN"
    },
    {
        "client_msg_id": "09257fb8-abdd-4459-885c-2c4753f57953",
        "type": "message",
        "text": "<@UJBAJNFLK> One of the nice properties of `[a,b,c]` syntax for constructing lists, is that you can replace any of the list elements with a subexpression that denotes the same value. This property goes by several names: compositional semantics, composable syntax, \"the substitution model of evaluation\".\n\nThe corresponding syntax in Lisp is `(list a b c)`. So, print `'(a b c)` as `(list 'a 'b 'c)`. But that's very verbose compared to the usual alternative. In Lisp culture, `(quote a)` is so important that it is abbreviated as `'a`, but there is no abbreviation for `(list a b c)`. So let's make an abbreviation, and use `[a b c]` as an abbreviation for `(list a b c)`. So now we print `'(a b c)` as `['a 'b 'c]`.",
        "user": "UJN1TAYEQ",
        "ts": "1590778598.272500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3fEs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " One of the nice properties of "
                            },
                            {
                                "type": "text",
                                "text": "[a,b,c]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " syntax for constructing lists, is that you can replace any of the list elements with a subexpression that denotes the same value. This property goes by several names: compositional semantics, composable syntax, \"the substitution model of evaluation\".\n\nThe corresponding syntax in Lisp is "
                            },
                            {
                                "type": "text",
                                "text": "(list a b c)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". So, print "
                            },
                            {
                                "type": "text",
                                "text": "'(a b c)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as "
                            },
                            {
                                "type": "text",
                                "text": "(list 'a 'b 'c)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". But that's very verbose compared to the usual alternative. In Lisp culture, "
                            },
                            {
                                "type": "text",
                                "text": "(quote a)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is so important that it is abbreviated as "
                            },
                            {
                                "type": "text",
                                "text": "'a",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but there is no abbreviation for "
                            },
                            {
                                "type": "text",
                                "text": "(list a b c)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". So let's make an abbreviation, and use "
                            },
                            {
                                "type": "text",
                                "text": "[a b c]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as an abbreviation for "
                            },
                            {
                                "type": "text",
                                "text": "(list a b c)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". So now we print "
                            },
                            {
                                "type": "text",
                                "text": "'(a b c)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as "
                            },
                            {
                                "type": "text",
                                "text": "['a 'b 'c]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590712683.260000",
        "parent_user_id": "UT60XSVCN"
    },
    {
        "client_msg_id": "d46a0600-66e2-413a-8019-a954d9c74459",
        "type": "message",
        "text": "<@UJN1TAYEQ> FYI Racket has the property you want:\n\n```&gt; (list 1 2 3)\n'(1 2 3)\n&gt; (list 1 2 (list 3 4))\n'(1 2 (3 4))```\nI have ambivalent feelings about this 'feature', though.",
        "user": "UCUSW7WVD",
        "ts": "1590783069.272800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1s1Sm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " FYI Racket has the property you want:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> (list 1 2 3)\n'(1 2 3)\n> (list 1 2 (list 3 4))\n'(1 2 (3 4))"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI have ambivalent feelings about this 'feature', though."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590712683.260000",
        "parent_user_id": "UT60XSVCN"
    },
    {
        "client_msg_id": "8C5E9A8C-A381-4F1B-944D-1764AD251B20",
        "type": "message",
        "text": "What do people here think of Deno?",
        "user": "UFLN9JFRT",
        "ts": "1590787615.273300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFLN9JFRT",
            "ts": "1590787630.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7Q3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What do people here think of Deno?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590787615.273300",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1590793931.274600",
        "reply_users": [
            "UC2A2ARPT",
            "UETFVV24Q"
        ],
        "subscribed": false
    }
]