[
    {
        "client_msg_id": "0e568850-1910-459f-b3fe-14a4a3601330",
        "type": "message",
        "text": "What they are looking for: <https://builders.mozilla.community/who-we-fund.html>",
        "user": "UJN1TAYEQ",
        "ts": "1589598367.427200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DO+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What they are looking for: "
                            },
                            {
                                "type": "link",
                                "url": "https://builders.mozilla.community/who-we-fund.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589565642.422100",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "e70a9d55-590a-49b2-b8a4-82f6d09c46de",
        "type": "message",
        "text": "The future of coding should have a social, networked component. IMO it should be distributed, decentralized &amp; collaborative, and Mozilla is funding that kind of tech.",
        "user": "UJN1TAYEQ",
        "ts": "1589598483.427400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1AXaB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The future of coding should have a social, networked component. IMO it should be distributed, decentralized & collaborative, and Mozilla is funding that kind of tech."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589565642.422100",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UTG9XLGKZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "5a7d0243-6555-4c02-a329-a8b215339ef3",
        "type": "message",
        "text": "<@UC2A2ARPT> said:\n&gt; It seems to me like he doesn't actually much care for visual design. Thus, the distaste for bevels and drop shadows, seeing those things as superfluous eye candy rather than tools that designers can use to create meaning.\nYes, I agree and PureData would have been better with some a bit use of visual effects, to improve readability. In that space Max/MSP did a good work, and I generally find that Max/MSP patches are more \"readable\" than PureData ones, with their mere black on white look with no contrast at all.\n\nI also find that the interview shows that, on the contrary, he actually cares about visual design. He only choose to stick to this very simple and basic visual design but I guess it is very consistent for him. But I agree it would be better if he had stop a bit farer in the \"raw &lt;-&gt; eye candy\" scale! :slightly_smiling_face:\n\nI have also heard that one of the reason he doesn't want to redesign with visual \"effects\" is to not break existing patches that \"rely\" on the old look. I guess something like, if you add thicker borders and inner padding for blocks, the 2D arrangement might change and some patches can become less readable.\n\n&gt; He built the patcher as a tool for non-programmers. My whole philosophy is: build a visual tool for expert programmers, where \"programmer\" is more of a way of thinking than a particular skillset.\nI totally agree with this philosophy!! 100% of it. In fact it is that kind of idea that makes me want to work on FoC and start my experiments (ok, now, I *must* find the time to make a TMW video to present this :clock1::clock2::clock3::clock4:...). It was first because block and arrow coding was a pain for some \"simple\" programing task I know I can manage quickly with text programming.\n\n&gt; So his inclination to reach for text and an imperative paradigm feels like a blind spot \u2014 and an unexpected one, considering he basically defined how most people conceive of visual programming.\nAt least, the take away of this for me is that he agrees that block and arrow programming with PureData is not efficient for some programming tasks. And that something is missing.\n\n&gt; To me, that's terrifying. We might have been better off if Max and Pd hadn't existed, and visual programming had instead been popularized by someone with a knack for visual communication.\nYes maybe. But as we all know there is a huuuge load of visual programming environments, trying lots of way to convey \"programming\" meaning. With very few that are still useful/used, even some with great visual communication. In that space, for me Max/MSP and PureData are apart, they are (and especially Max) some programming environments that lots of non expert programmers are using to build things that are useful to them. They are succesful in that, because there is something in them that \"works\" and this success is an inspiration for me.",
        "user": "UJ6LDMMN0",
        "ts": "1589611060.429100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v8W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " said:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It seems to me like he doesn't actually much care for visual design. Thus, the distaste for bevels and drop shadows, seeing those things as superfluous eye candy rather than tools that designers can use to create meaning."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYes, I agree and PureData would have been better with some a bit use of visual effects, to improve readability. In that space Max/MSP did a good work, and I generally find that Max/MSP patches are more \"readable\" than PureData ones, with their mere black on white look with no contrast at all.\n\nI also find that the interview shows that, on the contrary, he actually cares about visual design. He only choose to stick to this very simple and basic visual design but I guess it is very consistent for him. But I agree it would be better if he had stop a bit farer in the \"raw <-> eye candy\" scale! "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI have also heard that one of the reason he doesn't want to redesign with visual \"effects\" is to not break existing patches that \"rely\" on the old look. I guess something like, if you add thicker borders and inner padding for blocks, the 2D arrangement might change and some patches can become less readable.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "He built the patcher as a tool for non-programmers. My whole philosophy is: build a visual tool for expert programmers, where \"programmer\" is more of a way of thinking than a particular skillset."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI totally agree with this philosophy!! 100% of it. In fact it is that kind of idea that makes me want to work on FoC and start my experiments (ok, now, I "
                            },
                            {
                                "type": "text",
                                "text": "must",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " find the time to make a TMW video to present this "
                            },
                            {
                                "type": "emoji",
                                "name": "clock1"
                            },
                            {
                                "type": "emoji",
                                "name": "clock2"
                            },
                            {
                                "type": "emoji",
                                "name": "clock3"
                            },
                            {
                                "type": "emoji",
                                "name": "clock4"
                            },
                            {
                                "type": "text",
                                "text": "...). It was first because block and arrow coding was a pain for some \"simple\" programing task I know I can manage quickly with text programming.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So his inclination to reach for text and an imperative paradigm feels like a blind spot \u2014 and an unexpected one, considering he basically defined how most people conceive of visual programming."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAt least, the take away of this for me is that he agrees that block and arrow programming with PureData is not efficient for some programming tasks. And that something is missing.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To me, that's terrifying. We might have been better off if Max and Pd hadn't existed, and visual programming had instead been popularized by someone with a knack for visual communication."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYes maybe. But as we all know there is a huuuge load of visual programming environments, trying lots of way to convey \"programming\" meaning. With very few that are still useful/used, even some with great visual communication. In that space, for me Max/MSP and PureData are apart, they are (and especially Max) some programming environments that lots of non expert programmers are using to build things that are useful to them. They are succesful in that, because there is something in them that \"works\" and this success is an inspiration for me."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589265827.352600",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c9b2b6ff-0116-48a4-bf8a-901c0a2ce107",
        "type": "message",
        "text": "Lunch with Alan Kay, <https://futureofcoding.org/notes/alan-kay-lunch.html>:\n\" \u201cYou also need to be embedded in a community of others who have diverse perspectives to bounce these ideas off of.\u201d Alan argued passionately in favor of college and grad school. While he is well aware of its imperfections, he believes it\u2019s still better than an \u201coral culture\u201d or being an autodidact (just following your nose where your curiosity leads you).\"\n\nDo you agree that college and grad school are the best way to learn?\nI think that traditional education system is \"below what is actually needed\"; there are some fundamental flaws in a system where other people decide for you what you should learn and how (they have neither knowledge nor incentives to decide what is best for you). I understand that we need to stand on the shoulders of giants and not reinvent the wheel all the time, but this is just a challenge of a non-coercive education system, and it is solvable. I think the best solution for education lies in this space, and we should look for / invent it here. We should raise the quality of learning collaboration to much higher level, we should seek mentors and thought leaders like Alan Kay and take their advice and recommendations, but it should be up to us learners to decide what to do with this advice.\n\nWhat is your opinion?",
        "user": "UTG9XLGKZ",
        "ts": "1589627047.429900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UTG9XLGKZ",
            "ts": "1589628809.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kAm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lunch with Alan Kay, "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.org/notes/alan-kay-lunch.html"
                            },
                            {
                                "type": "text",
                                "text": ":\n\" \u201cYou also need to be embedded in a community of others who have diverse perspectives to bounce these ideas off of.\u201d Alan argued passionately in favor of college and grad school. While he is well aware of its imperfections, he believes it\u2019s still better than an \u201coral culture\u201d or being an autodidact (just following your nose where your curiosity leads you).\"\n\nDo you agree that college and grad school are the best way to learn?\nI think that traditional education system is \"below what is actually needed\"; there are some fundamental flaws in a system where other people decide for you what you should learn and how (they have neither knowledge nor incentives to decide what is best for you). I understand that we need to stand on the shoulders of giants and not reinvent the wheel all the time, but this is just a challenge of a non-coercive education system, and it is solvable. I think the best solution for education lies in this space, and we should look for / invent it here. We should raise the quality of learning collaboration to much higher level, we should seek mentors and thought leaders like Alan Kay and take their advice and recommendations, but it should be up to us learners to decide what to do with this advice.\n\nWhat is your opinion?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589627047.429900",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1589630966.430700",
        "reply_users": [
            "U01362XBSNA"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "8854695e-1517-4890-a895-9be6293359a9",
        "type": "message",
        "text": "I agree that it is essential to always to get frequent reality checks and to get your assumptions checked; otherwise it is easy to get stuck in your own world and delude yourself that you are doing great stuff. Graduate school is probably the easiest way to be part of this kind of community, at least if there are frequent seminars, colloquia and discussions with where different viewpoints are present. On the other hand, if you stay in the same university and group throughout undergraduate and graduate school you might also become a bit blind to other perspectives and other ways of doing things.",
        "user": "U01362XBSNA",
        "ts": "1589630966.430700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01362XBSNA",
            "ts": "1589631006.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eoicH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree that it is essential to always to get frequent reality checks and to get your assumptions checked; otherwise it is easy to get stuck in your own world and delude yourself that you are doing great stuff. Graduate school is probably the easiest way to be part of this kind of community, at least if there are frequent seminars, colloquia and discussions with where different viewpoints are present. On the other hand, if you stay in the same university and group throughout undergraduate and graduate school you might also become a bit blind to other perspectives and other ways of doing things."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589627047.429900",
        "parent_user_id": "UTG9XLGKZ",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "type": "message",
        "subtype": "bot_message",
        "text": "10 year old with 3 years coding experience starts YouTube channel demonstrating how to use kids learn to code websites",
        "ts": "1589649965.431400",
        "username": "coolhandcanuck1",
        "icons": {
            "image_48": "https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2020-05-16/1128700096515_48.png"
        },
        "bot_id": "BEYLABLRH",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "subtype": "bot_message",
        "text": "<https://www.youtube.com/watch?v=4g4fRkXz4n0>",
        "ts": "1589649968.431500",
        "username": "coolhandcanuck1",
        "icons": {
            "image_48": "https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2020-05-16/1128700096515_48.png"
        },
        "bot_id": "BEYLABLRH",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Experiments with hour of code",
                "title_link": "https://www.youtube.com/watch?v=4g4fRkXz4n0",
                "author_name": "Coding for kids",
                "author_link": "https://www.youtube.com/channel/UCSwNdho1-VaghUkXlvV_vEw",
                "thumb_url": "https://i.ytimg.com/vi/4g4fRkXz4n0/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Experiments with hour of code",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/4g4fRkXz4n0?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=4g4fRkXz4n0",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=4g4fRkXz4n0"
            }
        ],
        "edited": {
            "user": "BEYLABLRH",
            "ts": "1589649969.000000"
        }
    },
    {
        "client_msg_id": "4de94e69-05da-4114-9408-eff8044c2454",
        "type": "message",
        "text": "I'm researching the history of extensions in text editors (e.g., like VSCode extensions <https://marketplace.visualstudio.com/>). I generally consider TextMate (released 2004) as the starting point of an era of text editors built around extensions. That for example makes Sublime Text, Atom, and Visual Studio Code all \"TextMate-likes\" in that their built around significant amount of functionality coming from share-able extensions. (Note that I'm making a distinction between *extensible text editors*, \u00e0 la Emacs, and *text editor extensions* that are easily share-able packages/plugins/bundles, etc...)\n\nOther note-able milestones in the text-editor-extension era are the introduction of Pathogen.vim for Vim in 2008 and Package.el added to Emacs 24 in 2011. Light Table and Atom, released in 2012 and 2014 respectively, are also notable as the first popular web-based text editor built around extensions. Being web-based greatly increased the ease of writing extensions that involve GUI elements.\n\nI'm curious to hear about what others consider important milestones for extensions in text editors? For example, I'd love to hear more about any prior art to TextMate? Before package managers for Vim and Emacs, how did people share syntax highlighting files? And were there examples in other text editors that went beyond syntax highlighting, e.g., did any text editors prior to 2004 have a plugin system that could do more than just add syntax highlighting, like adding commands?",
        "user": "UE0ETTCG7",
        "ts": "1589664272.431900",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Visual Studio Marketplace",
                "title_link": "https://marketplace.visualstudio.com/",
                "text": "Extensions for Visual Studio family of products on Visual Studio Marketplace",
                "fallback": "Visual Studio Marketplace",
                "thumb_url": "https://cdn.vsassets.io/v/M168_20200508.6/_content/Header/access-marketplace.png",
                "from_url": "https://marketplace.visualstudio.com/",
                "thumb_width": 180,
                "thumb_height": 117,
                "service_icon": "https://marketplace.visualstudio.com/favicon.ico",
                "service_name": "marketplace.visualstudio.com",
                "id": 1,
                "original_url": "https://marketplace.visualstudio.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GzQm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm researching the history of extensions in text editors (e.g., like VSCode extensions "
                            },
                            {
                                "type": "link",
                                "url": "https://marketplace.visualstudio.com/"
                            },
                            {
                                "type": "text",
                                "text": "). I generally consider TextMate (released 2004) as the starting point of an era of text editors built around extensions. That for example makes Sublime Text, Atom, and Visual Studio Code all \"TextMate-likes\" in that their built around significant amount of functionality coming from share-able extensions. (Note that I'm making a distinction between "
                            },
                            {
                                "type": "text",
                                "text": "extensible text editors",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", \u00e0 la Emacs, and "
                            },
                            {
                                "type": "text",
                                "text": "text editor extensions",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that are easily share-able packages/plugins/bundles, etc...)\n\nOther note-able milestones in the text-editor-extension era are the introduction of Pathogen.vim for Vim in 2008 and Package.el added to Emacs 24 in 2011. Light Table and Atom, released in 2012 and 2014 respectively, are also notable as the first popular web-based text editor built around extensions. Being web-based greatly increased the ease of writing extensions that involve GUI elements.\n\nI'm curious to hear about what others consider important milestones for extensions in text editors? For example, I'd love to hear more about any prior art to TextMate? Before package managers for Vim and Emacs, how did people share syntax highlighting files? And were there examples in other text editors that went beyond syntax highlighting, e.g., did any text editors prior to 2004 have a plugin system that could do more than just add syntax highlighting, like adding commands?"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]