[
    {
        "type": "message",
        "subtype": "bot_message",
        "text": "How many SLOC is your FoC project, at the moment?",
        "ts": "1590185757.151900",
        "bot_id": "B0126FWU6VD",
        "thread_ts": "1590185757.151900",
        "reply_count": 21,
        "reply_users_count": 5,
        "latest_reply": "1590250901.190900",
        "reply_users": [
            "UEQ6M68H0",
            "UCUSW7WVD",
            "U013HU44GLS",
            "UFLN9JFRT",
            "UUQ2EQW21"
        ],
        "subscribed": false,
        "blocks": [
            {
                "type": "section",
                "block_id": "poll-00b776d2-756e-4260-9242-5203cdd37316-title-and-menu",
                "text": {
                    "type": "mrkdwn",
                    "text": "*How many SLOC is your FoC project, at the moment?*",
                    "verbatim": false
                },
                "accessory": {
                    "type": "overflow",
                    "action_id": "title-and-menu",
                    "options": [
                        {
                            "text": {
                                "type": "plain_text",
                                "text": ":information_source: View info",
                                "emoji": true
                            },
                            "value": "view_info"
                        },
                        {
                            "text": {
                                "type": "plain_text",
                                "text": ":pushpin: Capture Decision from Poll",
                                "emoji": true
                            },
                            "value": "capture_decision_from_poll"
                        },
                        {
                            "text": {
                                "type": "plain_text",
                                "text": ":x: Delete Poll",
                                "emoji": true
                            },
                            "value": "delete_poll"
                        },
                        {
                            "text": {
                                "type": "plain_text",
                                "text": ":gear: Go to Settings",
                                "emoji": true
                            },
                            "value": "go_to_settings_from_poll",
                            "url": "https://simplepoll.rocks/dashboard/futureofcoding/settings/"
                        }
                    ]
                }
            },
            {
                "type": "section",
                "block_id": "poll-00b776d2-756e-4260-9242-5203cdd37316-vote-1",
                "text": {
                    "type": "mrkdwn",
                    "text": ":one: 0-1k    `4`\n<@UHWC9PXBL>, <@UAVCC2X70>, <@UA14TGLTC>, <@UK3LH8CF5>",
                    "verbatim": false
                },
                "accessory": {
                    "type": "button",
                    "action_id": "vote-1",
                    "text": {
                        "type": "plain_text",
                        "text": ":one:",
                        "emoji": true
                    }
                }
            },
            {
                "type": "section",
                "block_id": "poll-00b776d2-756e-4260-9242-5203cdd37316-vote-2",
                "text": {
                    "type": "mrkdwn",
                    "text": ":two: 1k-10k    `9`\n<@UC2A2ARPT>, <@UH7GU4TAM>, <@UDQBTJ211>, <@UEBG0NPDK>, <@UETFVV24Q>, <@ULK0Z4MPV>, <@UFLN9JFRT>, <@UP3FH4CLU>, <@USH01JEDQ>",
                    "verbatim": false
                },
                "accessory": {
                    "type": "button",
                    "action_id": "vote-2",
                    "text": {
                        "type": "plain_text",
                        "text": ":two:",
                        "emoji": true
                    }
                }
            },
            {
                "type": "section",
                "block_id": "poll-00b776d2-756e-4260-9242-5203cdd37316-vote-3",
                "text": {
                    "type": "mrkdwn",
                    "text": ":three: 10k-100k    `7`\n<@UPRSF90CW>, <@UEQ6M68H0>, <@UJN1TAYEQ>, <@UCUSW7WVD>, <@U0123H7JRDM>, <@UUQ2EQW21>, <@UBN9AFS0N>",
                    "verbatim": false
                },
                "accessory": {
                    "type": "button",
                    "action_id": "vote-3",
                    "text": {
                        "type": "plain_text",
                        "text": ":three:",
                        "emoji": true
                    }
                }
            },
            {
                "type": "section",
                "block_id": "poll-00b776d2-756e-4260-9242-5203cdd37316-vote-4",
                "text": {
                    "type": "mrkdwn",
                    "text": ":four: 100k+ (you're kidding, right?)    `2`\n<@U013HU44GLS>, <@UK49E71HB>",
                    "verbatim": false
                },
                "accessory": {
                    "type": "button",
                    "action_id": "vote-4",
                    "text": {
                        "type": "plain_text",
                        "text": ":four:",
                        "emoji": true
                    }
                }
            },
            {
                "type": "context",
                "block_id": "RZw",
                "elements": [
                    {
                        "type": "mrkdwn",
                        "text": "Created by <@UC2A2ARPT> with /poll",
                        "verbatim": false
                    }
                ]
            }
        ],
        "edited": {
            "user": "B0126FWU6VD",
            "ts": "1590315924.000000"
        }
    },
    {
        "client_msg_id": "BBDC02F2-B5AB-4DEA-82BC-AFF49C75D13D",
        "type": "message",
        "text": "love this in particular:\n&gt;&gt;&gt;Note that formal names (proper nouns) are not required for parameters and variables. This, we believe, is a major insight. A real-world chair or table is never (in normal conversation) called \u201cc\u201d or \u201cmyTable\u201d \u2014 we refer to such things simply as \u201cthe chair\u201d or \u201cthe table\u201d. Likewise here: \u201cthe vertex\u201d and \u201cthe polygon\u201d are the most natural names for these variables.",
        "user": "UHWC9PXBL",
        "ts": "1590187133.153400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1590187152.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mjJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "love this in particular:\n>>>Note that formal names (proper nouns) are not required for parameters and variables. This, we believe, is a major insight. A real-world chair or table is never (in normal conversation) called \u201cc\u201d or \u201cmyTable\u201d \u2014 we refer to such things simply as \u201cthe chair\u201d or \u201cthe table\u201d. Likewise here: \u201cthe vertex\u201d and \u201cthe polygon\u201d are the most natural names for these variables."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "c29c9761-16a6-4326-9635-58bfeb5c6e05",
        "type": "message",
        "text": "compiler=26k, runtime JS=31k, runtime AS=35k, samples=20k, docs=10k, but i don't have a tool that discounts comments so i demoted it to under 100k.",
        "user": "UEQ6M68H0",
        "ts": "1590188204.154300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kL8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "compiler=26k, runtime JS=31k, runtime AS=35k, samples=20k, docs=10k, but i don't have a tool that discounts comments so i demoted it to under 100k."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900"
    },
    {
        "client_msg_id": "00b2c623-e950-4c5f-a521-39ccb316b4eb",
        "type": "message",
        "text": "doesn't seem to be a way to change your vote in the poll system.",
        "user": "UEQ6M68H0",
        "ts": "1590188237.154600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WwWX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "doesn't seem to be a way to change your vote in the poll system."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900"
    },
    {
        "client_msg_id": "2117d09f-52fb-4d84-8a60-1faae5400d77",
        "type": "message",
        "text": "Clicking the number a second time toggles it off.",
        "user": "UCUSW7WVD",
        "ts": "1590189659.155200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hx15",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Clicking the number a second time toggles it off."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900"
    },
    {
        "client_msg_id": "a52be90c-ae89-4472-bc37-62396ef1ff27",
        "type": "message",
        "text": "I feel the need for an apologia for my response, given how much I talk about LoC as liability rather than asset:\n* It's for a whole computer that can run in isolation. So I'm counting all dependencies.\n* Most of it is in machine code, where LoC = static processor instructions.\n* Conservatively 2/3rds of it is tests.\n\nAnyways, it's bumping up on 50kLoC now, but I won't be surprised if it eventually exceeds 100k.",
        "user": "UCUSW7WVD",
        "ts": "1590190243.155400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ekM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I feel the need for an apologia for my response, given how much I talk about LoC as liability rather than asset:\n* It's for a whole computer that can run in isolation. So I'm counting all dependencies.\n* Most of it is in machine code, where LoC = static processor instructions.\n* Conservatively 2/3rds of it is tests.\n\nAnyways, it's bumping up on 50kLoC now, but I won't be surprised if it eventually exceeds 100k."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900",
        "reactions": [
            {
                "name": "beer",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "adcf6b9b-1175-46ba-971f-a25e2182f663",
        "type": "message",
        "text": "Hey guys. I have been going through listening to all the podcasts from the start because I find this whole topic deeply fascinating and want to make sure im up to date with everything before I start contributing here. I have one question however. In episode 3 \"Inventing on Principle\" with Jonathan Leung.\n\n<@U5TCAFTD3> and Jonathan discuss a whole bunch of really interesting things but Jonathan talks about an app I think he calls \"Workflow\" that he uses whenever he works on a task to help him structure how he tackles the problem. He mentions that he has shown the technique to many other people and they have all adopted it since. I would love to know more about this App and / or technique. Does anyone have any sources?",
        "user": "U0143PC0UTC",
        "ts": "1590201385.159800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qpi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey guys. I have been going through listening to all the podcasts from the start because I find this whole topic deeply fascinating and want to make sure im up to date with everything before I start contributing here. I have one question however. In episode 3 \"Inventing on Principle\" with Jonathan Leung.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U5TCAFTD3"
                            },
                            {
                                "type": "text",
                                "text": " and Jonathan discuss a whole bunch of really interesting things but Jonathan talks about an app I think he calls \"Workflow\" that he uses whenever he works on a task to help him structure how he tackles the problem. He mentions that he has shown the technique to many other people and they have all adopted it since. I would love to know more about this App and / or technique. Does anyone have any sources?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590201385.159800",
        "reply_count": 5,
        "reply_users_count": 3,
        "latest_reply": "1590283286.193600",
        "reply_users": [
            "UC2A2ARPT",
            "UFEQUBNNT",
            "U0143PC0UTC"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "fb1ebd7d-1e97-4b25-beed-3157b2429915",
        "type": "message",
        "text": "The moment in question is about 15minutes into the episode",
        "user": "U0143PC0UTC",
        "ts": "1590201564.160300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U87Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The moment in question is about 15minutes into the episode"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "ee4442ed-119f-43f3-963e-a69988e6a64b",
        "type": "message",
        "text": "<@UCUSW7WVD> thanks for the tip.  Also, i consider LOC a very bad unit of measurement for comparison purposes because some languages like LISP, APL, and FORTH are more horizontally oriented, and so i use word instead of lines. Words compares code sizes much more accurately. Yes people are not used to thinking in terms of words, but line count drastically undercounts more combinatorial languages. 100 lines of APL might include the name number of words (tokens) as 300 lines of C.",
        "user": "UEQ6M68H0",
        "ts": "1590202117.160600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s6e+S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " thanks for the tip.  Also, i consider LOC a very bad unit of measurement for comparison purposes because some languages like LISP, APL, and FORTH are more horizontally oriented, and so i use word instead of lines. Words compares code sizes much more accurately. Yes people are not used to thinking in terms of words, but line count drastically undercounts more combinatorial languages. 100 lines of APL might include the name number of words (tokens) as 300 lines of C."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UC2A2ARPT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "1c69da2e-2e1f-4b9c-8e6f-3c5627736d1f",
        "type": "message",
        "text": "I see the trick with articles and pronouns is to have interactive disambiguation, else you end up with the most nuanced scope and shadowing problems.  (In one of my silly lisp phases I had `(the whatever)`, `it`, `him`, and `her`.  The last two were bound when you used comparison operators, like, I don't know `(def (min-f f x y) (if (&lt; (f x) (f y)) him her))`.  So this returns the minium of `(f x)` and `(f y)`.",
        "user": "UA14TGLTC",
        "ts": "1590203733.161000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5/ODg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see the trick with articles and pronouns is to have interactive disambiguation, else you end up with the most nuanced scope and shadowing problems.  (In one of my silly lisp phases I had "
                            },
                            {
                                "type": "text",
                                "text": "(the whatever)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "it",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "him",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and "
                            },
                            {
                                "type": "text",
                                "text": "her",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  The last two were bound when you used comparison operators, like, I don't know "
                            },
                            {
                                "type": "text",
                                "text": "(def (min-f f x y) (if (< (f x) (f y)) him her))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  So this returns the minium of "
                            },
                            {
                                "type": "text",
                                "text": "(f x)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "(f y)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "c1a7c9c8-aafa-4540-ae9d-50ba4833241f",
        "type": "message",
        "text": "Ahem ... yeah so I used _cloc_ and tally-up only the actual code (e.g. no shell, latex, makefile ...) and I'm at 289682 ... (not including dependencies) :scream:",
        "user": "U013HU44GLS",
        "ts": "1590212201.161800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U013HU44GLS",
            "ts": "1590213299.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4NgT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ahem ... yeah so I used "
                            },
                            {
                                "type": "text",
                                "text": "cloc",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and tally-up only the actual code (e.g. no shell, latex, makefile ...) and I'm at 289682 ... (not including dependencies) "
                            },
                            {
                                "type": "emoji",
                                "name": "scream"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900",
        "reactions": [
            {
                "name": "rolling_on_the_floor_laughing",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "no_mouth",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "scream",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f961e1f7-9d72-46f9-be75-6b4fccf67b29",
        "type": "message",
        "text": "I'd love to hear more about your project, <@U013HU44GLS>. You should do a top-level post on it.",
        "user": "UCUSW7WVD",
        "ts": "1590214186.162200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1590214237.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M42K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd love to hear more about your project, "
                            },
                            {
                                "type": "user",
                                "user_id": "U013HU44GLS"
                            },
                            {
                                "type": "text",
                                "text": ". You should do a top-level post on it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "cf27bcae-538a-49f4-b4ae-2c68584242da",
        "type": "message",
        "text": "<@UCUSW7WVD> The project in question is called F1zz, at <https://f1zz.org/>\n\nAs far as i have been able to determine it is a language project that combines machine learning, knowledge systems, and supports distributed systems unlike PROLOG which was for a single machine. I think it beats the pants off PROLOG, but i wouldn't call it a general purpose language. He is an expert in robot navigation.",
        "user": "UEQ6M68H0",
        "ts": "1590215550.163000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1590216248.000000"
        },
        "attachments": [
            {
                "title": "fizz",
                "title_link": "https://f1zz.org/",
                "text": "An experimental language and runtime environment for ML+MR",
                "fallback": "fizz",
                "from_url": "https://f1zz.org/",
                "service_name": "f1zz.org",
                "id": 1,
                "original_url": "https://f1zz.org/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u06+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " The project in question is called F1zz, at "
                            },
                            {
                                "type": "link",
                                "url": "https://f1zz.org/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAs far as i have been able to determine it is a language project that combines machine learning, knowledge systems, and supports distributed systems unlike PROLOG which was for a single machine. I think it beats the pants off PROLOG, but i wouldn't call it a general purpose language. He is an expert in robot navigation."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UUQ2EQW21"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "777d0073-110c-4ce4-b2df-b8c071e9ba5f",
        "type": "message",
        "text": "Perhaps <https://workflowy.com> ?",
        "user": "UC2A2ARPT",
        "ts": "1590215578.163300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1590215583.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "biB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perhaps "
                            },
                            {
                                "type": "link",
                                "url": "https://workflowy.com"
                            },
                            {
                                "type": "text",
                                "text": " ?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590201385.159800",
        "parent_user_id": "U0143PC0UTC"
    },
    {
        "client_msg_id": "df1881bf-c29d-423c-ac39-0cc94a59db4a",
        "type": "message",
        "text": "Thanks <@UEQ6M68H0> for the kind words. Yeah, it's definitely not general purpose, although I did recently add some support for mixing imperative style with logic style. Also, I won't call myself an expert in robot navigation ;)",
        "user": "U013HU44GLS",
        "ts": "1590216563.163800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=L6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " for the kind words. Yeah, it's definitely not general purpose, although I did recently add some support for mixing imperative style with logic style. Also, I won't call myself an expert in robot navigation ;)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900"
    },
    {
        "client_msg_id": "ec91799c-ad28-4d71-9af9-a1bfd8c68c68",
        "type": "message",
        "text": "For Yazz Pilot the core files are around 10k lines, but most of the product is built as plug in components, so should we include those?",
        "user": "UFLN9JFRT",
        "ts": "1590216957.164100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hOAUe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For Yazz Pilot the core files are around 10k lines, but most of the product is built as plug in components, so should we include those?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900"
    },
    {
        "client_msg_id": "1339e0ed-b6f1-43a1-879f-ee40634e59e6",
        "type": "message",
        "text": "Yazz Pilot has generated revenues (probably 1.5m - 2m USD) for individuals (consulting) and companies (building demo dashboards), but we have decided not to monetize it ourselves at this time.",
        "user": "UFLN9JFRT",
        "ts": "1590217141.164300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AHT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yazz Pilot has generated revenues (probably 1.5m - 2m USD) for individuals (consulting) and companies (building demo dashboards), but we have decided not to monetize it ourselves at this time."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081535.029500",
        "parent_user_id": "UA8HY8R7B"
    },
    {
        "client_msg_id": "736c1992-042a-4225-8894-35ef2cba7731",
        "type": "message",
        "text": "I really liked Chris's comment \"We just want to make an environment that we actually want to live in\". I actually think that before we think of making our tools for others, we have to make sure we love them ourselves! If we do that then we have already succeeded!",
        "user": "UFLN9JFRT",
        "ts": "1590217513.164900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t=TK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really liked Chris's comment \"We just want to make an environment that we actually want to live in\". I actually think that before we think of making our tools for others, we have to make sure we love them ourselves! If we do that then we have already succeeded!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UEBG0NPDK",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "d2432235-481c-441e-a983-4ad72c310e49",
        "type": "message",
        "text": "<@U013HU44GLS> i was  working in Japan around the time they were running their gigantic \"5th generation computer language project\", which was for Japan one of their larger software projects (over 100 million in funding in those days would be like a 500 million now). They failed miserably because the leader of the project was too enamored of PROLOG at the level it was at, and could not see the limitations of that system as it was at that time. It didn't translate well into useful technology that they could apply in the key areas they were working in, and Japan in terms of software development was dead in the water until Playstation and Nindendo revitalized their fortunes. Today, Japan's games are among the best made. But anyway I like how you have created higher level constructs for storing knowledge, and tiered the information, and of course handling multiple machines at once, each of which can communicate with each other, is 10 times harder to program than a single machine which was all PROLOG supported.",
        "user": "UEQ6M68H0",
        "ts": "1590217610.165100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1590217686.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kj1oU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013HU44GLS"
                            },
                            {
                                "type": "text",
                                "text": " i was  working in Japan around the time they were running their gigantic \"5th generation computer language project\", which was for Japan one of their larger software projects (over 100 million in funding in those days would be like a 500 million now). They failed miserably because the leader of the project was too enamored of PROLOG at the level it was at, and could not see the limitations of that system as it was at that time. It didn't translate well into useful technology that they could apply in the key areas they were working in, and Japan in terms of software development was dead in the water until Playstation and Nindendo revitalized their fortunes. Today, Japan's games are among the best made. But anyway I like how you have created higher level constructs for storing knowledge, and tiered the information, and of course handling multiple machines at once, each of which can communicate with each other, is 10 times harder to program than a single machine which was all PROLOG supported."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900"
    },
    {
        "client_msg_id": "f5612ba4-3fdd-4d7a-8faa-463158781807",
        "type": "message",
        "text": "<@UFLN9JFRT> yes include the plug-ins because they are part of the direct system a person would use. But don't count multiple variations of the same thing. This how NPM can claim a million modules, because people have forked something and added one tiny thing, and now it is in the catalog. NPM has too many modules IMHO.",
        "user": "UEQ6M68H0",
        "ts": "1590217771.165500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "27A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFLN9JFRT"
                            },
                            {
                                "type": "text",
                                "text": " yes include the plug-ins because they are part of the direct system a person would use. But don't count multiple variations of the same thing. This how NPM can claim a million modules, because people have forked something and added one tiny thing, and now it is in the catalog. NPM has too many modules IMHO."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UFLN9JFRT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "93f835e5-3a42-4766-8609-992babd316e0",
        "type": "message",
        "text": "mutils(my shared lib)=7500\nzep(editor)=20K\nnodegraph=2K\naudio=5K\njorvik(main app)=15K\nTotal=49.5K",
        "user": "UUQ2EQW21",
        "ts": "1590219554.165800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UUQ2EQW21",
            "ts": "1590219699.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M2bL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "mutils(my shared lib)=7500\nzep(editor)=20K\nnodegraph=2K\naudio=5K\njorvik(main app)=15K\nTotal=49.5K"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900"
    },
    {
        "client_msg_id": "299ffc43-ca67-42c4-ae81-e47a4ff0071a",
        "type": "message",
        "text": "Shared/OS libraries (not mine) = 1.5Million lines of C/C++",
        "user": "UUQ2EQW21",
        "ts": "1590219639.166000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hAJ5g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Shared/OS libraries (not mine) = 1.5Million lines of C/C++"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900"
    },
    {
        "client_msg_id": "586151b9-e8cc-4de9-8a4e-930fa9c4b16e",
        "type": "message",
        "text": "... or course, I am probably using only a small proportion of those.",
        "user": "UUQ2EQW21",
        "ts": "1590219671.166200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h2+x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "... or course, I am probably using only a small proportion of those."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900"
    },
    {
        "client_msg_id": "7F0A45CA-935B-429E-969C-9BEB09F2AF9C",
        "type": "message",
        "text": "<https://einarwh.wordpress.com/2020/05/19/into-the-tar-pit/|https://einarwh.wordpress.com/2020/05/19/into-the-tar-pit/>",
        "user": "UJFN50C00",
        "ts": "1590222339.167000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "ample code",
                "service_url": "http://einarwh.wordpress.com",
                "title": "Into the Tar\u00a0Pit",
                "title_link": "https://einarwh.wordpress.com/2020/05/19/into-the-tar-pit/",
                "author_name": "Einar",
                "author_link": "https://einarwh.wordpress.com/author/einarwh/",
                "text": "I recently re-read the &ldquo;Out of the Tar Pit&rdquo; paper by Ben Moseley and Peter Marks for a Papers We Love session at work. It is a pretty famous paper. You can find it at the Papers We Love repository at GitHub for the simple reason that lots of people love it. Reading the paper again triggered some thoughts, hence this blog post.\nThe title of the paper is taken from Alan Perlis (epigram #54):\n\nBeware of the Turing tar-pit in which everything is possible but nothing of interest is easy.\nA Turing tar-pit is a language or system that is Turing complete (and so can do as much as any language or system can do) yet is cumbersome and impractical to use. The Turing machine itself is a Turing tar-pit, because you probably wouldn&rsquo;t use it at work to solve real problems. It might be amusing but not practical.\nThe implication of the title is that we are currently in a Turing tar-pit, and we need to take measures to get out of it. Specifically, the measures outlined in the paper.\nThe paper consists of two parts. The first part is an essay about the causes and effects of complexity in software. The second part is a proposed programming model to minimize so-called accidental complexity in software.\nThe argument of the paper goes like this: Complexity is the primary cause of problems in software development. Complexity is problematic because it hinders the understanding of software systems. This leads to all kinds of bad second-order effects including unreliability, security issues, late delivery and poor performance, and &ndash; in a vicious circle &ndash; compound complexity, making all the problems worse in a non-linear fashion as systems grow larger.\nFollowing Fred Brooks in &ldquo;No Silver Bullet&ldquo;, the authors distinguish between essential and accidental complexity. The authors define &ldquo;essential complexity&rdquo; as the complexity inherent in the problem seen by the users. The &ldquo;accidental complexity&rdquo; is all the rest, including everything that has to do with the mundane, practical aspects of computing.\nThe authors identify state handling, control flow and code volume as drivers of complexity. Most of this complexity is labeled &ldquo;accidental&rdquo;, since it has to do with the physical reality of the machine, not with the user&rsquo;s problem.\nThe proposed fix is to turn the user&rsquo;s informal problem statement into a formal one: to derive an executable specification. Beyond that, we should only allow for the minimal addition of &ldquo;accidental&rdquo; complexity as needed for practical efficiency concerns.\nThe authors find our current programming models inadequate because they incur too much accidental complexity. Hence a new programming model is needed, one that incurs a minimum of accidental complexity. The second part of the paper presents such a model.\nWhat struck me as I was reading the paper again was that it is wrong about the causes of complexity and naive about software development in general.\nThe paper is wrong for two reasons. First, because it treats software development as an implementation problem. It would be nice if that were true. It&rsquo;s not. We will not get much better at software development if we keep thinking that it is. Second, because it ignores the dynamics of software development and makes invalid assumptions. Specifically, it is naive about the nature of the problems we address by making software.\nI agree with the authors that complexity is a tremendous problem in software. The non-linear cumulation of complexity often threatens to make non-trivial software development efforts grind to a halt. Many software systems are not just riddled with technical debt which is the term we often use for runaway complexity &ndash; they have practically gone bankrupt! However, the problem of complexity cannot be solved by means of a better programming model alone. We must trace the causes of complexity beyond the realm of the machine and into the real world. While better programming models would be nice, we can&rsquo;t expect wonders from them. The reason is that the root cause of complexity is to be found in the strenuous relationship between the software system and the world in which it operates. This is outside the realm of programming models.\nAccording to the authors, the role of a software development team is &ldquo;to produce (using some given language and infrastructure) and maintain a software system which serves the purposes of its users&rdquo;. In other words, the role is to implement the software. The role of the user, on the other hand, is to act as oracle with respect to the problem that needs to be solved. The authors note in parenthesis that they are assuming &ldquo;that the users do in fact know and understand the problem that they want solved&rdquo;. Yet it is well-known that this assumption doesn&rsquo;t hold! Ask anyone in software! Already we&rsquo;re in trouble. How can we create an executable specification without a source for this knowledge and understanding?\nThe paper&rsquo;s analysis of the causes of complexity begins like this:\nIn any non-trivial system there is some complexity inherent in the problem that needs to be solved.\nSo clearly the problem is important. But what is it? In fact, let&rsquo;s pull the sentence &ldquo;the problem that needs to be solved&rdquo; apart a bit, by asking some questions.\nWhere did the problem come from? Who defined the problem? How is the problem articulated and communicated, by whom, to whom? Is there agreement on what the problem is? How many interpretations and formulations of the problem are there? Why this problem and not some other problem? Who are affected by this problem? Who has an interest in it?  Who owns it? Why does the problem matter? Who determined that it was a problem worth solving? Why does it need to be solved? How badly does it need to be solved? Is time relevant? Has it always been a problem? How long has this problem or similar problems existed? Could it cease to be a problem? What happens if it isn&rsquo;t solved? Is a partial solution viable? How does the problem relate to other problems, or to solutions to other problems? How often does the problem change? What does it mean for the problem to change? Will it still need solving? What forces in the real world could potentially lead to changes? How radical can we expect such changes to be?\nWe quickly see that the problem isn&rsquo;t the solution, the problem is the problem itself! How can we even begin to have illusions about how to best develop a &ldquo;solution&rdquo; to our &ldquo;problem&rdquo; without answers to at least some of these questions? The curse of software development is that we can never fully answer all of these questions, yet they are crucial to our enterprise! If we are to look for root causes of complexity in software, we must start by addressing questions such as these.\nWhen we treat the problem definition as somehow outside the scope of the software development effort, we set ourselves up for nasty surprises &ndash; and rampant complexity. As Gerald Weinberg put it in &ldquo;Are Your Lights On?&ldquo;: &ldquo;The computer field is a mother lode of problem definition lessons.&rdquo; Indeed, any ambiguity, misunderstandings, conflicts, conflict avoidance etc with respect to what the problem is will naturally come back to haunt us in the form of complexity when we try to implement a solution.\nConsider an example of actual software development by an actual organization in an actual domain: the TV streaming service offered by NRK, the national public broadcaster in Norway. It&rsquo;s where I work. What is the problem? It depends on who you ask. Who should you ask? I happen to be nearby. If you ask me, one of many developers working on the service, I might say something like &ldquo;to provide a popular, high-quality, diverse TV streaming service for the Norwegian public&rdquo;. It is immediately clear that providing such a service is not a purely techni\u2026",
                "fallback": "ample code Link: Into the Tar&nbsp;Pit",
                "from_url": "https://einarwh.wordpress.com/2020/05/19/into-the-tar-pit/",
                "service_icon": "https://s0.wp.com/i/webclip.png",
                "id": 1,
                "original_url": "https://einarwh.wordpress.com/2020/05/19/into-the-tar-pit/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zN=6e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://einarwh.wordpress.com/2020/05/19/into-the-tar-pit/",
                                "text": "https://einarwh.wordpress.com/2020/05/19/into-the-tar-pit/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "ACB1E39B-E37C-4765-B908-68C32A8D0312",
        "type": "message",
        "text": "Thoughts?",
        "user": "UJFN50C00",
        "ts": "1590222346.167400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wzO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thoughts?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590222346.167400",
        "reply_count": 7,
        "reply_users_count": 2,
        "latest_reply": "1590286931.194600",
        "reply_users": [
            "UCUSW7WVD",
            "UFB8STN7K"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "ded26495-566e-4c5d-94e7-516eb313d20c",
        "type": "message",
        "text": "Totally agreed. To quote myself from a couple of months ago:\n\n&gt; The authors' \"ideal world\" is one where computation has no cost, but social structures remain unchanged, with \"users\" having \"requirements\". But the users are all mathematical enough to want formal requirements. They don't seem to notice that the arrow in \"Informal requirements -&gt; Formal requirements\" may indicate that formal requirements are themselves accidental complexity.\n<https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580790725492100?thread_ts=1580751504.462400&amp;cid=C5T9GPWFL>",
        "user": "UCUSW7WVD",
        "ts": "1590223363.167500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1590223449.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V2l29",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Totally agreed. To quote myself from a couple of months ago:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The authors' \"ideal world\" is one where computation has no cost, but social structures remain unchanged, with \"users\" having \"requirements\". But the users are all mathematical enough to want formal requirements. They don't seem to notice that the arrow in \"Informal requirements -> Formal requirements\" may indicate that formal requirements are themselves accidental complexity."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580790725492100?thread_ts=1580751504.462400&cid=C5T9GPWFL"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590222346.167400",
        "parent_user_id": "UJFN50C00",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9c0afca0-0009-44e3-acfb-cbfcd3e3dcb4",
        "type": "message",
        "text": "<@U6FKVSVCK> said:\n&gt; The most difficult part of programming\u2014\u00a0mental simulation of invisible processes\u2014\u00a0is not really fixed by making the program into plain English. I'd hypothesize that an unambiguous notation is actually an aid to mental simulation, not a hindrance (it removes some guessing/degrees of freedom about what the computer might be thinking).\nI totally agree. With ambiguous systems based on natural language programming, there is a new source of complexity: for some task it can be tricky to find/guess the sentence that will make the compiler produce the behavior that you want. And maybe one compiler will \"choose\" one behavior that will be different than the one chosen by an other compiler. We only have this kind of problem with \"unambiguous\" languages where some compilers/interpreters behave differently on some parts of some standard (like C or JavaScript).",
        "user": "UJ6LDMMN0",
        "ts": "1590229057.169000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W5R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U6FKVSVCK"
                            },
                            {
                                "type": "text",
                                "text": " said:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The most difficult part of programming\u2014\u00a0mental simulation of invisible processes\u2014\u00a0is not really fixed by making the program into plain English. I'd hypothesize that an unambiguous notation is actually an aid to mental simulation, not a hindrance (it removes some guessing/degrees of freedom about what the computer might be thinking)."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I totally agree. With ambiguous systems based on natural language programming, there is a new source of complexity: for some task it can be tricky to find/guess the sentence that will make the compiler produce the behavior that you want. And maybe one compiler will \"choose\" one behavior that will be different than the one chosen by an other compiler. We only have this kind of problem with \"unambiguous\" languages where some compilers/interpreters behave differently on some parts of some standard (like C or JavaScript)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "96d6106b-1e47-4587-bddf-04950dc9204e",
        "type": "message",
        "text": "I think that's true to an extent. I occasionally \"resort\" to mathematical style notation when English is getting clumsy - i.e. added brackets or using set notation. This is most common in reading legalese. I genuinely believe laws would be more approachable if written in pseudo-code.\n\nI think this is rare though. Natural language is normally unambiguous. It's more common to see, for example, natural language comments elucidating a piece of code. These two sentences convey essentially exactly the same semantic information;\n1. Copy the value of the 'eax' register into the 'eab' register\n2. mov ebx eax\nBut #1 is much easier to understand. There's no reason that assembly code should *necessarily* be written like #2 and not like #1",
        "user": "UDQBTJ211",
        "ts": "1590231147.169200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UDQBTJ211",
            "ts": "1590231230.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bCx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think that's true to an extent. I occasionally \"resort\" to mathematical style notation when English is getting clumsy - i.e. added brackets or using set notation. This is most common in reading legalese. I genuinely believe laws would be more approachable if written in pseudo-code.\n\nI think this is rare though. Natural language is normally unambiguous. It's more common to see, for example, natural language comments elucidating a piece of code. These two sentences convey essentially exactly the same semantic information;\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Copy the value of the 'eax' register into the 'eab' register"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "mov ebx eax"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nBut #1 is much easier to understand. There's no reason that assembly code should "
                            },
                            {
                                "type": "text",
                                "text": "necessarily",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " be written like #2 and not like #1"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK",
        "reactions": [
            {
                "name": "point_up::skin-tone-3",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "eb56a80a-f4b7-4b4d-8a63-fae5d181983d",
        "type": "message",
        "text": "Obviously the program that can take #2-style code and produce binary is much simpler to implement than a program that can take #1-style code and produce binary",
        "user": "UDQBTJ211",
        "ts": "1590231382.169600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tl/dn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Obviously the program that can take #2-style code and produce binary is much simpler to implement than a program that can take #1-style code and produce binary"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "1288a98b-5eb0-481d-b66b-43c2ac700d03",
        "type": "message",
        "text": "e.g, just picking one of the first Google results for learning x86 - <https://www.cs.virginia.edu/~evans/cs216/guides/x86.html> - in every case it shows the assembly code on the left, and then a plain English explanation of the command on the right. Is it beyond our technical capability to build an assembler that takes the stuff _on the right_, instead of the stuff on the left? No, obviously not.\n\nTo get something like \"do my taxes\" to execute on a processor, we have to somehow translate \"do my taxes\" into a series of processor instructions that can be physically realised. This is like \"essential compilation\". Every stage of this process can perfectly well be described unambigously in natural language.\n\nSeparately to this, there might be an essentially arbitrary set of \"compilation\" between different programming languages.",
        "user": "UDQBTJ211",
        "ts": "1590231923.169800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UDQBTJ211",
            "ts": "1590232048.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dsK1P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "e.g, just picking one of the first Google results for learning x86 - "
                            },
                            {
                                "type": "link",
                                "url": "https://www.cs.virginia.edu/~evans/cs216/guides/x86.html"
                            },
                            {
                                "type": "text",
                                "text": " - in every case it shows the assembly code on the left, and then a plain English explanation of the command on the right. Is it beyond our technical capability to build an assembler that takes the stuff "
                            },
                            {
                                "type": "text",
                                "text": "on the right",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", instead of the stuff on the left? No, obviously not.\n\nTo get something like \"do my taxes\" to execute on a processor, we have to somehow translate \"do my taxes\" into a series of processor instructions that can be physically realised. This is like \"essential compilation\". Every stage of this process can perfectly well be described unambigously in natural language.\n\nSeparately to this, there might be an essentially arbitrary set of \"compilation\" between different programming languages."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590075796.025100",
        "parent_user_id": "UEBG0NPDK",
        "reactions": [
            {
                "name": "point_up::skin-tone-3",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "A9248724-06A1-4855-8B71-9E91B95AAD0E",
        "type": "message",
        "text": "<@UEQ6M68H0> I guess I wouldn\u2019t even know how to count all the lines including components. I think for me the real metric of the system is how much the core components change over time as you find new use cases. I think the yazz pilot core changes less and less every month and the data structures are pretty static (tables in SQLite) . Maybe this should be a discussion about how each project is architected instead?",
        "user": "UFLN9JFRT",
        "ts": "1590234079.174000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6pT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " I guess I wouldn\u2019t even know how to count all the lines including components. I think for me the real metric of the system is how much the core components change over time as you find new use cases. I think the yazz pilot core changes less and less every month and the data structures are pretty static (tables in SQLite) . Maybe this should be a discussion about how each project is architected instead?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900"
    },
    {
        "client_msg_id": "432920CF-4021-4AB8-B347-37B5AE76BF4C",
        "type": "message",
        "text": "Also interesting is that Chris Grangers light table inspired Swift as well",
        "user": "UFLN9JFRT",
        "ts": "1590234171.174900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "43DDQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also interesting is that Chris Grangers light table inspired Swift as well"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588464075.440000",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "18F75058-9CCC-47D6-8BE4-B8869894E43F",
        "type": "message",
        "text": "Interesting! Source / context?",
        "user": "UC2A2ARPT",
        "ts": "1590236915.177100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ucqRb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting! Source / context?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588464075.440000",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "ec57c74b-a2ae-4002-872b-9156db736ce3",
        "type": "message",
        "text": "<@UFLN9JFRT> <https://github.com/AlDanial/cloc>",
        "user": "UUQ2EQW21",
        "ts": "1590239914.177500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UUQ2EQW21",
            "ts": "1590239924.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tgGns",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFLN9JFRT"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/AlDanial/cloc"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900"
    },
    {
        "client_msg_id": "ea7a9bc0-71d5-4617-92de-3329f6685935",
        "type": "message",
        "text": "Agreed though, lines of code is just a 'how much of my personal time have I spent/wasted on this project' kind of metric :wink:",
        "user": "UUQ2EQW21",
        "ts": "1590239967.177900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4b+in",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Agreed though, lines of code is just a 'how much of my personal time have I spent/wasted on this project' kind of metric "
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6EF87F01-5921-43D6-9F33-FC69CB5FE26C",
        "type": "message",
        "text": "<@UUQ2EQW21> thanks I\u2019ll try that tool later. I hope it works on nodejs with dynamically loaded code though. ",
        "user": "UFLN9JFRT",
        "ts": "1590243836.180300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "piL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UUQ2EQW21"
                            },
                            {
                                "type": "text",
                                "text": " thanks I\u2019ll try that tool later. I hope it works on nodejs with dynamically loaded code though. "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900"
    },
    {
        "client_msg_id": "B32508C1-F501-42F5-977E-D822E2FF386A",
        "type": "message",
        "text": "Also I view lines of code as a double edged sword. On the one hand they are like adding kgs of weight to an airplane. But on the other hand if they are essential complexity (like a jet Engine) then they are useful. So I a always trying to slim down yazz Pilot, and now really scared too, as it may be like 50000 loc ",
        "user": "UFLN9JFRT",
        "ts": "1590244009.184900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=MEc5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also I view lines of code as a double edged sword. On the one hand they are like adding kgs of weight to an airplane. But on the other hand if they are essential complexity (like a jet Engine) then they are useful. So I a always trying to slim down yazz Pilot, and now really scared too, as it may be like 50000 loc "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900"
    },
    {
        "client_msg_id": "740B7B67-7883-4310-8C64-5DB9A5DE6687",
        "type": "message",
        "text": "<@U8A5MS6R1> yeah I think the language of he future will be tuple space based ",
        "user": "UFLN9JFRT",
        "ts": "1590246751.186400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8+x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " yeah I think the language of he future will be tuple space based "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586375831.197700",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "ED2D7441-A3A0-4F8C-9AFB-B2CD4EB069D9",
        "type": "message",
        "text": "<https://www.theatlantic.com/technology/archive/2017/09/saving-the-world-from-code/540393/|https://www.theatlantic.com/technology/archive/2017/09/saving-the-world-from-code/540393/>",
        "user": "UFLN9JFRT",
        "ts": "1590246837.186700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "The Atlantic",
                "title": "The Coming Software Apocalypse",
                "title_link": "https://www.theatlantic.com/technology/archive/2017/09/saving-the-world-from-code/540393/",
                "text": "A small group of programmers wants to change how we code\u2014before catastrophe strikes.",
                "fallback": "The Atlantic: The Coming Software Apocalypse",
                "image_url": "https://cdn.theatlantic.com/thumbor/CNRiy52yTNSNXiUlVgj4myrF-F0=/0x187:1997x1227/960x500/filters:format(png)/media/img/mt/2017/09/TheAtlantic_CodeFinal3/original.png",
                "from_url": "https://www.theatlantic.com/technology/archive/2017/09/saving-the-world-from-code/540393/",
                "image_width": 480,
                "image_height": 250,
                "image_bytes": 718186,
                "service_icon": "https://cdn.theatlantic.com/assets/static/b/theatlantic/img/lacroix/apple-touch-icon-iphone.50541ad29f2c.png",
                "id": 1,
                "original_url": "https://www.theatlantic.com/technology/archive/2017/09/saving-the-world-from-code/540393/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dSZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.theatlantic.com/technology/archive/2017/09/saving-the-world-from-code/540393/",
                                "text": "https://www.theatlantic.com/technology/archive/2017/09/saving-the-world-from-code/540393/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588464075.440000",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "CCE31DED-0B95-4DA6-8BE6-4AD254153B40",
        "type": "message",
        "text": "But really , depends what you mean by monetize. If you mean direct sales then yazz Pilot has generated 0 dollars. I generally do solution sales where we sell a solution and the customer doesn\u2019t care how it was implemented . It just happens that yazz let us deliver something that wasn\u2019t possible with other tech ",
        "user": "UFLN9JFRT",
        "ts": "1590247084.190600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2mox",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But really , depends what you mean by monetize. If you mean direct sales then yazz Pilot has generated 0 dollars. I generally do solution sales where we sell a solution and the customer doesn\u2019t care how it was implemented . It just happens that yazz let us deliver something that wasn\u2019t possible with other tech "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590081535.029500",
        "parent_user_id": "UA8HY8R7B"
    },
    {
        "client_msg_id": "b241dcec-e056-4089-a41e-3d9c6143c776",
        "type": "message",
        "text": "<@UEQ6M68H0> Japan's 5th generation is legendary even if ill-fated! It must have been something to see it happen (that was just before my time).",
        "user": "U013HU44GLS",
        "ts": "1590250901.190900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iMNvG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " Japan's 5th generation is legendary even if ill-fated! It must have been something to see it happen (that was just before my time)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590185757.151900"
    },
    {
        "client_msg_id": "c8574b4f-7483-4f62-b9cd-733b4041380d",
        "type": "message",
        "text": "I think your critique as valid insofar as the \u201cOut of the Tar Pit\u201d authors oversimplify the nature of software development and sources of complexity. But I don\u2019t think the big ideas in the paper require having a complete problem specification. A more charitable interpretation might be: they start with a basic model of software development and its problems.\n\nLike all models, it\u2019s wrong, but it still usefully describes a subset of realistic situations. In those situations, the techniques the authors promote could help reduce complexity.",
        "user": "UFB8STN7K",
        "ts": "1590269494.191300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wg7c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think your critique as valid insofar as the \u201cOut of the Tar Pit\u201d authors oversimplify the nature of software development and sources of complexity. But I don\u2019t think the big ideas in the paper require having a complete problem specification. A more charitable interpretation might be: they start with a basic model of software development and its problems.\n\nLike all models, it\u2019s wrong, but it still usefully describes a subset of realistic situations. In those situations, the techniques the authors promote could help reduce complexity."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590222346.167400",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "4340f2e3-eb95-4d8b-a265-b99250c2e309",
        "type": "message",
        "text": "A really great example of this is high performance image processing. For a long time, writing gnarly C++ and vector intrinsics was the only way to go. And this meant a lot of mistakes, challenging optimization, so on. Then someone came up with a clean way of separating the algorithm from the hardware implementation, and now every Android phone in the world runs Halide (<https://halide-lang.org/>).",
        "user": "UFB8STN7K",
        "ts": "1590269571.191500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Qrc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A really great example of this is high performance image processing. For a long time, writing gnarly C++ and vector intrinsics was the only way to go. And this meant a lot of mistakes, challenging optimization, so on. Then someone came up with a clean way of separating the algorithm from the hardware implementation, and now every Android phone in the world runs Halide ("
                            },
                            {
                                "type": "link",
                                "url": "https://halide-lang.org/"
                            },
                            {
                                "type": "text",
                                "text": ")."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590222346.167400",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "80371c65-2e39-438e-a641-8e17dd3f186f",
        "type": "message",
        "text": "There\u2019s a great paper in sociology called \u201cFuck Nuance\u201d, which is about how researchers often point out how others\u2019 models have one small flaw or another. But the author argues that these critiques often miss the broader value of the models. <https://journals.sagepub.com/doi/pdf/10.1177/0735275117709046>",
        "user": "UFB8STN7K",
        "ts": "1590269731.191800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFB8STN7K",
            "ts": "1590269739.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P3D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There\u2019s a great paper in sociology called \u201cFuck Nuance\u201d, which is about how researchers often point out how others\u2019 models have one small flaw or another. But the author argues that these critiques often miss the broader value of the models. "
                            },
                            {
                                "type": "link",
                                "url": "https://journals.sagepub.com/doi/pdf/10.1177/0735275117709046"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590222346.167400",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "54311068-b711-44ad-a4a5-1a34a3f0550e",
        "type": "message",
        "text": "Yup, Workflowy",
        "user": "UFEQUBNNT",
        "ts": "1590270930.192200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K8Tk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yup, Workflowy"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590201385.159800",
        "parent_user_id": "U0143PC0UTC"
    },
    {
        "client_msg_id": "62e5caad-d4f3-43fa-a70f-133387cee3c9",
        "type": "message",
        "text": "Discussion starts at 15:21 of <https://futureofcoding.org/episodes/003|ep 3>",
        "user": "UFEQUBNNT",
        "ts": "1590270993.192400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFEQUBNNT",
            "ts": "1590271006.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=wWe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Discussion starts at 15:21 of "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.org/episodes/003",
                                "text": "ep 3"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590201385.159800",
        "parent_user_id": "U0143PC0UTC"
    }
]