[
    {
        "client_msg_id": "6b0b1ddd-5036-4486-b7f2-f67239c6a2ff",
        "type": "message",
        "text": "I guess my point is: it sounds like you want a reactive database.",
        "user": "UT9TWSZB5",
        "ts": "1589072688.290300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UT9TWSZB5",
            "ts": "1589072700.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ClX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I guess my point is: it sounds like you want a reactive database."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588994003.263900",
        "parent_user_id": "UD6EXQVM0"
    },
    {
        "client_msg_id": "B2117EA5-A9FF-40D4-AB1B-6CBBFA898A03",
        "type": "message",
        "text": "I\u2019m finally reaching the end of the podcast episode about the community survey results and heard the suggestion for a \u201cbook club\u201d where the books are FoC prototypes. Um\u2026 yes please?? Is anybody already organizing such a thing?\n\nI ran a mass in-person user study of my JavaScript debugger Theseus in the form of a class to teach JavaScript, and though I mostly remember the bugs and technical gotchas of installing my largely untested software on many stranger\u2019s machines, it also led to incredible discussion and muuuuch better documentation, and I\u2019d do it again in a heartbeat.",
        "user": "UFEQUBNNT",
        "ts": "1589072792.292000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFEQUBNNT",
            "ts": "1589072843.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CfW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019m finally reaching the end of the podcast episode about the community survey results and heard the suggestion for a \u201cbook club\u201d where the books are FoC prototypes. Um\u2026 yes please?? Is anybody already organizing such a thing?\n\nI ran a mass in-person user study of my JavaScript debugger Theseus in the form of a class to teach JavaScript, and though I mostly remember the bugs and technical gotchas of installing my largely untested software on many stranger\u2019s machines, it also led to incredible discussion and muuuuch better documentation, and I\u2019d do it again in a heartbeat."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589072792.292000",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1589145068.299800",
        "reply_users": [
            "UD31LGQKB",
            "UDQBTJ211",
            "UFEQUBNNT"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJN1TAYEQ",
                    "UFQQ3P867",
                    "UBSMEUXAA"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "7840f443-6585-401e-b5f4-51a673f110c3",
        "type": "message",
        "text": "In general it is not easy to make controls bidirectional. There are host of ergonomic decisions that are asymmetrical, and I don't believe any general system could handle a wide range of widgets. I just posted a dual simultaneous temperature control sample, where you can set the temp any of two ways, and it feeds back to the model which then automatically re-renders the widges. But you still have to manually code how you want the cursor to behave, and the scaling factors for the mouse, and how you want to clip movement. User input is rather different than rendering  a control. It is good however, to try an make things as bidirectional as possible, as it would save a ton of code.",
        "user": "UEQ6M68H0",
        "ts": "1589079232.292300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m=H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In general it is not easy to make controls bidirectional. There are host of ergonomic decisions that are asymmetrical, and I don't believe any general system could handle a wide range of widgets. I just posted a dual simultaneous temperature control sample, where you can set the temp any of two ways, and it feeds back to the model which then automatically re-renders the widges. But you still have to manually code how you want the cursor to behave, and the scaling factors for the mouse, and how you want to clip movement. User input is rather different than rendering  a control. It is good however, to try an make things as bidirectional as possible, as it would save a ton of code."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588994003.263900",
        "parent_user_id": "UD6EXQVM0"
    },
    {
        "client_msg_id": "99d96bb8-5540-4754-b6e0-734b371da427",
        "type": "message",
        "text": "<https://github.com/TimelyDataflow/differential-dataflow/> is state of the art, although the UX can be iffy if you aren't up to speed with Rust.\n\n<https://opensource.janestreet.com/incremental/> is also good. It can handle updates to nested collections, unlike differential, but can't easily handle maintenance of nested loops.\n\nI wrote a bit about applying similar ideas to UI - <https://scattered-thoughts.net/writing/relational-ui/> - and a friend of mine is building something in the same family for javascript/react, not sure how mature it is yet - <https://datalogui.dev/>\n\nI'm also working on a language that is designed to be efficiently incrementally maintained, although I haven't actually mapped it to the incremental layer yet - <https://scattered-thoughts.net/writing/imp-intro/>",
        "user": "U71PMQ1V0",
        "ts": "1589082857.292500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U71PMQ1V0",
            "ts": "1589082894.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CFN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://github.com/TimelyDataflow/differential-dataflow/"
                            },
                            {
                                "type": "text",
                                "text": " is state of the art, although the UX can be iffy if you aren't up to speed with Rust.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://opensource.janestreet.com/incremental/"
                            },
                            {
                                "type": "text",
                                "text": " is also good. It can handle updates to nested collections, unlike differential, but can't easily handle maintenance of nested loops.\n\nI wrote a bit about applying similar ideas to UI - "
                            },
                            {
                                "type": "link",
                                "url": "https://scattered-thoughts.net/writing/relational-ui/"
                            },
                            {
                                "type": "text",
                                "text": " - and a friend of mine is building something in the same family for javascript/react, not sure how mature it is yet - "
                            },
                            {
                                "type": "link",
                                "url": "https://datalogui.dev/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI'm also working on a language that is designed to be efficiently incrementally maintained, although I haven't actually mapped it to the incremental layer yet - "
                            },
                            {
                                "type": "link",
                                "url": "https://scattered-thoughts.net/writing/imp-intro/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588994003.263900",
        "parent_user_id": "UD6EXQVM0",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "88b92b0c-90ab-4c3e-b7e1-f1f0cd16393c",
        "type": "message",
        "text": "I also did a bunch of work for <http://materialize.io|materialize.io> which is a proprietary SQL database that compiles down to differential dataflow. There's some interesting stuff on the blog about eg incremental maintenance on non-abelian aggregates.",
        "user": "U71PMQ1V0",
        "ts": "1589082986.292900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jJ7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also did a bunch of work for "
                            },
                            {
                                "type": "link",
                                "url": "http://materialize.io",
                                "text": "materialize.io"
                            },
                            {
                                "type": "text",
                                "text": " which is a proprietary SQL database that compiles down to differential dataflow. There's some interesting stuff on the blog about eg incremental maintenance on non-abelian aggregates."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588994003.263900",
        "parent_user_id": "UD6EXQVM0",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c7d1bce7-9204-4605-b2a7-2db3ac2c4269",
        "type": "message",
        "text": "<@UD6EXQVM0> You're not actually looking for bidirectionality, are you? That seems like an additional wrinkle introduced by Doug Moen.\n\nIn the case of unidirectionality, you'd have some function responsible for insertion into the large list. That function also runs the filter on each newly inserted item, and if an item passes the filter, add it to the filtered list too. If you're doing this in terms of some reactive library, the library should (caveat emptor) be smart enough to not re-filter the entire list on every change, and instead just apply the filter to new items.\n\nTo batch together rapid updates, you'd want a debounce or a throttle \u2014\u00a0high likelihood your reactive library of choice has those. Otherwise, you can just roll this yourself \u2014\u00a0you just need _some_ way to schedule code to run after a certain amount of time has passed, and a place to store some intermediate state.\n\nAs for recalculating the projection, mapping should be just as easy as filtering \u2014\u00a0just do it to each new item as it comes in. Again, all the Rx libraries I've seen are smart about this.\n\nFinally, for reducing, efficiency will depend on the properties of the operation: is it associative? Commutative? Approximate? Can you build a small intermediate result that's easy to incrementally modify and recompute? Etc. This talk gives a nice summary of some good strategies: <https://www.infoq.com/presentations/abstract-algebra-analytics/>\n\nIt's entirely possible I'm missing details that make this problem far harder than I'm imagining. But I feel like I've done this exact thing a handful of times, both with an without reactive libraries, so hopefully this helps somewhat.\n\nOne more bonus link \u2014 all the features you've asked for are documented visually/interactively here: <https://rxmarbles.com/>",
        "user": "UC2A2ARPT",
        "ts": "1589084581.293100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1589086885.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m0j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UD6EXQVM0"
                            },
                            {
                                "type": "text",
                                "text": " You're not actually looking for bidirectionality, are you? That seems like an additional wrinkle introduced by Doug Moen.\n\nIn the case of unidirectionality, you'd have some function responsible for insertion into the large list. That function also runs the filter on each newly inserted item, and if an item passes the filter, add it to the filtered list too. If you're doing this in terms of some reactive library, the library should (caveat emptor) be smart enough to not re-filter the entire list on every change, and instead just apply the filter to new items.\n\nTo batch together rapid updates, you'd want a debounce or a throttle \u2014\u00a0high likelihood your reactive library of choice has those. Otherwise, you can just roll this yourself \u2014\u00a0you just need "
                            },
                            {
                                "type": "text",
                                "text": "some",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " way to schedule code to run after a certain amount of time has passed, and a place to store some intermediate state.\n\nAs for recalculating the projection, mapping should be just as easy as filtering \u2014\u00a0just do it to each new item as it comes in. Again, all the Rx libraries I've seen are smart about this.\n\nFinally, for reducing, efficiency will depend on the properties of the operation: is it associative? Commutative? Approximate? Can you build a small intermediate result that's easy to incrementally modify and recompute? Etc. This talk gives a nice summary of some good strategies: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.infoq.com/presentations/abstract-algebra-analytics/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIt's entirely possible I'm missing details that make this problem far harder than I'm imagining. But I feel like I've done this exact thing a handful of times, both with an without reactive libraries, so hopefully this helps somewhat.\n\nOne more bonus link \u2014 all the features you've asked for are documented visually/interactively here: "
                            },
                            {
                                "type": "link",
                                "url": "https://rxmarbles.com/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588994003.263900",
        "parent_user_id": "UD6EXQVM0",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "85071fc0-8ffb-4e59-a890-4e981a127d3a",
        "type": "message",
        "text": "I made the suggestion, and I've slowly been working up a reading list which is very specically scope-limited to the structured editing microcosm. Ive been wrestling a bit with the issue of coordinating what I assume will be a sequence of baroque set-up processes around the non-web-facing projects. In that sense it might inevitably become more of a support group than a book club...",
        "user": "UD31LGQKB",
        "ts": "1589097838.295100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9hGZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I made the suggestion, and I've slowly been working up a reading list which is very specically scope-limited to the structured editing microcosm. Ive been wrestling a bit with the issue of coordinating what I assume will be a sequence of baroque set-up processes around the non-web-facing projects. In that sense it might inevitably become more of a support group than a book club..."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589072792.292000",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "6ebeeef6-c933-417e-bafa-bb591b8c0538",
        "type": "message",
        "text": "Could you upload a ready to go VM to Google Drive or something?",
        "user": "UDQBTJ211",
        "ts": "1589110806.295500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OOtw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Could you upload a ready to go VM to Google Drive or something?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589072792.292000",
        "parent_user_id": "UFEQUBNNT",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3e1626ff-2649-488f-90cd-072b115d95a7",
        "type": "message",
        "text": "Associative? Commutative? Approximate? \u2014 In other words, qualities of the kind of aggregation make the difference.  Filtering, though a special kind of aggregation, can be easy to recalculate or hard depending.",
        "user": "UA14TGLTC",
        "ts": "1589112214.295900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FmM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Associative? Commutative? Approximate? \u2014 In other words, qualities of the kind of aggregation make the difference.  Filtering, though a special kind of aggregation, can be easy to recalculate or hard depending."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588994003.263900",
        "parent_user_id": "UD6EXQVM0"
    },
    {
        "client_msg_id": "4077150f-5a0e-48aa-b39f-9de7fdf6110c",
        "type": "message",
        "text": "Nice block based environment for building simulations <https://github.com/EiichiroIto/NovaStelo|https://github.com/EiichiroIto/NovaStelo>",
        "user": "UBSMEUXAA",
        "ts": "1589136449.297600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "EiichiroIto/NovaStelo",
                "text": "Block-style programming environment for multi agent system, based on MIT Scratch.",
                "title": "EiichiroIto/NovaStelo",
                "footer": "<https://github.com/EiichiroIto/NovaStelo|EiichiroIto/NovaStelo>",
                "id": 1,
                "footer_icon": "https://github.githubassets.com/favicon.ico",
                "ts": 1576222960,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Stars",
                        "value": "20",
                        "short": true
                    },
                    {
                        "title": "Language",
                        "value": "Smalltalk",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https://github.com/EiichiroIto/NovaStelo",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dST",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nice block based environment for building simulations "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/EiichiroIto/NovaStelo",
                                "text": "https://github.com/EiichiroIto/NovaStelo"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589136449.297600",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1589178206.319100",
        "reply_users": [
            "UBSMEUXAA",
            "UA14TGLTC"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "f64bea15-b59e-4904-b250-b40848e9eab9",
        "type": "message",
        "text": "It reminds me a lot of the work I was doing at Facebook for Horizon",
        "user": "UBSMEUXAA",
        "ts": "1589136474.297800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R6jEd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It reminds me a lot of the work I was doing at Facebook for Horizon"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589136449.297600",
        "parent_user_id": "UBSMEUXAA"
    },
    {
        "client_msg_id": "6ff918cf-777c-4500-a6e0-ed590812eaed",
        "type": "message",
        "text": "Scientific results are usually more reliable than the code that produced them.    This seems like a paradox, but it relates to code being a model that is just one input to the process of understanding.",
        "user": "UNS7QDKFV",
        "ts": "1589138228.298300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7poB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Scientific results are usually more reliable than the code that produced them.    This seems like a paradox, but it relates to code being a model that is just one input to the process of understanding."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588877031.220900",
        "parent_user_id": "UDQBTJ211",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "A0B1BAC6-CA9D-41AC-8E6B-E554F2299887",
        "type": "message",
        "text": "<http://a9.io/glue-comic/|http://a9.io/glue-comic/> - bravo <@UFQQ3P867> ",
        "user": "USH01JEDQ",
        "ts": "1589138871.298600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "USH01JEDQ",
            "ts": "1589141327.000000"
        },
        "attachments": [
            {
                "title": "Chapter 1",
                "title_link": "http://a9.io/glue-comic/",
                "text": "Cognitive Tools for Augmented Conversation",
                "fallback": "Chapter 1",
                "image_url": "https://a9.io/glue-comic/static/cover-f30358d0b44f23cb6d8a4d32570c4b80.png",
                "image_width": 476,
                "image_height": 250,
                "from_url": "http://a9.io/glue-comic/",
                "image_bytes": 110019,
                "service_icon": "http://a9.io/glue-comic/icons/icon-48x48.png?v=169a48dabf6eab071a5155e37f30319d",
                "service_name": "a9.io",
                "id": 1,
                "original_url": "http://a9.io/glue-comic/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "004Bv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http://a9.io/glue-comic/",
                                "text": "http://a9.io/glue-comic/"
                            },
                            {
                                "type": "text",
                                "text": " - bravo "
                            },
                            {
                                "type": "user",
                                "user_id": "UFQQ3P867"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589138871.298600",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1589141384.299200",
        "reply_users": [
            "UFQQ3P867"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFQQ3P867",
                    "UGLSY9X3J",
                    "UCUSW7WVD",
                    "UD31LGQKB"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "a8eee51e-350a-4bb4-a40e-efb35bf2a402",
        "type": "message",
        "text": "thanks! Props to everyone else in the Convivial computing salon and those who made it possible :) <@U6KQ2S410> <@UEJ1GP4G6>",
        "user": "UFQQ3P867",
        "ts": "1589141384.299200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zdDV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "thanks! Props to everyone else in the Convivial computing salon and those who made it possible :) "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UEJ1GP4G6"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589138871.298600",
        "parent_user_id": "USH01JEDQ"
    },
    {
        "client_msg_id": "d0f4d8bd-e09f-4d6e-925a-3112dff50345",
        "type": "message",
        "text": "Let us know if you need anything!",
        "user": "UFEQUBNNT",
        "ts": "1589145068.299800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lart",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Let us know if you need anything!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589072792.292000",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "fddb00b8-ec0d-4cfd-bc07-35ae24b581b2",
        "type": "message",
        "text": "Or the code is a measurement of a model (or of a model of a model). The measurement can be approximate or noisy while still confirming the clarity of the fundamental model. Consider Newtonian mechanics (a clear, but imperfect, symbolic model of nature) vs observations of the motions of planets (noisy) vs a miniature-scale physical model (approximate).\n\nGood science can be built of rough data and imprecise recreation. Good science also doesn't need to be perfectly predictive, just _helpfully_ predictive.",
        "user": "UC2A2ARPT",
        "ts": "1589147466.300200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1589167857.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I/1Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Or the code is a measurement of a model (or of a model of a model). The measurement can be approximate or noisy while still confirming the clarity of the fundamental model. Consider Newtonian mechanics (a clear, but imperfect, symbolic model of nature) vs observations of the motions of planets (noisy) vs a miniature-scale physical model (approximate).\n\nGood science can be built of rough data and imprecise recreation. Good science also doesn't need to be perfectly predictive, just "
                            },
                            {
                                "type": "text",
                                "text": "helpfully",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " predictive."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588877031.220900",
        "parent_user_id": "UDQBTJ211"
    }
]