[
    {
        "client_msg_id": "047AE186-E757-40E6-B827-F21F35E213D7",
        "type": "message",
        "text": "It\u2019s literally $path. :) When you execute text *anywhere* in the UI, if it\u2019s not a built-in command, it shells out, setting environment variables in the child process containing the ID and file path of the current window. stdin and stdout are mapped to the current selection depending on context, and the window ID can be used to connect to the Acme instance for more invasive manipulation, like managing windows or listening for events.",
        "user": "UFEQUBNNT",
        "ts": "1589754773.453200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFEQUBNNT",
            "ts": "1589755019.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SdZyF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It\u2019s literally $path. :) When you execute text "
                            },
                            {
                                "type": "text",
                                "text": "anywhere",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in the UI, if it\u2019s not a built-in command, it shells out, setting environment variables in the child process containing the ID and file path of the current window. stdin and stdout are mapped to the current selection depending on context, and the window ID can be used to connect to the Acme instance for more invasive manipulation, like managing windows or listening for events."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589664272.431900",
        "parent_user_id": "UE0ETTCG7",
        "reactions": [
            {
                "name": "pray",
                "users": [
                    "UE0ETTCG7",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "866e89d6-9c5d-4665-8192-2339d814f4c1",
        "type": "message",
        "text": "De Bruijn Notation is worth cataloguing and publicizing, just because it lets you visualize and think about lambda functions in a different way (by pushing around and pairing up \"wagons\"). Not to be confused with De Bruijn Indices.\n<https://en.wikipedia.org/wiki/De_Bruijn_notation>",
        "user": "UJN1TAYEQ",
        "ts": "1589755016.454900",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "De Bruijn notation",
                "title_link": "https://en.wikipedia.org/wiki/De_Bruijn_notation",
                "from_url": "https://en.wikipedia.org/wiki/De_Bruijn_notation",
                "author_name": "Wikipedia",
                "author_link": "https://en.wikipedia.org/",
                "text": "In mathematical logic, the De Bruijn notation is a syntax for terms in the \u03bb calculus invented by the Dutch mathematician Nicolaas Govert de Bruijn. It can be seen as a reversal of the usual syntax for the \u03bb calculus where the argument in an application is placed next to its corresponding binder in the function instead of after the latter's body.",
                "fallback": "wikipedia: De Bruijn notation",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png",
                "id": 1,
                "original_url": "https://en.wikipedia.org/wiki/De_Bruijn_notation"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jsVS7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "De Bruijn Notation is worth cataloguing and publicizing, just because it lets you visualize and think about lambda functions in a different way (by pushing around and pairing up \"wagons\"). Not to be confused with De Bruijn Indices.\n"
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/De_Bruijn_notation"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589748817.440800",
        "parent_user_id": "UDKTZSD6H",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFQQ3P867",
                    "UDKTZSD6H"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "9abef6de-3423-410b-9897-d3d45c4ba458",
        "type": "message",
        "text": "That\u2019s the first time I\u2019m coming across it. Let me take a look.",
        "user": "UDKTZSD6H",
        "ts": "1589792138.456800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fZ/8i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That\u2019s the first time I\u2019m coming across it. Let me take a look."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589748817.440800",
        "parent_user_id": "UDKTZSD6H"
    },
    {
        "client_msg_id": "49de69e3-6071-402e-867f-3649e57be913",
        "type": "message",
        "text": "Not sure this counts. It's a visualization of the reduction steps <https://redexer.maxhallinan.com/>",
        "user": "UD6V09AQ4",
        "ts": "1589814472.457100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9r=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure this counts. It's a visualization of the reduction steps "
                            },
                            {
                                "type": "link",
                                "url": "https://redexer.maxhallinan.com/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589748817.440800",
        "parent_user_id": "UDKTZSD6H",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFQQ3P867",
                    "UDKTZSD6H"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "6438f52e-40c9-4a80-b068-6af1a601559b",
        "type": "message",
        "text": "The DAG approach to scheduling may be related to lucid synchrone/lustre. I\u2019m not sure, I\u2019ve only worked with lucid, which is a predecessor that doesn\u2019t have the idea of real-time, but is a dataflow language where each step is based on updating values from the previous step.",
        "user": "UKJGU23KP",
        "ts": "1589821870.457500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mt6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The DAG approach to scheduling may be related to lucid synchrone/lustre. I\u2019m not sure, I\u2019ve only worked with lucid, which is a predecessor that doesn\u2019t have the idea of real-time, but is a dataflow language where each step is based on updating values from the previous step."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589265827.352600",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "06e0bb46-dca9-4fe4-bf23-6088dc6fc628",
        "type": "message",
        "text": "in a similar vein as the above tool: <https://chrisuehlinger.com/LambdaBubblePop/>",
        "user": "UFB8STN7K",
        "ts": "1589831593.458300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RvLS3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in a similar vein as the above tool: "
                            },
                            {
                                "type": "link",
                                "url": "https://chrisuehlinger.com/LambdaBubblePop/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589748817.440800",
        "parent_user_id": "UDKTZSD6H",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UDKTZSD6H"
                ],
                "count": 1
            }
        ]
    }
]