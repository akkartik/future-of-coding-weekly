[
    {
        "client_msg_id": "399c267a-7b67-44b4-8a11-65699fffb125",
        "type": "message",
        "text": "Here is a follow up on the Beads layout system. Beads has a very unique layout system that is slightly more advanced than the Apple struts and springs system used in XCode.  You design your layout by starting with the full screen rectangle, and subdividing it into pieces. Each chunk can be further subdivided. It has pre-programmed the commonly used types of decompositions: plain, vertical slice, horizontal slice, vertical scrolling, 2D grid, and a farily elaborate report writer for those who need to produce printed reports in the classic style. Since the layout system is in the language itself, you can use variables, IF statements, and subroutines in the layout portion, unlike CSS which hampers you great. Another huge advantage over CSS is that Beads uses explicit whitespace so placement of items is 100% predictable and repeatable, unlike CSS which on a small typo can scramble your page.  Building a complex product by gradual refinement is the methodology you use in Beads; always proceeding from a working standpoint, and adding in detail.   <https://youtu.be/lhLJbC7LA2k>",
        "user": "UEQ6M68H0",
        "ts": "1588654823.195200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Beads introduction Ep. 004 - the layout system part 2",
                "title_link": "https://youtu.be/lhLJbC7LA2k",
                "author_name": "Edward De Jong",
                "author_link": "https://www.youtube.com/channel/UCiBO5hr2IVsYK8wiLznImTQ",
                "thumb_url": "https://i.ytimg.com/vi/lhLJbC7LA2k/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Beads introduction Ep. 004 - the layout system part 2",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/lhLJbC7LA2k?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/lhLJbC7LA2k",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/lhLJbC7LA2k"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pJDdT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here is a follow up on the Beads layout system. Beads has a very unique layout system that is slightly more advanced than the Apple struts and springs system used in XCode.  You design your layout by starting with the full screen rectangle, and subdividing it into pieces. Each chunk can be further subdivided. It has pre-programmed the commonly used types of decompositions: plain, vertical slice, horizontal slice, vertical scrolling, 2D grid, and a farily elaborate report writer for those who need to produce printed reports in the classic style. Since the layout system is in the language itself, you can use variables, IF statements, and subroutines in the layout portion, unlike CSS which hampers you great. Another huge advantage over CSS is that Beads uses explicit whitespace so placement of items is 100% predictable and repeatable, unlike CSS which on a small typo can scramble your page.  Building a complex product by gradual refinement is the methodology you use in Beads; always proceeding from a working standpoint, and adding in detail.   "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/lhLJbC7LA2k"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588654823.195200",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1588710359.213000",
        "reply_users": [
            "UDQBTJ211",
            "UEQ6M68H0"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UDQBTJ211",
                    "UBN9AFS0N",
                    "U0123H7JRDM"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "28f52213-31d2-4f55-bfaf-7778e600f83e",
        "type": "message",
        "text": "When you were sketching the design, does that actually generate code for you?",
        "user": "UDQBTJ211",
        "ts": "1588664048.195500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2Lzh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When you were sketching the design, does that actually generate code for you?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588654823.195200",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "ED8C645D-0454-41CE-82F2-CA1D8D82FF0F",
        "type": "message",
        "text": "Hi, here's a short introduction video about my flow-based-programming project: <https://youtu.be/zckUSrZX2co|https://youtu.be/zckUSrZX2co> . In the near future I'll upload more videos to talk and show more deeply about the project, but I hope that this video already gives you an idea of what I am creating",
        "user": "U0123H7JRDM",
        "ts": "1588677924.203300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Flow based programming introduction part 1",
                "title_link": "https://youtu.be/zckUSrZX2co",
                "author_name": "Maikel van de Lisdonk",
                "author_link": "https://www.youtube.com/channel/UCdTHgZGTRUmtwJTj2PoBG5A",
                "thumb_url": "https://i.ytimg.com/vi/zckUSrZX2co/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Flow based programming introduction part 1",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/zckUSrZX2co?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/zckUSrZX2co",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/zckUSrZX2co"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EbgEL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi, here's a short introduction video about my flow-based-programming project: "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/zckUSrZX2co",
                                "text": "https://youtu.be/zckUSrZX2co"
                            },
                            {
                                "type": "text",
                                "text": " . In the near future I'll upload more videos to talk and show more deeply about the project, but I hope that this video already gives you an idea of what I am creating"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588677924.203300",
        "reply_count": 14,
        "reply_users_count": 5,
        "latest_reply": "1589047786.307000",
        "reply_users": [
            "UDQBTJ211",
            "U0123H7JRDM",
            "UFZFETUH1",
            "UD6EXQVM0",
            "UAVCC2X70"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "clap::skin-tone-4",
                "users": [
                    "UBN9AFS0N",
                    "UDQBTJ211",
                    "UA14TGLTC"
                ],
                "count": 3
            },
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "64e114aa-dfd9-42fe-9278-ba82d2ec3ef2",
        "type": "message",
        "text": "Looks good. Am I understanding right that the nodes/arrows only show what are the inputs, and all actually calculations are specified in (textual) code?",
        "user": "UDQBTJ211",
        "ts": "1588678696.203700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w9C",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Looks good. Am I understanding right that the nodes/arrows only show what are the inputs, and all actually calculations are specified in (textual) code?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588677924.203300",
        "parent_user_id": "U0123H7JRDM"
    },
    {
        "client_msg_id": "F24EA96E-4C23-4C05-AF27-1476E492793E",
        "type": "message",
        "text": "Thanks, and I'll try to explain: Each node has a property taskType which specifies the plugin which is used when the node is executed. The plugins determine the parameters that they need. The expression task which calculates the body mass index is an example of such a plugin. The whole flow is actually stored in json format as an array : both nodes and connections are stored in that array. The json is executed by code, and it is used to setup rxjs observables and trigger the attached plugins",
        "user": "U0123H7JRDM",
        "ts": "1588679678.212700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1aI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks, and I'll try to explain: Each node has a property taskType which specifies the plugin which is used when the node is executed. The plugins determine the parameters that they need. The expression task which calculates the body mass index is an example of such a plugin. The whole flow is actually stored in json format as an array : both nodes and connections are stored in that array. The json is executed by code, and it is used to setup rxjs observables and trigger the attached plugins"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588677924.203300",
        "parent_user_id": "U0123H7JRDM"
    },
    {
        "client_msg_id": "13472ad7-868e-4d31-96f9-f51d6128b3e1",
        "type": "message",
        "text": "So far you can generate declarations, define data structures, in the UI of the IDE. Don't have layout via GUI yet, working on it now.  I am building the IDE in Beads, and it is open source and part of the SDK examples. The public has overwhelmingly expressed their desire, no expectation, for a graphical tool that generates code, so it shall be built!",
        "user": "UEQ6M68H0",
        "ts": "1588710359.213000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uM6yM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So far you can generate declarations, define data structures, in the UI of the IDE. Don't have layout via GUI yet, working on it now.  I am building the IDE in Beads, and it is open source and part of the SDK examples. The public has overwhelmingly expressed their desire, no expectation, for a graphical tool that generates code, so it shall be built!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588654823.195200",
        "parent_user_id": "UEQ6M68H0",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    }
]