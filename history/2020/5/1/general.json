[
    {
        "client_msg_id": "be0655fe-75a2-4999-bab9-f01c039a1427",
        "type": "message",
        "text": "\"On the usability of editable software\"\n<https://flak.tedunangst.com/post/on-the-usability-of-editable-software>\n<https://lobste.rs/s/qkpwpa/on_usability_editable_software>\n\nLots of room for thinking about how language design affects the ability to customize software without the anticipation of the original developer. Eg emacs lisp allows redefining functions without having to fork the original library. Eg languages with private/public settings that are enforced by the compiler completely prevent that kind of reuse/rediting, forcing the user to fork which is a pretty heavy-weight operation.",
        "user": "U71PMQ1V0",
        "ts": "1588289513.379000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U71PMQ1V0",
            "ts": "1588289523.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V/ixN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"On the usability of editable software\"\n"
                            },
                            {
                                "type": "link",
                                "url": "https://flak.tedunangst.com/post/on-the-usability-of-editable-software"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://lobste.rs/s/qkpwpa/on_usability_editable_software"
                            },
                            {
                                "type": "text",
                                "text": "\n\nLots of room for thinking about how language design affects the ability to customize software without the anticipation of the original developer. Eg emacs lisp allows redefining functions without having to fork the original library. Eg languages with private/public settings that are enforced by the compiler completely prevent that kind of reuse/rediting, forcing the user to fork which is a pretty heavy-weight operation."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588289513.379000",
        "reply_count": 16,
        "reply_users_count": 6,
        "latest_reply": "1588346909.408700",
        "reply_users": [
            "UCUSW7WVD",
            "U71PMQ1V0",
            "UEBG0NPDK",
            "UT60XSVCN",
            "UJBAJNFLK",
            "UE0ETTCG7"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "5d4e6644-363b-47b2-8d2a-2bbc7eeb287d",
        "type": "message",
        "text": "The Flutter layout model is very simple and expressive - <https://youtu.be/UUfXWzp0-DU?t=201>. The proposed model for extensible layouts on the web uses almost exactly the same api.\n\nMany immediate-mode gui libraries don't have a concept of parent-child relations. Instead widget functions take a rect that tells them where to draw themselves, and there are a bunch of convenience functions for splitting rects in different ways. Eg page 31 of <https://ourmachinery.com/docs/writing-tools-faster/index.html>",
        "user": "U71PMQ1V0",
        "ts": "1588289985.379300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Flutter's Rendering Pipeline",
                "title_link": "https://youtu.be/UUfXWzp0-DU?t=201",
                "author_name": "GoogleTechTalks",
                "author_link": "https://www.youtube.com/user/GoogleTechTalks",
                "thumb_url": "https://i.ytimg.com/vi/UUfXWzp0-DU/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Flutter's Rendering Pipeline",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/UUfXWzp0-DU?start=201&feature=oembed&start=201&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/UUfXWzp0-DU?t=201",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/UUfXWzp0-DU?t=201"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "shj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Flutter layout model is very simple and expressive - "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/UUfXWzp0-DU?t=201"
                            },
                            {
                                "type": "text",
                                "text": ". The proposed model for extensible layouts on the web uses almost exactly the same api.\n\nMany immediate-mode gui libraries don't have a concept of parent-child relations. Instead widget functions take a rect that tells them where to draw themselves, and there are a bunch of convenience functions for splitting rects in different ways. Eg page 31 of "
                            },
                            {
                                "type": "link",
                                "url": "https://ourmachinery.com/docs/writing-tools-faster/index.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKDM3GLAJ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "23a4e463-a6e4-426f-a4d2-3ffdaf899bc9",
        "type": "message",
        "text": "I don't follow why public/private prevent 'rediting' (nice coinage there). Isn't it just a simple edit to change 'private' to 'public'?\n\nRedefining functions that weren't really designed to be extended is just as much a reason to fork as anything else, because you often want to reuse some part of the body of the function. It becomes a game of Russian Roulette if you start updating the library without updating your copy of the redefined function. So the leap from editing copies of things to editing things in place isn't that big, I think.\n\nThe key here is to make forking a lightweight operation. And version control systems have already done a lot of heavy lifting for us by refining the erstwhile-heavyweight operation of branching into something light and inexpensive. I suspect making forking lightweight is mostly just a switch in mindset. There are no chains here except those we place on ourselves.",
        "user": "UCUSW7WVD",
        "ts": "1588291600.379700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o0z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't follow why public/private prevent 'rediting' (nice coinage there). Isn't it just a simple edit to change 'private' to 'public'?\n\nRedefining functions that weren't really designed to be extended is just as much a reason to fork as anything else, because you often want to reuse some part of the body of the function. It becomes a game of Russian Roulette if you start updating the library without updating your copy of the redefined function. So the leap from editing copies of things to editing things in place isn't that big, I think.\n\nThe key here is to make forking a lightweight operation. And version control systems have already done a lot of heavy lifting for us by refining the erstwhile-heavyweight operation of branching into something light and inexpensive. I suspect making forking lightweight is mostly just a switch in mindset. There are no chains here except those we place on ourselves."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588289513.379000",
        "parent_user_id": "U71PMQ1V0"
    },
    {
        "client_msg_id": "a93a6145-c897-4d1a-a5f6-7bc1ff668d38",
        "type": "message",
        "text": "&gt;  rediting\nBeen a long day :smile:\n&gt; don't follow why public/private prevent 'rediting'\nThe distinction I was getting at is editing something \"from the outside\" vs having to fork. Eg if there is a function in a libary whose behavior I want to change in...\n\u2022 ...Julia, then I define a new method of that function in my code\n\u2022 ...Rust, then I search for the repo, checkout the correct version as a git submodule, change the Cargo entry to point at my local repo, edit the code in the repo, then rebase my changes when I want to upgrade the library\nThe end result is that same - I've changed some logic and I have to maintain that diff. But in the latter case there is a *lot* more busywork involved.\n\nMaking forking more lightweight would definitely help, but I think there is an additional point of friction in maintaining the diff as text vs maintaining the diff as a language mechanism. Eg if the code gets moved around a bunch in the file then rebasing the diff is painful, whereas nothing has to change with the override. Also version control and package managers don't play together very well at the moment. If the original version of the package gets updated the rust package manager won't even warn me about it, let alone help me rebase my changes.\n\nI think we're agreeing in principle - we both want forking to be a lightweight mechanism. You could come at this from either end - a version control system that understands the language and helps you manage forks, or a language with built-in mechanisms for composing code with changes.\n\nThis kinda sounds like <http://akkartik.name/post/wart-layers> - did you continue working on that idea?",
        "user": "U71PMQ1V0",
        "ts": "1588294425.380000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U71PMQ1V0",
            "ts": "1588294609.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cU4",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " rediting"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Been a long day "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "don't follow why public/private prevent 'rediting'"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe distinction I was getting at is editing something \"from the outside\" vs having to fork. Eg if there is a function in a libary whose behavior I want to change in...\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "...Julia, then I define a new method of that function in my code"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "...Rust, then I search for the repo, checkout the correct version as a git submodule, change the Cargo entry to point at my local repo, edit the code in the repo, then rebase my changes when I want to upgrade the library"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The end result is that same - I've changed some logic and I have to maintain that diff. But in the latter case there is a "
                            },
                            {
                                "type": "text",
                                "text": "lot",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " more busywork involved.\n\nMaking forking more lightweight would definitely help, but I think there is an additional point of friction in maintaining the diff as text vs maintaining the diff as a language mechanism. Eg if the code gets moved around a bunch in the file then rebasing the diff is painful, whereas nothing has to change with the override. Also version control and package managers don't play together very well at the moment. If the original version of the package gets updated the rust package manager won't even warn me about it, let alone help me rebase my changes.\n\nI think we're agreeing in principle - we both want forking to be a lightweight mechanism. You could come at this from either end - a version control system that understands the language and helps you manage forks, or a language with built-in mechanisms for composing code with changes.\n\nThis kinda sounds like "
                            },
                            {
                                "type": "link",
                                "url": "http://akkartik.name/post/wart-layers"
                            },
                            {
                                "type": "text",
                                "text": " - did you continue working on that idea?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588289513.379000",
        "parent_user_id": "U71PMQ1V0",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ab84d902-c97d-48bf-9f19-577b9f8b45fb",
        "type": "message",
        "text": "I guess <https://www.unisonweb.org/> has gone pretty far done this road - providing builtin tools for editing a function and updating all of it's callsites to point to the new version.",
        "user": "U71PMQ1V0",
        "ts": "1588294505.380200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "The Unison language",
                "title_link": "https://www.unisonweb.org/",
                "text": "A friendly programming language from the future.",
                "fallback": "The Unison language",
                "from_url": "https://www.unisonweb.org/",
                "service_name": "unisonweb.org",
                "id": 1,
                "original_url": "https://www.unisonweb.org/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sO8E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I guess "
                            },
                            {
                                "type": "link",
                                "url": "https://www.unisonweb.org/"
                            },
                            {
                                "type": "text",
                                "text": " has gone pretty far done this road - providing builtin tools for editing a function and updating all of it's callsites to point to the new version."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588289513.379000",
        "parent_user_id": "U71PMQ1V0"
    },
    {
        "client_msg_id": "ce45652b-9ac4-4921-8ae5-7abf2429d358",
        "type": "message",
        "text": "<https://scattered-thoughts.net/writing/imp-solving-functions/>",
        "user": "U71PMQ1V0",
        "ts": "1588295194.380800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D407",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://scattered-thoughts.net/writing/imp-solving-functions/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1569866970.116800",
        "parent_user_id": "U71PMQ1V0"
    },
    {
        "client_msg_id": "27b4482f-c0aa-44b3-9692-963a263842f8",
        "type": "message",
        "text": "I still use layers in my projects. But the idea with layers is to emphasize convenience and rely on the programmer to preserve composability-related properties. In other words, you can easily make changes to a function that create arbitrarily-difficult-to-debug holes for yourself. I rely on the people using layers to use them tastefully.\n\nI think this is an irreducible trade-off. If you want extending functions to always be nice and safe, you'll be restricted in the number of places the safe mechanism is available to you.\n\nIn my current project I instead focus on catching any possible breakage in the project using some combination of tests, types and correct-by-construction design. This is the _top_ priority, and I give up as much as possible while preserving it. Now others can modify functions all they want, safe in the knowledge that _something_ will complain if they break something when forking a function.",
        "user": "UCUSW7WVD",
        "ts": "1588295765.381000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1588295819.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/8t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I still use layers in my projects. But the idea with layers is to emphasize convenience and rely on the programmer to preserve composability-related properties. In other words, you can easily make changes to a function that create arbitrarily-difficult-to-debug holes for yourself. I rely on the people using layers to use them tastefully.\n\nI think this is an irreducible trade-off. If you want extending functions to always be nice and safe, you'll be restricted in the number of places the safe mechanism is available to you.\n\nIn my current project I instead focus on catching any possible breakage in the project using some combination of tests, types and correct-by-construction design. This is the "
                            },
                            {
                                "type": "text",
                                "text": "top",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " priority, and I give up as much as possible while preserving it. Now others can modify functions all they want, safe in the knowledge that "
                            },
                            {
                                "type": "text",
                                "text": "something",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " will complain if they break something when forking a function."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588289513.379000",
        "parent_user_id": "U71PMQ1V0"
    },
    {
        "client_msg_id": "f7053b1d-636f-4804-84b2-870462b83624",
        "type": "message",
        "text": "I absolutely agree with this:\n\n&gt; I search for the repo, checkout the correct version as a git submodule, change the Cargo entry to point at my local repo, edit the code in the repo, then rebase my changes when I want to upgrade the library... there is a *lot* more busywork involved.\nTo me this is the lethal problem with packages: by making them easy to consume we make them harder to modify. And that seems like a hard, black-or-white, us-vs-them trade-off. And if that's right, if there's no place for compromise here, I prefer keeping it easy to modify. Even if that is a harder sell, even if it means most people will gravitate towards the competition.\n\nSame goes for binary distributions of anything. Always keep source along for the ride, have the binary rebuild automatically if the source ever changes. Anything else makes the world a worse place, IMO. (I've been feeling a lot more strongly about this in the past couple of months.)",
        "user": "UCUSW7WVD",
        "ts": "1588296760.381400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1588297138.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0qcY1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I absolutely agree with this:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I search for the repo, checkout the correct version as a git submodule, change the Cargo entry to point at my local repo, edit the code in the repo, then rebase my changes when I want to upgrade the library... there is a "
                            },
                            {
                                "type": "text",
                                "text": "lot",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " more busywork involved."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To me this is the lethal problem with packages: by making them easy to consume we make them harder to modify. And that seems like a hard, black-or-white, us-vs-them trade-off. And if that's right, if there's no place for compromise here, I prefer keeping it easy to modify. Even if that is a harder sell, even if it means most people will gravitate towards the competition.\n\nSame goes for binary distributions of anything. Always keep source along for the ride, have the binary rebuild automatically if the source ever changes. Anything else makes the world a worse place, IMO. (I've been feeling a lot more strongly about this in the past couple of months.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588289513.379000",
        "parent_user_id": "U71PMQ1V0",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UU45NNMHT",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "77150fee-58da-4771-aea4-ed6927bc1854",
        "type": "message",
        "text": "Tangent: slide 31:\n```No need for \"layout managers\" -- instead we split rects directly in code```\nI understand the sentiment but dismissing automatic layout seems wrong. In a database analogy, would be like doing away with SQL and performing all queries programmatically with lower level API calls and for loops. Makes me think there must be a different way to layout graphics that is to CSS as Datalog is to SQL :slightly_smiling_face:",
        "user": "UN9SCH5RD",
        "ts": "1588296858.381600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t6T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tangent: slide 31:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No need for \"layout managers\" -- instead we split rects directly in code"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I understand the sentiment but dismissing automatic layout seems wrong. In a database analogy, would be like doing away with SQL and performing all queries programmatically with lower level API calls and for loops. Makes me think there must be a different way to layout graphics that is to CSS as Datalog is to SQL "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ"
    },
    {
        "client_msg_id": "0613ed40-b26a-4bd4-aa1f-ff411c8611de",
        "type": "message",
        "text": "I'm curious if there's a standard approach to making programming tutorials and some tools to help make them?  It would help to have a guide so each project doesn't have to build it from scratch.  For a format for presenting code in a gradually-building style, I have a small project to explore this. <https://github.com/markdewing/programming_tutorial_maker>",
        "user": "UNS7QDKFV",
        "ts": "1588303872.382100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "markdewing/programming_tutorial_maker",
                "text": "Template for making programming tutorials",
                "title": "markdewing/programming_tutorial_maker",
                "footer": "<https://github.com/markdewing/programming_tutorial_maker|markdewing/programming_tutorial_maker>",
                "id": 1,
                "footer_icon": "https://github.githubassets.com/favicon.ico",
                "ts": 1560542583,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Language",
                        "value": "Python",
                        "short": true
                    },
                    {
                        "title": "Last updated",
                        "value": "10 months ago",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https://github.com/markdewing/programming_tutorial_maker",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IYt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm curious if there's a standard approach to making programming tutorials and some tools to help make them?  It would help to have a guide so each project doesn't have to build it from scratch.  For a format for presenting code in a gradually-building style, I have a small project to explore this. "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/markdewing/programming_tutorial_maker"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588031436.305800",
        "parent_user_id": "UR482RFPY"
    },
    {
        "client_msg_id": "0a138663-812c-4ebf-8b80-27b2818b0510",
        "type": "message",
        "text": "I :heart: every single one of your comments on that <http://Lobste.rs|Lobste.rs> thread, <@U71PMQ1V0>. We are of absolutely one mind here.\n\nI responded to a few comments there, but I have nothing to add to yours.",
        "user": "UCUSW7WVD",
        "ts": "1588306106.383100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1588307678.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MfqqG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I "
                            },
                            {
                                "type": "emoji",
                                "name": "heart"
                            },
                            {
                                "type": "text",
                                "text": " every single one of your comments on that "
                            },
                            {
                                "type": "link",
                                "url": "http://Lobste.rs",
                                "text": "Lobste.rs"
                            },
                            {
                                "type": "text",
                                "text": " thread, "
                            },
                            {
                                "type": "user",
                                "user_id": "U71PMQ1V0"
                            },
                            {
                                "type": "text",
                                "text": ". We are of absolutely one mind here.\n\nI responded to a few comments there, but I have nothing to add to yours."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588289513.379000",
        "parent_user_id": "U71PMQ1V0",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U71PMQ1V0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "919409F4-0DFB-4046-BC52-6633ADE30BC6",
        "type": "message",
        "text": "Anyone know of programs for visualizing and understanding assembly and/or CPUs? Thinking kind of what Bret Victor does with Learnable Programming and Inventing On Principle but applied to lower level code. I am guessing there\u2019s industrial software in this general category but am especially interested in programs with a pedagogical angle.",
        "user": "UMWF81HTP",
        "ts": "1588307376.386900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8sR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Anyone know of programs for visualizing and understanding assembly and/or CPUs? Thinking kind of what Bret Victor does with Learnable Programming and Inventing On Principle but applied to lower level code. I am guessing there\u2019s industrial software in this general category but am especially interested in programs with a pedagogical angle."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588307376.386900",
        "reply_count": 20,
        "reply_users_count": 12,
        "latest_reply": "1588414994.414600",
        "reply_users": [
            "UCUSW7WVD",
            "UEQ6M68H0",
            "UCGAK10LS",
            "UBSMEUXAA",
            "UH85W1ML1",
            "UBN9AFS0N",
            "UN9SCH5RD",
            "UMWF81HTP",
            "U5STGTB3J",
            "UPMFG2571",
            "UU45NNMHT",
            "UDQBTJ211"
        ],
        "subscribed": true,
        "last_read": "1588414994.414600",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "URDRJEWS0",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "4f7ec9c9-c30d-446e-9cfc-2ec4765b6987",
        "type": "message",
        "text": "Part of the challenge is just what's ready-to-hand.  I recall sitting next to an analyst who, while working on an Excel sheet, would also use the four function calculator on his desk.  Why?  Well, the calculator works even when he isn't in Excel or on the computer, and since the sheet was already configured to show something else, there wasn't a good scratch spot to put the needed formula.",
        "user": "UA14TGLTC",
        "ts": "1588307505.387000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fg0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Part of the challenge is just what's ready-to-hand.  I recall sitting next to an analyst who, while working on an Excel sheet, would also use the four function calculator on his desk.  Why?  Well, the calculator works even when he isn't in Excel or on the computer, and since the sheet was already configured to show something else, there wasn't a good scratch spot to put the needed formula."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UE0ETTCG7",
                    "UHWC9PXBL"
                ],
                "count": 3
            },
            {
                "name": "disappointed_relieved",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "63aba39f-bbb3-4b46-8d24-0d86621885bb",
        "type": "message",
        "text": "Speaking of movie UIs... <https://www.youtube.com/watch?v=4-yFRjqn9Tc>",
        "user": "UA14TGLTC",
        "ts": "1588307788.387300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Wreck-It-Ralph Clip: Code Room",
                "title_link": "https://www.youtube.com/watch?v=4-yFRjqn9Tc",
                "author_name": "Richard Parker",
                "author_link": "https://www.youtube.com/user/SungTobias",
                "thumb_url": "https://i.ytimg.com/vi/4-yFRjqn9Tc/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Wreck-It-Ralph Clip: Code Room",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/4-yFRjqn9Tc?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=4-yFRjqn9Tc",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=4-yFRjqn9Tc"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZdAT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Speaking of movie UIs... "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=4-yFRjqn9Tc"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ"
    },
    {
        "client_msg_id": "084410ed-4ca9-40e8-820e-04a3cc150153",
        "type": "message",
        "text": "Are you thinking real-world processors? There's a long tradition from SPIM to TIS-100 of designing simple make-believe processors for pedagogical purposes, but I'm sure you know all that..",
        "user": "UCUSW7WVD",
        "ts": "1588307926.387600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1588307978.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/VtS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are you thinking real-world processors? There's a long tradition from SPIM to TIS-100 of designing simple make-believe processors for pedagogical purposes, but I'm sure you know all that.."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UMWF81HTP"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "3001f49f-6375-4367-b024-7d766871287c",
        "type": "message",
        "text": "I haven't seen an assembly language simulator in a long time but i know they exist somewhere. There are simpler processors than the Intel architecture (which is a pretty messy thing), like Z80, etc. The Motorola 68000 was a very regular instruction set, and there is probably some wonderful old stuff out there. Highly instructive to learn assembly language, well worth doing.",
        "user": "UEQ6M68H0",
        "ts": "1588308727.387900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KqjIV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I haven't seen an assembly language simulator in a long time but i know they exist somewhere. There are simpler processors than the Intel architecture (which is a pretty messy thing), like Z80, etc. The Motorola 68000 was a very regular instruction set, and there is probably some wonderful old stuff out there. Highly instructive to learn assembly language, well worth doing."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMWF81HTP"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "af9b3bb4-991c-4649-b019-0f6515318d2b",
        "type": "message",
        "text": "<@U71PMQ1V0> the system Josh and I are working on revolves entirely around a remixing model :slightly_smiling_face:",
        "user": "UEBG0NPDK",
        "ts": "1588309203.388200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1VCjT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U71PMQ1V0"
                            },
                            {
                                "type": "text",
                                "text": " the system Josh and I are working on revolves entirely around a remixing model "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588289513.379000",
        "parent_user_id": "U71PMQ1V0"
    },
    {
        "client_msg_id": "44dca377-0312-4d99-bd17-e45d15b8b926",
        "type": "message",
        "text": "Not sure if you remember, but this was one of the footnotes in my essay on modeling: <https://www.chris-granger.com/2015/01/26/coding-is-not-the-new-literacy/#fn4>",
        "user": "UEBG0NPDK",
        "ts": "1588309496.388700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/kFQ=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure if you remember, but this was one of the footnotes in my essay on modeling: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.chris-granger.com/2015/01/26/coding-is-not-the-new-literacy/#fn4"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588289513.379000",
        "parent_user_id": "U71PMQ1V0",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7a59ebf5-bef9-4fdc-be9b-40d756bc88e0",
        "type": "message",
        "text": "There's a HUGE difference between assembly languages and CPU hardware. They're only weakly linked: one encodes computations and the other executes computations. Intel and AMD CPUs haven't executed x86 directly for decades; they compile it into microcode on-the-fly. And CPUs do insanely complex things with scheduling, memories and caches.\n\nI would LOVE a good, modern (abstract) CPU emulator that could execute a Wasm program and show me what was happening with scheduling and caches. People have tried this kind of stuff before but I don't know of any nice tools. I've been thinking I will have to make my own (simplistic) simulator at some point if I'm ever going to make a \"great\" compiler. Otherwise I'll just be applying/benchmarking heuristics \"black box\"-style and hoping they work well.",
        "user": "UCGAK10LS",
        "ts": "1588310165.389400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1588310503.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U=9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's a HUGE difference between assembly languages and CPU hardware. They're only weakly linked: one encodes computations and the other executes computations. Intel and AMD CPUs haven't executed x86 directly for decades; they compile it into microcode on-the-fly. And CPUs do insanely complex things with scheduling, memories and caches.\n\nI would LOVE a good, modern (abstract) CPU emulator that could execute a Wasm program and show me what was happening with scheduling and caches. People have tried this kind of stuff before but I don't know of any nice tools. I've been thinking I will have to make my own (simplistic) simulator at some point if I'm ever going to make a \"great\" compiler. Otherwise I'll just be applying/benchmarking heuristics \"black box\"-style and hoping they work well."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP"
    },
    {
        "client_msg_id": "2d311b29-c856-4b9a-8651-e7ff112a1834",
        "type": "message",
        "text": "Maybe a disassembler like binary ninja or Ida pro?",
        "user": "UBSMEUXAA",
        "ts": "1588310561.390000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NRX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe a disassembler like binary ninja or Ida pro?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP"
    },
    {
        "client_msg_id": "70677113-5210-4afb-91e2-34fcd9181be5",
        "type": "message",
        "text": "<https://binary.ninja/|https://binary.ninja/>",
        "user": "UBSMEUXAA",
        "ts": "1588310565.390200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Binary Ninja &gt; home",
                "title_link": "https://binary.ninja/",
                "text": "Binary Ninja : A Reverse Engineering Platform",
                "fallback": "Binary Ninja &gt; home",
                "thumb_url": "https://binary.ninja/ico/apple-icon-180x180.png",
                "from_url": "https://binary.ninja/",
                "thumb_width": 180,
                "thumb_height": 180,
                "service_icon": "https://binary.ninja/ico/apple-icon-57x57.png",
                "service_name": "binary.ninja",
                "id": 1,
                "original_url": "https://binary.ninja/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x1Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://binary.ninja/",
                                "text": "https://binary.ninja/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMWF81HTP"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "27d9df29-a4e7-4797-8337-a9e9ddfed3f8",
        "type": "message",
        "text": "<@UCUSW7WVD>\n&gt; I feel very cynical/fatalistic about Emacs/Lisp/Smalltalk lately. Yes, the core design choices exhibit a high trust for users. But then it seems to be inevitable that the layers on top start chipping away at this trust. Vim's package managers introduce hurdles for anyone who wants to modify sources. (See my recent war story.) How does the Emacs eco-system compare? Is it really common for people to modify packages? Racket's raco feels the same, additional complexity between me and the libraries they want me to \u2018use'.\n&gt; \n(Responding here since I don't have a lobsters account)\nWhen I first started using emacs I had the same thought, since it's really hard to override a package with the default package manager `package.el`, but there is actually a quite sane package manager that makes modifying packages trivial, `straight.el`, it's based on the nix/guix model, but it's even simpler\u2014to edit a package, you just edit the files in the git checkout it creates, that's it. maintaining your own branch is as simple as... making a git branch, and so on. Recently I had a problem when I upgraded my packages, and to switch to an older version, I just checked an older version of the package from git, and the package manager handled rebuilding and everything automatically. It felt very nice.\nIn a way, it's like the package manager uses git metadata as its database, so you don't need extra cruft on top.",
        "user": "UT60XSVCN",
        "ts": "1588310994.390600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PG=tP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I feel very cynical/fatalistic about Emacs/Lisp/Smalltalk lately. Yes, the core design choices exhibit a high trust for users. But then it seems to be inevitable that the layers on top start chipping away at this trust. Vim's package managers introduce hurdles for anyone who wants to modify sources. (See my recent war story.) How does the Emacs eco-system compare? Is it really common for people to modify packages? Racket's raco feels the same, additional complexity between me and the libraries they want me to \u2018use'.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(Responding here since I don't have a lobsters account)\nWhen I first started using emacs I had the same thought, since it's really hard to override a package with the default package manager "
                            },
                            {
                                "type": "text",
                                "text": "package.el",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but there is actually a quite sane package manager that makes modifying packages trivial, "
                            },
                            {
                                "type": "text",
                                "text": "straight.el",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", it's based on the nix/guix model, but it's even simpler\u2014to edit a package, you just edit the files in the git checkout it creates, that's it. maintaining your own branch is as simple as... making a git branch, and so on. Recently I had a problem when I upgraded my packages, and to switch to an older version, I just checked an older version of the package from git, and the package manager handled rebuilding and everything automatically. It felt very nice.\nIn a way, it's like the package manager uses git metadata as its database, so you don't need extra cruft on top."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588289513.379000",
        "parent_user_id": "U71PMQ1V0",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "U71PMQ1V0",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "4350453a-eda1-4f3c-a59c-9c516925c85c",
        "type": "message",
        "text": "<https://github.com/raxod502/straight.el>\n\nWow, look at that Readme! Thanks for showing me this.",
        "user": "UCUSW7WVD",
        "ts": "1588311223.390900",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "raxod502/straight.el",
                "text": ":four_leaf_clover: Next-generation, purely functional package manager for the Emacs hacker.",
                "title": "raxod502/straight.el",
                "footer": "<https://github.com/raxod502/straight.el|raxod502/straight.el>",
                "id": 1,
                "footer_icon": "https://github.githubassets.com/favicon.ico",
                "ts": 1483506907,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Stars",
                        "value": "1110",
                        "short": true
                    },
                    {
                        "title": "Language",
                        "value": "Emacs Lisp",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https://github.com/raxod502/straight.el",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ea4v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://github.com/raxod502/straight.el"
                            },
                            {
                                "type": "text",
                                "text": "\n\nWow, look at that Readme! Thanks for showing me this."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588289513.379000",
        "parent_user_id": "U71PMQ1V0"
    },
    {
        "client_msg_id": "8bc9cf65-daf8-4078-aee1-9bdbacc7e1f7",
        "type": "message",
        "text": "<http://visual6502.org/> has live JS simulations of a few chips",
        "user": "UH85W1ML1",
        "ts": "1588312257.391500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mGN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http://visual6502.org/"
                            },
                            {
                                "type": "text",
                                "text": " has live JS simulations of a few chips"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP"
    },
    {
        "client_msg_id": "8ee74048-2d3f-4796-9eab-7d306d0edfed",
        "type": "message",
        "text": "<https://floooh.github.io/visual6502remix/> is an alternative version",
        "user": "UH85W1ML1",
        "ts": "1588312319.391700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ssoB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://floooh.github.io/visual6502remix/"
                            },
                            {
                                "type": "text",
                                "text": " is an alternative version"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP"
    },
    {
        "client_msg_id": "0c3e0014-6408-4ae6-b6ab-2a13209ebc6d",
        "type": "message",
        "text": "<@UN9SCH5RD> I think of it more as not having *one* layout manager. The widget functions just want a rect. You can write the rect out by hand, or write some simple layout calculation, or import a layout manager library if you want, or use multiple different layout algorithms in different places. But the widget libraries don't care.",
        "user": "U71PMQ1V0",
        "ts": "1588315794.392100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U71PMQ1V0",
            "ts": "1588315825.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FKjoc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UN9SCH5RD"
                            },
                            {
                                "type": "text",
                                "text": " I think of it more as not having "
                            },
                            {
                                "type": "text",
                                "text": "one",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " layout manager. The widget functions just want a rect. You can write the rect out by hand, or write some simple layout calculation, or import a layout manager library if you want, or use multiple different layout algorithms in different places. But the widget libraries don't care."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ"
    },
    {
        "client_msg_id": "6fc261a5-d7e9-43db-a062-0a5f5bb60db4",
        "type": "message",
        "text": "<@UEBG0NPDK> Are you guys still at rai?",
        "user": "U71PMQ1V0",
        "ts": "1588315881.392400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jHAXO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " Are you guys still at rai?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588289513.379000",
        "parent_user_id": "U71PMQ1V0"
    },
    {
        "client_msg_id": "e37a9837-1111-453a-aedd-978d5f58966b",
        "type": "message",
        "text": "Wow, straight.el does address a lot of the things we were complaining about.",
        "user": "U71PMQ1V0",
        "ts": "1588316112.392600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sOM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wow, straight.el does address a lot of the things we were complaining about."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588289513.379000",
        "parent_user_id": "U71PMQ1V0"
    },
    {
        "client_msg_id": "8637ccab-d398-4c8d-ba10-e3fb8309e265",
        "type": "message",
        "text": "Not sure how much of Nardi's book covers this paper (<https://www.miramontes.com/writing/spreadsheet-eup/|Spreadsheets and end-user programming: Nardi, et al.>), but I found it to be a great look at spreadsheets and programming",
        "user": "UEP7RL0HX",
        "ts": "1588319618.393000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fJMH/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure how much of Nardi's book covers this paper ("
                            },
                            {
                                "type": "link",
                                "url": "https://www.miramontes.com/writing/spreadsheet-eup/",
                                "text": "Spreadsheets and end-user programming: Nardi, et al."
                            },
                            {
                                "type": "text",
                                "text": "), but I found it to be a great look at spreadsheets and programming"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588262541.361600",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "27eea702-4f2a-426c-9c86-d283a7dafff9",
        "type": "message",
        "text": "<https://twitter.com/diodesign/status/1248975584647995394>",
        "user": "UBN9AFS0N",
        "ts": "1588319925.393200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/diodesign|@diodesign>: There's a rise in interest in building simple 8-bit systems to teach people the fundamentals of how computers work. Which is great.\n\nBut it can be a pain to order and assemble the parts. So I started an in-browser simulator of a basic 6502-based system to make life easier <https://pbs.twimg.com/ext_tw_video_thumb/1248970491978604550/pu/img/DwRevfbumtuQIKAu.jpg>",
                "ts": 1586613958,
                "author_name": "Chris Williams",
                "author_link": "https://twitter.com/diodesign/status/1248975584647995394",
                "author_icon": "https://pbs.twimg.com/profile_images/1187655712437985280/TRAzFkhY_normal.jpg",
                "author_subname": "@diodesign",
                "text": "There's a rise in interest in building simple 8-bit systems to teach people the fundamentals of how computers work. Which is great.\n\nBut it can be a pain to order and assemble the parts. So I started an in-browser simulator of a basic 6502-based system to make life easier",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/diodesign/status/1248975584647995394",
                "thumb_url": "https://pbs.twimg.com/ext_tw_video_thumb/1248970491978604550/pu/img/DwRevfbumtuQIKAu.jpg",
                "thumb_width": 880,
                "thumb_height": 758,
                "video_html_width": 880,
                "video_html_height": 758,
                "video_html": "<video controls poster=\"https://pbs.twimg.com/ext_tw_video_thumb/1248970491978604550/pu/img/DwRevfbumtuQIKAu.jpg\" width=\"880\" height=\"758\"><source type=\"video/mp4\" src=\"https://video.twimg.com/ext_tw_video/1248970491978604550/pu/vid/834x720/D6sRJYCRnPXF9S2N.mp4?tag=10\"></video>",
                "id": 1,
                "original_url": "https://twitter.com/diodesign/status/1248975584647995394",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RqWfO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://twitter.com/diodesign/status/1248975584647995394"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMWF81HTP",
                    "UU45NNMHT",
                    "UJ6LDMMN0",
                    "UBSMEUXAA",
                    "UHWC9PXBL"
                ],
                "count": 5
            }
        ]
    },
    {
        "client_msg_id": "f4d023f1-2c74-41a0-bc27-385cbf1d5418",
        "type": "message",
        "text": "wow those chip simulations are incredibly detailed. I would think for most people just learning about opcodes, registers, and the difference in speed between register-register operations vs. register memory would be highly instructive. Given that a memory access can take 100 clocks, we are now in an era where it is crucial to use as many registers as possible.",
        "user": "UEQ6M68H0",
        "ts": "1588320792.393500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JSSr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "wow those chip simulations are incredibly detailed. I would think for most people just learning about opcodes, registers, and the difference in speed between register-register operations vs. register memory would be highly instructive. Given that a memory access can take 100 clocks, we are now in an era where it is crucial to use as many registers as possible."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP"
    },
    {
        "client_msg_id": "81ca6f25-85d5-4962-b744-2515f2922268",
        "type": "message",
        "text": "<https://www.nand2tetris.org/software> is a bit rudimentary but the book is amazing. Would be great if there was a web version of Nand2Tetris",
        "user": "UN9SCH5RD",
        "ts": "1588321437.393800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nf0gh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.nand2tetris.org/software"
                            },
                            {
                                "type": "text",
                                "text": " is a bit rudimentary but the book is amazing. Would be great if there was a web version of Nand2Tetris"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP"
    },
    {
        "client_msg_id": "1087a52b-4e43-43d2-9e0f-55b6d7b63a5e",
        "type": "message",
        "text": "<@UCUSW7WVD> would love to hear more! I'm not super familiar with processors!\n<@UCGAK10LS> sure. I should clarify that I'm interested in visualizations that elucidates that bridge between machine code and transistors.\n<@UBSMEUXAA> Thanks for the link, that is really cool! I've seen those box-and-arrow visualizations of jumping before, is that a pretty common feature in disassemblers?",
        "user": "UMWF81HTP",
        "ts": "1588321753.394100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z2b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " would love to hear more! I'm not super familiar with processors!\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " sure. I should clarify that I'm interested in visualizations that elucidates that bridge between machine code and transistors.\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UBSMEUXAA"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for the link, that is really cool! I've seen those box-and-arrow visualizations of jumping before, is that a pretty common feature in disassemblers?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP"
    },
    {
        "type": "message",
        "text": "<@UH85W1ML1> that 6502 visualizer is so cool. But I wonder if the physical circuit diagram alone is really that useful for _building_ an understanding from scratch. I wonder if we could provide different levels of perspective and views over it, sort of a logical analogue to what Bret does for circuit diagrams in Media For Thinking The Unthinkable:",
        "files": [
            {
                "id": "F012W8U1EJE",
                "created": 1588321938,
                "timestamp": 1588321938,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UMWF81HTP",
                "editable": false,
                "size": 846927,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F012W8U1EJE/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F012W8U1EJE/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F012W8U1EJE-f54b144675/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F012W8U1EJE-f54b144675/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F012W8U1EJE-f54b144675/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 143,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F012W8U1EJE-f54b144675/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 190,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F012W8U1EJE-f54b144675/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F012W8U1EJE-f54b144675/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 286,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F012W8U1EJE-f54b144675/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 317,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F012W8U1EJE-f54b144675/image_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 381,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F012W8U1EJE-f54b144675/image_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 406,
                "original_w": 3238,
                "original_h": 1284,
                "thumb_tiny": "AwATADDSzQeaTntRg5J9aAAjPc/nSY56t+dLg5BpDnINADt30oDAnqKbz6mgZz1P50APxRiiigBMUYFLRQAmB6UuBRRQB//Z",
                "permalink": "https://futureofcoding.slack.com/files/UMWF81HTP/F012W8U1EJE/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F012W8U1EJE-dbb9992b7b",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": true,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "op8q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UH85W1ML1"
                            },
                            {
                                "type": "text",
                                "text": " that 6502 visualizer is so cool. But I wonder if the physical circuit diagram alone is really that useful for "
                            },
                            {
                                "type": "text",
                                "text": "building ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "an understanding from scratch. I wonder if we could provide different levels of perspective and views over it, sort of a logical analogue to what Bret does for circuit diagrams in Media For Thinking The Unthinkable:"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UMWF81HTP",
        "display_as_bot": false,
        "ts": "1588321942.394300",
        "client_msg_id": "9c8a29a6-b5cc-4932-a231-b5e29a29041b",
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "853ea461-1598-4b34-bfe2-ffb7cafe929d",
        "type": "message",
        "text": "<@UN9SCH5RD> I love nand2tetris. Did the hardware + VM half of it myself(the compiler part wasn't quite as well-done imo). But the software they provide could be so much more. Would love to see an integrated curriculum where the software seamlessly blends with the learning material.",
        "user": "UMWF81HTP",
        "ts": "1588322099.394700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UMWF81HTP",
            "ts": "1588370565.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qSa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UN9SCH5RD"
                            },
                            {
                                "type": "text",
                                "text": " I love nand2tetris. Did the hardware + VM half of it myself(the compiler part wasn't quite as well-done imo). But the software they provide could be so much more. Would love to see an integrated curriculum where the software seamlessly blends with the learning material."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UN9SCH5RD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "796A2DE3-3823-4F34-904F-055DB9ABCB56",
        "type": "message",
        "text": "Not sure if that\u2019s what you\u2019re looking for, but there is this: <http://www.visual6502.org/|http://www.visual6502.org/>\n\nFun fact: it seems still impossible to simulate a 1 Mhz 6502 like this in real-time on contemporary hardware; see <https://github.com/mist64/perfect6502/blob/master/README.md|https://github.com/mist64/perfect6502/blob/master/README.md>",
        "user": "U5STGTB3J",
        "ts": "1588325846.397400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "[mist64/perfect6502] README.md",
                "text": "```\n# perfect6502\n\n*perfect6502* is a MOS 6502 CPU emulator that performs a simulation of the original NMOS 6502 netlist that was extracted by the [<http://visual6502.org|visual6502.org>](<http://www.visual6502.org/>) project.\n\nConsequently, *perfect6502* is\n* *perfect*: It is not a reimplementation of the 6502, but a simulation of the original transistors. Its complete behavior, its internal state and its outputs are half-cycle exact.\n* *slow*: Even though *perfect6502* is highly optimized C code, achieves only 1/150 of the speed of a 1 MHz 6502 on a high-end CPU of 2014.\n\n*perfect6502* is useful for\n* understanding and reverse engineering the 6502\n* debugging 6502 emulators by running them side by side with *perfect6502*\n\n## Usage\n\nAs a demonstration and as a performance/regression test, *perfect6502* is hooked up to [Commodore BASIC](<http://en.wikipedia.org/wiki/Commodore_BASIC>) (cbmbasic).\n\nYou can compile the project with\n\n\t$ make\n\nand run it with\n\n\t$ ./cbmbasic\n\nYou should get the following output:\n\n\t\t**** COMMODORE 64 BASIC V2 ****\n\t\n\t 64K RAM SYSTEM  38911 BASIC BYTES FREE\n\t\n\tREADY.\n\n# Credits\n\n*perfect6502* is is written by [Michael Steil](<http://www.pagetable.com/>) and derived from the JavaScript [visual6502](<https://github.com/trebonian/visual6502>) implementation by Greg James, Brian Silverman and Barry Silverman.\n\n# Contributing\n\nFurther performance optimizations are gladly accepted.\n```",
                "title": "README.md",
                "footer": "<https://github.com/mist64/perfect6502|mist64/perfect6502>",
                "id": 1,
                "title_link": "https://github.com/mist64/perfect6502/blob/master/README.md",
                "footer_icon": "https://github.githubassets.com/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https://github.com/mist64/perfect6502/blob/master/README.md",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tiq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure if that\u2019s what you\u2019re looking for, but there is this: "
                            },
                            {
                                "type": "link",
                                "url": "http://www.visual6502.org/",
                                "text": "http://www.visual6502.org/"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Fun fact: it seems still impossible to simulate a 1 Mhz 6502 like this in real-time on contemporary hardware; see "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/mist64/perfect6502/blob/master/README.md",
                                "text": "https://github.com/mist64/perfect6502/blob/master/README.md"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP"
    },
    {
        "client_msg_id": "643F7235-B2C4-48CD-87C6-AC558F2A56E9",
        "type": "message",
        "text": "For learning 6502 assembly I quite enjoyed this one: <https://skilldrick.github.io/easy6502/|https://skilldrick.github.io/easy6502/>",
        "user": "U5STGTB3J",
        "ts": "1588325864.398200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fZP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For learning 6502 assembly I quite enjoyed this one: "
                            },
                            {
                                "type": "link",
                                "url": "https://skilldrick.github.io/easy6502/",
                                "text": "https://skilldrick.github.io/easy6502/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP"
    },
    {
        "client_msg_id": "3f930154-06cc-4432-8f5d-35370dfd371c",
        "type": "message",
        "text": "I've had ideas about creating something for the purpose of teaching low level concepts all the way up to how they connect to the higher level (languages and programs we use every day).\n\nIt would have many layers, each layers one concept, and it would show just one concept at a time, but in a zoomable map. It would start by showing the highest level layer - a game running.\nThen it would zoom in super fast until it reaches the lowest layer - how registers and caches work. Now the user has to go through every layer until they reach the highest layer again.\nAll layers are explained visually.\n\nFrom how the CPU executes instructions, to how it fetches them from registers, to caches, to how the MESI protocol works to keep caches coherent, to how data is fetched from RAM when it isn't in the cache and how slow this is, to how  data needs to be fetched from disk, how the CPU feeds data to the GPU, to how all of these systems intertwine together through buses. From this level we should have a pretty good architectural view of how all the systems work together at a low level.\n\nFrom here we zoom out into a higher level to driver land and then to OS land and to how a runtime works to load a PE/ELF into memory. Then we go on to show what is inside an executable and how the data got there - from assembler to compiling and linking to tokenizing and parsing to actual code.\nAt this point there should be a good view of how code actually gets executed.\n\nThen we zoom out again to show how code is structured into platform independent layers to abstract networking protocols, file systems, multi-threading, etc. Then how this is used to build core systems for memory allocation, maths, debugging and profiling, etc. Then on to resource systems for textures, materials, 3D models, etc, to the low level renderer where the rendering commands are being dispatched, how data is fetched from the different resources to achieve this. On to the above layers of scene graph management, animation, post processing, HUD, and finally gameplay.\n\nThis gets us all the way back to the highest layer where the game is running. From this point forward the user is free to go to any layer and play around with some parameters to see how the layers above and below are affected.",
        "user": "UPMFG2571",
        "ts": "1588327539.398500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qM1G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've had ideas about creating something for the purpose of teaching low level concepts all the way up to how they connect to the higher level (languages and programs we use every day).\n\nIt would have many layers, each layers one concept, and it would show just one concept at a time, but in a zoomable map. It would start by showing the highest level layer - a game running.\nThen it would zoom in super fast until it reaches the lowest layer - how registers and caches work. Now the user has to go through every layer until they reach the highest layer again.\nAll layers are explained visually.\n\nFrom how the CPU executes instructions, to how it fetches them from registers, to caches, to how the MESI protocol works to keep caches coherent, to how data is fetched from RAM when it isn't in the cache and how slow this is, to how  data needs to be fetched from disk, how the CPU feeds data to the GPU, to how all of these systems intertwine together through buses. From this level we should have a pretty good architectural view of how all the systems work together at a low level.\n\nFrom here we zoom out into a higher level to driver land and then to OS land and to how a runtime works to load a PE/ELF into memory. Then we go on to show what is inside an executable and how the data got there - from assembler to compiling and linking to tokenizing and parsing to actual code.\nAt this point there should be a good view of how code actually gets executed.\n\nThen we zoom out again to show how code is structured into platform independent layers to abstract networking protocols, file systems, multi-threading, etc. Then how this is used to build core systems for memory allocation, maths, debugging and profiling, etc. Then on to resource systems for textures, materials, 3D models, etc, to the low level renderer where the rendering commands are being dispatched, how data is fetched from the different resources to achieve this. On to the above layers of scene graph management, animation, post processing, HUD, and finally gameplay.\n\nThis gets us all the way back to the highest layer where the game is running. From this point forward the user is free to go to any layer and play around with some parameters to see how the layers above and below are affected."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMWF81HTP",
                    "UU45NNMHT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "5BAF1907-8D34-473F-9C39-A9384A5CB7DB",
        "type": "message",
        "text": "<@UCUSW7WVD> Easy to consume and easy to modify lead to almost opposite criteria for software architecture. I see that as the essence of Knuth\u2019s reusable vs. re-editable.",
        "user": "UJBAJNFLK",
        "ts": "1588335205.401600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rUQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " Easy to consume and easy to modify lead to almost opposite criteria for software architecture. I see that as the essence of Knuth\u2019s reusable vs. re-editable."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588289513.379000",
        "parent_user_id": "U71PMQ1V0"
    },
    {
        "client_msg_id": "c4befa80-cd3d-4c0e-afc3-656607ac3d0a",
        "type": "message",
        "text": "Tangible Functional Programming by Conal Elliott\n\u2022 apps are user-friendly (usable, concrete, visual) but limit functionality, aren't composable\n\u2022 software libraries are programmer-friendly (composable, abstract, syntactic)\nThe dream is: unlimited access to functionality, usably and composably. How?\n\u2022 Unix pipes are a composable text-mode UI, but we lose the GUI.\n\u2022 A Tangible Value is a typed value (model) paired with a GUI (view, controller). GUIs are composable whenever their underlying values are composable: eg unix-like pipelines, function composition.\n<http://conal.net/blog/posts/tangible-functional-programming-a-modern-marriage-of-usability-and-composability>",
        "user": "UJN1TAYEQ",
        "ts": "1588341505.403500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fUr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tangible Functional Programming by Conal Elliott\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "apps are user-friendly (usable, concrete, visual) but limit functionality, aren't composable"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "software libraries are programmer-friendly (composable, abstract, syntactic)"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The dream is: unlimited access to functionality, usably and composably. How?\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Unix pipes are a composable text-mode UI, but we lose the GUI."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A Tangible Value is a typed value (model) paired with a GUI (view, controller). GUIs are composable whenever their underlying values are composable: eg unix-like pipelines, function composition."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http://conal.net/blog/posts/tangible-functional-programming-a-modern-marriage-of-usability-and-composability"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588341505.403500",
        "reply_count": 11,
        "reply_users_count": 5,
        "latest_reply": "1588436154.415700",
        "reply_users": [
            "UJN1TAYEQ",
            "UC21F8Q48",
            "UEQ6M68H0",
            "UA14TGLTC",
            "U010328JA1E"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UAVCC2X70",
                    "UC2A2ARPT",
                    "UMWF81HTP"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "1ed8e886-687b-401e-a306-f902f23e1bcf",
        "type": "message",
        "text": "The closest thing I can think of today in this vein is <https://8bitworkshop.com/> but that is coming at it more from the game programming / content creation side of things. I think the platform _might_ support the observability you are looking for though.\n\nI have written a few NES emulators myself (one in CL, one in Reason) with a goal of tracing the running application and visualizing it in a useful way \u2026 but they are nowhere near finished :upside_down_face:\n\nStill, I think the notion of using runtime tracing to build-up a CFG for a game or ROM and allowing the user to inspect the graph/code rather than just sprites or nametables as most emulators do is promising.",
        "user": "UU45NNMHT",
        "ts": "1588342594.403700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UU45NNMHT",
            "ts": "1588342608.000000"
        },
        "attachments": [
            {
                "title": "8bitworkshop",
                "title_link": "https://8bitworkshop.com/",
                "text": "Ever wanted to be an old-school game programmer? Learn how classic game hardware worked. Write code and see it run instantly.",
                "fallback": "8bitworkshop",
                "from_url": "https://8bitworkshop.com/",
                "service_icon": "https://8bitworkshop.com/favicon.ico",
                "service_name": "8bitworkshop.com",
                "id": 1,
                "original_url": "https://8bitworkshop.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9jCM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The closest thing I can think of today in this vein is "
                            },
                            {
                                "type": "link",
                                "url": "https://8bitworkshop.com/"
                            },
                            {
                                "type": "text",
                                "text": " but that is coming at it more from the game programming / content creation side of things. I think the platform _might_ support the observability you are looking for though.\n\nI have written a few NES emulators myself (one in CL, one in Reason) with a goal of tracing the running application and visualizing it in a useful way \u2026 but they are nowhere near finished "
                            },
                            {
                                "type": "emoji",
                                "name": "upside_down_face"
                            },
                            {
                                "type": "text",
                                "text": "\n\nStill, I think the notion of using runtime tracing to build-up a CFG for a game or ROM and allowing the user to inspect the graph/code rather than just sprites or nametables as most emulators do is promising."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMWF81HTP",
                    "UBSMEUXAA",
                    "UPMFG2571"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "daa2e58d-aef9-4f1b-98ae-ac9f4eaa65a4",
        "type": "message",
        "text": "Note: Conal is not providing a ready to use GUI framework like Flutter or Morphic. He is giving design principles for composable GUIs. An algebra of GUIs. There is hard work remaining to design a general purpose GUI framework based on these principles. Or consider the GUI primitives in your system, and think about whether they could be redesigned for composability.",
        "user": "UJN1TAYEQ",
        "ts": "1588345251.407000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "94Yxd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Note: Conal is not providing a ready to use GUI framework like Flutter or Morphic. He is giving design principles for composable GUIs. An algebra of GUIs. There is hard work remaining to design a general purpose GUI framework based on these principles. Or consider the GUI primitives in your system, and think about whether they could be redesigned for composability."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588341505.403500",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "363E05C0-D52F-481C-BE04-E31CA0AC7198",
        "type": "message",
        "text": "<@U71PMQ1V0> nope! We stepped away at the beginning of the month. Going to try our own thing for a bit and take it from there. :slightly_smiling_face:",
        "user": "UEBG0NPDK",
        "ts": "1588345298.408100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uAah",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U71PMQ1V0"
                            },
                            {
                                "type": "text",
                                "text": " nope! We stepped away at the beginning of the month. Going to try our own thing for a bit and take it from there. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588289513.379000",
        "parent_user_id": "U71PMQ1V0",
        "reactions": [
            {
                "name": "cool",
                "users": [
                    "UE0ETTCG7",
                    "UDQBTJ211"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "5e00b7e7-7386-46d6-bd24-f7539a1a7d14",
        "type": "message",
        "text": "This is another great comment from the <http://Lobste.rs|Lobste.rs> thread <https://lobste.rs/s/qkpwpa/on_usability_editable_software#c_qxnh4i>\n\n&gt; User modifications in computer games are a lot more common than other software types and are even possible in some big budget proprietary software. I think this can offer some insight into how this can work for other software.\n&gt; The most basic version is to move all content/assets (3d models, textures, sound files, etc.) into its own subfolder tree and give it clear human readable names. Users can then simply swap out files.\n&gt; The next level is to abstract how the metadata for high level objects that use these assets is stored out to a text based format like json or xml so that the assets can be reused and new high level objects defined.\n&gt; This can be extended to more and more engine content, including defining behaviours and simple functions in json/xml",
        "user": "UE0ETTCG7",
        "ts": "1588346356.408400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "on the usability of editable software",
                "title_link": "https://lobste.rs/s/qkpwpa/on_usability_editable_software#c_qxnh4i",
                "text": "37 comments",
                "fallback": "on the usability of editable software",
                "thumb_url": "https://lobste.rs/apple-touch-icon-144.png",
                "from_url": "https://lobste.rs/s/qkpwpa/on_usability_editable_software#c_qxnh4i",
                "thumb_width": 144,
                "thumb_height": 144,
                "service_icon": "https://lobste.rs/apple-touch-icon.png",
                "service_name": "lobste.rs",
                "id": 1,
                "original_url": "https://lobste.rs/s/qkpwpa/on_usability_editable_software#c_qxnh4i"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+AQqJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is another great comment from the "
                            },
                            {
                                "type": "link",
                                "url": "http://Lobste.rs",
                                "text": "Lobste.rs"
                            },
                            {
                                "type": "text",
                                "text": " thread "
                            },
                            {
                                "type": "link",
                                "url": "https://lobste.rs/s/qkpwpa/on_usability_editable_software#c_qxnh4i"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "User modifications in computer games are a lot more common than other software types and are even possible in some big budget proprietary software. I think this can offer some insight into how this can work for other software."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The most basic version is to move all content/assets (3d models, textures, sound files, etc.) into its own subfolder tree and give it clear human readable names. Users can then simply swap out files."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The next level is to abstract how the metadata for high level objects that use these assets is stored out to a text based format like json or xml so that the assets can be reused and new high level objects defined."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This can be extended to more and more engine content, including defining behaviours and simple functions in json/xml"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588289513.379000",
        "parent_user_id": "U71PMQ1V0"
    },
    {
        "client_msg_id": "9a66d085-7670-45b0-83a1-11505806e36b",
        "type": "message",
        "text": "After text editors and terminals (which have the unfair advantage of explicitly targeting programmers, who are the best position to do the editing),\ncomputer games might be the most widely-edited software there is?\n\nI did an analysis of the most popular creative apps across industries, and one of the patterns is extensibility  (<https://blog.robenkleene.com/2019/08/07/apples-app-stores-have-failed-creative-apps/>). Now that I look for it I start seeing it everywhere, for example as far as I can tell, this chain is possible: Open an After Effects project, add a Cinema 4D 3D model to it via a plugin, then open a Houdini project in Cinema 4D via a another plugin, then render it all via a third-party renderer like Redshift. Now I'm not sure if all of that would actually work, but it's fascinating how flexible the workflows for professional creative apps are, especially compared to consumer software. Like compare that to just trying to get something like Apple Notes to talk to Excel...",
        "user": "UE0ETTCG7",
        "ts": "1588346909.408700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Roben Kleene",
                "title": "Apple\u2019s App Stores Have Failed Creative Apps",
                "title_link": "https://blog.robenkleene.com/2019/08/07/apples-app-stores-have-failed-creative-apps/",
                "text": "The appeal of the Mac has always been that it\u2019s a great platform for making things. Software is the great equalizer: It\u2019s inexpensive, sometimes even free, and it lets you do things that used to only be possible with expensive, specialized hardware. Software is Andy Warhol\u2019s Coke for creators.",
                "fallback": "Roben Kleene: Apple\u2019s App Stores Have Failed Creative Apps",
                "ts": 1565136000,
                "from_url": "https://blog.robenkleene.com/2019/08/07/apples-app-stores-have-failed-creative-apps/",
                "service_icon": "https://blog.robenkleene.com/assets/favicon/57x57.png",
                "id": 1,
                "original_url": "https://blog.robenkleene.com/2019/08/07/apples-app-stores-have-failed-creative-apps/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yQ7TR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "After text editors and terminals (which have the unfair advantage of explicitly targeting programmers, who are the best position to do the editing),\ncomputer games might be the most widely-edited software there is?\n\nI did an analysis of the most popular creative apps across industries, and one of the patterns is extensibility  ("
                            },
                            {
                                "type": "link",
                                "url": "https://blog.robenkleene.com/2019/08/07/apples-app-stores-have-failed-creative-apps/"
                            },
                            {
                                "type": "text",
                                "text": "). Now that I look for it I start seeing it everywhere, for example as far as I can tell, this chain is possible: Open an After Effects project, add a Cinema 4D 3D model to it via a plugin, then open a Houdini project in Cinema 4D via a another plugin, then render it all via a third-party renderer like Redshift. Now I'm not sure if all of that would actually work, but it's fascinating how flexible the workflows for professional creative apps are, especially compared to consumer software. Like compare that to just trying to get something like Apple Notes to talk to Excel..."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588289513.379000",
        "parent_user_id": "U71PMQ1V0"
    },
    {
        "client_msg_id": "d75cbe93-ebc2-47d5-81de-4c7ab300b255",
        "type": "message",
        "text": "There's been lots of research on GUI layout mechanisms (you might call this spatial composability), and on ways to mitigate callback hell in the original imperative GUI frameworks. But Conor is asking us to think about a new topic: semantic composability. When you compose two \"meanings\" (denotations, values), a new GUI is generated for viewing/editing/invoking this composite meaning.\n\nI didn't have the proper vocabulary for even thinking about this issue before.",
        "user": "UJN1TAYEQ",
        "ts": "1588351254.409600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HMsU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's been lots of research on GUI layout mechanisms (you might call this spatial composability), and on ways to mitigate callback hell in the original imperative GUI frameworks. But Conor is asking us to think about a new topic: semantic composability. When you compose two \"meanings\" (denotations, values), a new GUI is generated for viewing/editing/invoking this composite meaning.\n\nI didn't have the proper vocabulary for even thinking about this issue before."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588341505.403500",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "418c1231-be8a-4c0f-b536-231ace5bd4c8",
        "type": "message",
        "text": "Came across this the other day which is quite neat <http://thlorenz.com/visulator/>",
        "user": "UDQBTJ211",
        "ts": "1588356646.409800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G6R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Came across this the other day which is quite neat "
                            },
                            {
                                "type": "link",
                                "url": "http://thlorenz.com/visulator/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP"
    },
    {
        "client_msg_id": "e72f9c08-74d1-4385-973e-0f48fc737226",
        "type": "message",
        "text": "&gt; Would be great if there was a web version of Nand2Tetris\nAbsolutely. It's been on my fantasy todo list since I took that course",
        "user": "UDQBTJ211",
        "ts": "1588356699.410000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UDQBTJ211",
            "ts": "1588356750.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "px9l",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Would be great if there was a web version of Nand2Tetris"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Absolutely. It's been on my fantasy todo list since I took that course"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588307376.386900",
        "parent_user_id": "UMWF81HTP",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMWF81HTP"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9c276e25-998f-4049-bc7b-967ac30c8187",
        "type": "message",
        "text": "I spent some time looking into flutter. They have this RenderObject base class that is almost exclusively used through a RenderBox subclass, but in their examples they also have a RenderSector subclass, which does polar coordinate widgets. This was my strawman non-rectilinear example that I was thinking about. So I think their RenderObject interface is probably more or less what I was looking for in terms of layout generality.",
        "user": "UKDM3GLAJ",
        "ts": "1588363414.410300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fbR4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I spent some time looking into flutter. They have this RenderObject base class that is almost exclusively used through a RenderBox subclass, but in their examples they also have a RenderSector subclass, which does polar coordinate widgets. This was my strawman non-rectilinear example that I was thinking about. So I think their RenderObject interface is probably more or less what I was looking for in terms of layout generality."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ"
    },
    {
        "type": "message",
        "text": "For anybody who's curious and doesn't want to install the flutter sdk, this is what their sector layout looks like",
        "files": [
            {
                "id": "F0133KBBNP6",
                "created": 1588363518,
                "timestamp": 1588363518,
                "name": "Screenshot_20200501-160009~2.jpg",
                "title": "Screenshot_20200501-160009~2.jpg",
                "mimetype": "image/jpeg",
                "filetype": "jpg",
                "pretty_type": "JPEG",
                "user": "UKDM3GLAJ",
                "editable": false,
                "size": 28112,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F0133KBBNP6/screenshot_20200501-160009_2.jpg",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F0133KBBNP6/download/screenshot_20200501-160009_2.jpg",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F0133KBBNP6-02fc4bdcb5/screenshot_20200501-160009_2_64.jpg",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F0133KBBNP6-02fc4bdcb5/screenshot_20200501-160009_2_80.jpg",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F0133KBBNP6-02fc4bdcb5/screenshot_20200501-160009_2_360.jpg",
                "thumb_360_w": 360,
                "thumb_360_h": 350,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F0133KBBNP6-02fc4bdcb5/screenshot_20200501-160009_2_480.jpg",
                "thumb_480_w": 480,
                "thumb_480_h": 467,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F0133KBBNP6-02fc4bdcb5/screenshot_20200501-160009_2_160.jpg",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F0133KBBNP6-02fc4bdcb5/screenshot_20200501-160009_2_720.jpg",
                "thumb_720_w": 720,
                "thumb_720_h": 700,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F0133KBBNP6-02fc4bdcb5/screenshot_20200501-160009_2_800.jpg",
                "thumb_800_w": 800,
                "thumb_800_h": 778,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F0133KBBNP6-02fc4bdcb5/screenshot_20200501-160009_2_960.jpg",
                "thumb_960_w": 960,
                "thumb_960_h": 933,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F0133KBBNP6-02fc4bdcb5/screenshot_20200501-160009_2_1024.jpg",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 996,
                "original_w": 1080,
                "original_h": 1050,
                "thumb_tiny": "AwAuADDMqxDas43P8q/qagXOcjHHrV+G4EnB+V/SpmpJXSM5uW0RVtol/gz9aGtom/gx9KlbbGAZXC56Z/woXbICYnDY64/wrn5nuT7KfcozWrINyfMv6iq9a1ULqLy5Mj7rVrCd9GOE3flluRr0paavSnV6dOzgi2Md2dtzEk+ppY5GikDqcEUhX0qa1hEkoDHAHOPWuN02tGhuSSuWZbpA2Qj/AIjFVp7gSqF24wc5zWpVPUGAjVcDJNT7JR1OeNRTntqUAcGpAc1HQDitadTk06HQ0SUqsUYMvUUzdRurd1YNCsannp5IkJwpFZs8pmkLH8B6VHknvRXK3cmFNR1P/9k=",
                "permalink": "https://futureofcoding.slack.com/files/UKDM3GLAJ/F0133KBBNP6/screenshot_20200501-160009_2.jpg",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F0133KBBNP6-e5e60d8af2",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": true,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1mS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For anybody who's curious and doesn't want to install the flutter sdk, this is what their sector layout looks like"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UKDM3GLAJ",
        "display_as_bot": false,
        "ts": "1588363543.410500",
        "client_msg_id": "e0e4115a-18b4-4091-a3e9-6de9c3f7a46d",
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ"
    },
    {
        "client_msg_id": "5941cf4e-e788-4a63-b0e6-69906d6f0ba4",
        "type": "message",
        "text": "<@U71PMQ1V0> do you have a link to the extensible web layouts proposal? I haven\u2019t been able to find it.",
        "user": "UKDM3GLAJ",
        "ts": "1588363837.411000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "US4u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U71PMQ1V0"
                            },
                            {
                                "type": "text",
                                "text": " do you have a link to the extensible web layouts proposal? I haven\u2019t been able to find it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ"
    },
    {
        "client_msg_id": "b8fbcb35-9b73-491c-9d2b-840fed0ee53f",
        "type": "message",
        "text": "Flutter to my understanding is a unique beast among graphical layers. It renders the entire UI into bitmap form, and sends the bitmaps to the underlying OS. So It is effectively its own virtual machine that interfaces with the world by emitting bitmaps. Only an entity with Google's money would attempt such a huge task. My own Beads project maps my language concepts into the lower layers, which for web apps is JS.  Flutter is its own universe, and of course is rather tied to the Dart language.",
        "user": "UEQ6M68H0",
        "ts": "1588365121.411400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ChPr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Flutter to my understanding is a unique beast among graphical layers. It renders the entire UI into bitmap form, and sends the bitmaps to the underlying OS. So It is effectively its own virtual machine that interfaces with the world by emitting bitmaps. Only an entity with Google's money would attempt such a huge task. My own Beads project maps my language concepts into the lower layers, which for web apps is JS.  Flutter is its own universe, and of course is rather tied to the Dart language."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588186429.337500",
        "parent_user_id": "UKDM3GLAJ"
    },
    {
        "client_msg_id": "8657bb9e-1657-4409-8aee-ede67c126025",
        "type": "message",
        "text": "<@UEQ6M68H0> I\u2019d recommend a second look at Conal\u2019s work. Tangible Functional Values is not about GUI-building. It\u2019s about value/product/output creation. The aim is to make the programming experience tangible and more approachable for non-linear thinkers. The non-composability of Unix pipes is one of the motives for the work\u2014instead of the (untyped) single-output-single-input of pipes, Tangible Functional Values lets any (type-compatible) output feed into any (type-compatible) input. More importantly, this isn\u2019t accomplished by a nodes-and-wires interface, but by a manipulable display of the values (the output), i.e. a display of \u201cwhat you have\u201d. So you feel like you are manipulating the things rather than the computation. Conal\u2019s goal wasn\u2019t to create a usable system, but to reduce this idea to its core elements, and he did so admirably. Centering values/outputs in the programming experience is moderately rare in FoC systems (and is perhaps a key feature of spreadsheets!). I like to call this mode of programming \u201cvalue-centric\u201d (as opposed to algorithm-centric or AST-centric). Of the value-centric programming systems I\u2019m aware of, Conal\u2019s is always the example I think of first because of its elegant simplicity (even if it is missing a few features to make it practical!).",
        "user": "UC21F8Q48",
        "ts": "1588368031.411700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC21F8Q48",
            "ts": "1588368053.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FuoMa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " I\u2019d recommend a second look at Conal\u2019s work. Tangible Functional Values is not about GUI-building. It\u2019s about value/product/output creation. The aim is to make the programming experience tangible and more approachable for non-linear thinkers. The non-composability of Unix pipes is one of the motives for the work\u2014instead of the (untyped) single-output-single-input of pipes, Tangible Functional Values lets any (type-compatible) output feed into any (type-compatible) input. More importantly, this isn\u2019t accomplished by a nodes-and-wires interface, but by a manipulable display of the values (the output), i.e. a display of \u201cwhat you have\u201d. So you feel like you are manipulating the things rather than the computation. Conal\u2019s goal wasn\u2019t to create a usable system, but to reduce this idea to its core elements, and he did so admirably. Centering values/outputs in the programming experience is moderately rare in FoC systems (and is perhaps a key feature of spreadsheets!). I like to call this mode of programming \u201cvalue-centric\u201d (as opposed to algorithm-centric or AST-centric). Of the value-centric programming systems I\u2019m aware of, Conal\u2019s is always the example I think of first because of its elegant simplicity (even if it is missing a few features to make it practical!)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588341505.403500",
        "parent_user_id": "UJN1TAYEQ",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726",
                    "UC2A2ARPT",
                    "UMWF81HTP",
                    "UD31LGQKB"
                ],
                "count": 4
            }
        ]
    }
]