[
    {
        "client_msg_id": "0112efa3-d929-43f3-b718-c2509031c841",
        "type": "message",
        "text": "to my knowledge the original designer for Swift left Apple, and they are now pursuing a kitchen sink approach to the language, with each version adding more crap. Swift used to be a pretty modest language, but is turning into a monster. Apple is pursuing a strategy of constant enhancement to the language perhaps so as to indirectly block Swift from stabilizing and becoming an Android platform language.  Not that there was much danger, because a great deal of the language is dictated by the Cocoa underpinnings of OSX API sets. At least it has a very tight spec; the old ObjectiveC language that Jobs used at NextStep lacked a manual, and the spec was \"whatever the compiler does\". I wonder what the author of Swift will come up with next; not being tethered to OSX would give you a lot of freedom.",
        "user": "UEQ6M68H0",
        "ts": "1588464075.440000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yRFU0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "to my knowledge the original designer for Swift left Apple, and they are now pursuing a kitchen sink approach to the language, with each version adding more crap. Swift used to be a pretty modest language, but is turning into a monster. Apple is pursuing a strategy of constant enhancement to the language perhaps so as to indirectly block Swift from stabilizing and becoming an Android platform language.  Not that there was much danger, because a great deal of the language is dictated by the Cocoa underpinnings of OSX API sets. At least it has a very tight spec; the old ObjectiveC language that Jobs used at NextStep lacked a manual, and the spec was \"whatever the compiler does\". I wonder what the author of Swift will come up with next; not being tethered to OSX would give you a lot of freedom."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588464075.440000",
        "reply_count": 5,
        "reply_users_count": 4,
        "latest_reply": "1588541038.476700",
        "reply_users": [
            "UC2A2ARPT",
            "ULM3U6275",
            "U5STGTB3J",
            "UFV8P4472"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "7f1cdf67-aa0e-48df-a482-2bb9023ec9c6",
        "type": "message",
        "text": "&gt; I wonder what the author of Swift will come up with next\nThere was a fun interview with Lattner on the Accidental Tech Podcast a few weeks ago about just that: <https://atp.fm/episodes/371>\n\nThe short version\u00a0\u2014 working at Google (previously) and the RISC-V company SiFive (now), creating a new superset of LLVM IR called MLIR, which (he claims) will allow for Swift to be used with TensorFlow (et al.) to great effect.",
        "user": "UC2A2ARPT",
        "ts": "1588476771.454700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1588476925.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p6z",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wonder what the author of Swift will come up with next"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThere was a fun interview with Lattner on the Accidental Tech Podcast a few weeks ago about just that: "
                            },
                            {
                                "type": "link",
                                "url": "https://atp.fm/episodes/371"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe short version\u00a0\u2014 working at Google (previously) and the RISC-V company SiFive (now), creating a new superset of LLVM IR called MLIR, which (he claims) will allow for Swift to be used with TensorFlow (et al.) to great effect."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588464075.440000",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "66446810-AFC3-4135-AECC-99CE513BF769",
        "type": "message",
        "text": "Does this not count as a manual? <http://www.gnustep.org/resources/documentation/ObjectivCBook.pdf|http://www.gnustep.org/resources/documentation/ObjectivCBook.pdf>",
        "user": "ULM3U6275",
        "ts": "1588483559.456000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F5t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does this not count as a manual? "
                            },
                            {
                                "type": "link",
                                "url": "http://www.gnustep.org/resources/documentation/ObjectivCBook.pdf",
                                "text": "http://www.gnustep.org/resources/documentation/ObjectivCBook.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588464075.440000",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "768A9F10-764A-4099-8F88-CFA1ABF5CD05",
        "type": "message",
        "text": "Swift comes with that strong Apple flavor that puts some people off without even looking at it. However, if you\u2019re interested in the future of programming and you\u2019re ignoring Swift, you\u2019re definitely missing out on some cutting edge language design developments.",
        "user": "U5STGTB3J",
        "ts": "1588502515.471500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Muy8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Swift comes with that strong Apple flavor that puts some people off without even looking at it. However, if you\u2019re interested in the future of programming and you\u2019re ignoring Swift, you\u2019re definitely missing out on some cutting edge language design developments."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588464075.440000",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "88b4e333-fd76-4299-ab91-052a82d385dc",
        "type": "message",
        "text": "I'm archiving 2019 and it seems this slack started October 11th?",
        "user": "UBN9AFS0N",
        "ts": "1588534888.473400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rAHD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm archiving 2019 and it seems this slack started October 11th?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588534888.473400",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1588553769.477300",
        "reply_users": [
            "UBN9AFS0N",
            "UFV8P4472",
            "UCUSW7WVD"
        ],
        "subscribed": true,
        "last_read": "1588553769.477300"
    },
    {
        "client_msg_id": "7265ba4b-a1e9-4a9a-94a9-3389775348b4",
        "type": "message",
        "text": "welp, can't see past october 11th from the api :confused:",
        "user": "UBN9AFS0N",
        "ts": "1588538055.475800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xndm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "welp, can't see past october 11th from the api "
                            },
                            {
                                "type": "emoji",
                                "name": "confused"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588534888.473400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "9bc9e0cd-9f6d-4641-a8c8-ecb8fbf6ef3f",
        "type": "message",
        "text": "\u2026 such as: <https://tryolabs.com/blog/2020/04/02/swift-googles-bet-on-differentiable-programming/>",
        "user": "UFV8P4472",
        "ts": "1588540616.476300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Swift: Google's bet on differentiable programming | Tryolabs Blog",
                "title_link": "https://tryolabs.com/blog/2020/04/02/swift-googles-bet-on-differentiable-programming/",
                "text": "Google's plans on making Swift the first mainstream language with first-class language-integrated differentiable programming capabilities. What's so cool about Swift?",
                "fallback": "Swift: Google's bet on differentiable programming | Tryolabs Blog",
                "image_url": "https://tryolabs.com/images/blog/social/2020-04-02-Swift.143f7a10.png",
                "from_url": "https://tryolabs.com/blog/2020/04/02/swift-googles-bet-on-differentiable-programming/",
                "image_width": 476,
                "image_height": 250,
                "image_bytes": 361672,
                "service_icon": "https://tryolabs.com/apple-touch-icon.png",
                "service_name": "tryolabs.com",
                "id": 1,
                "original_url": "https://tryolabs.com/blog/2020/04/02/swift-googles-bet-on-differentiable-programming/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HKF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\u2026 such as: "
                            },
                            {
                                "type": "link",
                                "url": "https://tryolabs.com/blog/2020/04/02/swift-googles-bet-on-differentiable-programming/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588464075.440000",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "6875dd5c-f7ef-4baa-9a59-29406d192536",
        "type": "message",
        "text": "It\u2019s worth skimming the Google team\u2019s doc explaining why they picked Swift ( <https://github.com/tensorflow/swift/blob/master/docs/WhySwiftForTensorFlow.md> ). It\u2019s not that Swift has any special features, more that it has the right mix of strictness, usability and popularity.",
        "user": "UFV8P4472",
        "ts": "1588541038.476700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "[tensorflow/swift] docs/WhySwiftForTensorFlow.md",
                "text": "```\n# Why *Swift* for TensorFlow?\n\n* Date: April 2018\n\nThe core [graph program extraction algorithm](GraphProgramExtraction.md), [automatic differentiation](AutomaticDifferentiation.md), and [Python language interoperability](PythonInteroperability.md) features of Swift for TensorFlow can be implemented for other programming languages, and we are occasionally asked why we didn\u2019t use some other one for this project.\n\nThe engineers on the project were previously familiar with Swift (and several other languages), but the choice was guided by the goals of our project, which imposed specific technical requirements (explained below).  This choice was also discussed extensively, debated with coworkers and other interested engineers, and we concluded that Swift was the best direction.  In this document we're sharing our deliberation process with the community to help explain our decisions.\n\nThat said, while our choice of language was guided by our specific project goals, we would love to see wider application of these techniques and ideas in the context of other programming languages!  If you are interested in pursuing a similar project, please reach out to us and we will happily share our expertise.\n\n### How we got here\n\nAs discussed in the [design overview document](DesignOverview.md) our project goal is to improve usability of TensorFlow.  We quickly realized that our core [static analysis-based Graph Program Extraction algorithm](GraphProgramExtraction.md) would not work well for Python given its highly dynamic nature.  This led us down the path of having to pick another language to work with, and we wanted to approach this methodically.  As such, we defined goals for the project, explored which properties of a programming language are important to achieve those goals, and then evaluated a lot of languages against these properties.  You already know the outcome--we eventually settled on Swift.\n\nBelow we explain [our project goals](#project-goals), discuss the [programming language properties](#properties-of-programming-languages) that contribute to these goals, provide a short [evaluation of specific languages](#which-languages-fit-our-project-requirements) against those goals, and discuss the [pros and cons of Swift](#evaluating-swift-against-our-language-properties) specifically.\n\n## Project goals\n\nTensorFlow is a world-class machine learning framework used by a wide range of different people for lots of different things.  Our project goal is to provide a new interface to TensorFlow that builds on TensorFlow\u2019s power and capabilities, while taking its usability to a whole new level.  Our aim is to make machine learning researchers (both theoretical and applied), production engineers deploying at scale, and anyone else using TensorFlow more productive and joyful without sacrificing anything that already makes TensorFlow great.\n\nWe defined goals around the properties that are important to maintain and improve in our system:\n\n**Expressiveness:** We want a define-by-run model that feels like you\u2019re directly programming against a numeric API and the host language (like NumPy), without an explicit graph abstraction in the way.  We should not put constraints on native control flow, use of native data structures like dictionaries, or other things that might feel natural.\n\n**High Performance:** We want to get the most out of our hardware and accelerators, including CPUs, GPUs, Cloud TPUs, and future accelerators being developed across the industry.  Performance is important for production deployments to save megawatts, but is just as important for researchers who want fast turnaround time on experiments.\n\n**Hardware Abstraction:** It should be possible to build a model without embedding hardware-specific information in it, and get \"good\" performance out of the hardware.  We should provide the (opt-in) ability to further tune the model for specific accelerators to achieve full peak performance, and make sure that is a low-friction path that doesn\u2019t require a rewrite of a model.\n\n**Large, Dynamic, and Self-Modifying Models:** We don\u2019t know what ML models will look like in 5 years, but it seems clear they will be bigger, sparser, and less rigidly structured.  We should solve today\u2019s problems and embrace the next generation that researchers will come up with as compute continues to get cheaper.  We should fully support dynamic models like attentional models, large models like [mixture of experts](<https://en.wikipedia.org/wiki/Mixture_of_experts>), as well as [reinforcement learning models](<https://en.wikipedia.org/wiki/Reinforcement_learning>) that require frequent interactions with real or simulated environments (e.g. an Atari game).\n\n**Performance Predictability:** A key aspect of making a large and flexible system usable is to make it predictable: while it should be possible to express anything, it should be easy to predict what will run efficiently, and the tools should provide feedback about performance cliffs.  Simple and predictable tooling is preferable to layers of magic that try to paper over the most common problems.\n\n**Fast Iteration Time:** We need to enable productive researcher workflows, where the tools dissolve out of the way, allowing the user to focus on the data and math.\n\n**Debuggability and Introspection:** An important part of R&amp;D is figuring out what is happening in a model, diagnosing failures, and figuring out what to change.  A system that diagnoses more errors earlier (e.g. shape mismatches at compile time) is more usable than one that only catches them at run time.\n\n**High-End User Experience:** We should meet the users where they are, regardless of whether they like UI, console, or batch processing experiences.  We should support terminal users (e.g. with an interpreter/REPL), Jupyter notebooks, users who prefer UNIX `#!` scripts, and other common patterns.\n\n**Flexible Deployment:** We need to be able to deploy to inference-only mobile targets through [TFLite](<https://www.tensorflow.org/mobile/tflite/>) in addition to supporting inference on high-end accelerators like GPUs and Cloud TPUs.  We need to support production teams that want minimal dependencies, e.g. by being able to produce a single .o file for the CPU.\n\n**Fast Deployment:** The ML space is moving really fast: we should remove obstacles in place between research and production deployment wherever possible.  Requiring a significant rewrite of \"research code\" to put it \"into production\" would be harmful both because it slows this down, but also because it makes it very difficult to iteratively improve production models.  Rewrites can also introduce very subtle and pernicious errors.\n\n**Best-of-class [Automatic Differentiation](<https://en.wikipedia.org/wiki/Automatic_differentiation>) (AD):** AD is a key feature of TensorFlow, but we can improve its user experience and pull in more advanced technologies from the AD communities.  We should support higher-order AD, as well as the best-in-class implementations like specialized adjoints, easy calculation of Jacobians, per-example gradients, checkpointing, etc.\n\n**Embrace TensorFlow Graph Ecosystem:** GraphDef (and SavedModel) are the key for interchange, transport, deployment, integration with visualization tools etc.\n\nAs you can see, this isn\u2019t a short list of goals, and this isn\u2019t easy to achieve.  That said, we do believe we can do this in a single coherent system, and TensorFlow\u2019s mature technology handles a lot of this for us.\n\nIt is worth noting that as of our launch in April 2018, Swift for TensorFlow is not yet solving some of these goals (e.g. improved deployment and self-modifying models) but we have ideas that we expect will develop into great steps forward and cover each of these over time.\n\n## Properties of programming languages\n\nProgramming languages are an aggregation of a bunch of largely orthogonal design decisions (and their consequences) manifested into a single inseparable artifact.  Each language offe\u2026",
                "title": "docs/WhySwiftForTensorFlow.md",
                "footer": "<https://github.com/tensorflow/swift|tensorflow/swift>",
                "id": 1,
                "title_link": "https://github.com/tensorflow/swift/blob/master/docs/WhySwiftForTensorFlow.md",
                "footer_icon": "https://github.githubassets.com/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https://github.com/tensorflow/swift/blob/master/docs/WhySwiftForTensorFlow.md",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L6ql",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It\u2019s worth skimming the Google team\u2019s doc explaining why they picked Swift ( "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/tensorflow/swift/blob/master/docs/WhySwiftForTensorFlow.md"
                            },
                            {
                                "type": "text",
                                "text": " ). It\u2019s not that Swift has any special features, more that it has the right mix of strictness, usability and popularity."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588464075.440000",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "0f469a08-b30e-4813-ae72-f7145f41f350",
        "type": "message",
        "text": "The FoC Slack is on the free plan, no? If so, that\u2019s why. <https://slack.com/help/articles/115002422943-Message-file-and-app-limits-on-the-free-version-of-Slack>",
        "user": "UFV8P4472",
        "ts": "1588541461.477000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Slack Help Center",
                "title": "Message, file, and app limits on the free version of Slack",
                "title_link": "https://slack.com/help/articles/115002422943-Message-file-and-app-limits-on-the-free-version-of-Slack",
                "text": "You can use the free version of Slack for as long as you'd like, and there's no limit to the number of members who can be invited, but there are a few usage limits to consider: Message visibility...",
                "fallback": "Slack Help Center: Message, file, and app limits on the free version of Slack",
                "thumb_url": "https://a.slack-edge.com/80588/marketing/img/meta/slack_hash_256.png",
                "from_url": "https://slack.com/help/articles/115002422943-Message-file-and-app-limits-on-the-free-version-of-Slack",
                "thumb_width": 256,
                "thumb_height": 256,
                "service_icon": "https://a.slack-edge.com/80588/marketing/img/meta/favicon-32.png",
                "id": 1,
                "original_url": "https://slack.com/help/articles/115002422943-Message-file-and-app-limits-on-the-free-version-of-Slack"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c/vyI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The FoC Slack is on the free plan, no? If so, that\u2019s why. "
                            },
                            {
                                "type": "link",
                                "url": "https://slack.com/help/articles/115002422943-Message-file-and-app-limits-on-the-free-version-of-Slack"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588534888.473400",
        "parent_user_id": "UBN9AFS0N"
    }
]