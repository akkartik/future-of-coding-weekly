[
    {
        "client_msg_id": "23ae4111-43a8-4607-8481-03b5460536ed",
        "type": "message",
        "text": "*Programming language design* - recommend *videos*/papers/conferences/journals.\nPlease can you recommend any good videos/papers/conferences/journals on programming language design.\nI liked these :\n\nRobert Virding - On Language Design (Lambda Days 2016) - <https://www.youtube.com/watch?v=f3rP3JRq7Mw>\n- Why a programming language becomes messy. Erlang, for the phone system. Argues that we need more domain specific languages, rather than more kitchen sink style languages.\n\nJavaScript: The Good Parts - (Google Tech Talks) - <https://www.youtube.com/watch?v=hQVTIJBZook>\n- Classic talk. While JavaScript has many problems, he covers the Good Parts of the language.\n\nAlan Kay - Programming Languages &amp; Programming (2013) - <https://youtu.be/prIwpKL57dM>\u00a0\n- Explains the need for better programming languages. Covers problems like, maintenance, Lines of code reduction, demos a very old scratch like system, and an old drawing system.\n\nWiki of Journals, publications, and conferences - <https://en.wikipedia.org/wiki/Programming_language_theory#Journals,_publications,_and_conferences>\n- I read a few, was hard to find topics of interest.  Would be handy if they were grouped by problem domain.",
        "user": "UP6G25H35",
        "ts": "1589849879.462200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UP6G25H35",
            "ts": "1589896239.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AZQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Programming language design",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " - recommend "
                            },
                            {
                                "type": "text",
                                "text": "videos",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "/papers/conferences/journals.\nPlease can you recommend any good videos/papers/conferences/journals on programming language design.\nI liked these :\n\nRobert Virding - On Language Design (Lambda Days 2016) - "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=f3rP3JRq7Mw"
                            },
                            {
                                "type": "text",
                                "text": "\n- Why a programming language becomes messy. Erlang, for the phone system. Argues that we need more domain specific languages, rather than more kitchen sink style languages.\n\nJavaScript: The Good Parts - (Google Tech Talks) - "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=hQVTIJBZook"
                            },
                            {
                                "type": "text",
                                "text": "\n- Classic talk. While JavaScript has many problems, he covers the Good Parts of the language.\n\nAlan Kay - Programming Languages & Programming (2013) - "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/prIwpKL57dM"
                            },
                            {
                                "type": "text",
                                "text": "\u00a0\n- Explains the need for better programming languages. Covers problems like, maintenance, Lines of code reduction, demos a very old scratch like system, and an old drawing system.\n\nWiki of Journals, publications, and conferences - "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Programming_language_theory#Journals,_publications,_and_conferences"
                            },
                            {
                                "type": "text",
                                "text": "\n- I read a few, was hard to find topics of interest.  Would be handy if they were grouped by problem domain."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589849879.462200",
        "reply_count": 15,
        "reply_users_count": 5,
        "latest_reply": "1590018065.009200",
        "reply_users": [
            "UHWC9PXBL",
            "UC2A2ARPT",
            "UN57U8V53",
            "UAVCC2X70",
            "UN9SCH5RD"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "U013HU44GLS",
                    "UT9TWSZB5"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "e160ce65-55d2-480d-b26a-c357b3641f56",
        "type": "message",
        "text": "That Cube Composer is delightful.",
        "user": "UA14TGLTC",
        "ts": "1589854747.462500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kSgb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That Cube Composer is delightful."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589748817.440800",
        "parent_user_id": "UDKTZSD6H"
    },
    {
        "client_msg_id": "71DE184C-6203-4E25-AF89-9EFBAC6F438C",
        "type": "message",
        "text": "<https://youtu.be/3ka4KY7TMTU|https://youtu.be/3ka4KY7TMTU>",
        "user": "UHWC9PXBL",
        "ts": "1589858333.463000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Self and Self: Whys and Wherefores",
                "title_link": "https://youtu.be/3ka4KY7TMTU",
                "author_name": "Stanford",
                "author_link": "https://www.youtube.com/user/StanfordUniversity",
                "thumb_url": "https://i.ytimg.com/vi/3ka4KY7TMTU/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Self and Self: Whys and Wherefores",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https://www.youtube.com/embed/3ka4KY7TMTU?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https://youtu.be/3ka4KY7TMTU",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/3ka4KY7TMTU"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K=F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://youtu.be/3ka4KY7TMTU",
                                "text": "https://youtu.be/3ka4KY7TMTU"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589849879.462200",
        "parent_user_id": "UP6G25H35",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "F915EC24-E4AA-4D9C-AD7C-06DC403C7F9D",
        "type": "message",
        "text": "<https://youtu.be/Z7dct6QG0cE|https://youtu.be/Z7dct6QG0cE>",
        "user": "UHWC9PXBL",
        "ts": "1589858423.463400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Newspeak: A Principled Dynamic Language",
                "title_link": "https://youtu.be/Z7dct6QG0cE",
                "author_name": "GoogleTechTalks",
                "author_link": "https://www.youtube.com/user/GoogleTechTalks",
                "thumb_url": "https://i.ytimg.com/vi/Z7dct6QG0cE/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Newspeak: A Principled Dynamic Language",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/Z7dct6QG0cE?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/Z7dct6QG0cE",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/Z7dct6QG0cE"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MQ+h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://youtu.be/Z7dct6QG0cE",
                                "text": "https://youtu.be/Z7dct6QG0cE"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589849879.462200",
        "parent_user_id": "UP6G25H35"
    },
    {
        "client_msg_id": "2BC89D84-BE98-4C1D-B3AC-C64B61EFCE05",
        "type": "message",
        "text": "<https://youtu.be/f_0QlhYlS8g|https://youtu.be/f_0QlhYlS8g>",
        "user": "UHWC9PXBL",
        "ts": "1589858441.463800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Factor: an extensible interactive language",
                "title_link": "https://youtu.be/f_0QlhYlS8g",
                "author_name": "GoogleTechTalks",
                "author_link": "https://www.youtube.com/user/GoogleTechTalks",
                "thumb_url": "https://i.ytimg.com/vi/f_0QlhYlS8g/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Factor: an extensible interactive language",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https://www.youtube.com/embed/f_0QlhYlS8g?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https://youtu.be/f_0QlhYlS8g",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/f_0QlhYlS8g"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2I2T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://youtu.be/f_0QlhYlS8g",
                                "text": "https://youtu.be/f_0QlhYlS8g"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589849879.462200",
        "parent_user_id": "UP6G25H35"
    },
    {
        "client_msg_id": "9F565379-8A74-4899-9725-32C5905F1DD8",
        "type": "message",
        "text": "<https://youtu.be/_IgqJr8jG8M|https://youtu.be/_IgqJr8jG8M>",
        "user": "UHWC9PXBL",
        "ts": "1589858450.464200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Stanford Seminar - Concatenative Programming: From Ivory to Metal",
                "title_link": "https://youtu.be/_IgqJr8jG8M",
                "author_name": "stanfordonline",
                "author_link": "https://www.youtube.com/user/stanfordonline",
                "thumb_url": "https://i.ytimg.com/vi/_IgqJr8jG8M/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Stanford Seminar - Concatenative Programming: From Ivory to Metal",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/_IgqJr8jG8M?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/_IgqJr8jG8M",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/_IgqJr8jG8M"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/aW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://youtu.be/_IgqJr8jG8M",
                                "text": "https://youtu.be/_IgqJr8jG8M"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589849879.462200",
        "parent_user_id": "UP6G25H35"
    },
    {
        "client_msg_id": "094FA9DB-BC33-4AFF-9B32-ED7F0EBA4003",
        "type": "message",
        "text": "<https://youtu.be/Z4oYSByyRak|https://youtu.be/Z4oYSByyRak>",
        "user": "UHWC9PXBL",
        "ts": "1589858460.464600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Zig: A programming language designed for robustness, optimality, and clarity \u2013\u00a0 Andrew Kelley",
                "title_link": "https://youtu.be/Z4oYSByyRak",
                "author_name": "Recurse Center",
                "author_link": "https://www.youtube.com/channel/UCR1uNZFzyXOuty6FK8hXGxQ",
                "thumb_url": "https://i.ytimg.com/vi/Z4oYSByyRak/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Zig: A programming language designed for robustness, optimality, and clarity \u2013\u00a0 Andrew Kelley",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/Z4oYSByyRak?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/Z4oYSByyRak",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/Z4oYSByyRak"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Cs41",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://youtu.be/Z4oYSByyRak",
                                "text": "https://youtu.be/Z4oYSByyRak"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589849879.462200",
        "parent_user_id": "UP6G25H35"
    },
    {
        "client_msg_id": "9AF3C904-B4AA-4C9B-A3C6-845D58D96923",
        "type": "message",
        "text": "<https://youtu.be/y4gAlrgr8PE|https://youtu.be/y4gAlrgr8PE>",
        "user": "UHWC9PXBL",
        "ts": "1589858601.465000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Karsten Schmidt \u2013 The Tower of Babel v3.0 \u2013 btplay2013",
                "title_link": "https://youtu.be/y4gAlrgr8PE",
                "author_name": "beyond tellerrand",
                "author_link": "https://www.youtube.com/user/btconf",
                "thumb_url": "https://i.ytimg.com/vi/y4gAlrgr8PE/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Karsten Schmidt \u2013 The Tower of Babel v3.0 \u2013 btplay2013",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/y4gAlrgr8PE?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/y4gAlrgr8PE",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/y4gAlrgr8PE"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S7+D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://youtu.be/y4gAlrgr8PE",
                                "text": "https://youtu.be/y4gAlrgr8PE"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589849879.462200",
        "parent_user_id": "UP6G25H35"
    },
    {
        "client_msg_id": "DA46F239-8591-46D7-ADFF-564C5A26DBEA",
        "type": "message",
        "text": "i\u2019ll stop for now but i have more",
        "user": "UHWC9PXBL",
        "ts": "1589858609.465500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0Un",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i\u2019ll stop for now but i have more"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589849879.462200",
        "parent_user_id": "UP6G25H35"
    },
    {
        "client_msg_id": "09904C5A-3A57-4640-82AA-DFAD8E92D803",
        "type": "message",
        "text": "I mean, if we're playing the hits.. <https://www.infoq.com/presentations/Simple-Made-Easy/|https://www.infoq.com/presentations/Simple-Made-Easy/>",
        "user": "UC2A2ARPT",
        "ts": "1589871958.466200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "InfoQ",
                "title": "Simple Made Easy",
                "title_link": "https://www.infoq.com/presentations/Simple-Made-Easy/",
                "text": "Rich Hickey emphasizes simplicity\u2019s virtues over easiness\u2019, showing that while many choose easiness they may end up with complexity, and the better way is to choose easiness along the simplicity path.",
                "fallback": "InfoQ: Simple Made Easy",
                "thumb_url": "https://res.infoq.com/presentations/Simple-Made-Easy/en/mediumimage/rich-hickey-big.jpg",
                "from_url": "https://www.infoq.com/presentations/Simple-Made-Easy/",
                "thumb_width": 270,
                "thumb_height": 200,
                "service_icon": "https://cdn.infoq.com/statics_s1_20200519-0308/apple-touch-icon.png",
                "id": 1,
                "original_url": "https://www.infoq.com/presentations/Simple-Made-Easy/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5dyBj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I mean, if we're playing the hits.. "
                            },
                            {
                                "type": "link",
                                "url": "https://www.infoq.com/presentations/Simple-Made-Easy/",
                                "text": "https://www.infoq.com/presentations/Simple-Made-Easy/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589849879.462200",
        "parent_user_id": "UP6G25H35",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70",
                    "UT9TWSZB5"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "85520BC8-84A1-41B3-9312-44754ECB6D2C",
        "type": "message",
        "text": "<https://youtube.com/watch?v=_ahvzDzKdB0|https://youtube.com/watch?v=_ahvzDzKdB0>",
        "user": "UC2A2ARPT",
        "ts": "1589872006.466600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Growing a Language, by Guy Steele",
                "title_link": "https://youtube.com/watch?v=_ahvzDzKdB0",
                "author_name": "Bill Pugh",
                "author_link": "https://www.youtube.com/user/wwp1960",
                "thumb_url": "https://i.ytimg.com/vi/_ahvzDzKdB0/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Growing a Language, by Guy Steele",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https://www.youtube.com/embed/_ahvzDzKdB0?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https://youtube.com/watch?v=_ahvzDzKdB0",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtube.com/watch?v=_ahvzDzKdB0"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bWP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://youtube.com/watch?v=_ahvzDzKdB0",
                                "text": "https://youtube.com/watch?v=_ahvzDzKdB0"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589849879.462200",
        "parent_user_id": "UP6G25H35"
    },
    {
        "client_msg_id": "66af45b8-008d-446d-af44-a20343ffa09c",
        "type": "message",
        "text": "<@UA14TGLTC> Yeah, I thought up about creating a top level building view kind of thing that can be used to visualize the trees of Lambda Calculus. Will allow for a city scape visualization.",
        "user": "UDKTZSD6H",
        "ts": "1589886784.467900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UDKTZSD6H",
            "ts": "1589886893.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bR7E6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " Yeah, I thought up about creating a top level building view kind of thing that can be used to visualize the trees of Lambda Calculus. Will allow for a city scape visualization."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589748817.440800",
        "parent_user_id": "UDKTZSD6H"
    },
    {
        "client_msg_id": "151395b2-886a-4c3b-bd75-7c65a44e10d2",
        "type": "message",
        "text": "<@UD6V09AQ4> <@UFB8STN7K> Those are pretty nice. I also a found out a cool Lambda REPL here: <https://tarao.github.io/LambdaJS>",
        "user": "UDKTZSD6H",
        "ts": "1589886838.468200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UDKTZSD6H",
            "ts": "1589886874.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ejrJQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UD6V09AQ4"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UFB8STN7K"
                            },
                            {
                                "type": "text",
                                "text": " Those are pretty nice. I also a found out a cool Lambda REPL here: "
                            },
                            {
                                "type": "link",
                                "url": "https://tarao.github.io/LambdaJS"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589748817.440800",
        "parent_user_id": "UDKTZSD6H"
    },
    {
        "client_msg_id": "e2f79e92-1be0-4ebb-accb-1e41ff676129",
        "type": "message",
        "text": "Let us not forget this: <https://www.famicol.in/language_checklist.html|https://www.famicol.in/language_checklist.html>",
        "user": "UN57U8V53",
        "ts": "1589898927.469600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VxmzF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Let us not forget this: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.famicol.in/language_checklist.html",
                                "text": "https://www.famicol.in/language_checklist.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589849879.462200",
        "parent_user_id": "UP6G25H35",
        "reactions": [
            {
                "name": "face_with_rolling_eyes",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f36c640a-38db-4569-9b1b-78e6b8de365d",
        "type": "message",
        "text": "Lukas suss's stuff. Might be slightly out of scope: Take a look at Lukas S\u00fcss (@sluk_m): <https://twitter.com/sluk_m?s=09|https://twitter.com/sluk_m?s=09>",
        "user": "UD31LGQKB",
        "ts": "1589899943.469800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Lukas S\u00fcss (@sluk_m) | Twitter",
                "title_link": "https://twitter.com/sluk_m?s=09",
                "text": "The latest Tweets from Lukas S\u00fcss (@sluk_m): \"More of my thoughts on visualization of typed holes. <https://t.co/9W6P438Jxo>\"",
                "fallback": "Lukas S\u00fcss (@sluk_m) | Twitter",
                "from_url": "https://twitter.com/sluk_m?s=09",
                "service_icon": "https://abs.twimg.com/icons/apple-touch-icon-192x192.png",
                "service_name": "twitter.com",
                "id": 1,
                "original_url": "https://twitter.com/sluk_m?s=09"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eplxL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lukas suss's stuff. Might be slightly out of scope: Take a look at Lukas S\u00fcss (@sluk_m): "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/sluk_m?s=09",
                                "text": "https://twitter.com/sluk_m?s=09"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589748817.440800",
        "parent_user_id": "UDKTZSD6H"
    },
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "on the off chance anyone around here is really into tree querying algorithms: I\u2019m trying to grab and copy DOM elements out of the browser with a homemade box-select extension\u2014which has some issues because the DOM is a tree, so if you drag select over a parent and its children I end up double-counting children (because their nodes are still attached to their parents). i suspect there are better ways to do this (either algorithmically, or using some APIs I don\u2019t know about). If anyone has any feedback please let me know in this thread!",
        "user": "UHWC9PXBL",
        "ts": "1589911021.470400",
        "thread_ts": "1589560472.416600",
        "root": {
            "client_msg_id": "076a3875-ddea-4b43-9f3d-b8ee66841df7",
            "type": "message",
            "text": "----TODAYS DEVELOPMENT COMPLAINTS----\nContext: I\u2019m reimplementing a dragbox select a la: <https://simonwep.github.io/selection/> or many other libraries because I need to deal with elements that are overlapping (I\u2019m using it for dom element selection, but you could imagine selecting items in an outline and you\u2019d have 60% of the hairiness).\n---ISSUES IN THREAD BELOW---",
            "user": "UHWC9PXBL",
            "ts": "1589560472.416600",
            "team": "T5TCAFTA9",
            "edited": {
                "user": "UHWC9PXBL",
                "ts": "1589560554.000000"
            },
            "attachments": [
                {
                    "service_name": "Selectionjs",
                    "title": "Selectionjs - Selection engine",
                    "title_link": "https://simonwep.github.io/selection/",
                    "text": "Simple and lightweight library to realize visual DOM Selections, like on your Desktop. No jQuery. Supports any CSS library, e.g. Bootstrap. Including vertical &amp; horizontal scroll support.",
                    "fallback": "Selectionjs: Selectionjs - Selection engine",
                    "from_url": "https://simonwep.github.io/selection/",
                    "id": 1,
                    "original_url": "https://simonwep.github.io/selection/"
                }
            ],
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "F4tNt",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "----TODAYS DEVELOPMENT COMPLAINTS----\nContext: I\u2019m reimplementing a dragbox select a la: "
                                },
                                {
                                    "type": "link",
                                    "url": "https://simonwep.github.io/selection/"
                                },
                                {
                                    "type": "text",
                                    "text": " or many other libraries because I need to deal with elements that are overlapping (I\u2019m using it for dom element selection, but you could imagine selecting items in an outline and you\u2019d have 60% of the hairiness).\n---ISSUES IN THREAD BELOW---"
                                }
                            ]
                        }
                    ]
                }
            ],
            "thread_ts": "1589560472.416600",
            "reply_count": 13,
            "reply_users_count": 2,
            "latest_reply": "1589915224.479000",
            "reply_users": [
                "UHWC9PXBL",
                "UKDM3GLAJ"
            ],
            "subscribed": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QzW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "on the off chance anyone around here is really into tree querying algorithms: I\u2019m trying to grab and copy DOM elements out of the browser with a homemade box-select extension\u2014which has some issues because the DOM is a tree, so if you drag select over a parent and its children I end up double-counting children (because their nodes are still attached to their parents). i suspect there are better ways to do this (either algorithmically, or using some APIs I don\u2019t know about). If anyone has any feedback please let me know in this thread!"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "c1e53e4d-e971-4ee9-a8c9-50f7b7313876"
    },
    {
        "client_msg_id": "c8e2c5a2-2a55-47a0-bf6a-7351ce17702a",
        "type": "message",
        "text": "Does anyone have handy any criticisms of Self-style prototypal inheritance? I'm not interested in performance, just the idea as a mechanism for dynamic data composition that lets you manage duplication vs references. What causes it to fail (eg: become unmanageable), where other kinds of data composition do not?\n\nAlso accepting links to good summaries of how Pharo handles inheritance/composition.",
        "user": "UC2A2ARPT",
        "ts": "1589911601.472100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1589911869.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0Py",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does anyone have handy any criticisms of Self-style prototypal inheritance? I'm not interested in performance, just the idea as a mechanism for dynamic data composition that lets you manage duplication vs references. What causes it to fail (eg: become unmanageable), where other kinds of data composition do not?\n\nAlso accepting links to good summaries of how Pharo handles inheritance/composition."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589911601.472100",
        "reply_count": 35,
        "reply_users_count": 10,
        "latest_reply": "1590062671.017000",
        "reply_users": [
            "UL5AX4G2H",
            "UAJ9DV971",
            "UHWC9PXBL",
            "UC2A2ARPT",
            "U010SQSJGLS",
            "UEQ6M68H0",
            "UA14TGLTC",
            "UE1JQM9HQ",
            "UEBG0NPDK",
            "UAVCC2X70"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "f6a67eaa-edc5-4c12-9aa2-fd20797e41c1",
        "type": "message",
        "text": "Let me see if I understand: You\u2019re using the mouse to select a rectangle, and checking all of the dom elements to see if they live inside of that rectangle, and including the ones that do, along with their children?\nA few ideas:\n\u2022 Can you just ignore children?\n\u2022 What about: for each element you find in the rectangle, walk up the parent tree until you find a node that doesn\u2019t live in the rectangle. The node before that is a top-level parent in your rectangle. If you find all of the top level-parents, and include all of their children, then you\u2019ll probably not have the duplication issue. \nI\u2019d be concerned about elements that don\u2019t have boundingRects inside of their parent\u2019s boundingRect, though (I think using `transform` can probably cause that). But if you\u2019re including children regardless already, then you\u2019d already have that problem.\n\u2022 I think a more robust way to do this might be to walk the tree once (or on updates) and build a quad tree, or other space-partitioning lookup. Then you wouldn\u2019t have to rely on parent-child relationships at all.",
        "user": "UKDM3GLAJ",
        "ts": "1589912335.472600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4LhSw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Let me see if I understand: You\u2019re using the mouse to select a rectangle, and checking all of the dom elements to see if they live inside of that rectangle, and including the ones that do, along with their children?\nA few ideas:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Can you just ignore children?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "What about: for each element you find in the rectangle, walk up the parent tree until you find a node that doesn\u2019t live in the rectangle. The node before that is a top-level parent in your rectangle. If you find all of the top level-parents, and include all of their children, then you\u2019ll probably not have the duplication issue. "
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019d be concerned about elements that don\u2019t have boundingRects inside of their parent\u2019s boundingRect, though (I think using "
                            },
                            {
                                "type": "text",
                                "text": "transform",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " can probably cause that). But if you\u2019re including children regardless already, then you\u2019d already have that problem.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I think a more robust way to do this might be to walk the tree once (or on updates) and build a quad tree, or other space-partitioning lookup. Then you wouldn\u2019t have to rely on parent-child relationships at all."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1589560472.416600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "9d4afddd-b536-4b58-91b3-4523b6b28b32",
        "type": "message",
        "text": "Can you post a quick code sample of self style prototypal inheritance?",
        "user": "UL5AX4G2H",
        "ts": "1589912777.472800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qZCKH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Can you post a quick code sample of self style prototypal inheritance?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "06dcc41b-143a-46dd-a8e0-b3993e1b17dc",
        "type": "message",
        "text": "\u201ccomposition over inheritance\u201d",
        "user": "UAJ9DV971",
        "ts": "1589913054.473100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n3o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\u201ccomposition over inheritance\u201d"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "A04436BC-AEDA-46A2-93B1-275F2F863237",
        "type": "message",
        "text": "one thing i find confusing is understanding when state or closures are private to an instance vs its prototype ",
        "user": "UHWC9PXBL",
        "ts": "1589913095.474100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G/7q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "one thing i find confusing is understanding when state or closures are private to an instance vs its prototype "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "94171cb3-9de8-4940-b281-661dc9bb9fb6",
        "type": "message",
        "text": "I\u2019ve been considering the quad tree as a last resort. there are a bunch of issues pushing me that way, like the fact that it\u2019s not just `transform`, you can have `pre` selectors and negative margins screwing around",
        "user": "UHWC9PXBL",
        "ts": "1589913230.474300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a17j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019ve been considering the quad tree as a last resort. there are a bunch of issues pushing me that way, like the fact that it\u2019s not just "
                            },
                            {
                                "type": "text",
                                "text": "transform",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", you can have "
                            },
                            {
                                "type": "text",
                                "text": "pre",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " selectors and negative margins screwing around"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589560472.416600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "eb0776ca-902d-432a-8b89-5aa9739f76a0",
        "type": "message",
        "text": "your description of the tool is exactly right. i\u2019m trying to let people box-select and copy dom nodes so that they can essentially drag pieces of webpages into their own notetaking app while preserving styles",
        "user": "UHWC9PXBL",
        "ts": "1589913307.474500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ppsr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "your description of the tool is exactly right. i\u2019m trying to let people box-select and copy dom nodes so that they can essentially drag pieces of webpages into their own notetaking app while preserving styles"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589560472.416600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "a4d4cc35-04ba-4112-b753-33ba21838acd",
        "type": "message",
        "text": "it\u2019s a kind of pruning, which is a lot like depth-first traversal",
        "user": "UHWC9PXBL",
        "ts": "1589913406.474700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gncly",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it\u2019s a kind of pruning, which is a lot like depth-first traversal"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589560472.416600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "type": "message",
        "text": "my main concern is situations like this one (ignore the writing)",
        "files": [
            {
                "id": "F0143T47KE0",
                "created": 1589913441,
                "timestamp": 1589913441,
                "name": "Photo on 5-18-20 at 7.03 PM.jpg",
                "title": "Photo on 5-18-20 at 7.03 PM.jpg",
                "mimetype": "image/jpeg",
                "filetype": "jpg",
                "pretty_type": "JPEG",
                "user": "UHWC9PXBL",
                "editable": false,
                "size": 683741,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F0143T47KE0/photo_on_5-18-20_at_7.03_pm.jpg",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F0143T47KE0/download/photo_on_5-18-20_at_7.03_pm.jpg",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F0143T47KE0-e6a30f8657/photo_on_5-18-20_at_7.03_pm_64.jpg",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F0143T47KE0-e6a30f8657/photo_on_5-18-20_at_7.03_pm_80.jpg",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F0143T47KE0-e6a30f8657/photo_on_5-18-20_at_7.03_pm_360.jpg",
                "thumb_360_w": 360,
                "thumb_360_h": 240,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F0143T47KE0-e6a30f8657/photo_on_5-18-20_at_7.03_pm_480.jpg",
                "thumb_480_w": 480,
                "thumb_480_h": 320,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F0143T47KE0-e6a30f8657/photo_on_5-18-20_at_7.03_pm_160.jpg",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F0143T47KE0-e6a30f8657/photo_on_5-18-20_at_7.03_pm_720.jpg",
                "thumb_720_w": 720,
                "thumb_720_h": 480,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F0143T47KE0-e6a30f8657/photo_on_5-18-20_at_7.03_pm_800.jpg",
                "thumb_800_w": 800,
                "thumb_800_h": 533,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F0143T47KE0-e6a30f8657/photo_on_5-18-20_at_7.03_pm_960.jpg",
                "thumb_960_w": 960,
                "thumb_960_h": 640,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F0143T47KE0-e6a30f8657/photo_on_5-18-20_at_7.03_pm_1024.jpg",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 682,
                "original_w": 3232,
                "original_h": 2154,
                "thumb_tiny": "AwAfADBWOWPpVgDIzmqW7BxV2M7koRT0Ipo/Mj2biB34qv8AYE/56N+VW3Hek5x0qrEXGWyi1DBTu3etPuG3or9M0w5PPSofP8wBACAo/OpY0Qg85q/AdvysRluRzWeOoFXNwEy+zUIp6ossueKYRgcVNTGqzIrSAhSelVPuufcetaDCs2ZwZGwOlSzRPQ//2Q==",
                "permalink": "https://futureofcoding.slack.com/files/UHWC9PXBL/F0143T47KE0/photo_on_5-18-20_at_7.03_pm.jpg",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F0143T47KE0-f34dd157e0",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": true,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "63Vee",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "my main concern is situations like this one (ignore the writing)"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UHWC9PXBL",
        "display_as_bot": false,
        "ts": "1589913446.474900",
        "client_msg_id": "cbadae05-ca4b-40a5-89c5-95c540ac639f",
        "thread_ts": "1589560472.416600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "3377533b-cef4-4462-9ddd-bed30f3c78e5",
        "type": "message",
        "text": "where I\u2019d want to select the last child of the first parent, and only the first two of the second. working with the native dom structures is giving me brain fog. i think the quad tree is the right idea",
        "user": "UHWC9PXBL",
        "ts": "1589913497.475300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MGI9y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "where I\u2019d want to select the last child of the first parent, and only the first two of the second. working with the native dom structures is giving me brain fog. i think the quad tree is the right idea"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589560472.416600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "a3e8f9a7-b755-4a09-b666-c5b2fb3a87a3",
        "type": "message",
        "text": "thanks!",
        "user": "UHWC9PXBL",
        "ts": "1589913510.475500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "67j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "thanks!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589560472.416600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "07d1034e-7f9d-416a-a6b5-02e17e4c738c",
        "type": "message",
        "text": "<@UL5AX4G2H> \u2014\u00a0Here's a decent summary I came across the other day: <http://gameprogrammingpatterns.com/prototype.html#self>\n\nIf you're familiar with JS inheritance, it's similar.\n\nNote that in my case, I'm only interested in using prototypes as a form of data composition, not method / function / class composition.",
        "user": "UC2A2ARPT",
        "ts": "1589914094.475800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nqs9j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UL5AX4G2H"
                            },
                            {
                                "type": "text",
                                "text": " \u2014\u00a0Here's a decent summary I came across the other day: "
                            },
                            {
                                "type": "link",
                                "url": "http://gameprogrammingpatterns.com/prototype.html#self"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIf you're familiar with JS inheritance, it's similar.\n\nNote that in my case, I'm only interested in using prototypes as a form of data composition, not method / function / class composition."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "3496e856-980d-4c23-b290-2fd83663639c",
        "type": "message",
        "text": "Prototypical inheritance seems to me to have the worst of both worlds of dynamic typing and inheritance: fragile base class problem PLUS the ability to change the base class at runtime.",
        "user": "U010SQSJGLS",
        "ts": "1589914243.476200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wRQe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Prototypical inheritance seems to me to have the worst of both worlds of dynamic typing and inheritance: fragile base class problem PLUS the ability to change the base class at runtime."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "abf711a0-58b2-4d72-a575-3e4c2749bbfd",
        "type": "message",
        "text": "Further to my original post, I'd be curious to hear if anyone has come across the idea of field-level inheritance, where each field may be delegated to a field on a different object. Are there any systems that do this well?",
        "user": "UC2A2ARPT",
        "ts": "1589914254.476400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "smE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Further to my original post, I'd be curious to hear if anyone has come across the idea of field-level inheritance, where each field may be delegated to a field on a different object. Are there any systems that do this well?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "39ca11c1-34b8-4cbf-9c92-882f15362ab4",
        "type": "message",
        "text": "<@U010SQSJGLS> Does the fragile bass class apply to data? All the examples I can imagine are due to method inheritance, not data inheritance.",
        "user": "UC2A2ARPT",
        "ts": "1589914447.476600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iPwQx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U010SQSJGLS"
                            },
                            {
                                "type": "text",
                                "text": " Does the fragile bass class apply to data? All the examples I can imagine are due to method inheritance, not data inheritance."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "2161408d-00f5-4020-8455-5e7c76a105be",
        "type": "message",
        "text": "How do I know what fields an object has?",
        "user": "U010SQSJGLS",
        "ts": "1589914495.476800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ne4O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How do I know what fields an object has?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "2f819776-1fae-487f-870d-da35a5d542f3",
        "type": "message",
        "text": "In prototype-based languages, the answer seems to be \u201cinspect the object at runtime and see.\u201d",
        "user": "U010SQSJGLS",
        "ts": "1589914526.477000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6CtQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In prototype-based languages, the answer seems to be \u201cinspect the object at runtime and see.\u201d"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "UC2A2ARPT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "75a9c3a9-9bb0-4bce-a014-6789d512a114",
        "type": "message",
        "text": "But ultimately you need to write code that makes assumptions about what fields are there.",
        "user": "U010SQSJGLS",
        "ts": "1589914557.477200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vSJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But ultimately you need to write code that makes assumptions about what fields are there."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "d2344c4c-4a5e-40ee-ae62-94afbf238fc8",
        "type": "message",
        "text": "So you run the code once, see that field f is there in the debugger or whatever, assume it\u2019s always there, and then later, BOOM.",
        "user": "U010SQSJGLS",
        "ts": "1589914579.477400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zph",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So you run the code once, see that field f is there in the debugger or whatever, assume it\u2019s always there, and then later, BOOM."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "d66b79c5-5668-4fe5-ad2e-010ba5cf5141",
        "type": "message",
        "text": "Ah, general inheritance forces a taxonomy of your data which means there's a limited number of options and a unique parent. Which class should I inherit from? Diamond problem \"I really want to inherit from both ork and car\" With composition, you can get an unlimited number of options and no dependency issues. I can make an ork car, why not!\n\nself style is a dynamic typing approach to OO. Fast and lightweight, but no static analysis help.",
        "user": "UL5AX4G2H",
        "ts": "1589914671.477700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ri7pv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, general inheritance forces a taxonomy of your data which means there's a limited number of options and a unique parent. Which class should I inherit from? Diamond problem \"I really want to inherit from both ork and car\" With composition, you can get an unlimited number of options and no dependency issues. I can make an ork car, why not!\n\nself style is a dynamic typing approach to OO. Fast and lightweight, but no static analysis help."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "5af5e970-4274-4c6a-9bef-26f50a609a1d",
        "type": "message",
        "text": "methods or data, it doesn't make a difference, esp in js where methods are first class",
        "user": "UL5AX4G2H",
        "ts": "1589914732.477900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WGb3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "methods or data, it doesn't make a difference, esp in js where methods are first class"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "type": "message",
        "subtype": "bot_message",
        "text": "[xmpp] &lt;singpolyma&gt; Once you static type it is it really OO anymore?",
        "ts": "1589914855.478100",
        "username": "cheogram (bot)",
        "bot_id": "BEYLABLRH",
        "thread_ts": "1589914855.478100",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1589915063.478200",
        "reply_users": [
            "UC2A2ARPT"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "5f575a48-8743-4378-9e9c-0c2e4656940d",
        "type": "message",
        "text": "Hi \u2014 is this a reply to a previous post? It showed up as a top-level post in Slack. If you are replying, please use the features of your client to form your message as a reply, so that it shows up threaded in Slack in the right place. Thanks!",
        "user": "UC2A2ARPT",
        "ts": "1589915063.478200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/Mo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi \u2014 is this a reply to a previous post? It showed up as a top-level post in Slack. If you are replying, please use the features of your client to form your message as a reply, so that it shows up threaded in Slack in the right place. Thanks!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589914855.478100"
    },
    {
        "client_msg_id": "bf0693ff-3bc4-4701-b973-d41e0013cb29",
        "type": "message",
        "text": "\u2026 it\u2019s a quad interval tree. i feel like im doing a coding interview",
        "user": "UHWC9PXBL",
        "ts": "1589915075.478400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NsZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\u2026 it\u2019s a quad interval tree. i feel like im doing a coding interview"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589560472.416600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "type": "message",
        "subtype": "bot_message",
        "text": "[xmpp] &lt;singpolyma&gt; Oh, sorry. I guess the matrix bridge isnt compatible with how slack works these days? I can just lurk. Excuse the noise :)",
        "ts": "1589915136.478600",
        "username": "cheogram (bot)",
        "bot_id": "BEYLABLRH",
        "thread_ts": "1589915136.478600",
        "reply_count": 2,
        "reply_users_count": 1,
        "latest_reply": "1589915262.479200",
        "reply_users": [
            "BEYLABLRH"
        ],
        "subscribed": false
    },
    {
        "type": "message",
        "subtype": "bot_message",
        "text": "",
        "ts": "1589915214.478700",
        "username": "iorec",
        "icons": {
            "image_48": "https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2020-04-15/1058751442086_48.png"
        },
        "bot_id": "BEYLABLRH",
        "attachments": [
            {
                "fallback": "grafik.png",
                "image_url": "https://matrix.org/_matrix/media/r0/download/matrix.org/qmQPjMEWmLQLAuXWNRotfHNr",
                "image_width": 109,
                "image_height": 59,
                "image_bytes": 1820,
                "id": 1
            }
        ]
    },
    {
        "type": "message",
        "subtype": "bot_message",
        "text": "from riot you can use this reply feature:",
        "ts": "1589915222.478800",
        "username": "iorec",
        "icons": {
            "image_48": "https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2020-04-15/1058751442086_48.png"
        },
        "bot_id": "BEYLABLRH",
        "thread_ts": "1589915136.478600"
    },
    {
        "client_msg_id": "1c98ae17-1842-423d-81db-4f9d2ace29b2",
        "type": "message",
        "text": "the other issue is that if i throw out all the children, I have to hunt through every selected node and rehook it to its parent at the end of the process, which feels like duplicated work",
        "user": "UHWC9PXBL",
        "ts": "1589915224.479000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JzP90",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the other issue is that if i throw out all the children, I have to hunt through every selected node and rehook it to its parent at the end of the process, which feels like duplicated work"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589560472.416600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "type": "message",
        "subtype": "bot_message",
        "text": "ah, but you cannot yet reply with an image..",
        "ts": "1589915262.479200",
        "username": "iorec",
        "icons": {
            "image_48": "https://s3-us-west-2.amazonaws.com/slack-files2/bot_icons/2020-04-15/1058751442086_48.png"
        },
        "bot_id": "BEYLABLRH",
        "thread_ts": "1589915136.478600"
    },
    {
        "client_msg_id": "76335488-5cb5-4b65-8ebe-eb1e019cc123",
        "type": "message",
        "text": "best to avoid OOP paradigm entirely. Don't ever create or destroy an object and life becomes so much simpler. Then you don't create islands of state but instead have one central ball of state which can be serialized, communicated, etc. OOP creates islands of state that are nearly impossible to transmit across the network in a synchronized manner.",
        "user": "UEQ6M68H0",
        "ts": "1589918793.479400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hCc+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "best to avoid OOP paradigm entirely. Don't ever create or destroy an object and life becomes so much simpler. Then you don't create islands of state but instead have one central ball of state which can be serialized, communicated, etc. OOP creates islands of state that are nearly impossible to transmit across the network in a synchronized manner."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1589911601.472100",
        "parent_user_id": "UC2A2ARPT"
    }
]