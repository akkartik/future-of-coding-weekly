[
    {
        "client_msg_id": "57296553-0b2a-4820-8d6d-e5edba221513",
        "type": "message",
        "text": "I haven't seen anyone mention Halide ... I don't know how to build a programming language where massive parallelism is easy, but Halide is the obvious starting point. <https://halide-lang.org/>\n\nTo a large extent I think the ball is in the hardware people's court. I remember seeing a proposal for a CPU architecture, can't remember where I saw it or what it is called... it was similar to SIMD but instead of the concept being \"provide a bunch of instructions and hope developers use them\" it was \"run arbitrary C loops in parallel\" - it was an architecture designed specifically to allow the vast majority of loops to \"implicitly\" run in parallel (meaning, the compiler would have to emit \"vector\" instructions as in standard SIMD, but the instructions themselves were more powerful than standard SIMD, enabling most loops to be automatically parallelized instead of the status quo where only a fraction of all loops can be automatically converted to SIMD form.) So, like, this needs to be a standard.\n\nMeanwhile on the GPU side, there is a large physical distance and slow bus separating it from the CPU, as well as a separate memory pool... and GPUs are bad at running code that is serial in nature. If AMD/NVIDIA can come up with a hybrid architecture that is capable of running both parallel code and mostly-serial efficiently, then it will become possible to \"just compile your code for the GPU\" (or in case of JIT languages, \"just flip a switch and it runs on the GPU\"), and then the GPU will be a more popular target.",
        "user": "UD6EXQVM0",
        "ts": "1588893263.242700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xQX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I haven't seen anyone mention Halide ... I don't know how to build a programming language where massive parallelism is easy, but Halide is the obvious starting point. "
                            },
                            {
                                "type": "link",
                                "url": "https://halide-lang.org/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nTo a large extent I think the ball is in the hardware people's court. I remember seeing a proposal for a CPU architecture, can't remember where I saw it or what it is called... it was similar to SIMD but instead of the concept being \"provide a bunch of instructions and hope developers use them\" it was \"run arbitrary C loops in parallel\" - it was an architecture designed specifically to allow the vast majority of loops to \"implicitly\" run in parallel (meaning, the compiler would have to emit \"vector\" instructions as in standard SIMD, but the instructions themselves were more powerful than standard SIMD, enabling most loops to be automatically parallelized instead of the status quo where only a fraction of all loops can be automatically converted to SIMD form.) So, like, this needs to be a standard.\n\nMeanwhile on the GPU side, there is a large physical distance and slow bus separating it from the CPU, as well as a separate memory pool... and GPUs are bad at running code that is serial in nature. If AMD/NVIDIA can come up with a hybrid architecture that is capable of running both parallel code and mostly-serial efficiently, then it will become possible to \"just compile your code for the GPU\" (or in case of JIT languages, \"just flip a switch and it runs on the GPU\"), and then the GPU will be a more popular target."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588742541.079700",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "2a75d581-a786-4b29-99f6-81fa12e169c4",
        "type": "message",
        "text": "<@UEQ6M68H0> sounds like you're describing (what is it called?) math washing \u2014 using equations and algorithms to give the apparence of  certainty.  I don't see how we can ever have any math without the potential of misusing it.  I guess it's just that the sooner we all know this, he better.",
        "user": "UA14TGLTC",
        "ts": "1588894511.243700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Dmy2U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " sounds like you're describing (what is it called?) math washing \u2014 using equations and algorithms to give the apparence of  certainty.  I don't see how we can ever have any math without the potential of misusing it.  I guess it's just that the sooner we all know this, he better."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588877031.220900",
        "parent_user_id": "UDQBTJ211"
    },
    {
        "client_msg_id": "0f8ac0b5-cfda-4e8c-b07c-f2f160dd73df",
        "type": "message",
        "text": "I think it's important for conviviality, though, that if I want to make a debugger for your program (one of Stephen's examples), that it not be required for your program to implement a Debugging Communications Protocol. The convenient thing about the \"memory\" concept is that your program and all its state is in memory no matter how you write it. I don't mean to minimize the importance of information design; I'm just ruminating on how it's irrelevant without access.\n\nAnyway, I guess this is why people like Smalltalk images so much. :laughing: It's been dawning on me today that, while my usual gripe is how awful most desktop software APIs are relative to Acme's 9P interface, uniform access to all internal state by putting all internal state \"outside\" may be more important in the long run\u2014with or without (ideally with!) your representation negotiation tech. Barely any web sites are extension-friendly, but they gotta use the DOM and that's where we get 'em!",
        "user": "UFEQUBNNT",
        "ts": "1588895595.244000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cvF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think it's important for conviviality, though, that if I want to make a debugger for your program (one of Stephen's examples), that it not be required for your program to implement a Debugging Communications Protocol. The convenient thing about the \"memory\" concept is that your program and all its state is in memory no matter how you write it. I don't mean to minimize the importance of information design; I'm just ruminating on how it's irrelevant without access.\n\nAnyway, I guess this is why people like Smalltalk images so much. "
                            },
                            {
                                "type": "emoji",
                                "name": "laughing"
                            },
                            {
                                "type": "text",
                                "text": " It's been dawning on me today that, while my usual gripe is how awful most desktop software APIs are relative to Acme's 9P interface, uniform access to all internal state by putting all internal state \"outside\" may be more important in the long run\u2014with or without (ideally with!) your representation negotiation tech. Barely any web sites are extension-friendly, but they gotta use the DOM and that's where we get 'em!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588873457.213000",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "90807b93-d74c-441c-b582-5beb03dd2449",
        "type": "message",
        "text": "<@UC2A2ARPT> made a terrific point, maybe the fallout from this $20 billion a day cost in the USA lockdown will be that people stop blindly obeying unverified computer models. People have always been gullible and believed soothsayers, the computer is the modern equivalent.\n\n That they are claiming that 500k would have died had Britain not gone full lockdown is an unproven statement. In fact social distancing as has been practiced has very little evidence that it affects final outcomes. This 2020  study published in nature (<https://www.nature.com/articles/s41598-020-58588-1>) on the Flu virus shows that viruses become so prevalent in the atmosphere that they are basically unavoidable. The fact that they  overestimated deaths in UK by more than factor of 10 is to the modelers excusable, because it spurred action. But is that responsible science?\n\nMy objection is that exponential functions buried inside a formula almost always result in a runaway result, and from the Club of Rome onward, people have been predicting global catastrophes from famine, seas rising, ice ages, ice melting. Soothsaying merged with the computer holding the sign saying \"the end is near\".",
        "user": "UEQ6M68H0",
        "ts": "1588896892.244200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Scientific Reports",
                "title": "Airborne Influenza A Virus Exposure in an Elementary School",
                "title_link": "https://www.nature.com/articles/s41598-020-58588-1",
                "text": "Airborne Influenza A Virus Exposure in an Elementary School",
                "fallback": "Scientific Reports: Airborne Influenza A Virus Exposure in an Elementary School",
                "from_url": "https://www.nature.com/articles/s41598-020-58588-1",
                "id": 1,
                "original_url": "https://www.nature.com/articles/s41598-020-58588-1"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yeS7w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " made a terrific point, maybe the fallout from this $20 billion a day cost in the USA lockdown will be that people stop blindly obeying unverified computer models. People have always been gullible and believed soothsayers, the computer is the modern equivalent.\n\n That they are claiming that 500k would have died had Britain not gone full lockdown is an unproven statement. In fact social distancing as has been practiced has very little evidence that it affects final outcomes. This 2020  study published in nature ("
                            },
                            {
                                "type": "link",
                                "url": "https://www.nature.com/articles/s41598-020-58588-1"
                            },
                            {
                                "type": "text",
                                "text": ") on the Flu virus shows that viruses become so prevalent in the atmosphere that they are basically unavoidable. The fact that they  overestimated deaths in UK by more than factor of 10 is to the modelers excusable, because it spurred action. But is that responsible science?\n\nMy objection is that exponential functions buried inside a formula almost always result in a runaway result, and from the Club of Rome onward, people have been predicting global catastrophes from famine, seas rising, ice ages, ice melting. Soothsaying merged with the computer holding the sign saying \"the end is near\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588877031.220900",
        "parent_user_id": "UDQBTJ211"
    },
    {
        "client_msg_id": "75096a61-90a9-4045-a165-ad2e7fd6d9de",
        "type": "message",
        "text": "Your all seem to include muddling with the tree as an abstraction to support an array as parents afai can tell. There are more ways to implement this, one would involve what I guess is a wrapper parent, but that dilutes the data, one would be to make a full circle with copies, but that expands the depth recursively, one would be to cross dimensions, but that is not for a normal tree. I assume you could do it in a parser by checking fi a child of a this node exists in depths above it, but that would/could get quite expensive and screwing with bloom filters for basic operations. Graphs are the different perspecive to a tree only because of the indication of whats a parent whats a child.",
        "user": "UNBPP291C",
        "ts": "1588897596.244500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "izqmF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Your all seem to include muddling with the tree as an abstraction to support an array as parents afai can tell. There are more ways to implement this, one would involve what I guess is a wrapper parent, but that dilutes the data, one would be to make a full circle with copies, but that expands the depth recursively, one would be to cross dimensions, but that is not for a normal tree. I assume you could do it in a parser by checking fi a child of a this node exists in depths above it, but that would/could get quite expensive and screwing with bloom filters for basic operations. Graphs are the different perspecive to a tree only because of the indication of whats a parent whats a child."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588677125.006200",
        "parent_user_id": "UTG9XLGKZ"
    },
    {
        "client_msg_id": "6c4fbb2d-1dd5-4182-98b7-4d649cbad439",
        "type": "message",
        "text": "Not sure even where Im going with this, its 2.30 AM and I was just reimplementing my multitree in JS so remembered to check this",
        "user": "UNBPP291C",
        "ts": "1588897645.244700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kcx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure even where Im going with this, its 2.30 AM and I was just reimplementing my multitree in JS so remembered to check this"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588677125.006200",
        "parent_user_id": "UTG9XLGKZ"
    },
    {
        "client_msg_id": "a246c0d4-1589-407e-aa82-db8a3d48ba3b",
        "type": "message",
        "text": "I think Basman asked about how it is possible to have a universal debugger and the answer points to having pre-shared the concepts and formats (e.g. what a call stack is and how debugging symbols are encoded). I would go further and ask what does debugging even look like if you don't use call/return functions, but use constraint connectors (like Marcel's talk, not sure if you watched it)? Could GDB or a universal debugger even hope to make sense of bits arranged according to completely different paradigm?",
        "user": "U8A5MS6R1",
        "ts": "1588898143.244900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1588898179.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "URK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think Basman asked about how it is possible to have a universal debugger and the answer points to having pre-shared the concepts and formats (e.g. what a call stack is and how debugging symbols are encoded). I would go further and ask what does debugging even look like if you don't use call/return functions, but use constraint connectors (like Marcel's talk, not sure if you watched it)? Could GDB or a universal debugger even hope to make sense of bits arranged according to completely different paradigm?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588873457.213000",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "fc56f3dd-b946-466e-a6be-01b9ca9a16f1",
        "type": "message",
        "text": "That said, I strongly agree that if something maps to bits, those must be visible for convivality and transparency. Further, even appropriate lenses to view those bits more meaningfully must be readily available.",
        "user": "U8A5MS6R1",
        "ts": "1588898386.245300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GsOs5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That said, I strongly agree that if something maps to bits, those must be visible for convivality and transparency. Further, even appropriate lenses to view those bits more meaningfully must be readily available."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588873457.213000",
        "parent_user_id": "UFEQUBNNT",
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "a4883884-b0ec-4172-9d4d-e3d6c5ba7a8f",
        "type": "message",
        "text": "Video: <https://us02web.zoom.us/rec/share/wpVrdKus2WNOfLPpxmrYYIATGtXuT6a80CIW_PoLnxkDirZvo7wNRE60OdEdT6np|https://us02web.zoom.us/rec/share/wpVrdKus2WNOfLPpxmrYYIATGtXuT6a80CIW_PoLnxkDirZvo7wNRE60OdEdT6np>",
        "user": "UCUSW7WVD",
        "ts": "1588902702.245500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SX0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Video: "
                            },
                            {
                                "type": "link",
                                "url": "https://us02web.zoom.us/rec/share/wpVrdKus2WNOfLPpxmrYYIATGtXuT6a80CIW_PoLnxkDirZvo7wNRE60OdEdT6np",
                                "text": "https://us02web.zoom.us/rec/share/wpVrdKus2WNOfLPpxmrYYIATGtXuT6a80CIW_PoLnxkDirZvo7wNRE60OdEdT6np"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588881606.231300",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "2360624c-d8ef-4fe9-8ff4-9dd1fa3c4be1",
        "type": "message",
        "text": "This is a long thread I can't read through yet, so I risk repeating ideas, but here are my thoughts:\n\nThere are many projects here that consider using a DAG representation for code or logic. That's something that can be automatically parallelized (where the only blocks are dependencies). Except that each branch is probably not doing the same thing, so not SIMD.\n\nMost loops can be replaced with map / reduce / filter / join / etc. (this is becoming a big thing in JavaScript, or LINQ in C#). If we keep heading that way, a lot of that stuff can be replaced with SIMD. Might not be possible wherever there are side effects, but some might be reducible to a formula?\n\nFor things that are sequential, maybe a model more like fields + particles, like Alan Kay has suggested before. Maybe that's actors all over again though? But maybe there's a way to make that easier to deal with than in traditional general purpose languages.",
        "user": "UAVCC2X70",
        "ts": "1588907827.246300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1588907984.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rLP=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is a long thread I can't read through yet, so I risk repeating ideas, but here are my thoughts:\n\nThere are many projects here that consider using a DAG representation for code or logic. That's something that can be automatically parallelized (where the only blocks are dependencies). Except that each branch is probably not doing the same thing, so not SIMD.\n\nMost loops can be replaced with map / reduce / filter / join / etc. (this is becoming a big thing in JavaScript, or LINQ in C#). If we keep heading that way, a lot of that stuff can be replaced with SIMD. Might not be possible wherever there are side effects, but some might be reducible to a formula?\n\nFor things that are sequential, maybe a model more like fields + particles, like Alan Kay has suggested before. Maybe that's actors all over again though? But maybe there's a way to make that easier to deal with than in traditional general purpose languages."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588742541.079700",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "b56cf3ff-adb1-4edf-9b4c-e78498bd67e3",
        "type": "message",
        "text": "<@UEQ6M68H0> we need a term that incorporates \"soothsaying\".... Digital Soothsaying... Data Soothsaying... Algorithmic Soothsaying?",
        "user": "UA14TGLTC",
        "ts": "1588909852.246600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dbwky",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " we need a term that incorporates \"soothsaying\".... Digital Soothsaying... Data Soothsaying... Algorithmic Soothsaying?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588877031.220900",
        "parent_user_id": "UDQBTJ211"
    },
    {
        "client_msg_id": "972C54FF-7570-47C3-A10A-9179881E8C8A",
        "type": "message",
        "text": "You should do a top-level post, Kartik!",
        "user": "UC2A2ARPT",
        "ts": "1588912762.247300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M3/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You should do a top-level post, Kartik!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588881606.231300",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "3219881c-b829-4bc5-9689-f8a0c531e454",
        "type": "message",
        "text": "<@UBSMEUXAA> I just stalked your LinkedIn so I believe you know what you're talking about :slightly_smiling_face:. It's good to hear that AAA studios are taking GPU compute seriously.",
        "user": "UCGAK10LS",
        "ts": "1588916861.247600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M1Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBSMEUXAA"
                            },
                            {
                                "type": "text",
                                "text": " I just stalked your LinkedIn so I believe you know what you're talking about "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": ". It's good to hear that AAA studios are taking GPU compute seriously."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588742541.079700",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "a781c431-0b2a-40e8-8dd0-d6155d63e045",
        "type": "message",
        "text": "Machine learning soothsaying  MLS, or Artificial Soothsaying, or Augmented Prediction",
        "user": "UEQ6M68H0",
        "ts": "1588923198.247800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1xI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Machine learning soothsaying  MLS, or Artificial Soothsaying, or Augmented Prediction"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588877031.220900",
        "parent_user_id": "UDQBTJ211"
    },
    {
        "client_msg_id": "27b99d62-85e4-40bf-9499-20621341195a",
        "type": "message",
        "text": "The one conclusion I draw from this event that a crisis is not a good time for a serene discussions of how to do science, or how to make science-based policy decisions.\n\nThere is an ongoing discussion in many scientific disciplines about how to do better computational science. Software engineering is one aspect in this discussion, but only one among many. So far, different disciplines adopt different priorities, for good reasons. I don't expect the debate to be settled any time soon, and I don't expect mobbing to be helpful in any way.",
        "user": "UJBAJNFLK",
        "ts": "1588944262.250200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B79vS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The one conclusion I draw from this event that a crisis is not a good time for a serene discussions of how to do science, or how to make science-based policy decisions.\n\nThere is an ongoing discussion in many scientific disciplines about how to do better computational science. Software engineering is one aspect in this discussion, but only one among many. So far, different disciplines adopt different priorities, for good reasons. I don't expect the debate to be settled any time soon, and I don't expect mobbing to be helpful in any way."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588877031.220900",
        "parent_user_id": "UDQBTJ211",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UNS7QDKFV"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "946f5709-32cc-48d0-888b-90661b3c5cf8",
        "type": "message",
        "text": "I'm trying to take my rigid project management system and make it something much more malleable, so the last point hits home with me. My biggest fear is I'm dumping too much work on the user and designing these systems is not their area of expertise. I'm hoping that that I can provide enough structure to guide the user but also keep the system flexible enough for them to fullfil their needs.",
        "user": "ULK0Z4MPV",
        "ts": "1588945880.250500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tGx0t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm trying to take my rigid project management system and make it something much more malleable, so the last point hits home with me. My biggest fear is I'm dumping too much work on the user and designing these systems is not their area of expertise. I'm hoping that that I can provide enough structure to guide the user but also keep the system flexible enough for them to fullfil their needs."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588876723.219100",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "b2f0d1cc-70ec-472a-b813-0b94a7462401",
        "type": "message",
        "text": "<@UAVCC2X70> Well, Parallel LINQ (parallel map / reduce / filter / join / etc for C#) has been available for many years, but I don't generally feel like just using it all the time instead of standard serial LINQ. The problem is that often we're operating on a small collection, and the overhead of coordinating the behavior of even two threads is not worthwhile if the collection is smaller than, I don't know, 100 elements or something. Throughout my career I've spent most of my time dealing with many _small_ collections with less than 5 or 50 elements each, and when I'm dealing with medium-size collections of 100-1000 elements, it's often a hashtable, sorted list or array that I'm using as a lookup table in a bigger calculation, rather than something I'm directly using with map/filter/reduce. (I do _also_ process larger lists, it's just that the fraction of code doing highly parallelizable work is small.)\n\nSometimes one can rearrange lots of small collections into big arrays to allow more parallelism, but sometimes I can't think of a way to parallelize a lot of this work, e.g. algorithms on tree structures like Loyc trees (code) don't seem parallelizable, generally, although I did design my LES language intentionally to have a \"context-insensitive\" syntax, so at least you can parse all your files in parallel. For these kinds of workloads I really want hardware like I described, which can parallelize short loops efficiently.",
        "user": "UD6EXQVM0",
        "ts": "1588951016.250700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1588951364.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9K87B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " Well, Parallel LINQ (parallel map / reduce / filter / join / etc for C#) has been available for many years, but I don't generally feel like just using it all the time instead of standard serial LINQ. The problem is that often we're operating on a small collection, and the overhead of coordinating the behavior of even two threads is not worthwhile if the collection is smaller than, I don't know, 100 elements or something. Throughout my career I've spent most of my time dealing with many "
                            },
                            {
                                "type": "text",
                                "text": "small",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " collections with less than 5 or 50 elements each, and when I'm dealing with medium-size collections of 100-1000 elements, it's often a hashtable, sorted list or array that I'm using as a lookup table in a bigger calculation, rather than something I'm directly using with map/filter/reduce. (I do "
                            },
                            {
                                "type": "text",
                                "text": "also",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " process larger lists, it's just that the fraction of code doing highly parallelizable work is small.)\n\nSometimes one can rearrange lots of small collections into big arrays to allow more parallelism, but sometimes I can't think of a way to parallelize a lot of this work, e.g. algorithms on tree structures like Loyc trees (code) don't seem parallelizable, generally, although I did design my LES language intentionally to have a \"context-insensitive\" syntax, so at least you can parse all your files in parallel. For these kinds of workloads I really want hardware like I described, which can parallelize short loops efficiently."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588742541.079700",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "cffb65b7-5dc3-4147-bebe-6ad23f4d8a90",
        "type": "message",
        "text": "No, I'm so bummed I missed it and that the recording's not up yet.",
        "user": "UFEQUBNNT",
        "ts": "1588951928.251100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4Rv2=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No, I'm so bummed I missed it and that the recording's not up yet."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588873457.213000",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "6668C6FB-5560-4656-A315-A86EACEAD64D",
        "type": "message",
        "text": "Anyone here work at Cycling74, or work on Pure Data?",
        "user": "UC2A2ARPT",
        "ts": "1588973540.254700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j9E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Anyone here work at Cycling74, or work on Pure Data?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588973540.254700",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1588973682.254800",
        "reply_users": [
            "US370TRJA"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heart_eyes",
                "users": [
                    "UT9TWSZB5",
                    "UFQQ3P867"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "a5652e99-8c28-42ca-9b0a-aa0d85b34e42",
        "type": "message",
        "text": "I don't, but Cassie (maintains the p5 web editor) does: <https://github.com/catarak>\n\n<https://cassietarakajian.com/current-projects>",
        "user": "US370TRJA",
        "ts": "1588973682.254800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "US370TRJA",
            "ts": "1588988927.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yBTT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't, but Cassie (maintains the p5 web editor) does: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/catarak"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://cassietarakajian.com/current-projects"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588973540.254700",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "08e8916b-fe49-4ece-bee3-a001603bff6d",
        "type": "message",
        "text": "<https://twitter.com/duncancragg/status/1258876608758403072>",
        "user": "UE6EFEPTQ",
        "ts": "1588974883.255200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/duncancragg|@duncancragg>: A little bit of the Covid sim code that amused me..\n\nTo be fair on Ferguson, et al., I've experienced this kind of code quite often in both academia and the City.\n\nNot excusing it, just saying the problem is wider than one famous philanderer.\n\n<https://github.com/mrc-ide/covid-sim/blob/master/src/Sweep.cpp> <https://pbs.twimg.com/media/EXhsXiJWoAALIm1.png>",
                "ts": 1588974546,
                "author_name": "Duncan Cragg",
                "author_link": "https://twitter.com/duncancragg/status/1258876608758403072",
                "author_icon": "https://pbs.twimg.com/profile_images/613355356622876672/0vhPNFgp_normal.jpg",
                "author_subname": "@duncancragg",
                "text": "A little bit of the Covid sim code that amused me..\n\nTo be fair on Ferguson, et al., I've experienced this kind of code quite often in both academia and the City.\n\nNot excusing it, just saying the problem is wider than one famous philanderer.\n\n<https://github.com/mrc-ide/covid-sim/blob/master/src/Sweep.cpp> <https://pbs.twimg.com/media/EXhsXiJWoAALIm1.png>",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/duncancragg/status/1258876608758403072",
                "image_url": "https://pbs.twimg.com/media/EXhsXiJWoAALIm1.png",
                "image_width": 684,
                "image_height": 261,
                "image_bytes": 5319,
                "id": 1,
                "original_url": "https://twitter.com/duncancragg/status/1258876608758403072",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lne",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://twitter.com/duncancragg/status/1258876608758403072"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588877031.220900",
        "parent_user_id": "UDQBTJ211"
    }
]