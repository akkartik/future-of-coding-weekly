[
    {
        "client_msg_id": "b5d607d2-dd31-4dc7-85ea-ebfdd79f17f8",
        "type": "message",
        "text": "<@U01AD80KMLK> Very cool! Working on something similar (interactive graph of knowledge and logic). An interesting aspect is converters/lenses/mappers between types of values. A simple one being unit conversion, a more complex one being eg. a rephrasing of a concept with the terminology of one field, to another (where the mapping isn't 1:1).\n\nWould be cool to have the ability to associate function with functions (edge(origin function, target function, relation type/concept article)); for instance. \"inverse\" of a multiplication with b is a division with b (I would prefer to have the multiplicative inverse of a real number, and the rest derived, but doesn't seem to fit as well with wikilambdas current structure).\n\n+ indexes of all functions applicable to a specific type (allowing fancy auto-complete).\n\nWill it support higher order functions? Thoughts regarding program termination? (I believe it can be solved for most cases in practise)\n\nOf course, a nice integration with wikidata.",
        "user": "UNCP67JSK",
        "ts": "1601936078.157700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UNCP67JSK",
            "ts": "1601937849.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2RL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01AD80KMLK"
                            },
                            {
                                "type": "text",
                                "text": " Very cool! Working on something similar (interactive graph of knowledge and logic). An interesting aspect is converters/lenses/mappers between types of values. A simple one being unit conversion, a more complex one being eg. a rephrasing of a concept with the terminology of one field, to another (where the mapping isn't 1:1).\n\nWould be cool to have the ability to associate function with functions (edge(origin function, target function, relation type/concept article)); for instance. \"inverse\" of a multiplication with b is a division with b (I would prefer to have the multiplicative inverse of a real number, and the rest derived, but doesn't seem to fit as well with wikilambdas current structure).\n\n+ indexes of all functions applicable to a specific type (allowing fancy auto-complete).\n\nWill it support higher order functions? Thoughts regarding program termination? (I believe it can be solved for most cases in practise)\n\nOf course, a nice integration with wikidata."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601330319.057300",
        "parent_user_id": "U01AD80KMLK"
    },
    {
        "client_msg_id": "aa0c6ae5-f2dd-4861-86bc-b2baabe25235",
        "type": "message",
        "text": "Oh! oh! Allow different output than text, eg. plots. Would then be great to update datasets/tables in wikipedia to be type-annotated, both to make it accessible structurally, but also to allow `population_pyramid(country.sweden.population_history)` instead of the current images, that quickly go out of date with the underlying data (eg. <https://en.wikipedia.org/wiki/Demographics_of_Sweden>). (I suppose you've seen the likes of <https://observablehq.com/explore>) Also, show function on article pages; eg. molar mass calc for a chemical compound. Wait, it is currently manually entered?? (eg. <https://en.wikipedia.org/wiki/Adenosine_triphosphate>). Also, all values inline text to be type-annotated, with the ability to apply relevant single-argument functions; eg. unit conversion. In math example, ability to \"link\" the values, resulting in the ability to provide your own. Endless possibilities. Much excitement. Looking forward to interop with my system; both using and adding functions/data (also, when this becomes a reality, and an api gets used extensively, it would be cool with at least some sort of \"estimated infrastructure cost\" calculator, or a wikilambda-specific donation flag, if nothing else).",
        "user": "UNCP67JSK",
        "ts": "1601938614.158100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UNCP67JSK",
            "ts": "1601938835.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fHV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh! oh! Allow different output than text, eg. plots. Would then be great to update datasets/tables in wikipedia to be type-annotated, both to make it accessible structurally, but also to allow "
                            },
                            {
                                "type": "text",
                                "text": "population_pyramid(country.sweden.population_history)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " instead of the current images, that quickly go out of date with the underlying data (eg. "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Demographics_of_Sweden"
                            },
                            {
                                "type": "text",
                                "text": "). (I suppose you've seen the likes of "
                            },
                            {
                                "type": "link",
                                "url": "https://observablehq.com/explore"
                            },
                            {
                                "type": "text",
                                "text": ") Also, show function on article pages; eg. molar mass calc for a chemical compound. Wait, it is currently manually entered?? (eg. "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Adenosine_triphosphate"
                            },
                            {
                                "type": "text",
                                "text": "). Also, all values inline text to be type-annotated, with the ability to apply relevant single-argument functions; eg. unit conversion. In math example, ability to \"link\" the values, resulting in the ability to provide your own. Endless possibilities. Much excitement. Looking forward to interop with my system; both using and adding functions/data (also, when this becomes a reality, and an api gets used extensively, it would be cool with at least some sort of \"estimated infrastructure cost\" calculator, or a wikilambda-specific donation flag, if nothing else)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601330319.057300",
        "parent_user_id": "U01AD80KMLK"
    },
    {
        "client_msg_id": "06d92b38-955a-4d39-a82f-b1505209ce10",
        "type": "message",
        "text": "Disregarding mass destruction events, it's a question of preservation through data portability + software portability. Docker is pretty cool in that regard that as long as docker itself is maintained, all images will work for long. If not, just put the old docker in a medium old os in the next docker, and the gap is bridged. Seen windows95 in the browser? <https://copy.sh/v86/?profile=windows95> As long as we get a steady stream of bridges, and keep the data store fresh, we should be good. (though possibly a big ask for orgs like the internet archive).\n\nIt's tricky to enforce when the access-interval is longer than the rot-interval, but otherwise, the increasing decoupling of data from storage medium + logic from computational substrate is a good sign. Cloud platforms that die, and take both data and logic to the grave, is a less good trend. Don't do that. Observablehq is a little nice by including an open runtime with the source when you download your projects.\n\nIn my language, I strive for more high-level, separating logic from computational substrate, allowing re-export to multiple different mediums. By keeping it append-only, with unique refs to versioned logic, and including them in any potential exported data, in addition to somewhat automatic migration transformations between logic versions, I hope that a piece of data/logic should both be runnable as is + \"migratable\" to a far future version, seamlessly.",
        "user": "UNCP67JSK",
        "ts": "1601941405.158400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LaD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Disregarding mass destruction events, it's a question of preservation through data portability + software portability. Docker is pretty cool in that regard that as long as docker itself is maintained, all images will work for long. If not, just put the old docker in a medium old os in the next docker, and the gap is bridged. Seen windows95 in the browser? "
                            },
                            {
                                "type": "link",
                                "url": "https://copy.sh/v86/?profile=windows95"
                            },
                            {
                                "type": "text",
                                "text": " As long as we get a steady stream of bridges, and keep the data store fresh, we should be good. (though possibly a big ask for orgs like the internet archive).\n\nIt's tricky to enforce when the access-interval is longer than the rot-interval, but otherwise, the increasing decoupling of data from storage medium + logic from computational substrate is a good sign. Cloud platforms that die, and take both data and logic to the grave, is a less good trend. Don't do that. Observablehq is a little nice by including an open runtime with the source when you download your projects.\n\nIn my language, I strive for more high-level, separating logic from computational substrate, allowing re-export to multiple different mediums. By keeping it append-only, with unique refs to versioned logic, and including them in any potential exported data, in addition to somewhat automatic migration transformations between logic versions, I hope that a piece of data/logic should both be runnable as is + \"migratable\" to a far future version, seamlessly."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601503724.095900",
        "parent_user_id": "U019CPED6T1"
    },
    {
        "client_msg_id": "48dd5055-7d20-4f63-badd-c5cc62d438cf",
        "type": "message",
        "text": "<@UNCP67JSK> plenty of good ideas! come and join us on our mailing list! :slightly_smiling_face: Yes plenty of these ideas should become realizable when we get there",
        "user": "U01AD80KMLK",
        "ts": "1601945688.158600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wm0d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UNCP67JSK"
                            },
                            {
                                "type": "text",
                                "text": " plenty of good ideas! come and join us on our mailing list! "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " Yes plenty of these ideas should become realizable when we get there"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601330319.057300",
        "parent_user_id": "U01AD80KMLK"
    },
    {
        "client_msg_id": "4549E928-650C-43C0-B26B-1674CA8424BE",
        "type": "message",
        "text": "Makes me wonder: are there programs that today can only be run with 2nd-order emulation, so you need an emulator for the emulator to run the program?",
        "user": "U5STGTB3J",
        "ts": "1602016602.160700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7sV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Makes me wonder: are there programs that today can only be run with 2nd-order emulation, so you need an emulator for the emulator to run the program?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601503724.095900",
        "parent_user_id": "U019CPED6T1"
    }
]