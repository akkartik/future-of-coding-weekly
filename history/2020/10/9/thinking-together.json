[
    {
        "client_msg_id": "5f33fc10-f08d-4876-979f-43d4d7533f13",
        "type": "message",
        "text": "<@UFB8STN7K> This is an area I have trouble expressing my thoughts on. I skimmed chapters 1 and 2 and read chapter 3 of minds in motion. I will even taking the studies as a given, the conclusion drawn from them seem a bit off to me. But that said, I have very bad spatial awareness, have aphantasia, and in general see abstract thought as a retreat away from the spatial/visual world that I feel mostly uneasy in. I see some parallels for sure, but I sure hope my abstract thought isn\u2019t based on my spatial abilities, because I like to think I\u2019m better at the former than the latter.\n\nI do think this more experiment based side of things is something I need to read more on though. I have a pretty large bias in this area. Perhaps it comes from reading one too many papers declaring free will to be disproved because of some fmri scan :slightly_smiling_face:. I will try reading a bit more of minds in motion with an open mind. Feel free to drop any other works you think are worth reading :)\n\nThanks <@UCUSW7WVD> for the references.",
        "user": "UK3LH8CF5",
        "ts": "1602201838.171900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o3CgM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFB8STN7K"
                            },
                            {
                                "type": "text",
                                "text": " This is an area I have trouble expressing my thoughts on. I skimmed chapters 1 and 2 and read chapter 3 of minds in motion. I will even taking the studies as a given, the conclusion drawn from them seem a bit off to me. But that said, I have very bad spatial awareness, have aphantasia, and in general see abstract thought as a retreat away from the spatial/visual world that I feel mostly uneasy in. I see some parallels for sure, but I sure hope my abstract thought isn\u2019t based on my spatial abilities, because I like to think I\u2019m better at the former than the latter.\n\nI do think this more experiment based side of things is something I need to read more on though. I have a pretty large bias in this area. Perhaps it comes from reading one too many papers declaring free will to be disproved because of some fmri scan "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": ". I will try reading a bit more of minds in motion with an open mind. Feel free to drop any other works you think are worth reading :)\n\nThanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " for the references."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1600909562.010100",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "5bc1449d-7a16-4488-bd74-316329af325c",
        "type": "message",
        "text": "<@UK3LH8CF5> IMO the two most influential pieces that synthesize cogsci ideas are TRG Greene\u2019s \u201cCognitive Dimensions of Notation\u201d and Bret Victor\u2019s \u201cLearnable Programming\u201d. Not sure if you\u2019ve read but both are excellent. Some other fun papers:\n\u2022 Don Knuth invents the term \u201cprofile\u201d while studying FORTRAN programs in the wild: <http://doi.wiley.com/10.1002/spe.4380010203>\n\u2022 Plan composition shows us how programmers combine abstract program templates to create individual programs, and often fail in the process: <http://portal.acm.org/citation.cfm?doid=6592.6594>\n\u2022 Really good summary of a lot of experimental work on programming psychology in 70s/80s: <https://telearn.archives-ouvertes.fr/hal-00190531/document>",
        "user": "UFB8STN7K",
        "ts": "1602202219.172100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bTpr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " IMO the two most influential pieces that synthesize cogsci ideas are TRG Greene\u2019s \u201cCognitive Dimensions of Notation\u201d and Bret Victor\u2019s \u201cLearnable Programming\u201d. Not sure if you\u2019ve read but both are excellent. Some other fun papers:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Don Knuth invents the term \u201cprofile\u201d while studying FORTRAN programs in the wild: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http://doi.wiley.com/10.1002/spe.4380010203"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Plan composition shows us how programmers combine abstract program templates to create individual programs, and often fail in the process: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http://portal.acm.org/citation.cfm?doid=6592.6594"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Really good summary of a lot of experimental work on programming psychology in 70s/80s: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://telearn.archives-ouvertes.fr/hal-00190531/document"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1600909562.010100",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "06ecdfa1-18b5-4cbe-8d7d-d28407c6dca5",
        "type": "message",
        "text": "Thanks <@UFB8STN7K> I have read Victor, but none of the rest of them. Have added them to my reading list. Thanks",
        "user": "UK3LH8CF5",
        "ts": "1602203022.172300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IBk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UFB8STN7K"
                            },
                            {
                                "type": "text",
                                "text": " I have read Victor, but none of the rest of them. Have added them to my reading list. Thanks"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1600909562.010100",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "D1C3926B-51C1-4395-9D5F-1A3582986B9B",
        "type": "message",
        "text": "I\u2019ve been investigating this a bit. I made a prototype of a keyboard-oriented html/css editor a while ago, haven\u2019t revisited it since but you might find it interesting as a non-text example of keyboard UI. Also seconding <@UDKTZSD6H>, check out grant\u2019s work! <https://twitter.com/yoshikischmitz/status/1185189779521953798?s=21|https://twitter.com/yoshikischmitz/status/1185189779521953798?s=21>",
        "user": "UMWF81HTP",
        "ts": "1602207025.174600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/yoshikischmitz|@yoshikischmitz>: I've been investigating ideas for rapidly developing frontends. One angle I've been interested in is making a highly keyboard-driven design tool, something like a \"vim for marking up UI\". First experiment is this concise syntax for specifying style props using styled-system. <https://pbs.twimg.com/ext_tw_video_thumb/1185189637788057600/pu/img/whFZS5CM6AeRsRWQ.jpg>",
                "ts": 1571406237,
                "author_name": "yoshiki",
                "author_link": "https://twitter.com/yoshikischmitz/status/1185189779521953798",
                "author_icon": "https://pbs.twimg.com/profile_images/1098933170265718786/9f2wc9jn_normal.jpg",
                "author_subname": "@yoshikischmitz",
                "text": "I've been investigating ideas for rapidly developing frontends. One angle I've been interested in is making a highly keyboard-driven design tool, something like a \"vim for marking up UI\". First experiment is this concise syntax for specifying style props using styled-system.",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/yoshikischmitz/status/1185189779521953798?s=21",
                "thumb_url": "https://pbs.twimg.com/ext_tw_video_thumb/1185189637788057600/pu/img/whFZS5CM6AeRsRWQ.jpg",
                "thumb_width": 1200,
                "thumb_height": 676,
                "video_html_width": 1200,
                "video_html_height": 676,
                "video_html": "<video controls poster=\"https://pbs.twimg.com/ext_tw_video_thumb/1185189637788057600/pu/img/whFZS5CM6AeRsRWQ.jpg\" width=\"1200\" height=\"676\"><source type=\"video/mp4\" src=\"https://video.twimg.com/ext_tw_video/1185189637788057600/pu/vid/1278x720/LZ2dyfa7D6wRnp1i.mp4?tag=10\"></video>",
                "id": 1,
                "original_url": "https://twitter.com/yoshikischmitz/status/1185189779521953798?s=21",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B4HGG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019ve been investigating this a bit. I made a prototype of a keyboard-oriented html/css editor a while ago, haven\u2019t revisited it since but you might find it interesting as a non-text example of keyboard UI. Also seconding "
                            },
                            {
                                "type": "user",
                                "user_id": "UDKTZSD6H"
                            },
                            {
                                "type": "text",
                                "text": ", check out grant\u2019s work! "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/yoshikischmitz/status/1185189779521953798?s=21",
                                "text": "https://twitter.com/yoshikischmitz/status/1185189779521953798?s=21"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1602079126.163600",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "68906476-4356-4869-98C9-D2ADCBB77E05",
        "type": "message",
        "text": "Also iirc WorkFlowy is pretty keyboard friendly. You might find stuff like vim-wiki or org mode interesting, as those deal with trees and are primarily keyboard-driven as well.",
        "user": "UMWF81HTP",
        "ts": "1602207162.176400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UMWF81HTP",
            "ts": "1602207239.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n6//",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also iirc WorkFlowy is pretty keyboard friendly. You might find stuff like vim-wiki or org mode interesting, as those deal with trees and are primarily keyboard-driven as well."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1602079126.163600",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "A0C3A352-515D-4207-A422-B82936A5EC63",
        "type": "message",
        "text": "Finally, if we extend this idea to non-pointer interfaces(i.e not mouse or touch), you can investigate video games that use d-pads and buttons as their input method and observe that buttons are pretty good at controlling embodied agents. ",
        "user": "UMWF81HTP",
        "ts": "1602207342.179300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aoU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Finally, if we extend this idea to non-pointer interfaces(i.e not mouse or touch), you can investigate video games that use d-pads and buttons as their input method and observe that buttons are pretty good at controlling embodied agents. "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1602079126.163600",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "E0CCAA33-A70B-4B1B-9060-49D028E19203",
        "type": "message",
        "text": "Oh! Also many structured code editors support keyboard navigation. Related, TiledText by <@USJ899UUD> lets you do AST navigation using a game pad(w/ no pointers, as far as I\u2019m aware): <http://westoncb.com/projects/tiledtext|http://westoncb.com/projects/tiledtext>",
        "user": "UMWF81HTP",
        "ts": "1602207601.181700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g65yP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh! Also many structured code editors support keyboard navigation. Related, TiledText by "
                            },
                            {
                                "type": "user",
                                "user_id": "USJ899UUD"
                            },
                            {
                                "type": "text",
                                "text": " lets you do AST navigation using a game pad(w/ no pointers, as far as I\u2019m aware): "
                            },
                            {
                                "type": "link",
                                "url": "http://westoncb.com/projects/tiledtext",
                                "text": "http://westoncb.com/projects/tiledtext"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1602079126.163600",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "f97cb3d6-5f01-4363-a362-534ef21abeaa",
        "type": "message",
        "text": "Yoshiki I see it's been about a year since those tweets\u2014maybe time to resume that project? :stuck_out_tongue: (really cool though\u2014don't think I'd seen that before)",
        "user": "USJ899UUD",
        "ts": "1602215017.181900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GoD=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yoshiki I see it's been about a year since those tweets\u2014maybe time to resume that project? "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            },
                            {
                                "type": "text",
                                "text": " (really cool though\u2014don't think I'd seen that before)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1602079126.163600",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "sweat_smile",
                "users": [
                    "UMWF81HTP"
                ],
                "count": 1
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UDKTZSD6H"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d33458de-fef5-4c61-9048-8b94a5b147c8",
        "type": "message",
        "text": "I do think the Tiled Text input scheme did a couple things that would be useful for non-text UIs, but probably not for using keyboard control.\n\nIt is \"pointerless\" though: it's a 1d input scheme, no moving a pointer in 2d space. The navigation scheme has two parts, one of which is less visible in the video: expansion/collapsing to change which level of the tree you're at, and 'cycling'.\n\nCycling is what makes it possible to not use pointers. Two things needed to make cycling effective: 1. being able to move to higher tree levels, allowing you to skip over large sections 2. disconnecting the amount of space you have to swipe the input from the visual representation: whether a node is tiny or huge in the UI, you 'travel' the same distance with your input device.",
        "user": "USJ899UUD",
        "ts": "1602215462.182100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CSe11",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I do think the Tiled Text input scheme did a couple things that would be useful for non-text UIs, but probably not for using keyboard control.\n\nIt is \"pointerless\" though: it's a 1d input scheme, no moving a pointer in 2d space. The navigation scheme has two parts, one of which is less visible in the video: expansion/collapsing to change which level of the tree you're at, and 'cycling'.\n\nCycling is what makes it possible to not use pointers. Two things needed to make cycling effective: 1. being able to move to higher tree levels, allowing you to skip over large sections 2. disconnecting the amount of space you have to swipe the input from the visual representation: whether a node is tiny or huge in the UI, you 'travel' the same distance with your input device."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1602079126.163600",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMWF81HTP"
                ],
                "count": 1
            }
        ]
    }
]