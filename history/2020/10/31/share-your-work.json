[
    {
        "client_msg_id": "d5d308ec-f20c-4347-a6a5-f701b7a0ff2a",
        "type": "message",
        "text": "Wow I\u2019m blown away by the quality of responses. I\u2019ve found the right place. Thank you all so much!\n\n<@U8A5MS6R1> drawing the path to the code line would be ideal. We\u2019d have to listen to the scroll event but it might be doable. I\u2019ll take a look at sourcetrail.",
        "user": "U019PRL1BNU",
        "ts": "1604111641.119500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dd0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wow I\u2019m blown away by the quality of responses. I\u2019ve found the right place. Thank you all so much!\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " drawing the path to the code line would be ideal. We\u2019d have to listen to the scroll event but it might be doable. I\u2019ll take a look at sourcetrail."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU"
    },
    {
        "client_msg_id": "673828e1-1f08-4673-b2df-2b8be715ab05",
        "type": "message",
        "text": "<@UEBG0NPDK> I\u2019ve been linked to code bubbles and debugger canvas so many times now. I think that\u2019s great! The ideas clearly resonate with people and it\u2019s something people want. All 3 products you linked to are packed with good ideas and I admire them all. (i don\u2019t claim to be doing anything new)\n\nThat\u2019s really good to know re mixed feedback. My current goal is to explore the best code reading experience (ala github). The write experience seems like it\u2019d be a natural extension but I\u2019m learning why files and text manipulation still reign supreme. We humans are so well-versed in it haha.\n\nI\u2019d love to hear more about the \u201cmanual gardening\u201d re debugger canvas. What did \u201cgetting better at it\u201d mean in your head? Thanks for your advice!",
        "user": "U019PRL1BNU",
        "ts": "1604112041.119700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U019PRL1BNU",
            "ts": "1604112119.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fn4b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " I\u2019ve been linked to code bubbles and debugger canvas so many times now. I think that\u2019s great! The ideas clearly resonate with people and it\u2019s something people want. All 3 products you linked to are packed with good ideas and I admire them all. (i don\u2019t claim to be doing anything new)\n\nThat\u2019s really good to know re mixed feedback. My current goal is to explore the best code reading experience (ala github). The write experience seems like it\u2019d be a natural extension but I\u2019m learning why files and text manipulation still reign supreme. We humans are so well-versed in it haha.\n\nI\u2019d love to hear more about the \u201cmanual gardening\u201d re debugger canvas. What did \u201cgetting better at it\u201d mean in your head? Thanks for your advice!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU"
    },
    {
        "client_msg_id": "2ecdfebf-e57b-4eee-a8af-3c6b0bc7fd61",
        "type": "message",
        "text": "<@UG0EL18H3> yeah! I love the idea of different lenses (e.g. zoom levels) on the same underlying. One thing I definitely want to explore is presenting the outline view somehow (high-level AST - e.g. functions, classes, etc.).\n\nI think your point of \u201cincrementalism\u201d is really important. When I hear \u201cfuture of code\u201d (or prompts like \u201cwhat does coding look like in 10 years\u201d), my mind jumps immediately to inventing PL and completely new tools. But you don\u2019t need to convince me that if I tried to built an editor, even I wouldn\u2019t end up using it. Actually another one of my projects was building something Dark-like (something I admire a lot) but with JS and monaco-editor panes on a canvas, very similar to the demo I linked to. Dark has so many good ideas and I love the exploration but I think it\u2019s going to be hard to get people to learn a new language/editor today. Honestly, the most \u201cimpactful\u201d thing I could do is probably build a VSCode extension but I want the space to explore for now.\n\nThanks for the ideas and kind words! Imagine a Github browser and pull request UI that looks more like a canvas. That\u2019s the direction I\u2019m stumbling towards.",
        "user": "U019PRL1BNU",
        "ts": "1604112722.120000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XLi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UG0EL18H3"
                            },
                            {
                                "type": "text",
                                "text": " yeah! I love the idea of different lenses (e.g. zoom levels) on the same underlying. One thing I definitely want to explore is presenting the outline view somehow (high-level AST - e.g. functions, classes, etc.).\n\nI think your point of \u201cincrementalism\u201d is really important. When I hear \u201cfuture of code\u201d (or prompts like \u201cwhat does coding look like in 10 years\u201d), my mind jumps immediately to inventing PL and completely new tools. But you don\u2019t need to convince me that if I tried to built an editor, even I wouldn\u2019t end up using it. Actually another one of my projects was building something Dark-like (something I admire a lot) but with JS and monaco-editor panes on a canvas, very similar to the demo I linked to. Dark has so many good ideas and I love the exploration but I think it\u2019s going to be hard to get people to learn a new language/editor today. Honestly, the most \u201cimpactful\u201d thing I could do is probably build a VSCode extension but I want the space to explore for now.\n\nThanks for the ideas and kind words! Imagine a Github browser and pull request UI that looks more like a canvas. That\u2019s the direction I\u2019m stumbling towards."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UG0EL18H3"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "text": "my tabled hack of something Dark-like using JS + monaco",
        "files": [
            {
                "id": "F01E41XAJ3B",
                "created": 1604112955,
                "timestamp": 1604112955,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U019PRL1BNU",
                "editable": false,
                "size": 445721,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F01E41XAJ3B/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F01E41XAJ3B/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F01E41XAJ3B-24e677cee0/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F01E41XAJ3B-24e677cee0/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F01E41XAJ3B-24e677cee0/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 249,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F01E41XAJ3B-24e677cee0/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 331,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F01E41XAJ3B-24e677cee0/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F01E41XAJ3B-24e677cee0/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 497,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F01E41XAJ3B-24e677cee0/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 552,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F01E41XAJ3B-24e677cee0/image_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 663,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F01E41XAJ3B-24e677cee0/image_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 707,
                "original_w": 2752,
                "original_h": 1900,
                "thumb_tiny": "AwAhADDRQEDBpcc0tJ3oAMUYpcikwf71ACHrRRg/3qUigBaaQS2RTqYxO49aAFwcU6mZ4604EUALQelJmjNAC009adTT1oAKKKKACiiigD//2Q==",
                "permalink": "https://futureofcoding.slack.com/files/U019PRL1BNU/F01E41XAJ3B/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F01E41XAJ3B-673407298a",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7Ix7G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "my tabled hack of something Dark-like using JS + monaco"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "U019PRL1BNU",
        "display_as_bot": false,
        "ts": "1604113028.120200",
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU"
    },
    {
        "client_msg_id": "E7DCB894-D7A8-427D-B3BD-9F6F38563AA5",
        "type": "message",
        "text": "Take my money! :dollar::dollar::dollar:",
        "user": "UG0EL18H3",
        "ts": "1604119656.121400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IOLYT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Take my money! "
                            },
                            {
                                "type": "emoji",
                                "name": "dollar"
                            },
                            {
                                "type": "emoji",
                                "name": "dollar"
                            },
                            {
                                "type": "emoji",
                                "name": "dollar"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU"
    },
    {
        "client_msg_id": "a5b227ac-7d7a-493f-a963-0560983c43c6",
        "type": "message",
        "text": "this feels, uh, REALLY good to use",
        "user": "UHWC9PXBL",
        "ts": "1604146618.121800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h1F+g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this feels, uh, REALLY good to use"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U019PRL1BNU"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ea745c8d-16fc-491e-ab9c-b3b4f6fc5f7d",
        "type": "message",
        "text": "Initial rambles:\n\none thing I\u2019d think about is getting a little more task-focused (this is already a pretty task-focused interface)\n\nI find myself creating a kind of mise-en-place in iTerm windows where I\u2019m setting stuff up for some larger change or understanding. I think theres some implicit structure here that you\u2019re hinting at with the child-pane relationships, and the notes that are free-floating vs the notes that are implicitly linked to certain views (e.g. \u201cthis is the code when `useMemo`\u2026). I think the structure isn\u2019t so much the code as it is code-and-task. I\u2019d guess/hypothesize that the hierarchy actually goes big note (\u201clet\u2019s look at the hook `useMemo`\u201d), annotation-style notes (on mount, it calls the given..)  -&gt;  code symbols. theres a graphy-outlinely thing here (although I prefer these panes to say a workflowy interface, since in my experience stuff looks like a graph when youre working on it and an outline when you\u2019re done)\n\nmaybe it\u2019s actually that your notes are suggesting a transclusion\u2014 let\u2019s look at the hook useMemo could be a notion-style slashword interface for pulling up code fragments that come immediately after where you typed in a separate pane\n\nI really like the interface in macOS where you can box-select a bunch of files on the desktop and right click to collect them all into a folder. this feels like it could use that kind of a grouping construct",
        "user": "UHWC9PXBL",
        "ts": "1604147020.122000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lWKV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Initial rambles:\n\none thing I\u2019d think about is getting a little more task-focused (this is already a pretty task-focused interface)\n\nI find myself creating a kind of mise-en-place in iTerm windows where I\u2019m setting stuff up for some larger change or understanding. I think theres some implicit structure here that you\u2019re hinting at with the child-pane relationships, and the notes that are free-floating vs the notes that are implicitly linked to certain views (e.g. \u201cthis is the code when "
                            },
                            {
                                "type": "text",
                                "text": "useMemo",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u2026). I think the structure isn\u2019t so much the code as it is code-and-task. I\u2019d guess/hypothesize that the hierarchy actually goes big note (\u201clet\u2019s look at the hook "
                            },
                            {
                                "type": "text",
                                "text": "useMemo",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u201d), annotation-style notes (on mount, it calls the given..)  ->  code symbols. theres a graphy-outlinely thing here (although I prefer these panes to say a workflowy interface, since in my experience stuff looks like a graph when youre working on it and an outline when you\u2019re done)\n\nmaybe it\u2019s actually that your notes are suggesting a transclusion\u2014 let\u2019s look at the hook useMemo could be a notion-style slashword interface for pulling up code fragments that come immediately after where you typed in a separate pane\n\nI really like the interface in macOS where you can box-select a bunch of files on the desktop and right click to collect them all into a folder. this feels like it could use that kind of a grouping construct"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU"
    },
    {
        "type": "message",
        "text": "<@U01BAS8GU86> I start a new thread here because I would love to see what you are working on! :slightly_smiling_face: Do you have anything to share about it?\n\nSome time ago I played with CRDT using Rust and WebAssembly! It was more a project to play with the CRDT concepts, and an occasion to try Rust and its compilation to WebAssembly. It was a very basic POC for a offline first text editor. It was for a local conference. Here is a link to code: <https://gitlab.com/ogadaki/sunnytech-2019-wuer>",
        "user": "UJ6LDMMN0",
        "ts": "1604155452.122300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJ6LDMMN0",
            "ts": "1604224769.000000"
        },
        "attachments": [
            {
                "fallback": "[October 31st, 2020 3:03 PM] epompeii: <@UAVCC2X70> and <@UJ6LDMMN0> these both sound very similar to what I\u2019m working on. A visual/notebook based purely functional programming development environment with live data and time traveling for both previous inputs and each step of a run that uses CRDTs for collaboration.\n\nSeeing it on this thread has me worried that this may be pushing the limits too much for what\u2019s currently feasible?\nI\u2019m using Rust targeting wasm in browser. Is this possible now? Do I need this beast machine to make that happen?",
                "ts": "1604153038.323800",
                "author_id": "U01BAS8GU86",
                "author_subname": "Everett Pompeii",
                "channel_id": "C5T9GPWFL",
                "channel_name": "thinking-together",
                "is_msg_unfurl": true,
                "is_reply_unfurl": true,
                "text": "<@UAVCC2X70> and <@UJ6LDMMN0> these both sound very similar to what I\u2019m working on. A visual/notebook based purely functional programming development environment with live data and time traveling for both previous inputs and each step of a run that uses CRDTs for collaboration.\n\nSeeing it on this thread has me worried that this may be pushing the limits too much for what\u2019s currently feasible?\nI\u2019m using Rust targeting wasm in browser. Is this possible now? Do I need this beast machine to make that happen?",
                "author_name": "Everett Pompeii",
                "author_link": "https://futureofcoding.slack.com/team/U01BAS8GU86",
                "author_icon": "https://avatars.slack-edge.com/2020-10-23/1445768371157_24e71f2ba4a9059b8c54_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "color": "D0D0D0",
                "from_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1604153038323800?thread_ts=1603907731306100&cid=C5T9GPWFL",
                "is_share": true,
                "footer": "From a thread in #thinking-together"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ux8OX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01BAS8GU86"
                            },
                            {
                                "type": "text",
                                "text": " I start a new thread here because I would love to see what you are working on! "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " Do you have anything to share about it?\n\nSome time ago I played with CRDT using Rust and WebAssembly! It was more a project to play with the CRDT concepts, and an occasion to try Rust and its compilation to WebAssembly. It was a very basic POC for a offline first text editor. It was for a local conference. Here is a link to code: "
                            },
                            {
                                "type": "link",
                                "url": "https://gitlab.com/ogadaki/sunnytech-2019-wuer"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604155452.122300",
        "reply_count": 7,
        "reply_users_count": 3,
        "latest_reply": "1604243602.129900",
        "reply_users": [
            "UJ6LDMMN0",
            "UC2A2ARPT",
            "U01BAS8GU86"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U01BAS8GU86"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "text": "Here is a \"dynamic screenshot\" of the result for this POC:",
        "files": [
            {
                "id": "F01EFK70TAL",
                "created": 1604156003,
                "timestamp": 1604156003,
                "name": "wuer.gif",
                "title": "wuer.gif",
                "mimetype": "image/gif",
                "filetype": "gif",
                "pretty_type": "GIF",
                "user": "UJ6LDMMN0",
                "editable": false,
                "size": 687700,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F01EFK70TAL/wuer.gif",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F01EFK70TAL/download/wuer.gif",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F01EFK70TAL-b7ab35773c/wuer_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F01EFK70TAL-b7ab35773c/wuer_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F01EFK70TAL-b7ab35773c/wuer_360.png",
                "thumb_360_w": 290,
                "thumb_360_h": 360,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F01EFK70TAL-b7ab35773c/wuer_480.png",
                "thumb_480_w": 387,
                "thumb_480_h": 480,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F01EFK70TAL-b7ab35773c/wuer_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F01EFK70TAL-b7ab35773c/wuer_720.png",
                "thumb_720_w": 581,
                "thumb_720_h": 720,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F01EFK70TAL-b7ab35773c/wuer_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 991,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F01EFK70TAL-b7ab35773c/wuer_960.png",
                "thumb_960_w": 775,
                "thumb_960_h": 960,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F01EFK70TAL-b7ab35773c/wuer_1024.png",
                "thumb_1024_w": 826,
                "thumb_1024_h": 1024,
                "thumb_360_gif": "https://files.slack.com/files-tmb/T5TCAFTA9-F01EFK70TAL-b7ab35773c/wuer_360.gif",
                "thumb_480_gif": "https://files.slack.com/files-tmb/T5TCAFTA9-F01EFK70TAL-b7ab35773c/wuer_480.gif",
                "original_w": 1078,
                "original_h": 1336,
                "deanimate_gif": "https://files.slack.com/files-tmb/T5TCAFTA9-F01EFK70TAL-b7ab35773c/wuer_deanimate_gif.png",
                "thumb_tiny": "AwAwACbTpMUuQOtB6UAMCtnl8j6U4DHU0YPrS0AFGKKKAE79e/eloxmigAooooAKKKKACiiigAooooAKKKKAP//Z",
                "permalink": "https://futureofcoding.slack.com/files/UJ6LDMMN0/F01EFK70TAL/wuer.gif",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F01EFK70TAL-9f1bacc0a4",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tNaEj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here is a \"dynamic screenshot\" of the result for this POC:"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UJ6LDMMN0",
        "display_as_bot": false,
        "ts": "1604156006.124200",
        "thread_ts": "1604155452.122300",
        "parent_user_id": "UJ6LDMMN0"
    },
    {
        "client_msg_id": "05db0f72-6d4e-4d43-b6d1-a1d86f42a41b",
        "type": "message",
        "text": "(I assume you're asking <@U01BAS8GU86> \u2014\u00a0Just posting an @-mention so that they won't miss this new thread in a new channel)",
        "user": "UC2A2ARPT",
        "ts": "1604157047.124600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=J/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(I assume you're asking "
                            },
                            {
                                "type": "user",
                                "user_id": "U01BAS8GU86"
                            },
                            {
                                "type": "text",
                                "text": " \u2014\u00a0Just posting an @-mention so that they won't miss this new thread in a new channel)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604155452.122300",
        "parent_user_id": "UJ6LDMMN0",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U01BAS8GU86"
                ],
                "count": 1
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e3cfe33a-cf83-4472-9ec9-36e55f61defd",
        "type": "message",
        "text": "Great thought on a new thread, <@UJ6LDMMN0>!\nAnd I\u2019ll also tag <@UAVCC2X70> if he\u2019s interested in joining in.\n\nYour demo looks super cool! I think it\u2019s a great visual representation of what the CRDT is doing. I\u2019m still very much a novice in the CRDT space, once I get more up to speed I look forward to digging into the code to help me learn :male-technologist::skin-tone-4:\nI also have Kleppmann\u2019s Designing Data-Intensive Applications sitting on my shelf waiting to be read.\n\nAs for my project, TableFlow, I built a basic dummy demo of it in React if you want to check it out: <http://tableflow.org/studio/flow/#a>\n\nThe motivation behind it is to build a \u201cbetter Excel\u201d for power users and also software developers who would rather not deal with all the incidental complexity of modern app development for a project with complex logic, ie not just some CRUD app.\n\nThere are four core concepts: Tables, Flows, Subflows, and Decisions:\n\u2022 Tables are the core data type. Depending on how they are configured they can be algebraic data types (ADTs/enums), structs/maps, lists, values, and/or an arbitrary nesting of any of these. Sort of like a statically typed version of JS objects with ADTs and a shorthand for tabular data built in.\n\u2022 Flows are pure functions. A Flow can be called by any other Flow or via a REST (or possibly gRPC) call to an endpoint from outside of TableFlow. A Flow can contain zero to any number of Subflows.\n\u2022 Subflows are functions just like Flows, but they can only be called once and by their parent. They\u2019re sort of the opposite of a closure in that scope must be explicitly passed into them. They are very similar to Brian Will\u2019s concept of a \u201cuse\u201d function. They help break up Flows both visually and in terms of size/scope. At any point in the future a Subflow can be converted into a standalone Flow if necessary.\n\u2022 Decisions are DMN decision tables on steroids. They are where conditional logic, Flow branching, and auto-iteration over all the rows in a table happen. Good example of the first two: <https://docs.appian.com/suite/help/20.3/Appian_Decisions.html>\nThere would be live data supplied to a Flow by filling in the input Tables. There would be a slider at the top of this input to time travel through the input history. Some of these inputs can be saved as \u201csnapshots\u201d along with their corresponding outputs. TDD would be built in, so every time a change is made, all applicable snapshots are run against the change and its outputs.\n\nOnce a run occurs, there would be a built in time traveling debugger. Each piece of computed/output data would have its own slider that jumps between when there was actually a change to that piece of data in the last run. Recursion is possible so there may be multiple time points.\n\nI also want Tables to be reusable between Flows. The software engineer in me really wants to add public and private \u201cTable Subflows\u201d (ie methods) and then I\u2019m like, well why not interfaces too!\nI will probably settle for reusable Tables with methods. Having interfaces would be great, but then I remind myself that even power users of Excel aren\u2019t use to being able to write their own functions natively!\n\nThe eventual goal would be to build a TableFlow config =&gt; Rust compiler that would spit out a production grade Rust server.\nCan you see me drowning in my own ambition yet?  :man-swimming::skin-tone-4::shark:\n\nI played around with doing the UI in Elm, looked at ReasonML, and I\u2019m currently giving Seed (seed-rs) a spin. I like The Elm Architecture for the frontend, but I\u2019m just going to try doubling down on the Rust-&gt;wasm ecosystem and hopefully the wasm DOM API becomes a thing down the road and closes the performance gap.",
        "user": "U01BAS8GU86",
        "ts": "1604167001.125100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ak3dF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great thought on a new thread, "
                            },
                            {
                                "type": "user",
                                "user_id": "UJ6LDMMN0"
                            },
                            {
                                "type": "text",
                                "text": "!\nAnd I\u2019ll also tag "
                            },
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " if he\u2019s interested in joining in.\n\nYour demo looks super cool! I think it\u2019s a great visual representation of what the CRDT is doing. I\u2019m still very much a novice in the CRDT space, once I get more up to speed I look forward to digging into the code to help me learn "
                            },
                            {
                                "type": "emoji",
                                "name": "male-technologist",
                                "skin_tone": 4
                            },
                            {
                                "type": "text",
                                "text": "\nI also have Kleppmann\u2019s Designing Data-Intensive Applications sitting on my shelf waiting to be read.\n\nAs for my project, TableFlow, I built a basic dummy demo of it in React if you want to check it out: "
                            },
                            {
                                "type": "link",
                                "url": "http://tableflow.org/studio/flow/#a"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe motivation behind it is to build a \u201cbetter Excel\u201d for power users and also software developers who would rather not deal with all the incidental complexity of modern app development for a project with complex logic, ie not just some CRUD app.\n\nThere are four core concepts: Tables, Flows, Subflows, and Decisions:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Tables are the core data type. Depending on how they are configured they can be algebraic data types (ADTs/enums), structs/maps, lists, values, and/or an arbitrary nesting of any of these. Sort of like a statically typed version of JS objects with ADTs and a shorthand for tabular data built in."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Flows are pure functions. A Flow can be called by any other Flow or via a REST (or possibly gRPC) call to an endpoint from outside of TableFlow. A Flow can contain zero to any number of Subflows."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Subflows are functions just like Flows, but they can only be called once and by their parent. They\u2019re sort of the opposite of a closure in that scope must be explicitly passed into them. They are very similar to Brian Will\u2019s concept of a \u201cuse\u201d function. They help break up Flows both visually and in terms of size/scope. At any point in the future a Subflow can be converted into a standalone Flow if necessary."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Decisions are DMN decision tables on steroids. They are where conditional logic, Flow branching, and auto-iteration over all the rows in a table happen. Good example of the first two: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://docs.appian.com/suite/help/20.3/Appian_Decisions.html"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThere would be live data supplied to a Flow by filling in the input Tables. There would be a slider at the top of this input to time travel through the input history. Some of these inputs can be saved as \u201csnapshots\u201d along with their corresponding outputs. TDD would be built in, so every time a change is made, all applicable snapshots are run against the change and its outputs.\n\nOnce a run occurs, there would be a built in time traveling debugger. Each piece of computed/output data would have its own slider that jumps between when there was actually a change to that piece of data in the last run. Recursion is possible so there may be multiple time points.\n\nI also want Tables to be reusable between Flows. The software engineer in me really wants to add public and private \u201cTable Subflows\u201d (ie methods) and then I\u2019m like, well why not interfaces too!\nI will probably settle for reusable Tables with methods. Having interfaces would be great, but then I remind myself that even power users of Excel aren\u2019t use to being able to write their own functions natively!\n\nThe eventual goal would be to build a TableFlow config => Rust compiler that would spit out a production grade Rust server.\nCan you see me drowning in my own ambition yet?  "
                            },
                            {
                                "type": "emoji",
                                "name": "man-swimming",
                                "skin_tone": 4
                            },
                            {
                                "type": "emoji",
                                "name": "shark"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI played around with doing the UI in Elm, looked at ReasonML, and I\u2019m currently giving Seed (seed-rs) a spin. I like The Elm Architecture for the frontend, but I\u2019m just going to try doubling down on the Rust->wasm ecosystem and hopefully the wasm DOM API becomes a thing down the road and closes the performance gap."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604155452.122300",
        "parent_user_id": "UJ6LDMMN0",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "85ac8313-3870-4d64-aaa3-109647c90c90",
        "type": "message",
        "text": "Nice! I'd like to see tiled window manager-style auto layout and the ability to zoom in and out (see: ZUIs).\n\n(Perhaps less usefully, it seems to be broken in Safari.)",
        "user": "U013ZLJARC7",
        "ts": "1604168461.125500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iIKF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nice! I'd like to see tiled window manager-style auto layout and the ability to zoom in and out (see: ZUIs).\n\n(Perhaps less usefully, it seems to be broken in Safari.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU"
    },
    {
        "client_msg_id": "032e1410-3cd2-4841-956f-42aa5aeb8f75",
        "type": "message",
        "text": "For a couple of years I've been building up a computing stack without metacircularity, where complex languages are consistently implemented in simpler languages.\n\nFor several months now I've been wrestling with a thorny problem in one corner of the core compiler which converts a safe language into unsafe machine code. Today I finally decided to stop agonizing over it, and write up the idea maze to the extent I've explored it.\n\n<https://github.com/akkartik/mu/issues/45>\n\nComments and suggestions most appreciated. This is a fairly simple compiler as these things go, and I'd be happy to engage with anyone who wants to learn about these beasts in a realistic setting.",
        "user": "UCUSW7WVD",
        "ts": "1604180931.125900",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "Static checks for function outputs \u00b7 Issue #45 \u00b7 akkartik/mu",
                "title_link": "https://github.com/akkartik/mu/issues/45",
                "text": "Background Mu (this repo) contains a compiler built in machine code, which converts a memory-safe high-level language into machine code. Since it&amp;#39;s built in machine code, the compiler is intend...",
                "fallback": "GitHub: Static checks for function outputs \u00b7 Issue #45 \u00b7 akkartik/mu",
                "thumb_url": "https://avatars3.githubusercontent.com/u/3161?s=400&v=4",
                "from_url": "https://github.com/akkartik/mu/issues/45",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/akkartik/mu/issues/45"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G7F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For a couple of years I've been building up a computing stack without metacircularity, where complex languages are consistently implemented in simpler languages.\n\nFor several months now I've been wrestling with a thorny problem in one corner of the core compiler which converts a safe language into unsafe machine code. Today I finally decided to stop agonizing over it, and write up the idea maze to the extent I've explored it.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/akkartik/mu/issues/45"
                            },
                            {
                                "type": "text",
                                "text": "\n\nComments and suggestions most appreciated. This is a fairly simple compiler as these things go, and I'd be happy to engage with anyone who wants to learn about these beasts in a realistic setting."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604180931.125900",
        "reply_count": 4,
        "reply_users_count": 2,
        "latest_reply": "1604273716.132700",
        "reply_users": [
            "U016VUZGUUQ",
            "UCUSW7WVD"
        ],
        "subscribed": false
    }
]