[
    {
        "client_msg_id": "de5dfd8c-7047-423b-9372-47b5193689ba",
        "type": "message",
        "text": "I like it. Just had a quick play with it, is easy to use and understand.\n\nLooks like a reporting tool. I say reporting tool, because I don't see how data input would work. How do you add things to the database? ...\n\nWould be good to have a seamless way of adding user input to the database, and also pulling the data back into the UI widgets <https://observablehq.com/@bartok32/diy-inputs> ... I find a big chunk of development time is taken up by shunting data back and forth between the UI and Database.",
        "user": "UP6G25H35",
        "ts": "1580779448.041800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GoV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like it. Just had a quick play with it, is easy to use and understand.\n\nLooks like a reporting tool. I say reporting tool, because I don't see how data input would work. How do you add things to the database? ...\n\nWould be good to have a seamless way of adding user input to the database, and also pulling the data back into the UI widgets "
                            },
                            {
                                "type": "link",
                                "url": "https://observablehq.com/@bartok32/diy-inputs"
                            },
                            {
                                "type": "text",
                                "text": " ... I find a big chunk of development time is taken up by shunting data back and forth between the UI and Database."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580753303.039100",
        "parent_user_id": "UE3KC0VK6"
    },
    {
        "client_msg_id": "cdf27dc1-faee-450d-8e50-6d1ffb42ddea",
        "type": "message",
        "text": "<@UP6G25H35> this is helpful to hear, access to databases looks like <https://observablehq.com/@observablehq/connecting-to-databases> and it sounds like I need to make that much more clear",
        "user": "UE3KC0VK6",
        "ts": "1580779732.042000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2PWH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UP6G25H35"
                            },
                            {
                                "type": "text",
                                "text": " this is helpful to hear, access to databases looks like "
                            },
                            {
                                "type": "link",
                                "url": "https://observablehq.com/@observablehq/connecting-to-databases"
                            },
                            {
                                "type": "text",
                                "text": " and it sounds like I need to make that much more clear"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580753303.039100",
        "parent_user_id": "UE3KC0VK6"
    },
    {
        "client_msg_id": "b0c029da-99e3-4572-a2c5-56aad24efe01",
        "type": "message",
        "text": "oh storing data, sorry - yes absolutely. The DB api could be used to INSERT data but if it's public facing you can't give it db access, and you're stuck doing something like the Lambda that Chris hooked up for <https://observablehq.com/@chriszs/point-to-ukraine-on-a-map>",
        "user": "UE3KC0VK6",
        "ts": "1580779773.042200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE3KC0VK6",
            "ts": "1580779870.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WtkS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "oh storing data, sorry - yes absolutely. The DB api could be used to INSERT data but if it's public facing you can't give it db access, and you're stuck doing something like the Lambda that Chris hooked up for "
                            },
                            {
                                "type": "link",
                                "url": "https://observablehq.com/@chriszs/point-to-ukraine-on-a-map"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580753303.039100",
        "parent_user_id": "UE3KC0VK6"
    },
    {
        "client_msg_id": "89be6e3a-4d7f-4fab-8853-a895d5e26d54",
        "type": "message",
        "text": "<@UEQ7QL15F> as an old school Rubyest, I'll second that.  I think the biggest difference actually is that before Rails, `require` was used in really random ways.",
        "user": "UA14TGLTC",
        "ts": "1580786771.042700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JDqb4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ7QL15F"
                            },
                            {
                                "type": "text",
                                "text": " as an old school Rubyest, I'll second that.  I think the biggest difference actually is that before Rails, "
                            },
                            {
                                "type": "text",
                                "text": "require",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " was used in really random ways."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580606860.029700",
        "parent_user_id": "UP6G25H35"
    },
    {
        "client_msg_id": "3a2f0b43-95c3-4f32-ad42-8c724466a334",
        "type": "message",
        "text": "Thanks. I found it in handleClick. uses a POST to send the data back. ...\n\nThoughts for you ... Browsers come with a Database built in, so I think direct access to the database in a non-issue these days.  It is more a matter of how much browser data can be backed up on a central server and how to share data with others.",
        "user": "UP6G25H35",
        "ts": "1580787986.043000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TZ4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks. I found it in handleClick. uses a POST to send the data back. ...\n\nThoughts for you ... Browsers come with a Database built in, so I think direct access to the database in a non-issue these days.  It is more a matter of how much browser data can be backed up on a central server and how to share data with others."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580753303.039100",
        "parent_user_id": "UE3KC0VK6"
    },
    {
        "client_msg_id": "80B50B85-230B-40B4-A0AC-20FC62BF2A58",
        "type": "message",
        "text": "I'm confused by this, could you say more?",
        "user": "UE3KC0VK6",
        "ts": "1580798783.044200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vo5U+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm confused by this, could you say more?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580753303.039100",
        "parent_user_id": "UE3KC0VK6"
    },
    {
        "client_msg_id": "62be578c-712e-4d32-a9ae-190aa6bb2d92",
        "type": "message",
        "text": "Yeah, sorry for criticizing it for not being something it wasn't intended to be...I've also read through the Wrangling/Viz notebook. My notes mostly focus on wrangling, although I get that's not really the most important part of the notebook.\n\n* Maybe worth emphasizing in the d3.csv() section that D3 has a lot of functionality outside of rendering visual elements. I think coming from data work in R or Python, people associate D3 with viz, so they expect its API to map to what viz libraries do in those languages. (I say \"people\", but mean \"me\".)\n* A minor point: I'm not sure about Pandas, but a tidy dataframe in R is a technically a list of column variables, not a list of row observations like the typical data array in js, although in practice you don't really ever think about it.\n* I really like the comparison between map/filter and list comprehensions. The 1-1 translations are always great (I know you have a whole other notebook full of them). Consider including the Altair code that produces the equivalent of the vega-lite scatterplot.\n* Just an aside, as I've tried to do a little wrangling in js recently, this pattern has been useful: `data.map(x =&gt; ({...x, newVar: expr}))`\n* Dataforge (haven't used it) might be worth mentioning as the most Pandas-like option. <http://js4ds.org/#s:dataforge>\n* I think the tutorial would flow better if the first chart you plot uses transformed data, rather than just the csv. Taking grouped counts and sums is a good realistic wrangling task.\n* Not sure it fits here, but I could see Math.sum(1,2,3) in js being confusing coming from python's sum([1,2,3]).\n* The part about getting Observable charts back into Pythonland is great. Definitely mention at the beginning that's where the tutorial is going.\n* And I saved my lamest gripe for last: iris is a boring dataset.",
        "user": "UMH5FAW2Y",
        "ts": "1580837124.044400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MFWD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, sorry for criticizing it for not being something it wasn't intended to be...I've also read through the Wrangling/Viz notebook. My notes mostly focus on wrangling, although I get that's not really the most important part of the notebook.\n\n* Maybe worth emphasizing in the d3.csv() section that D3 has a lot of functionality outside of rendering visual elements. I think coming from data work in R or Python, people associate D3 with viz, so they expect its API to map to what viz libraries do in those languages. (I say \"people\", but mean \"me\".)\n* A minor point: I'm not sure about Pandas, but a tidy dataframe in R is a technically a list of column variables, not a list of row observations like the typical data array in js, although in practice you don't really ever think about it.\n* I really like the comparison between map/filter and list comprehensions. The 1-1 translations are always great (I know you have a whole other notebook full of them). Consider including the Altair code that produces the equivalent of the vega-lite scatterplot.\n* Just an aside, as I've tried to do a little wrangling in js recently, this pattern has been useful: "
                            },
                            {
                                "type": "text",
                                "text": "data.map(x => ({...x, newVar: expr}))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n* Dataforge (haven't used it) might be worth mentioning as the most Pandas-like option. "
                            },
                            {
                                "type": "link",
                                "url": "http://js4ds.org/#s:dataforge"
                            },
                            {
                                "type": "text",
                                "text": "\n* I think the tutorial would flow better if the first chart you plot uses transformed data, rather than just the csv. Taking grouped counts and sums is a good realistic wrangling task.\n* Not sure it fits here, but I could see Math.sum(1,2,3) in js being confusing coming from python's sum([1,2,3]).\n* The part about getting Observable charts back into Pythonland is great. Definitely mention at the beginning that's where the tutorial is going.\n* And I saved my lamest gripe for last: iris is a boring dataset."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580753303.039100",
        "parent_user_id": "UE3KC0VK6"
    },
    {
        "client_msg_id": "98fee7c7-9877-4639-9938-3d71bc244e0b",
        "type": "message",
        "text": "Thanks, again very helpful. You just taught me several important facts I didn't know and a bunch of things helpful things about approach",
        "user": "UE3KC0VK6",
        "ts": "1580838171.044600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE3KC0VK6",
            "ts": "1580838198.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eXSE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks, again very helpful. You just taught me several important facts I didn't know and a bunch of things helpful things about approach"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580753303.039100",
        "parent_user_id": "UE3KC0VK6"
    },
    {
        "client_msg_id": "43c1a8d4-4904-4576-b2cc-8b83a2b6b901",
        "type": "message",
        "text": "Iris is a boring data set isn't it :confused: I think it's staying for now but I'll be on the lookout for the next tutorial. Thanks again",
        "user": "UE3KC0VK6",
        "ts": "1580844307.044900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yjL=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Iris is a boring data set isn't it "
                            },
                            {
                                "type": "emoji",
                                "name": "confused"
                            },
                            {
                                "type": "text",
                                "text": " I think it's staying for now but I'll be on the lookout for the next tutorial. Thanks again"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580753303.039100",
        "parent_user_id": "UE3KC0VK6"
    }
]