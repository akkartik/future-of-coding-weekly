[
    {
        "client_msg_id": "aea71127-481c-456c-a1e6-477bc790dcb6",
        "type": "message",
        "text": "Exactly. And that's why Out of the Tar Pit is wrong \u2014\u00a0their definition of accidental complexity sucks, as <@UCUSW7WVD> pointed out here: <https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580796314493500?thread_ts=1580751504.462400&amp;cid=C5T9GPWFL>\n\nWhere this becomes a problem is that the Tar Pit definition of accidental / incidental complexity has come to be seen by programmers writ large as a bad thing.\n\nEveryone has a loosey-goosey feeling about what is meant by \"inessential complexity\", but I think there are a lot of good kinds of complexity being caught in that net.\n\nI'm not saying we should _actually_ \"strip everything to zero\" or \"embrace magic\" or \"don't use type systems\" or anything like that. Those are all just examples to push your perspective to the places where it's easiest to see the flaw in the Tar Pit argument.",
        "user": "UC2A2ARPT",
        "ts": "1580857410.007500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580796314493500?thread_ts=1580751504.462400&amp;cid=C5T9GPWFL",
                "fallback": "[February 3rd, 2020 10:05 PM] ak: <@UC2A2ARPT> My _a priori_ biases are very similar to yours. However when I read your last comment my first reaction was, \"that's not what they mean by incidental complexity.\" So I went back to reread the paper.\n\nYou're right, they do say \"accidental complexity is all the rest\" except the essence of the problem as seen by users. Which is identical to what I was saying above, and opens them up to your interpretation. And that seems like the most acute criticism I've seen so far of this paper: the terms are so broad that they're very open to interpretation, and the authors' interpretation serves only to reveal their biases.\n\nThe authors' \"ideal world\" is one where computation has no cost, but social structures remain unchanged, with \"users\" having \"requirements\". _But_ the users are all mathematical enough to want formal requirements. They don't seem to notice that the arrow in \"Informal requirements -&gt; Formal requirements\" may indicate that formal requirements are _themselves_ accidental complexity.",
                "ts": "1580796314.493500",
                "author_id": "UCUSW7WVD",
                "author_subname": "Kartik Agaram",
                "channel_id": "C5T9GPWFL",
                "channel_name": "general",
                "is_msg_unfurl": true,
                "is_reply_unfurl": true,
                "text": "<@UC2A2ARPT> My _a priori_ biases are very similar to yours. However when I read your last comment my first reaction was, \"that's not what they mean by incidental complexity.\" So I went back to reread the paper.\n\nYou're right, they do say \"accidental complexity is all the rest\" except the essence of the problem as seen by users. Which is identical to what I was saying above, and opens them up to your interpretation. And that seems like the most acute criticism I've seen so far of this paper: the terms are so broad that they're very open to interpretation, and the authors' interpretation serves only to reveal their biases.\n\nThe authors' \"ideal world\" is one where computation has no cost, but social structures remain unchanged, with \"users\" having \"requirements\". _But_ the users are all mathematical enough to want formal requirements. They don't seem to notice that the arrow in \"Informal requirements -&gt; Formal requirements\" may indicate that formal requirements are _themselves_ accidental complexity.",
                "author_name": "Kartik Agaram",
                "author_link": "https://futureofcoding.slack.com/team/UCUSW7WVD",
                "author_icon": "https://avatars.slack-edge.com/2019-07-14/687915485201_6e649a383cf8f9e366e3_48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580796314493500?thread_ts=1580751504.462400&amp;cid=C5T9GPWFL",
                "footer": "From a thread in #general"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wtY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Exactly. And that's why Out of the Tar Pit is wrong \u2014\u00a0their definition of accidental complexity sucks, as "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " pointed out here: "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580796314493500?thread_ts=1580751504.462400&cid=C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": "\n\nWhere this becomes a problem is that the Tar Pit definition of accidental / incidental complexity has come to be seen by programmers writ large as a bad thing.\n\nEveryone has a loosey-goosey feeling about what is meant by \"inessential complexity\", but I think there are a lot of good kinds of complexity being caught in that net.\n\nI'm not saying we should "
                            },
                            {
                                "type": "text",
                                "text": "actually",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " \"strip everything to zero\" or \"embrace magic\" or \"don't use type systems\" or anything like that. Those are all just examples to push your perspective to the places where it's easiest to see the flaw in the Tar Pit argument."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKDM3GLAJ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "88fe4d41-2cbf-404f-9aea-df5c682cb9b6",
        "type": "message",
        "text": "I see. Thanks! I didn't understand tar pit that way. I will reread it to clarify. It doesn't make sense to me to talk about complexity for things that help you solve your problem. So I don't see a type system or or a user interface that matches more closely your mental model as incidental complexity.",
        "user": "UHZUS56SV",
        "ts": "1580858713.007800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lzOo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see. Thanks! I didn't understand tar pit that way. I will reread it to clarify. It doesn't make sense to me to talk about complexity for things that help you solve your problem. So I don't see a type system or or a user interface that matches more closely your mental model as incidental complexity."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "fde9cf69-a033-4b1e-8de1-1d52935f1a9c",
        "type": "message",
        "text": "The website is open, and I am accepting contributions (though maybe let me know what you plan to do first if you're going to make a change that isn't just like a typo correction or additional link or something): <http://github.com/stevekrouse/futureofcoding.org>\n\nThe web player sucks and I'd eventually like to switch to a different podcast hosting platform. I recommend grabbing a program like Overcast on your phone (if you have an iPhone), and subscribing to the show there. Even just for listening to on-off episodes, is so much nicer to use a dedicated podcasting app than a web player.",
        "user": "UC2A2ARPT",
        "ts": "1580859990.008000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pAt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The website is open, and I am accepting contributions (though maybe let me know what you plan to do first if you're going to make a change that isn't just like a typo correction or additional link or something): "
                            },
                            {
                                "type": "link",
                                "url": "http://github.com/stevekrouse/futureofcoding.org"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe web player sucks and I'd eventually like to switch to a different podcast hosting platform. I recommend grabbing a program like Overcast on your phone (if you have an iPhone), and subscribing to the show there. Even just for listening to on-off episodes, is so much nicer to use a dedicated podcasting app than a web player."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580780491.490500",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "A56948E3-4F53-4894-883C-6AC469875313",
        "type": "message",
        "text": "And I don't see mutable, stateful objects as incidental complexity \u2014 I see them as tools, good for some jobs and bad for others. Tar Pit's authors present their personal values as empirical truths, as <@UCUSW7WVD> said.",
        "user": "UC2A2ARPT",
        "ts": "1580865680.011800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vK7sO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And I don't see mutable, stateful objects as incidental complexity \u2014 I see them as tools, good for some jobs and bad for others. Tar Pit's authors present their personal values as empirical truths, as "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " said."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U8A5MS6R1",
                    "UHZUS56SV"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "f64bdf34-a255-4c0f-9568-df9a133f1b1f",
        "type": "message",
        "text": "&gt;  It doesn't make sense to me to talk about complexity for things that help you solve your problem\nI think it's that any solution also brings its own complexity.",
        "user": "U8A5MS6R1",
        "ts": "1580866348.012000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FIPqI",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " It doesn't make sense to me to talk about complexity for things that help you solve your problem"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think it's that any solution also brings its own complexity."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d37de2ab-dc43-4dbc-bd87-d091f3909787",
        "type": "message",
        "text": "I'm just now reading Tar Pit, I've only ever skimmed parts of it earlier. Already have a few things to say! For instance, isn't there a lack of imagination here:\n&gt; There are two widely-used approaches to understanding systems (or components of systems):\n&gt; \n&gt; *Testing*: This is attempting to understand a system from the outside \u2014 as a \u201cblack box\u201d. ...\n&gt; *Informal Reasoning*: This is attempting to understand the system by examining it from the inside....\n&gt; \n&gt; Of the two informal reasoning is the most important by far.\nSo reading the code and testing is it? For a while I've thought 'reading code' isn't really going to scale. How about \"querying the system\"? Can I say \"given these _kinds of conditions_ show me how _these kinds of outcomes arise_\"? Of course we can't ask this of a program, but if you consider a whole programming system, it may have an abstract evaluator that can try and figure this from the model (whether it's code or something else). It would then give you 'abstract execution traces' showing the internals of the system. But doing this means you have to first design the system and model with this use case in mind and not presume a workflow of programming exists.",
        "user": "U8A5MS6R1",
        "ts": "1580866437.012200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1580867193.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rdBRv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm just now reading Tar Pit, I've only ever skimmed parts of it earlier. Already have a few things to say! For instance, isn't there a lack of imagination here:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are two widely-used approaches to understanding systems (or components of systems):\n\n*Testing*: This is attempting to understand a system from the outside \u2014 as a \u201cblack box\u201d. ...\n*Informal Reasoning*: This is attempting to understand the system by examining it from the inside....\n\nOf the two informal reasoning is the most important by far."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So reading the code and testing is it? For a while I've thought 'reading code' isn't really going to scale. How about \"querying the system\"? Can I say \"given these "
                            },
                            {
                                "type": "text",
                                "text": "kinds of conditions",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " show me how "
                            },
                            {
                                "type": "text",
                                "text": "these kinds of outcomes arise",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\"? Of course we can't ask this of a program, but if you consider a whole programming system, it may have an abstract evaluator that can try and figure this from the model (whether it's code or something else). It would then give you 'abstract execution traces' showing the internals of the system. But doing this means you have to first design the system and model with this use case in mind and not presume a workflow of programming exists."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "f766ee96-7479-4dc8-ae4c-ad8d8399f35f",
        "type": "message",
        "text": "<@UCDBW1H26> this looks like you <https://www.geoffreylitt.com/> I have been looking at the spreadsheet angle for while. Feel free to DM me for a chat.",
        "user": "UP6G25H35",
        "ts": "1580869723.014700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Geoffrey Litt",
                "title_link": "https://www.geoffreylitt.com/",
                "text": "Geoffrey Litt is a programmer and designer.",
                "fallback": "Geoffrey Litt",
                "thumb_url": "https://geoffreylitt.com/images/headshot.jpg",
                "from_url": "https://www.geoffreylitt.com/",
                "thumb_width": 800,
                "thumb_height": 800,
                "service_name": "geoffreylitt.com",
                "id": 1,
                "original_url": "https://www.geoffreylitt.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SFJ6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCDBW1H26"
                            },
                            {
                                "type": "text",
                                "text": " this looks like you "
                            },
                            {
                                "type": "link",
                                "url": "https://www.geoffreylitt.com/"
                            },
                            {
                                "type": "text",
                                "text": " I have been looking at the spreadsheet angle for while. Feel free to DM me for a chat."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "bf5ed936-61c2-4c21-86e4-29a4dbcee086",
        "type": "message",
        "text": "Great episode. I loved the sound pops. I LOLed at one of them. :laughing:",
        "user": "U8A5MS6R1",
        "ts": "1580873766.015000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xUBs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great episode. I loved the sound pops. I LOLed at one of them. "
                            },
                            {
                                "type": "emoji",
                                "name": "laughing"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580780491.490500",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "a4fc3b88-a382-452e-bf41-63a73be942b6",
        "type": "message",
        "text": "The 'sidenote' injections were cool too.",
        "user": "U8A5MS6R1",
        "ts": "1580873895.015200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "49R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The 'sidenote' injections were cool too."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580780491.490500",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "9a532994-5f82-4c5f-b908-7a525d646cf8",
        "type": "message",
        "text": "Could you ship the newsletter as a Smalltalk image so I can craft a presentation UI to my exact specifications?",
        "user": "UFEQUBNNT",
        "ts": "1580883921.016000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bm6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Could you ship the newsletter as a Smalltalk image so I can craft a presentation UI to my exact specifications?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579511208.198000",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "hatching_chick",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "987A997A-58A0-417D-8B8B-9903A06F28D6",
        "type": "message",
        "text": "I'm sure some folks are not happy about the sound stuff. Glad it's not a universally negative response, at least :)\n\nStill... excited to make more episodes, do more experiments, and hone in on a voice.",
        "user": "UC2A2ARPT",
        "ts": "1580884299.018100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KSl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm sure some folks are not happy about the sound stuff. Glad it's not a universally negative response, at least :)\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Still... excited to make more episodes, do more experiments, and hone in on a voice."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580780491.490500",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "CB77A731-15EE-4FEA-8F0F-055CA9F48797",
        "type": "message",
        "text": "Is it not the case that property-based testing gives you that same information?\n\nIf not, I don't follow what you mean and would love more explanation.",
        "user": "UC2A2ARPT",
        "ts": "1580884447.019100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1580884504.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eIv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is it not the case that property-based testing gives you that same information?\n\n"
                            },
                            {
                                "type": "text",
                                "text": "If not, I don't follow what you mean and would love more explanation."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "ecac35d1-fb82-4b40-9035-28f51535638b",
        "type": "message",
        "text": "Positive response here.  It's not over-the-top, just a dash of whimsy.  Anyone who with doesn't like can easily ignore and the rest of us can appreciate the zest.",
        "user": "UA14TGLTC",
        "ts": "1580885690.019700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "swvxQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Positive response here.  It's not over-the-top, just a dash of whimsy.  Anyone who with doesn't like can easily ignore and the rest of us can appreciate the zest."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580780491.490500",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "e1807f04-abad-4916-b5e0-a7207b379ad9",
        "type": "message",
        "text": "I don't know smalltalk :slightly_smiling_face:",
        "user": "UBN9AFS0N",
        "ts": "1580891249.020000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EQ6P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't know smalltalk "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579511208.198000",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "E61D5D12-51FC-4492-8ABA-3BA67441D3AE",
        "type": "message",
        "text": "It\u2019s been too long since I read Tar Pit and reading some comments here I\u2019m not sure if I want to invest the time to read it again.\n\nI do find a distinction between accidental and essential complexity useful. Of course, for it to be useful we need to (a) consider some context and (b) agree on what these mean in such context. If we don\u2019t, we talk past each other. And \u201cwe\u201d includes Tar Pit authors.\n\nFor instance, if I put my mathematician hat on, then of course stuff like available registers and memory and the time it takes for each instruction to execute are incidental complexities that I don\u2019t need to describe efficiently what the essence of computation is and a Turing Machine is a beautifully simple model to cover all cases of what can be computed.\n\nNow, if I take that hat off I\u2019m just an engineer and I\u2019m furiously angry at that mathematician who clearly has never built anything useful in their life because then they would\u2019ve noticed that a Turing Machine is a piece of crap that makes even the most basic calculation way too complicated to express. And how can you possibly do anything useful without considering the engineering challenges of building a real computation machine? Execution speed and memory and instruction sets and architecture and freaking laws of physics are clearly essential components of such a system.\n\nAnd let\u2019s not even get into what happens when I put on my UX designer hat\u2026 or my business founder hat\u2026 let\u2019s say they don\u2019t get along that well either. It\u2019s almost like a little FoC Slack just inside my head\u2026\n\nTL;DR: Wear more :tophat:!",
        "user": "U5STGTB3J",
        "ts": "1580898747.043200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ln3Yi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It\u2019s been too long since I read Tar Pit and reading some comments here I\u2019m not sure if I want to invest the time to read it again.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "I do find a distinction between accidental and essential complexity useful. Of course, for it to be useful we need to (a) consider some context and (b) agree on what these mean in such context. If we don\u2019t, we talk past each other. And \u201cwe\u201d includes Tar Pit authors.\n"
                            },
                            {
                                "type": "text",
                                "text": "\nFor instance, if I put my mathematician hat on, then of course stuff like available registers and memory and the time it takes for each instruction to execute are incidental complexities that I don\u2019t need to describe efficiently what the essence of computation is and a Turing Machine is a beautifully simple model to cover all cases of what can be computed.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Now, if I take that hat off I\u2019m just an engineer and I\u2019m furiously angry at that mathematician who clearly has never built anything useful in their life because then they would\u2019ve noticed that a Turing Machine is a piece of crap that makes even the most basic calculation way too complicated to express. And how can you possibly do anything useful without considering the engineering challenges of building a real computation machine? Execution speed and memory and instruction sets and architecture and freaking laws of physics are clearly essential components of such a system.\n"
                            },
                            {
                                "type": "text",
                                "text": "\nAnd let\u2019s not even get into what happens when I put on my UX designer hat\u2026 or my business founder hat\u2026 let\u2019s say they don\u2019t get along that well either. It\u2019s almost like a little FoC Slack just inside my head\u2026\n\n"
                            },
                            {
                                "type": "text",
                                "text": "TL;DR: Wear more "
                            },
                            {
                                "type": "emoji",
                                "name": "tophat"
                            },
                            {
                                "type": "text",
                                "text": "!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UJ6LDMMN0"
                ],
                "count": 2
            },
            {
                "name": "billed_cap",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "57d64105-a448-4300-b772-2c33684f76c8",
        "type": "message",
        "text": "<https://www.reddit.com/r/ProgrammingLanguages/comments/ezaxxq/what_makes_a_language_easy_to_learn_for_a_novice/?utm_medium=android_app&amp;utm_source=share|https://www.reddit.com/r/ProgrammingLanguages/comments/ezaxxq/what_makes_a_language_easy_to_learn_for_a_novice/?utm_medium=android_app&amp;utm_source=share>\n\nA discussion I'm guessing people here would like to contribute to",
        "user": "UT39HTL9X",
        "ts": "1580920649.043500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "reddit",
                "title": "What makes a language easy to learn for a novice?",
                "title_link": "https://www.reddit.com/r/ProgrammingLanguages/comments/ezaxxq/what_makes_a_language_easy_to_learn_for_a_novice/?utm_medium=android_app&utm_source=share",
                "text": "I am thinking about creating a programming language for business automation and I imagine most of my target audience has never writenn a single...",
                "fallback": "reddit: What makes a language easy to learn for a novice?",
                "thumb_url": "https://www.redditstatic.com/new-icon.png",
                "from_url": "https://www.reddit.com/r/ProgrammingLanguages/comments/ezaxxq/what_makes_a_language_easy_to_learn_for_a_novice/?utm_medium=android_app&utm_source=share",
                "thumb_width": 256,
                "thumb_height": 256,
                "service_icon": "http://www.redditstatic.com/desktop2x/img/favicon/apple-icon-57x57.png",
                "id": 1,
                "original_url": "https://www.reddit.com/r/ProgrammingLanguages/comments/ezaxxq/what_makes_a_language_easy_to_learn_for_a_novice/?utm_medium=android_app&amp;utm_source=share"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Kleg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.reddit.com/r/ProgrammingLanguages/comments/ezaxxq/what_makes_a_language_easy_to_learn_for_a_novice/?utm_medium=android_app&utm_source=share",
                                "text": "https://www.reddit.com/r/ProgrammingLanguages/comments/ezaxxq/what_makes_a_language_easy_to_learn_for_a_novice/?utm_medium=android_app&utm_source=share"
                            },
                            {
                                "type": "text",
                                "text": "\n\nA discussion I'm guessing people here would like to contribute to"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "popcorn",
                "users": [
                    "U5STGTB3J",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "298eb683-d3fc-4995-8e27-c4221dcc137e",
        "type": "message",
        "text": "&gt; Is it not the case that property-based testing gives you that same information?\nThere's an overlap but not quite. I mean specifically abstract interpretation (property testing does actual execution with a large number of inputs).\n\nFor example, if you have a chunk of untyped Python code you can informally reason about the types of values flowing around by reading and simulating in your head. An abstract interpreter (pytype) will actually evaluate the code in terms of types (not values) and can show you the predicted types of various parameters and locals. It can get much further than mental simulation, because it can evaluate much larger chunks of the code. Technically this might belong in formal reasoning, which the paper mentions in the following paragraph:\n&gt; The bottom line is that allways of attempting to understand a system have their limitations (and this includes both informal reasoning\u2014 which is limited in scope, imprecise and hence prone to error \u2014 as well as formal reasoning\u2014 which is dependent upon the accuracy of a specification)\nI think the abstract interpretation approach could be extended so you \"feed in scenarios\", e.g. the user says \"what if the local `a` here is an integer between 0 and 1000 and `b` is an empty list\" and the system does abstract interpretation (specifically one execution and *not* 1000 different executions) to find other properties of an execution under that scenario - dead code, exceptions, and notes  \"`c` will be `a+20` \" etc.\n\nA more apt name for this kind of approach might be *computer aided reasoning* - we're not reading static code on paper and we're not writing complex types and have the system prove something, but we're simply asking targeted questions. I'd love to ask the system \"show me why this dependency is invoked when this kind of request arrives\" and then follow up by zooming into a part of the abstract execution trace. A related idea is \"program slicing\" - point to a value and have the computer tell you the subpart (slice) of the program that affects that variable. I think these are all good ideas to make state trackable, a different angle than going state-free and aiding informal reasoning.\n\nEven with the most 'readable' code, I'll note that reading doesn't scale very far - how much can you read in a day anyway? We might climb out of a small tar pit only to fall into a larger one. But targeted questions in a query language might be able to handle very large programs and even large systems with multiple programs! They'd have to be built using a model that is designed for something like this and scales up.",
        "user": "U8A5MS6R1",
        "ts": "1580924471.043800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1580925647.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/tdH",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is it not the case that property-based testing gives you that same information?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's an overlap but not quite. I mean specifically abstract interpretation (property testing does actual execution with a large number of inputs).\n\nFor example, if you have a chunk of untyped Python code you can informally reason about the types of values flowing around by reading and simulating in your head. An abstract interpreter (pytype) will actually evaluate the code in terms of types (not values) and can show you the predicted types of various parameters and locals. It can get much further than mental simulation, because it can evaluate much larger chunks of the code. Technically this might belong in formal reasoning, which the paper mentions in the following paragraph:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The bottom line is that allways of attempting to understand a system have their limitations (and this includes both informal reasoning\u2014 which is limited in scope, imprecise and hence prone to error \u2014 as well as formal reasoning\u2014 which is dependent upon the accuracy of a specification)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI think the abstract interpretation approach could be extended so you \"feed in scenarios\", e.g. the user says \"what if the local "
                            },
                            {
                                "type": "text",
                                "text": "a",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " here is an integer between 0 and 1000 and "
                            },
                            {
                                "type": "text",
                                "text": "b",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is an empty list\" and the system does abstract interpretation (specifically one execution and *not* 1000 different executions) to find other properties of an execution under that scenario - dead code, exceptions, and notes  \""
                            },
                            {
                                "type": "text",
                                "text": "c",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " will be "
                            },
                            {
                                "type": "text",
                                "text": "a+20",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " \" etc.\n\nA more apt name for this kind of approach might be "
                            },
                            {
                                "type": "text",
                                "text": "computer aided reasoning",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " - we're not reading static code on paper and we're not writing complex types and have the system prove something, but we're simply asking targeted questions. I'd love to ask the system \"show me why this dependency is invoked when this kind of request arrives\" and then follow up by zooming into a part of the abstract execution trace. A related idea is \"program slicing\" - point to a value and have the computer tell you the subpart (slice) of the program that affects that variable. I think these are all good ideas to make state trackable, a different angle than going state-free and aiding informal reasoning.\n\nEven with the most 'readable' code, I'll note that reading doesn't scale very far - how much can you read in a day anyway? We might climb out of a small tar pit only to fall into a larger one. But targeted questions in a query language might be able to handle very large programs and even large systems with multiple programs! They'd have to be built using a model that is designed for something like this and scales up."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "475f8514-6eba-456f-8b82-04e682d63f7b",
        "type": "message",
        "text": "Here's a related tweet thread: <https://twitter.com/chatur_shalabh/status/1126201095636652032>. Take the simplest of programs and compose them in a small distributed system, and you'll see informal reasoning ability disappear. How about e_xpect complexity and design to handle it_ rather than _avoid complexity_.",
        "user": "U8A5MS6R1",
        "ts": "1580924992.044000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/chatur_shalabh|@chatur_shalabh>: <https://twitter.com/stevekrouse|@stevekrouse> But what if we want emergent complexity as it could lead to much larger and richer processes than possible with mentally case-analyzed and hand assembled programs? What we really want is a way to curb emergence of undesirable behavior. So maybe we should seek a way to express 1/",
                "ts": 1557342239,
                "author_name": "Shalabh Chaturvedi",
                "author_link": "https://twitter.com/chatur_shalabh/status/1126201095636652032",
                "author_icon": "https://pbs.twimg.com/profile_images/1168926214343536641/wNcbqYu0_normal.jpg",
                "author_subname": "@chatur_shalabh",
                "text": "<https://twitter.com/stevekrouse|@stevekrouse> But what if we want emergent complexity as it could lead to much larger and richer processes than possible with mentally case-analyzed and hand assembled programs? What we really want is a way to curb emergence of undesirable behavior. So maybe we should seek a way to express 1/",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/chatur_shalabh/status/1126201095636652032",
                "id": 1,
                "original_url": "https://twitter.com/chatur_shalabh/status/1126201095636652032",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TaTgH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's a related tweet thread: "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/chatur_shalabh/status/1126201095636652032"
                            },
                            {
                                "type": "text",
                                "text": ". Take the simplest of programs and compose them in a small distributed system, and you'll see informal reasoning ability disappear. How about e"
                            },
                            {
                                "type": "text",
                                "text": "xpect complexity and design to handle it",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " rather than "
                            },
                            {
                                "type": "text",
                                "text": "avoid complexity",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1580751504.462400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "cb18175b-0ad1-40a7-8eb0-2c4b2869a07a",
        "type": "message",
        "text": "Me neither. haha",
        "user": "UFEQUBNNT",
        "ts": "1580929856.044900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wgeL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Me neither. haha"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579511208.198000",
        "parent_user_id": "UBN9AFS0N"
    }
]