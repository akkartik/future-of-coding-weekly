[
    {
        "client_msg_id": "8fc9ad7a-7809-4ea5-80c3-0882c66cadf8",
        "type": "message",
        "text": "Each \"Like this!\" image has a \"Not like this...\" image leading up to it.",
        "user": "UA14TGLTC",
        "ts": "1581571966.120200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "smyCh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Each \"Like this!\" image has a \"Not like this...\" image leading up to it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581499317.101600",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "U6FKVSVCK"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "U5STGTB3J"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "60b44f20-3060-413f-a442-ccb6ce932c18",
        "type": "message",
        "text": "When the author says \"all languages\", he is referring to all the languages he knows about and has used, which would like be the top 10 or 20 languages on the popularity list. Some of the FoC projects solve the listed problems, and i think his article can serve as a reference point for whether or not critical issues have been fixed.",
        "user": "UEQ6M68H0",
        "ts": "1581577592.120500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4TFEa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When the author says \"all languages\", he is referring to all the languages he knows about and has used, which would like be the top 10 or 20 languages on the popularity list. Some of the FoC projects solve the listed problems, and i think his article can serve as a reference point for whether or not critical issues have been fixed."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581503038.102000",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "FD05470D-08B9-4E33-84F7-DC916B858C13",
        "type": "message",
        "text": "Good highlights in the screenshot regarding the benefits of code-as-text we take for granted:\n<https://twitter.com/gordonbrander/status/1191947925871628289?s=21|https://twitter.com/gordonbrander/status/1191947925871628289?s=21>",
        "user": "UMWF81HTP",
        "ts": "1581579711.122300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/gordonbrander|@gordonbrander>: \u201cVery many technical innovations are latent in textual notations\u201d <https://twitter.com/cwervo|@cwervo> pointed me to this wonderful thread by <https://twitter.com/graydon_pub|@graydon_pub> <https://graydon2.dreamwidth.org/253769.html?thread=692809#cmt692809> <https://pbs.twimg.com/media/EIqmUCMWsAE5Eb4.jpg>",
                "ts": 1573017505,
                "author_name": "Gordon Brander",
                "author_link": "https://twitter.com/gordonbrander/status/1191947925871628289",
                "author_icon": "https://pbs.twimg.com/profile_images/1037026925129035776/R9RFf7_a_normal.jpg",
                "author_subname": "@gordonbrander",
                "text": "\u201cVery many technical innovations are latent in textual notations\u201d <https://twitter.com/cwervo|@cwervo> pointed me to this wonderful thread by <https://twitter.com/graydon_pub|@graydon_pub> <https://graydon2.dreamwidth.org/253769.html?thread=692809#cmt692809> <https://pbs.twimg.com/media/EIqmUCMWsAE5Eb4.jpg>",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/gordonbrander/status/1191947925871628289?s=21",
                "image_url": "https://pbs.twimg.com/media/EIqmUCMWsAE5Eb4.jpg",
                "image_width": 704,
                "image_height": 1200,
                "image_bytes": 181349,
                "id": 1,
                "original_url": "https://twitter.com/gordonbrander/status/1191947925871628289?s=21",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dEpC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good highlights in the screenshot regarding the benefits of code-as-text we take for granted:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/gordonbrander/status/1191947925871628289?s=21",
                                "text": "https://twitter.com/gordonbrander/status/1191947925871628289?s=21"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581579711.122300",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1581699015.156700",
        "reply_users": [
            "U5STGTB3J",
            "UHWC9PXBL"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT",
                    "UA14TGLTC",
                    "UHWC9PXBL",
                    "UFB8STN7K"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "b21393cd-bb91-40b2-9752-d121bb29911a",
        "type": "message",
        "text": "<@UCUSW7WVD> I think it was related to cities, I see if I can find the original query",
        "user": "UJFN50C00",
        "ts": "1581584332.122600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GhiR1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " I think it was related to cities, I see if I can find the original query"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581337872.066300",
        "parent_user_id": "UR482RFPY"
    },
    {
        "client_msg_id": "3244d825-19f9-402b-a867-07f036b8b95a",
        "type": "message",
        "text": "I think i'm just not enough used to wolframs query language, like in wikidata I can say ( when I have the Identifier) find all brdiges in europe",
        "user": "UJFN50C00",
        "ts": "1581584836.122800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lmXtN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think i'm just not enough used to wolframs query language, like in wikidata I can say ( when I have the Identifier) find all brdiges in europe"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581337872.066300",
        "parent_user_id": "UR482RFPY"
    },
    {
        "client_msg_id": "fe57cfa7-c816-4bb6-be64-abad8aab63d4",
        "type": "message",
        "text": "how do I do this in wolfram? Or : show me europes 5 biggest cities ,wolfram give me hints like: use metropolean area population ...but finally I can't get the query to work",
        "user": "UJFN50C00",
        "ts": "1581584933.123100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "007",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "how do I do this in wolfram? Or : show me europes 5 biggest cities ,wolfram give me hints like: use metropolean area population ...but finally I can't get the query to work"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581337872.066300",
        "parent_user_id": "UR482RFPY"
    },
    {
        "client_msg_id": "A91D8C1C-F6E7-4D63-A65A-B71A2761CC6D",
        "type": "message",
        "text": "I find the bit that\u2019s not highlighted in between even more important.\n\nThat somebody/humanity spend a lot of time/effort figuring something out isn\u2019t really a good quality of that thing.\nHe describes some qualities that make text interesting though, and that\u2019s useful \u2014 they help us understand _why_ text is useful.\n\nUnfortunately, arguments are only entertaining, if both sides represent oversimplified extremes. And so we end up with nonsense either-or discussions all the time.\n\nThe really interesting solutions are somewhere in between the extremes, using the puristic arguments from the extremes to distill which of the properties need to be combined for a truly better solution.\n\nText is too important to leave behind completely. Arranging glyphs in a grid with interactions invented before screens existed is not.",
        "user": "U5STGTB3J",
        "ts": "1581585846.135800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1581585898.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SiD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I find the bit that\u2019s not highlighted in between even more important.\n\nThat somebody/humanity spend a lot of time/effort figuring something out isn\u2019t really a good quality of that thing.\nHe describes some qualities that make text interesting though, and that\u2019s useful \u2014 they help us understand "
                            },
                            {
                                "type": "text",
                                "text": "why",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " text is useful.\n\nUnfortunately, arguments are only entertaining, if both sides represent oversimplified extremes. And so we end up with nonsense either-or discussions all the time.\n\nThe really interesting solutions are somewhere in between the extremes, using the puristic arguments from the extremes to distill which of the properties need to be combined for a truly better solution.\n\nText is too important to leave behind completely. Arranging glyphs in a grid with interactions invented before screens existed is not."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581579711.122300",
        "parent_user_id": "UMWF81HTP",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT",
                    "UJ6LDMMN0"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "7A32C127-6FE5-4B60-8CFF-5FE66E6E492C",
        "type": "message",
        "text": "The F in FoC <https://twitter.com/ryanflorence/status/1227629264259801088?s=20|https://twitter.com/ryanflorence/status/1227629264259801088?s=20>",
        "user": "ULM3U6275",
        "ts": "1581608876.136700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/ryanflorence|@ryanflorence>: Whenever I talk to teenagers about programming they want to do it on their phone.",
                "ts": 1581524599,
                "author_name": "Ryan Florence",
                "author_link": "https://twitter.com/ryanflorence/status/1227629264259801088",
                "author_icon": "https://pbs.twimg.com/profile_images/1166030195834273794/pBb6hjVb_normal.jpg",
                "author_subname": "@ryanflorence",
                "text": "Whenever I talk to teenagers about programming they want to do it on their phone.",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/ryanflorence/status/1227629264259801088?s=20",
                "id": 1,
                "original_url": "https://twitter.com/ryanflorence/status/1227629264259801088?s=20",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ighng",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The F in FoC "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/ryanflorence/status/1227629264259801088?s=20",
                                "text": "https://twitter.com/ryanflorence/status/1227629264259801088?s=20"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581608876.136700",
        "reply_count": 14,
        "reply_users_count": 4,
        "latest_reply": "1581738763.177300",
        "reply_users": [
            "UEQ6M68H0",
            "ULM3U6275",
            "UHWC9PXBL",
            "UBSMEUXAA"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "hatching_chick",
                "users": [
                    "UC2A2ARPT",
                    "UFB8STN7K",
                    "UA14TGLTC",
                    "U8A5MS6R1",
                    "UCXR52MU2"
                ],
                "count": 5
            },
            {
                "name": "heart_eyes",
                "users": [
                    "USL4R0T61",
                    "UBSMEUXAA"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "3d512391-d7cf-4e98-b206-954ab5aa77cc",
        "type": "message",
        "text": "I think the title reads like clickbait, and the premise is wrong. There is no single universal programming language that is best for all domains. Although I am sympathetic to the issues he raises, they don't apply equally in all domains.",
        "user": "UJN1TAYEQ",
        "ts": "1581614548.137100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iZ4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the title reads like clickbait, and the premise is wrong. There is no single universal programming language that is best for all domains. Although I am sympathetic to the issues he raises, they don't apply equally in all domains."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581503038.102000",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "e9b358ba-994d-41b3-b9d3-dd2dbc08a845",
        "type": "message",
        "text": "at this stage any new non system programming language that has integers with a size limit, decimal type that is a float or string that are array of bytes for me is wrong",
        "user": "UBN9AFS0N",
        "ts": "1581615092.137300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bECE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "at this stage any new non system programming language that has integers with a size limit, decimal type that is a float or string that are array of bytes for me is wrong"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581503038.102000",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "9b8d0488-baa8-4e2e-861f-fcb956ee5d4a",
        "type": "message",
        "text": "that should be like \"dropping down to assembly\" is in C, something you do in very specific cases",
        "user": "UBN9AFS0N",
        "ts": "1581615144.137500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zcvEc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "that should be like \"dropping down to assembly\" is in C, something you do in very specific cases"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581503038.102000",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "60c618cd-1683-4e63-9ded-e66ed4aaeb61",
        "type": "message",
        "text": "For example,\n&gt; certain data types such as numbers are a special case which does not fit well into the general type system of the language, and hardware details such as the number of bits supported by an integer add instruction show through in the language semantics\nHe's claiming that *all programming languages* should have numeric types that don't expose the details of hardware representations, when in fact, this is a *requirement* for certain domains of programming. It's a requirement for systems programming, obviously. It's also a requirement for graphics programming, where you can be manipulating huge arrays containing millions of pixels or triangles, or hundreds of millions of voxels. In order to fit these huge arrays into memory, every bit counts, so you must have precise control over the bit-level representation of the numbers stored in the array elements.",
        "user": "UJN1TAYEQ",
        "ts": "1581615168.137700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t0TS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For example,\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "certain data types such as numbers are a special case which does not fit well into the general type system of the language, and hardware details such as the number of bits supported by an integer add instruction show through in the language semantics"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "He's claiming that "
                            },
                            {
                                "type": "text",
                                "text": "all programming languages",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " should have numeric types that don't expose the details of hardware representations, when in fact, this is a "
                            },
                            {
                                "type": "text",
                                "text": "requirement",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for certain domains of programming. It's a requirement for systems programming, obviously. It's also a requirement for graphics programming, where you can be manipulating huge arrays containing millions of pixels or triangles, or hundreds of millions of voxels. In order to fit these huge arrays into memory, every bit counts, so you must have precise control over the bit-level representation of the numbers stored in the array elements."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581503038.102000",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D",
                    "UBSMEUXAA"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "b8561831-90dc-417b-9491-fd627cbf9521",
        "type": "message",
        "text": "This has become an issue for the Curv programming language. Curv was always meant to be a very high level language, simpler and higher level than Python or Javascript. There is only a single numeric type, so you don't worry about which number type to use, or should I write '0' or '0.0' in this context. But I'm adding support for huge arrays, and in that corner of the language, I need a DSL for describing sized numeric types.",
        "user": "UJN1TAYEQ",
        "ts": "1581615809.137900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2n7A4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This has become an issue for the Curv programming language. Curv was always meant to be a very high level language, simpler and higher level than Python or Javascript. There is only a single numeric type, so you don't worry about which number type to use, or should I write '0' or '0.0' in this context. But I'm adding support for huge arrays, and in that corner of the language, I need a DSL for describing sized numeric types."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581503038.102000",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "8d5d55c5-b764-44e3-b689-22da16c10248",
        "type": "message",
        "text": "it's ok to support sized numeric types, but default numbers should behave like math numbers, not like cpu friendly numbers",
        "user": "UBN9AFS0N",
        "ts": "1581615972.138100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3i+WV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it's ok to support sized numeric types, but default numbers should behave like math numbers, not like cpu friendly numbers"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581503038.102000",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "16f96220-c869-4a06-b150-ad9895f6a055",
        "type": "message",
        "text": "the same way you should have list/vector types, but also an efficient array type, but the default should be the list/vector, you only need arrays when you need them",
        "user": "UBN9AFS0N",
        "ts": "1581616009.138300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vivx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the same way you should have list/vector types, but also an efficient array type, but the default should be the list/vector, you only need arrays when you need them"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581503038.102000",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "1e106909-0752-4a90-a4ea-3e6328e6f48b",
        "type": "message",
        "text": "In Curv, I _want_ default numbers to behave like math numbers, but it's theoretically impossible. Math numbers require infinite storage (in the worst case) and infinite computation for arithmetic and relational operators (in the worst case). You have to compromise somewhere. My compromise is to use 64 bit IEEE floating point numbers (minus the NaN) as my number type.",
        "user": "UJN1TAYEQ",
        "ts": "1581616476.138500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m1eT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In Curv, I "
                            },
                            {
                                "type": "text",
                                "text": "want",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " default numbers to behave like math numbers, but it's theoretically impossible. Math numbers require infinite storage (in the worst case) and infinite computation for arithmetic and relational operators (in the worst case). You have to compromise somewhere. My compromise is to use 64 bit IEEE floating point numbers (minus the NaN) as my number type."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581503038.102000",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "01a4a8ad-3f27-4d5c-bb7b-6b8b5710d741",
        "type": "message",
        "text": "python and erlang have math numbers (for ints) and i've never heard of someone running out of ram",
        "user": "UBN9AFS0N",
        "ts": "1581616727.138700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1581616744.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o8u99",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "python and erlang have math numbers (for ints) and i've never heard of someone running out of ram"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581503038.102000",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "90349a17-5952-44ec-a650-3984ddb5421a",
        "type": "message",
        "text": "I fear the worst case of floating points more than the worst case of math numbers",
        "user": "UBN9AFS0N",
        "ts": "1581616795.139000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J1Wsu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I fear the worst case of floating points more than the worst case of math numbers"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581503038.102000",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "34fda5f2-2a85-4f4f-a7cf-7986866c0629",
        "type": "message",
        "text": "and it happens much more often",
        "user": "UBN9AFS0N",
        "ts": "1581616803.139200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3knM1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and it happens much more often"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581503038.102000",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "46f987bf-bf98-4171-9640-42e3241e2104",
        "type": "message",
        "text": "People can also play piano with their feet, but it isn't easy.\n\nI have seen a computer game that lets you program in an isometric-view 3D world, with logic gates, etc., super fancy and clever, so it is possible.\n\nWorking on small screens is quite cumbersome, and debugging is just infeasible. Debugging a graphical interactive product on a single monitor even 32\" in size is a tricky thing (I do it all the time).\n\nSo just because the kids are used to working on phones doesn't mean it is practical or sensible. It requires way too much human memory to do it that way.",
        "user": "UEQ6M68H0",
        "ts": "1581629977.139500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0==TM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "People can also play piano with their feet, but it isn't easy.\n\nI have seen a computer game that lets you program in an isometric-view 3D world, with logic gates, etc., super fancy and clever, so it is possible.\n\nWorking on small screens is quite cumbersome, and debugging is just infeasible. Debugging a graphical interactive product on a single monitor even 32\" in size is a tricky thing (I do it all the time).\n\nSo just because the kids are used to working on phones doesn't mean it is practical or sensible. It requires way too much human memory to do it that way."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581608876.136700",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "a95c2f52-7289-4273-86e2-4c9b52e07018",
        "type": "message",
        "text": "It's not hard to make integers that behave like math numbers. The problems start with rational numbers, and become intractable with transcendental numbers. That's why I said you have to compromise somewhere. The best choice of number representation depends on your domain. For graphics, which depend heavily on transcendental operations (like trigonometry and sqrt), binary floating point is a good choice. Curv programs run on the GPU, where binary floating point is the only choice. If your domain includes financial computations, like spreadsheets, then decimal floating point is better.",
        "user": "UJN1TAYEQ",
        "ts": "1581631674.139700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QLo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's not hard to make integers that behave like math numbers. The problems start with rational numbers, and become intractable with transcendental numbers. That's why I said you have to compromise somewhere. The best choice of number representation depends on your domain. For graphics, which depend heavily on transcendental operations (like trigonometry and sqrt), binary floating point is a good choice. Curv programs run on the GPU, where binary floating point is the only choice. If your domain includes financial computations, like spreadsheets, then decimal floating point is better."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581503038.102000",
        "parent_user_id": "UBN9AFS0N"
    }
]