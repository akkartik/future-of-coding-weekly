[
    {
        "client_msg_id": "f5e7467a-d76f-4a82-a963-11b6a554dfb9",
        "type": "message",
        "text": "I was tinkering with a VSCode extension inspired by Code Bubbles but my effort was mostly focused on navigating and reading JavaScript code bases.\nIf anyone is keen - <https://github.com/Raathigesh/JSBubbles>.\n\nAny feedback/ideas would be helpful.",
        "user": "US6TKS2HW",
        "ts": "1581558794.099200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vTiuT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was tinkering with a VSCode extension inspired by Code Bubbles but my effort was mostly focused on navigating and reading JavaScript code bases.\nIf anyone is keen - "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/Raathigesh/JSBubbles"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nAny feedback/ideas would be helpful."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581558794.099200",
        "reply_count": 12,
        "reply_users_count": 5,
        "latest_reply": "1583099557.068500",
        "reply_users": [
            "UE1JQM9HQ",
            "UC21F8Q48",
            "US6TKS2HW",
            "US370TRJA",
            "UFPPABQ7P"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UTG9XLGKZ",
                    "UKP3B2J5D",
                    "UFPPABQ7P"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "70b11af6-7fdc-46ac-b2b4-113221e64bc6",
        "type": "message",
        "text": "This is a much nicer demo i think. I could see whitebox being very useful for debugging subroutines that have loops and tricky computations. It presents a great deal more information, and lets you filter, and explore that information in a useful way, and it is decent effort. I would caution you that many issues related to programming today involve building graphical interfaces, and there is no section related to how things look on the screen. Also, i recommend you build test examples that are longer and larger, because the usability of your tool will be determined by how larger code bases, with more data look and feel. Once you have 200 rows in your window, will it be scrolling critical data off the screen? This is one of the problems with the Chrome debugger; you have so many variables that are implied to be defined, and so many stupid CSS values that one can talk about, you waste a lot of time looking for stuff in tiny scrolling windows. I often wonder if a second monitor just shouldn't be required for all debugging work.",
        "user": "UEQ6M68H0",
        "ts": "1581578198.099400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cD6mz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is a much nicer demo i think. I could see whitebox being very useful for debugging subroutines that have loops and tricky computations. It presents a great deal more information, and lets you filter, and explore that information in a useful way, and it is decent effort. I would caution you that many issues related to programming today involve building graphical interfaces, and there is no section related to how things look on the screen. Also, i recommend you build test examples that are longer and larger, because the usability of your tool will be determined by how larger code bases, with more data look and feel. Once you have 200 rows in your window, will it be scrolling critical data off the screen? This is one of the problems with the Chrome debugger; you have so many variables that are implied to be defined, and so many stupid CSS values that one can talk about, you waste a lot of time looking for stuff in tiny scrolling windows. I often wonder if a second monitor just shouldn't be required for all debugging work."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581529065.096000",
        "parent_user_id": "UEDDR6L5Q"
    },
    {
        "client_msg_id": "1704604d-ae4f-46f7-ac47-31843f09608b",
        "type": "message",
        "text": "Excellent work!",
        "user": "UE1JQM9HQ",
        "ts": "1581583065.099600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ihEfs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Excellent work!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581558794.099200",
        "parent_user_id": "US6TKS2HW",
        "reactions": [
            {
                "name": "slightly_smiling_face",
                "users": [
                    "US6TKS2HW"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UFPPABQ7P"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "4e630d32-9379-49e9-9c6b-f275aaa4bf71",
        "type": "message",
        "text": "Thanks for the feedback Edward!\n1. do you mean whitebox should have a section related to GUI dev?\n2. I completely agree. Most of the effort so far has been in just getting the right information to the screen _somehow_, not in presenting it in a particularly useful manner. This is pretty critical to get right, and you're correct to advise testing in a manner closer to real-world usage. As soon as whitebox is stable enough I will be using it for editing its own source code...\n3. I have a couple of ideas for quickly getting to useful data. You can probably roughly split behaviour into 'searching' (\"I know what I'm looking for, show it to me\") and 'browsing' (\"what's going on here? give me an overview that I can drill down on\"), which are addressed through different UI features. I can talk a bit more about some details if you like, and I'm sure many in this community have their own ideas about what's important here.\n4. re a second monitor: the extra space is invaluable, and since I've added one to my own setup I struggle to be without. Of course one has to support split windows on a single monitor, but many things are easier when more space is available.",
        "user": "UEDDR6L5Q",
        "ts": "1581600652.099800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n54",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the feedback Edward!\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "do you mean whitebox should have a section related to GUI dev?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I completely agree. Most of the effort so far has been in just getting the right information to the screen "
                                    },
                                    {
                                        "type": "text",
                                        "text": "somehow",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ", not in presenting it in a particularly useful manner. This is pretty critical to get right, and you're correct to advise testing in a manner closer to real-world usage. As soon as whitebox is stable enough I will be using it for editing its own source code..."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I have a couple of ideas for quickly getting to useful data. You can probably roughly split behaviour into 'searching' (\"I know what I'm looking for, show it to me\") and 'browsing' (\"what's going on here? give me an overview that I can drill down on\"), which are addressed through different UI features. I can talk a bit more about some details if you like, and I'm sure many in this community have their own ideas about what's important here."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "re a second monitor: the extra space is invaluable, and since I've added one to my own setup I struggle to be without. Of course one has to support split windows on a single monitor, but many things are easier when more space is available."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1581529065.096000",
        "parent_user_id": "UEDDR6L5Q"
    },
    {
        "client_msg_id": "72be52af-e1ba-4b75-870e-495454ec2b6b",
        "type": "message",
        "text": "A question about the VSCode extension (as I consider if VSCode is a good target): So the bubbles only exist in the JSBubbles tab (the stage)? The text editor within the bubbles, it\u2019s not the user\u2019s regular VSCode, right, it\u2019s some JS library?",
        "user": "UC21F8Q48",
        "ts": "1581612533.100100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Oi6Zj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A question about the VSCode extension (as I consider if VSCode is a good target): So the bubbles only exist in the JSBubbles tab (the stage)? The text editor within the bubbles, it\u2019s not the user\u2019s regular VSCode, right, it\u2019s some JS library?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581558794.099200",
        "parent_user_id": "US6TKS2HW"
    },
    {
        "client_msg_id": "7f615158-d68d-4887-a2e7-4ba978006ca5",
        "type": "message",
        "text": "I want bubbles in the blank space in the standard VSCode buffer, but my understanding is there\u2019s no API hook to place arbitrary items on a VSCode text buffer, only tooltips or autocomplete etc.",
        "user": "UC21F8Q48",
        "ts": "1581612630.100300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DsA4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I want bubbles in the blank space in the standard VSCode buffer, but my understanding is there\u2019s no API hook to place arbitrary items on a VSCode text buffer, only tooltips or autocomplete etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581558794.099200",
        "parent_user_id": "US6TKS2HW"
    },
    {
        "client_msg_id": "84184dc8-7290-421a-9515-67a1e7361663",
        "type": "message",
        "text": "You are right. Currently the code bubbles live in it\u2019s own tab because, like you already pointed out, there is no support for floating tabs yet in VSCode.\n\nI mostly use it to navigate and read code and for that purpose it\u2019s working out well that I initially expected.\n\nHowever the internal editor JS Library is the Monaco Editor, the same editor which powers the main VSCode editing experience but inside bubbles you would not get your editor preferences or plugins at the moment.",
        "user": "US6TKS2HW",
        "ts": "1581628149.100600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lgI3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You are right. Currently the code bubbles live in it\u2019s own tab because, like you already pointed out, there is no support for floating tabs yet in VSCode.\n\nI mostly use it to navigate and read code and for that purpose it\u2019s working out well that I initially expected.\n\nHowever the internal editor JS Library is the Monaco Editor, the same editor which powers the main VSCode editing experience but inside bubbles you would not get your editor preferences or plugins at the moment."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581558794.099200",
        "parent_user_id": "US6TKS2HW"
    },
    {
        "client_msg_id": "27b3e97b-f5a7-4fd8-a18f-e61e2c3d5174",
        "type": "message",
        "text": "<@US6TKS2HW> thanks!",
        "user": "UC21F8Q48",
        "ts": "1581628709.100800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zSY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "US6TKS2HW"
                            },
                            {
                                "type": "text",
                                "text": " thanks!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581558794.099200",
        "parent_user_id": "US6TKS2HW"
    },
    {
        "client_msg_id": "cc57f077-cae8-4443-84f9-ecf4b5b604ae",
        "type": "message",
        "text": "1. Yes i am saying that a section related to what the program is drawing should be present. The problem example you showed was a kind of program that is crunching numbers. But many programs read a bunch of stuff, process it, and spit out some data. In some cases spitting out means drawing the data in a pretty form, whether it be a classic computer report, or the more modern dashboard.  I was looking for an input and output area. Obviously you are working your way towards this, i am merely projecting forward to what i see is missing from your tool. For the projects i work on, which are graphical interactive client programs, most of my time is spent on the user interface, and i have almost no computation work. \n2.  many of the most radical projects in this group are trying to do node-and-wire graphical programming interfaces. They often show little teeny programs that make their approach look so great, but when you as them to do a program of even a measly 1500 words like Chess, their tool breaks down completely because you are now scrolling in all 4 directions at once, which is the death of comprehension. Every tool that tries to show multiple dimensions simultaneously will bump into this horrible screensize constraint. We are in the dark ages of programming where it hasn't been realized that we need wall sized screens with 10x the number of pixels we currently have. Apple is leading the way forward in pixel count, but because they are increasing the density not the size of the screen (their iMac Pro for example tops out at a mere 27 inches), they cheat and pixel double, so their 5000 pixels across is actually on 2500 in practice, which is nothing fancy.  If i had a monitor that was 4ft x 3ft, i could easily show all sorts of stuff about a system, and it would be so much easier to understand and debug.\n\nYou can see in stock trading, and music mixing consoles that they use larger areas to make it easier. Shoehorning a complex debugging interface into a small space is a design challenge, and there are many competing philosophies. One philosophy is the floating palette approach that Adobe employs in their Creative Cloud product line. Another philosophy, quite diametrically opposed to that is the tiled window approach where you never overlap one thing with another.  I would call WhiteBox's approach the tiled style.\n\n4. I have many artists friends, and every single one of them uses 2 monitors for Adobe products, because it is too much hassle to constantly switch between windows. You jump around a lot while creating, and there is no possible arrangement that doesn't' cause lots of thrashing. But that is for Pro users, and many users just don't realize how much nicer it would be because they've never used a 2nd monitor. Apple had multiple monitors way earlier than Windows, but i see many laptops today supporting 3 screens at once (builtin, VGA port, HDMI port).  I just saw a Samsung phone demoed that has 12 GB of RAM, so i imagine in the future you will wirelessly dock your phone with some giant monitor grid and work that way. I wish they would make a laptop with a double folding screen, so you can actually get work done. I never use a laptop because i am spoiled by my 32 inch samsung. Working on tiny screens is like tying your hands behind your back.",
        "user": "UEQ6M68H0",
        "ts": "1581631169.101000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Uw/h8",
                "elements": [
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Yes i am saying that a section related to what the program is drawing should be present. The problem example you showed was a kind of program that is crunching numbers. But many programs read a bunch of stuff, process it, and spit out some data. In some cases spitting out means drawing the data in a pretty form, whether it be a classic computer report, or the more modern dashboard.  I was looking for an input and output area. Obviously you are working your way towards this, i am merely projecting forward to what i see is missing from your tool. For the projects i work on, which are graphical interactive client programs, most of my time is spent on the user interface, and i have almost no computation work. "
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "2.  many of the most radical projects in this group are trying to do node-and-wire graphical programming interfaces. They often show little teeny programs that make their approach look so great, but when you as them to do a program of even a measly 1500 words like Chess, their tool breaks down completely because you are now scrolling in all 4 directions at once, which is the death of comprehension. Every tool that tries to show multiple dimensions simultaneously will bump into this horrible screensize constraint. We are in the dark ages of programming where it hasn't been realized that we need wall sized screens with 10x the number of pixels we currently have. Apple is leading the way forward in pixel count, but because they are increasing the density not the size of the screen (their iMac Pro for example tops out at a mere 27 inches), they cheat and pixel double, so their 5000 pixels across is actually on 2500 in practice, which is nothing fancy.  If i had a monitor that was 4ft x 3ft, i could easily show all sorts of stuff about a system, and it would be so much easier to understand and debug.\n\nYou can see in stock trading, and music mixing consoles that they use larger areas to make it easier. Shoehorning a complex debugging interface into a small space is a design challenge, and there are many competing philosophies. One philosophy is the floating palette approach that Adobe employs in their Creative Cloud product line. Another philosophy, quite diametrically opposed to that is the tiled window approach where you never overlap one thing with another.  I would call WhiteBox's approach the tiled style.\n\n4. I have many artists friends, and every single one of them uses 2 monitors for Adobe products, because it is too much hassle to constantly switch between windows. You jump around a lot while creating, and there is no possible arrangement that doesn't' cause lots of thrashing. But that is for Pro users, and many users just don't realize how much nicer it would be because they've never used a 2nd monitor. Apple had multiple monitors way earlier than Windows, but i see many laptops today supporting 3 screens at once (builtin, VGA port, HDMI port).  I just saw a Samsung phone demoed that has 12 GB of RAM, so i imagine in the future you will wirelessly dock your phone with some giant monitor grid and work that way. I wish they would make a laptop with a double folding screen, so you can actually get work done. I never use a laptop because i am spoiled by my 32 inch samsung. Working on tiny screens is like tying your hands behind your back."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1581529065.096000",
        "parent_user_id": "UEDDR6L5Q"
    }
]