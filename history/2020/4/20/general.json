[
    {
        "client_msg_id": "75ecbf3d-a1f9-45c5-8271-907afc8850cb",
        "type": "message",
        "text": "<@UC2A2ARPT> Mine is a bit related to Doug\u2019s. But a bit different of a motivation.\n\nI am building a very dynamic language.  A language that should have a very small core but with the power to implement most of the interesting things in itself.\n\nI\u2019ve done a bit of exploration building it in Clojure (my preferred language for many things) but found a few problems. First, the language I was making was being too heavily influenced by what was convenient for me to do in Clojure. I always ended up with a lispy thing just because I could do it quick. I know that if I stick with clojure those things will leak in more than I wanted and so I decided to not use it.\n\nSecond, and more importantly, I don\u2019t want to spend time right now focused on speed, but I need an interpreter that is decently fast. Since most of the interesting things in my language should be implemented in itself, I will have a huge interpreter overhead. Of course, I could spend the time to optimize that away, but I\u2019m still exploring the idea and optimization isn\u2019t the interesting part. When I was doing things in clojure, my naive solution was already getting to the point where things weren\u2019t interactive at the level I wanted them to be.\n\nSo for those reasons I chose Rust as my implementation language of choice. I know that in the future when I really care about the speed of everything I can make it fast. And for now, my super naive code is already fast enough for what I\u2019m doing. I haven\u2019t gotten quite to the point where I can really test the interpreter overhead. But I expect things to be fast enough that I can make all the ideas I have in my head in my language itself, keeping the rust I have to write to a very small amount (hopefully 500-1000 lines at most).",
        "user": "UK3LH8CF5",
        "ts": "1587335040.081300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ECiHY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " Mine is a bit related to Doug\u2019s. But a bit different of a motivation.\n\nI am building a very dynamic language.  A language that should have a very small core but with the power to implement most of the interesting things in itself.\n\nI\u2019ve done a bit of exploration building it in Clojure (my preferred language for many things) but found a few problems. First, the language I was making was being too heavily influenced by what was convenient for me to do in Clojure. I always ended up with a lispy thing just because I could do it quick. I know that if I stick with clojure those things will leak in more than I wanted and so I decided to not use it.\n\nSecond, and more importantly, I don\u2019t want to spend time right now focused on speed, but I need an interpreter that is decently fast. Since most of the interesting things in my language should be implemented in itself, I will have a huge interpreter overhead. Of course, I could spend the time to optimize that away, but I\u2019m still exploring the idea and optimization isn\u2019t the interesting part. When I was doing things in clojure, my naive solution was already getting to the point where things weren\u2019t interactive at the level I wanted them to be.\n\nSo for those reasons I chose Rust as my implementation language of choice. I know that in the future when I really care about the speed of everything I can make it fast. And for now, my super naive code is already fast enough for what I\u2019m doing. I haven\u2019t gotten quite to the point where I can really test the interpreter overhead. But I expect things to be fast enough that I can make all the ideas I have in my head in my language itself, keeping the rust I have to write to a very small amount (hopefully 500-1000 lines at most)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587137050.479200",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d9633b0f-b93a-46fb-ad1e-a0634185b311",
        "type": "message",
        "text": "<@UCUSW7WVD> (Happy to chat in a DM whenever, but at least for the moment, this is potenially an interesting discussion for the group, so I've continued here.)\n\n&gt; In <https://futureofcoding.slack.com/archives/C5T9GPWFL/p1586869277389100?thread_ts=1584718837.435500&amp;cid=C5T9GPWFL> you suggested that you're trying to separate goals from solutions and focus on the former. That's reasonable as a goal for this particular page. (It's also why I find this page unsatisfying.) But it also seems reasonable for it to trigger conversations about the how. That doesn't feel like \"missing the point\". Isn't that sort of conversation what this page is designed to engender?\nYes, completely agreed. The mission page is trying to act as a list of ideals to aim for (and they aren't set in stone either, I'm sure they'll change and improve through feedback like this). It's great to see people talking about how they could be achieved, which goals are more important to them, etc.\n\n&gt; Perhaps it will help to triangulate by bringing up my mission: <http://akkartik.name/about>. Not to brag, but we're attacking highly overlapping if not isomorphic problems. By definition I should have addressed any shortcomings I bring up here. It stays high-level, focuses on goals, but also indicates the sorts of trade-offs I'm willing to make. I'd love to receive similar criticism from you about what it's lacking.\nI agree, there's a good amount of overlap between the malleable principles and your own mission. Seems like we should continue to chat and compare notes as our efforts evolve. :smile:\n\nAbout your own mission page, overall I think it's quite good! My initial comments are only about stylistic things like making section headers more visually distinct, since my ADHD-addled brain found it hard to scan. I think with a personal mission (like your page), where you're describing your personal vision, it makes sense to link goals, constraints, and solutions together like you have done.\n\nFor the malleable site, I'd like many different voices to contribute their own views, constraints, and solutions, so that's why I've been saying they make more sense to be separate elements from the list of ideals there: I expect there to be many different answers as different people get involved. For now, I'd like to at least collect such perspectives and encourage more discussion.\n\n&gt; Perhaps it would help to drill down into which comments you consider to be missing the point. It might require a private conversation, but it might help make this conversation more concrete.\nThere's a background level of startup-y noise in there, such as <https://news.ycombinator.com/item?id=22858840>, but I never read HN these days, so perhaps that's actually a low amount of such things for the site. :sweat_smile:\n\nI agree there's useful feedback in there as well. :smile: Thanks for picking out those various threads and summarising the sentiment. I agree with your take on the ones you selected. I'll add them to my list of feedback to sift through for the future.",
        "user": "UML4ZEKDK",
        "ts": "1587335767.081500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UML4ZEKDK",
            "ts": "1587335906.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F496/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " (Happy to chat in a DM whenever, but at least for the moment, this is potenially an interesting discussion for the group, so I've continued here.)\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1586869277389100?thread_ts=1584718837.435500&cid=C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": " you suggested that you're trying to separate goals from solutions and focus on the former. That's reasonable as a goal for this particular page. (It's also why I find this page unsatisfying.) But it also seems reasonable for it to trigger conversations about the how. That doesn't feel like \"missing the point\". Isn't that sort of conversation what this page is designed to engender?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, completely agreed. The mission page is trying to act as a list of ideals to aim for (and they aren't set in stone either, I'm sure they'll change and improve through feedback like this). It's great to see people talking about how they could be achieved, which goals are more important to them, etc.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perhaps it will help to triangulate by bringing up my mission: "
                            },
                            {
                                "type": "link",
                                "url": "http://akkartik.name/about"
                            },
                            {
                                "type": "text",
                                "text": ". Not to brag, but we're attacking highly overlapping if not isomorphic problems. By definition I should have addressed any shortcomings I bring up here. It stays high-level, focuses on goals, but also indicates the sorts of trade-offs I'm willing to make. I'd love to receive similar criticism from you about what it's lacking."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree, there's a good amount of overlap between the malleable principles and your own mission. Seems like we should continue to chat and compare notes as our efforts evolve. "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAbout your own mission page, overall I think it's quite good! My initial comments are only about stylistic things like making section headers more visually distinct, since my ADHD-addled brain found it hard to scan. I think with a personal mission (like your page), where you're describing your personal vision, it makes sense to link goals, constraints, and solutions together like you have done.\n\nFor the malleable site, I'd like many different voices to contribute their own views, constraints, and solutions, so that's why I've been saying they make more sense to be separate elements from the list of ideals there: I expect there to be many different answers as different people get involved. For now, I'd like to at least collect such perspectives and encourage more discussion.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perhaps it would help to drill down into which comments you consider to be missing the point. It might require a private conversation, but it might help make this conversation more concrete."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's a background level of startup-y noise in there, such as "
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=22858840"
                            },
                            {
                                "type": "text",
                                "text": ", but I never read HN these days, so perhaps that's actually a low amount of such things for the site. "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI agree there's useful feedback in there as well. "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for picking out those various threads and summarising the sentiment. I agree with your take on the ones you selected. I'll add them to my list of feedback to sift through for the future."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586818028.382000",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "a7f82139-89e7-4f19-9c78-d739731eb5c0",
        "type": "message",
        "text": "<@UCUSW7WVD> Thanks for taking the time to think about it. I think it conveys your perspective well, and it's a good critique of the current content, so thanks for writing it up! I think you mostly came across as passionate about the topic, so seems like you succeeded in conveying your thoughts. :smile:",
        "user": "UML4ZEKDK",
        "ts": "1587337180.082200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1zLX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for taking the time to think about it. I think it conveys your perspective well, and it's a good critique of the current content, so thanks for writing it up! I think you mostly came across as passionate about the topic, so seems like you succeeded in conveying your thoughts. "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584718837.435500",
        "parent_user_id": "UF1ATC4RF",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c9197f31-12c0-41c3-89c2-85ca47e333f5",
        "type": "message",
        "text": "Ah, I totally didn't think of the difference between a personal and collective mission statement. It makes a _lot_ more sense now. Thanks!",
        "user": "UCUSW7WVD",
        "ts": "1587339076.082500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AFra",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, I totally didn't think of the difference between a personal and collective mission statement. It makes a "
                            },
                            {
                                "type": "text",
                                "text": "lot",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " more sense now. Thanks!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586818028.382000",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UML4ZEKDK",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "c907e09c-9f09-4a17-ad00-5911cb770909",
        "type": "message",
        "text": "I really like the meme that it looks to (\"Not MVP, but Earliest Testable/Usable/Lovable\"), even though the argument is against it:\n\n<https://blog.crisp.se/wp-content/uploads/2016/01/mvp.png|https://blog.crisp.se/wp-content/uploads/2016/01/mvp.png>",
        "user": "UAVCC2X70",
        "ts": "1587352327.083400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1587354885.000000"
        },
        "attachments": [
            {
                "fallback": "828x618px image",
                "image_url": "https://blog.crisp.se/wp-content/uploads/2016/01/mvp.png",
                "image_width": 828,
                "image_height": 618,
                "image_bytes": 255798,
                "from_url": "https://blog.crisp.se/wp-content/uploads/2016/01/mvp.png",
                "id": 1,
                "original_url": "https://blog.crisp.se/wp-content/uploads/2016/01/mvp.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YcJp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really like the meme that it looks to (\"Not MVP, but Earliest Testable/Usable/Lovable\"), even though the argument is against it:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://blog.crisp.se/wp-content/uploads/2016/01/mvp.png",
                                "text": "https://blog.crisp.se/wp-content/uploads/2016/01/mvp.png"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587304911.079300",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "64b5536c-e24c-463f-bc8e-d8ccdf41f8bd",
        "type": "message",
        "text": "And this:\n\"Software is unprecedented in its low cost of development\u2014when compared to hardware. Code, however, is arguably the most expensive medium for expressing ideas\"",
        "user": "UAVCC2X70",
        "ts": "1587354897.083900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pf+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And this:\n\"Software is unprecedented in its low cost of development\u2014when compared to hardware. Code, however, is arguably the most expensive medium for expressing ideas\""
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587304911.079300",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "08d9c43b-ceeb-414e-8223-a7e337f4fd9e",
        "type": "message",
        "text": "It's amazing to keep realizing how much of \"reality\" (in software, society, politics, ..., etc.) is just not upon \"stories\" (i.e. the ways things are and how they came to be this way) that a culture buys into. (Read a book called \"Ishmael\" for more on that).\n\nWe all know how software was doing this bad waterfall thing, and now it's doing this good Agile thing, and everybody wants to be part of that story and be \"Agile\", whatever that really means.\n\n(Alan Kay says something about people seeing the past as \"like the present, but cruder\", and how limiting that view is)\n\nSimilar things can be said about the perceptions of OOP, \"structured programming\", and probably most other paradigms in software (regarding the how things \"started bad\" and now we do this new good thing -- but that's just a story, and not quite accurate; reality is much more complicated). This video does a good job digging this kind of stuff up:\n\n<https://youtu.be/eEBOvqMfPoI|https://youtu.be/eEBOvqMfPoI>",
        "user": "UAVCC2X70",
        "ts": "1587357169.084300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Procedural Programming: It's Back? It Never Went Away",
                "title_link": "https://youtu.be/eEBOvqMfPoI",
                "author_name": "Coding Tech",
                "author_link": "https://www.youtube.com/channel/UCtxCXg-UvSnTKPOzLH4wJaQ",
                "thumb_url": "https://i.ytimg.com/vi/eEBOvqMfPoI/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Procedural Programming: It's Back? It Never Went Away",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/eEBOvqMfPoI?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/eEBOvqMfPoI",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/eEBOvqMfPoI"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RXaAI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's amazing to keep realizing how much of \"reality\" (in software, society, politics, ..., etc.) is just not upon \"stories\" (i.e. the ways things are and how they came to be this way) that a culture buys into. (Read a book called \"Ishmael\" for more on that).\n\nWe all know how software was doing this bad waterfall thing, and now it's doing this good Agile thing, and everybody wants to be part of that story and be \"Agile\", whatever that really means.\n\n(Alan Kay says something about people seeing the past as \"like the present, but cruder\", and how limiting that view is)\n\nSimilar things can be said about the perceptions of OOP, \"structured programming\", and probably most other paradigms in software (regarding the how things \"started bad\" and now we do this new good thing -- but that's just a story, and not quite accurate; reality is much more complicated). This video does a good job digging this kind of stuff up:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/eEBOvqMfPoI",
                                "text": "https://youtu.be/eEBOvqMfPoI"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587304911.079300",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "97848782-8e38-4c72-9f3f-01f4d4788fbc",
        "type": "message",
        "text": "Funny I didn't think much about noise pollution when I started my blog but am thinking about it now after reading this thread. The main reasons for me were to\n1) add another voice to ideas that I think are good\n2) think through, clarify and organize some my thoughts - required when publishing (I find this also helps me 'move beyond' the specific idea to other ideas)\n3) find folks interested in similar stuff and get comments, conversation and further evolution of the ideas\n\nSpecially wrt 3, I've been _very_ happy with the comments threads that have built up on some pages.\n\nI dont think one needs fully formed coherent ideas to publish. A post could be a vague idea, a proposition, a perspective etc. I would personally recommend a blog, 'digital garden' or collection of unorganized notes. This is not noise, I think, but just an space folks who so desire may visit, absorb, reflect and optionally comment. People are good at filtering. Just now I found <https://twitter.com/szymon_k/status/1251887893938929665> and really like browsing this kind of collection, and looking at the various connections the author has made.",
        "user": "U8A5MS6R1",
        "ts": "1587363908.085700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/szymon_k|@szymon_k>: :herb: made part of my digital garden public: <https://szymonkaliski.com/notes> - together with an essay on my current personal knowledge architecture/process: <https://szymonkaliski.com/writing/2020-04-19-memex-dreams>",
                "ts": 1587308307,
                "author_name": "Szymon Kaliski",
                "author_link": "https://twitter.com/szymon_k/status/1251887893938929665",
                "author_icon": "https://pbs.twimg.com/profile_images/1081201331627589632/xqtTDCjh_normal.jpg",
                "author_subname": "@szymon_k",
                "text": ":herb: made part of my digital garden public: <https://szymonkaliski.com/notes> - together with an essay on my current personal knowledge architecture/process: <https://szymonkaliski.com/writing/2020-04-19-memex-dreams>",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/szymon_k/status/1251887893938929665",
                "id": 1,
                "original_url": "https://twitter.com/szymon_k/status/1251887893938929665",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ukg2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Funny I didn't think much about noise pollution when I started my blog but am thinking about it now after reading this thread. The main reasons for me were to\n1) add another voice to ideas that I think are good\n2) think through, clarify and organize some my thoughts - required when publishing (I find this also helps me 'move beyond' the specific idea to other ideas)\n3) find folks interested in similar stuff and get comments, conversation and further evolution of the ideas\n\nSpecially wrt 3, I've been "
                            },
                            {
                                "type": "text",
                                "text": "very",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " happy with the comments threads that have built up on some pages.\n\nI dont think one needs fully formed coherent ideas to publish. A post could be a vague idea, a proposition, a perspective etc. I would personally recommend a blog, 'digital garden' or collection of unorganized notes. This is not noise, I think, but just an space folks who so desire may visit, absorb, reflect and optionally comment. People are good at filtering. Just now I found "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/szymon_k/status/1251887893938929665"
                            },
                            {
                                "type": "text",
                                "text": " and really like browsing this kind of collection, and looking at the various connections the author has made."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587179790.047300",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UE0ETTCG7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0e7843e7-604d-4929-a910-b0f4e2bc2636",
        "type": "message",
        "text": "\"Almost all high-level programming\" sounds like a huge claim for something that looks specific to databases. Am I overlooking something that makes this idea much more general?",
        "user": "UJBAJNFLK",
        "ts": "1587375028.086300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XBy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Almost all high-level programming\" sounds like a huge claim for something that looks specific to databases. Am I overlooking something that makes this idea much more general?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7"
    },
    {
        "client_msg_id": "4fb8ddb5-f75f-4927-8b2b-464b1ed39064",
        "type": "message",
        "text": "The first sentence of the post is the most important in my opinion: it's not about software, but about management. I wish people would stop writing about \"software\". That's a term just about as specific as \"prose\". You don't see people pontifying about how to write prose. Everybody understands that writing a novel, writing a love letter, and writing technical documentation are very different things, even though all are prose.\n\nAgile is about developing tools for rapidly changing or incompletely understood requirements. If you are working on the perfect contribution to the Obfuscated C Code Contest, then Agile is the last thing you want. Subsuming both problems under \"software development\" is not helpful.",
        "user": "UJBAJNFLK",
        "ts": "1587375636.086500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xJ8ih",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The first sentence of the post is the most important in my opinion: it's not about software, but about management. I wish people would stop writing about \"software\". That's a term just about as specific as \"prose\". You don't see people pontifying about how to write prose. Everybody understands that writing a novel, writing a love letter, and writing technical documentation are very different things, even though all are prose.\n\nAgile is about developing tools for rapidly changing or incompletely understood requirements. If you are working on the perfect contribution to the Obfuscated C Code Contest, then Agile is the last thing you want. Subsuming both problems under \"software development\" is not helpful."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587304911.079300",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UAVCC2X70",
                    "UK22Z72L8"
                ],
                "count": 2
            },
            {
                "name": "100",
                "users": [
                    "UAVCC2X70",
                    "UCUSW7WVD"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "6097BCA9-9A9E-458C-9988-3013B360D471",
        "type": "message",
        "text": "<@UFEQUBNNT> i would love to read that last tutorial if you still have the link",
        "user": "UHWC9PXBL",
        "ts": "1587396562.088400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vN7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFEQUBNNT"
                            },
                            {
                                "type": "text",
                                "text": " i would love to read that last tutorial if you still have the link"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587147667.485000",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "4043eba8-847e-44ff-8d30-2c6968bc1906",
        "type": "message",
        "text": "This idea is more general than relational databases.\n1. The author references \"Out of the Tar Pit\", which persuasively argues that relational programming should be used for general purpose programming. <http://curtclifton.net/papers/MoseleyMarks06a.pdf>\n2. Every general purpose language has hierarchical data structures, and means for querying and updating these data structures. For my Curv language, I started by copying these features from popular languages. So, I have records and arrays; R.foo selects field 'foo' from R; A[i] selects element 'i' from A; etc. And I have multi-dimensional array slices. But I discovered you can't abstract properly over these language features, and they aren't properly composable. So I've broken down these features into orthogonal, composable query and update operators, and I have rediscovered the \"Lens\", popularized by Haskell, but Lens packages are popping up in every language. And I discovered that Lenses are good for building pure functional GUIs that are modular and composable (you use them to connect the model with the view and controller). And I noticed that my new query / update operators resemble relational algebra without the \"join\". So I'm looking at Tarpit and this paper, and wondering if I should just add a join.",
        "user": "UJN1TAYEQ",
        "ts": "1587397503.088600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0Qn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This idea is more general than relational databases.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The author references \"Out of the Tar Pit\", which persuasively argues that relational programming should be used for general purpose programming. "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http://curtclifton.net/papers/MoseleyMarks06a.pdf"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Every general purpose language has hierarchical data structures, and means for querying and updating these data structures. For my Curv language, I started by copying these features from popular languages. So, I have records and arrays; R.foo selects field 'foo' from R; A[i] selects element 'i' from A; etc. And I have multi-dimensional array slices. But I discovered you can't abstract properly over these language features, and they aren't properly composable. So I've broken down these features into orthogonal, composable query and update operators, and I have rediscovered the \"Lens\", popularized by Haskell, but Lens packages are popping up in every language. And I discovered that Lenses are good for building pure functional GUIs that are modular and composable (you use them to connect the model with the view and controller). And I noticed that my new query / update operators resemble relational algebra without the \"join\". So I'm looking at Tarpit and this paper, and wondering if I should just add a join."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7",
        "reactions": [
            {
                "name": "open_mouth",
                "users": [
                    "UFEQUBNNT",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "1d5e5878-9648-4125-8154-89355fc537c6",
        "type": "message",
        "text": "Now that I've read past the intro, I wouldn't exactly _endorse_ this tutorial, but <http://www.sqlcourse.com|here it is>. :)",
        "user": "UFEQUBNNT",
        "ts": "1587397530.088800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "SQLCourse - Interactive Online SQL Training for Beginners",
                "title_link": "http://www.sqlcourse.com/",
                "text": "<http://SQLCourse.com|SQLCourse.com>: an interactive online training course for SQL beginners.",
                "fallback": "SQLCourse - Interactive Online SQL Training for Beginners",
                "from_url": "http://www.sqlcourse.com/",
                "service_name": "sqlcourse.com",
                "id": 1,
                "original_url": "http://www.sqlcourse.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WLP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Now that I've read past the intro, I wouldn't exactly "
                            },
                            {
                                "type": "text",
                                "text": "endorse",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " this tutorial, but "
                            },
                            {
                                "type": "link",
                                "url": "http://www.sqlcourse.com",
                                "text": "here it is"
                            },
                            {
                                "type": "text",
                                "text": ". :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587147667.485000",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "6ea230ff-948e-4a5b-9925-e74d4959615b",
        "type": "message",
        "text": "I don't understand this at all. The low level relational algebrea is handled by the SQL engine itself. What is any of this work buying you?",
        "user": "U0119RRB1MK",
        "ts": "1587404874.089400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U0119RRB1MK",
            "ts": "1587404993.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kT0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't understand this at all. The low level relational algebrea is handled by the SQL engine itself. What is any of this work buying you?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7"
    },
    {
        "client_msg_id": "6FFA6E0B-1B0C-42E0-B301-8CFAC0DDC7A3",
        "type": "message",
        "text": "ahh dang i really liked the framing device",
        "user": "UHWC9PXBL",
        "ts": "1587405409.090000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pqecU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ahh dang i really liked the framing device"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587147667.485000",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "E0A2897E-A3A7-491F-86F2-7852A5234508",
        "type": "message",
        "text": "looked through it a bit and i too wish they followed up such a high quality pitch with some higher quality pedagogy. always on the lookout for examples of really foundational, clean introductions to topics",
        "user": "UHWC9PXBL",
        "ts": "1587405463.091700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KGK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "looked through it a bit and i too wish they followed up such a high quality pitch with some higher quality pedagogy. always on the lookout for examples of really foundational, clean introductions to topics"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587147667.485000",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "59a36277-1708-4056-824a-02c2da79d14e",
        "type": "message",
        "text": "<@U0119RRB1MK> The relational algebra is a more suitable abstraction for programming than SQL (aka the relational calculus). Quote:\n\u2022 SQL has not been designed with composition and separation of concerns in mind,\n\u2022 Avoiding strong coupling between subqueries tends to be very difficult in practice,\n\u2022 Coupling hurts separation of concerns and software design.\nThis shows that embedding SQL in a programming language is not a great idea. It is a poor API, and this paper demonstrates a better alternative (the relational algebra).",
        "user": "UJN1TAYEQ",
        "ts": "1587406495.091900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d39",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U0119RRB1MK"
                            },
                            {
                                "type": "text",
                                "text": " The relational algebra is a more suitable abstraction for programming than SQL (aka the relational calculus). Quote:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "SQL has not been designed with composition and separation of concerns in mind,"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Avoiding strong coupling between subqueries tends to be very difficult in practice,"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Coupling hurts separation of concerns and software design."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This shows that embedding SQL in a programming language is not a great idea. It is a poor API, and this paper demonstrates a better alternative (the relational algebra)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7"
    },
    {
        "client_msg_id": "5aae8dc4-3dd0-401f-a3a0-297e172324c0",
        "type": "message",
        "text": "<@U0119RRB1MK> The relational algebra is a general purpose API for querying and updating data structures. You don't need a relational database for it to be useful. Alf allows you to query .json, .csv, .yaml files and convert from one format to the other with ease. Microsoft has created Linq based on the same principles: relational algebra as a general purpose API for query and update, not restricted to relational databases. Microsoft has embedded Linq in all of their programming languages: C#, F# and so on.",
        "user": "UJN1TAYEQ",
        "ts": "1587406691.092100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "go3n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U0119RRB1MK"
                            },
                            {
                                "type": "text",
                                "text": " The relational algebra is a general purpose API for querying and updating data structures. You don't need a relational database for it to be useful. Alf allows you to query .json, .csv, .yaml files and convert from one format to the other with ease. Microsoft has created Linq based on the same principles: relational algebra as a general purpose API for query and update, not restricted to relational databases. Microsoft has embedded Linq in all of their programming languages: C#, F# and so on."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7"
    },
    {
        "client_msg_id": "c9f3d666-ffee-4425-8895-a5f789f1a6cb",
        "type": "message",
        "text": "LINQ: <https://en.wikipedia.org/wiki/Language_Integrated_Query>\nLINQ is based on the relational algebra: <https://news.ycombinator.com/item?id=9116884>",
        "user": "UJN1TAYEQ",
        "ts": "1587406832.092300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Language Integrated Query",
                "title_link": "https://en.wikipedia.org/wiki/Language_Integrated_Query",
                "from_url": "https://en.wikipedia.org/wiki/Language_Integrated_Query",
                "author_name": "Wikipedia",
                "author_link": "https://en.wikipedia.org/",
                "text": "Language Integrated Query (LINQ, pronounced \"link\") is a Microsoft .NET Framework component that adds native data querying capabilities to .NET languages, originally released as a major part of .NET Framework 3.5 in 2007.\nLINQ extends the language by the addition of query expressions, which are akin to SQL statements, and can be used to conveniently extract and process data from arrays, enumerable classes, XML documents, relational databases, and third-party data sources. Other uses, which utilize query expressions as a general framework for readably composing arbitrary computations, include the construction of event handlers or monadic parsers. It also defines a set of method names (called standard query operators, or standard sequence operators), along with translation rules used by the compiler to translate fluent-style query expressions into expressions using these method names, lambda expressions and anonymous types. Many of the concepts that LINQ introduced were originally tested in Microsoft's C\u03c9 research project. \nPorts of LINQ exist for PHP (PHPLinq), JavaScript (linq.js), TypeScript (linq.ts), and ActionScript (ActionLinq), although none are strictly equivalent to LINQ in the .NET inspired languages C#, F# and <http://VB.NET|VB.NET> (where it is a part of the language, not an external library, and where it often addresses a wider range of needs).",
                "fallback": "wikipedia: Language Integrated Query",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png",
                "id": 1,
                "original_url": "https://en.wikipedia.org/wiki/Language_Integrated_Query"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WfPTF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "LINQ: "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Language_Integrated_Query"
                            },
                            {
                                "type": "text",
                                "text": "\nLINQ is based on the relational algebra: "
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=9116884"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7"
    },
    {
        "client_msg_id": "109ac2ae-0533-4480-a60a-b18973eac5b4",
        "type": "message",
        "text": "awesome, I like this direction a lot, I\u2019ve also had a nagging hunch that all program data can (and maybe should) be stored as relations",
        "user": "UETFVV24Q",
        "ts": "1587407780.092700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lYVp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "awesome, I like this direction a lot, I\u2019ve also had a nagging hunch that all program data can (and maybe should) be stored as relations"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7"
    },
    {
        "client_msg_id": "da31d12e-cc98-478e-a98a-64219f8ed540",
        "type": "message",
        "text": "if we look at the work that human programmers do all day, so much of it is taking things that are relational (at least in the abstract) and turning it into more-specific implementations, for example, any object-oriented code",
        "user": "UETFVV24Q",
        "ts": "1587407802.092900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6RTC=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if we look at the work that human programmers do all day, so much of it is taking things that are relational (at least in the abstract) and turning it into more-specific implementations, for example, any object-oriented code"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7"
    },
    {
        "client_msg_id": "5fffbde5-004a-43ad-90dc-66b67c215dd3",
        "type": "message",
        "text": "LINQ I understand and it is good. I'm not seeing the connection between this and LINQ",
        "user": "U0119RRB1MK",
        "ts": "1587408800.093100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xjZ4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "LINQ I understand and it is good. I'm not seeing the connection between this and LINQ"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7"
    },
    {
        "client_msg_id": "865c333a-5bfe-4e76-b1eb-c65446882ec9",
        "type": "message",
        "text": "<https://www.youtube.com/watch?v=jtQMV8InOMY>",
        "user": "UBN9AFS0N",
        "ts": "1587409068.093400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Ultorg: A General-Purpose User Interface for Relational Databases",
                "title_link": "https://www.youtube.com/watch?v=jtQMV8InOMY",
                "author_name": "MIT CSAIL Alliances",
                "author_link": "https://www.youtube.com/channel/UCfplsUBZ2IZitni1qzsjnRQ",
                "thumb_url": "https://i.ytimg.com/vi/jtQMV8InOMY/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Ultorg: A General-Purpose User Interface for Relational Databases",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/jtQMV8InOMY?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=jtQMV8InOMY",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=jtQMV8InOMY"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4TaF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=jtQMV8InOMY"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587409068.093400",
        "reply_count": 9,
        "reply_users_count": 3,
        "latest_reply": "1587664771.150000",
        "reply_users": [
            "UDKTZSD6H",
            "UFEQUBNNT",
            "UHWC9PXBL"
        ],
        "subscribed": true,
        "last_read": "1587664771.150000"
    },
    {
        "client_msg_id": "0c236d0c-a1d8-4e78-a354-e4348ba4505f",
        "type": "message",
        "text": "<@UETFVV24Q> I don't agree with the Tarpit paper that *all* program data should be stored as relational tables. For my domain (computer graphics), you need multi-dimensional arrays and linear algebra. Storing a 4x4 transformation matrix as 16 individual cells in a relational database seems crazy. ADTs are heavily overused in OOP programming, and I'm not a fan of the style, but I still think we need abstract data types for at least some use cases. The ability to perform relational queries on compound data encapsulated in ADTs is cool.",
        "user": "UJN1TAYEQ",
        "ts": "1587409365.093600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1587409733.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V8o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UETFVV24Q"
                            },
                            {
                                "type": "text",
                                "text": " I don't agree with the Tarpit paper that "
                            },
                            {
                                "type": "text",
                                "text": "all",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " program data should be stored as relational tables. For my domain (computer graphics), you need multi-dimensional arrays and linear algebra. Storing a 4x4 transformation matrix as 16 individual cells in a relational database seems crazy. ADTs are heavily overused in OOP programming, and I'm not a fan of the style, but I still think we need abstract data types for at least some use cases. The ability to perform relational queries on compound data encapsulated in ADTs is cool."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7"
    },
    {
        "client_msg_id": "76e98b35-56a3-459f-9c3a-68fcb5376e84",
        "type": "message",
        "text": "<@UJN1TAYEQ> Something I\u2019m optimistic about (and I have a baby side project in this area) is that a compiler could code-generate a fast path that doesn\u2019t run full database queries at runtime. The programmer would need to declare all data access patterns upfront, and maybe give some implementation hints too. Then the compiler converts those access patterns into efficient in-memory operations and data structures. So the final program ends up doing the same stuff",
        "user": "UETFVV24Q",
        "ts": "1587411151.093900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DyGa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " Something I\u2019m optimistic about (and I have a baby side project in this area) is that a compiler could code-generate a fast path that doesn\u2019t run full database queries at runtime. The programmer would need to declare all data access patterns upfront, and maybe give some implementation hints too. Then the compiler converts those access patterns into efficient in-memory operations and data structures. So the final program ends up doing the same stuff"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD6EXQVM0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "859a8345-a986-412e-8a9c-37f3366e8898",
        "type": "message",
        "text": "If a <https://github.com/samsquire/ideas3#17-query-database|database stores queries themselves>, it can make data layout and storage decisions that are fast",
        "user": "U0119RRB1MK",
        "ts": "1587411920.094100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "samsquire/ideas3",
                "text": "An Extra 100 Ideas For Computing",
                "title": "samsquire/ideas3",
                "footer": "<https://github.com/samsquire/ideas3|samsquire/ideas3>",
                "id": 1,
                "footer_icon": "https://github.githubassets.com/favicon.ico",
                "ts": 1583199166,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Stars",
                        "value": "21",
                        "short": true
                    },
                    {
                        "title": "Last updated",
                        "value": "2 days ago",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https://github.com/samsquire/ideas3#17-query-database",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "36h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If a "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/samsquire/ideas3#17-query-database",
                                "text": "database stores queries themselves"
                            },
                            {
                                "type": "text",
                                "text": ", it can make data layout and storage decisions that are fast"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7"
    }
]