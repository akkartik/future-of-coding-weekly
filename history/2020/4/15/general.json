[
    {
        "client_msg_id": "0563568F-2948-47DC-AA10-3AA627BE633E",
        "type": "message",
        "text": "I came across a PICO-8 tutorial today. While I was aware of the platform, I didn\u2019t know much about it. What I found most interesting is that the limitations, in particular the restriction to 8192 \u201ctokens\u201d that your Lua source code can maximally have, made the person conducting the tutorial optimize the code several times to reduce the number of tokens used. He achieved that mostly through basic refactoring, often using the DRY principle, but also sometimes making the code a little more concise/clever/obscure.\n\nThis (artificial) limitation adds a dynamic to development for PICO-8 that I find fascinating. It adds a forcing function for \u201ckeeping code lean\u201d which I haven\u2019t seen like this anywhere else. The only other similar thing I can think of is the 140/280 character limit on Twitter. Or maybe demoscene contest categories that limit the code and/or binary sizes to a certain amount of bytes.\n\nDo you know of any other programming environments or IDEs that use soft metrics or hard limits or any other tricks to introduce an awareness for wastefulness to programming?\nAnd how do you feel about that as a means to improve code quality?",
        "user": "U5STGTB3J",
        "ts": "1586906564.409300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xh8m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I came across a PICO-8 tutorial today. While I was aware of the platform, I didn\u2019t know much about it. What I found most interesting is that the limitations, in particular the restriction to 8192 \u201ctokens\u201d that your Lua source code can maximally have, made the person conducting the tutorial optimize the code several times to reduce the number of tokens used. He achieved that mostly through basic refactoring, often using the DRY principle, but also sometimes making the code a little more concise/clever/obscure.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "This (artificial) limitation adds a dynamic to development for PICO-8 that I find fascinating. It adds a forcing function for \u201ckeeping code lean\u201d which I haven\u2019t seen like this anywhere else. The only other similar thing I can think of is the 140/280 character limit on Twitter. Or maybe demoscene contest categories that limit the code and/or binary sizes to a certain amount of bytes.\n"
                            },
                            {
                                "type": "text",
                                "text": "\nDo you know of any other programming environments or IDEs that use soft metrics or hard limits or any other tricks to introduce an awareness for wastefulness to programming?\n"
                            },
                            {
                                "type": "text",
                                "text": "And how do you feel about that as a means to improve code quality?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586906564.409300",
        "reply_count": 17,
        "reply_users_count": 7,
        "latest_reply": "1587319267.080400",
        "reply_users": [
            "U5STGTB3J",
            "UCUSW7WVD",
            "UQ706GB9U",
            "UC2A2ARPT",
            "UBSMEUXAA",
            "UEQ6M68H0",
            "UJN1TAYEQ"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "UEQ7QL15F"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "98568D38-26DE-4B78-86BE-C36AF757CFE5",
        "type": "message",
        "text": "About PICO-8: <https://www.lexaloffle.com/pico-8.php|https://www.lexaloffle.com/pico-8.php>",
        "user": "U5STGTB3J",
        "ts": "1586906631.409800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "PICO-8 Fantasy Console",
                "title_link": "https://www.lexaloffle.com/pico-8.php",
                "text": "PICO-8 is a fantasy console for making, sharing and playing tiny games and other computer programs. New carts available every day!",
                "fallback": "PICO-8 Fantasy Console",
                "from_url": "https://www.lexaloffle.com/pico-8.php",
                "service_icon": "https://www.lexaloffle.com/favicon.ico",
                "service_name": "lexaloffle.com",
                "id": 1,
                "original_url": "https://www.lexaloffle.com/pico-8.php"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KRm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "About PICO-8: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.lexaloffle.com/pico-8.php",
                                "text": "https://www.lexaloffle.com/pico-8.php"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586906564.409300",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "d50992d9-0056-4861-b4e3-29e9dcaa3bdd",
        "type": "message",
        "text": "Minor counterpoint story: My Mu project leans heavily on projects like the bootstrappable compiler (<https://github.com/certik/bcompiler>) and StoneKnifeForth (<https://github.com/kragen/stoneknifeforth>) which impose draconian limits on lengths of various names.\n\nIn Mu I went the route of having no such limit, and having long names like <https://github.com/akkartik/mu/blob/0671315c1af4707fcab30b11967c88fbaa386bf3/085next-word-or-string.subx#L353> made a huge difference in making the setup feel more ergonomic, so that I wasn't immediately hankering for something better the moment I got it working.\n\nThe net effect: someone coming to my project only has to learn 2 notations, unlike in other bootstrapping projects where they have to learn 4 or 5, because the bottom two were built so parsimoniously that they're no fun to program in at all.",
        "user": "UCUSW7WVD",
        "ts": "1586907328.410100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nf01H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Minor counterpoint story: My Mu project leans heavily on projects like the bootstrappable compiler ("
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/certik/bcompiler"
                            },
                            {
                                "type": "text",
                                "text": ") and StoneKnifeForth ("
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/kragen/stoneknifeforth"
                            },
                            {
                                "type": "text",
                                "text": ") which impose draconian limits on lengths of various names.\n\nIn Mu I went the route of having no such limit, and having long names like "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/akkartik/mu/blob/0671315c1af4707fcab30b11967c88fbaa386bf3/085next-word-or-string.subx#L353"
                            },
                            {
                                "type": "text",
                                "text": " made a huge difference in making the setup feel more ergonomic, so that I wasn't immediately hankering for something better the moment I got it working.\n\nThe net effect: someone coming to my project only has to learn 2 notations, unlike in other bootstrapping projects where they have to learn 4 or 5, because the bottom two were built so parsimoniously that they're no fun to program in at all."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586906564.409300",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "bf5c1d1e-6c8a-4a16-88d2-6e8ba32724cf",
        "type": "message",
        "text": "Constraints can be very useful. But the devil is in the details of which constraints you choose and how they interact in the big picture.",
        "user": "UCUSW7WVD",
        "ts": "1586907360.410300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iBOvz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Constraints can be very useful. But the devil is in the details of which constraints you choose and how they interact in the big picture."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586906564.409300",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "26d91aef-662f-4ab7-891e-efc425a14f0f",
        "type": "message",
        "text": "Android\u2019s VM has a 64K method limit that results in tech to remove unused bits of code. <https://developer.android.com/studio/build/shrink-code.html#shrink-code>",
        "user": "UQ706GB9U",
        "ts": "1586907543.410500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Android Developers",
                "title": "Shrink, obfuscate, and optimize your app \u00a0|\u00a0 Android Developers",
                "title_link": "https://developer.android.com/studio/build/shrink-code.html#shrink-code",
                "text": "Learn how to shrink code in your release build to remove unused code and resources.",
                "fallback": "Android Developers: Shrink, obfuscate, and optimize your app \u00a0|\u00a0 Android Developers",
                "image_url": "https://developer.android.com/images/android-developers.png",
                "image_width": 444,
                "image_height": 250,
                "from_url": "https://developer.android.com/studio/build/shrink-code.html#shrink-code",
                "image_bytes": 19992,
                "service_icon": "https://www.gstatic.com/devrel-devsite/prod/vafbb0b5d787a2bc7a3bcbfb9dfdb3baefdd01831979d5302dd65271466576cda/android/images/touchicon-180.png",
                "id": 1,
                "original_url": "https://developer.android.com/studio/build/shrink-code.html#shrink-code"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RKo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Android\u2019s VM has a 64K method limit that results in tech to remove unused bits of code. "
                            },
                            {
                                "type": "link",
                                "url": "https://developer.android.com/studio/build/shrink-code.html#shrink-code"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586906564.409300",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "C9CF3F43-A129-432B-B560-618850043948",
        "type": "message",
        "text": "One of the things discussed on the last episode of the podcast is Devine's interest in keeping the core of Orca small (around 600 LoC in the original JS, if memory serves) to make it easier to port to other languages. And the things you make in it are severely limited by the amount of screen real estate.",
        "user": "UC2A2ARPT",
        "ts": "1586908248.421500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1586916073.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0rOJU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One of the things discussed on the last episode of the podcast is Devine's interest in keeping the core of Orca small (around 600 LoC in the original JS, if memory serves) to make it easier to port to other languages. And the things you make in it are severely limited by the amount of screen real estate."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586906564.409300",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "8D0A0A96-83C2-47FE-8B1D-941A47602123",
        "type": "message",
        "text": "<@UCUSW7WVD> Thanks for the detailed reply! That helps me understand your perspective. If you happen to think of changes down the line or would like to contribute a post on the site, feel free to react out. :slightly_smiling_face: \n\nIt might be interesting for someone (other than me) to write an \u201canti-post\u201d on the blog synthesising all the ways it will \u201cdefinitely never\u201d work... :thinking_face: It would be good to have another voice in the spectrum of perspectives represented. I think such a post would just inspire me further to prove it can be done. :sweat_smile:",
        "user": "UML4ZEKDK",
        "ts": "1586908435.424000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nDQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for the detailed reply! That helps me understand your perspective. If you happen to think of changes down the line or would like to contribute a post on the site, feel free to react out. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " \n\nIt might be interesting for someone (other than me) to write an \u201canti-post\u201d on the blog synthesising all the ways it will \u201cdefinitely never\u201d work... "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face"
                            },
                            {
                                "type": "text",
                                "text": " It would be good to have another voice in the spectrum of perspectives represented. I think such a post would just inspire me further to prove it can be done. "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586818028.382000",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "feef89a4-863e-442f-a05b-f6ffcdf20706",
        "type": "message",
        "text": "If anyone hasn't seen Joseph White's practice talk explaining the Pico8 design philosophy definitely check it out",
        "user": "UBSMEUXAA",
        "ts": "1586915223.424200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w8w6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If anyone hasn't seen Joseph White's practice talk explaining the Pico8 design philosophy definitely check it out"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586906564.409300",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "02563469-222f-41a0-b174-3b110d9eb32e",
        "type": "message",
        "text": "<https://youtu.be/87jfTIWosBw|https://youtu.be/87jfTIWosBw>",
        "user": "UBSMEUXAA",
        "ts": "1586915225.424400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "PRACTICE 2018: Joseph White",
                "title_link": "https://youtu.be/87jfTIWosBw",
                "author_name": "NYU Game Center",
                "author_link": "https://www.youtube.com/user/NYUGameCenter",
                "thumb_url": "https://i.ytimg.com/vi/87jfTIWosBw/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: PRACTICE 2018: Joseph White",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/87jfTIWosBw?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/87jfTIWosBw",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/87jfTIWosBw"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jk1dd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://youtu.be/87jfTIWosBw",
                                "text": "https://youtu.be/87jfTIWosBw"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586906564.409300",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5STGTB3J",
                    "UEQ7QL15F"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "866da904-c424-43bc-8799-b01e05681603",
        "type": "message",
        "text": "I feel like I've linked it here before, but it's worth bringing up again in any Pico8 design discussion",
        "user": "UBSMEUXAA",
        "ts": "1586915264.424700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gkh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I feel like I've linked it here before, but it's worth bringing up again in any Pico8 design discussion"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586906564.409300",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "87d1a40c-5853-43df-8c23-6af2374bd48d",
        "type": "message",
        "text": "Or fantasy console discussion",
        "user": "UBSMEUXAA",
        "ts": "1586915278.424900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ecgz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Or fantasy console discussion"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586906564.409300",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "6b581359-533b-4d43-a0ea-6afa6942dff4",
        "type": "message",
        "text": "I really loved the Orca podcast, I think that idea of keeping software small is really powerful for longetivity",
        "user": "UBSMEUXAA",
        "ts": "1586915459.425100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VO43O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really loved the Orca podcast, I think that idea of keeping software small is really powerful for longetivity"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586906564.409300",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "2d0e2dfd-536e-4d61-9d52-242d74f52cfc",
        "type": "message",
        "text": "Software tends to rot without maintenance, open source is one way to encourage continual maintenance, but another way is to make a system where the core is understandable enough that it's non-trivial to completely reimplement it if you've used it",
        "user": "UBSMEUXAA",
        "ts": "1586915870.425300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zD/f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Software tends to rot without maintenance, open source is one way to encourage continual maintenance, but another way is to make a system where the core is understandable enough that it's non-trivial to completely reimplement it if you've used it"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586906564.409300",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "e1273767-e910-4c03-ae11-b5e41d76bc28",
        "type": "message",
        "text": "(reminds me that it'd be a fun excersize to reimplement orca based on docs)",
        "user": "UBSMEUXAA",
        "ts": "1586915911.425500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KiV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(reminds me that it'd be a fun excersize to reimplement orca based on docs)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586906564.409300",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "bb16d857-fb30-41cc-88f6-df30e0e57a12",
        "type": "message",
        "text": "This is a great article that touches on psychology, languages, and language\n<https://medium.com/@old_sound/programming-languages-are-not-languages-c6f161a78c44>\nP.s. those references are :heart_eyes:",
        "user": "UJRDRMWQN",
        "ts": "1586922294.436000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Medium",
                "title": "Programming Languages are not Languages",
                "title_link": "https://medium.com/@old_sound/programming-languages-are-not-languages-c6f161a78c44",
                "text": "In my previous article I talked about how the metaphors used to present a problem, set the stage for how we are going to talk about the\u2026",
                "fallback": "Medium: Programming Languages are not Languages",
                "image_url": "https://miro.medium.com/max/1200/1*8x1xzfTcE-2WfgL3iEs7bA.png",
                "fields": [
                    {
                        "title": "Reading time",
                        "value": "7 min read",
                        "short": true
                    }
                ],
                "ts": 1535908358,
                "from_url": "https://medium.com/@old_sound/programming-languages-are-not-languages-c6f161a78c44",
                "image_width": 405,
                "image_height": 250,
                "image_bytes": 1018768,
                "service_icon": "https://cdn-images-1.medium.com/fit/c/152/152/1*8I-HPL0bfoIzGied-dzOvA.png",
                "id": 1,
                "original_url": "https://medium.com/@old_sound/programming-languages-are-not-languages-c6f161a78c44"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qsQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is a great article that touches on psychology, languages, and language\n"
                            },
                            {
                                "type": "link",
                                "url": "https://medium.com/@old_sound/programming-languages-are-not-languages-c6f161a78c44"
                            },
                            {
                                "type": "text",
                                "text": "\nP.s. those references are "
                            },
                            {
                                "type": "emoji",
                                "name": "heart_eyes"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586922294.436000",
        "reply_count": 10,
        "reply_users_count": 4,
        "latest_reply": "1587660709.149700",
        "reply_users": [
            "UEQ6M68H0",
            "UCUSW7WVD",
            "UJ6LDMMN0",
            "UJN1TAYEQ"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UCUSW7WVD"
                ],
                "count": 2
            },
            {
                "name": "point_up",
                "users": [
                    "U8A5MS6R1",
                    "UBSMEUXAA",
                    "UFQQ3P867"
                ],
                "count": 3
            },
            {
                "name": "+1",
                "users": [
                    "UMYKGHYBA",
                    "U011X0NJF9S"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "f4de45c0-1e41-40e7-9472-352791cd48dd",
        "type": "message",
        "text": "The German philosopher Heidegger believed thinking is speaking to yourself, and that there is no consciousness without language.  Computer languages are languages, just ones with very few nouns. If you carefully examine the task of learning a new language, you have a few dozen numeric primitives, perhaps 500 total verbs, of which you only use about 50 regularly. But then you hit the nouns, and there a million of those. Human languages have a name for all sorts of parts of things. A computer is such a simple universe there aren't even 50 nouns. So they seem very different, but really it is just the giant pile of nouns that makes human languages seem so complex. But the complexity level of grammar of computer languages is pretty comparable.\n\nHis point that various build and make tools often require a different tool or language is not always true. It just happens that language designers are sometimes shortsighted, and also because of OS idiosyncrasies which require customization for packaging. I find some of the build tools to be so hard to use that i don't even bother learning the language.",
        "user": "UEQ6M68H0",
        "ts": "1586930655.436500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b/u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The German philosopher Heidegger believed thinking is speaking to yourself, and that there is no consciousness without language.  Computer languages are languages, just ones with very few nouns. If you carefully examine the task of learning a new language, you have a few dozen numeric primitives, perhaps 500 total verbs, of which you only use about 50 regularly. But then you hit the nouns, and there a million of those. Human languages have a name for all sorts of parts of things. A computer is such a simple universe there aren't even 50 nouns. So they seem very different, but really it is just the giant pile of nouns that makes human languages seem so complex. But the complexity level of grammar of computer languages is pretty comparable.\n\nHis point that various build and make tools often require a different tool or language is not always true. It just happens that language designers are sometimes shortsighted, and also because of OS idiosyncrasies which require customization for packaging. I find some of the build tools to be so hard to use that i don't even bother learning the language."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586922294.436000",
        "parent_user_id": "UJRDRMWQN",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UJRDRMWQN"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "ba670ffc-b15a-41c8-bf1b-5c311fa08b65",
        "type": "message",
        "text": "There is an irreducible limit to the size of any given program. Part of it is due to Ashby's law of requisite variety (see Stafford Beer, Platform for Change), but a lot has to do with the compactness of the notation, and the ease with which redundancy is squeezed out. It is a very interesting exercise to study simple projects and boil them down to near the irreducible minimum. In fact, this is how i designed my Beads language; by starting with projects and then designing a notation that would allow for minimal number of words to express that action. The beauty of less code is there is less chance for error, provided you haven't over minimized and obscured logic by blindly pursuing word count as the goal. One must always balance readability with compactness. This was the original mistake of Iverson, which took him a long time to realize, that APL's invented alphabet was obscuring the power of his language (hence his use of ASCII in the J language sequel to APL).",
        "user": "UEQ6M68H0",
        "ts": "1586931019.436700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1586977078.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "28ZW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There is an irreducible limit to the size of any given program. Part of it is due to Ashby's law of requisite variety (see Stafford Beer, Platform for Change), but a lot has to do with the compactness of the notation, and the ease with which redundancy is squeezed out. It is a very interesting exercise to study simple projects and boil them down to near the irreducible minimum. In fact, this is how i designed my Beads language; by starting with projects and then designing a notation that would allow for minimal number of words to express that action. The beauty of less code is there is less chance for error, provided you haven't over minimized and obscured logic by blindly pursuing word count as the goal. One must always balance readability with compactness. This was the original mistake of Iverson, which took him a long time to realize, that APL's invented alphabet was obscuring the power of his language (hence his use of ASCII in the J language sequel to APL)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586906564.409300",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "fd01889d-3860-472b-b8f8-4dd71a6a5e22",
        "type": "message",
        "text": "I don't feel that it will definitely never work. I think it _has to_ work, because the alternatives all suck. What I share in common with your hypothetical interlocutors is the unspoken question, \"how could this _possibly_ be made to work?\"\n\nIn <https://futureofcoding.slack.com/archives/C5T9GPWFL/p1586869277389100?thread_ts=1584718837.435500&amp;cid=C5T9GPWFL> you suggested that you're trying to separate goals from solutions and focus on the former. That's reasonable as a goal for this particular page. (It's also why I find this page unsatisfying.) But it also seems reasonable for it to trigger conversations about the how. That doesn't feel like \"missing the point\". Isn't that sort of conversation what this page is designed to engender?\n\nPerhaps it will help to triangulate by bringing up my mission: <http://akkartik.name/about>. Not to brag, but we're attacking highly overlapping if not isomorphic problems. By definition I should have addressed any shortcomings I bring up here. It stays high-level, focuses on goals, but also indicates the sorts of trade-offs I'm willing to make. I'd love to receive similar criticism from you about what it's lacking. I should probably update it after my recent efforts writing my paper :sweat_smile: It's quite possible there's a cultural chasm here from me spending too much time on HN. I'd love to understand it better.\n\nPerhaps it would help to drill down into which comments you consider to be missing the point. It might require a private conversation, but it might help make this conversation more concrete. Here, I'll start by summarizing how I view the top-level comments:\n\n<https://news.ycombinator.com/item?id=22858254>: neutral sentiment, acknowledges you're stating an unpopular opinion, responds with another. Seems useful for generating ideas, and -- reading between the lines -- sympathetic.\n\n<https://news.ycombinator.com/item?id=22859409>: negative sentiment. I would steelman it (\"what could this be true of?\") as asking a) do you propose limits to extensibility, and b) how do you imagine the system as a whole self-regulating in response to bad changes? That seems useful, even if it's not phrased constructively.\n\n<https://news.ycombinator.com/item?id=22862292>: not useful, as <@UDQBTJ211> already pointed out.\n\n<https://news.ycombinator.com/item?id=22859613>: positive sentiment. Points out the future is already here, maybe just not evenly distributed.\n\n<https://news.ycombinator.com/item?id=22874983>: negative sentiment, but suggests that your problem statement needs focus. Seems like useful feedback.\n\n<https://news.ycombinator.com/item?id=22858315>: neutral sentiment, draws a connection with another story on the frontpage to highlight a trade-off. Super useful, to my mind. Engendered a response (<https://news.ycombinator.com/item?id=22858888>) from someone seemingly ripe to join the movement.\n\n<https://news.ycombinator.com/item?id=22858897>: neutral sentiment, brings up Plan 9 as prior art. My favorite sub-thread, if my actions are any guide. (Plan 9 isn't a major obsession of mine.)\n\n<https://news.ycombinator.com/item?id=22864602>: negative sentiment, airs a conservation of complexity argument that might be worth addressing head-on. Maybe you need a FAQ?\n\nOther people making positive noises in startlingly diverse choices of words:\n* <https://news.ycombinator.com/item?id=22862660>\n* <https://news.ycombinator.com/item?id=22859957>\n* <https://news.ycombinator.com/item?id=22862143>\n* <https://news.ycombinator.com/item?id=22872606> (supporting the right to make a mess)\n\n<https://news.ycombinator.com/item?id=22859278>: Someone being politely skeptical _by using Rails as an example_. So they're missing the point a bit, thinking about how opinionated you should be _after you have achieved malleability_. Still kinda interesting to me.\n\nThis is just the top-level comments, but at a glance the responses in the major sub-trees seem to mostly be ping-pong rebuttals. So to first approximation half the comments are supportive of the endeavor!\n\nOverall, there's a refreshing lack of \"startup mindset\" in this thread, particularly if -- like me -- you go in expecting 90% of everything to be crap. Nobody's asking you how you make money, or to to define a market, or to tweak the website. Great example of my thesis that HN is really 2 or 3 mostly-decoupled communities.",
        "user": "UCUSW7WVD",
        "ts": "1586936524.437200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eWk0S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't feel that it will definitely never work. I think it "
                            },
                            {
                                "type": "text",
                                "text": "has to",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " work, because the alternatives all suck. What I share in common with your hypothetical interlocutors is the unspoken question, \"how could this "
                            },
                            {
                                "type": "text",
                                "text": "possibly",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " be made to work?\"\n\nIn "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1586869277389100?thread_ts=1584718837.435500&cid=C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": " you suggested that you're trying to separate goals from solutions and focus on the former. That's reasonable as a goal for this particular page. (It's also why I find this page unsatisfying.) But it also seems reasonable for it to trigger conversations about the how. That doesn't feel like \"missing the point\". Isn't that sort of conversation what this page is designed to engender?\n\nPerhaps it will help to triangulate by bringing up my mission: "
                            },
                            {
                                "type": "link",
                                "url": "http://akkartik.name/about"
                            },
                            {
                                "type": "text",
                                "text": ". Not to brag, but we're attacking highly overlapping if not isomorphic problems. By definition I should have addressed any shortcomings I bring up here. It stays high-level, focuses on goals, but also indicates the sorts of trade-offs I'm willing to make. I'd love to receive similar criticism from you about what it's lacking. I should probably update it after my recent efforts writing my paper "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile"
                            },
                            {
                                "type": "text",
                                "text": " It's quite possible there's a cultural chasm here from me spending too much time on HN. I'd love to understand it better.\n\nPerhaps it would help to drill down into which comments you consider to be missing the point. It might require a private conversation, but it might help make this conversation more concrete. Here, I'll start by summarizing how I view the top-level comments:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=22858254"
                            },
                            {
                                "type": "text",
                                "text": ": neutral sentiment, acknowledges you're stating an unpopular opinion, responds with another. Seems useful for generating ideas, and -- reading between the lines -- sympathetic.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=22859409"
                            },
                            {
                                "type": "text",
                                "text": ": negative sentiment. I would steelman it (\"what could this be true of?\") as asking a) do you propose limits to extensibility, and b) how do you imagine the system as a whole self-regulating in response to bad changes? That seems useful, even if it's not phrased constructively.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=22862292"
                            },
                            {
                                "type": "text",
                                "text": ": not useful, as "
                            },
                            {
                                "type": "user",
                                "user_id": "UDQBTJ211"
                            },
                            {
                                "type": "text",
                                "text": " already pointed out.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=22859613"
                            },
                            {
                                "type": "text",
                                "text": ": positive sentiment. Points out the future is already here, maybe just not evenly distributed.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=22874983"
                            },
                            {
                                "type": "text",
                                "text": ": negative sentiment, but suggests that your problem statement needs focus. Seems like useful feedback.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=22858315"
                            },
                            {
                                "type": "text",
                                "text": ": neutral sentiment, draws a connection with another story on the frontpage to highlight a trade-off. Super useful, to my mind. Engendered a response ("
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=22858888"
                            },
                            {
                                "type": "text",
                                "text": ") from someone seemingly ripe to join the movement.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=22858897"
                            },
                            {
                                "type": "text",
                                "text": ": neutral sentiment, brings up Plan 9 as prior art. My favorite sub-thread, if my actions are any guide. (Plan 9 isn't a major obsession of mine.)\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=22864602"
                            },
                            {
                                "type": "text",
                                "text": ": negative sentiment, airs a conservation of complexity argument that might be worth addressing head-on. Maybe you need a FAQ?\n\nOther people making positive noises in startlingly diverse choices of words:\n* "
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=22862660"
                            },
                            {
                                "type": "text",
                                "text": "\n* "
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=22859957"
                            },
                            {
                                "type": "text",
                                "text": "\n* "
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=22862143"
                            },
                            {
                                "type": "text",
                                "text": "\n* "
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=22872606"
                            },
                            {
                                "type": "text",
                                "text": " (supporting the right to make a mess)\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=22859278"
                            },
                            {
                                "type": "text",
                                "text": ": Someone being politely skeptical "
                            },
                            {
                                "type": "text",
                                "text": "by using Rails as an example",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". So they're missing the point a bit, thinking about how opinionated you should be "
                            },
                            {
                                "type": "text",
                                "text": "after you have achieved malleability",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Still kinda interesting to me.\n\nThis is just the top-level comments, but at a glance the responses in the major sub-trees seem to mostly be ping-pong rebuttals. So to first approximation half the comments are supportive of the endeavor!\n\nOverall, there's a refreshing lack of \"startup mindset\" in this thread, particularly if -- like me -- you go in expecting 90% of everything to be crap. Nobody's asking you how you make money, or to to define a market, or to tweak the website. Great example of my thesis that HN is really 2 or 3 mostly-decoupled communities."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586818028.382000",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "5ac0ea77-668c-4493-a184-d49caa3ff253",
        "type": "message",
        "text": "I spent all day thinking about this, and finally found words to articulate hopefully half of what I intend to convey: <https://github.com/malleable-systems/malleable.systems/issues/13#issuecomment-613900649>. Hopefully I managed to walk the tightrope between showing vehemence and just being harsh.",
        "user": "UCUSW7WVD",
        "ts": "1586940009.437400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "author_name": "akkartik",
                "fallback": "[malleable-systems/malleable.systems] Comment on #13",
                "text": "Here's <https://www.ribbonfarm.com/2009/09/17/your-evil-twins-and-how-to-find-them|an evil twin's take> on the Malleable Systems principles.\n\n&gt; 1. Software must be as easy to change as it is to use it.\n\nI support making software harder to use if it will get us to this goal faster. Everybody eat your vegetables.\n\n&gt; 2. All layers, from the user interface through functionality to the data within, must support arbitrary recombination and reuse in new environments.\n\nThe easiest way to support this is by letting users edit source code. Recombination and reuse don't have to happen from behind some pane of glass. <http://www.bldgblog.com/2010/01/nakatomi-space|Allow your users to be like John McClane from the \"Die Hard\" movies, punching through walls and jumping through elevator shafts.> Focus on giving them maps and safety nets.\n\n&gt; 3. Tools should strive to be easy to begin working with but still have lots of open-ended potential.\n\nThe most natural place to begin working with a tool is using it. Treat your existing users as potential hackers at the start of a funnel with a steep drop-off. Some of them will recombine what you give them, but you don't know who. How do _you_ maintain motivation to continue supporting them under these conditions?\n\n&gt; 4. Retain ownership and control.\n\nExisting extension systems like browsers and Emacs already do this? By the time somebody is extending your system they tend to know enough to exercise ownership. Maybe we just need to grow this set of people?\n\n&gt; 5. Freely shareable.\n\nAgain, it's unclear what systems are in the author's mind that are extensible but not shareable.\n\n&gt; 6. Modifying in the context of use.\n\nThis seems really hard. Should it be a high priority? I recommend going from `(disempowered, beautiful)` to `(empowered, ugly)` first, trading off one attribute (candy) for another (eat your vegetables) to strengthen fundamentals. Once you lay the ground work, then you can try to perform the energetic heavy lift to `(empowered, beautiful)`.\n\n&gt; 7. Thoughtfully crafted.\n\nThis. This is the meat. Everything else feels like fluff, either really obvious or pie-in-the-sky hard. Don't make me wade through it to get here. That'll also give you more space to elaborate. How do we 'refine' our tools? Is this a matter of UX? Superficial reworking? Deeper surgery? Throwing everything out and starting over? A new methodology? A new social structure?\n\nOverall, I think my disagreements mostly stem from an overwhelming sense of urgency. You're over-constraining your solution space by shooting simultaneously for useful social properties (empowerment) and useful individual aesthetic properties (Bret Victor-esque WYSIWYG context of use). We're far enough behind here that maybe we should aim lower. It doesn't convey the appropriate urgency to say that \"software is trapped in silos\". No, the problem is that we find ourselves in a world where everybody uses software, and software can do anything, and nobody knows what their software is doing. Instructions from too many masters are fractally intertwined. This can't end well. We need to get off this train as quickly as possible.\n\nSigned,  \n<http://akkartik.name/about|Kartik Agaram>",
                "title": "Comment on #13 Add post about common trade-offs",
                "footer": "<https://github.com/malleable-systems/malleable.systems|malleable-systems/malleable.systems>",
                "id": 1,
                "title_link": "https://github.com/malleable-systems/malleable.systems/issues/13#issuecomment-613900649",
                "author_link": "https://github.com/akkartik",
                "author_icon": "https://avatars0.githubusercontent.com/u/3161?u=e25daa1ed1f05cecc22431d9e4071d9da89ccfbd&v=4",
                "footer_icon": "https://github.githubassets.com/favicon.ico",
                "ts": 1586939763,
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https://github.com/malleable-systems/malleable.systems/issues/13#issuecomment-613900649",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TMBD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I spent all day thinking about this, and finally found words to articulate hopefully half of what I intend to convey: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/malleable-systems/malleable.systems/issues/13#issuecomment-613900649"
                            },
                            {
                                "type": "text",
                                "text": ". Hopefully I managed to walk the tightrope between showing vehemence and just being harsh."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584718837.435500",
        "parent_user_id": "UF1ATC4RF"
    },
    {
        "client_msg_id": "400b5c3b-88d7-4434-beb8-c5b039dfac2c",
        "type": "message",
        "text": "Probably people would like to react to these two-minute-week videos. Should we post link to a Slack thread with the video right into newsletter?",
        "user": "UCKRZS3DZ",
        "ts": "1586940698.437700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J3x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Probably people would like to react to these two-minute-week videos. Should we post link to a Slack thread with the video right into newsletter?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586714499.350400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "156a92f9-71f6-40a1-83b1-c6cd779c0ca7",
        "type": "message",
        "text": "yes, I will post a link to the video with a title/summary and a link to the thread (it would help if the author provides the title/summary :slightly_smiling_face:)",
        "user": "UBN9AFS0N",
        "ts": "1586942259.437900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pSuYY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yes, I will post a link to the video with a title/summary and a link to the thread (it would help if the author provides the title/summary "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586714499.350400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "e99ceae1-fc90-4427-8840-4e6627278eb4",
        "type": "message",
        "text": "Are there any languages with explicit focus (and philosophy) around intermediary steps between ideas and working code? Modern programming languages feel like I must, in part, produce completed structures of code, rather than brainstorming and exploring. Programming inevitably alternates the code from working to not working to working to not working, etc, and we would benefit from languages that were more explicit about facilitating the \u2018not working\u2019 states. From my rough intuition, the \u2018not working\u2019 states of code outweigh \u2018working\u2019 state in terms of time and importance (e.g. compiler for code that is exploratory but does not work).\n\nREPL, for a very simple idea, is praised so much (and so widely used) perhaps for this reason \u2014 it facilitates intermediate steps. This would be a rough parallel to how Bret Victor mentions that \u201cideas are important\u201d to him. I looked at <https://medium.com/bits-and-behavior/four-years-of-studying-exploratory-programming-4656586b1d3b|Exploratory Programming>, but it doesn\u2019t seem to capture exactly what I want (i.e. goes a bit too shallow).\n\nEDIT: Also relevant, <http://tomasp.net/histogram/|Histogram> and <https://youtu.be/X36ye-1x_HQ?t=1273|Type-driven Development>",
        "user": "USUMN6XLH",
        "ts": "1586957244.445200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "USUMN6XLH",
            "ts": "1586959874.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p=t0v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are there any languages with explicit focus (and philosophy) around intermediary steps between ideas and working code? Modern programming languages feel like I must, in part, produce completed structures of code, rather than brainstorming and exploring. Programming inevitably alternates the code from working to not working to working to not working, etc, and we would benefit from languages that were more explicit about facilitating the \u2018not working\u2019 states. From my rough intuition, the \u2018not working\u2019 states of code outweigh \u2018working\u2019 state in terms of time and importance (e.g. compiler for code that is exploratory but does not work).\n\nREPL, for a very simple idea, is praised so much (and so widely used) perhaps for this reason \u2014 it facilitates intermediate steps. This would be a rough parallel to how Bret Victor mentions that \u201cideas are important\u201d to him. I looked at "
                            },
                            {
                                "type": "link",
                                "url": "https://medium.com/bits-and-behavior/four-years-of-studying-exploratory-programming-4656586b1d3b",
                                "text": "Exploratory Programming"
                            },
                            {
                                "type": "text",
                                "text": ", but it doesn\u2019t seem to capture exactly what I want (i.e. goes a bit too shallow).\n\nEDIT: Also relevant, "
                            },
                            {
                                "type": "link",
                                "url": "http://tomasp.net/histogram/",
                                "text": "Histogram"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/X36ye-1x_HQ?t=1273",
                                "text": "Type-driven Development"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586957244.445200",
        "reply_count": 19,
        "reply_users_count": 9,
        "latest_reply": "1587152134.027400",
        "reply_users": [
            "UBN9AFS0N",
            "UCKRZS3DZ",
            "USUMN6XLH",
            "UNGNT3BKR",
            "UFB8STN7K",
            "UC2A2ARPT",
            "UG0EL18H3",
            "UN57U8V53",
            "UNCP67JSK"
        ],
        "subscribed": true,
        "last_read": "1587152134.027400"
    },
    {
        "client_msg_id": "09285aa5-82d3-474a-b26b-6a16193e38db",
        "type": "message",
        "text": "<https://hazel.org/> has first class concepts of errors (missing code, binding errors, conflicts, type errors)",
        "user": "UBN9AFS0N",
        "ts": "1586957669.445600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Hazel, a live functional programming environment featuring typed holes.",
                "title_link": "https://hazel.org/",
                "text": "Hazel is a live functional programming environment featuring typed holes.",
                "fallback": "Hazel, a live functional programming environment featuring typed holes.",
                "from_url": "https://hazel.org/",
                "service_name": "hazel.org",
                "id": 1,
                "original_url": "https://hazel.org/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ODwRk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://hazel.org/"
                            },
                            {
                                "type": "text",
                                "text": " has first class concepts of errors (missing code, binding errors, conflicts, type errors)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586957244.445200",
        "parent_user_id": "USUMN6XLH",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0118UBB41G"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c7f2909c-5bf1-472a-9a4c-1e6427d7d350",
        "type": "message",
        "text": "unison promises that your code is always in a valid state: <https://www.unisonweb.org/docs/tour/>",
        "user": "UBN9AFS0N",
        "ts": "1586957726.445900",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "A tour of Unison",
                "title_link": "https://www.unisonweb.org/docs/tour/",
                "text": "undefined",
                "fallback": "A tour of Unison",
                "from_url": "https://www.unisonweb.org/docs/tour/",
                "service_name": "unisonweb.org",
                "id": 1,
                "original_url": "https://www.unisonweb.org/docs/tour/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M4Enc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "unison promises that your code is always in a valid state: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.unisonweb.org/docs/tour/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586957244.445200",
        "parent_user_id": "USUMN6XLH",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "USUMN6XLH",
                    "UPD5QQW81",
                    "U0118UBB41G"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "80eb3779-891e-4017-b1a6-abcb7b2673b6",
        "type": "message",
        "text": "dynamically typed languages support incomplete programs as long as you don't step into the incomplete code :slightly_smiling_face:",
        "user": "UBN9AFS0N",
        "ts": "1586957760.446200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x4r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "dynamically typed languages support incomplete programs as long as you don't step into the incomplete code "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586957244.445200",
        "parent_user_id": "USUMN6XLH"
    },
    {
        "client_msg_id": "eb9ecb9d-d736-471e-b9af-c193a2d82c4b",
        "type": "message",
        "text": "in smalltalk there's people that fill the code as they go in the debugger",
        "user": "UBN9AFS0N",
        "ts": "1586957785.446400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EYPd+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in smalltalk there's people that fill the code as they go in the debugger"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586957244.445200",
        "parent_user_id": "USUMN6XLH",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "5941662c-9d04-4f61-87ff-c027d27f93f9",
        "type": "message",
        "text": "I think <@USUMN6XLH> is saying that during development you try out many ideas and finally get to working code. Working code is checked in to VCS, while all these steps to this working code are lost, while they might be the most valuable to learn.\n\nAm I right?",
        "user": "UCKRZS3DZ",
        "ts": "1586958120.446700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ttV1t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think "
                            },
                            {
                                "type": "user",
                                "user_id": "USUMN6XLH"
                            },
                            {
                                "type": "text",
                                "text": " is saying that during development you try out many ideas and finally get to working code. Working code is checked in to VCS, while all these steps to this working code are lost, while they might be the most valuable to learn.\n\nAm I right?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586957244.445200",
        "parent_user_id": "USUMN6XLH",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "USUMN6XLH"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "37d9306b-8d48-46e0-aa5c-bb47ef0ad8aa",
        "type": "message",
        "text": "Yes <@UCKRZS3DZ>, not to get too philosophical, but humans always focus more on what is than what is not (i.e. yin-yang). So we are bound to focus on what works, our successes, rather than what does not work, our failures, or our intermediaries. This kind of human bias/inevitability is bound to be present in computing, which is often too fast for its own good.\n\nMaybe we can step back a little and think about the in-between\u2026? <http://tomasp.net/histogram/> is the only instance where I have seen anyone do some thinking like this to a sufficiently satisfying extent.",
        "user": "USUMN6XLH",
        "ts": "1586959050.447200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "USUMN6XLH",
            "ts": "1586959262.000000"
        },
        "attachments": [
            {
                "title": "Histogram: You have to know the past to understand the present",
                "title_link": "http://tomasp.net/histogram/",
                "text": "To invent new programming tools, we need to shift our focus from programs to programming. Programs are created through a variety of interactions, but programming research often forgets about those. In this interactive essay, we represent programs as lists of interactions and we explore the consequences of this idea in a simple programming environment for data exploration.",
                "fallback": "Histogram: You have to know the past to understand the present",
                "image_url": "http://tomasp.net/histogram/histogram.png",
                "from_url": "http://tomasp.net/histogram/",
                "image_width": 500,
                "image_height": 250,
                "image_bytes": 19836,
                "service_icon": "http://tomasp.net/favicon.ico",
                "service_name": "tomasp.net",
                "id": 1,
                "original_url": "http://tomasp.net/histogram/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gFmIR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes "
                            },
                            {
                                "type": "user",
                                "user_id": "UCKRZS3DZ"
                            },
                            {
                                "type": "text",
                                "text": ", not to get too philosophical, but humans always focus more on what is than what is not (i.e. yin-yang). So we are bound to focus on what works, our successes, rather than what does not work, our failures, or our intermediaries. This kind of human bias/inevitability is bound to be present in computing, which is often too fast for its own good.\n\nMaybe we can step back a little and think about the in-between\u2026? "
                            },
                            {
                                "type": "link",
                                "url": "http://tomasp.net/histogram/"
                            },
                            {
                                "type": "text",
                                "text": " is the only instance where I have seen anyone do some thinking like this to a sufficiently satisfying extent."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586957244.445200",
        "parent_user_id": "USUMN6XLH",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UNCP67JSK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c70ac8e6-64f6-4dc8-9d4e-8a7375c2d5c1",
        "type": "message",
        "text": "<@UBN9AFS0N> I am looking at Unison right now for the first time and it\u2019s very interesting. Scratches as an alternate to REPL might have some interesting ideas in this space.",
        "user": "USUMN6XLH",
        "ts": "1586959110.447500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fn/OI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " I am looking at Unison right now for the first time and it\u2019s very interesting. Scratches as an alternate to REPL might have some interesting ideas in this space."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586957244.445200",
        "parent_user_id": "USUMN6XLH"
    },
    {
        "type": "message",
        "text": "\"Livecoding\" is about continuously modifying the code as it runs. This doesn't necessarily improve the experience with having non-working code, but it does let you work with partially-working code and \"code as you go\". The system I am working on (<https://alive.s-ol.nu>) takes an alternate approach to the common REPL-based livecoding that supports continuously changing FRP programs at runtime.",
        "user": "UNGNT3BKR",
        "ts": "1586959317.448400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UNGNT3BKR",
            "ts": "1586959333.000000"
        },
        "thread_ts": "1586957244.445200",
        "parent_user_id": "USUMN6XLH"
    },
    {
        "client_msg_id": "e32f3c21-9f56-4e55-a6b9-dc25bf2248d1",
        "type": "message",
        "text": "The psychological equivalent would be how long it takes for our nonverbal, implicit \u2018thoughts\u2019 or qualia to become verbal, explicit &lt;thoughts&gt;. We have intuitions before explicit thoughts, and modern psychology has focused too much on what can be observed (verbal thoughts, or even worse, behavior) that it has missed out on large portion of our psyche.\n\nIntuition precedes thoughts, but we only observe thoughts because they are easy to observe.",
        "user": "USUMN6XLH",
        "ts": "1586959389.448700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "USUMN6XLH",
            "ts": "1586959456.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fyAzi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The psychological equivalent would be how long it takes for our nonverbal, implicit \u2018thoughts\u2019 or qualia to become verbal, explicit <thoughts>. We have intuitions before explicit thoughts, and modern psychology has focused too much on what can be observed (verbal thoughts, or even worse, behavior) that it has missed out on large portion of our psyche.\n\nIntuition precedes thoughts, but we only observe thoughts because they are easy to observe."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586957244.445200",
        "parent_user_id": "USUMN6XLH"
    },
    {
        "client_msg_id": "37e20c73-84ec-4b04-a958-0f2c11797162",
        "type": "message",
        "text": "<@UNGNT3BKR> Yeah live-coding or even something like Orca (which has no distinctive distinction between code and output) are also important in this space. But I think we can definitely go further \u2014 the idea is simple but its adoption is surprisingly slow. I think this shows how people are willing to just withstand discomfort of \u2018not seeing\u2019.",
        "user": "USUMN6XLH",
        "ts": "1586959660.449000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "USUMN6XLH",
            "ts": "1586959676.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0PMid",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UNGNT3BKR"
                            },
                            {
                                "type": "text",
                                "text": " Yeah live-coding or even something like Orca (which has no distinctive distinction between code and output) are also important in this space. But I think we can definitely go further \u2014 the idea is simple but its adoption is surprisingly slow. I think this shows how people are willing to just withstand discomfort of \u2018not seeing\u2019."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586957244.445200",
        "parent_user_id": "USUMN6XLH"
    },
    {
        "client_msg_id": "3a673204-62b6-4a3a-bfbf-1981beb606a9",
        "type": "message",
        "text": "ColorForth takes this idea of \"creative limitation\" farther than any other language I can think of. <https://colorforth.github.io/cf.htm>\n\u2022 The language is written using 48 ASCII characters, which enables you to code using a special keyboard layout (if you like) where your fingers never leave home row.\n\u2022 Identifiers are typically limited to 6 characters. They must fit into 32 bits after being compressed using \"Shannon coding\".\n\u2022 Source files are called \"blocks\" and are limited to 256 \"words\". An entire block fits on the screen at once, so there is no need for scrolling.\n\u2022 Function definitions are typically 1 line long. That's not directly enforced, but Forth code becomes increasingly hard to decipher when functions are longer than this.",
        "user": "UJN1TAYEQ",
        "ts": "1586961155.449800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Chuck Moore's Wonderful colorForth Programming Language and Operating System",
                "title_link": "https://colorforth.github.io/cf.htm",
                "text": "ColorForth is a dialect of Forth that uses color as punctuation. It is a simple, colorful programming language that produces compact, efficient programs. It is also an operating system, running stand-alone on a PC. And a philosophy that leads to tested, reliable applications.",
                "fallback": "Chuck Moore's Wonderful colorForth Programming Language and Operating System",
                "from_url": "https://colorforth.github.io/cf.htm",
                "service_icon": "https://colorforth.github.io/favicon.ico",
                "service_name": "colorforth.github.io",
                "id": 1,
                "original_url": "https://colorforth.github.io/cf.htm"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e7gj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ColorForth takes this idea of \"creative limitation\" farther than any other language I can think of. "
                            },
                            {
                                "type": "link",
                                "url": "https://colorforth.github.io/cf.htm"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The language is written using 48 ASCII characters, which enables you to code using a special keyboard layout (if you like) where your fingers never leave home row."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Identifiers are typically limited to 6 characters. They must fit into 32 bits after being compressed using \"Shannon coding\"."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Source files are called \"blocks\" and are limited to 256 \"words\". An entire block fits on the screen at once, so there is no need for scrolling."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Function definitions are typically 1 line long. That's not directly enforced, but Forth code becomes increasingly hard to decipher when functions are longer than this."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1586906564.409300",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UBSMEUXAA",
                    "UJUGB1XGD"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "036ea3d1-373d-498f-a721-27be1c63d74e",
        "type": "message",
        "text": "I'm thinking I'll just call mine \"Week 1, Week 2, Week 3\" since I'm not really doing sprints or anything, I'm just working on things for as long as they take.\n\nAnyone else planning to make a video for the channel? (I'm assuming you're all waiting for the imaginary construct known as \"the end of the week\")",
        "user": "UC2A2ARPT",
        "ts": "1586964568.450300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lcFf7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm thinking I'll just call mine \"Week 1, Week 2, Week 3\" since I'm not really doing sprints or anything, I'm just working on things for as long as they take.\n\nAnyone else planning to make a video for the channel? (I'm assuming you're all waiting for the imaginary construct known as \"the end of the week\")"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586714499.350400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "type": "message",
        "text": "<@UC2A2ARPT> I will definitely make one, just have to get around to it ;) (and wait for some things I want to mention to be wrapped up)",
        "user": "UNGNT3BKR",
        "ts": "1586964628.450500",
        "team": "T5TCAFTA9",
        "thread_ts": "1586714499.350400",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6af461f1-43a4-4715-8c07-62e257a5ce12",
        "type": "message",
        "text": "I plan to make one",
        "user": "UCKRZS3DZ",
        "ts": "1586964715.450700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s7V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I plan to make one"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586714499.350400",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7814dbb1-97e0-42e1-9ada-654ce742c153",
        "type": "message",
        "text": "imaginary construct guy here :slightly_smiling_face:",
        "user": "UBN9AFS0N",
        "ts": "1586965232.451100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XyT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "imaginary construct guy here "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586714499.350400",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "UCKRZS3DZ"
                ],
                "count": 1
            },
            {
                "name": "hatching_chick",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6700695e-5b03-4748-b7c0-ad6973f62da9",
        "type": "message",
        "text": "Yes, I'll make one; is there a channel now?",
        "user": "UUQ2EQW21",
        "ts": "1586966650.451500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c=rU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, I'll make one; is there a channel now?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586714499.350400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "9c794dd7-145f-4a22-8599-0f3468a5342c",
        "type": "message",
        "text": "&gt;  HN is easy and fashionable to diss, but I found this thread useful. Yes you have to filter, and yes you need some flame-retardant underwear at times, but if you're willing to sift through you get some gems.\nJust wanted to say I generally agree with this, which is why I go to HN :smile:. I guess I was just expecting to see a higher 'hit rate' with this post.",
        "user": "U8A5MS6R1",
        "ts": "1586966811.451700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NiAp",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " HN is easy and fashionable to diss, but I found this thread useful. Yes you have to filter, and yes you need some flame-retardant underwear at times, but if you're willing to sift through you get some gems."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just wanted to say I generally agree with this, which is why I go to HN "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            },
                            {
                                "type": "text",
                                "text": ". I guess I was just expecting to see a higher 'hit rate' with this post."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586818028.382000",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "af15a09d-7c95-47ea-9715-6279abc010b7",
        "type": "message",
        "text": "FWIW, <@UJBAJNFLK>\u2019s Emacs write-up is on HN now: <https://news.ycombinator.com/item?id=22875106> [edit: oops, fixed link to HN]",
        "user": "U8A5MS6R1",
        "ts": "1586966835.451900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1586969067.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Iq89E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FWIW, "
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": "\u2019s Emacs write-up is on HN now: "
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=22875106"
                            },
                            {
                                "type": "text",
                                "text": " [edit: oops, fixed link to HN]"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586818028.382000",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "646d24df-e823-4555-ad63-223a8d85963a",
        "type": "message",
        "text": "I would separate methodologies that structure process from languages that enable (or make easier) aspects of process. Type-driven and test-driven development are both methodologies that focus on incrementally developing a program specification through types or tests.\n\nA language like Idris or Hazel supports type-driven development by having an explicit notion of holes. A language like <https://www.pyret.org/|Pyret> supports test-driven development by allowing unit tests to be co-located with functions.",
        "user": "UFB8STN7K",
        "ts": "1586966959.452200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFB8STN7K",
            "ts": "1586966963.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ms/P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would separate methodologies that structure process from languages that enable (or make easier) aspects of process. Type-driven and test-driven development are both methodologies that focus on incrementally developing a program specification through types or tests.\n\nA language like Idris or Hazel supports type-driven development by having an explicit notion of holes. A language like "
                            },
                            {
                                "type": "link",
                                "url": "https://www.pyret.org/",
                                "text": "Pyret"
                            },
                            {
                                "type": "text",
                                "text": " supports test-driven development by allowing unit tests to be co-located with functions."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586957244.445200",
        "parent_user_id": "USUMN6XLH",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "USUMN6XLH"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "39284f72-cc28-4509-b38b-5fc74b5f5c36",
        "type": "message",
        "text": "<#C0120A3L30R|two-minute-week>",
        "user": "UCKRZS3DZ",
        "ts": "1586966980.452600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rZbx8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "channel",
                                "channel_id": "C0120A3L30R"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586714499.350400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "6b0897e4-72a0-4f77-a94a-32e656cccb37",
        "type": "message",
        "text": "Thanks :wink:",
        "user": "UUQ2EQW21",
        "ts": "1586967602.452800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w+=65",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586714499.350400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "fd653ace-d3a5-41ec-9c40-46eca510a900",
        "type": "message",
        "text": "Thanks for the pointer (I don't follow HN much these days). It's a pity that most comments focus on comparing Emacs to other text editors with little reference to malleability!",
        "user": "UJBAJNFLK",
        "ts": "1586968777.453000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xc7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the pointer (I don't follow HN much these days). It's a pity that most comments focus on comparing Emacs to other text editors with little reference to malleability!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586818028.382000",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "dcf0e3ee-ceb6-4c8e-9c90-1861816302d8",
        "type": "message",
        "text": "There's also an entire discipline and ecosystem around non-functional or minimally-functional prototypes. There's paper prototyping, wireframes, modern HyperCard-like tools \u2014 hell, the UI prototyping group at Apple used to (maybe still does) use Keynote presentations for user testing because they're so much faster to make, and you can do a bunch of tricks to make them feel like a working app.",
        "user": "UC2A2ARPT",
        "ts": "1586972084.453600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xfQNM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's also an entire discipline and ecosystem around non-functional or minimally-functional prototypes. There's paper prototyping, wireframes, modern HyperCard-like tools \u2014 hell, the UI prototyping group at Apple used to (maybe still does) use Keynote presentations for user testing because they're so much faster to make, and you can do a bunch of tricks to make them feel like a working app."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586957244.445200",
        "parent_user_id": "USUMN6XLH",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "USUMN6XLH"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9fb23f5f-32d2-4a86-aec6-b468edb5f808",
        "type": "message",
        "text": "FORTH and its cousin Postscript are very compact languages. I think FORTH is probably the most compact language, but also very difficult to read, as effectively you are pushing things into the stack, and you have to memorize how many items on the stack are consumed by each operator. APL had built-in graphing which was wonderful in its day (character graphics based plotting!), so it became more popular. FORTH was targeting embedded systems. If i am not mistaken it was invented for telescope control. FORTH was actually embedded into each Microchannel board; the Microchannel architecture was invented by Data general, and then licensed by IBM for their PC. The beauty of that architecture was that the boards each had some firmware on them, written in FORTH that would negotiate for interrupt vectors and low memory space. They needed a super compact language, so they used FORTH. But the terrible readability has hindered FORTH's general commercial use. I am surprised at how little people use J and FORTH given that they both work very well, and are super powerful. If you are doing a one man project, you might not care about readability. Perhaps it is all the hoopla around functional programming that makes people ignore these very interesting languages.",
        "user": "UEQ6M68H0",
        "ts": "1586977529.454500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d55",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FORTH and its cousin Postscript are very compact languages. I think FORTH is probably the most compact language, but also very difficult to read, as effectively you are pushing things into the stack, and you have to memorize how many items on the stack are consumed by each operator. APL had built-in graphing which was wonderful in its day (character graphics based plotting!), so it became more popular. FORTH was targeting embedded systems. If i am not mistaken it was invented for telescope control. FORTH was actually embedded into each Microchannel board; the Microchannel architecture was invented by Data general, and then licensed by IBM for their PC. The beauty of that architecture was that the boards each had some firmware on them, written in FORTH that would negotiate for interrupt vectors and low memory space. They needed a super compact language, so they used FORTH. But the terrible readability has hindered FORTH's general commercial use. I am surprised at how little people use J and FORTH given that they both work very well, and are super powerful. If you are doing a one man project, you might not care about readability. Perhaps it is all the hoopla around functional programming that makes people ignore these very interesting languages."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586906564.409300",
        "parent_user_id": "U5STGTB3J"
    }
]