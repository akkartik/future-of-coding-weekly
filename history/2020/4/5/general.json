[
    {
        "client_msg_id": "82090864-3b62-45a6-94c7-085a3545ea4a",
        "type": "message",
        "text": "also there\u2019s a book! <https://www.amazon.com/Humane-Interface-Directions-Designing-Interactive/dp/0201379376>",
        "user": "UHWC9PXBL",
        "ts": "1586037721.134500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7TbI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "also there\u2019s a book! "
                            },
                            {
                                "type": "link",
                                "url": "https://www.amazon.com/Humane-Interface-Directions-Designing-Interactive/dp/0201379376"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1585428256.013700",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "a55b5e28-cb30-4395-8b9e-aef2ad2964fc",
        "type": "message",
        "text": "Ok, so FINALLY, here's my reply to some of David's questions:\n\n1. High-level bootstrapping, UI to edit itself - How? Where's the machine code?\n\nThere's a set of low-level operations (+, -, get, set, etc.), end everything else (interpreter, compiler, bootstrapper, UI) is built on top of that. The interpreter is just a function that takes a \"context\" (dictionary) and an expression, and recursively looks up each operation by name in the given context. Each operation is either a high-level function, which is fed back into the interpreter, or a native-function which is invoked directly. Native code will either be directly editable, or (re)generatable from high level (or other) code. The system can \"save itself\" by generating a native executable that contains everything in the system stored in a statically initialized structure, with the native base operations nested within it, and a native version of the interpreter (generated by feeding the interpreter into the compiler), and a bit of code to start interpreting whatever is needed to \"start\" it up. A compiler (for some target) basically just needs to generate native code for calling a native function with arguments, and native-coded versions of the base operations.\n\n2. Why put the IDE in your code? What about compatibility &amp; updates?\n\nI think the devision between \"code\" and \"programming language\" and also IDE is completely artifcial &amp; unnecesary. There's more \"language\" describing a software system itself -- every function or API or UI has its own language (grammar and rules of application) that higher logic is composed from -- than is nececcary to describe the _few_ fundamental building blocks of programming (functions, variables, conditionals, etc). So instead of an IDE and editor for a \"programming language\", I'm looking to make it easy to bootstrap whatever language or editor or model for the specific software system, with PL being a relatively tiny, or using regular old programming abstractions to hide it's complexity away. It's a similar philosophy to this:\n\n<https://ngnghm.github.io/blog/2015/08/02/chapter-1-the-way-houyhnhnms-compute/>\n\nBut also, I can stretch these ideas into the UI itself: In the same way that functions + data can replace \"grammar\" and code \"written in\" that grammar, so can a user interface and some other model.\n\n3. Why not start with SmallTalk, or a LISP OS?\n\nMaybe it could be done there, but that's also a full OS and not a thing that people use it for. In practice, it's still a specific language that locks you in like any other (notwithstanding its late-binding philosophy). What about JetBrains MPS? That's closer, but has similar problems: It's turned LOP into a specific locked down formalization of languages and tools (ironic), that I also think is far more complex than it needs to be. Do you need all that just to be and to say \"when I say x y, I mean foo(y(x))\". You can do that with ordinary programming paraphernalia (that's what programming is!). What about Racket or Scheme? Maybe that solves a lot, but is restricted once again to dead text, not a living model that may (for one example) have a visual representation instead of a textual syntax.\n\n4. What about interop with a different runtime? Boostrapping this whole system into another runtime would create bloated and inefficient programs. Can I just make a _Java_ program in this?\n\nBootstrapping the system to another runtime was more about using the system itself as a replacement / reinvention for the computer or OS itself: A truly open-ended moldable thing that you can tap into and do whatever with, as needed. And for that, I'd want to be able to boostrap the system elsewhere. I'm starting this thing in JavaScript in a browser, but once it gets far enough, and given an implementation of some low-level ops somewhere else, I could take the exact thing I've developed and load it somewhere else, and keep working. And then have more capability than JavaScript in a browser. There's also other potential applications, like a system being able to \"send itself\" somewhere.\n\nBut using the system to create a product for another runtime, is a different idea. You would only _model_ your product in this system, and have other code to generate-out a built-product. The advantage is all the stuff I described in #2 (similar to those offered by JetBrains MPS). Also you could do something similar to what Dark lang is doing, and have a full system modeled in one place, with conditionals that effect parts of code that will end up on different machines or layers, but created in one place with one set of logic. For example, a single variable to control one aspect of everything, without having to have that extra logic embedded or repeated in any of the generated components of the built product. Also there's being able to version-control the whole thing as a single entity (so a feature change equates to exactly what changed in the WHOLE system being built).\n\n5. \"Getting the junk out of the way\" will not suddenly make code simple.\nIt doesn't follow from \"I can see everything, can now convert to and interp with Java\" to \"now everything is easy\"\n\nCode is as simple as we make it to be. There is a LOT wrong with how \"professional\" (and other) software code is composed. You could have the perfect language and tools etc. and still write horrible code. But I think much more of that is blamed on \"software is just so complex!\" than on all the overhead of language and code and tooling than is reality. I think that if it can be more easily possible to have the business logic be _the thing_ you are building and seeing, then this gets a lot easier. I also think that this stuff is much easier than it's often MADE to be, because of all the other noise, and because it's the LAST thing that programmers are thinking about. If we can make it easy to see, then this problem can become more visible, and it can be demonstrated how straight-forward programming CAN be. Yes, there are hard problems and circumstances where the logic is just not as easy as one would think; but that's more like 10% than like 90% of software. Even the simplest things are made horribly complex!\n\nBut also, If code is something that can be generated or specified more fluidly than basically giving a one-to-one specification for all the instructions in the code, than that can also help to make it much simpler.",
        "user": "UAVCC2X70",
        "ts": "1586038223.135000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Chapter 1: The Way Houyhnhnms Compute",
                "title_link": "https://ngnghm.github.io/blog/2015/08/02/chapter-1-the-way-houyhnhnms-compute/",
                "text": "Dear fellow programmer, I used to think humans wrote software the way they did because they knew what they were doing. Then I realized that they didn't really know, but adopted ways that seemed to work better than others. Or maybe rather humans were adop...",
                "fallback": "Chapter 1: The Way Houyhnhnms Compute",
                "from_url": "https://ngnghm.github.io/blog/2015/08/02/chapter-1-the-way-houyhnhnms-compute/",
                "service_icon": "https://ngnghm.github.io/img/favicon.ico",
                "service_name": "ngnghm.github.io",
                "id": 1,
                "original_url": "https://ngnghm.github.io/blog/2015/08/02/chapter-1-the-way-houyhnhnms-compute/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nyv+D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok, so FINALLY, here's my reply to some of David's questions:\n\n1. High-level bootstrapping, UI to edit itself - How? Where's the machine code?\n\nThere's a set of low-level operations (+, -, get, set, etc.), end everything else (interpreter, compiler, bootstrapper, UI) is built on top of that. The interpreter is just a function that takes a \"context\" (dictionary) and an expression, and recursively looks up each operation by name in the given context. Each operation is either a high-level function, which is fed back into the interpreter, or a native-function which is invoked directly. Native code will either be directly editable, or (re)generatable from high level (or other) code. The system can \"save itself\" by generating a native executable that contains everything in the system stored in a statically initialized structure, with the native base operations nested within it, and a native version of the interpreter (generated by feeding the interpreter into the compiler), and a bit of code to start interpreting whatever is needed to \"start\" it up. A compiler (for some target) basically just needs to generate native code for calling a native function with arguments, and native-coded versions of the base operations.\n\n2. Why put the IDE in your code? What about compatibility & updates?\n\nI think the devision between \"code\" and \"programming language\" and also IDE is completely artifcial & unnecesary. There's more \"language\" describing a software system itself -- every function or API or UI has its own language (grammar and rules of application) that higher logic is composed from -- than is nececcary to describe the _few_ fundamental building blocks of programming (functions, variables, conditionals, etc). So instead of an IDE and editor for a \"programming language\", I'm looking to make it easy to bootstrap whatever language or editor or model for the specific software system, with PL being a relatively tiny, or using regular old programming abstractions to hide it's complexity away. It's a similar philosophy to this:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://ngnghm.github.io/blog/2015/08/02/chapter-1-the-way-houyhnhnms-compute/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nBut also, I can stretch these ideas into the UI itself: In the same way that functions + data can replace \"grammar\" and code \"written in\" that grammar, so can a user interface and some other model.\n\n3. Why not start with SmallTalk, or a LISP OS?\n\nMaybe it could be done there, but that's also a full OS and not a thing that people use it for. In practice, it's still a specific language that locks you in like any other (notwithstanding its late-binding philosophy). What about JetBrains MPS? That's closer, but has similar problems: It's turned LOP into a specific locked down formalization of languages and tools (ironic), that I also think is far more complex than it needs to be. Do you need all that just to be and to say \"when I say x y, I mean foo(y(x))\". You can do that with ordinary programming paraphernalia (that's what programming is!). What about Racket or Scheme? Maybe that solves a lot, but is restricted once again to dead text, not a living model that may (for one example) have a visual representation instead of a textual syntax.\n\n4. What about interop with a different runtime? Boostrapping this whole system into another runtime would create bloated and inefficient programs. Can I just make a _Java_ program in this?\n\nBootstrapping the system to another runtime was more about using the system itself as a replacement / reinvention for the computer or OS itself: A truly open-ended moldable thing that you can tap into and do whatever with, as needed. And for that, I'd want to be able to boostrap the system elsewhere. I'm starting this thing in JavaScript in a browser, but once it gets far enough, and given an implementation of some low-level ops somewhere else, I could take the exact thing I've developed and load it somewhere else, and keep working. And then have more capability than JavaScript in a browser. There's also other potential applications, like a system being able to \"send itself\" somewhere.\n\nBut using the system to create a product for another runtime, is a different idea. You would only _model_ your product in this system, and have other code to generate-out a built-product. The advantage is all the stuff I described in #2 (similar to those offered by JetBrains MPS). Also you could do something similar to what Dark lang is doing, and have a full system modeled in one place, with conditionals that effect parts of code that will end up on different machines or layers, but created in one place with one set of logic. For example, a single variable to control one aspect of everything, without having to have that extra logic embedded or repeated in any of the generated components of the built product. Also there's being able to version-control the whole thing as a single entity (so a feature change equates to exactly what changed in the WHOLE system being built).\n\n5. \"Getting the junk out of the way\" will not suddenly make code simple.\nIt doesn't follow from \"I can see everything, can now convert to and interp with Java\" to \"now everything is easy\"\n\nCode is as simple as we make it to be. There is a LOT wrong with how \"professional\" (and other) software code is composed. You could have the perfect language and tools etc. and still write horrible code. But I think much more of that is blamed on \"software is just so complex!\" than on all the overhead of language and code and tooling than is reality. I think that if it can be more easily possible to have the business logic be _the thing_ you are building and seeing, then this gets a lot easier. I also think that this stuff is much easier than it's often MADE to be, because of all the other noise, and because it's the LAST thing that programmers are thinking about. If we can make it easy to see, then this problem can become more visible, and it can be demonstrated how straight-forward programming CAN be. Yes, there are hard problems and circumstances where the logic is just not as easy as one would think; but that's more like 10% than like 90% of software. Even the simplest things are made horribly complex!\n\nBut also, If code is something that can be generated or specified more fluidly than basically giving a one-to-one specification for all the instructions in the code, than that can also help to make it much simpler."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584235196.324400",
        "parent_user_id": "U01003H81UM"
    },
    {
        "client_msg_id": "921f738a-403a-4503-8ec8-dfdffe56a7cc",
        "type": "message",
        "text": "<@U01003H81UM> - Sorry to hear you're not doing well! Are you still wanting to do a call today, or would it be better to hold off?",
        "user": "UAVCC2X70",
        "ts": "1586038296.135300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SFE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01003H81UM"
                            },
                            {
                                "type": "text",
                                "text": " - Sorry to hear you're not doing well! Are you still wanting to do a call today, or would it be better to hold off?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584235196.324400",
        "parent_user_id": "U01003H81UM"
    },
    {
        "client_msg_id": "74ac2da1-11c1-45b5-9517-b7fbd8b4a529",
        "type": "message",
        "text": "<@UAVCC2X70> <@UD6EXQVM0> is now still good? i'm good enough to hop on",
        "user": "U01003H81UM",
        "ts": "1586038313.135500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "01=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UD6EXQVM0"
                            },
                            {
                                "type": "text",
                                "text": " is now still good? i'm good enough to hop on"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584235196.324400",
        "parent_user_id": "U01003H81UM"
    },
    {
        "client_msg_id": "afa1d680-58c6-4708-8761-e4533afdd5de",
        "type": "message",
        "text": "I'm not sure; I need to check on some things, so I'll let you know in a few minutes, if that's ok",
        "user": "UAVCC2X70",
        "ts": "1586038363.135700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xkS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not sure; I need to check on some things, so I'll let you know in a few minutes, if that's ok"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584235196.324400",
        "parent_user_id": "U01003H81UM"
    },
    {
        "client_msg_id": "475cb099-985c-433d-88b2-d06cae71f61d",
        "type": "message",
        "text": "sure np; i'll loop back in a couple of minutes and make coffee in the meantime",
        "user": "U01003H81UM",
        "ts": "1586038496.135900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01003H81UM",
            "ts": "1586038522.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Cixmm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "sure np; i'll loop back in a couple of minutes and make coffee in the meantime"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584235196.324400",
        "parent_user_id": "U01003H81UM"
    },
    {
        "client_msg_id": "57806b3f-607b-4655-b9a8-d9dc13779823",
        "type": "message",
        "text": "Ok, I'm good to go when you are, but I should note that if things get chaotic here, I'll need to jump off.",
        "user": "UAVCC2X70",
        "ts": "1586039133.136500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B907B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok, I'm good to go when you are, but I should note that if things get chaotic here, I'll need to jump off."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584235196.324400",
        "parent_user_id": "U01003H81UM"
    },
    {
        "type": "message",
        "text": "sure",
        "user": "U01003H81UM",
        "ts": "1586039248.136700",
        "team": "T5TCAFTA9",
        "thread_ts": "1584235196.324400",
        "parent_user_id": "U01003H81UM"
    },
    {
        "client_msg_id": "cdbc929f-b8a0-4e1b-bab5-bc1fa0bb8fb9",
        "type": "message",
        "text": "It appears I can't join the call.",
        "user": "UD6EXQVM0",
        "ts": "1586039519.136900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/iS4A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It appears I can't join the call."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1584235196.324400",
        "parent_user_id": "U01003H81UM"
    },
    {
        "client_msg_id": "b5d4cdca-1834-4e50-b28c-703633a12cdd",
        "type": "message",
        "text": "You can borrow the book from <http://archive.org|archive.org> <https://archive.org/details/humaneinterfacen00rask>",
        "user": "U85HCL7JP",
        "ts": "1586054205.137900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/67",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can borrow the book from "
                            },
                            {
                                "type": "link",
                                "url": "http://archive.org",
                                "text": "archive.org"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https://archive.org/details/humaneinterfacen00rask"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1585428256.013700",
        "parent_user_id": "U85HCL7JP",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0a0e6125-ea82-4dfd-9aa9-1cbc11c23cc2",
        "type": "message",
        "text": "I would like <https://malleable.systems/catalog/> to contain such resources and systems, but at the moment coverage of those areas is limited. Feel free to pass along systems / resources people know of in these areas. :smile:",
        "user": "UML4ZEKDK",
        "ts": "1586099601.138100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m+xf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would like "
                            },
                            {
                                "type": "link",
                                "url": "https://malleable.systems/catalog/"
                            },
                            {
                                "type": "text",
                                "text": " to contain such resources and systems, but at the moment coverage of those areas is limited. Feel free to pass along systems / resources people know of in these areas. "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1585860839.083000",
        "parent_user_id": "UFB8STN7K",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFPPABQ7P",
                    "UV287BVSA"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "6007b210-4592-44a3-ab3b-a8e62e2f0e1d",
        "type": "message",
        "text": "I just downloaded K from <http://Shakti.com|Shakti.com>. The executable is 84728 bytes on Linux (after stripping the symbols), depending only on libc. That is pretty compact for what you get: a powerful array-oriented programming language plus a high performance column-oriented database, and a REPL. If I slim Curv down to just the interpreter and compiler (no REPL, no UI, no OpenGL or mesh export) then the executable is 3.5MB without symbols: 42x larger. K is arguably a more powerful language than Curv, and it is definitely much faster.",
        "user": "UJN1TAYEQ",
        "ts": "1586108832.143700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TOJ7/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just downloaded K from "
                            },
                            {
                                "type": "link",
                                "url": "http://Shakti.com",
                                "text": "Shakti.com"
                            },
                            {
                                "type": "text",
                                "text": ". The executable is 84728 bytes on Linux (after stripping the symbols), depending only on libc. That is pretty compact for what you get: a powerful array-oriented programming language plus a high performance column-oriented database, and a REPL. If I slim Curv down to just the interpreter and compiler (no REPL, no UI, no OpenGL or mesh export) then the executable is 3.5MB without symbols: 42x larger. K is arguably a more powerful language than Curv, and it is definitely much faster."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "reply_count": 39,
        "reply_users_count": 8,
        "latest_reply": "1587507284.107800",
        "reply_users": [
            "UHDQ62M4P",
            "UJN1TAYEQ",
            "UCUSW7WVD",
            "UC2A2ARPT",
            "UEBG0NPDK",
            "UEQ6M68H0",
            "UJBAJNFLK",
            "UD6EXQVM0"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UHDQ62M4P",
                    "UC2A2ARPT",
                    "UAVCC2X70",
                    "UBSMEUXAA"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "f0e7a606-39b0-4dea-9ec8-fe9d7092d205",
        "type": "message",
        "text": "I'm guessing K is entirely self-contained, no libraries used",
        "user": "UHDQ62M4P",
        "ts": "1586111917.143900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VRn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm guessing K is entirely self-contained, no libraries used"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "7f8aed49-ba4b-492f-86db-b2f1798746ba",
        "type": "message",
        "text": "K is entirely self-contained. The implementation is &lt; 1000 lines of C, depending only on libc. Not open source, unfortunately. Curv is written in C++, and template expansion is partly responsible for the code bloat. Plus, there is just a lot more code.",
        "user": "UJN1TAYEQ",
        "ts": "1586112234.144100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "78LrD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "K is entirely self-contained. The implementation is < 1000 lines of C, depending only on libc. Not open source, unfortunately. Curv is written in C++, and template expansion is partly responsible for the code bloat. Plus, there is just a lot more code."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "8726d89e-5be8-4133-81c3-29346abc8ab5",
        "type": "message",
        "text": "is it self contained beyond C++ STL and such?",
        "user": "UHDQ62M4P",
        "ts": "1586113060.144300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Kry",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "is it self contained beyond C++ STL and such?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "5ab4bb56-5a7e-4a8f-9d1f-dd547d049e54",
        "type": "message",
        "text": "ahh sorry, just noticed it probably pulls in a lot of 3D stuff",
        "user": "UHDQ62M4P",
        "ts": "1586113122.144500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HnQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ahh sorry, just noticed it probably pulls in a lot of 3D stuff"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "60d42c15-4468-4e86-a685-1649b479b69c",
        "type": "message",
        "text": "Windows lobster.exe is 4MB but 90% of that is the 3D engine and its dependencies",
        "user": "UHDQ62M4P",
        "ts": "1586113231.144700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2HpUm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Windows lobster.exe is 4MB but 90% of that is the 3D engine and its dependencies"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "fa31bb4f-84f9-42a0-b444-b5ef66d31068",
        "type": "message",
        "text": "when I first wrote <http://cubeengine.com|cubeengine.com>, I was able to keep it under 64K for a while.. this being an OpenGL 3D engine with a multiplayer FPS.. in 2000",
        "user": "UHDQ62M4P",
        "ts": "1586113349.144900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kyu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "when I first wrote "
                            },
                            {
                                "type": "link",
                                "url": "http://cubeengine.com",
                                "text": "cubeengine.com"
                            },
                            {
                                "type": "text",
                                "text": ", I was able to keep it under 64K for a while.. this being an OpenGL 3D engine with a multiplayer FPS.. in 2000"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "29e09684-5856-499a-b9b6-79ffc308e4ae",
        "type": "message",
        "text": "the latest version (from 2005) is still 149K :slightly_smiling_face:",
        "user": "UHDQ62M4P",
        "ts": "1586113535.145100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wu/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the latest version (from 2005) is still 149K "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "d4c115df-0071-48c7-b94f-6256bd8591eb",
        "type": "message",
        "text": "One reason to care about executable size: if you are compiling your language implementation into WASM to run in a web browser. Download time of WASM modules matters.",
        "user": "UJN1TAYEQ",
        "ts": "1586113674.145300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kIFus",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One reason to care about executable size: if you are compiling your language implementation into WASM to run in a web browser. Download time of WASM modules matters."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "0eaeabae-2041-4d83-b5ae-1ecef70251a1",
        "type": "message",
        "text": "Another reason to care about executable size: According to the K people, one reason K runs so fast is that the entire system fits in the CPU cache.",
        "user": "UJN1TAYEQ",
        "ts": "1586113712.145500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rzSp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another reason to care about executable size: According to the K people, one reason K runs so fast is that the entire system fits in the CPU cache."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ",
        "reactions": [
            {
                "name": "open_mouth",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d4766f47-314e-490d-915d-47646ff7857d",
        "type": "message",
        "text": "yup and yup",
        "user": "UHDQ62M4P",
        "ts": "1586113852.145700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rMT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yup and yup"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "a81d94fa-7773-42ee-abbe-5c8e51b8ffa9",
        "type": "message",
        "text": "The 3.5MB curv executable I mentioned is statically linked, depending only on Boost::filesystem, Boost::system, and double-conversion. It contains a Curv parser, interpreter, and compiler that outputs GLSL. No actual 3D stuff. It's a consequence of using C++, and years of code accretion without worrying about code size. The core library is now 19,000 lines of C++, and I'm not sure how it got that big.",
        "user": "UJN1TAYEQ",
        "ts": "1586114204.145900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7MDVS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The 3.5MB curv executable I mentioned is statically linked, depending only on Boost::filesystem, Boost::system, and double-conversion. It contains a Curv parser, interpreter, and compiler that outputs GLSL. No actual 3D stuff. It's a consequence of using C++, and years of code accretion without worrying about code size. The core library is now 19,000 lines of C++, and I'm not sure how it got that big."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "fc1becb0-10c1-409e-af2f-2e2951ffc02f",
        "type": "message",
        "text": "thats some pretty expansive C++ yes :slightly_smiling_face:",
        "user": "UHDQ62M4P",
        "ts": "1586114772.146100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Rg02G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "thats some pretty expansive C++ yes "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "Provocative claim: All our high-level languages are only good for building prototypes. Since all software is built in HLLs, all mainstream software is prototypes. We've forgotten to throw the first one away on a grand scale.\n\nThere's holes to poke in this argument, but the number of rewrites K has been through lead me to think it's more right than wrong. A healthy life cycle should lead to many more rewrites, and rewrites should successively trim dependencies. All the way down to machine code.\n\n(We may eventually end up with HLLs suitable for non-prototype software, but we can't do that while HLL implementations are all prototypes.)",
        "user": "UCUSW7WVD",
        "ts": "1586116575.146400",
        "thread_ts": "1586108832.143700",
        "root": {
            "client_msg_id": "6007b210-4592-44a3-ab3b-a8e62e2f0e1d",
            "type": "message",
            "text": "I just downloaded K from <http://Shakti.com|Shakti.com>. The executable is 84728 bytes on Linux (after stripping the symbols), depending only on libc. That is pretty compact for what you get: a powerful array-oriented programming language plus a high performance column-oriented database, and a REPL. If I slim Curv down to just the interpreter and compiler (no REPL, no UI, no OpenGL or mesh export) then the executable is 3.5MB without symbols: 42x larger. K is arguably a more powerful language than Curv, and it is definitely much faster.",
            "user": "UJN1TAYEQ",
            "ts": "1586108832.143700",
            "team": "T5TCAFTA9",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "TOJ7/",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "I just downloaded K from "
                                },
                                {
                                    "type": "link",
                                    "url": "http://Shakti.com",
                                    "text": "Shakti.com"
                                },
                                {
                                    "type": "text",
                                    "text": ". The executable is 84728 bytes on Linux (after stripping the symbols), depending only on libc. That is pretty compact for what you get: a powerful array-oriented programming language plus a high performance column-oriented database, and a REPL. If I slim Curv down to just the interpreter and compiler (no REPL, no UI, no OpenGL or mesh export) then the executable is 3.5MB without symbols: 42x larger. K is arguably a more powerful language than Curv, and it is definitely much faster."
                                }
                            ]
                        }
                    ]
                }
            ],
            "thread_ts": "1586108832.143700",
            "reply_count": 39,
            "reply_users_count": 8,
            "latest_reply": "1587507284.107800",
            "reply_users": [
                "UHDQ62M4P",
                "UJN1TAYEQ",
                "UCUSW7WVD",
                "UC2A2ARPT",
                "UEBG0NPDK",
                "UEQ6M68H0",
                "UJBAJNFLK",
                "UD6EXQVM0"
            ],
            "subscribed": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BVF6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Provocative claim: All our high-level languages are only good for building prototypes. Since all software is built in HLLs, all mainstream software is prototypes. We've forgotten to throw the first one away on a grand scale.\n\nThere's holes to poke in this argument, but the number of rewrites K has been through lead me to think it's more right than wrong. A healthy life cycle should lead to many more rewrites, and rewrites should successively trim dependencies. All the way down to machine code.\n\n(We may eventually end up with HLLs suitable for non-prototype software, but we can't do that while HLL implementations are all prototypes.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "229ebc81-baf0-4448-a7eb-5c6ef5b158df",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UEBG0NPDK",
                    "UJBAJNFLK",
                    "UHWC9PXBL"
                ],
                "count": 4
            },
            {
                "name": "thinking_face",
                "users": [
                    "UAVCC2X70",
                    "UBSMEUXAA",
                    "UDQBTJ211"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "dcb6326e-bcbf-4f3e-a561-5711e8647926",
        "type": "message",
        "text": "More fuel for the hashtag-#nocode fire: <https://news.ycombinator.com/item?id=22786853>",
        "user": "UC2A2ARPT",
        "ts": "1586117203.147300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JyPn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "More fuel for the hashtag-#nocode fire: "
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=22786853"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "250f5d4b-7dc0-4040-9dd4-f11f594943b9",
        "type": "message",
        "text": "I get a sense you're right about the benefit we would have from more ground up rewrites.. I don't what the relationship with HLLs is though",
        "user": "UHDQ62M4P",
        "ts": "1586117205.147400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fCu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I get a sense you're right about the benefit we would have from more ground up rewrites.. I don't what the relationship with HLLs is though"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "514902c0-5c74-4626-9c6b-882f7ff71083",
        "type": "message",
        "text": "in some sense rewrites happen a lot.. just by different authors :slightly_smiling_face:",
        "user": "UHDQ62M4P",
        "ts": "1586117244.147600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sTx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in some sense rewrites happen a lot.. just by different authors "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "6cdb2b14-c31e-40c1-8e58-896673d724ef",
        "type": "message",
        "text": "&gt; I don't what the relationship with HLLs is though\nHLL implementations don't have enough ground-up rewrites.",
        "user": "UCUSW7WVD",
        "ts": "1586117288.147800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wYZH",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't what the relationship with HLLs is though"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nHLL implementations don't have enough ground-up rewrites."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "18661913-ab78-4de8-a749-16d2cd7c0103",
        "type": "message",
        "text": "This sounds like it might be a good candidate for _Agaram's 1st Law_ (in the spirit of <https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580718026447200>)",
        "user": "UC2A2ARPT",
        "ts": "1586117365.148200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1586117369.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Exw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This sounds like it might be a good candidate for "
                            },
                            {
                                "type": "text",
                                "text": "Agaram's 1st Law",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (in the spirit of "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1580718026447200"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UCUSW7WVD",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "66165374-d00e-4919-a2d1-aaa1bc8cf5c6",
        "type": "message",
        "text": "oh, those too",
        "user": "UHDQ62M4P",
        "ts": "1586117377.148700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5DM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "oh, those too"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "af34b7e5-7829-4bab-b4fa-49440df40f40",
        "type": "message",
        "text": "We certainly got a ton of value out of constantly rewriting. It's the only way I'm aware of to really combat the exponentiating wrongness problem (innocuous \"bad\" decisions cause further bad decisions as things get built on top over time).",
        "user": "UEBG0NPDK",
        "ts": "1586117389.148900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KvJUp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We certainly got a ton of value out of constantly rewriting. It's the only way I'm aware of to really combat the exponentiating wrongness problem (innocuous \"bad\" decisions cause further bad decisions as things get built on top over time)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "30183cc7-4821-4d52-9a43-9297261c6a8e",
        "type": "message",
        "text": "As Joe Armstrong used to say, you're at your most ignorant the first time you write something, it isn't until the 5th or 6th that you start to know something. :slightly_smiling_face:",
        "user": "UEBG0NPDK",
        "ts": "1586117503.149100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g6Tgb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As Joe Armstrong used to say, you're at your most ignorant the first time you write something, it isn't until the 5th or 6th that you start to know something. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UBSMEUXAA",
                    "UJBAJNFLK",
                    "UT9TWSZB5"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "6d8bfc5d-ef44-4592-a5e0-08a92d03f978",
        "type": "message",
        "text": "We found this to be pretty tough for people though. If you're a craftsperson, you tend to place pride in the artifact and this requires what we ended up calling \"artifact zen\" - you just have to let the thing you produced go.",
        "user": "UEBG0NPDK",
        "ts": "1586117594.149400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ziqR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We found this to be pretty tough for people though. If you're a craftsperson, you tend to place pride in the artifact and this requires what we ended up calling \"artifact zen\" - you just have to let the thing you produced go."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "bcadfa6d-00fd-407f-a29b-467bf7f08397",
        "type": "message",
        "text": "We struggled with that at several points during Eve.",
        "user": "UEBG0NPDK",
        "ts": "1586117625.149600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SBFIx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We struggled with that at several points during Eve."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "U0112C10V4Y"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "97d1cb6e-055c-42f6-9305-90815d5d26f0",
        "type": "message",
        "text": "My comment also owes something to this description of the process Rob Pike went through in rewriting Jim to Sam: <http://texteditors.org/cgi-bin/wiki.pl?Jim>",
        "user": "UCUSW7WVD",
        "ts": "1586117683.149900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1586117734.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "97E1M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My comment also owes something to this description of the process Rob Pike went through in rewriting Jim to Sam: "
                            },
                            {
                                "type": "link",
                                "url": "http://texteditors.org/cgi-bin/wiki.pl?Jim"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "583e6897-a342-430d-aad3-f67469b52c62",
        "type": "message",
        "text": "Hack for getting to \"artifact zen\": take pride in the input space you have designed, rather than how you serve it. If you find yourself attached to the code, maybe you haven't written enough tests?",
        "user": "UCUSW7WVD",
        "ts": "1586118017.150300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bqi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hack for getting to \"artifact zen\": take pride in the input space you have designed, rather than how you serve it. If you find yourself attached to the code, maybe you haven't written enough tests?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "5b22bd2e-c174-400c-ac6e-c048870fd784",
        "type": "message",
        "text": "Yeah, we talked about it as the outcome is the only thing that ultimately matters - did you solve the problem or not? If not, it doesn't matter how great the thing you produced is. Understanding and accepting the distinction between outcome vs output is a serious force multiplier in life :slightly_smiling_face:",
        "user": "UEBG0NPDK",
        "ts": "1586118184.150500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vrmis",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, we talked about it as the outcome is the only thing that ultimately matters - did you solve the problem or not? If not, it doesn't matter how great the thing you produced is. Understanding and accepting the distinction between outcome vs output is a serious force multiplier in life "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "4cf7a467-8179-4e4c-b697-628474245b89",
        "type": "message",
        "text": "<@UHDQ62M4P>:\n&gt; in some sense rewrites happen a lot.. just by different authors :slightly_smiling_face:\nThis might be the hidden variable in the debate over whether rewrites are good: whether learning accumulates. K's rewrites required Arthur Whitney's continuity on the project.",
        "user": "UCUSW7WVD",
        "ts": "1586118836.150800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vlt7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHDQ62M4P"
                            },
                            {
                                "type": "text",
                                "text": ":\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in some sense rewrites happen a lot.. just by different authors "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis might be the hidden variable in the debate over whether rewrites are good: whether learning accumulates. K's rewrites required Arthur Whitney's continuity on the project."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UDQBTJ211"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "da69da6d-75f2-439c-99af-88d8d56d7f8a",
        "type": "message",
        "text": "yup exactly: the original author rewrites too little.. because they put too much value in their existing code.. anyone else rewrites too casually, since they can't see the value in someone elses code",
        "user": "UHDQ62M4P",
        "ts": "1586119633.151000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xtgky",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yup exactly: the original author rewrites too little.. because they put too much value in their existing code.. anyone else rewrites too casually, since they can't see the value in someone elses code"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UAVCC2X70"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "f10251c4-d592-40e0-8829-c84f3187c505",
        "type": "message",
        "text": "related: <https://twitter.com/wvo/status/1154148443268321280>",
        "user": "UHDQ62M4P",
        "ts": "1586119684.151200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/wvo|@wvo>: Why programmers love to create abstractions: it's an anchoring for their mental model. Why other programmers hate your abstractions: it's a new foreign language to learn.",
                "ts": 1564005406,
                "author_name": "Wouter",
                "author_link": "https://twitter.com/wvo/status/1154148443268321280",
                "author_icon": "https://pbs.twimg.com/profile_images/520593263305039872/IO1OyQB9_normal.jpeg",
                "author_subname": "@wvo",
                "text": "Why programmers love to create abstractions: it's an anchoring for their mental model. Why other programmers hate your abstractions: it's a new foreign language to learn.",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/wvo/status/1154148443268321280",
                "id": 1,
                "original_url": "https://twitter.com/wvo/status/1154148443268321280",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nCmE4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "related: "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/wvo/status/1154148443268321280"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "01efb59a-facb-40f5-8006-9c98e7b6b355",
        "type": "message",
        "text": "maybe if people wrote more post-mortems (\"If I'd do this project again, I'd change...\") so we can get some leverage out of all this effort duplicating",
        "user": "UHDQ62M4P",
        "ts": "1586119767.151600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KPK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "maybe if people wrote more post-mortems (\"If I'd do this project again, I'd change...\") so we can get some leverage out of all this effort duplicating"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "9469a978-6d4e-41fe-b8be-86846a176c7c",
        "type": "message",
        "text": "oh wait, that would require people to read about people's previous efforts :slightly_smiling_face:",
        "user": "UHDQ62M4P",
        "ts": "1586119784.151800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OWql",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "oh wait, that would require people to read about people's previous efforts "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "6fa8c5bb-079d-4c8d-abec-86c61b795bb4",
        "type": "message",
        "text": "What we need is some way to scale up the review of \"project X tried this, but ran into Y and Z.\" I don't know how to make tests work across projects.",
        "user": "UCUSW7WVD",
        "ts": "1586119835.152000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NMf8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What we need is some way to scale up the review of \"project X tried this, but ran into Y and Z.\" I don't know how to make tests work across projects."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    },
    {
        "client_msg_id": "eb3b101a-4294-4336-8e4d-9e4d2f264a82",
        "type": "message",
        "text": "The Author of the K language is named Whitney who worked with Iverson on the J language which was Iverson's sequel to the APL language, which is famous in language history because APL was super brief, super powerful, but used its own invented alphabet which make it cryptography to use.\n\nThe K language is reminiscent of APL and J, but has its own twist to things. You can find the 1998 language reference manual here:\n\n<http://www.nsl.com/k/k2/k295/kreflite.pdf>\n\nNowadays K has evolved into being part of a  high performance analytics platform that included a database Kdb+. Evidently Whitney the inventor has been bought out and that product is with another firm, and recently he started a new company called Shakti, staffed with many former members of the KDB+ project, and they are offering a high performance analytics platform.  Shakti has no documentation or materials on what their current language or product looks like. I think in this case if you have to ask you can't afford it.\n\nAPL, J, and K are not suitable for normal mortals. They require too much mathematics training. Both Whitney and Iverson had higher degrees in Math and what they think is a reasonable level of abstraction is beyond the average mortal. I will take Prof. Wirth's more logic based approach in Pascal/Modula-2/Oberon any day of the week over array processing languages that love to force you to memory operators with tricky left-to-right or right-to-left application. But certainly array languages have validity.",
        "user": "UEQ6M68H0",
        "ts": "1586123325.152400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1586203811.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S5B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Author of the K language is named Whitney who worked with Iverson on the J language which was Iverson's sequel to the APL language, which is famous in language history because APL was super brief, super powerful, but used its own invented alphabet which make it cryptography to use.\n\nThe K language is reminiscent of APL and J, but has its own twist to things. You can find the 1998 language reference manual here:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http://www.nsl.com/k/k2/k295/kreflite.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n\nNowadays K has evolved into being part of a  high performance analytics platform that included a database Kdb+. Evidently Whitney the inventor has been bought out and that product is with another firm, and recently he started a new company called Shakti, staffed with many former members of the KDB+ project, and they are offering a high performance analytics platform.  Shakti has no documentation or materials on what their current language or product looks like. I think in this case if you have to ask you can't afford it.\n\nAPL, J, and K are not suitable for normal mortals. They require too much mathematics training. Both Whitney and Iverson had higher degrees in Math and what they think is a reasonable level of abstraction is beyond the average mortal. I will take Prof. Wirth's more logic based approach in Pascal/Modula-2/Oberon any day of the week over array processing languages that love to force you to memory operators with tricky left-to-right or right-to-left application. But certainly array languages have validity."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586108832.143700",
        "parent_user_id": "UJN1TAYEQ"
    }
]