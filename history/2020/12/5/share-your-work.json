[
    {
        "client_msg_id": "E723205F-F544-4889-8AC6-CF6B953F6876",
        "type": "message",
        "text": "<@UN9SCH5RD> , I daily drive a hybrid structural and textual editor.  Sometimes I just want to go \u201cup\u201d a line, so I use \u2018k\u2019. Other times I want \u201cexpression before the current one\u201d, and I\u2019ll use \u2018K\u2019 (custom vim remapping). I don\u2019t think I could be anywhere near as efficient as I am without access to both. Maybe a short demo is in order? It\u2019s hard to explain via text. ",
        "user": "U01DUNFS2N4",
        "ts": "1607144597.370900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01DUNFS2N4",
            "ts": "1607144618.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xGw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UN9SCH5RD"
                            },
                            {
                                "type": "text",
                                "text": " , I daily drive a hybrid structural and textual editor.  Sometimes I just want to go \u201cup\u201d a line, so I use \u2018k\u2019. Other times I want \u201cexpression before the current one\u201d, and I\u2019ll use \u2018K\u2019 (custom vim remapping). I don\u2019t think I could be anywhere near as efficient as I am without access to both. Maybe a short demo is in order? It\u2019s hard to explain via text. "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607018744.354500",
        "parent_user_id": "U019PRL1BNU",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UN9SCH5RD",
                    "UD31LGQKB",
                    "U019PRL1BNU",
                    "UPX3PH28N"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "74c9abbe-cba8-4c8f-a98a-6297ce1e9586",
        "type": "message",
        "text": "Days 4 and 5: <https://merveilles.town/@akkartik/105326538798130564>\n\nDay 4 was terrible but useful in finding some Mu bugs. Day 5 yielded satisfyingly clean code.",
        "user": "UCUSW7WVD",
        "ts": "1607155738.371300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1607155752.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jIG4a",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Days 4 and 5: "
                            },
                            {
                                "type": "link",
                                "url": "https://merveilles.town/@akkartik/105326538798130564"
                            },
                            {
                                "type": "text",
                                "text": "\n\nDay 4 was terrible but useful in finding some Mu bugs. Day 5 yielded satisfyingly clean code."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606811712.306500",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U015902ESJC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "a998071d-1e1e-4a88-bbf0-fcfcf75a4efb",
        "type": "message",
        "text": "Day 4a: <https://github.com/grokthis/ucisc/blob/master/examples/aoc/2020/day_4a.ucisc>\nDay 4b: <https://github.com/grokthis/ucisc/blob/master/examples/aoc/2020/day_4b.ucisc>\n\nThis is the first real parsing I have ever done in uCISC (or any assembly for that matter). Had to develop the necessary functions and squash all the bugs. Inconsistent line endings tripped me up for a while.",
        "user": "U015902ESJC",
        "ts": "1607204401.372000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U015902ESJC",
            "ts": "1607204673.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EZfv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Day 4a: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/grokthis/ucisc/blob/master/examples/aoc/2020/day_4a.ucisc"
                            },
                            {
                                "type": "text",
                                "text": "\nDay 4b: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/grokthis/ucisc/blob/master/examples/aoc/2020/day_4b.ucisc"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThis is the first real parsing I have ever done in uCISC (or any assembly for that matter). Had to develop the necessary functions and squash all the bugs. Inconsistent line endings tripped me up for a while."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606811712.306500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "1b988480-b6c7-428c-8f4e-a4fc578245de",
        "type": "message",
        "text": "<@UCUSW7WVD> your \"utterly ghastly comment\" on 4b makes me feel better. 4b took me ~500 lines of code and reads terribly. I need to do some serious work on parsing strings if I'm going to write a uCISC compiler in uCISC.",
        "user": "U015902ESJC",
        "ts": "1607204934.372600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jzxXK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " your \"utterly ghastly comment\" on 4b makes me feel better. 4b took me ~500 lines of code and reads terribly. I need to do some serious work on parsing strings if I'm going to write a uCISC compiler in uCISC."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606811712.306500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "680291a1-7701-4d8d-a50f-e9cc9e0edcb1",
        "type": "message",
        "text": "Yeah, I don't see how that exercise can be clean. HLLs will shorten it significantly but the need-a-shower coefficient seems irreducible :slightly_smiling_face:",
        "user": "UCUSW7WVD",
        "ts": "1607205030.372800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GKWK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I don't see how that exercise can be clean. HLLs will shorten it significantly but the need-a-shower coefficient seems irreducible "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606811712.306500",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "grin",
                "users": [
                    "U015902ESJC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "26bd15c6-ca7a-4914-b754-2c8d764cdd0c",
        "type": "message",
        "text": "What did you mean by inconsistent line endings?",
        "user": "UCUSW7WVD",
        "ts": "1607205148.373000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T3cio",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What did you mean by inconsistent line endings?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606811712.306500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "59511898-2a23-42ec-8330-f3ebf759ada7",
        "type": "message",
        "text": "There were 18 passports where the delimiter was 2 newlines rather than 2 carriage return + newline. I didn't detect the difference so was off by 18 and couldn't figure out why until I wrote a solution in another language and isolated one of the the offending group of passports. Of course all I knew was that my answer was wrong and that every example I manually checked came up with the right answer. I now have a function that detects all valid newline delimiter combinations as a result.",
        "user": "U015902ESJC",
        "ts": "1607207033.373200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KELv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There were 18 passports where the delimiter was 2 newlines rather than 2 carriage return + newline. I didn't detect the difference so was off by 18 and couldn't figure out why until I wrote a solution in another language and isolated one of the the offending group of passports. Of course all I knew was that my answer was wrong and that every example I manually checked came up with the right answer. I now have a function that detects all valid newline delimiter combinations as a result."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606811712.306500",
        "parent_user_id": "UCUSW7WVD"
    }
]