[
    {
        "client_msg_id": "e055df6b-26af-46e3-8bff-341f8f4d54d9",
        "type": "message",
        "text": "I really like this paper which has a clear and simple reference counting system for a functional language, which ends up being surprisingly performant.\n\n<https://microsoft.com/en-us/research/uploads/prod/2020/11/perceus-tr-v1.pdf|https://microsoft.com/en-us/research/uploads/prod/2020/11/perceus-tr-v1.pdf>\n\nThe key point is that it is fairly easy for the programmer to anticipate when memory will be freed and then immediately refused, allowing for code that effectively mutates memory in place.\n\nFor example if you say;\n```X = f(10)\nY = f(X)\n```\nThen you know (assuming it fits) that Y will take the place of X in memory.",
        "user": "UDQBTJ211",
        "ts": "1609244173.423500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NQmUI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really like this paper which has a clear and simple reference counting system for a functional language, which ends up being surprisingly performant.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://microsoft.com/en-us/research/uploads/prod/2020/11/perceus-tr-v1.pdf",
                                "text": "https://microsoft.com/en-us/research/uploads/prod/2020/11/perceus-tr-v1.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe key point is that it is fairly easy for the programmer to anticipate when memory will be freed and then immediately refused, allowing for code that effectively mutates memory in place.\n\nFor example if you say;\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "X = f(10)\nY = f(X)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThen you know (assuming it fits) that Y will take the place of X in memory."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1609244173.423500",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1609260569.423600",
        "reply_users": [
            "UCUSW7WVD"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL",
                    "U01661S9F34",
                    "U013ZLJARC7"
                ],
                "count": 3
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "de73ee7a-03b9-4280-a1de-21c02aaeab06",
        "type": "message",
        "text": "Since they can make this guarantee, they can largely use immutable references without giving up performance. And it's clear to the programmer where any cycles could be: in the mutable references. Very cool paper!",
        "user": "UCUSW7WVD",
        "ts": "1609260569.423600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FXXM0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Since they can make this guarantee, they can largely use immutable references without giving up performance. And it's clear to the programmer where any cycles could be: in the mutable references. Very cool paper!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1609244173.423500",
        "parent_user_id": "UDQBTJ211"
    }
]