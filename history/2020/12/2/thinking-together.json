[
    {
        "client_msg_id": "c93d9e54-d92b-4e05-8231-418c8cf7db5b",
        "type": "message",
        "text": "I've been thinking a lot about testing methodology recently because I'm writing a piece on my blog about it, and I realized this community must have a ton of things say about it, especially theorizing the fundamentals. I care about this a lot because in my experience a lot if not most time is spent testing, and doing testing better is a serious productivity improvement. For example, when should tests be deterministic vs random? When should one use unit tests vs integration tests (I suspect it's much deeper than \"lots of unit, few integration\")",
        "user": "UL5AX4G2H",
        "ts": "1606863972.181800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bdYbS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been thinking a lot about testing methodology recently because I'm writing a piece on my blog about it, and I realized this community must have a ton of things say about it, especially theorizing the fundamentals. I care about this a lot because in my experience a lot if not most time is spent testing, and doing testing better is a serious productivity improvement. For example, when should tests be deterministic vs random? When should one use unit tests vs integration tests (I suspect it's much deeper than \"lots of unit, few integration\")"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606863972.181800",
        "reply_count": 9,
        "reply_users_count": 6,
        "latest_reply": "1607012890.184800",
        "reply_users": [
            "UQ706GB9U",
            "UA14TGLTC",
            "U016VUZGUUQ",
            "U013ZLJARC7",
            "UCUSW7WVD",
            "UL5AX4G2H"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "467003df-b5ad-4fbe-a45c-e3a869ad3f65",
        "type": "message",
        "text": "i\u2019ve found that all kinds of tests are needed. What a type test does not do is just as important. Integration tests should not check do in depth correctness of the responses. Unit tests should be limited in scope. micro benchmarks for algorithms, macro benchmarks for cpu/memory tuning. squeeze testing for testing failure condition. sandbox testing with artificial traffic. statistical analysis of production traffic on canary deployments. there is no silver bullet.",
        "user": "UQ706GB9U",
        "ts": "1606867075.181900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FJZv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i\u2019ve found that all kinds of tests are needed. What a type test does not do is just as important. Integration tests should not check do in depth correctness of the responses. Unit tests should be limited in scope. micro benchmarks for algorithms, macro benchmarks for cpu/memory tuning. squeeze testing for testing failure condition. sandbox testing with artificial traffic. statistical analysis of production traffic on canary deployments. there is no silver bullet."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606863972.181800",
        "parent_user_id": "UL5AX4G2H",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "UCUSW7WVD"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "d85f934f-3167-495a-a573-c9b869d067e4",
        "type": "message",
        "text": "testing of the human element is good as well. run scenario of typical/expected failures and test the procedures for handling them.",
        "user": "UQ706GB9U",
        "ts": "1606867346.182100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kKQV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "testing of the human element is good as well. run scenario of typical/expected failures and test the procedures for handling them."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606863972.181800",
        "parent_user_id": "UL5AX4G2H"
    },
    {
        "client_msg_id": "bb06ca71-cd88-48ed-bb58-a2a20ff9d3e0",
        "type": "message",
        "text": "Regression testing: if it broke once, it's liable to break again.",
        "user": "UA14TGLTC",
        "ts": "1606874401.182400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=y9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Regression testing: if it broke once, it's liable to break again."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606863972.181800",
        "parent_user_id": "UL5AX4G2H"
    },
    {
        "client_msg_id": "12aee065-5ba5-46ec-87ce-23582af24058",
        "type": "message",
        "text": "If you do random tests, for the love of Cthulhu keep the seeds.",
        "user": "U016VUZGUUQ",
        "ts": "1606890116.182600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B/Tna",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you do random tests, for the love of Cthulhu keep the seeds."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606863972.181800",
        "parent_user_id": "UL5AX4G2H",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UCUSW7WVD",
                    "UL5AX4G2H",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "56816085-36a8-4a9f-b50c-3abaef02ad0c",
        "type": "message",
        "text": "I often recommend Chapter 6 of The Practice of Programming (<http://index-of.co.uk/Etc/The.Practice.of.Programming.-.B.W..Kernighan..pdf|pdf here>) for hard won wisdom on testing.",
        "user": "U013ZLJARC7",
        "ts": "1606899275.182900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sufo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I often recommend Chapter 6 of The Practice of Programming ("
                            },
                            {
                                "type": "link",
                                "url": "http://index-of.co.uk/Etc/The.Practice.of.Programming.-.B.W..Kernighan..pdf",
                                "text": "pdf here"
                            },
                            {
                                "type": "text",
                                "text": ") for hard won wisdom on testing."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606863972.181800",
        "parent_user_id": "UL5AX4G2H",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "text": "<@U013ZLJARC7> That link was useful and timeless enough that I made some notes for myself. Thank you!",
        "files": [
            {
                "id": "F01G6JSK6SY",
                "created": 1606932581,
                "timestamp": 1606932581,
                "name": "notes_on_testing_from_practice_of_programming.txt",
                "title": "notes_on_testing_from_practice_of_programming.txt",
                "mimetype": "text/plain",
                "filetype": "text",
                "pretty_type": "Plain Text",
                "user": "UCUSW7WVD",
                "editable": true,
                "size": 1747,
                "mode": "snippet",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F01G6JSK6SY/notes_on_testing_from_practice_of_programming.txt",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F01G6JSK6SY/download/notes_on_testing_from_practice_of_programming.txt",
                "permalink": "https://futureofcoding.slack.com/files/UCUSW7WVD/F01G6JSK6SY/notes_on_testing_from_practice_of_programming.txt",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F01G6JSK6SY-a067f309c4",
                "edit_link": "https://futureofcoding.slack.com/files/UCUSW7WVD/F01G6JSK6SY/notes_on_testing_from_practice_of_programming.txt/edit",
                "preview": "Debugging is what you do when you know that a program is broken. Testing is a determined. systematic attempt to break a program that you think is working.\n\nEdsger Dijkstra made the famous observation that testing can demonstrate the presence of bugs, but not their absence. His hope is that programs can be made correct by construction, so that there are no errors and thus no need for testing. Though this is a fine goal, it is not yet realistic for substantial programs. So in this chapter we'll focus on how to test to find errors rapidly, efficiently, and effectively.\n\nOne way to write bug-free code is to generate it by a program. If some program- ming task is understood so well that writing the code seems mechanical. then it should be mechanized. A common case occurs when a program can be generated from a specification in some specialized language.",
                "preview_highlight": "<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text/plain',window.getSelection().toString().replace(/\\u200b/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre>Debugging is what you do when you know that a program is broken. Testing is a determined. systematic attempt to break a program that you think is working.</pre></div>\n<div><pre></pre></div>\n<div><pre>Edsger Dijkstra made the famous observation that testing can demonstrate the presence of bugs, but not their absence. His hope is that programs can be made correct by construction, so that there are no errors and thus no need for testing. Though this is a fine goal, it is not yet realistic for substantial programs. So in this chapter we'll focus on how to test to find errors rapidly, efficiently, and effectively.</pre></div>\n<div><pre></pre></div>\n<div><pre>One way to write bug-free code is to generate it by a program. If some program- ming task is understood so well that writing the code seems mechanical. then it should be mechanized. A common case occurs when a program can be generated from a specification in some specialized language.</pre></div>\n</div>\n</div>\n",
                "lines": 34,
                "lines_more": 29,
                "preview_is_truncated": true,
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wKu=W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " That link was useful and timeless enough that I made some notes for myself. Thank you!"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UCUSW7WVD",
        "display_as_bot": false,
        "ts": "1606932585.183500",
        "thread_ts": "1606863972.181800",
        "parent_user_id": "UL5AX4G2H",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f1a5e457-a258-4519-83b1-50eb2d4c8407",
        "type": "message",
        "text": "Here are some opinions I wrote down yesterday, which happen to be disjoint:\n* Tests aren't always useful. There are legitimate reasons to avoid automated tests in some situations.\n* Testing first is a great way to get into the habit of writing tests. But the key is the tests, not when you write them.\n* In each test, take care to separate the thing being tested from setup and checks (I hadn't heard of AAA; thank you)\n* On conventional stacks, try to write code in a way that minimizes the need for testing I/O (my Mu is designed to eliminate this bullet)\n* On conventional stacks, test one piece at a time more than whole assemblages (also \"called 10 unit tests for every integration test\"; again obsolete on Mu: <http://akkartik.name/post/tracing-tests>)\n* Never DRY tests, only production code. With tests it's more useful to be able to see everything at a glance. If the test is too long, perhaps you need better interfaces in your _production_ code.\n* Coverage is useful as a signal to check once in a while. It becomes less useful if you constantly look at it. If you happen to look and find that coverage is low, focus on doing the above bullets more diligently. 100% coverage is not desirable.",
        "user": "UCUSW7WVD",
        "ts": "1606933220.183900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1606933501.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y0j+i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here are some opinions I wrote down yesterday, which happen to be disjoint:\n* Tests aren't always useful. There are legitimate reasons to avoid automated tests in some situations.\n* Testing first is a great way to get into the habit of writing tests. But the key is the tests, not when you write them.\n* In each test, take care to separate the thing being tested from setup and checks (I hadn't heard of AAA; thank you)\n* On conventional stacks, try to write code in a way that minimizes the need for testing I/O (my Mu is designed to eliminate this bullet)\n* On conventional stacks, test one piece at a time more than whole assemblages (also \"called 10 unit tests for every integration test\"; again obsolete on Mu: "
                            },
                            {
                                "type": "link",
                                "url": "http://akkartik.name/post/tracing-tests"
                            },
                            {
                                "type": "text",
                                "text": ")\n* Never DRY tests, only production code. With tests it's more useful to be able to see everything at a glance. If the test is too long, perhaps you need better interfaces in your "
                            },
                            {
                                "type": "text",
                                "text": "production",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " code.\n* Coverage is useful as a signal to check once in a while. It becomes less useful if you constantly look at it. If you happen to look and find that coverage is low, focus on doing the above bullets more diligently. 100% coverage is not desirable."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606863972.181800",
        "parent_user_id": "UL5AX4G2H"
    }
]