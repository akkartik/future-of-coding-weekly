[
    {
        "client_msg_id": "2e9f652a-6703-4f6a-a1ac-8efbbf9d2f53",
        "type": "message",
        "text": "looks great! for structural editing one way to go could be to have some sort of \"full-text-mode in context\" key.\n\nSay, everything in your `.container` from the example css turns into a normal editor, and you can go up and down the tree that way. That way you can do a first rough pass with plain text mode, and once you get it about right keep working on structured mode. Best of both worlds? :slightly_smiling_face:",
        "user": "UN9SCH5RD",
        "ts": "1607037932.355600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UN9SCH5RD",
            "ts": "1607037975.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I5+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "looks great! for structural editing one way to go could be to have some sort of \"full-text-mode in context\" key.\n\nSay, everything in your "
                            },
                            {
                                "type": "text",
                                "text": ".container",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " from the example css turns into a normal editor, and you can go up and down the tree that way. That way you can do a first rough pass with plain text mode, and once you get it about right keep working on structured mode. Best of both worlds? "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607018744.354500",
        "parent_user_id": "U019PRL1BNU"
    },
    {
        "client_msg_id": "ae9416f2-4206-402d-ac90-54170a7f0f39",
        "type": "message",
        "text": "I find cursor movement completely unpredictable. It looks like it remembers the column I click on, and tries to return to it when I move up/down. This happens even if I move left/right with keyboard.\n\nHave you seen Jetbrains MPS? It allows free cursor movement, just like normal text editors. Not all positions are fully editable, but they can have some useful commands attached. As an example, if you place cursor after the closing `}`, pressing backspace would delete the whole rule. You can also create other \u201csmart\u201d commands. For example, pressing `,` after the selector can automatically start another selector (pressing `,` in the middle could split it, etc.).\n\nIf you're serious about structured editors, I highly recommend trying MPS out. They have implemented many good ideas so that structured editing feels like text editing most of the time.",
        "user": "UPX3PH28N",
        "ts": "1607041570.356000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b=1j4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I find cursor movement completely unpredictable. It looks like it remembers the column I click on, and tries to return to it when I move up/down. This happens even if I move left/right with keyboard.\n\nHave you seen Jetbrains MPS? It allows free cursor movement, just like normal text editors. Not all positions are fully editable, but they can have some useful commands attached. As an example, if you place cursor after the closing "
                            },
                            {
                                "type": "text",
                                "text": "}",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", pressing backspace would delete the whole rule. You can also create other \u201csmart\u201d commands. For example, pressing "
                            },
                            {
                                "type": "text",
                                "text": ",",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " after the selector can automatically start another selector (pressing "
                            },
                            {
                                "type": "text",
                                "text": ",",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in the middle could split it, etc.).\n\nIf you're serious about structured editors, I highly recommend trying MPS out. They have implemented many good ideas so that structured editing feels like text editing most of the time."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607018744.354500",
        "parent_user_id": "U019PRL1BNU"
    },
    {
        "client_msg_id": "7e337dd3-7a88-4050-8b65-5ccacfaf684a",
        "type": "message",
        "text": "MPS is cool but is a monster in size. I'm guessing the author wants to come up with something he could embed on a web site as editor.\nThe thing I have in mind is different from MPS in that it would fully switch to edit some subgraph of the AST with plain text, so after exiting the subgraph would have to be parsed to get it back to structured mode.\nA user wouldn't be able to exit \"plaintext mode\" until the subgraph parses properly. Probably easier to implement than the quasi-seamless \"simulation of plaintext\" MPS tries to achieve.",
        "user": "UN9SCH5RD",
        "ts": "1607043767.356400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UN9SCH5RD",
            "ts": "1607043819.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WRfK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "MPS is cool but is a monster in size. I'm guessing the author wants to come up with something he could embed on a web site as editor.\nThe thing I have in mind is different from MPS in that it would fully switch to edit some subgraph of the AST with plain text, so after exiting the subgraph would have to be parsed to get it back to structured mode.\nA user wouldn't be able to exit \"plaintext mode\" until the subgraph parses properly. Probably easier to implement than the quasi-seamless \"simulation of plaintext\" MPS tries to achieve."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607018744.354500",
        "parent_user_id": "U019PRL1BNU",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD31LGQKB"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "18d421f2-3b3c-4f63-a099-5f59bf501435",
        "type": "message",
        "text": "hmmm perhaps I picked up the idea from <http://guilabs.net/> ... not sure if it is exactly the same thing I'm talking about, but probably close.",
        "user": "UN9SCH5RD",
        "ts": "1607044203.356700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Kirill Osenkov - structured editors",
                "title_link": "http://guilabs.net/",
                "text": "Structured Editors",
                "fallback": "Kirill Osenkov - structured editors",
                "from_url": "http://guilabs.net/",
                "service_name": "guilabs.net",
                "id": 1,
                "original_url": "http://guilabs.net/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MTDB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "hmmm perhaps I picked up the idea from "
                            },
                            {
                                "type": "link",
                                "url": "http://guilabs.net/"
                            },
                            {
                                "type": "text",
                                "text": " ... not sure if it is exactly the same thing I'm talking about, but probably close."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607018744.354500",
        "parent_user_id": "U019PRL1BNU"
    },
    {
        "client_msg_id": "bd80ddbe-3148-4d44-8b59-c191d6dd04c0",
        "type": "message",
        "text": "I do agree that MPS is a monster beast and is very much bloated. but they do have some good ux decisions, and I drew a lot of inspiration from MPS when implementing my editor",
        "user": "UPX3PH28N",
        "ts": "1607044354.357000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sbU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I do agree that MPS is a monster beast and is very much bloated. but they do have some good ux decisions, and I drew a lot of inspiration from MPS when implementing my editor"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607018744.354500",
        "parent_user_id": "U019PRL1BNU",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UN9SCH5RD",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "f4fb0ce9-8062-4c4a-8429-9aa24100025b",
        "type": "message",
        "text": "I\u2019ve seen but haven\u2019t personally tried MPS - sounds like I should! Getting contenteditable to work exactly right in the browser is pretty gnarly. There are some flaws I know of (up/down arrow, copy-paste, ..) but thought it good enough for demo.\n\n<@UN9SCH5RD> the demo does have a text mode (button at top) which won\u2019t switch back unless text parses. I do like the idea of plaintext inside some \u201cstructure\u201d. low-level expressions (if statements, loops, etc) are easy enough to type text. Structure is more interesting at function and module level.",
        "user": "U019PRL1BNU",
        "ts": "1607046433.357300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VMW2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019ve seen but haven\u2019t personally tried MPS - sounds like I should! Getting contenteditable to work exactly right in the browser is pretty gnarly. There are some flaws I know of (up/down arrow, copy-paste, ..) but thought it good enough for demo.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UN9SCH5RD"
                            },
                            {
                                "type": "text",
                                "text": " the demo does have a text mode (button at top) which won\u2019t switch back unless text parses. I do like the idea of plaintext inside some \u201cstructure\u201d. low-level expressions (if statements, loops, etc) are easy enough to type text. Structure is more interesting at function and module level."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607018744.354500",
        "parent_user_id": "U019PRL1BNU",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UN9SCH5RD",
                    "UPX3PH28N"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "75679f41-97ca-46bb-96ac-ea544c8ed0a0",
        "type": "message",
        "text": "It's not perfect, but kind of useful.  Sometimes the Alpha query is enough to get what you want.  Other times you start with a simple query to basically lookup the API that that you want to use.  Alpha, like so many of these NLP systems, doesn't really use context though.  <@UEBG0NPDK> could easily make context their secret sauce.",
        "user": "UA14TGLTC",
        "ts": "1607046604.357500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZaSiQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's not perfect, but kind of useful.  Sometimes the Alpha query is enough to get what you want.  Other times you start with a simple query to basically lookup the API that that you want to use.  Alpha, like so many of these NLP systems, doesn't really use context though.  "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " could easily make context their secret sauce."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606840431.317400",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "5db48821-afc9-40e9-8955-99b97060a4c4",
        "type": "message",
        "text": "cool, something as simple as a keyboard shortcut for switching in between the two (while keeping the cursor position) and a flashing red border instead of an alert box could make it a lot more seamless to switch modes",
        "user": "UN9SCH5RD",
        "ts": "1607048311.357900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UN9SCH5RD",
            "ts": "1607048326.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=ZW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "cool, something as simple as a keyboard shortcut for switching in between the two (while keeping the cursor position) and a flashing red border instead of an alert box could make it a lot more seamless to switch modes"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607018744.354500",
        "parent_user_id": "U019PRL1BNU"
    },
    {
        "client_msg_id": "f777bbf2-5e2b-4912-a794-895b165c1774",
        "type": "message",
        "text": "Consider the fundamentals: what is the mismatch between basic text editing operations and basic structural changes you want to make?  The bigger the gap, the better having a structural editor is going to be.  Plain CSS isn't going to have as rich of a structure as <http://lesscss.org/#|Less> or <https://sass-lang.com/guide|Sass>.  On the other hand, some CSS features have long distance dependencies: <https://www.creativebloq.com/features/5-cool-css-grid-generators|grid>, <https://loading.io/flexbox/|flexbox>, <https://divtable.com/|table> layouts.  Anytime there are connections between many related properties, a structural editor may be worth it.  Consider the CSS developer tools in browsers.  Tools that help represent interaction of rules, and tools that help you adjust those interactions to produce a desired effect.  A domain independent tree-structure editor will be less of a win over text editing than a domain dependent assistance. An advantage of making the editor strongly structural with tooling is that you don't need to represent all kinds of invalid text states.  The flip-side is that the direct path a useful transformation sometimes passes through invalid intermediate states.  Giving meaning to those is a classic mathematical activity.",
        "user": "UA14TGLTC",
        "ts": "1607049654.358400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "   Getting started | Less.js ",
                "title_link": "http://lesscss.org/",
                "text": "Less extends CSS with dynamic behavior such as variables, mixins, operations and functions. Less runs on both the server-side (with Node.js and Rhino) or client-side (modern browsers only).",
                "fallback": "   Getting started | Less.js ",
                "from_url": "http://lesscss.org/",
                "service_icon": "http://lesscss.org/public/ico/favicon.ico",
                "service_name": "lesscss.org",
                "id": 1,
                "original_url": "http://lesscss.org/#"
            },
            {
                "title": "Sass: Sass Basics",
                "title_link": "https://sass-lang.com/guide",
                "text": "Syntactically Awesome Style Sheets",
                "fallback": "Sass: Sass Basics",
                "from_url": "https://sass-lang.com/guide",
                "service_icon": "https://sass-lang.com/favicon.ico",
                "service_name": "sass-lang.com",
                "id": 2,
                "original_url": "https://sass-lang.com/guide"
            },
            {
                "service_name": "Creative Bloq",
                "title": "5 cool CSS Grid generators",
                "title_link": "https://www.creativebloq.com/features/5-cool-css-grid-generators",
                "text": "These tools let you build complex layouts visually, without having to be an expert in CSS Grid syntax.",
                "fallback": "Creative Bloq: 5 cool CSS Grid generators",
                "image_url": "https://cdn.mos.cms.futurecdn.net/UrjRR46QvLfZc2hPuMXXDC-1200-80.jpg",
                "image_width": 444,
                "from_url": "https://www.creativebloq.com/features/5-cool-css-grid-generators",
                "image_height": 250,
                "image_bytes": 62864,
                "service_icon": "https://vanilla.futurecdn.net/creativebloq/227409/apple-touch-icon.png",
                "id": 3,
                "original_url": "https://www.creativebloq.com/features/5-cool-css-grid-generators"
            },
            {
                "title": "Interactive CSS Flexbox Generator \u00b7 Loading.io",
                "title_link": "https://loading.io/flexbox/",
                "text": "CSS flexbox cheatsheet and generator for guiding you toward a better grid and layout system, and is bootstrap compatible!",
                "fallback": "Interactive CSS Flexbox Generator \u00b7 Loading.io",
                "thumb_url": "https://loading.io/assets/img/p/flexbox/thumbnail.jpg",
                "from_url": "https://loading.io/flexbox/",
                "thumb_width": 1000,
                "thumb_height": 500,
                "service_icon": "https://loading.io/favicon.ico",
                "service_name": "loading.io",
                "id": 4,
                "original_url": "https://loading.io/flexbox/"
            },
            {
                "title": "HTML Div Table - Online Tools",
                "title_link": "https://divtable.com/",
                "text": "Free online tools to make Div Table composing a piece of cake! HTML table generator and converter with nteractive source editor and much more!",
                "fallback": "HTML Div Table - Online Tools",
                "image_url": "https://divtable.com/images/html-div-table.png",
                "from_url": "https://divtable.com/",
                "image_width": 250,
                "image_height": 250,
                "image_bytes": 85130,
                "service_icon": "https://divtable.com/favicon.ico",
                "service_name": "divtable.com",
                "id": 5,
                "original_url": "https://divtable.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+ocy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Consider the fundamentals: what is the mismatch between basic text editing operations and basic structural changes you want to make?  The bigger the gap, the better having a structural editor is going to be.  Plain CSS isn't going to have as rich of a structure as "
                            },
                            {
                                "type": "link",
                                "url": "http://lesscss.org/#",
                                "text": "Less"
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "link",
                                "url": "https://sass-lang.com/guide",
                                "text": "Sass"
                            },
                            {
                                "type": "text",
                                "text": ".  On the other hand, some CSS features have long distance dependencies: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.creativebloq.com/features/5-cool-css-grid-generators",
                                "text": "grid"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https://loading.io/flexbox/",
                                "text": "flexbox"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https://divtable.com/",
                                "text": "table"
                            },
                            {
                                "type": "text",
                                "text": " layouts.  Anytime there are connections between many related properties, a structural editor may be worth it.  Consider the CSS developer tools in browsers.  Tools that help represent interaction of rules, and tools that help you adjust those interactions to produce a desired effect.  A domain independent tree-structure editor will be less of a win over text editing than a domain dependent assistance. An advantage of making the editor strongly structural with tooling is that you don't need to represent all kinds of invalid text states.  The flip-side is that the direct path a useful transformation sometimes passes through invalid intermediate states.  Giving meaning to those is a classic mathematical activity."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607018744.354500",
        "parent_user_id": "U019PRL1BNU",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UPX3PH28N"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U019PRL1BNU",
                    "UD31LGQKB"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "C7DB3689-4893-43E5-A551-3E8D46BCBA49",
        "type": "message",
        "text": "i love this project! i think the educational use case undersells the value of this interface for, eg, programming-by-demonstration or general algorithm visualization (a recording of someone doing bubble sort with this would be great documentation on its own)! excited to see where it goes",
        "user": "UHWC9PXBL",
        "ts": "1607098635.363300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mFwXt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i love this project! i think the educational use case undersells the value of this interface for, eg, programming-by-demonstration or general algorithm visualization (a recording of someone doing bubble sort with this would be great documentation on its own)! excited to see where it goes"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606827121.315700",
        "parent_user_id": "U0139HUPMQ9"
    },
    {
        "client_msg_id": "C74916E5-23CB-4AA8-B164-ED553E550193",
        "type": "message",
        "text": "oh man i love the updates to the video since it was a work in progress\u2014this is youtube-worthy IMO",
        "user": "UHWC9PXBL",
        "ts": "1607098715.364300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p3oOD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "oh man i love the updates to the video since it was a work in progress\u2014this is youtube-worthy IMO"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606827121.315700",
        "parent_user_id": "U0139HUPMQ9"
    },
    {
        "client_msg_id": "4F2422E7-B50C-4179-8E73-8CF78DBFF343",
        "type": "message",
        "text": "i\u2019m extremely hyped for the wiki teaser",
        "user": "UHWC9PXBL",
        "ts": "1607099182.365600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xC=C7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i\u2019m extremely hyped for the wiki teaser"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606840431.317400",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "77cb4223-bae0-4a81-be48-3f8af7c47a1f",
        "type": "message",
        "text": "Yeah, the context stuff is pretty cool :slightly_smiling_face:",
        "user": "UEBG0NPDK",
        "ts": "1607104557.366100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UbGF1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, the context stuff is pretty cool "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606840431.317400",
        "parent_user_id": "UEBG0NPDK"
    }
]