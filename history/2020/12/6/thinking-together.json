[
    {
        "client_msg_id": "f3a7f037-ed66-4c97-8b73-23fc8618b42b",
        "type": "message",
        "text": "Have people seen many programming languages where *Sets* are represented as functions from X \u2192 Bool and (more importantly) *Lists* are represented as functions from Int \u2192 X? And I mean they're _truly_ just functions: all of the operations upon them are just operations upon functions, and thus they might be repurposed for other uses as well. Javascript and Lua _kind of_ do this, except their philosophy is more like \"all collections are just dictionaries\", where a dictionary is a heavily-restricted class of function.\n\nThis approach (\"all collections are just functions\") seems like a versatile foundation (especially in the context of the semantics of the programming language I'm working on), so I've been digging into the ramifications of it lately. My biggest challenge so far is figuring out how to identify for which functions operations like set union and intersection are computable. Depending on how the function is constructed/defined, it seems like it could be quite hard to figure out a static \"safety check\". I want these operations to be well-defined even on *recursively-defined* functions, so it's not as simple as \"ensure the function definition is just a finite list of cases\" (i.e, a dictionary).\n\nThis doesn't seem unreasonable: Datalog works this way. Datalog predicates are recursively-defined functions from X \u2192 Bool (i.e. sets) that obey certain constraints so that queries upon them are answerable.",
        "user": "UCGAK10LS",
        "ts": "1607237197.201100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1607237872.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8Z8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Have people seen many programming languages where "
                            },
                            {
                                "type": "text",
                                "text": "Sets",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are represented as functions from X \u2192 Bool and (more importantly) "
                            },
                            {
                                "type": "text",
                                "text": "Lists",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are represented as functions from Int \u2192 X? And I mean they're "
                            },
                            {
                                "type": "text",
                                "text": "truly",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " just functions: all of the operations upon them are just operations upon functions, and thus they might be repurposed for other uses as well. Javascript and Lua "
                            },
                            {
                                "type": "text",
                                "text": "kind of",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " do this, except their philosophy is more like \"all collections are just dictionaries\", where a dictionary is a heavily-restricted class of function.\n\nThis approach (\"all collections are just functions\") seems like a versatile foundation (especially in the context of the semantics of the programming language I'm working on), so I've been digging into the ramifications of it lately. My biggest challenge so far is figuring out how to identify for which functions operations like set union and intersection are computable. Depending on how the function is constructed/defined, it seems like it could be quite hard to figure out a static \"safety check\". I want these operations to be well-defined even on "
                            },
                            {
                                "type": "text",
                                "text": "recursively-defined",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " functions, so it's not as simple as \"ensure the function definition is just a finite list of cases\" (i.e, a dictionary).\n\nThis doesn't seem unreasonable: Datalog works this way. Datalog predicates are recursively-defined functions from X \u2192 Bool (i.e. sets) that obey certain constraints so that queries upon them are answerable."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607237197.201100",
        "reply_count": 16,
        "reply_users_count": 6,
        "latest_reply": "1607330121.226200",
        "reply_users": [
            "UN9SCH5RD",
            "UFZFETUH1",
            "UCGAK10LS",
            "UFB8STN7K",
            "U016VUZGUUQ",
            "UA14TGLTC"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "2d778a19-1a97-4b79-b179-b3e180e6daee",
        "type": "message",
        "text": "clojure",
        "user": "UN9SCH5RD",
        "ts": "1607239949.201400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eX8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "clojure"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607237197.201100",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d9f441c1-3994-419f-84fd-0934754c5a24",
        "type": "message",
        "text": "well, not sure about \"representation\" but sets, lists and maps in clojure are also functions",
        "user": "UN9SCH5RD",
        "ts": "1607239978.201600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v+w68",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "well, not sure about \"representation\" but sets, lists and maps in clojure are also functions"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607237197.201100",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "d9b52d86-48d0-4180-b4eb-e4336b54c1a3",
        "type": "message",
        "text": "being a function simply means that you can apply parameters to them and they return a value. The semantics is what you would imagine they should do (applying 0 to a list returns the first element, etc)",
        "user": "UN9SCH5RD",
        "ts": "1607240102.201800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vY/Fw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "being a function simply means that you can apply parameters to them and they return a value. The semantics is what you would imagine they should do (applying 0 to a list returns the first element, etc)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607237197.201100",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6cb78572-c196-4339-855f-83c6549b1c01",
        "type": "message",
        "text": "People do this kind of thing in haskell/other FP languages sometimes (although I don't have an example at hand right now).\n\nThe biggest question is: how do you support other operations than construction or membership? I.e. set size, or more generally, iteration?\n\nLists like you represent them have a similar problem. If you want to iterate, at what index will you start and end?\n\nRepresenting collections as functions is something that people tried to figure out in the lambda calculus a lot. You might be interested in e.g. fold lists.",
        "user": "UFZFETUH1",
        "ts": "1607245145.202100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Opqd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "People do this kind of thing in haskell/other FP languages sometimes (although I don't have an example at hand right now).\n\nThe biggest question is: how do you support other operations than construction or membership? I.e. set size, or more generally, iteration?\n\nLists like you represent them have a similar problem. If you want to iterate, at what index will you start and end?\n\nRepresenting collections as functions is something that people tried to figure out in the lambda calculus a lot. You might be interested in e.g. fold lists."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607237197.201100",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "63ef22aa-300e-4f24-a15c-22449c49ea92",
        "type": "message",
        "text": "Yeah, figuring out how to do the operations is interesting! One possibility I'm considering is identifying classes of function where the codomain has some \"zero value\", and allowing the range of those functions to be summed if the domain maps to finitely-many non-zero values. These conditions are obeyed by finite sets, and by finite lists whose codomain is a \"Maybe\" type (sets of size 0 or 1). \"Safe\" functional languages already handle list indexing using Maybes, so it doesn't seem that bizarre.\n\nIt does seem a little bit hacky though!",
        "user": "UCGAK10LS",
        "ts": "1607246234.202400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1607247126.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VVZY1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, figuring out how to do the operations is interesting! One possibility I'm considering is identifying classes of function where the codomain has some \"zero value\", and allowing the range of those functions to be summed if the domain maps to finitely-many non-zero values. These conditions are obeyed by finite sets, and by finite lists whose codomain is a \"Maybe\" type (sets of size 0 or 1). \"Safe\" functional languages already handle list indexing using Maybes, so it doesn't seem that bizarre.\n\nIt does seem a little bit hacky though!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607237197.201100",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "64bf6728-4ed9-4627-b040-9130e5916fae",
        "type": "message",
        "text": "The above operation would allow us to encode vectors as multisets and compute their norm :slightly_smiling_face: (square each element, then sum the components)",
        "user": "UCGAK10LS",
        "ts": "1607248137.203000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1607248154.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0VA3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The above operation would allow us to encode vectors as multisets and compute their norm "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " (square each element, then sum the components)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607237197.201100",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "52619bbc-6eb3-41c6-a7fa-33bda9b25b0f",
        "type": "message",
        "text": "thinking about better auto completion (a wizard style of auto completion instead of the typical list of options)",
        "user": "UN9SCH5RD",
        "ts": "1607263213.204500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UJQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "thinking about better auto completion (a wizard style of auto completion instead of the typical list of options)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607263213.204500",
        "reply_count": 18,
        "reply_users_count": 4,
        "latest_reply": "1607304897.216900",
        "reply_users": [
            "UN9SCH5RD",
            "UHWC9PXBL",
            "U016LEA3J1H",
            "U8A5MS6R1"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "4f75cd53-9193-43ab-b82a-e23280d7e539",
        "type": "message",
        "text": "I\u2019m reading some docs on indexedDb:",
        "user": "UN9SCH5RD",
        "ts": "1607263222.204600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J0Bn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019m reading some docs on indexedDb:"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "type": "message",
        "text": "",
        "files": [
            {
                "id": "F01GMRB1PDX",
                "created": 1607263241,
                "timestamp": 1607263241,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UN9SCH5RD",
                "editable": false,
                "size": 77197,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F01GMRB1PDX/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F01GMRB1PDX/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F01GMRB1PDX-b1340b5ade/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F01GMRB1PDX-b1340b5ade/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F01GMRB1PDX-b1340b5ade/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 88,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F01GMRB1PDX-b1340b5ade/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 118,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F01GMRB1PDX-b1340b5ade/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F01GMRB1PDX-b1340b5ade/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 177,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F01GMRB1PDX-b1340b5ade/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 196,
                "original_w": 954,
                "original_h": 234,
                "thumb_tiny": "AwALADC+XXP3l/76o81f7y/nWQ4G9uO5pMD0pgbHmr/eX86PNH95fzrHwD2o2j0osBseav8AeX86USKT95fzrG2j0p0ajzE/3hRYD//Z",
                "permalink": "https://futureofcoding.slack.com/files/UN9SCH5RD/F01GMRB1PDX/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F01GMRB1PDX-bf800f2763",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "user": "UN9SCH5RD",
        "display_as_bot": false,
        "ts": "1607263244.204800",
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "ff50fe9a-31c6-4761-8243-2c0ecd24123a",
        "type": "message",
        "text": "Here\u2019s what visual studio code does on autocomplete of a store object:",
        "user": "UN9SCH5RD",
        "ts": "1607263257.205200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ii7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here\u2019s what visual studio code does on autocomplete of a store object:"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "type": "message",
        "text": "",
        "files": [
            {
                "id": "F01G9CVFN9H",
                "created": 1607263275,
                "timestamp": 1607263275,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UN9SCH5RD",
                "editable": false,
                "size": 158791,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F01G9CVFN9H/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F01G9CVFN9H/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F01G9CVFN9H-f6d458df6d/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F01G9CVFN9H-f6d458df6d/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F01G9CVFN9H-f6d458df6d/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 168,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F01G9CVFN9H-f6d458df6d/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 225,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F01G9CVFN9H-f6d458df6d/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F01G9CVFN9H-f6d458df6d/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 337,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F01G9CVFN9H-f6d458df6d/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 374,
                "original_w": 947,
                "original_h": 443,
                "thumb_tiny": "AwAWADCoHwTuLH/gWKQyezf99mmH7x+tH5VQh/m+zf8AfRpVbd3Yf8CNRH8Kki6GgB3/AAJv++jSZIIwzdR3NLj3FIcZHTqKQAYmyenX1pPKf1H51YP9abQBB5Leo/OnohUHOPzqSg0AMKsT1H50BGLDp1Hen0q/eH1oA//Z",
                "permalink": "https://futureofcoding.slack.com/files/UN9SCH5RD/F01G9CVFN9H/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F01G9CVFN9H-20e71b508e",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "user": "UN9SCH5RD",
        "display_as_bot": false,
        "ts": "1607263279.205400",
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "cab6541d-b755-4f00-a7ae-25bb04698164",
        "type": "message",
        "text": "Pretty crappy no? I was thinking, what if in addition to the plain of list of methods, there was some wizard style completion?",
        "user": "UN9SCH5RD",
        "ts": "1607263289.205800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1g2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Pretty crappy no? I was thinking, what if in addition to the plain of list of methods, there was some wizard style completion?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U01FM9NJPRN"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "789bba83-6e8a-4218-a449-cd9cc92503e9",
        "type": "message",
        "text": "&gt; db.[CTRL-SPACE]: \u201cWhat do you want to do:\u201dAdd, remove, list, etc\u2026\n&gt; Add: \u201cOk, you can *add* with 1) one argument (just the data) or 2) two arguments (data and primary key). Since you already specified an index key in line 53 of some_file.ts, we recommend option 1\u201d\n&gt; 1: add(\u201cplaceholder\u201d);",
        "user": "UN9SCH5RD",
        "ts": "1607263308.206000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dm=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> db.[CTRL-SPACE]: \u201cWhat do you want to do:\u201dAdd, remove, list, etc\u2026\n> Add: \u201cOk, you can "
                            },
                            {
                                "type": "text",
                                "text": "add",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with 1) one argument (just the data) or 2) two arguments (data and primary key). Since you already specified an index key in line 53 of some_file.ts, we recommend option 1\u201d\n> 1: add(\u201cplaceholder\u201d);"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U01FM9NJPRN",
                    "UHWC9PXBL",
                    "U8A5MS6R1"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "6d91d03b-ff07-44ac-988e-f04e3899ae9e",
        "type": "message",
        "text": "etc.",
        "user": "UN9SCH5RD",
        "ts": "1607263322.206200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MEG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "9697f030-ad9e-4635-b85e-aa4030df6aa3",
        "type": "message",
        "text": "So the documentation would have to be written in a way that allows for rendering such wizard-dialogs. Also would need to have some way to tap into code analysis (\"has a method addIndex been called already on this `db` object? then display this message, etc)",
        "user": "UN9SCH5RD",
        "ts": "1607263369.206400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "voUKi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So the documentation would have to be written in a way that allows for rendering such wizard-dialogs. Also would need to have some way to tap into code analysis (\"has a method addIndex been called already on this "
                            },
                            {
                                "type": "text",
                                "text": "db",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " object? then display this message, etc)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "be621938-6166-49f8-b6dc-bfed2735ba8c",
        "type": "message",
        "text": "this could live alongside the traditional list-of-methods completion",
        "user": "UN9SCH5RD",
        "ts": "1607263386.206600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "shtz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this could live alongside the traditional list-of-methods completion"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "cd441bb1-68cf-4214-8fb3-79623c610900",
        "type": "message",
        "text": "-- an alternative would be to have a code-lens like annotation \"warning: calling add with 2 params but you added an index on line 53\".",
        "user": "UN9SCH5RD",
        "ts": "1607264297.207000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PrW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "-- an alternative would be to have a code-lens like annotation \"warning: calling add with 2 params but you added an index on line 53\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "e1a23082-e4cf-4bfe-b2f2-b3f7ced611e2",
        "type": "message",
        "text": "You\u2019re probably familiar with Conal Elliot? A lot of his work seems to focus on this idea (representing data &amp; operations as functions / combinators).\n\nI don\u2019t know of many languages that do this, though, probably for efficiency reasons. Adding an element to a set means allocating a new closure.",
        "user": "UFB8STN7K",
        "ts": "1607277265.207200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "flJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You\u2019re probably familiar with Conal Elliot? A lot of his work seems to focus on this idea (representing data & operations as functions / combinators).\n\nI don\u2019t know of many languages that do this, though, probably for efficiency reasons. Adding an element to a set means allocating a new closure."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607237197.201100",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "ad9a8e28-444e-489f-96b3-3ebfe1cbdbd7",
        "type": "message",
        "text": "<@UP3FH4CLU> and I were just talking about this in a donut call",
        "user": "UHWC9PXBL",
        "ts": "1607278795.207400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DNaN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UP3FH4CLU"
                            },
                            {
                                "type": "text",
                                "text": " and I were just talking about this in a donut call"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "53b6647f-25f7-46ad-aeea-809807f6025a",
        "type": "message",
        "text": "I\u2019ll splat out some thoughts when i\u2019m done with a family event thing this evening",
        "user": "UHWC9PXBL",
        "ts": "1607278887.207700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Os74Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019ll splat out some thoughts when i\u2019m done with a family event thing this evening"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "c58fe968-b79f-44bf-9d1f-b0ee7a887dfd",
        "type": "message",
        "text": "fwiw in my experience with smart UX folks wizards tend to be poo-poo'd because they prescribe an order in which you need to work, which is cumbersome for the uninitiated and too slow for the experts",
        "user": "U016LEA3J1H",
        "ts": "1607284117.207900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "euFSG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "fwiw in my experience with smart UX folks wizards tend to be poo-poo'd because they prescribe an order in which you need to work, which is cumbersome for the uninitiated and too slow for the experts"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "700b6db4-cc1c-4fde-ac24-c6d585e21fe5",
        "type": "message",
        "text": "i think your general point makes a lot of sense and that the tools that already have an index of all the possible things you could choose to input could help you input the right one faster than just giving you a string search of the input, but, i am not sure that the prescriptive survey-style wizard would actually be any better",
        "user": "U016LEA3J1H",
        "ts": "1607284170.208100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L7TK6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i think your general point makes a lot of sense and that the tools that already have an index of all the possible things you could choose to input could help you input the right one faster than just giving you a string search of the input, but, i am not sure that the prescriptive survey-style wizard would actually be any better"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "bc98f4b2-2393-4da6-a78f-904038d6a1ea",
        "type": "message",
        "text": "wizards are kind of anti-direct-manipulation IMO because they invent/require more interactions that are unrelated to the medium being manipulated",
        "user": "U016LEA3J1H",
        "ts": "1607284189.208300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U016LEA3J1H",
            "ts": "1607284242.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z0Vy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "wizards are kind of anti-direct-manipulation IMO because they invent/require more interactions that are unrelated to the medium being manipulated"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607263213.204500",
        "parent_user_id": "UN9SCH5RD",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "CA40B317-FAE1-4E3B-ABAA-38F4DE8736F0",
        "type": "message",
        "text": "Yeah, I know some of Conal Elliot\u2019s stuff. I\u2019m not sure if he\u2019s addressed the above ideas; I\u2019ve only seen his stuff on recursive algebraic data types, which these are not. I\u2019m avoiding/disowning ADTs in my language.\n\nAnd to be clear, I\u2019m not interested in exploring mathematical curiosities and publishing a library or a paper, I\u2019m interested in building a practical programming language, so the constraints of existing language implementations aren\u2019t of concern to me. A language designed around data structures being encoded as functions isn\u2019t going to be allocating millions of closures every second. Functions are just the interface; the implementation can do anything semantically equivalent!",
        "user": "UCGAK10LS",
        "ts": "1607293615.213000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1607301456.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9+At",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I know some of Conal Elliot\u2019s stuff. I\u2019m not sure if he\u2019s addressed the above ideas; I\u2019ve only seen his stuff on recursive algebraic data types, which these are not. I\u2019m avoiding/disowning ADTs in my language.\n\nAnd to be clear, I\u2019m not interested in exploring mathematical curiosities and publishing a library or a paper, I\u2019m interested in building a practical programming language, so the constraints of existing language implementations aren\u2019t of concern to me. A language designed around data structures being encoded as functions isn\u2019t going to be allocating millions of closures every second. Functions are just the interface; the implementation can do anything semantically equivalent!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607237197.201100",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "400045F2-D61C-44AD-B74E-3660294CF738",
        "type": "message",
        "text": "So I\u2019m optimistic I can get things to compile efficiently :slightly_smiling_face:. The challenge is understanding if there\u2019s a nice semantics to be found here. I\u2019m hoping someone\u2019s tried something similar before.",
        "user": "UCGAK10LS",
        "ts": "1607293817.215500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1607294388.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YLE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So I\u2019m optimistic I can get things to compile efficiently "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": ". The challenge is understanding if there\u2019s a nice semantics to be found here. I\u2019m hoping someone\u2019s tried something similar before."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1607237197.201100",
        "parent_user_id": "UCGAK10LS"
    }
]