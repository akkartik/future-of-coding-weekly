[
    {
        "client_msg_id": "0335f153-dd78-4c66-b33c-275f239b904c",
        "type": "message",
        "text": "guys, there's a spectrum ... I'm confused by the black and white answers I sometimes get from the \"Future of Coding\" forum. It seems the future is black and white...",
        "user": "UN9SCH5RD",
        "ts": "1608507008.131300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3fp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "guys, there's a spectrum ... I'm confused by the black and white answers I sometimes get from the \"Future of Coding\" forum. It seems the future is black and white..."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "4a164fef-2aac-4c12-849e-ae68567b00de",
        "type": "message",
        "text": "at one side, there's \"just use maps\". At the other, there's Transit. What's in the middle?",
        "user": "UN9SCH5RD",
        "ts": "1608507024.131500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nje5e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "at one side, there's \"just use maps\". At the other, there's Transit. What's in the middle?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "5574259a-e468-487e-b155-bcf4fc03746a",
        "type": "message",
        "text": "I'm just curious how other people solved this issue, seems like a problem a lot of people may have tackled. For instance, if I \"just use maps\", then if I want to encode that map verbatim, I need to escape somehow. I'm curious how other dealt with this problem. Maybe the answer is to not worry about that case, reversibility, etc.",
        "user": "UN9SCH5RD",
        "ts": "1608507166.131700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ovo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm just curious how other people solved this issue, seems like a problem a lot of people may have tackled. For instance, if I \"just use maps\", then if I want to encode that map verbatim, I need to escape somehow. I'm curious how other dealt with this problem. Maybe the answer is to not worry about that case, reversibility, etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "8004efa6-e62c-420b-bc33-a409b8ce5c38",
        "type": "message",
        "text": "Didn't intend to sound black and white! Just trying to answer the question to my knowledge. I'm not an expert here, so it's hard to be dogmatic :smile:\n\nEncoding maps: just put them in quotes, use backslashes for escaping? I'm not familiar with Transit, unfortunately.",
        "user": "UCUSW7WVD",
        "ts": "1608507914.131900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1608508071.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yyl7D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Didn't intend to sound black and white! Just trying to answer the question to my knowledge. I'm not an expert here, so it's hard to be dogmatic "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            },
                            {
                                "type": "text",
                                "text": "\n\nEncoding maps: just put them in quotes, use backslashes for escaping? I'm not familiar with Transit, unfortunately."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UN9SCH5RD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "99ba4054-7aa8-451b-a8ae-2af4681c410f",
        "type": "message",
        "text": "From the Transit page:\n\n&gt; Users of data formats without such facilities must rely on either schemas, convention, or context to convey elements not included in the base set, making application code much more complex. With Transit, schemas, convention, and context-sensitive logic are not required.\n\nI suppose conventions and schemas is what we're both reaching for. I just haven't felt this particular pain point yet..",
        "user": "UCUSW7WVD",
        "ts": "1608508519.132300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vSu0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "From the Transit page:\n\n> Users of data formats without such facilities must rely on either schemas, convention, or context to convey elements not included in the base set, making application code much more complex. With Transit, schemas, convention, and context-sensitive logic are not required.\n\nI suppose conventions and schemas is what we're both reaching for. I just haven't felt this particular pain point yet.."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "1a97b392-1ca6-4379-b788-ecbf6b2a6207",
        "type": "message",
        "text": "You'll always run into escaping issues in principle, the trick is finding the way to avoid them in practice.  Depending on your context, the \"~#\" prefix might be enough, you might not even ever need to escape them.  Not if \"~#\" doesn't occur naturally.\n\nUsing a hash with a \"type\" key or perhaps a \"~~type~~\" key for extra safety is perhaps a more versatile (and verbose) solution.\n\nThe only downer of using extra ~s to meta-escape is that it can get silly sometime.  I vaguely recall a system wherein to write backslash I had to use the string `\"\\\\\\\\\\\\\"`.   So having another way to say backslash would have worked out better.\n\nSee also Quining <https://en.wikipedia.org/wiki/Quine_%28computing%29>.",
        "user": "UA14TGLTC",
        "ts": "1608514525.132700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F2ac",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You'll always run into escaping issues in principle, the trick is finding the way to avoid them in practice.  Depending on your context, the \"~#\" prefix might be enough, you might not even ever need to escape them.  Not if \"~#\" doesn't occur naturally.\n\nUsing a hash with a \"type\" key or perhaps a \"~~type~~\" key for extra safety is perhaps a more versatile (and verbose) solution.\n\nThe only downer of using extra ~s to meta-escape is that it can get silly sometime.  I vaguely recall a system wherein to write backslash I had to use the string "
                            },
                            {
                                "type": "text",
                                "text": "\"\\\\\\\\\\\\\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".   So having another way to say backslash would have worked out better.\n\nSee also Quining "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Quine_%28computing%29"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "5A4296EB-8C29-401D-A832-32221CAFC4B2",
        "type": "message",
        "text": "here\u2019s an off the wall idea: you could have a companion \u201ctypes\u201d array whose keys are access instructions and whose values are enums representing the type. eg `\u201cperson.birthday\u201d: \u201cdate\u201d`. you could make it ad-hoc with relative positioning with a jq-like syntax, eg `user: { createdAt: <tel:17261669|17261669>, \u201c.createdAt\u201d: \u201cdate\u201d }`. idk if that\u2019s too wacky ",
        "user": "UHWC9PXBL",
        "ts": "1608520624.142500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1608529590.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Rtg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "here\u2019s an off the wall idea: you could have a companion \u201ctypes\u201d array whose keys are access instructions and whose values are enums representing the type. eg "
                            },
                            {
                                "type": "text",
                                "text": "\u201cperson.birthday\u201d: \u201cdate\u201d",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". you could make it ad-hoc with relative positioning with a jq-like syntax, eg "
                            },
                            {
                                "type": "text",
                                "text": "user: { createdAt: ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "tel:17261669",
                                "text": "17261669",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", \u201c.createdAt\u201d: \u201cdate\u201d }",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". idk if that\u2019s too wacky "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UN9SCH5RD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ADB70CC1-A025-4D59-824C-4F2E56E789CC",
        "type": "message",
        "text": "Hungarian notation for the key names",
        "user": "USH01JEDQ",
        "ts": "1608520815.143000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A=L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hungarian notation for the key names"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "U01AD80KMLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "65D0CAF0-34A8-4D64-ABBB-D365AAD1D8F9",
        "type": "message",
        "text": "This may still be too heavy weight, but why not implement just a subset of transit? Iirc it should be possible",
        "user": "U01DUNFS2N4",
        "ts": "1608523225.144200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bgj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This may still be too heavy weight, but why not implement just a subset of transit? Iirc it should be possible"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "d4024c92-9c5c-4465-807f-f677246c17ac",
        "type": "message",
        "text": "A subset of transit could work, I was just curious about other options.\nActual transit ends up looking like a lot of nested arrays, something like:\n `[\"~#array\", [1, 2, [~#date 1929292929], [~#json, [1, 2, 1929292929]]]`",
        "user": "UN9SCH5RD",
        "ts": "1608526138.144600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h4b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A subset of transit could work, I was just curious about other options.\nActual transit ends up looking like a lot of nested arrays, something like:\n "
                            },
                            {
                                "type": "text",
                                "text": "[\"~#array\", [1, 2, [~#date 1929292929], [~#json, [1, 2, 1929292929]]]",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "4806fd9d-967c-4164-81b5-2ed10452818c",
        "type": "message",
        "text": "I like Garth's idea. Send complementary JSON with the same structure, with the type names in the place of the values (you can omit unnecessary parts)",
        "user": "UDQBTJ211",
        "ts": "1608532574.144900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r7b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like Garth's idea. Send complementary JSON with the same structure, with the type names in the place of the values (you can omit unnecessary parts)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "4d152732-e0e7-40f2-b9c7-7bbcbe99e24f",
        "type": "message",
        "text": "&gt; What if I wanted to encode the `\"~#date:1929292929\"` string verbatim? Now I have to come up with some escaping mechanism, say, `~~`\n\nOr you could use the same mechanism: `\"~#string:'~#date:...'\"`",
        "user": "U8A5MS6R1",
        "ts": "1608535588.145100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hEwnk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> What if I wanted to encode the "
                            },
                            {
                                "type": "text",
                                "text": "\"~#date:1929292929\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " string verbatim? Now I have to come up with some escaping mechanism, say, "
                            },
                            {
                                "type": "text",
                                "text": "~~",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nOr you could use the same mechanism: "
                            },
                            {
                                "type": "text",
                                "text": "\"~#string:'~#date:...'\"",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "7c1b0b2a-a38a-40b9-be5a-c6548f890381",
        "type": "message",
        "text": "<https://github.com/edn-format/edn|EDN> is a simpler textual representation (Clojure's version of sexps) that includes reader extensibility (\"tagged elements\"). It's easy to emit and there are a fairly large number of reader implementations out there, including <https://github.com/edporras/edn_turbo|a fast C parser> embedded into Ruby that we built at my last company. Would that work for you?",
        "user": "U013ZLJARC7",
        "ts": "1608539720.145300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "edn-format/edn",
                "title_link": "https://github.com/edn-format/edn",
                "text": "Extensible Data Notation. Contribute to edn-format/edn development by creating an account on GitHub.",
                "fallback": "GitHub: edn-format/edn",
                "thumb_url": "https://avatars3.githubusercontent.com/u/2325298?s=400&v=4",
                "from_url": "https://github.com/edn-format/edn",
                "thumb_width": 420,
                "thumb_height": 420,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/edn-format/edn"
            },
            {
                "service_name": "GitHub",
                "title": "edporras/edn_turbo",
                "title_link": "https://github.com/edporras/edn_turbo",
                "text": "edn-ruby plugin that replaces the ruby parser with a Ragel-based C++ implementation - edporras/edn_turbo",
                "fallback": "GitHub: edporras/edn_turbo",
                "thumb_url": "https://avatars1.githubusercontent.com/u/427325?s=400&v=4",
                "from_url": "https://github.com/edporras/edn_turbo",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 2,
                "original_url": "https://github.com/edporras/edn_turbo"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SDjAN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://github.com/edn-format/edn",
                                "text": "EDN"
                            },
                            {
                                "type": "text",
                                "text": " is a simpler textual representation (Clojure's version of sexps) that includes reader extensibility (\"tagged elements\"). It's easy to emit and there are a fairly large number of reader implementations out there, including "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/edporras/edn_turbo",
                                "text": "a fast C parser"
                            },
                            {
                                "type": "text",
                                "text": " embedded into Ruby that we built at my last company. Would that work for you?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "68b4acc5-e1e4-4e77-be3f-d54de773f1db",
        "type": "message",
        "text": "hey Jack, I think EDN is a good inspiration too, but is mostly a stand-alone textual format, I was thinking more of something more directly built on top of JSON",
        "user": "UN9SCH5RD",
        "ts": "1608539946.145600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2SU2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "hey Jack, I think EDN is a good inspiration too, but is mostly a stand-alone textual format, I was thinking more of something more directly built on top of JSON"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "f04260ef-e8b9-4e7d-bc3a-b36845e200fe",
        "type": "message",
        "text": "What would the layer above look like/seek to accomplish? That info might lead to a better suggestion :slightly_smiling_face:",
        "user": "U013ZLJARC7",
        "ts": "1608540176.145800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PF0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What would the layer above look like/seek to accomplish? That info might lead to a better suggestion "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "0F1A3DD5-2261-4DB2-A26D-1A9A8E5B6CF5",
        "type": "message",
        "text": "if you end up going with my idea, please let me know how it works out for you! it\u2019s basically half-assing infra\u2019s method: <http://www.christopherkhall.com/research.html|http://www.christopherkhall.com/research.html>",
        "user": "UHWC9PXBL",
        "ts": "1608571266.147400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K3lC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if you end up going with my idea, please let me know how it works out for you! it\u2019s basically half-assing infra\u2019s method: "
                            },
                            {
                                "type": "link",
                                "url": "http://www.christopherkhall.com/research.html",
                                "text": "http://www.christopherkhall.com/research.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UN9SCH5RD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "2fcb065b-f3c0-4b56-b855-225502972e5a",
        "type": "message",
        "text": "The details are a bit hazy ... very roughly, I've a PoC that takes <https://gist.github.com/EmmanuelOga/0d626107e5ed2bc6f5e7bf3925d032fd|sources like this> and turn them into HTML. It works but it has quite some layers of complexity (RDF+XML/XSLT).\nIt uses Saxon/JS. Saxon does what I'm asking: it expresses the full XSLT type system on top of JSON, it is just more than a bit hairy, as you can imagine... At the same time Saxon/JS lacks basic things like supporting async extension functions.\n\nIt occurred to me I could create a format to express both markup and graph data with an eye on building on top of JSON *from the start*, as opposed to the Frankenstein of tech I currently use.\nSomething like <https://github.com/thi-ng/umbrella/tree/develop/packages/egf|EGF> comes close but it is missing the markup part (mixed content).\n\nFor now I'm just looking at \"prior art\", specially if I can find very minimal formats that build on top of JSON without adding too much complexity to ... steal :slightly_smiling_face: .. some of the patterns people use when building on top of JSON.",
        "user": "UN9SCH5RD",
        "ts": "1608589215.147900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UN9SCH5RD",
            "ts": "1608590762.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d0U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The details are a bit hazy ... very roughly, I've a PoC that takes "
                            },
                            {
                                "type": "link",
                                "url": "https://gist.github.com/EmmanuelOga/0d626107e5ed2bc6f5e7bf3925d032fd",
                                "text": "sources like this"
                            },
                            {
                                "type": "text",
                                "text": " and turn them into HTML. It works but it has quite some layers of complexity (RDF+XML/XSLT).\nIt uses Saxon/JS. Saxon does what I'm asking: it expresses the full XSLT type system on top of JSON, it is just more than a bit hairy, as you can imagine... At the same time Saxon/JS lacks basic things like supporting async extension functions.\n\nIt occurred to me I could create a format to express both markup and graph data with an eye on building on top of JSON "
                            },
                            {
                                "type": "text",
                                "text": "from the start",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", as opposed to the Frankenstein of tech I currently use.\nSomething like "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/thi-ng/umbrella/tree/develop/packages/egf",
                                "text": "EGF"
                            },
                            {
                                "type": "text",
                                "text": " comes close but it is missing the markup part (mixed content).\n\nFor now I'm just looking at \"prior art\", specially if I can find very minimal formats that build on top of JSON without adding too much complexity to ... steal "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " .. some of the patterns people use when building on top of JSON."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD"
    },
    {
        "client_msg_id": "46df4db9-3136-49e9-875b-6dc738fea330",
        "type": "message",
        "text": "<https://concise-encoding.org/> is able to express both markup and graphs and apparently has a JSON representation as well, so I'll be looking at it too. C/E's scope seems a lot larger than what I'm looking for and I don't necessarily like its grammar.",
        "user": "UN9SCH5RD",
        "ts": "1608591454.148600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UN9SCH5RD",
            "ts": "1608603203.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v+0O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://concise-encoding.org/"
                            },
                            {
                                "type": "text",
                                "text": " is able to express both markup and graphs and apparently has a JSON representation as well, so I'll be looking at it too. C/E's scope seems a lot larger than what I'm looking for and I don't necessarily like its grammar."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1608491424.130300",
        "parent_user_id": "UN9SCH5RD"
    }
]