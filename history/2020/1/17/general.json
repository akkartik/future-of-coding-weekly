[
    {
        "client_msg_id": "3b13736a-af07-400a-9f8b-46415b92902d",
        "type": "message",
        "text": "&gt; <@U8A5MS6R1> \"Unlike zero, which was invented very early in maths, how come we never needed the empty string until we started working with computers?\"\n?? The empty string was invented by mathematicians long before the first programmable computer was built. Axel Thue invented string rewriting systems in 1914, so the idea is at least that old.",
        "user": "UJN1TAYEQ",
        "ts": "1579221903.258400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/yaz",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " \"Unlike zero, which was invented very early in maths, how come we never needed the empty string until we started working with computers?\""
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "?? The empty string was invented by mathematicians long before the first programmable computer was built. Axel Thue invented string rewriting systems in 1914, so the idea is at least that old."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "0057e8e3-6f01-4250-80ed-4ea5bbf0c560",
        "type": "message",
        "text": "Cool. Okay, I want to work on \"yes code\" systems.",
        "user": "UJN1TAYEQ",
        "ts": "1579221942.258600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZxC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cool. Okay, I want to work on \"yes code\" systems."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212228.247100",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "bb1c842d-0f4a-4a7c-b1f9-7dce5f0eb0c1",
        "type": "message",
        "text": "Sure. But compare 0 in mathematics to the empty string in text. We've had the notion of missing information but no actual literal form for it. Some countries you write 'NA' in forms, others you write '-' or maybe just scribble in margins about why something is blank.",
        "user": "U8A5MS6R1",
        "ts": "1579222528.258800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ddiS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sure. But compare 0 in mathematics to the empty string in text. We've had the notion of missing information but no actual literal form for it. Some countries you write 'NA' in forms, others you write '-' or maybe just scribble in margins about why something is blank."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "70931589-1204-40f8-a142-62c31d758b06",
        "type": "message",
        "text": "The best way to encode a missing value depends on the programming language.\n\nA `Maybe` type (or `Either` type) is the best solution, if you are using Haskell, because then your code is compatible with all of the Haskell infrastructure that supports the use of `Maybe` types, and you don't want to force other Haskell programmers to have to write glue code to interface with your non-idiomatic API.\n\nIf you are programming in Clojure, then Maybe types are not the best way to represent this concept. Clojure isn't Haskell. If you are using a Clojure map, then omitting a field from the map is a better way to indicate missing data. I think that Rich Hickey's talk is directed at Clojure programmers, not at Haskell programmers, in order to explain why you shouldn't blindly import Haskell idioms into Clojure, when Clojure has its own idioms.",
        "user": "UJN1TAYEQ",
        "ts": "1579222571.259000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1579223010.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gPE0T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The best way to encode a missing value depends on the programming language.\n\nA "
                            },
                            {
                                "type": "text",
                                "text": "Maybe",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " type (or "
                            },
                            {
                                "type": "text",
                                "text": "Either",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " type) is the best solution, if you are using Haskell, because then your code is compatible with all of the Haskell infrastructure that supports the use of "
                            },
                            {
                                "type": "text",
                                "text": "Maybe",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " types, and you don't want to force other Haskell programmers to have to write glue code to interface with your non-idiomatic API.\n\nIf you are programming in Clojure, then Maybe types are not the best way to represent this concept. Clojure isn't Haskell. If you are using a Clojure map, then omitting a field from the map is a better way to indicate missing data. I think that Rich Hickey's talk is directed at Clojure programmers, not at Haskell programmers, in order to explain why you shouldn't blindly import Haskell idioms into Clojure, when Clojure has its own idioms."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "094c513b-6697-4b9d-b11d-abf17dfdeb41",
        "type": "message",
        "text": "I feel this discussion points to how what we call values don\u2019t include all the information we end up needing to track surrounding typical values. We need something more like slots with arbitrary attributes, a value being just one of them. Others might be things like: What\u2019s the default value? What it\u2019s type(s)? How should it get initialized? What are the valid set of, range of, or validator function for this value? Should we persist this value? Is it editable? What are it\u2019s permissions? Do we own it or link to it? How should it be copied when needed? Should it be persisted? etc. These are properties of the slot, not the value it references.",
        "user": "ULM3U6275",
        "ts": "1579223037.259300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1579224599.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Tm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I feel this discussion points to how what we call values don\u2019t include all the information we end up needing to track surrounding typical values. We need something more like slots with arbitrary attributes, a value being just one of them. Others might be things like: What\u2019s the default value? What it\u2019s type(s)? How should it get initialized? What are the valid set of, range of, or validator function for this value? Should we persist this value? Is it editable? What are it\u2019s permissions? Do we own it or link to it? How should it be copied when needed? Should it be persisted? etc. These are properties of the slot, not the value it references."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "USJ899UUD",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "e639452e-d6fb-4833-9a97-5731e41c2edc",
        "type": "message",
        "text": "Of course, now we're deep into the data-modelling bikeshed. Aren't those pieces of metadata just values in themselves? What if we care about the metadata of the metadata? Which systems have done a good job resolving this? RDF / semantic web? EAV[T]?",
        "user": "UC2A2ARPT",
        "ts": "1579224012.260100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "29b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Of course, now we're deep into the data-modelling bikeshed. Aren't those pieces of metadata just values in themselves? What if we care about the metadata of the metadata? Which systems have done a good job resolving this? RDF / semantic web? EAV[T]?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "afd76c5a-65d8-406c-be13-a8a33d156482",
        "type": "message",
        "text": "Right, though not necessarily meta in the class sense as these properties may be specific to the instance of the object which owns the value. My point is that it may not be appropriate to try to encode too much meta data (as we might be tempted to do with an empty string) into a value. Most languages and object systems lack abstractions around this, and end up scattering this meta info in difficult to work with ways throughout the code. Databases have similar problems.",
        "user": "ULM3U6275",
        "ts": "1579224838.260500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1579225129.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fNF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Right, though not necessarily meta in the class sense as these properties may be specific to the instance of the object which owns the value. My point is that it may not be appropriate to try to encode too much meta data (as we might be tempted to do with an empty string) into a value. Most languages and object systems lack abstractions around this, and end up scattering this meta info in difficult to work with ways throughout the code. Databases have similar problems."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "6bbf7b1d-c6ca-4619-9a99-3f9edd2648fb",
        "type": "message",
        "text": "Would folks here be interested in going to an FoC Demo Day at Strange Loop in Cleveland this October?",
        "user": "ULM3U6275",
        "ts": "1579231410.000200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mb=T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Would folks here be interested in going to an FoC Demo Day at Strange Loop in Cleveland this October?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579121644.203400",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "b6882af3-512b-45ba-ae51-b9a6c16c8fe0",
        "type": "message",
        "text": "Slots + attributes feels more like the right way of thinking about it than anything else I've come across.\n\nA variation: rather than using explicit attributes, there may be a system that understands the history and current state of slots: whether it's empty or full, whether it was always that way, how many times it has changed\u2014whatever. It tracks what's happening/happened to slots.\n\nI think it's just shifting the problem into computation rather than data, so maybe not useful :slightly_smiling_face: But it's what I thought of after reading <@UC2A2ARPT>'s comment.",
        "user": "USJ899UUD",
        "ts": "1579232040.000500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ecs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Slots + attributes feels more like the right way of thinking about it than anything else I've come across.\n\nA variation: rather than using explicit attributes, there may be a system that understands the history and current state of slots: whether it's empty or full, whether it was always that way, how many times it has changed\u2014whatever. It tracks what's happening/happened to slots.\n\nI think it's just shifting the problem into computation rather than data, so maybe not useful "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " But it's what I thought of after reading "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": "'s comment."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275"
    },
    {
        "type": "message",
        "subtype": "bot_message",
        "text": "Would you attend FoC Demo Day at Strange Loop in Cleveland in October?",
        "ts": "1579239299.000900",
        "bot_id": "B7205UT0R",
        "thread_ts": "1579239299.000900",
        "reply_count": 7,
        "reply_users_count": 4,
        "latest_reply": "1579399848.173600",
        "reply_users": [
            "UL3EE9WR1",
            "UE6EFEPTQ",
            "UK3LH8CF5",
            "ULM3U6275"
        ],
        "subscribed": false,
        "blocks": [
            {
                "type": "section",
                "block_id": "poll-a1404cf4-c1da-4a2c-8d8d-e549e1eaff9d-title-and-menu",
                "text": {
                    "type": "mrkdwn",
                    "text": "*Would you attend FoC Demo Day at Strange Loop in Cleveland in October?*",
                    "verbatim": false
                },
                "accessory": {
                    "type": "overflow",
                    "action_id": "title-and-menu",
                    "options": [
                        {
                            "text": {
                                "type": "plain_text",
                                "text": ":information_source: View info",
                                "emoji": true
                            },
                            "value": "view_info"
                        },
                        {
                            "text": {
                                "type": "plain_text",
                                "text": ":pushpin: Capture Decision from Poll",
                                "emoji": true
                            },
                            "value": "capture_decision_from_poll"
                        },
                        {
                            "text": {
                                "type": "plain_text",
                                "text": ":x: Delete Poll",
                                "emoji": true
                            },
                            "value": "delete_poll"
                        },
                        {
                            "text": {
                                "type": "plain_text",
                                "text": ":gear: Go to Settings",
                                "emoji": true
                            },
                            "value": "go_to_settings_from_poll",
                            "url": "https://simplepoll.rocks/dashboard/futureofcoding/settings/"
                        }
                    ]
                }
            },
            {
                "type": "section",
                "block_id": "poll-a1404cf4-c1da-4a2c-8d8d-e549e1eaff9d-vote-1",
                "text": {
                    "type": "mrkdwn",
                    "text": ":one: Yes, as attendee.    `2`\n<@UK3LH8CF5>, <@ULM3U6275>",
                    "verbatim": false
                },
                "accessory": {
                    "type": "button",
                    "action_id": "vote-1",
                    "text": {
                        "type": "plain_text",
                        "text": ":one:",
                        "emoji": true
                    }
                }
            },
            {
                "type": "section",
                "block_id": "poll-a1404cf4-c1da-4a2c-8d8d-e549e1eaff9d-vote-2",
                "text": {
                    "type": "mrkdwn",
                    "text": ":two: Yes, as speaker.    `1`\n<@UK3LH8CF5>",
                    "verbatim": false
                },
                "accessory": {
                    "type": "button",
                    "action_id": "vote-2",
                    "text": {
                        "type": "plain_text",
                        "text": ":two:",
                        "emoji": true
                    }
                }
            },
            {
                "type": "section",
                "block_id": "poll-a1404cf4-c1da-4a2c-8d8d-e549e1eaff9d-vote-3",
                "text": {
                    "type": "mrkdwn",
                    "text": ":three: Can't make it.    `10`\n<@UC2A2ARPT>, <@UJBAJNFLK>, <@U8A5MS6R1>, <@UMVH31ML3>, <@UA14TGLTC>, <@UBN9AFS0N>, <@UDRQ4V0CT>, <@URMEM88JG>, <@UML4ZEKDK>, <@UHWC9PXBL>",
                    "verbatim": false
                },
                "accessory": {
                    "type": "button",
                    "action_id": "vote-3",
                    "text": {
                        "type": "plain_text",
                        "text": ":three:",
                        "emoji": true
                    }
                }
            },
            {
                "type": "context",
                "block_id": "+bofQ",
                "elements": [
                    {
                        "type": "mrkdwn",
                        "text": "Created by <@ULM3U6275> with /poll",
                        "verbatim": false
                    }
                ]
            }
        ],
        "edited": {
            "user": "B7205UT0R",
            "ts": "1580573688.000000"
        }
    },
    {
        "client_msg_id": "93F12EBB-DE12-438A-8303-71CCDC6879C0",
        "type": "message",
        "text": "Cross-linking to this idea in <#CEXED56UR|meta>: \n<https://futureofcoding.slack.com/archives/CEXED56UR/p1579240985018600|https://futureofcoding.slack.com/archives/CEXED56UR/p1579240985018600>",
        "user": "U5STGTB3J",
        "ts": "1579241041.002100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/CEXED56UR/p1579240985018600",
                "fallback": "[January 16th, 2020 10:03 PM] stefanlesser: The Recurse Center has a \u201cBlaggregator\u201d \u2014 a tool where you can register your blog\u2019s RSS feed and then every new post will automatically be announced in a #blogging Zulip channel.\n<https://blaggregator.recurse.com/about/|https://blaggregator.recurse.com/about/>\n\n1. I think that would be great for us too so we can track and discuss blog posts of members here. I don\u2019t know how to make that work but surely there must be some Slack app that can do this.\n2. That could be also interesting for automatically posting tweets here although I would like that to be a different channel to distinguish blog posts from tweets.",
                "ts": "1579240985.018600",
                "author_id": "U5STGTB3J",
                "author_subname": "Stefan Lesser",
                "channel_id": "CEXED56UR",
                "channel_name": "meta",
                "is_msg_unfurl": true,
                "text": "The Recurse Center has a \u201cBlaggregator\u201d \u2014 a tool where you can register your blog\u2019s RSS feed and then every new post will automatically be announced in a #blogging Zulip channel.\n<https://blaggregator.recurse.com/about/|https://blaggregator.recurse.com/about/>\n\n1. I think that would be great for us too so we can track and discuss blog posts of members here. I don\u2019t know how to make that work but surely there must be some Slack app that can do this.\n2. That could be also interesting for automatically posting tweets here although I would like that to be a different channel to distinguish blog posts from tweets.",
                "author_name": "Stefan Lesser",
                "author_link": "https://futureofcoding.slack.com/team/U5STGTB3J",
                "author_icon": "https://avatars.slack-edge.com/2017-08-20/228447816352_649181907e06ec450c64_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/CEXED56UR/p1579240985018600",
                "footer": "Posted in #meta"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z==",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cross-linking to this idea in "
                            },
                            {
                                "type": "channel",
                                "channel_id": "CEXED56UR"
                            },
                            {
                                "type": "text",
                                "text": ": \n"
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/CEXED56UR/p1579240985018600",
                                "text": "https://futureofcoding.slack.com/archives/CEXED56UR/p1579240985018600"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212228.247100",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "bf4ea749-db47-47d4-bc6f-b1f907b49079",
        "type": "message",
        "text": "Strange Loop is in St. Louis :slightly_smiling_face:",
        "user": "UL3EE9WR1",
        "ts": "1579241189.003500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H+8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Strange Loop is in St. Louis "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579239299.000900",
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "F623B902-5219-440C-8A71-1F6DE2A515EB",
        "type": "message",
        "text": "In programming we generally have an aversion to ambiguity and like everything to be well defined. That\u2019s not surprising because whenever we have ambiguity, it usually leads to exceptions, crashes, undefined behavior, or hard to track down bugs.\n\nAs a consequence we came up with a solution: get rid of ambiguity. We introduced more specific types that make the formerly ambiguous cases explicit and/or limit the possible values to those we know to work with only. We added type checkers that prevent us from compiling ambiguity into our programs.\n\nSo now, if your function needs two integers to work, it only works with integers. If you have a string \u201c5\u201d and want to stick it in there, you\u2019ll need another function that\u2019s been specifically designed to convert a string into an integer, which includes a \u201cnot possible\u201d scenario and so you\u2019re forced to deal with that scenario. That\u2019s all great and clearly works better than what we had before.\n\nSometimes I wonder if that \u201clet\u2019s make everything more explicit\u201d solution was maybe not the best one and we should\u2019ve thought more into the opposite direction, about how we can keep the ambiguity, but figure out better ways to deal with it.\n\nAfter all, humans deal with ambiguity quite well. If you read this post and you don\u2019t know what \u201cambiguity\u201c means, your comprehension process doesn\u2019t crash and you can finish reading the whole post just fine. You\u2019re even trying to make sense of what it could mean based on the context. Or you can look it up later and then it probably makes sense without you having to read the whole post again.\n\nI think this is also something that makes programming hard to learn \u2014 we\u2019re not used to having to make everything explicit. Most of the world works just fine with lots of ambiguity. Sure, sometimes that approach causes problems too, but look how far we got with it.",
        "user": "U5STGTB3J",
        "ts": "1579242253.020700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WPQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In programming we generally have an aversion to ambiguity and like everything to be well defined. That\u2019s not surprising because whenever we have ambiguity, it usually leads to exceptions, crashes, undefined behavior, or hard to track down bugs.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "As a consequence we came up with a solution: get rid of ambiguity. We introduced more specific types that make the formerly ambiguous cases explicit and/or limit the possible values to those we know to work with only. We added type checkers that prevent us from compiling ambiguity into our programs.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "So now, if your function needs two integers to work, it only works with integers. If you have a string \u201c5\u201d and want to stick it in there, you\u2019ll need another function that\u2019s been specifically designed to convert a string into an integer, which includes a \u201cnot possible\u201d scenario and so you\u2019re forced to deal with that scenario. That\u2019s all great and clearly works better than what we had before.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Sometimes I wonder if that \u201clet\u2019s make everything more explicit\u201d solution was maybe not the best one and we should\u2019ve thought more into the opposite direction, about how we can keep the ambiguity, but figure out better ways to deal with it.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "After all, humans deal with ambiguity quite well. If you read this post and you don\u2019t know what \u201cambiguity\u201c means, your comprehension process doesn\u2019t crash and you can finish reading the whole post just fine. You\u2019re even trying to make sense of what it could mean based on the context. Or you can look it up later and then it probably makes sense without you having to read the whole post again.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "I think this is also something that makes programming hard to learn \u2014 we\u2019re not used to having to make everything explicit. Most of the world works just fine with lots of ambiguity. Sure, sometimes that approach causes problems too, but look how far we got with it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "ULM3U6275",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "14ae77ce-bd8f-4535-857e-43c44acde86e",
        "type": "message",
        "text": ":wave: I\u2019m here! What\u2019d I miss?",
        "user": "USS2RKB7W",
        "ts": "1579243006.021200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U9/CK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "wave"
                            },
                            {
                                "type": "text",
                                "text": " I\u2019m here! What\u2019d I miss?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579243006.021200",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1579275891.023400",
        "reply_users": [
            "UC2A2ARPT"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "1a10c92d-675a-488a-b8f4-d62c2b3337ec",
        "type": "message",
        "text": "That brings to mind two things for me:\n\n1. More flexible notions of equivalence, rather than just equality when e.g. comparing types. Liskov substitution is one example, and \"duck typing\" is I guess a kind of extreme. The first works to enable context-dependent equality: i.e. in some specific context, we can use a looser notion of equality; the second one works toward equal for \"all intents and purposes\". Additional strategies could probably be found in each of those categories though. I could see something like neural net recognizers being used for more flexible equivalence definitions as being in the equal for all intents and purposes category, for example.\n2. Deferred / partial / placeholder definitions. It seems like a big part of how we deal with ambiguity when learning things is something like: we come across a term/concept that we don't understand while reading something\u2014and it's not a problem. We just invent a unique placeholder symbol for that thing and accumulate multiple tentative definitions which each gain or lose support as you learn more. The 'placeholder' symbol in our minds has something like a tentativeness value associated to it: we can keep using the symbol, but we take into account the uncertainty of its meaning/value.",
        "user": "USJ899UUD",
        "ts": "1579248572.021600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WorU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That brings to mind two things for me:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "More flexible notions of equivalence, rather than just equality when e.g. comparing types. Liskov substitution is one example, and \"duck typing\" is I guess a kind of extreme. The first works to enable context-dependent equality: i.e. in some specific context, we can use a looser notion of equality; the second one works toward equal for \"all intents and purposes\". Additional strategies could probably be found in each of those categories though. I could see something like neural net recognizers being used for more flexible equivalence definitions as being in the equal for all intents and purposes category, for example."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Deferred / partial / placeholder definitions. It seems like a big part of how we deal with ambiguity when learning things is something like: we come across a term/concept that we don't understand while reading something\u2014and it's not a problem. We just invent a unique placeholder symbol for that thing and accumulate multiple tentative definitions which each gain or lose support as you learn more. The 'placeholder' symbol in our minds has something like a tentativeness value associated to it: we can keep using the symbol, but we take into account the uncertainty of its meaning/value."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "50b21fc3-7685-4a18-a7ba-837c06cf4f2e",
        "type": "message",
        "text": "The only programming systems I can imagine using those concepts in a very deep way would have to depend on some kind of backtracking behavior though: trying out multiple routes in attempt to sort out the ambiguity automatically.",
        "user": "USJ899UUD",
        "ts": "1579248892.021800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EH7rx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The only programming systems I can imagine using those concepts in a very deep way would have to depend on some kind of backtracking behavior though: trying out multiple routes in attempt to sort out the ambiguity automatically."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "c13cdaee-d8d6-4e3f-b7ce-59bf97caaedd",
        "type": "message",
        "text": "I have generally accepted that I won't be allowed in to the US any more after filling my Twitter with anti-imperialist rants :smile:",
        "user": "UE6EFEPTQ",
        "ts": "1579251423.022600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WLf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have generally accepted that I won't be allowed in to the US any more after filling my Twitter with anti-imperialist rants "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579239299.000900"
    },
    {
        "client_msg_id": "76803DD6-0C93-4884-831B-AF52D08667EE",
        "type": "message",
        "text": "You should hop over to <#CC2JRGVLK|introductions> and tell us about yourself!",
        "user": "UC2A2ARPT",
        "ts": "1579275891.023400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NmE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You should hop over to "
                            },
                            {
                                "type": "channel",
                                "channel_id": "CC2JRGVLK"
                            },
                            {
                                "type": "text",
                                "text": " and tell us about yourself!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579243006.021200",
        "parent_user_id": "USS2RKB7W"
    },
    {
        "client_msg_id": "b293fe71-70f9-45e2-a451-5dc2380b4edc",
        "type": "message",
        "text": "This looks neat: <https://github.com/microsoft/verona>\n\nFrom Microsoft Research",
        "user": "UGLSY9X3J",
        "ts": "1579276526.023800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XDFuG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This looks neat: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/microsoft/verona"
                            },
                            {
                                "type": "text",
                                "text": "\n\nFrom Microsoft Research"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579276526.023800",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1579280342.024700",
        "reply_users": [
            "ULM3U6275"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "open_mouth",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0D636147-2A48-4F9C-A077-90A844568F0A",
        "type": "message",
        "text": "I wonder why they didn\u2019t use actors.",
        "user": "ULM3U6275",
        "ts": "1579280342.024700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1579281211.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VSY+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wonder why they didn\u2019t use actors."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579276526.023800",
        "parent_user_id": "UGLSY9X3J"
    },
    {
        "client_msg_id": "f17f8ff5-61e7-4524-a47f-42f6c1508157",
        "type": "message",
        "text": "Hi and thank you both!\n\nHi <@U5STGTB3J>! Part of my reasoning in \"Winter is Coding\" - which I kind of rush through - is that a lot of the work in Xerox PARC I saw as setting one possible foundation for how cognitive science maps into natural UIs for programming (the whole 'doing with images makes symbols' bit.) I also am personally just very interested in the nervous system - it feels very 'topical' to 2020 [just wrote 2019!] and this moment in time. But I do wonder if there's something there for you, that you've seen or is otherwise of interest.\n\nI hope we can engage more!",
        "user": "UGMH4H202",
        "ts": "1579288300.025100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Oh5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi and thank you both!\n\nHi "
                            },
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": "! Part of my reasoning in \"Winter is Coding\" - which I kind of rush through - is that a lot of the work in Xerox PARC I saw as setting one possible foundation for how cognitive science maps into natural UIs for programming (the whole 'doing with images makes symbols' bit.) I also am personally just very interested in the nervous system - it feels very 'topical' to 2020 [just wrote 2019!] and this moment in time. But I do wonder if there's something there for you, that you've seen or is otherwise of interest.\n\nI hope we can engage more!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579128538.206100",
        "parent_user_id": "UGMH4H202",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5STGTB3J"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "fde6fa18-f0c1-45e6-a15b-1d808025bcf3",
        "type": "message",
        "text": "The precise gear like fittings required are also a problem when building things. Say if I have a Point object from one library that I connect to a Canvas from another library (either via direct manipulation or code). The interfaces must match *precisely* (same language, same field names) for it to even work, otherwise it is a total failure. But consider how there are only a few ways that the Point shape could even 'fit' with a Canvas like object. The Point has two fields which are single dimensional each. The canvas has at least two dimensions + maybe color. I have to precisely hand code the mapping, but it seems like the system could provide some obvious mappings for me instead and let me choose? The current models of composition are mostly 'gear like tight' or nothing. Maybe we need some models of composition that incorporate some kind of negotiation? What does this interplay look like?",
        "user": "U8A5MS6R1",
        "ts": "1579289862.025300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Va4q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The precise gear like fittings required are also a problem when building things. Say if I have a Point object from one library that I connect to a Canvas from another library (either via direct manipulation or code). The interfaces must match "
                            },
                            {
                                "type": "text",
                                "text": "precisely",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (same language, same field names) for it to even work, otherwise it is a total failure. But consider how there are only a few ways that the Point shape could even 'fit' with a Canvas like object. The Point has two fields which are single dimensional each. The canvas has at least two dimensions + maybe color. I have to precisely hand code the mapping, but it seems like the system could provide some obvious mappings for me instead and let me choose? The current models of composition are mostly 'gear like tight' or nothing. Maybe we need some models of composition that incorporate some kind of negotiation? What does this interplay look like?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UCKRZS3DZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "B830E0B1-DDCD-441D-B557-AA8A41C9C2B5",
        "type": "message",
        "text": "<@U5STGTB3J> \u201cSometimes I wonder if that \u201clet\u2019s make everything more explicit\u201d solution was maybe not the best one and we should\u2019ve thought more into the opposite direction, about how we can keep the ambiguity, but figure out better ways to deal with it.\u201d\n\nI agree. An example that comes to mind is the use of constructors and immutable objects by people obsessed with objects never being in an invalid state. I\u2019ve found it much easier to have classes that you instantiate and then call a few configuration methods to get them into a valid state than ones that attempt to have a constructor for each of the combinatorial explosion of valid initial configuration states. Much better to have an object that can report what\u2019s wrong with its state. \n\n\n",
        "user": "ULM3U6275",
        "ts": "1579297640.036300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1PRq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " \u201cSometimes I wonder if that \u201clet\u2019s make everything more explicit\u201d solution was maybe not the best one and we should\u2019ve thought more into the opposite direction, about how we can keep the ambiguity, but figure out better ways to deal with it.\u201d\n\n"
                            },
                            {
                                "type": "text",
                                "text": "I agree. An example that comes to mind is the use of constructors and immutable objects by people obsessed with objects never being in an invalid state. I\u2019ve found it much easier to have classes that you instantiate and then call a few configuration methods to get them into a valid state than ones that attempt to have a constructor for each of the combinatorial explosion of valid initial configuration states. Much better to have an object that can report what\u2019s wrong with its state. \n"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "bd647f6e-f31e-47e4-8982-83ebba28758b",
        "type": "message",
        "text": "Hi all, I\u2019m Ben Wheeler. I work at Scratch as a developer and educator. Excited to hear what this community is up to!",
        "user": "USF232R18",
        "ts": "1579300289.037700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p/s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi all, I\u2019m Ben Wheeler. I work at Scratch as a developer and educator. Excited to hear what this community is up to!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579300289.037700",
        "reply_count": 21,
        "reply_users_count": 5,
        "latest_reply": "1579632026.235100",
        "reply_users": [
            "UQPHR6Y3S",
            "UA14TGLTC",
            "USF232R18",
            "UJ6LDMMN0",
            "URMEM88JG"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "wave",
                "users": [
                    "USJ899UUD",
                    "UGMH4H202",
                    "UC2A2ARPT",
                    "UQPHR6Y3S",
                    "UA14TGLTC",
                    "UJ6LDMMN0"
                ],
                "count": 6
            }
        ]
    },
    {
        "client_msg_id": "c1075c38-8832-4027-856a-6f55fb702c5b",
        "type": "message",
        "text": "<@USF232R18> do you work with Christopher Willis-Ford ?",
        "user": "UHDQ62M4P",
        "ts": "1579301715.038000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R8q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "USF232R18"
                            },
                            {
                                "type": "text",
                                "text": " do you work with Christopher Willis-Ford ?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579301715.038000",
        "reply_count": 6,
        "reply_users_count": 2,
        "latest_reply": "1579367883.077400",
        "reply_users": [
            "USF232R18",
            "UHDQ62M4P"
        ],
        "subscribed": false
    }
]