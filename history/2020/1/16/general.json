[
    {
        "client_msg_id": "6701AE06-E57E-42A4-B3C2-A333BB045C49",
        "type": "message",
        "text": "i will never stop sharing this video about coding with an xbox controller: <http://symbolflux.com/projects/tiledtext|http://symbolflux.com/projects/tiledtext>",
        "user": "UHWC9PXBL",
        "ts": "1579133407.207300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=fkxy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i will never stop sharing this video about coding with an xbox controller: "
                            },
                            {
                                "type": "link",
                                "url": "http://symbolflux.com/projects/tiledtext",
                                "text": "http://symbolflux.com/projects/tiledtext"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "0532F5FA-5C70-4B78-A8F0-AB4C9426AB31",
        "type": "message",
        "text": "youtube video: <https://youtu.be/tztmgCcZaM4|https://youtu.be/tztmgCcZaM4>",
        "user": "UHWC9PXBL",
        "ts": "1579133433.207600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Tiled Text Engine Demo",
                "title_link": "https://youtu.be/tztmgCcZaM4",
                "author_name": "Weston Beecroft",
                "author_link": "https://www.youtube.com/user/someonecb",
                "thumb_url": "https://i.ytimg.com/vi/tztmgCcZaM4/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Tiled Text Engine Demo",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/tztmgCcZaM4?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/tztmgCcZaM4",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/tztmgCcZaM4"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U62",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "youtube video: "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/tztmgCcZaM4",
                                "text": "https://youtu.be/tztmgCcZaM4"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UD31LGQKB"
                ],
                "count": 1
            },
            {
                "name": "grinning",
                "users": [
                    "UEQ7QL15F"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "036dc3d5-26ad-4e15-813c-9b2c3e8f82f2",
        "type": "message",
        "text": "urbit and anytype look interesting",
        "user": "URV7B2542",
        "ts": "1579134503.207900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t0k/E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "urbit and anytype look interesting"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579117351.198800",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "BBA1B34A-3C1B-4342-9227-846C6625E36E",
        "type": "message",
        "text": "programming can, should, and must feel like a video game. if your system doesn\u2019t create a flow state as a side effect of expertise, it\u2019s neither learnable nor accessible. direct manipulation refers to domain objects\u2014programs/asts or domain models, not text, forms, or other abstractions over interaction. the primary purpose of programming is to build environments people can thrive, socialize, and accomplish tasks in",
        "user": "UHWC9PXBL",
        "ts": "1579136404.212200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9mI4W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "programming can, should, and must feel like a video game. if your system doesn\u2019t create a flow state as a side effect of expertise, it\u2019s neither learnable nor accessible. direct manipulation refers to domain objects\u2014programs/asts or domain models, not text, forms, or other abstractions over interaction. the primary purpose of programming is to build environments people can thrive, socialize, and accomplish tasks in"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ",
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UE6EFEPTQ",
                    "UKASUGYL8"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "D5F90964-206C-443A-9D83-D0496BC7F521",
        "type": "message",
        "text": "pattern matching and parsers like OMeta can address most programming problems and could be visual/direct manipulation interfaces",
        "user": "UHWC9PXBL",
        "ts": "1579136594.214500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uLasS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "pattern matching and parsers like OMeta can address most programming problems and could be visual/direct manipulation interfaces"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "DFEA983A-9DC3-43CF-8593-90E2E9ED98EE",
        "type": "message",
        "text": "would looooove to know the purchase price ",
        "user": "UHWC9PXBL",
        "ts": "1579136945.215300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vLH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "would looooove to know the purchase price "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579104076.197800",
        "parent_user_id": "UF5PAGQQ4"
    },
    {
        "client_msg_id": "9C90C024-A884-40F8-B2A0-69AB21F62458",
        "type": "message",
        "text": "love the title. love the blog post. excited to read the pdf later this week. initially reminds me of this tweet i saw today: <https://twitter.com/rainmaker1973/status/972581494806994945?s=12|https://twitter.com/rainmaker1973/status/972581494806994945?s=12>",
        "user": "UHWC9PXBL",
        "ts": "1579137410.216700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/Rainmaker1973|@Rainmaker1973>: How a book written in 1910 could teach you calculus better than several books of today [Calculus Made Easy, 1910] <http://bit.ly/2pThkf1> <https://pbs.twimg.com/media/DX9NshPXcAAWXOl.jpg>",
                "ts": 1520716472,
                "author_name": "Massimo",
                "author_link": "https://twitter.com/Rainmaker1973/status/972581494806994945",
                "author_icon": "https://pbs.twimg.com/profile_images/914888589670043654/KVvwjcWA_normal.jpg",
                "author_subname": "@Rainmaker1973",
                "text": "How a book written in 1910 could teach you calculus better than several books of today [Calculus Made Easy, 1910] <http://bit.ly/2pThkf1> <https://pbs.twimg.com/media/DX9NshPXcAAWXOl.jpg>",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/rainmaker1973/status/972581494806994945?s=12",
                "image_url": "https://pbs.twimg.com/media/DX9NshPXcAAWXOl.jpg",
                "image_width": 1200,
                "image_height": 772,
                "image_bytes": 198127,
                "id": 1,
                "original_url": "https://twitter.com/rainmaker1973/status/972581494806994945?s=12",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Lo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "love the title. love the blog post. excited to read the pdf later this week. initially reminds me of this tweet i saw today: "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/rainmaker1973/status/972581494806994945?s=12",
                                "text": "https://twitter.com/rainmaker1973/status/972581494806994945?s=12"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579128538.206100",
        "parent_user_id": "UGMH4H202",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKASUGYL8",
                    "UFLN9JFRT",
                    "URKL31C2J",
                    "UP7SQ8KT3"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "BD461322-55E6-4D5F-9A7C-CFC63AADF124",
        "type": "message",
        "text": "Can\u2019t help but find your approach trying to connect UI/UX to how humans think a very promising one. I got really excited when I started reading the blog post, thinking, \u201ccan this possibly go the same direction I\u2019m thinking about?\u201d, but then you drift off specializing on the nervous system and the freeze response. Which makes it even more exciting, as we probably have stuff to talk about\u2026\n\nI\u2019m looking at categorization and research in idealized cognitive models to draw parallels to what people (want to) do with computers. Currently, programmers clearly favor a symbolic approach, which requires learning abstract categories and concepts that are hard to pick up by end users, who just don\u2019t want to put in the time to learn all that. UIs use metaphors and other structures to make computers more accessible. I think there is tremendous potential to take what we know about metaphorical structuring, metonymy, kinesthetic image schemas, etc. and see how we can take advantage of these in UI. Ideally, we\u2019ll massively reduce the learning curve as the right metaphors \u201cjust click\u201d with users as they leverage fundamental patterns of how we think.\n\nI\u2019ve started to write about, hoping to get more technical people interested in that domain and trying to make the research more accessible to us programmers: \n<https://stefan-lesser.com/2019/12/06/structure-and-behavior/|https://stefan-lesser.com/2019/12/06/structure-and-behavior/>\n\nI think we\u2019re very similar in approach (leveraging neuro-science) and found different areas in that huge domain to focus on. Would love to compare notes and see how this all fits together.",
        "user": "U5STGTB3J",
        "ts": "1579160905.234500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "leo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Can\u2019t help but find your approach trying to connect UI/UX to how humans think a very promising one. I got really excited when I started reading the blog post, thinking, \u201ccan this possibly go the same direction I\u2019m thinking about?\u201d, but then you drift off specializing on the nervous system and the freeze response. Which makes it even more exciting, as we probably have stuff to talk about\u2026\n\nI\u2019m looking at categorization and research in idealized cognitive models to draw parallels to what people (want to) do with computers. Currently, programmers clearly favor a symbolic approach, which requires learning abstract categories and concepts that are hard to pick up by end users, who just don\u2019t want to put in the time to learn all that. UIs use metaphors and other structures to make computers more accessible. I think there is tremendous potential to take what we know about metaphorical structuring, metonymy, kinesthetic image schemas, etc. and see how we can take advantage of these in UI. Ideally, we\u2019ll massively reduce the learning curve as the right metaphors \u201cjust click\u201d with users as they leverage fundamental patterns of how we think.\n\nI\u2019ve started to write about, hoping to get more technical people interested in that domain and trying to make the research more accessible to us programmers: \n"
                            },
                            {
                                "type": "link",
                                "url": "https://stefan-lesser.com/2019/12/06/structure-and-behavior/",
                                "text": "https://stefan-lesser.com/2019/12/06/structure-and-behavior/"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "I think we\u2019re very similar in approach (leveraging neuro-science) and found different areas in that huge domain to focus on. Would love to compare notes and see how this all fits together."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579128538.206100",
        "parent_user_id": "UGMH4H202"
    },
    {
        "client_msg_id": "a58e8277-ee66-4514-8e62-c32d20b70dc2",
        "type": "message",
        "text": "<@UMYKGHYBA> <@USJ899UUD> <@UEQ6M68H0> <@UGMH4H202> could you reply here or send me a DM with a link you would like me to use to link to your profile/personal page/twitter account when I mention you in the newsletter?",
        "user": "UBN9AFS0N",
        "ts": "1579165094.235900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dC2F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UMYKGHYBA"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "USJ899UUD"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UGMH4H202"
                            },
                            {
                                "type": "text",
                                "text": " could you reply here or send me a DM with a link you would like me to use to link to your profile/personal page/twitter account when I mention you in the newsletter?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579165094.235900",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1579169781.237000",
        "reply_users": [
            "UMYKGHYBA",
            "USJ899UUD"
        ],
        "subscribed": true,
        "last_read": "1579169781.237000",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e0a97fbe-381e-45b9-a98f-391b3db7b2a4",
        "type": "message",
        "text": "<https://twitter.com/mdubakov>",
        "user": "UMYKGHYBA",
        "ts": "1579165196.236000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Michael Dubakov (@mdubakov) | Twitter",
                "title_link": "https://twitter.com/mdubakov",
                "text": "The latest Tweets from Michael Dubakov (@mdubakov). Founder at @fibery_io. Tweet about product management, systems, software development and business. Minsk, Belarus",
                "fallback": "Michael Dubakov (@mdubakov) | Twitter",
                "from_url": "https://twitter.com/mdubakov",
                "service_icon": "https://abs.twimg.com/icons/apple-touch-icon-192x192.png",
                "service_name": "twitter.com",
                "id": 1,
                "original_url": "https://twitter.com/mdubakov"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0aZcs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://twitter.com/mdubakov"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579165094.235900",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1::skin-tone-4",
                "users": [
                    "UBN9AFS0N"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b07108e2-d71d-4db3-87a7-bc6b002ba070",
        "type": "message",
        "text": "Hi Ivan can you tell a bit why you think it is great?",
        "user": "UJFN50C00",
        "ts": "1579165228.236300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1O1w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi Ivan can you tell a bit why you think it is great?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579117463.201200",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "259a6736-81f1-4ac0-98be-53f18bc7dbcb",
        "type": "message",
        "text": "The biggest use case for dhall is kubernetes: <https://github.com/dhall-lang/dhall-kubernetes> Kubernetes configs tend to get really large and repetitive. Here, Dhall's strenghts lie: Lambda abstractions allow you to not repeat yourself and static types guarantee you're not mixing something up.\n\nUnfortunately it's hard to know the exact usecases, as I've mostly heard of companies using it internally. There are some open-source usecases, but you could argue they're the 'nerdy' ones: the now de-facto standard package manager for purescript, spago, uses dhall for configuration (dependencies, package sets): <https://github.com/dhall-lang/dhall-kubernetes>, from a usecase perspective it would be possible to replace nix's expression language with dhall, although that is not practical at all anymore. There exists a dhall-to-nix translator, though: <https://github.com/dhall-lang/dhall-haskell/tree/master/dhall-nix>. And if you want, before haskell cabal's 'common stanzas' were implemented, you could get rid of duplication in your .cabal files via writing your config in dhall and converting it with dhall-to-cabal: <https://github.com/dhall-lang/dhall-to-cabal>\n\nI have to admit, I'm interested in dhall mostly because I'm nerdy as well :wink: I really like the language design, it's clean, minimal, but powerful. However, Dhalls creator, Gabriel Gonzales is well aware of us 'nerds' (he uses the \"Crossing the Chasm\"-vocabulary and calls these early-adopters) and instead tries to think deeply about what satisfies 'mainstream programmers' in contrast to us nerds.",
        "user": "UFZFETUH1",
        "ts": "1579169591.236800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aIfd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The biggest use case for dhall is kubernetes: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/dhall-lang/dhall-kubernetes"
                            },
                            {
                                "type": "text",
                                "text": " Kubernetes configs tend to get really large and repetitive. Here, Dhall's strenghts lie: Lambda abstractions allow you to not repeat yourself and static types guarantee you're not mixing something up.\n\nUnfortunately it's hard to know the exact usecases, as I've mostly heard of companies using it internally. There are some open-source usecases, but you could argue they're the 'nerdy' ones: the now de-facto standard package manager for purescript, spago, uses dhall for configuration (dependencies, package sets): "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/dhall-lang/dhall-kubernetes"
                            },
                            {
                                "type": "text",
                                "text": ", from a usecase perspective it would be possible to replace nix's expression language with dhall, although that is not practical at all anymore. There exists a dhall-to-nix translator, though: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/dhall-lang/dhall-haskell/tree/master/dhall-nix"
                            },
                            {
                                "type": "text",
                                "text": ". And if you want, before haskell cabal's 'common stanzas' were implemented, you could get rid of duplication in your .cabal files via writing your config in dhall and converting it with dhall-to-cabal: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/dhall-lang/dhall-to-cabal"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI have to admit, I'm interested in dhall mostly because I'm nerdy as well "
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            },
                            {
                                "type": "text",
                                "text": " I really like the language design, it's clean, minimal, but powerful. However, Dhalls creator, Gabriel Gonzales is well aware of us 'nerds' (he uses the \"Crossing the Chasm\"-vocabulary and calls these early-adopters) and instead tries to think deeply about what satisfies 'mainstream programmers' in contrast to us nerds."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579084874.196600",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "nerd_face",
                "users": [
                    "UD3AK9JRF"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ad01c8a6-fe5a-4f1d-835e-4fc5c862a7d0",
        "type": "message",
        "text": "<https://twitter.com/Westoncb>",
        "user": "USJ899UUD",
        "ts": "1579169781.237000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Weston Beecroft (@Westoncb) | Twitter",
                "title_link": "https://twitter.com/Westoncb",
                "text": "The latest Tweets from Weston Beecroft (@Westoncb). Building some weird software at <https://t.co/pwAk8DGBA0> | Here to constrain the design space and inflate your res cogitans. Tucson, AZ",
                "fallback": "Weston Beecroft (@Westoncb) | Twitter",
                "from_url": "https://twitter.com/Westoncb",
                "service_icon": "https://abs.twimg.com/icons/apple-touch-icon-192x192.png",
                "service_name": "twitter.com",
                "id": 1,
                "original_url": "https://twitter.com/Westoncb"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "37P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://twitter.com/Westoncb"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579165094.235900",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1::skin-tone-4",
                "users": [
                    "UBN9AFS0N"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3fc4860f-45a3-4af0-b2ba-d890402716f2",
        "type": "message",
        "text": "Visual Calculations in the Shape Machine\n&gt; What does it mean to have a new modeling software for design that allows scientists, engineers and designers to specify their actions by drawing shapes rather than by writing scripts? What is the difference between a shape you see and the way it is currently recorded in the database of your computer? What does it mean to program with shapes?\n<https://shape.design.gatech.edu/Machine/index2.html>",
        "user": "U5STGTB3J",
        "ts": "1579192184.238000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tOTtr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Visual Calculations in the Shape Machine\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What does it mean to have a new modeling software for design that allows scientists, engineers and designers to specify their actions by drawing shapes rather than by writing scripts? What is the difference between a shape you see and the way it is currently recorded in the database of your computer? What does it mean to program with shapes?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://shape.design.gatech.edu/Machine/index2.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "alien",
                "users": [
                    "UJN1TAYEQ"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "105d9978-9c8a-457c-a205-078fe5af80c9",
        "type": "message",
        "text": "I was in my early teens at the time of the Netscape saga, so looking back at the events transpiring then and relating them to my personal experience of the early web was a powerful stab of nostalgia.",
        "user": "UC2A2ARPT",
        "ts": "1579197125.238100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1579197337.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pjbzw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was in my early teens at the time of the Netscape saga, so looking back at the events transpiring then and relating them to my personal experience of the early web was a powerful stab of nostalgia."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579117463.201200",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "98fe5477-524b-436d-a956-d07e97af90d9",
        "type": "message",
        "text": "I've heard the Netscape story from a few different places. I liked this documentary because it made the events seem more concrete. Other recounts, like the (excellent) Internet History Podcast, felt a little more detached and encyclopedic rather than personal and immediate.",
        "user": "UC2A2ARPT",
        "ts": "1579197204.238300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PsnZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've heard the Netscape story from a few different places. I liked this documentary because it made the events seem more concrete. Other recounts, like the (excellent) Internet History Podcast, felt a little more detached and encyclopedic rather than personal and immediate."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579117463.201200",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "abbb7323-cbec-401a-85d2-946051973c36",
        "type": "message",
        "text": "Watching this documentary, I could imagine myself being there. I've gone through similar things.",
        "user": "UC2A2ARPT",
        "ts": "1579197247.238500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Laxc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Watching this documentary, I could imagine myself being there. I've gone through similar things."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579117463.201200",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "604d9b8e-fdee-4901-aad0-4c4a263e4675",
        "type": "message",
        "text": "So not \"great\" in the sense of (umm) Waiting for Godot or Black Saint &amp; The Sinner Lady, but \"great\" in the sense of _hell yeah_.",
        "user": "UC2A2ARPT",
        "ts": "1579197293.238700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G5kxn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So not \"great\" in the sense of (umm) Waiting for Godot or Black Saint & The Sinner Lady, but \"great\" in the sense of "
                            },
                            {
                                "type": "text",
                                "text": "hell yeah",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579117463.201200",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "5c9fc680-cf44-4528-85bc-efb381a8c362",
        "type": "message",
        "text": "Cross-post from <#C5U3SEW6A|random> because I believe it to be on-topic for FoC. The slack message has a good discussion thread going, too \u2014 don't miss that.\n\n<https://futureofcoding.slack.com/archives/C5U3SEW6A/p1579153117205300>",
        "user": "UC2A2ARPT",
        "ts": "1579206429.240000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1579206518.000000"
        },
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1579153117205300",
                "fallback": "[January 15th, 2020 9:38 PM] ak: I just wrote <https://lobste.rs/s/6gzmym/static_types_are_dangerously#c_9lzbuq>\n\nA couple of crazy ideas on types:\n\n1. The Right Way is for product types to be nominative and sum types to be structural.\n\n2. Maybe we need tags for product types as well? Then unify types on the names not of types but of their constituent tags, whether sums or products.\n\ne.g. `Foo` and `Bar` can be automatically coerced in:\n\n```type Foo = A int * B boolean\ntype Bar = A int * B boolean```",
                "ts": "1579153117.205300",
                "author_id": "UCUSW7WVD",
                "author_subname": "Kartik Agaram",
                "channel_id": "C5U3SEW6A",
                "channel_name": "random",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "I just wrote <https://lobste.rs/s/6gzmym/static_types_are_dangerously#c_9lzbuq>\n\nA couple of crazy ideas on types:\n\n1. The Right Way is for product types to be nominative and sum types to be structural.\n\n2. Maybe we need tags for product types as well? Then unify types on the names not of types but of their constituent tags, whether sums or products.\n\ne.g. `Foo` and `Bar` can be automatically coerced in:\n\n```type Foo = A int * B boolean\ntype Bar = A int * B boolean```",
                "author_name": "Kartik Agaram",
                "author_link": "https://futureofcoding.slack.com/team/UCUSW7WVD",
                "author_icon": "https://avatars.slack-edge.com/2019-07-14/687915485201_6e649a383cf8f9e366e3_48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1579153117205300",
                "footer": "Thread in #random"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nrB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cross-post from "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C5U3SEW6A"
                            },
                            {
                                "type": "text",
                                "text": " because I believe it to be on-topic for FoC. The slack message has a good discussion thread going, too \u2014 don't miss that.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1579153117205300"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UE6EFEPTQ",
                    "U7C7B75R6"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "c8eeec60-a312-4fe5-bacb-55ad08f1193d",
        "type": "message",
        "text": "I forgot to mention, it takes a fair bit of time to actually come up with principles, but it's such a worthwhile exercise. It took me about 6 months of very intense exploration/research to come up with my \"mental models\" principle, but it's informed everything I've been working on since.",
        "user": "UG0EL18H3",
        "ts": "1579206966.240500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "brL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I forgot to mention, it takes a fair bit of time to actually come up with principles, but it's such a worthwhile exercise. It took me about 6 months of very intense exploration/research to come up with my \"mental models\" principle, but it's informed everything I've been working on since."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "452ec5e6-e360-4afa-bded-9d28057eebf0",
        "type": "message",
        "text": "The simplest way I've found is to just start with a statement about something you want to do that really resonates with you (e.g.: \"i want to make programming easier\") and keep asking \"why?\" over and over again. At the end of the chain of questioning, you will get to a principle.",
        "user": "UG0EL18H3",
        "ts": "1579207093.240700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bbWk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The simplest way I've found is to just start with a statement about something you want to do that really resonates with you (e.g.: \"i want to make programming easier\") and keep asking \"why?\" over and over again. At the end of the chain of questioning, you will get to a principle."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "fc36c827-abd1-41ae-9f98-2649e4f93d21",
        "type": "message",
        "text": "<@UG0EL18H3> :thumbsup::skin-tone-3: that was something I learned in ThoughtWork",
        "user": "UE6EFEPTQ",
        "ts": "1579208693.241900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jBuQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UG0EL18H3"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "thumbsup",
                                "skin_tone": 3
                            },
                            {
                                "type": "text",
                                "text": " that was something I learned in ThoughtWork"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "There's a lot of good discussion in this thread, so I'd like to \"bump\" it again in the main channel to get anyone that missed it the first time around. I won't say who I'm hoping will respond, but will \"bump\" them directly if they don't! :smile:",
        "user": "UE6EFEPTQ",
        "ts": "1579208697.242100",
        "thread_ts": "1578910495.160600",
        "root": {
            "client_msg_id": "e55a2997-3239-48f9-8d69-b65d3d9aef8c",
            "type": "message",
            "text": "Hi, fellow innovator (yes, you!). I'm interested in your driving principles for the work you do in the future of programming/coding.\n\nFor example, \"state and i/o are bad/good\", \"text is bad/good\", \"always allow explorable explanations\", \"programmer must always see the data changing when the code changes\", \"anything else Bret Victor thinks\", \"don't allow syntax errors\", \"programming is about modelling the world\", \"it's time to break the programmer|corporate|etc priesthood!!\", \"declarative not imperative\", \"eliminate accidental complexity\", \"flappy bird in 10 lines\"..\n\nWhat are the fundamental principles you always look to (and have always held to, looking back) when making any technical or design decision, even if only subconsciously?",
            "user": "UE6EFEPTQ",
            "ts": "1578910495.160600",
            "team": "T5TCAFTA9",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "KCo6k",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Hi, fellow innovator (yes, you!). I'm interested in your driving principles for the work you do in the future of programming/coding.\n\nFor example, \"state and i/o are bad/good\", \"text is bad/good\", \"always allow explorable explanations\", \"programmer must always see the data changing when the code changes\", \"anything else Bret Victor thinks\", \"don't allow syntax errors\", \"programming is about modelling the world\", \"it's time to break the programmer|corporate|etc priesthood!!\", \"declarative not imperative\", \"eliminate accidental complexity\", \"flappy bird in 10 lines\"..\n\nWhat are the fundamental principles you always look to (and have always held to, looking back) when making any technical or design decision, even if only subconsciously?"
                                }
                            ]
                        }
                    ]
                }
            ],
            "thread_ts": "1578910495.160600",
            "reply_count": 35,
            "reply_users_count": 12,
            "latest_reply": "1579211469.244000",
            "reply_users": [
                "UE6EFEPTQ",
                "UBN9AFS0N",
                "UKFNXF0F9",
                "UNBPP291C",
                "UKDM3GLAJ",
                "ULM3U6275",
                "UG0EL18H3",
                "UL3CJ7YKC",
                "U8A5MS6R1",
                "UMWF81HTP",
                "UHWC9PXBL",
                "U6KQ2S410"
            ],
            "subscribed": true,
            "last_read": "1579211469.244000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oN0N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's a lot of good discussion in this thread, so I'd like to \"bump\" it again in the main channel to get anyone that missed it the first time around. I won't say who I'm hoping will respond, but will \"bump\" them directly if they don't! "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "9a0556ca-da86-4cad-a7f0-d07e2ce0cfc1",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKASUGYL8"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "de3907ac-009d-4e08-9e6f-8c3827c7f3ef",
        "type": "message",
        "text": "My principle: minimize the reference manual. Think about precisely describing how your thing works. Design it to minimize the number of pages it takes to explain it, and minimize the prerequisites to understanding it (particularly mathematical sophistication). A consequence of this principle is that you should be writing the reference manual as you design.",
        "user": "U6KQ2S410",
        "ts": "1579209478.242500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Arh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My principle: minimize the reference manual. Think about precisely describing how your thing works. Design it to minimize the number of pages it takes to explain it, and minimize the prerequisites to understanding it (particularly mathematical sophistication). A consequence of this principle is that you should be writing the reference manual as you design."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "33144de8-7704-4a99-8ff8-a6a63ab49251",
        "type": "message",
        "text": "\u2191 Yay! You responded!!",
        "user": "UE6EFEPTQ",
        "ts": "1579209675.242700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b1p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\u2191 Yay! You responded!!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "8c3082d8-97e4-41cf-ae7c-104a5c5c5ab1",
        "type": "message",
        "text": "An extreme version of that is \"README-Driven Development\": Write the README then make it so.",
        "user": "UE6EFEPTQ",
        "ts": "1579209787.242900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jKg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "An extreme version of that is \"README-Driven Development\": Write the README then make it so."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "53f1ff85-5d80-44c0-bed4-c691803d166e",
        "type": "message",
        "text": "You only have _one_ principle? I'm surprised",
        "user": "UE6EFEPTQ",
        "ts": "1579209815.243100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WfSc/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You only have "
                            },
                            {
                                "type": "text",
                                "text": "one",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " principle? I'm surprised"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "03cd6b6f-86e8-4319-a251-6a8e236f59f4",
        "type": "message",
        "text": "You want principles? I got lots. Here is from the intro to Subtext:\n\nSubtext tries to be simple, transparent, and informal:\n1. Simple \u2014 easy to learn and easy to use.\n2. Transparent \u2014 the history of user interaction and program execution are visible in complete detail.\n3. Informal \u2014 doesn\u2019t require abstraction, premeditation, or mathematical/computational thinking.\n\nSubtext rejects:\n1. Low level, high performance, or large scale software \u2014 being extreme in any dimension.\n2. Requiring knowledge of existing software technology and practices beyond using a browser.\n3. Appealing to the tastes of professional programmers or computer scientists.",
        "user": "U6KQ2S410",
        "ts": "1579210624.243400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pnD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You want principles? I got lots. Here is from the intro to Subtext:\n\nSubtext tries to be simple, transparent, and informal:\n1. Simple \u2014 easy to learn and easy to use.\n2. Transparent \u2014 the history of user interaction and program execution are visible in complete detail.\n3. Informal \u2014 doesn\u2019t require abstraction, premeditation, or mathematical/computational thinking.\n\nSubtext rejects:\n1. Low level, high performance, or large scale software \u2014 being extreme in any dimension.\n2. Requiring knowledge of existing software technology and practices beyond using a browser.\n3. Appealing to the tastes of professional programmers or computer scientists."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ",
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UE6EFEPTQ"
                ],
                "count": 1
            },
            {
                "name": "upside_down_face",
                "users": [
                    "UE6EFEPTQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d092cf01-44d9-4294-9aa5-d011aa916998",
        "type": "message",
        "text": "<@U6KQ2S410> I have a similar principle which is that if I'm giving a demo or explaning the thing and I have to stop to clarify something, next time I should do a change that doesn't require the clarification.",
        "user": "UBN9AFS0N",
        "ts": "1579211356.243800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5H9yO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " I have a similar principle which is that if I'm giving a demo or explaning the thing and I have to stop to clarify something, next time I should do a change that doesn't require the clarification."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U6KQ2S410"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "64960491-e59c-414f-954b-10c77da74e18",
        "type": "message",
        "text": "a simpler rule is to check for superfluous steps in demos and think if I can remove them from the common path",
        "user": "UBN9AFS0N",
        "ts": "1579211469.244000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1579214554.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VX9LW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a simpler rule is to check for superfluous steps in demos and think if I can remove them from the common path"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "031286a3-9e6e-46a0-843c-b285243169e0",
        "type": "message",
        "text": "I've been reading back over <@U6KQ2S410>\u2019s Tweets and realise that he's not copying them all over to here. Which is a shame as they're often very challenging, and challenge at the heart of what we're up to in this community.\n\nSo I may start to do that for him..\n\nHere are some of my favourite brain-/belief-aches from Jonathan recently:\n\n<https://twitter.com/jonathoda/status/1138881930399703041>\n<https://twitter.com/jonathoda/status/1191324879708151814>\n<https://twitter.com/jonathoda/status/1196533258315538435>\n<https://twitter.com/jonathoda/status/1203011336197869569>\n<https://twitter.com/jonathoda/status/1214598004625285121>\n<https://twitter.com/jonathoda/status/1215628334475939845>\n<https://twitter.com/jonathoda/status/1215655362986160130>\n<https://twitter.com/jonathoda/status/1217884632009576448>",
        "user": "UE6EFEPTQ",
        "ts": "1579212228.247100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1579264889.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=U5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been reading back over "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": "\u2019s Tweets and realise that he's not copying them all over to here. Which is a shame as they're often very challenging, and challenge at the heart of what we're up to in this community.\n\nSo I may start to do that for him..\n\nHere are some of my favourite brain-/belief-aches from Jonathan recently:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/jonathoda/status/1138881930399703041"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/jonathoda/status/1191324879708151814"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/jonathoda/status/1196533258315538435"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/jonathoda/status/1203011336197869569"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/jonathoda/status/1214598004625285121"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/jonathoda/status/1215628334475939845"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/jonathoda/status/1215655362986160130"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/jonathoda/status/1217884632009576448"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212228.247100",
        "reply_count": 5,
        "reply_users_count": 4,
        "latest_reply": "1579350329.073500",
        "reply_users": [
            "U6KQ2S410",
            "UE6EFEPTQ",
            "UJN1TAYEQ",
            "U5STGTB3J"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 2
            },
            {
                "name": "grin",
                "users": [
                    "UKASUGYL8"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3d99c9f6-20ae-427a-89aa-f132e81b2a2c",
        "type": "message",
        "text": "jonathoda as a service",
        "user": "U6KQ2S410",
        "ts": "1579212283.247200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cM0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "jonathoda as a service"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212228.247100",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "42b7747c-4fcc-41dc-b012-9654b774fb69",
        "type": "message",
        "text": ":smile:",
        "user": "UE6EFEPTQ",
        "ts": "1579212300.247500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oAN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212228.247100",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "965710b7-4915-45ff-9383-13e102aa2f5a",
        "type": "message",
        "text": "On \u201cmissing\u201d values, null and undefined aren\u2019t the same as an empty string. For example, if there\u2019s an object for a person\u2019s name that has a middle name field, does empty string mean 1) \u201cwe know that this person has no middle name\u201d, 2) \u201cwe don\u2019t know\u201d or 3) we haven\u2019t yet been asked or tried to input this\u201d? Another example is when you want an undefined attribute to inherit from some delegate. Empty string can\u2019t serve this purpose because it may mean \u201cwe know this value is an empty string\u201d instead of \u201cwe want this value to be inherited\u201d.",
        "user": "ULM3U6275",
        "ts": "1579212773.252900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1579212831.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Iazw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On \u201cmissing\u201d values, null and undefined aren\u2019t the same as an empty string. For example, if there\u2019s an object for a person\u2019s name that has a middle name field, does empty string mean 1) \u201cwe know that this person has no middle name\u201d, 2) \u201cwe don\u2019t know\u201d or 3) we haven\u2019t yet been asked or tried to input this\u201d? Another example is when you want an undefined attribute to inherit from some delegate. Empty string can\u2019t serve this purpose because it may mean \u201cwe know this value is an empty string\u201d instead of \u201cwe want this value to be inherited\u201d."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "reply_count": 27,
        "reply_users_count": 8,
        "latest_reply": "1579470293.187200",
        "reply_users": [
            "UE6EFEPTQ",
            "UC2A2ARPT",
            "U8A5MS6R1",
            "UJN1TAYEQ",
            "ULM3U6275",
            "USJ899UUD",
            "U5STGTB3J",
            "U7C7B75R6"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "f8f0c4ab-5ac9-4d2e-84e1-f44ee4a1ef50",
        "type": "message",
        "text": "the delegate thing isn't something covered in the Twitter thread AFAIR",
        "user": "UE6EFEPTQ",
        "ts": "1579212996.255300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oQgq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the delegate thing isn't something covered in the Twitter thread AFAIR"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "b2469686-4ea3-4ea0-9403-d7b5b4d0ecfd",
        "type": "message",
        "text": "There was a good Rich Hickey talk about this a little over a year ago, if memory serves. He critiqued the use of Maybe in Haskell to represent something that either has a non-empty value, or does not have a value, for the reasons stated. Can't remember which talk, but I can probably look it up if there's interest.",
        "user": "UC2A2ARPT",
        "ts": "1579212998.255600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1579213187.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TWu1/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There was a good Rich Hickey talk about this a little over a year ago, if memory serves. He critiqued the use of Maybe in Haskell to represent something that either has a non-empty value, or does not have a value, for the reasons stated. Can't remember which talk, but I can probably look it up if there's interest."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "2346c079-1c07-4970-94ea-5c04a11bba08",
        "type": "message",
        "text": "Unlike zero, which was invented very early in maths, how come we never needed the empty string until we started working with computers?\n\nThere could be one, two or fifty different reasons a value is missing - it depends on the problem domain. There is no universal understanding for how these reasons maps onto the empty string, null or any other undefined object that's provided.\n\nThe only right solution seems to be to have a domain specific enum for the missing reason, and use an empty string as the value.",
        "user": "U8A5MS6R1",
        "ts": "1579213041.255800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1579213337.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tIto",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Unlike zero, which was invented very early in maths, how come we never needed the empty string until we started working with computers?\n\nThere could be one, two or fifty different reasons a value is missing - it depends on the problem domain. There is no universal understanding for how these reasons maps onto the empty string, null or any other undefined object that's provided.\n\nThe only right solution seems to be to have a domain specific enum for the missing reason, and use an empty string as the value."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UCUSW7WVD",
                    "ULM3U6275",
                    "UNCP67JSK",
                    "UCKRZS3DZ"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "3fe7f412-0a38-4b35-b268-486b90f4fb95",
        "type": "message",
        "text": "I elaborate in this comment: <https://josjong.com/2017/10/16/null-vs-empty-strings-why-oracle-was-right-and-apple-is-not/#comment-79>",
        "user": "U8A5MS6R1",
        "ts": "1579213108.256100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Jos Jong - The Future of Software Development",
                "service_url": "http://josjong.com",
                "title": "NULL vs Empty Strings \u2013 Why Oracle Was Right and Apple Is\u00a0Not",
                "title_link": "https://josjong.com/2017/10/16/null-vs-empty-strings-why-oracle-was-right-and-apple-is-not/#comment-79",
                "author_link": "https://josjong.com/author/",
                "thumb_url": "https://josjong.files.wordpress.com/2017/10/toilet-rolls.jpg?w=1200&fit=200%2C150",
                "thumb_width": 200,
                "thumb_height": 112,
                "text": "Try it yourself: Google &ldquo;how to check for empty string.&rdquo; I got about 16 million results. How can something that seems so straightforward lead to so many questions and probably even more answers?\nThe solution differs by language, but most answers will look similar to this:\nif string != null and string.length() &gt; 0 {\n    ...\n}\nWhy can we not simply say?\nif string is filled {\n    ...\n}\n(pseudocode, forget about the exact syntax)\nIf you think the first form is good enough, just pick one of the answers for your favorite language and stick with it. If you&rsquo;re interested in the future of programming languages, as I am, read on.\nHopefully, your language of choice already supports some sort of shortcut to check for an empty string. But it probably still has two distinct representations for an empty string, which can confuse all of us from time to time:\nthe value null (maybe written as nil, none, etc.)\na string of length zero\nStrings are one of the most common data structures we pass around in our programs, so you would expect programming languages to have solved this &ldquo;&rdquo; versus null issue by now. Unfortunately, even newcomer Swift, although quite articulated about optional versus mandatory values, doesn&rsquo;t provide any solutions in this regard. Swift gives us optional values. But even if you define a Swift string to be optional you still have to deal with two representations for an empty string: either &ldquo;&rdquo; or nil. So you still have to check for both situations. Even worse, if you define a string to be mandatory it can still be empty!\nIf you think the distinction between a string of length zero and a null value has any significant meaning, please tweet or email me or write your real-world example below. Things are either present or they are not. A user will either enter a value in a given field or keep it empty. A function returns a result or it doesn&rsquo;t. A value in a database is either there or not. There&rsquo;s typically nothing in between.\nTime Waster\nWe can waste a lot&nbsp;of time on this issue:\nYou&rsquo;re never 100% sure what it is wise to return from a function in the case of no result.\nYou always have to check for both situations, just to be sure.\nYou can forget one of the two checks, resulting in unnecessary bugs.\nThe extra code obscures the pure intention of an empty or not-empty check.\nNot convinced? Check out: \nHistory\nLet&rsquo;s see how we got into this mess, because there is some history behind it.\nIn older programming languages like COBOL, strings were typically fixed sized. Coming from a world of punch cards and tapes, that made a lot of sense. However, because variable sized strings are more flexible, they eventually became the standard. Strings now had to be allocated on the heap. That&rsquo;s because variable sized values are inconvenient on the stack and impossible inside fixed record structures. From then on it became possible to represent an empty string by not allocating anything on the heap (null) in addition to the possibility of assigning zero characters (&ldquo;&rdquo;) to the string.\nObject-oriented programming languages eventually turned these allocated strings into objects, giving them methods to handle and manipulate their content. Compare that to other value types like integers, floats, and booleans, which were typically kept as native as possible. That&rsquo;s because making them into heap-allocated objects would mean a more-than-significant performance penalty.\nBelieve me, it is not intentional that we are stuck now with two representations for empty strings. It was just born out of technical necessity. That may be fine in a language like C. But hey, it is 2017 now &ndash; we can do better. Remember the trouble with ending strings using a &lsquo;\\0&rsquo; character. Exactly!\nWhy Strings are Values\nIn the theory of entities, attributes and relationships (EAR-modeling) entities and relationships are there to register facts. Values (assigned to attributes) play an entirely different role. While we can refer to entities using something like a record-ID, values reference from the model back to the outside world. To take some examples, a name can be a reference to a person, a date value refers to an abstract value on a calendar, and numbers refer to a virtual number scale. Given this definition, strings are also values (1). And therefore it makes sense to expect so-called value semantics for strings too.\nOf course, a string is a sequence of characters. And, you could argue, that makes them totally different from numbers. But remember that numbers are also sequences of symbols (digits in this case). The only difference is that we can fit most numbers within 32 of 64 bits. For that reason we don&rsquo;t need to allocate them in separate memory structures like we do with strings. But that is not an adequate reason to say that strings are not values.\nIt&rsquo;s interesting to compare the theoretical definition of values with the typical implementation of strings and integers in many popular programming languages.\n\nValues/attributes (theory)\nIntegers\nStrings\nSharable\nNo\nNo\nYes, although we try to prevent this\nSupport for optionality\nYes\nNo, in many languages\nYes, but typically in two ways (&ldquo;&rdquo; and null)\nAssignment behavior\nValue itself is copied\nValue itself is copied\nDepending on the language\nComparison behavior (equals)\nValues are compared\nValues are compared\nDepending on the language and operator (equals(), ==, ===)\n&nbsp;\nThe last column says it all. Strings being wrapped as objects may have benefits, but it gives them &ldquo;entity&rdquo; behavior. And languages have been struggling with this for decades now. Hence the introduction of band-aid features like const, final, immutability, etc.\nThe fact that we have two ways of representing empty strings is even weirder when you consider that in some languages intrinsic values such as integers, floats, etc., cannot represent an empty value. That&rsquo;s why a lot of code uses value 0 or -1 to present an empty integer field, which, again, can lead to bugs because both could actually be valid values.\nThe Solution\nWe do not have to look far for solutions. Just two examples (sorry if I forgot your language of choice):\nThe Oracle VARCHAR2 type automatically converts every instance of &ldquo;&rdquo; into NULL. This guarantees that there is only one way an empty string can be represented.\nString classes in C++ typically cannot be NULL because their instances are not pointers by themselves.\nI can imagine a more conceptual approach toward strings and values in general. We can forbid const values like &ldquo;&rdquo; because they have no meaning. Isn&rsquo;t that the same as the fact that we cannot write integer constants with zero digits?\nIf you&rsquo;re developing a programming language, consider what fits your language style. But my main takeaways would be:\nUnderstand that strings are values just like integers, dates, etc.\nGo for value semantics, even if you like them to have object-like methods.\nPlease, please, prevent the situation of having two different values for empty strings.\nSupport optionality for every type of value (I would like to credit Swift for that)\nThe bottom line is to avoid too many technical considerations when designing a language. Let the compiler do the hard work.\nReferences\n1) Very long strings like the text of a document should maybe not be regarded as &ldquo;values.&rdquo; But that&rsquo;s a different subject.\nCredits\nR. Sato (@raysato), thanks for allowing me to use your 0 vs null&nbsp;photo.&nbsp;Some pictures are really worth a thousand words.",
                "fallback": "Jos Jong - The Future of Software Development Link: NULL vs Empty Strings &#8211; Why Oracle Was Right and Apple Is&nbsp;Not",
                "from_url": "https://josjong.com/2017/10/16/null-vs-empty-strings-why-oracle-was-right-and-apple-is-not/#comment-79",
                "service_icon": "https://s2.wp.com/i/webclip.png",
                "id": 1,
                "original_url": "https://josjong.com/2017/10/16/null-vs-empty-strings-why-oracle-was-right-and-apple-is-not/#comment-79"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ofN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I elaborate in this comment: "
                            },
                            {
                                "type": "link",
                                "url": "https://josjong.com/2017/10/16/null-vs-empty-strings-why-oracle-was-right-and-apple-is-not/#comment-79"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "b868de13-13fd-4142-990f-b7f6c2415cb3",
        "type": "message",
        "text": "This talk? <https://www.youtube.com/watch?v=YR5WdGrpoug>",
        "user": "U8A5MS6R1",
        "ts": "1579213234.256600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Maybe Not - Rich Hickey",
                "title_link": "https://www.youtube.com/watch?v=YR5WdGrpoug",
                "author_name": "ClojureTV",
                "author_link": "https://www.youtube.com/user/ClojureTV",
                "thumb_url": "https://i.ytimg.com/vi/YR5WdGrpoug/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Maybe Not - Rich Hickey",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/YR5WdGrpoug?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=YR5WdGrpoug",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=YR5WdGrpoug"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x2g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This talk? "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=YR5WdGrpoug"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    }
]