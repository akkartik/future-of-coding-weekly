[
    {
        "client_msg_id": "98265c1d-4dd8-4f6f-ba5a-b5b8c750d7c3",
        "type": "message",
        "text": "Hi! We're doing a survey on the future of developer tools and would love some feedback if you have five minutes.\n\n<https://qsurvey.mozilla.com/s3/firefox-replay-jll>",
        "user": "UN9R2KEUE",
        "ts": "1578355450.454600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Firefox-devtools-replay",
                "title_link": "https://qsurvey.mozilla.com/s3/firefox-replay-jll",
                "text": "Firefox-devtools-replay.",
                "fallback": "Firefox-devtools-replay",
                "from_url": "https://qsurvey.mozilla.com/s3/firefox-replay-jll",
                "service_icon": "https://surveygizmolibrary.s3.amazonaws.com/library/28049/firefoxi.ico",
                "service_name": "qsurvey.mozilla.com",
                "id": 1,
                "original_url": "https://qsurvey.mozilla.com/s3/firefox-replay-jll"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QJlGu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi! We're doing a survey on the future of developer tools and would love some feedback if you have five minutes.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://qsurvey.mozilla.com/s3/firefox-replay-jll"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578355450.454600",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1578358189.455600",
        "reply_users": [
            "UC2A2ARPT",
            "UN9R2KEUE"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "US6TKS2HW",
                    "UC2A2ARPT",
                    "ULM3U6275",
                    "UA14TGLTC",
                    "UE3KC0VK6",
                    "UCGAK10LS",
                    "UJ6LDMMN0"
                ],
                "count": 7
            }
        ]
    },
    {
        "client_msg_id": "e952249f-c163-4b34-b4a8-d84c0311fd69",
        "type": "message",
        "text": "Is this public? Has anyone involved tweeted it, such that I can RT them?",
        "user": "UC2A2ARPT",
        "ts": "1578356475.455100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/5QZ0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is this public? Has anyone involved tweeted it, such that I can RT them?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578355450.454600",
        "parent_user_id": "UN9R2KEUE"
    },
    {
        "client_msg_id": "ee39d6a4-776b-45b9-a469-1cbbe920cc31",
        "type": "message",
        "text": "Good question. Let me find the tweet",
        "user": "UN9R2KEUE",
        "ts": "1578358126.455400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LHH5m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good question. Let me find the tweet"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578355450.454600",
        "parent_user_id": "UN9R2KEUE"
    },
    {
        "client_msg_id": "7380ea4f-1656-409f-a971-b44e5a0ed82d",
        "type": "message",
        "text": "<@UC2A2ARPT> here ya go <https://twitter.com/FirefoxDevTools/status/1207699613810974720>",
        "user": "UN9R2KEUE",
        "ts": "1578358189.455600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/FirefoxDevTools|@FirefoxDevTools>: Are you interested in :hammer_and_wrench: tools for debugging and testing on the web?\n\nYour feedback can help us make it easier :arrow_right: <https://qsurvey.mozilla.com/s3/firefox-replay-twitter>\n\n(Please retweet and share with fellow designers, developers, testers, devops, etc)",
                "ts": 1576773000,
                "author_name": "Firefox DevTools",
                "author_link": "https://twitter.com/FirefoxDevTools/status/1207699613810974720",
                "author_icon": "https://pbs.twimg.com/profile_images/1168976837474770944/IKcaSA_Y_normal.png",
                "author_subname": "@FirefoxDevTools",
                "text": "Are you interested in :hammer_and_wrench: tools for debugging and testing on the web?\n\nYour feedback can help us make it easier :arrow_right: <https://qsurvey.mozilla.com/s3/firefox-replay-twitter>\n\n(Please retweet and share with fellow designers, developers, testers, devops, etc)",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/FirefoxDevTools/status/1207699613810974720",
                "id": 1,
                "original_url": "https://twitter.com/FirefoxDevTools/status/1207699613810974720",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YOmhk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " here ya go "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/FirefoxDevTools/status/1207699613810974720"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578355450.454600",
        "parent_user_id": "UN9R2KEUE",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d131179c-530a-4727-93d4-09bda40f0566",
        "type": "message",
        "text": "The Apple Core animation library is pretty good, and offers much of what Conal did in 1998. It uses the GPU behind the scenes to do the animations, and if orbiting things around and changing them as they fly is your objective, Core Animation is a very clean system. Apple merged it into OSX/IOS so that one could avoid directly programming the GPU. It is one of Apple's notable advantages over Windows OS, along with the Sound APIs which are also baked into the kernel for real-time audio work. No other OS to my knowledge has audio stuff built in (probably invented by Amiga though).",
        "user": "UEQ6M68H0",
        "ts": "1578365016.456200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y9H6v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Apple Core animation library is pretty good, and offers much of what Conal did in 1998. It uses the GPU behind the scenes to do the animations, and if orbiting things around and changing them as they fly is your objective, Core Animation is a very clean system. Apple merged it into OSX/IOS so that one could avoid directly programming the GPU. It is one of Apple's notable advantages over Windows OS, along with the Sound APIs which are also baked into the kernel for real-time audio work. No other OS to my knowledge has audio stuff built in (probably invented by Amiga though)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR"
    },
    {
        "client_msg_id": "8be2f844-03fa-4ed9-8381-e2d5acaa640f",
        "type": "message",
        "text": "<@U6KQ2S410> \u2014\u00a0Safe to say that a forum like phpBB would be your first pick, but if we're going to stick with a chat then you'd prefer Zulip over any other option?",
        "user": "UC2A2ARPT",
        "ts": "1578367146.456400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PkYtW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " \u2014\u00a0Safe to say that a forum like phpBB would be your first pick, but if we're going to stick with a chat then you'd prefer Zulip over any other option?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576787069.006700",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "3cb53e68-a631-4b61-9b50-43e3516567ed",
        "type": "message",
        "text": "I haven't programmed against CoreAnimation yet. What is the API like? Is it focused on function composition? If not, then what about it makes it comparable to FRP? How about something like Greensock or the Web Animation API?",
        "user": "UC2A2ARPT",
        "ts": "1578367217.456700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1578367269.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c/6FL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I haven't programmed against CoreAnimation yet. What is the API like? Is it focused on function composition? If not, then what about it makes it comparable to FRP? How about something like Greensock or the Web Animation API?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR"
    },
    {
        "client_msg_id": "afbab93d-b2b9-4811-8e97-d51db11036c0",
        "type": "message",
        "text": "Thanks for asking <@UC2A2ARPT>. I\u2019ve only glanced at Zulip - it seemed to have support for threading, which is all I really care about. I mostly heard about it from the Recurse Center, which is a good endorsement.",
        "user": "U6KQ2S410",
        "ts": "1578369711.458800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OlOV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for asking "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": ". I\u2019ve only glanced at Zulip - it seemed to have support for threading, which is all I really care about. I mostly heard about it from the Recurse Center, which is a good endorsement."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576787069.006700",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "1cc7bda5-6bdc-4407-8a41-4823424a727a",
        "type": "message",
        "text": "Lately I like to codename my projects with Japanese onomatopoeias and then hope I come up with a better name upon release. Having a go-to stock of unique names like this is nice for when you just want to give it a name(kinda like how Apple named OSX releases after big cats). Fictional characters and locations can also be a good source of names.",
        "user": "UMWF81HTP",
        "ts": "1578373167.459100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UMWF81HTP",
            "ts": "1578373290.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2bQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lately I like to codename my projects with Japanese onomatopoeias and then hope I come up with a better name upon release. Having a go-to stock of unique names like this is nice for when you just want to give it a name(kinda like how Apple named OSX releases after big cats). Fictional characters and locations can also be a good source of names."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578328340.438400",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "UC2A2ARPT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "55f3f223-7649-4b04-9021-542bb8ac4ff7",
        "type": "message",
        "text": "Core Animation is a low level imperative API for programming the kinds of animations that appear in MacOS and iOS GUIs. Apple GUIs uses the Model/View/Controller paradigm. Every window has one or more Views, and every view has one or more Layers, which are Core Animation objects. A Layer has a draw() function supplied by the application that draws the contents using Core Graphics. The drawn contents are cached in a bitmap in the GPU. Looks like you can composite layers together using transparency, apply affine transformations and perform simple animations, and CA orchestrates this on the GPU. It's not FRP because it's not Functional and it isn't Reactive (no input handling). I'd say that GreenSock is higher level.",
        "user": "UJN1TAYEQ",
        "ts": "1578375302.459400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y/GVn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Core Animation is a low level imperative API for programming the kinds of animations that appear in MacOS and iOS GUIs. Apple GUIs uses the Model/View/Controller paradigm. Every window has one or more Views, and every view has one or more Layers, which are Core Animation objects. A Layer has a draw() function supplied by the application that draws the contents using Core Graphics. The drawn contents are cached in a bitmap in the GPU. Looks like you can composite layers together using transparency, apply affine transformations and perform simple animations, and CA orchestrates this on the GPU. It's not FRP because it's not Functional and it isn't Reactive (no input handling). I'd say that GreenSock is higher level."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9f0df8ec-eb00-4635-bfbc-82d23f8197ac",
        "type": "message",
        "text": "<@UJN1TAYEQ> gave a nice sketch of core animation, however he is vastly understating its power. It is what is powering all the built-in controls of IOS; the buttery smooth kinetic scrolling is all animated using core animation, and the fact that the frame rate can stay so high even under heavy CPU load is a very clever feat of the OS Kernel, which  has more of a real-time flavor than anyone gives it credit for. Android took many years to catch up to the buttery smooth animation tricks that Apple used. Of course nowadays phones are 10x what they were so these clever tricks aren't so necessary because of the horsepower. I don't know what you mean by functional. It is call scheduled via an animation queue which you can control slightly, and you can respond to inputs. Core Animation is a 2.5 dimensional system; you can put a rectangle into a perspective transformation, but it isn't a 3D world. For that people use Unreal Engine, Unity, etc.",
        "user": "UEQ6M68H0",
        "ts": "1578381718.000100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ok/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " gave a nice sketch of core animation, however he is vastly understating its power. It is what is powering all the built-in controls of IOS; the buttery smooth kinetic scrolling is all animated using core animation, and the fact that the frame rate can stay so high even under heavy CPU load is a very clever feat of the OS Kernel, which  has more of a real-time flavor than anyone gives it credit for. Android took many years to catch up to the buttery smooth animation tricks that Apple used. Of course nowadays phones are 10x what they were so these clever tricks aren't so necessary because of the horsepower. I don't know what you mean by functional. It is call scheduled via an animation queue which you can control slightly, and you can respond to inputs. Core Animation is a 2.5 dimensional system; you can put a rectangle into a perspective transformation, but it isn't a 3D world. For that people use Unreal Engine, Unity, etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR"
    },
    {
        "client_msg_id": "5fd75d21-3a7b-4600-a740-260e6ab1fd34",
        "type": "message",
        "text": "In my experience, people who teach coding spend a lot of time arguing about what should be taught first. ... And maybe there is a best thing to teach first, I am not sure.  ... But from my experience, motivation makes the most difference. Do anything you can to get students motivated and engaged.",
        "user": "UP6G25H35",
        "ts": "1578382438.000300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KsF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In my experience, people who teach coding spend a lot of time arguing about what should be taught first. ... And maybe there is a best thing to teach first, I am not sure.  ... But from my experience, motivation makes the most difference. Do anything you can to get students motivated and engaged."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577984014.267500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "bbd49068-bb38-446a-8762-ff549101d825",
        "type": "message",
        "text": "DropBox, AirBnB and many other billion dollar companies got started the same way. They attended YC - much of what they were taught is now covered by this free online version of the course -  <https://www.startupschool.org>  Next one starts on 20th Jan.  ... It covers many innovation related topics. Topics such as picking ideas, evaluating ideas, creating prototypes. .... Chris Granger (witheve) also attended YC. .... If you are working on a new idea, I can highly recommend it, I learned a lot.",
        "user": "UP6G25H35",
        "ts": "1578383938.028900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3wg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "DropBox, AirBnB and many other billion dollar companies got started the same way. They attended YC - much of what they were taught is now covered by this free online version of the course -  "
                            },
                            {
                                "type": "link",
                                "url": "https://www.startupschool.org"
                            },
                            {
                                "type": "text",
                                "text": "  Next one starts on 20th Jan.  ... It covers many innovation related topics. Topics such as picking ideas, evaluating ideas, creating prototypes. .... Chris Granger (witheve) also attended YC. .... If you are working on a new idea, I can highly recommend it, I learned a lot."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578383938.028900",
        "reply_count": 4,
        "reply_users_count": 3,
        "latest_reply": "1578685113.107500",
        "reply_users": [
            "UMVFWPZ36",
            "URMEM88JG",
            "UP6G25H35"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "star-struck",
                "users": [
                    "UP7SQ8KT3",
                    "UFLN9JFRT",
                    "UMVFWPZ36",
                    "UP6B3FCGZ"
                ],
                "count": 4
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UA14TGLTC",
                    "USJSL2NVB"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "E0DCD086-0FF5-487B-A0C0-4996CF0B90A8",
        "type": "message",
        "text": "I\u2019m also a little surprised that Core Animation popped up in a thread about FRP. It\u2019s a very pragmatic imperative framework using some functional techniques. \n\nIt\u2019s great trick is that you specify start and end states of an animation (which the UI framework could basically do for you implicitly, and you got default animations without specifying anything), commit it to the render server, and all the interpolation per frame is then done on the GPU. That cleared up the CPU to take care of other things, mostly shoving memory around to manage textures and create the raster image data for these from the UI framework. Apart from much slower chips, memory bandwidth was one of the biggest issues of the early iPhones. Core Animation worked around that very effectively. (A design that fell out of constraints of the time \u2014 in case you\u2019re following other threads about creativity. ;-)\n\nSharing the work between CPU and GPU made the first iPhone possible, or rather its smooth kinetic scrolling capabilities which separated generating the textures from moving and scaling or otherwise transforming them. If you ever used an early iPhone, you might remember the checkerboard pattern that showed up whenever you were scrolling into areas that hadn\u2019t texture memory loaded yet \u2014 still it always felt responsive because you could see the inertia of the scrolling thanks to the checkerboard. That was a design decision realizing that it\u2019s more important to have the animation be absolutely smooth than to see the actual content.\n\nIts greatest benefit is also its greatest weakness: once you commit an animation it just runs and you have little control over it. For animations that might be exactly what you want, but as Apple moved on to interruptible animation and gestures and now that chips are much more capable, Core Animation is likely on the way out to be replaced with something much more resembling FRP, although I wouldn\u2019t count on Apple to deliver a pure functional approach. \n\nYou can get a glimpse of what it will look like with SwiftUI, which includes \u2014 apart from classic UI components still built on top the classic frameworks (but for how long?) \u2014 a simple graphics API for shapes and animations that is likely to eventually succeed Core Graphics (Quartz) and Core Animation and will be a more efficient implementation directly leveraging Metal. That might be what you may want to look at for inspiration: \n\n<https://developer.apple.com/tutorials/swiftui/drawing-paths-and-shapes|https://developer.apple.com/tutorials/swiftui/drawing-paths-and-shapes>\n\n<https://developer.apple.com/tutorials/swiftui/animating-views-and-transitions|https://developer.apple.com/tutorials/swiftui/animating-views-and-transitions>",
        "user": "U5STGTB3J",
        "ts": "1578384232.031100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kQ/BK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019m also a little surprised that Core Animation popped up in a thread about FRP. It\u2019s a very pragmatic imperative framework using some functional techniques. "
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "It\u2019s great trick is that you specify start and end states of an animation (which the UI framework could basically do for you implicitly, and you got default animations without specifying anything), commit it to the render server, and all the interpolation per frame is then done on the GPU. That cleared up the CPU to take care of other things, mostly shoving memory around to manage textures and create the raster image data for these from the UI framework. Apart from much slower chips, memory bandwidth was one of the biggest issues of the early iPhones. Core Animation worked around that very effectively. (A design that fell out of constraints of the time \u2014 in case you\u2019re following other threads about creativity. ;-)"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Sharing the work between CPU and GPU made the first iPhone possible, or rather its smooth kinetic scrolling capabilities which separated generating the textures from moving and scaling or otherwise transforming them. If you ever used an early iPhone, you might remember the checkerboard pattern that showed up whenever you were scrolling into areas that hadn\u2019t texture memory loaded yet \u2014 still it always felt responsive because you could see the inertia of the scrolling thanks to the checkerboard. That was a design decision realizing that it\u2019s more important to have the animation be absolutely smooth than to see the actual content."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Its greatest benefit is also its greatest weakness: once you commit an animation it just runs and you have little control over it. For animations that might be exactly what you want, but as Apple moved on to interruptible animation and gestures and now that chips are much more capable, Core Animation is likely on the way out to be replaced with something much more resembling FRP, although I wouldn\u2019t count on Apple to deliver a pure functional approach. "
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "You can get a glimpse of what it will look like with SwiftUI, which includes \u2014 apart from classic UI components still built on top the classic frameworks (but for how long?) \u2014 a simple graphics API for shapes and animations that is likely to eventually succeed Core Graphics (Quartz) and Core Animation and will be a more efficient implementation directly leveraging Metal. That might be what you may want to look at for inspiration: "
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://developer.apple.com/tutorials/swiftui/drawing-paths-and-shapes",
                                "text": "https://developer.apple.com/tutorials/swiftui/drawing-paths-and-shapes"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://developer.apple.com/tutorials/swiftui/animating-views-and-transitions",
                                "text": "https://developer.apple.com/tutorials/swiftui/animating-views-and-transitions"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "531e2dc6-4b19-487b-ae61-e6645e123986",
        "type": "message",
        "text": "<https://gbracha.blogspot.com/2020/01/the-build-is-always-broken.html>",
        "user": "UBN9AFS0N",
        "ts": "1578385588.031500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "The Build is Always Broken",
                "title_link": "https://gbracha.blogspot.com/2020/01/the-build-is-always-broken.html",
                "text": "Programmers are always talking about broken builds: \"The build is broken\", \"I broke the build\" etc. However, the real problem is that the ...",
                "fallback": "The Build is Always Broken",
                "from_url": "https://gbracha.blogspot.com/2020/01/the-build-is-always-broken.html",
                "service_icon": "https://gbracha.blogspot.com/favicon.ico",
                "service_name": "gbracha.blogspot.com",
                "id": 1,
                "original_url": "https://gbracha.blogspot.com/2020/01/the-build-is-always-broken.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jbR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://gbracha.blogspot.com/2020/01/the-build-is-always-broken.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578385588.031500",
        "reply_count": 17,
        "reply_users_count": 7,
        "latest_reply": "1578694940.107900",
        "reply_users": [
            "UCUSW7WVD",
            "UJN1TAYEQ",
            "UPMFG2571",
            "U8A5MS6R1",
            "UEQ6M68H0",
            "UA14TGLTC",
            "UK22Z72L8"
        ],
        "subscribed": true,
        "last_read": "1578694940.107900",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1",
                    "UA14TGLTC",
                    "UK22Z72L8"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "ae5adcf0-7dfe-411b-b9a1-f736bfe6091c",
        "type": "message",
        "text": "<@UC6997THT> Well one thing I could imagine is that people really ARE overwhelmed by all the information. And these other haps \"hide\" or \"forget\" information so it *feels* easier to use",
        "user": "UJFN50C00",
        "ts": "1578395025.031900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4s0a5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC6997THT"
                            },
                            {
                                "type": "text",
                                "text": " Well one thing I could imagine is that people really ARE overwhelmed by all the information. And these other haps \"hide\" or \"forget\" information so it "
                            },
                            {
                                "type": "text",
                                "text": "feels",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " easier to use"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576787069.006700",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "dd4e31ad-ab03-48f1-a051-4a17b560e9aa",
        "type": "message",
        "text": "interesting have you seen the discussions here about the zettelkasten method? I still think it could provide a valuable way for asynchronous information exchange. To track the steps a person took to gain understanding in a certain topic landscape.",
        "user": "UJFN50C00",
        "ts": "1578395121.032100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Odd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "interesting have you seen the discussions here about the zettelkasten method? I still think it could provide a valuable way for asynchronous information exchange. To track the steps a person took to gain understanding in a certain topic landscape."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578078346.313600",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "77CC066F-DA99-4A76-B483-342E60305634",
        "type": "message",
        "text": "I did, and I kind of use it for my own notes. \nWhat made you make the connection?",
        "user": "U5STGTB3J",
        "ts": "1578398549.033400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "am9YV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I did, and I kind of use it for my own notes. "
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "What made you make the connection?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578078346.313600",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "374526a3-bc95-4442-8187-6a0c0a96e4b3",
        "type": "message",
        "text": "I would also recommend signing up for SUS. I did it on a whim last fall and so happy I did\u2014it's a *tiny* time commitment and I met some great people. I didn't have a startup but just did it under the name of my FoC research projects. The weekly 1 hour video group sessions with different people each week are fun and a great way to practice pitching your FoC project. If you aren't currently living in a tech hub, it's a great way to meet new people in tech working on interesting things. It's a very positive community where people are more constructive than critical. And it's totally free",
        "user": "UMVFWPZ36",
        "ts": "1578401571.033700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r4kf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would also recommend signing up for SUS. I did it on a whim last fall and so happy I did\u2014it's a "
                            },
                            {
                                "type": "text",
                                "text": "tiny",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " time commitment and I met some great people. I didn't have a startup but just did it under the name of my FoC research projects. The weekly 1 hour video group sessions with different people each week are fun and a great way to practice pitching your FoC project. If you aren't currently living in a tech hub, it's a great way to meet new people in tech working on interesting things. It's a very positive community where people are more constructive than critical. And it's totally free"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578383938.028900",
        "parent_user_id": "UP6G25H35"
    },
    {
        "client_msg_id": "d09637d8-ca24-486e-8108-a96bd3c16a05",
        "type": "message",
        "text": "\u2022 I think the zettelkasten method is by far very under appreciated. Its properties bend very nicely towards the human style of thinking. Because a single note/zettel is not that import but the connections between notes is. Thats us - humans we remember connections. We can not relate to a object on its own it can not make sense to us. Also that you have to take a certain amount of notes before you can see that clusters do emerge. That phenomenon when you learn a new topic and can't yet orient yourself very well but with every wave the see rises and eventually encloses the nut: \u00a0\u00a0\u00a0\u00a0\u00a0<https://twitter.com/kmett/status/552926129284481024>\u00a0\u00a0\u00a0\u00a0\n",
        "user": "UJFN50C00",
        "ts": "1578405032.034100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/kmett|@kmett>: Slides from my <https://twitter.com/yow_oz|@yow_oz> #yow14 \"Stop Treading Water: Learning to Learn\" keynote are now online: <http://yowconference.com.au/slides/yow2014/Kmett-StopTreadingWater.pdf> warning: big download!",
                "ts": 1420662836,
                "author_name": "Edward Kmett",
                "author_link": "https://twitter.com/kmett/status/552926129284481024",
                "author_icon": "https://pbs.twimg.com/profile_images/700338266604593153/UXezu_zY_normal.jpg",
                "author_subname": "@kmett",
                "text": "Slides from my <https://twitter.com/yow_oz|@yow_oz> #yow14 \"Stop Treading Water: Learning to Learn\" keynote are now online: <http://yowconference.com.au/slides/yow2014/Kmett-StopTreadingWater.pdf> warning: big download!",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/kmett/status/552926129284481024",
                "id": 1,
                "original_url": "https://twitter.com/kmett/status/552926129284481024",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lZgXz",
                "elements": [
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I think the zettelkasten method is by far very under appreciated. Its properties bend very nicely towards the human style of thinking. Because a single note/zettel is not that import but the connections between notes is. Thats us - humans we remember connections. We can not relate to a object on its own it can not make sense to us. Also that you have to take a certain amount of notes before you can see that clusters do emerge. That phenomenon when you learn a new topic and can't yet orient yourself very well but with every wave the see rises and eventually encloses the nut: \u00a0\u00a0\u00a0\u00a0\u00a0"
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://twitter.com/kmett/status/552926129284481024"
                                    },
                                    {
                                        "type": "text",
                                        "text": "\u00a0\u00a0\u00a0\u00a0"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ],
        "thread_ts": "1578078346.313600",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "8d896803-24a8-4833-b949-15bc672f7b19",
        "type": "message",
        "text": "(slide 58 the rising sea)",
        "user": "UJFN50C00",
        "ts": "1578405117.034500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dJCKQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(slide 58 the rising sea)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578078346.313600",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "a81e101d-4a91-4cf7-acea-f844e2d3c443",
        "type": "message",
        "text": "Again I would love to see zettelkasten repositories to take a peek into thought patterns and structures of other people. I have used a git repository with markdown files to take notes myself but I'm still pondering how to make this representation useful to others..",
        "user": "UJFN50C00",
        "ts": "1578405235.034700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ROlX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Again I would love to see zettelkasten repositories to take a peek into thought patterns and structures of other people. I have used a git repository with markdown files to take notes myself but I'm still pondering how to make this representation useful to others.."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578078346.313600",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "C571B526-51DE-4EB4-ADB2-132EC887A647",
        "type": "message",
        "text": "Ha, give me a few more months\u2026 hmm\u2026 years(?)\u2026 I hope to eventually get to publishing some more interesting insights on my blog which I got out of research I\u2019ve done relating to how people take notes. \n\nI went into it with the expectation that each of the 20 people I talked to will have a unique process tailored to them individually. And in a way that\u2019s true, but I was also blown away by how the motivations, objectives, and even structures they employ are not at all unique and there is tremendous overlap. Individuality in note taking seems to be mostly coming from us using different tools. It\u2019s something where our tools clearly shape us, but we haven\u2019t really put much thought into how we designed these tools. We still use glorified type writers, essentially. Also why I have a particular opinion about programming tools\u2026\n\nIn connection to what I learned from cognitive science about categorization, I\u2019ve been trying to build a useful model of how we manage personal knowledge with digital tools and what the common patterns are. \n\nFor sure our minds have strong associative capabilities, making spontaneous connections between previously unconnected ideas. On the other hand, however, we are also extremely good at communicating in linear narratives, where complex structure is woven into a sequence of ideas to form a compelling story.\n\nIn a way I\u2019d argue that we constantly turn linear narratives into associations, which we could call learning, and the opposite, which we could call teaching.\n\nMy hypothesis is that if we understand the two directions of this process better, we can build better tools for thinking (or note taking, as a sub-category). \nI should probably consider spending less time talking about it in forums and more time actually building these tools\u2026",
        "user": "U5STGTB3J",
        "ts": "1578407317.052700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1578407424.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3yVMo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ha, give me a few more months\u2026 hmm\u2026 years(?)\u2026 I hope to eventually get to publishing some more interesting insights on my blog which I got out of research I\u2019ve done relating to how people take notes. \n\nI went into it with the expectation that each of the 20 people I talked to will have a unique process tailored to them individually. And in a way that\u2019s true, but I was also blown away by how the motivations, objectives, and even structures they employ are not at all unique and there is tremendous overlap. Individuality in note taking seems to be mostly coming from us using different tools. It\u2019s something where our tools clearly shape us, but we haven\u2019t really put much thought into how we designed these tools. We still use glorified type writers, essentially. Also why I have a particular opinion about programming tools\u2026\n\nIn connection to what I learned from cognitive science about categorization, I\u2019ve been trying to build a useful model of how we manage personal knowledge with digital tools and what the common patterns are. \n\nFor sure our minds have strong associative capabilities, making spontaneous connections between previously unconnected ideas. On the other hand, however, we are also extremely good at communicating in linear narratives, where complex structure is woven into a sequence of ideas to form a compelling story.\n\nIn a way I\u2019d argue that we constantly turn linear narratives into associations, which we could call learning, and the opposite, which we could call teaching.\n\nMy hypothesis is that if we understand the two directions of this process better, we can build better tools for thinking (or note taking, as a sub-category). \nI should probably consider spending less time talking about it in forums and more time actually building these tools\u2026"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578078346.313600",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "d86a2d1b-17f9-452b-8773-23d8c463809c",
        "type": "message",
        "text": "It's not so much a rebuttal as an alternative worldview. I don't see a concrete advantage given for this approach that merits the word 'broken'.\n\nOn the other hand, there *is* a thread of research on the advantages of creating software to constantly exercise disaster recovery: <https://en.wikipedia.org/wiki/Crash-only_software|https://en.wikipedia.org/wiki/Crash-only_software>\n\nIt speaks particularly to me ever since I watched _Jurassic Park_ at a formative age :smile:",
        "user": "UCUSW7WVD",
        "ts": "1578418204.053100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "image_url": "https://upload.wikimedia.org/wikipedia/commons/8/82/Software_spanner.png",
                "image_width": 239,
                "image_height": 184,
                "image_bytes": 73511,
                "title": "Crash-only software",
                "title_link": "https://en.wikipedia.org/wiki/Crash-only_software",
                "from_url": "https://en.wikipedia.org/wiki/Crash-only_software",
                "author_name": "Wikipedia",
                "author_link": "https://en.wikipedia.org/",
                "text": "Crash-only software refers to computer programs that handle failures by simply restarting, without attempting any sophisticated recovery.  Correctly written components of crash-only software can microreboot to a known-good state without the help of a user.  Since failure-handling and normal startup use the same methods, this can increase the chance that bugs in failure-handling code will be noticed, except when there are leftover artifacts, such as data corruption from a severe failure, that don't occur during normal startup.\nCrash-only software also has benefits for end-users. All too often, applications do not save their data and settings while running, only at the end of their use. For example, word processors usually save settings when they are closed. A crash-only application is designed to save all changed user settings soon after they are changed, so that the persistent state matches that of the running machine. No matter how an application terminates (be it a clean close or the sudden failure of a laptop battery), the state will persist.",
                "fallback": "wikipedia: Crash-only software",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png",
                "id": 1,
                "original_url": "https://en.wikipedia.org/wiki/Crash-only_software"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B+N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's not so much a rebuttal as an alternative worldview. I don't see a concrete advantage given for this approach that merits the word 'broken'.\n\nOn the other hand, there "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a thread of research on the advantages of creating software to constantly exercise disaster recovery: "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Crash-only_software",
                                "text": "https://en.wikipedia.org/wiki/Crash-only_software"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIt speaks particularly to me ever since I watched "
                            },
                            {
                                "type": "text",
                                "text": "Jurassic Park",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " at a formative age "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "a9cc793a-985f-4a1e-a358-1dfa76802718",
        "type": "message",
        "text": "By no means feel any pressure! My notes lack coherence from an outside as well inside perspective they are all mixed up with private notes. So its a difficult thing to untangle and its also something which I don't haveva good solution for yet",
        "user": "UJFN50C00",
        "ts": "1578429681.001100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2bRde",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "By no means feel any pressure! My notes lack coherence from an outside as well inside perspective they are all mixed up with private notes. So its a difficult thing to untangle and its also something which I don't haveva good solution for yet"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578078346.313600",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "8b7eb78e-8b45-44a9-8593-ff1032213d0c",
        "type": "message",
        "text": "Thank you for the comment about linear narratives and associations. I haven't thought about this deeper but it seems very relevant to me.",
        "user": "UJFN50C00",
        "ts": "1578429756.001300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ddg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you for the comment about linear narratives and associations. I haven't thought about this deeper but it seems very relevant to me."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578078346.313600",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "1f71a64f-f079-49d9-bddb-c374d4b0641a",
        "type": "message",
        "text": "Also I haven't yet watched the video/contents from will wright but somehow this felt related to me: <https://www.youtube.com/watch?v=Ha1yYXWpNQw>",
        "user": "UJFN50C00",
        "ts": "1578429955.001500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "xenogaming brief presentation",
                "title_link": "https://www.youtube.com/watch?v=Ha1yYXWpNQw",
                "author_name": "Anders Aamodt",
                "author_link": "https://www.youtube.com/user/AndersJAamodt",
                "thumb_url": "https://i.ytimg.com/vi/Ha1yYXWpNQw/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: xenogaming brief presentation",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/Ha1yYXWpNQw?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=Ha1yYXWpNQw",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=Ha1yYXWpNQw"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Lfr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also I haven't yet watched the video/contents from will wright but somehow this felt related to me: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=Ha1yYXWpNQw"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578078346.313600",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "6e8afb4f-e531-4ba1-836e-77e3c6d36ad4",
        "type": "message",
        "text": "My vision for state-of-the-art functional reactive animation (FRAN):\n\u2022 Provide a rich set of 2D and 3D operators for constructing graphical values (shapes and colour patterns). For example, instead of just the endlessly recycled 2D vector graphics operators of Postscript/SVG, support the full power of resolution-independent implicit function representation, where anything that can be described using mathematics can be expressed: algebraic surfaces, set union intersection difference, fractals, non-affine transformations, noise based procedural modelling, and so on.\n\u2022 A pure functional program, which uses these primitives, is evaluated to yield a graphical value, which may be time varying and reactive. A graphical value is represented by tree of graphics operators (call this the CSG tree).\n\u2022 An optimizing graphics compiler walks the CSG tree, compiling it into code that runs partly on the CPU and partly on the GPU.",
        "user": "UJN1TAYEQ",
        "ts": "1578431001.001800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=Dj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My vision for state-of-the-art functional reactive animation (FRAN):\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Provide a rich set of 2D and 3D operators for constructing graphical values (shapes and colour patterns). For example, instead of just the endlessly recycled 2D vector graphics operators of Postscript/SVG, support the full power of resolution-independent implicit function representation, where anything that can be described using mathematics can be expressed: algebraic surfaces, set union intersection difference, fractals, non-affine transformations, noise based procedural modelling, and so on."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A pure functional program, which uses these primitives, is evaluated to yield a graphical value, which may be time varying and reactive. A graphical value is represented by tree of graphics operators (call this the CSG tree)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "An optimizing graphics compiler walks the CSG tree, compiling it into code that runs partly on the CPU and partly on the GPU."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR",
        "reactions": [
            {
                "name": "heart_eyes",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "ok_hand",
                "users": [
                    "UQ3QA3ZAR"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "682829f9-15ac-4893-ae67-dfeba5c4695b",
        "type": "message",
        "text": "I value the benefits of live programming, so I mostly agree. However, Bracha takes the absolutist position that \"the real problem is that the very concept of _the build_ is broken.\" and \"It's high time we build a new, brave, build-free world.\" This is mistaken, because live programming doesn't always work. There are some situations where the live programming environment's ability to update the running system state to match the new code breaks down. It can happen when you change an important data structure that a lot of currently running code depends on. It's then that you need the ability to \"tear down and reconstruct the skyscraper\". So we need to preserve the ability to rebuild the world from scratch, and exercise it frequently enough so that it doesn't become irretrievably broken.",
        "user": "UJN1TAYEQ",
        "ts": "1578434328.002200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZAWl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I value the benefits of live programming, so I mostly agree. However, Bracha takes the absolutist position that \"the real problem is that the very concept of "
                            },
                            {
                                "type": "text",
                                "text": "the build",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is broken.\" and \"It's high time we build a new, brave, build-free world.\" This is mistaken, because live programming doesn't always work. There are some situations where the live programming environment's ability to update the running system state to match the new code breaks down. It can happen when you change an important data structure that a lot of currently running code depends on. It's then that you need the ability to \"tear down and reconstruct the skyscraper\". So we need to preserve the ability to rebuild the world from scratch, and exercise it frequently enough so that it doesn't become irretrievably broken."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UBSMEUXAA"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "5a9e5fce-9c21-4dc0-bd41-212f36d38b0e",
        "type": "message",
        "text": "I don't think it's a given that it breaks down. You change an important data structure and the old code still uses the previous layout until it has been changed to the new one. It breaks down as things currently stand but you could completely re-engineer a new world where it doesn't. What the trade offs would be for that to happen, that's a better question.",
        "user": "UPMFG2571",
        "ts": "1578437157.002500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7FqmT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't think it's a given that it breaks down. You change an important data structure and the old code still uses the previous layout until it has been changed to the new one. It breaks down as things currently stand but you could completely re-engineer a new world where it doesn't. What the trade offs would be for that to happen, that's a better question."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    }
]