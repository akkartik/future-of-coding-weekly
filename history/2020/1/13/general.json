[
    {
        "client_msg_id": "ac2e0a6a-aa8c-4f64-9058-25b0ef41f867",
        "type": "message",
        "text": "<@UJN1TAYEQ> to defend Haskell culture \u2014 a bit of it and not to be confused with Haskell itself.  To make types consistent with liveness, you need holes: this part isn't filled in yet or these two parts are at odds because I'm reconciling them.  Now laziness strike me as nearly as important as purity: being able to ignore the timing of when a function gets evaluated.  Then treat change over time as a first class entity rather than a side effect function evaluation order.",
        "user": "UA14TGLTC",
        "ts": "1578876791.145200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q=O2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " to defend Haskell culture \u2014 a bit of it and not to be confused with Haskell itself.  To make types consistent with liveness, you need holes: this part isn't filled in yet or these two parts are at odds because I'm reconciling them.  Now laziness strike me as nearly as important as purity: being able to ignore the timing of when a function gets evaluated.  Then treat change over time as a first class entity rather than a side effect function evaluation order."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR"
    },
    {
        "client_msg_id": "24373528-3b55-49b8-8a6c-ae3028c4983b",
        "type": "message",
        "text": "Hazel has holes, and it is dynamically typed for this reason. It's a terminology issue. \"Dynamic typing\" is not academically respectable, so they had to use different terminology in the paper. But it's dynamic typing because they store type information in the data and check the type information at runtime, which Haskell doesn't do.\n\nI make a distinction between Haskell's lazy evaluation of function calls, and lazy data structures. No other languages I know have copied Haskell's lazy function calls, due to ease of use issues for the programmer (unpredictable performance and memory consumption), and due to high cost and complexity of implementation. Even Idris, which is even purer than Haskell, with its dependent types and total functions, uses strict evaluation order. Lazy function calls would be disastrous for Curv, but other forms of laziness will be necessary.\n\nCurv is a pure functional language. All functions are pure (have no side effects). The language guarantees that you can't use side effects to determine the order of evaluation of function calls within an expression. So yes, I do want to treat change over time as a first class entity. Curv totally works this way right now. However, the Haskell virtual machine (the way it implements laziness) is totally incompatible with running code on a GPU, so I may need to find new ways to model change over time in a pure functional language as Curv becomes more powerful. I feel that I cannot simply follow in Haskell's footsteps. Haskell just is not designed for GPUs. Haskell's model of laziness is intimately tied to a single-threaded execution model, while GPUs are data-parallel : that is part of the problem.",
        "user": "UJN1TAYEQ",
        "ts": "1578882161.145600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4kG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hazel has holes, and it is dynamically typed for this reason. It's a terminology issue. \"Dynamic typing\" is not academically respectable, so they had to use different terminology in the paper. But it's dynamic typing because they store type information in the data and check the type information at runtime, which Haskell doesn't do.\n\nI make a distinction between Haskell's lazy evaluation of function calls, and lazy data structures. No other languages I know have copied Haskell's lazy function calls, due to ease of use issues for the programmer (unpredictable performance and memory consumption), and due to high cost and complexity of implementation. Even Idris, which is even purer than Haskell, with its dependent types and total functions, uses strict evaluation order. Lazy function calls would be disastrous for Curv, but other forms of laziness will be necessary.\n\nCurv is a pure functional language. All functions are pure (have no side effects). The language guarantees that you can't use side effects to determine the order of evaluation of function calls within an expression. So yes, I do want to treat change over time as a first class entity. Curv totally works this way right now. However, the Haskell virtual machine (the way it implements laziness) is totally incompatible with running code on a GPU, so I may need to find new ways to model change over time in a pure functional language as Curv becomes more powerful. I feel that I cannot simply follow in Haskell's footsteps. Haskell just is not designed for GPUs. Haskell's model of laziness is intimately tied to a single-threaded execution model, while GPUs are data-parallel : that is part of the problem."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR"
    },
    {
        "client_msg_id": "f4b52c33-62a0-4d1b-b722-f27f54b4b27c",
        "type": "message",
        "text": "<@UHDQ62M4P> It wasn't clear to me how to navigate around using only the keyboard. Stuff like you can't exit a nested sheet using only the arrow keys: you hit an invisible wall at the edges. And how to get INTO a nested sheet took me a while: you can't navigate using the arrow keys from the cell text into the sheet, you need to hit SHIFT+ENTER.",
        "user": "UCGAK10LS",
        "ts": "1578890895.145800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MmFFv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHDQ62M4P"
                            },
                            {
                                "type": "text",
                                "text": " It wasn't clear to me how to navigate around using only the keyboard. Stuff like you can't exit a nested sheet using only the arrow keys: you hit an invisible wall at the edges. And how to get INTO a nested sheet took me a while: you can't navigate using the arrow keys from the cell text into the sheet, you need to hit SHIFT+ENTER."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "c7824c3a-09f3-4636-aa84-eca9cd2fd72a",
        "type": "message",
        "text": "The controls are learnable to be sure, they just defied my expectations.",
        "user": "UCGAK10LS",
        "ts": "1578890915.146000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ys7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The controls are learnable to be sure, they just defied my expectations."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "07b80d27-9bf7-43f1-8fd0-7e1785e9de5f",
        "type": "message",
        "text": "...also zooming is unusable on a Mac trackpad, because we don't have discrete clicks",
        "user": "UCGAK10LS",
        "ts": "1578890989.146200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1578891030.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tf52c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "...also zooming is unusable on a Mac trackpad, because we don't have discrete clicks"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "54cb5816-0f0a-475f-983e-4735d1cdcff9",
        "type": "message",
        "text": "The default text size is also too small for me and I couldn't find an app-wide slider for it (edit: nevermind, there's an option in Preferences, but I expected the \"zoom in\" under the View menu to do the same thing).",
        "user": "UCGAK10LS",
        "ts": "1578891127.146500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1578891266.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JuT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The default text size is also too small for me and I couldn't find an app-wide slider for it (edit: nevermind, there's an option in Preferences, but I expected the \"zoom in\" under the View menu to do the same thing)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "368ae6cb-2cfc-4de7-94b5-fa1590f553d4",
        "type": "message",
        "text": "I think bits and pieces of humane interface are very good, which unfortunately makes it the best thing I've read in this space. When I get the chance to return to fructure, I have lots of thoughts about mouse/pad navigation for structured editing. At a high level I'm still keen on approaching multimodal nav from the keyboard side, working on more richly spatializing key input. Less clickly clicky and more pushing and pulling and tossing and swishing. My hope is that by construing key input as physicalized interaction with tangible syntax, touch and mouse modes will drop out naturally.",
        "user": "UD31LGQKB",
        "ts": "1578894684.146900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "unB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think bits and pieces of humane interface are very good, which unfortunately makes it the best thing I've read in this space. When I get the chance to return to fructure, I have lots of thoughts about mouse/pad navigation for structured editing. At a high level I'm still keen on approaching multimodal nav from the keyboard side, working on more richly spatializing key input. Less clickly clicky and more pushing and pulling and tossing and swishing. My hope is that by construing key input as physicalized interaction with tangible syntax, touch and mouse modes will drop out naturally."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "014A5A79-926C-461F-9D1C-E1F28D790B4A",
        "type": "message",
        "text": "Another angle to look at this which could be inspirational might be through assistive technologies and their interaction models. How do you interact with just one button, two buttons/one dimension (backward/forward), and four buttons/two dimensions (directional pad).",
        "user": "U5STGTB3J",
        "ts": "1578895849.150300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TrSjS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another angle to look at this which could be inspirational might be through assistive technologies and their interaction models. How do you interact with just one button, two buttons/one dimension (backward/forward), and four buttons/two dimensions (directional pad)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "4f302683-8293-436c-8f3a-eb310bd7a0c1",
        "type": "message",
        "text": "Excellent point. Relatedly Ive been using NES + SNES controllers during development as motivators to keep my core interaction model tight <https://twitter.com/disconcision/status/1071275770306150401?s=19|https://twitter.com/disconcision/status/1071275770306150401?s=19> <https://twitter.com/disconcision/status/1071285028200472576?s=19|https://twitter.com/disconcision/status/1071285028200472576?s=19>",
        "user": "UD31LGQKB",
        "ts": "1578896843.150600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/disconcision|@disconcision>: #fructure <https://pbs.twimg.com/media/Dt3vlQ6WsAA0FGx.jpg>",
                "ts": 1544247021,
                "author_name": "andrew blinn",
                "author_link": "https://twitter.com/disconcision/status/1071275770306150401",
                "author_icon": "https://pbs.twimg.com/profile_images/983773516880232448/XsKqt1c8_normal.jpg",
                "author_subname": "@disconcision",
                "text": "#fructure <https://pbs.twimg.com/media/Dt3vlQ6WsAA0FGx.jpg>",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/disconcision/status/1071275770306150401?s=19",
                "image_url": "https://pbs.twimg.com/media/Dt3vlQ6WsAA0FGx.jpg",
                "image_width": 1200,
                "image_height": 675,
                "image_bytes": 94805,
                "id": 1,
                "original_url": "https://twitter.com/disconcision/status/1071275770306150401?s=19",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            },
            {
                "fallback": "<https://twitter.com/disconcision|@disconcision>: trying to button-mash a fixed-point combinator. as one do <https://pbs.twimg.com/ext_tw_video_thumb/1071284829134774272/pu/img/LvbtYpMZP563UhfP.jpg>",
                "ts": 1544249228,
                "author_name": "andrew blinn",
                "author_link": "https://twitter.com/disconcision/status/1071285028200472576",
                "author_icon": "https://pbs.twimg.com/profile_images/983773516880232448/XsKqt1c8_normal.jpg",
                "author_subname": "@disconcision",
                "text": "trying to button-mash a fixed-point combinator. as one do",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/disconcision/status/1071285028200472576?s=19",
                "thumb_url": "https://pbs.twimg.com/ext_tw_video_thumb/1071284829134774272/pu/img/LvbtYpMZP563UhfP.jpg",
                "thumb_width": 675,
                "thumb_height": 1200,
                "video_html_width": 675,
                "video_html_height": 1200,
                "video_html": "<video controls poster=\"https://pbs.twimg.com/ext_tw_video_thumb/1071284829134774272/pu/img/LvbtYpMZP563UhfP.jpg\" width=\"675\" height=\"1200\"><source type=\"video/mp4\" src=\"https://video.twimg.com/ext_tw_video/1071284829134774272/pu/vid/720x1280/OSMA_r-OZ3IY728l.mp4?tag=6\"></video>",
                "id": 2,
                "original_url": "https://twitter.com/disconcision/status/1071285028200472576?s=19",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4Ah8s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Excellent point. Relatedly Ive been using NES + SNES controllers during development as motivators to keep my core interaction model tight "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/disconcision/status/1071275770306150401?s=19",
                                "text": "https://twitter.com/disconcision/status/1071275770306150401?s=19"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/disconcision/status/1071285028200472576?s=19",
                                "text": "https://twitter.com/disconcision/status/1071285028200472576?s=19"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "4a993725-57ce-4e74-9321-748e9900db44",
        "type": "message",
        "text": "<@UCGAK10LS> Yeah I'm not a keyboard-only user, so no idea how easy that is. Also not sure how easy it is to match someone's expectations, since everyone has a different idea of what is natural, depending on what text editor, spreadsheet or outliner you come from. And yes, there are some new concepts to learn, such as how zoom and text scaling works in it, that are pretty powerful once you know.",
        "user": "UHDQ62M4P",
        "ts": "1578898239.150900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jQs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " Yeah I'm not a keyboard-only user, so no idea how easy that is. Also not sure how easy it is to match someone's expectations, since everyone has a different idea of what is natural, depending on what text editor, spreadsheet or outliner you come from. And yes, there are some new concepts to learn, such as how zoom and text scaling works in it, that are pretty powerful once you know."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "9b3b474e-486f-4ddb-b7a1-0e80b7126bb8",
        "type": "message",
        "text": "\u201cWHEN should I represent choices in a list. How can I use relative positioning effectively? How do I make important details visible at the right time? How do I avoid indirection?\u201d\n\nThese are the kinds of problems interaction designers are skilled at solving. I haven\u2019t seen a perfect book/source on this topic, but a couple of, perhaps too mainstream/practical, books I would recommend:\n\nAbout Face\n<https://www.amazon.com/About-Face-Essentials-Interaction-Design/dp/1118766571>\n\nDesigning Web Interfaces and Designing Interfaces:\n<https://www.amazon.com/Designing-Web-Interfaces-Principles-Interactions/dp/0596516258>\n<https://www.amazon.co.uk/dp/1449379702/>\n\nDon\u2019t Make me Think\n<https://www.amazon.co.uk/dp/0321965515/>\n\nRefactoring UI \u2014 more on the visual side, but does affect the \u201chow to make important details visible\u201d part:\n<https://refactoringui.com/book/>\n\nThere are also quite good articles, blog posts and ux.stackoverflow answers online on the usage of specific components or interactions, for example:\n<https://uxplanet.org/checkbox-vs-toggle-switch-7fc6e83f10b8>\n<https://blog.prototypr.io/how-to-choose-and-design-selection-controls-in-ux-ba4a68344118>\n\nAlso something quite important: many choices are specific to the target audience, what you want to optimize for and the user context. Most design problems are trade-offs between different goals, such as flexibility and ease-of-learning.",
        "user": "UEQ7QL15F",
        "ts": "1578899133.151200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ7QL15F",
            "ts": "1578901668.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZghFi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\u201cWHEN should I represent choices in a list. How can I use relative positioning effectively? How do I make important details visible at the right time? How do I avoid indirection?\u201d\n\nThese are the kinds of problems interaction designers are skilled at solving. I haven\u2019t seen a perfect book/source on this topic, but a couple of, perhaps too mainstream/practical, books I would recommend:\n\nAbout Face\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.amazon.com/About-Face-Essentials-Interaction-Design/dp/1118766571"
                            },
                            {
                                "type": "text",
                                "text": "\n\nDesigning Web Interfaces and Designing Interfaces:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.amazon.com/Designing-Web-Interfaces-Principles-Interactions/dp/0596516258"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.amazon.co.uk/dp/1449379702/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nDon\u2019t Make me Think\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.amazon.co.uk/dp/0321965515/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nRefactoring UI \u2014 more on the visual side, but does affect the \u201chow to make important details visible\u201d part:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://refactoringui.com/book/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThere are also quite good articles, blog posts and ux.stackoverflow answers online on the usage of specific components or interactions, for example:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://uxplanet.org/checkbox-vs-toggle-switch-7fc6e83f10b8"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://blog.prototypr.io/how-to-choose-and-design-selection-controls-in-ux-ba4a68344118"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAlso something quite important: many choices are specific to the target audience, what you want to optimize for and the user context. Most design problems are trade-offs between different goals, such as flexibility and ease-of-learning."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5STGTB3J",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "3d2e3651-b070-4905-9f32-a7ed4f3f0d7e",
        "type": "message",
        "text": "Last week's newsletter is slowly moving through a series of pipes to a mail box near you: <https://tinyletter.com/marianoguerra/letters/future-of-coding-weekly-2020-01-week-2>",
        "user": "UBN9AFS0N",
        "ts": "1578906654.152800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "TinyLetter",
                "title": "Future of Coding Weekly 2020/01 Week 2",
                "title_link": "https://tinyletter.com/marianoguerra/letters/future-of-coding-weekly-2020-01-week-2",
                "text": "Welcome to the 4th Future of Coding Newsletter, we are close to reaching 150 subscribers :)",
                "fallback": "TinyLetter: Future of Coding Weekly 2020/01 Week 2",
                "from_url": "https://tinyletter.com/marianoguerra/letters/future-of-coding-weekly-2020-01-week-2",
                "service_icon": "https://tinyletter.com/site/favicon.ico",
                "id": 1,
                "original_url": "https://tinyletter.com/marianoguerra/letters/future-of-coding-weekly-2020-01-week-2"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/iJwd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Last week's newsletter is slowly moving through a series of pipes to a mail box near you: "
                            },
                            {
                                "type": "link",
                                "url": "https://tinyletter.com/marianoguerra/letters/future-of-coding-weekly-2020-01-week-2"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578906654.152800",
        "reply_count": 11,
        "reply_users_count": 5,
        "latest_reply": "1578951142.179300",
        "reply_users": [
            "UE6EFEPTQ",
            "UBN9AFS0N",
            "UC2A2ARPT",
            "UD3AK9JRF",
            "UJ6LDMMN0"
        ],
        "subscribed": true,
        "last_read": "1578951203.181000",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UE6EFEPTQ",
                    "UJBAJNFLK",
                    "UC2A2ARPT",
                    "UD31LGQKB",
                    "U8A5MS6R1",
                    "USJSL2NVB",
                    "UJ6LDMMN0",
                    "U7C7B75R6",
                    "UA14TGLTC",
                    "UP00ZLX6G"
                ],
                "count": 10
            }
        ]
    },
    {
        "client_msg_id": "e55a2997-3239-48f9-8d69-b65d3d9aef8c",
        "type": "message",
        "text": "Hi, fellow innovator (yes, you!). I'm interested in your driving principles for the work you do in the future of programming/coding.\n\nFor example, \"state and i/o are bad/good\", \"text is bad/good\", \"always allow explorable explanations\", \"programmer must always see the data changing when the code changes\", \"anything else Bret Victor thinks\", \"don't allow syntax errors\", \"programming is about modelling the world\", \"it's time to break the programmer|corporate|etc priesthood!!\", \"declarative not imperative\", \"eliminate accidental complexity\", \"flappy bird in 10 lines\"..\n\nWhat are the fundamental principles you always look to (and have always held to, looking back) when making any technical or design decision, even if only subconsciously?",
        "user": "UE6EFEPTQ",
        "ts": "1578910495.160600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KCo6k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi, fellow innovator (yes, you!). I'm interested in your driving principles for the work you do in the future of programming/coding.\n\nFor example, \"state and i/o are bad/good\", \"text is bad/good\", \"always allow explorable explanations\", \"programmer must always see the data changing when the code changes\", \"anything else Bret Victor thinks\", \"don't allow syntax errors\", \"programming is about modelling the world\", \"it's time to break the programmer|corporate|etc priesthood!!\", \"declarative not imperative\", \"eliminate accidental complexity\", \"flappy bird in 10 lines\"..\n\nWhat are the fundamental principles you always look to (and have always held to, looking back) when making any technical or design decision, even if only subconsciously?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "reply_count": 35,
        "reply_users_count": 12,
        "latest_reply": "1579211469.244000",
        "reply_users": [
            "UE6EFEPTQ",
            "UBN9AFS0N",
            "UKFNXF0F9",
            "UNBPP291C",
            "UKDM3GLAJ",
            "ULM3U6275",
            "UG0EL18H3",
            "UL3CJ7YKC",
            "U8A5MS6R1",
            "UMWF81HTP",
            "UHWC9PXBL",
            "U6KQ2S410"
        ],
        "subscribed": true,
        "last_read": "1579211469.244000",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT",
                    "U8A5MS6R1",
                    "UNCP67JSK"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "b7d86877-bdd7-435d-b3d6-7e741a558c55",
        "type": "message",
        "text": "Thread starts here.. :+1::skin-tone-3::smiley:",
        "user": "UE6EFEPTQ",
        "ts": "1578910504.160700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1578910574.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z+mdO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thread starts here.. "
                            },
                            {
                                "type": "emoji",
                                "name": "+1",
                                "skin_tone": 3
                            },
                            {
                                "type": "emoji",
                                "name": "smiley"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "type": "message",
        "text": "Lobste.rs liked even less than Product Hunt :stuck_out_tongue:",
        "files": [
            {
                "id": "FSMTWDCTY",
                "created": 1578916497,
                "timestamp": 1578916497,
                "name": "Screenshot_20200113_125408.png",
                "title": "Screenshot_20200113_125408.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UBN9AFS0N",
                "editable": false,
                "size": 12227,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-FSMTWDCTY/screenshot_20200113_125408.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-FSMTWDCTY/download/screenshot_20200113_125408.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-FSMTWDCTY-6f719f1f55/screenshot_20200113_125408_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-FSMTWDCTY-6f719f1f55/screenshot_20200113_125408_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-FSMTWDCTY-6f719f1f55/screenshot_20200113_125408_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 32,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-FSMTWDCTY-6f719f1f55/screenshot_20200113_125408_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 42,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-FSMTWDCTY-6f719f1f55/screenshot_20200113_125408_160.png",
                "image_exif_rotation": 1,
                "original_w": 554,
                "original_h": 49,
                "thumb_tiny": "AwAEADDR74ooP3jRQAUUUUALRmiigD//2Q==",
                "permalink": "https://futureofcoding.slack.com/files/UBN9AFS0N/FSMTWDCTY/screenshot_20200113_125408.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-FSMTWDCTY-e0029075be",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": true,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X5PiA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lobste.rs liked even less than Product Hunt "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UBN9AFS0N",
        "display_as_bot": false,
        "ts": "1578916499.161300",
        "client_msg_id": "01d2c135-910d-42a7-995f-9356ef418157",
        "reactions": [
            {
                "name": "sneezing_face",
                "users": [
                    "UC2A2ARPT",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "e684d230-c23f-4721-8a6a-73b007558868",
        "type": "message",
        "text": "I will try to come around with a more distilled version, since I've a sense of what I'm after but never put it into words, here goes draft 1:\n\n\u2022 Both data and logic visible\n\u2022 As declarative as possible, as imperative as needed\n\u2022 Visual (no syntax errors)\n\u2022 If one thing is draggable in one place, it should be draggable anywhere else\n\u2022 Highlight valid targets when dragging\n\u2022 Drop the \"form\" metaphor, no forms, no submits\n\u2022 Changes apply instantly\n\u2022 Undo through history (time traveling versioning)\n\u2022 As few concepts as possible, but no fewer",
        "user": "UBN9AFS0N",
        "ts": "1578916572.161600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1578916771.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RYX9L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I will try to come around with a more distilled version, since I've a sense of what I'm after but never put it into words, here goes draft 1:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Both data and logic visible"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "As declarative as possible, as imperative as needed"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Visual (no syntax errors)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "If one thing is draggable in one place, it should be draggable anywhere else"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Highlight valid targets when dragging"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Drop the \"form\" metaphor, no forms, no submits"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Changes apply instantly"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Undo through history (time traveling versioning)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "As few concepts as possible, but no fewer"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ",
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UE6EFEPTQ",
                    "ULM3U6275",
                    "USJSL2NVB",
                    "UHWC9PXBL",
                    "UNCP67JSK"
                ],
                "count": 5
            }
        ]
    },
    {
        "client_msg_id": "27e6f3a4-4946-4e56-85d3-2e3130a4962f",
        "type": "message",
        "text": "Cool, thanks!\n(More distilled is kinda what I'm hoping for, yes! :smile: )",
        "user": "UE6EFEPTQ",
        "ts": "1578917037.162100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r=o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cool, thanks!\n(More distilled is kinda what I'm hoping for, yes! "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            },
                            {
                                "type": "text",
                                "text": " )"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "f1b87dd5-a1fe-4229-aedd-669d53b00f3f",
        "type": "message",
        "text": "or more abstract perhaps",
        "user": "UE6EFEPTQ",
        "ts": "1578917050.162300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pjT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "or more abstract perhaps"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "7591103f-24ac-4c71-8a51-8a33e3ac00c1",
        "type": "message",
        "text": "1. Allow me to organize the source code in the way I want, so that when reading the source code to understand the behavior, the movement of attention can be minized. ",
        "user": "UKFNXF0F9",
        "ts": "1578917129.162500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SL=N",
                "elements": [
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Allow me to organize the source code in the way I want, so that when reading the source code to understand the behavior, the movement of attention can be minized. "
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "2b664ff3-2614-4994-930f-967b145ee5df",
        "type": "message",
        "text": "State is a result of i/o (user interactions + code), so it isn\u2019t good or bad, it\u2019s just an emergent property of code. Scoping it is the tricky part, and keeping it from bubbling up the scope.\n\nText is good, but any text input should be augmented to assist user (autocompletion, refactor, validation etc) by using existing code and predefined/learned knowledge.\nThis doesn\u2019t allow for syntax errors and makes them obvious. We need to focus on writing _with_ computers, not _for_ computers. If we\u2019re the craftsman, the computer is the apprentice and is here to do the mundane tasks and hand us the tools we need when we need them.\nWe don\u2019t need better languages - we need better tools. We need an apprentice that\u2019s going to put the mundane boilerplate behind us.\n\nA lot of boilerplate and complexity in software development exists because different worlds collide in a single project - different kinds of developers and designers, each creating their own little universes with their own little stacks and models and processes and standards. Then you add a project manager to connect all those little universes, smashing them together into one and hoping for the best. I believe we should be doing it differently - one universe from the ground up.\n\nI believe programming is about expressing ideas and creating universes, and to create a universe for our idea we first must shape the data we want to use, so in a sense it is about modelling a world - you\u2019re setting the laws, boundaries, basic elements of a whole new universe. Sometimes, you model it according to ours and copy over models and abstractions of how things work here. Then you can take a bird\u2019s eye view of that and change it to your will to optimise interactions. Sometimes, you take the power to create from nothing and build the ideal world and then it\u2019s all up to you and your creativity to come up with a solution.\n\n\nSo when I\u2019d have to compile it to some fundamental principles, I\u2019d go with:\n\u2022 Model the basic universe structures, then interactions between them\n\u2022 Treat state as an emergent property and recognize it as such, allowing you not to think of it as bad or good but noticing it and managing it.\n\u2022 Write minimal code - template stuff, standardise stuff in your team, use those standards to write small tools, use those tools to generate code. You work _with_ the computer, use the code at your disposal and cut the mundane boilerplate. The boilerplate is where mistakes happen (including human communication when something could be automated).\n\u2022 Be the laziest you can be when designing both developer and user interfaces. Less typing is more productivity.\n\u2022 Don\u2019t let ego effect your code. By that I don\u2019t mean the \u201cthis is the best way to make it and that\u2019s it\u201d, by that I also mean \u201ci\u2019ll stick with the known because I\u2019m afraid to dive into unknown\u201d. Keep it balanced. Explore, sketch, rough out the idea, the compare. You can always revert here, there is no fucking up while you\u2019re exploring.\n\u2022 Assist the user in making decisions, but don\u2019t do it for them. \n\u2022 Keep your code structures tree-like. Meaning from the root, it\u2019s easy to see it\u2019s first/second level depth children and interactions between them. Their children\u2019s children should be implementation details and you should dive into them only when needed. If you can\u2019t find \u201croot\u201d, look at the code as a dependency graph and you\u2019ll see that it emerges anyways as an interlink of dependencies and interactions.\n\u2022 Everything can be configured and is configurable by the user. Everything. \n\u2022 The samurai technique - minimal movement, maximum effectiveness.",
        "user": "UNBPP291C",
        "ts": "1578917133.162700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xN+E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "State is a result of i/o (user interactions + code), so it isn\u2019t good or bad, it\u2019s just an emergent property of code. Scoping it is the tricky part, and keeping it from bubbling up the scope.\n\nText is good, but any text input should be augmented to assist user (autocompletion, refactor, validation etc) by using existing code and predefined/learned knowledge.\nThis doesn\u2019t allow for syntax errors and makes them obvious. We need to focus on writing "
                            },
                            {
                                "type": "text",
                                "text": "with",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " computers, not "
                            },
                            {
                                "type": "text",
                                "text": "for",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " computers. If we\u2019re the craftsman, the computer is the apprentice and is here to do the mundane tasks and hand us the tools we need when we need them.\nWe don\u2019t need better languages - we need better tools. We need an apprentice that\u2019s going to put the mundane boilerplate behind us.\n\nA lot of boilerplate and complexity in software development exists because different worlds collide in a single project - different kinds of developers and designers, each creating their own little universes with their own little stacks and models and processes and standards. Then you add a project manager to connect all those little universes, smashing them together into one and hoping for the best. I believe we should be doing it differently - one universe from the ground up.\n\nI believe programming is about expressing ideas and creating universes, and to create a universe for our idea we first must shape the data we want to use, so in a sense it is about modelling a world - you\u2019re setting the laws, boundaries, basic elements of a whole new universe. Sometimes, you model it according to ours and copy over models and abstractions of how things work here. Then you can take a bird\u2019s eye view of that and change it to your will to optimise interactions. Sometimes, you take the power to create from nothing and build the ideal world and then it\u2019s all up to you and your creativity to come up with a solution.\n\n\nSo when I\u2019d have to compile it to some fundamental principles, I\u2019d go with:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Model the basic universe structures, then interactions between them"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Treat state as an emergent property and recognize it as such, allowing you not to think of it as bad or good but noticing it and managing it."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Write minimal code - template stuff, standardise stuff in your team, use those standards to write small tools, use those tools to generate code. You work "
                                    },
                                    {
                                        "type": "text",
                                        "text": "with",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " the computer, use the code at your disposal and cut the mundane boilerplate. The boilerplate is where mistakes happen (including human communication when something could be automated)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Be the laziest you can be when designing both developer and user interfaces. Less typing is more productivity."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Don\u2019t let ego effect your code. By that I don\u2019t mean the \u201cthis is the best way to make it and that\u2019s it\u201d, by that I also mean \u201ci\u2019ll stick with the known because I\u2019m afraid to dive into unknown\u201d. Keep it balanced. Explore, sketch, rough out the idea, the compare. You can always revert here, there is no fucking up while you\u2019re exploring."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Assist the user in making decisions, but don\u2019t do it for them. "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Keep your code structures tree-like. Meaning from the root, it\u2019s easy to see it\u2019s first/second level depth children and interactions between them. Their children\u2019s children should be implementation details and you should dive into them only when needed. If you can\u2019t find \u201croot\u201d, look at the code as a dependency graph and you\u2019ll see that it emerges anyways as an interlink of dependencies and interactions."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Everything can be configured and is configurable by the user. Everything. "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The samurai technique - minimal movement, maximum effectiveness."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "ae600c5a-7c18-4268-ab6f-a5bed4775327",
        "type": "message",
        "text": "2. Allow me to comprehend the runtime behavior without guessing. The linking between source code and runtime behavior is present to me without effort.",
        "user": "UKFNXF0F9",
        "ts": "1578917232.162900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xyT59",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "2. Allow me to comprehend the runtime behavior without guessing. The linking between source code and runtime behavior is present to me without effort."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "8dc3108b-a10c-4347-ac60-f7b05ae49ab0",
        "type": "message",
        "text": "Just wanna say how much I appreciate the work you put in to doing this, <@UBN9AFS0N>! I know it is quite a commitment to do this kind of thing.\nMaybe we can crowd-source it somehow to spread the load?",
        "user": "UE6EFEPTQ",
        "ts": "1578917558.163100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kUZUb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just wanna say how much I appreciate the work you put in to doing this, "
                            },
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": "! I know it is quite a commitment to do this kind of thing.\nMaybe we can crowd-source it somehow to spread the load?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578906654.152800",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "e64435d9-8b1a-4222-9659-690e7ec41288",
        "type": "message",
        "text": "This is all brilliant stuff. I may have triggered a tsunami though!! Excellent. :smile:",
        "user": "UE6EFEPTQ",
        "ts": "1578917612.163300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TYaP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is all brilliant stuff. I may have triggered a tsunami though!! Excellent. "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "8dcb2450-c890-428e-b802-642c0d71e41f",
        "type": "message",
        "text": "thanks! I built it in a way meant to be crowdsorced, here are the instructions: <https://github.com/marianoguerra/future-of-coding-weekly#contribute> and for this week <https://github.com/marianoguerra/future-of-coding-weekly/issues/5>",
        "user": "UBN9AFS0N",
        "ts": "1578917631.163500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Kkaz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "thanks! I built it in a way meant to be crowdsorced, here are the instructions: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/marianoguerra/future-of-coding-weekly#contribute"
                            },
                            {
                                "type": "text",
                                "text": " and for this week "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/marianoguerra/future-of-coding-weekly/issues/5"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578906654.152800",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UE6EFEPTQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "632654ce-5282-41f3-9b13-9119a79979a4",
        "type": "message",
        "text": "<@UNBPP291C> `modelling a world - you're setting the laws` A majority of software is written just for enforcing business contract, essentially setting some laws. There are two fundermental apporach to setting the law:\n1. Own the data, make every write through you. This is called 'Entity'. So that data must have identity.\n2. Make the data portable, along with its rules. This is called 'Value Object'. \nMost of time, Entity is the only way to enforce the contract. Making \"master data\" partitioned and ownership clear is essential and hard. Delegating reponsibility to manage the data to carry out the logic is an art.",
        "user": "UKFNXF0F9",
        "ts": "1578918248.163700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B0R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UNBPP291C"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "modelling a world - you're setting the laws",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " A majority of software is written just for enforcing business contract, essentially setting some laws. There are two fundermental apporach to setting the law:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Own the data, make every write through you. This is called 'Entity'. So that data must have identity."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Make the data portable, along with its rules. This is called 'Value Object'. "
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Most of time, Entity is the only way to enforce the contract. Making \"master data\" partitioned and ownership clear is essential and hard. Delegating reponsibility to manage the data to carry out the logic is an art."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "680c14a0-c894-4039-ac87-23f9c0153bc9",
        "type": "message",
        "text": "<@UJN1TAYEQ> - thanks. <http://www.cs.yale.edu/homes/perlis-alan/quotes.html>",
        "user": "UK22Z72L8",
        "ts": "1578921342.164100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RM64",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " - thanks. "
                            },
                            {
                                "type": "link",
                                "url": "http://www.cs.yale.edu/homes/perlis-alan/quotes.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578675872.100700",
        "parent_user_id": "UK22Z72L8"
    },
    {
        "client_msg_id": "f8c1e04d-2094-44fe-ad82-aeb34c8d7652",
        "type": "message",
        "text": "<@UC6997THT> I actually think the security issue is less of a problem. Part of the app-less vision is that it\u2019s _your_ computer doing all the work. You have the right components so that you can build your own tool to look at your own calendar and order your own ride. Each component is sandboxed, simple, and has a type so you can know if it\u2019s not performing any I/O you don\u2019t ask of it.",
        "user": "UC21F8Q48",
        "ts": "1578924841.164400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9z+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC6997THT"
                            },
                            {
                                "type": "text",
                                "text": " I actually think the security issue is less of a problem. Part of the app-less vision is that it\u2019s "
                            },
                            {
                                "type": "text",
                                "text": "your",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " computer doing all the work. You have the right components so that you can build your own tool to look at your own calendar and order your own ride. Each component is sandboxed, simple, and has a type so you can know if it\u2019s not performing any I/O you don\u2019t ask of it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578318823.435400",
        "parent_user_id": "UC21F8Q48"
    },
    {
        "client_msg_id": "290a8196-5733-4d28-8b10-a9a666e99182",
        "type": "message",
        "text": "<https://www.alexhudson.com/2020/01/13/the-no-code-delusion/>",
        "user": "UMYKGHYBA",
        "ts": "1578924949.164800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Alex Hudson",
                "title": "The 'No Code' Delusion",
                "title_link": "https://www.alexhudson.com/2020/01/13/the-no-code-delusion/",
                "text": "Increasingly popular in the last couple of years, I think 2020 is going to be the year of \u201cno code\u201d: the movement that say you can write business logic and even entire applications without having the training of a software developer. I empathise with people doing this, and I think some of the \u201cno code\u201d tools are great. But I also thing it\u2019s wrong at heart.",
                "fallback": "Alex Hudson: The 'No Code' Delusion",
                "thumb_url": "https://www.alexhudson.com/wp-content/uploads/2011/08/Profile.jpg",
                "ts": 1578911062,
                "from_url": "https://www.alexhudson.com/2020/01/13/the-no-code-delusion/",
                "thumb_width": 150,
                "thumb_height": 150,
                "id": 1,
                "original_url": "https://www.alexhudson.com/2020/01/13/the-no-code-delusion/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "siyR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.alexhudson.com/2020/01/13/the-no-code-delusion/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578924949.164800",
        "reply_count": 19,
        "reply_users_count": 9,
        "latest_reply": "1579032795.194700",
        "reply_users": [
            "UBN9AFS0N",
            "UPVBV34EL",
            "UMVH31ML3",
            "U8A5MS6R1",
            "ULM3U6275",
            "U6FKVSVCK",
            "UQPF68WJ3",
            "URV7B2542",
            "UJ6LDMMN0"
        ],
        "subscribed": true,
        "last_read": "1579032795.194700"
    },
    {
        "client_msg_id": "cbb81718-8639-472d-9453-b171d774a3c4",
        "type": "message",
        "text": "<@U5STGTB3J> UIST 2020 will be in Minneapolis Oct 20-23 <http://uist.acm.org/uist2020/>. You could go and find these people. But keep in mind that, as Michel lamented, software is not the main focus anymore. This year\u2019s talks give a sense of the current focus: <https://www.youtube.com/playlist?list=PLqhXYFYmZ-Vfu0KfdHiw0oZl50QTEPrBp>. We did get Sketch-n-Sketch into UIST though.",
        "user": "UC21F8Q48",
        "ts": "1578925207.165000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "UIST 2020: 33rd ACM User Interface Software and Technology Symposium",
                "title_link": "http://uist.acm.org/uist2020/",
                "text": "Evential - One Page Event HTML Template",
                "fallback": "UIST 2020: 33rd ACM User Interface Software and Technology Symposium",
                "from_url": "http://uist.acm.org/uist2020/",
                "service_name": "uist.acm.org",
                "id": 1,
                "original_url": "http://uist.acm.org/uist2020/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "alMjG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " UIST 2020 will be in Minneapolis Oct 20-23 "
                            },
                            {
                                "type": "link",
                                "url": "http://uist.acm.org/uist2020/"
                            },
                            {
                                "type": "text",
                                "text": ". You could go and find these people. But keep in mind that, as Michel lamented, software is not the main focus anymore. This year\u2019s talks give a sense of the current focus: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/playlist?list=PLqhXYFYmZ-Vfu0KfdHiw0oZl50QTEPrBp"
                            },
                            {
                                "type": "text",
                                "text": ". We did get Sketch-n-Sketch into UIST though."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578318823.435400",
        "parent_user_id": "UC21F8Q48"
    },
    {
        "client_msg_id": "2f6675d9-defb-404d-95c5-0feae4fc76ee",
        "type": "message",
        "text": "The article seems to argue against using No Code to develop your core business logic, or to fully replace traditional programming. If that's the delusion, then I agree, I believe No Code should (and maybe will) eat the edges of programming, the boring repetitive CRUD apps, form validation, data integration, ETL, business workflows, data visuaization. If he believes that removing traditional programming from the edges is a delusion, then I don't agree :slightly_smiling_face:",
        "user": "UBN9AFS0N",
        "ts": "1578925214.165300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1578925250.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ELLP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The article seems to argue against using No Code to develop your core business logic, or to fully replace traditional programming. If that's the delusion, then I agree, I believe No Code should (and maybe will) eat the edges of programming, the boring repetitive CRUD apps, form validation, data integration, ETL, business workflows, data visuaization. If he believes that removing traditional programming from the edges is a delusion, then I don't agree "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578924949.164800",
        "parent_user_id": "UMYKGHYBA",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UNBPP291C",
                    "ULM3U6275",
                    "UFLN9JFRT",
                    "UA14TGLTC",
                    "UHWC9PXBL"
                ],
                "count": 5
            }
        ]
    },
    {
        "client_msg_id": "d8ad0c08-3ad3-4b94-af63-72edaef87507",
        "type": "message",
        "text": "Yes, I just read it following a post in HN and then was thinking to post here but saw that it is already done. I agree with <@UBN9AFS0N> about his argument. As a programmer I do see the value to NOT to write code for a certain class of application. It is boring, non productive, and adds little value in each iteration,",
        "user": "UPVBV34EL",
        "ts": "1578926497.165700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/6o8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, I just read it following a post in HN and then was thinking to post here but saw that it is already done. I agree with "
                            },
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " about his argument. As a programmer I do see the value to NOT to write code for a certain class of application. It is boring, non productive, and adds little value in each iteration,"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578924949.164800",
        "parent_user_id": "UMYKGHYBA",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7f6eb11c-5b85-4cbd-bff1-61b6cfe37361",
        "type": "message",
        "text": "Thanks Mariano! I love starting my Monday catching up on things I missed here, or being reminded of things I enjoyed the first time around. If you're feeling good about the workload, great! If you need help, let me know or ask openly, since I think this is a great addition to the community.",
        "user": "UC2A2ARPT",
        "ts": "1578929033.166000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/M43F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks Mariano! I love starting my Monday catching up on things I missed here, or being reminded of things I enjoyed the first time around. If you're feeling good about the workload, great! If you need help, let me know or ask openly, since I think this is a great addition to the community."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578906654.152800",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "aabf9710-bd4e-413d-9eba-9377f22df3ac",
        "type": "message",
        "text": "I have 2 months to think how to handle the newsletter on my vacations :slightly_smiling_face:",
        "user": "UBN9AFS0N",
        "ts": "1578929228.166200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LkDXq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have 2 months to think how to handle the newsletter on my vacations "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578906654.152800",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6a65491a-33cc-457c-a11c-467a01c26b58",
        "type": "message",
        "text": "I think \u201cno code\u201d has the same misleading value as \u201cserverless\u201d. It\u2019s not \u201cno code\u201d it\u2019s \u201csomone else code\u201d",
        "user": "UMVH31ML3",
        "ts": "1578930573.166500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lqLe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think \u201cno code\u201d has the same misleading value as \u201cserverless\u201d. It\u2019s not \u201cno code\u201d it\u2019s \u201csomone else code\u201d"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578924949.164800",
        "parent_user_id": "UMYKGHYBA",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "98dac3ce-a5e9-49be-84e2-065c6bba0a79",
        "type": "message",
        "text": "isn't programming full of someone else's code?",
        "user": "UBN9AFS0N",
        "ts": "1578930725.166700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "exO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "isn't programming full of someone else's code?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578924949.164800",
        "parent_user_id": "UMYKGHYBA"
    },
    {
        "client_msg_id": "8ff53222-c407-491f-aad2-aad9ee05f943",
        "type": "message",
        "text": "check the dependencies of `react-scripts` used by the `create-react-app` tool <https://npm.anvaka.com/#/view/2d/react-scripts>",
        "user": "UBN9AFS0N",
        "ts": "1578930763.166900",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Visualization of npm dependencies",
                "title_link": "https://npm.anvaka.com/#/view/2d/react-scripts",
                "text": "Visualization of npm dependencies",
                "fallback": "Visualization of npm dependencies",
                "from_url": "https://npm.anvaka.com/#/view/2d/react-scripts",
                "service_name": "npm.anvaka.com",
                "id": 1,
                "original_url": "https://npm.anvaka.com/#/view/2d/react-scripts"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cX35H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "check the dependencies of "
                            },
                            {
                                "type": "text",
                                "text": "react-scripts",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " used by the "
                            },
                            {
                                "type": "text",
                                "text": "create-react-app",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " tool "
                            },
                            {
                                "type": "link",
                                "url": "https://npm.anvaka.com/#/view/2d/react-scripts"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578924949.164800",
        "parent_user_id": "UMYKGHYBA"
    },
    {
        "client_msg_id": "7c2c524c-6888-4827-849a-d74783bbffea",
        "type": "message",
        "text": "ha-ha, that\u2019s a good point. I wanted to say that you\u2019ll not escape of development with \u201cno code\u201d approach, it\u2019s still there, but in another form",
        "user": "UMVH31ML3",
        "ts": "1578931237.167200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HPy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ha-ha, that\u2019s a good point. I wanted to say that you\u2019ll not escape of development with \u201cno code\u201d approach, it\u2019s still there, but in another form"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578924949.164800",
        "parent_user_id": "UMYKGHYBA"
    },
    {
        "client_msg_id": "1bc094bc-8eb0-4c66-a2be-13887638ced5",
        "type": "message",
        "text": "&gt; Assist the user in making decisions, but don\u2019t do it for them. \nI think this is actually a really deep point and can be applied in a fractal (scope-invariant) kind of way. I think this can mean things like making all of the settings configurable, but providing sane defaults. But it can also mean building your app as a composition of pieces in a framework that the user can rewire. Or it can mean building abstractions in code in such a way that they provide value, but can still be decomposed and recombined in ways you didn\u2019t have to account for/expect. Or maybe I\u2019m just reading all of this into it. But it all seems like the same thing to me.",
        "user": "UKDM3GLAJ",
        "ts": "1578933575.168000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RUXx/",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Assist the user in making decisions, but don\u2019t do it for them. "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think this is actually a really deep point and can be applied in a fractal (scope-invariant) kind of way. I think this can mean things like making all of the settings configurable, but providing sane defaults. But it can also mean building your app as a composition of pieces in a framework that the user can rewire. Or it can mean building abstractions in code in such a way that they provide value, but can still be decomposed and recombined in ways you didn\u2019t have to account for/expect. Or maybe I\u2019m just reading all of this into it. But it all seems like the same thing to me."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "cdd4188b-231b-46d8-90db-7c43bbf34bea",
        "type": "message",
        "text": "For items that come from a Slack post, perhaps you could link back to the post, so readers can respond?",
        "user": "UD3AK9JRF",
        "ts": "1578936498.168300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3mBO9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For items that come from a Slack post, perhaps you could link back to the post, so readers can respond?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578906654.152800",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "2898bbc2-27ad-4e2d-aa22-6ca4f5f72838",
        "type": "message",
        "text": "great idea!",
        "user": "UBN9AFS0N",
        "ts": "1578937014.168500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dOtWo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "great idea!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578906654.152800",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "234e6c5a-316f-4cac-b9b1-2541804d1fc9",
        "type": "message",
        "text": "let me check if it works <https://futureofcoding.slack.com/archives/CCL5VVBAN/p1578924156032900>",
        "user": "UBN9AFS0N",
        "ts": "1578937080.168700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/CCL5VVBAN/p1578924156032900",
                "fallback": "[January 13th, 2020 6:02 AM] mariano: No Code Data Science Update: Drag &amp; Drop Basket, Workspaces and Search\n\nEasier drag &amp; drop of one or more items across long distances or across screens with the basket.\n\nWorkspaces can be created to work on different tasks and search used to navigate between them.\n\n<https://www.youtube.com/watch?v=g1LyPBPNJiI>",
                "ts": "1578924156.032900",
                "author_id": "UBN9AFS0N",
                "author_subname": "Mariano Guerra",
                "channel_id": "CCL5VVBAN",
                "channel_name": "feedback",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "No Code Data Science Update: Drag &amp; Drop Basket, Workspaces and Search\n\nEasier drag &amp; drop of one or more items across long distances or across screens with the basket.\n\nWorkspaces can be created to work on different tasks and search used to navigate between them.\n\n<https://www.youtube.com/watch?v=g1LyPBPNJiI>",
                "author_name": "Mariano Guerra",
                "author_link": "https://futureofcoding.slack.com/team/UBN9AFS0N",
                "author_icon": "https://avatars.slack-edge.com/2018-07-09/395086754178_7f0f1c0238ec02befdab_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/CCL5VVBAN/p1578924156032900",
                "footer": "Thread in #feedback"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f/fG0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "let me check if it works "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/CCL5VVBAN/p1578924156032900"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578906654.152800",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "90220e81-048b-42cc-882d-3651d699c755",
        "type": "message",
        "text": "yep",
        "user": "UBN9AFS0N",
        "ts": "1578937088.169000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nHr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yep"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578906654.152800",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "8e4fb56c-ac75-49dd-a5bb-0b781c4cb2c5",
        "type": "message",
        "text": "It\u2019s kind of unfortunate that you need an account to access Slack history. I don\u2019t think of what I say on here as private.",
        "user": "UD3AK9JRF",
        "ts": "1578937283.169200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Krx0b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It\u2019s kind of unfortunate that you need an account to access Slack history. I don\u2019t think of what I say on here as private."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578906654.152800",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "61b3f236-8135-4bb2-9b12-777f5fcbc97e",
        "type": "message",
        "text": "That's probably the #1 most cited reason for us to move away from Slack. Many folks (myself included) dearly want the contributions to this community to be as publicly available and long-lived as possible.",
        "user": "UC2A2ARPT",
        "ts": "1578937693.169400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aWg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's probably the #1 most cited reason for us to move away from Slack. Many folks (myself included) dearly want the contributions to this community to be as publicly available and long-lived as possible."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578906654.152800",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD3AK9JRF",
                    "UE6EFEPTQ",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "6eb518af-9166-42a2-a572-a95ee64a6a29",
        "type": "message",
        "text": "Security is already a huge concern. You can control which apps can access your camera, but not how your information is used or to whom it\u2019s transmitted. The world we\u2019re trying to imagine here is one intensely focused on data integration, where it should be natural to reason about, and enforce policies around, data flows and provenance.",
        "user": "UD3AK9JRF",
        "ts": "1578938303.169700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y8kzN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Security is already a huge concern. You can control which apps can access your camera, but not how your information is used or to whom it\u2019s transmitted. The world we\u2019re trying to imagine here is one intensely focused on data integration, where it should be natural to reason about, and enforce policies around, data flows and provenance."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578318823.435400",
        "parent_user_id": "UC21F8Q48"
    },
    {
        "client_msg_id": "4f321f0b-a26d-4baf-892d-6dc0e3fbdce1",
        "type": "message",
        "text": "Think Eve, not.. anything normal.",
        "user": "UD3AK9JRF",
        "ts": "1578938345.169900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fg6G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Think Eve, not.. anything normal."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578318823.435400",
        "parent_user_id": "UC21F8Q48"
    },
    {
        "client_msg_id": "3988c8b0-f4a4-4444-abdb-5494a7fa2469",
        "type": "message",
        "text": "Focus on reusability. Find the atoms of form and function.",
        "user": "ULM3U6275",
        "ts": "1578938609.170200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xy2F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Focus on reusability. Find the atoms of form and function."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "928e6c6a-7b0f-462e-be6a-244f6f3b190c",
        "type": "message",
        "text": "Have we 'escaped' machine code? (Has 'no machine code' been a successful endeavor?)",
        "user": "U8A5MS6R1",
        "ts": "1578938857.170500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rmFVx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Have we 'escaped' machine code? (Has 'no machine code' been a successful endeavor?)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578924949.164800",
        "parent_user_id": "UMYKGHYBA",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "ULM3U6275",
                    "UFLN9JFRT",
                    "UQPF68WJ3"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "1f8b1262-555d-4b9c-a166-c60e07a7aa14",
        "type": "message",
        "text": "My questions were the same as some of the ones from the talk: who coordinates the effort to design, build, evaluate, and maintain this system (if it is one system); how is that work sustained; to whom is it accountable and how.\nAnd the juicy stuff: what does designing for everyone, doing everything, in every context look like? What are the goals and constraints of the software that would make this possible, maybe easy?\nAs someone in the audience pointed out, people have been thinking about the juicy stuff for a long time. I read a 25-year-old paper on it from the other day. Besides being adorably focused on CLOS, its ideas are very familiar.\nOn the other hand, there has been much discussion and some real innovation in how we coordinate work over the last twenty years (e.g. GitHub, open source business models, OpenCollective). Some of it is relevant to the first question.\nI very much want a space to talk about these things, ideally with people with real, relevant experience.",
        "user": "UD3AK9JRF",
        "ts": "1578939043.170800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "amA26",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My questions were the same as some of the ones from the talk: who coordinates the effort to design, build, evaluate, and maintain this system (if it is one system); how is that work sustained; to whom is it accountable and how.\nAnd the juicy stuff: what does designing for everyone, doing everything, in every context look like? What are the goals and constraints of the software that would make this possible, maybe easy?\nAs someone in the audience pointed out, people have been thinking about the juicy stuff for a long time. I read a 25-year-old paper on it from the other day. Besides being adorably focused on CLOS, its ideas are very familiar.\nOn the other hand, there has been much discussion and some real innovation in how we coordinate work over the last twenty years (e.g. GitHub, open source business models, OpenCollective). Some of it is relevant to the first question.\nI very much want a space to talk about these things, ideally with people with real, relevant experience."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578318823.435400",
        "parent_user_id": "UC21F8Q48"
    },
    {
        "client_msg_id": "2209b3cd-02c9-4430-81d9-e1edfe49b93d",
        "type": "message",
        "text": "While there are complex things best expressed through code, I suspect that most code currently written would be unnecessary if it were 1) properly abstracted and reused 2) configuration level details were moved to user control. So most \u201ccode\u201d could be \u201cno code\u201d.",
        "user": "ULM3U6275",
        "ts": "1578939091.171000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1578939123.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+gc9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "While there are complex things best expressed through code, I suspect that most code currently written would be unnecessary if it were 1) properly abstracted and reused 2) configuration level details were moved to user control. So most \u201ccode\u201d could be \u201cno code\u201d."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578924949.164800",
        "parent_user_id": "UMYKGHYBA",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "720e6873-faf6-4973-bc5d-10d135c1f2f0",
        "type": "message",
        "text": "<@UD3AK9JRF> If components are pure functions, then you know that no transmission can happen. We\u2019re just too used to a world where programs can perform arbitrary I/O. The permission you give to the component is not to access the camera (that\u2019s easy, that\u2019s an input to the function) but to access the net\u2014which you would not do with the same component! Instead, you would have component A process your camera data. You\u2019d see the result, so you\u2019d know the extent of information. Component B would have the permission to transmit that to some remote entity and you\u2019d hand off that information to component B.",
        "user": "UC21F8Q48",
        "ts": "1578939097.171200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC21F8Q48",
            "ts": "1578939129.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vWy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UD3AK9JRF"
                            },
                            {
                                "type": "text",
                                "text": " If components are pure functions, then you know that no transmission can happen. We\u2019re just too used to a world where programs can perform arbitrary I/O. The permission you give to the component is not to access the camera (that\u2019s easy, that\u2019s an input to the function) but to access the net\u2014which you would not do with the same component! Instead, you would have component A process your camera data. You\u2019d see the result, so you\u2019d know the extent of information. Component B would have the permission to transmit that to some remote entity and you\u2019d hand off that information to component B."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578318823.435400",
        "parent_user_id": "UC21F8Q48"
    },
    {
        "client_msg_id": "8abc5594-c8f0-4d43-a6f0-77d34c739b6f",
        "type": "message",
        "text": "Right. One of the key problems is that if control over your data means components run on hardware you trust, we\u2019ve cut out a lot of sustainability/business models for developing components.",
        "user": "UD3AK9JRF",
        "ts": "1578940036.171800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tc5H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Right. One of the key problems is that if control over your data means components run on hardware you trust, we\u2019ve cut out a lot of sustainability/business models for developing components."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578318823.435400",
        "parent_user_id": "UC21F8Q48",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC21F8Q48"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8607ea32-63ff-47b8-803f-8c6f5098f522",
        "type": "message",
        "text": "So then we ask, if nobody\u2019s trying to fulfill the expectations of venture capital, how can you rely on free labor? What work ought to be coordinated? How much coordination is needed to ensure good outcomes for users? To what extent to different users need to be using the \u201csame\u201d components?",
        "user": "UD3AK9JRF",
        "ts": "1578940304.172100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UKB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So then we ask, if nobody\u2019s trying to fulfill the expectations of venture capital, how can you rely on free labor? What work ought to be coordinated? How much coordination is needed to ensure good outcomes for users? To what extent to different users need to be using the \u201csame\u201d components?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578318823.435400",
        "parent_user_id": "UC21F8Q48"
    },
    {
        "client_msg_id": "af827621-198d-43b6-8d00-37f050a2640e",
        "type": "message",
        "text": "A really useful framing for me has been economical. We kind of vaguely agree on where we\u2019re trying to get to. How do we make it as cheap as possible to achieve that vision? Maybe we don\u2019t need a sizable team in San Francisco toiling for many years to figure all this out?",
        "user": "UD3AK9JRF",
        "ts": "1578940477.172300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8Az",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A really useful framing for me has been economical. We kind of vaguely agree on where we\u2019re trying to get to. How do we make it as cheap as possible to achieve that vision? Maybe we don\u2019t need a sizable team in San Francisco toiling for many years to figure all this out?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578318823.435400",
        "parent_user_id": "UC21F8Q48"
    },
    {
        "client_msg_id": "a0341a0d-c8d1-4668-9c6e-ce5f017340d9",
        "type": "message",
        "text": "I agree with almost everything that article says, except for its conclusion that the problems are unsolvable. I think the author accurately identifies the problems with almost all existing no-code platforms (and those problems are specifically the ones Lynxtool attempts to address).\n\nExample: \"No-code which is easy enough to be simple fails to be expressive.\" This is widely true, but I think cause is that no-code systems are usually not extensible within the system, and that to extend them, you must leave the system and write code, or even be at the mercy of the platform developer to provide new features. Most systems' expressiveness stops at the ability to define new functions, or if they express that, they fail to express iteration/repetition. (Lynx addresses this by choosing primitives from programming, rather than the primitives of the problem domain the product is targeted at). WYSIWYG editors and forms have no hope of escaping this limitation\u2014 IMO, node-and-wire is the only tool that scales in complexity (i.e. \"expressiveness\"). I think most \"web API glue\" products fall into that trap, and that seems to be what the author is calling \"configuration over code\".\n\nHe points out that users have a hard time modeling \"internal state\" in their heads, and I think he's hit onto something extremely crucial there\u2014 most code systems expect that of their users. But this isn't an intractable problem\u2014 the answer is to *show* the users the internal state! In fact, most node-and-wire tools do this by allowing the user to probe different parts/stages of the computation and see what's there (and it's what Lynx does). We should not make users simulate code in their heads\u2014 that's what computers are for! It should show them the results!\n\nHe also points out that removing the text doesn't remove the complexity described by the text. This is true, but I think most people underestimate how _much_ of the problem is text for most people. At pixar, where artists work with node-and-wire tools, I've _seen_ them build up _insane_ complexity with nodes. It's the moment they have to write text and mentally simulate things they can't see that they hit a brick wall. Again, this is fixable.",
        "user": "U6FKVSVCK",
        "ts": "1578942739.172600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U6FKVSVCK",
            "ts": "1578977744.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tO5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree with almost everything that article says, except for its conclusion that the problems are unsolvable. I think the author accurately identifies the problems with almost all existing no-code platforms (and those problems are specifically the ones Lynxtool attempts to address).\n\nExample: \"No-code which is easy enough to be simple fails to be expressive.\" This is widely true, but I think cause is that no-code systems are usually not extensible within the system, and that to extend them, you must leave the system and write code, or even be at the mercy of the platform developer to provide new features. Most systems' expressiveness stops at the ability to define new functions, or if they express that, they fail to express iteration/repetition. (Lynx addresses this by choosing primitives from programming, rather than the primitives of the problem domain the product is targeted at). WYSIWYG editors and forms have no hope of escaping this limitation\u2014 IMO, node-and-wire is the only tool that scales in complexity (i.e. \"expressiveness\"). I think most \"web API glue\" products fall into that trap, and that seems to be what the author is calling \"configuration over code\".\n\nHe points out that users have a hard time modeling \"internal state\" in their heads, and I think he's hit onto something extremely crucial there\u2014 most code systems expect that of their users. But this isn't an intractable problem\u2014 the answer is to "
                            },
                            {
                                "type": "text",
                                "text": "show",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the users the internal state! In fact, most node-and-wire tools do this by allowing the user to probe different parts/stages of the computation and see what's there (and it's what Lynx does). We should not make users simulate code in their heads\u2014 that's what computers are for! It should show them the results!\n\nHe also points out that removing the text doesn't remove the complexity described by the text. This is true, but I think most people underestimate how "
                            },
                            {
                                "type": "text",
                                "text": "much",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of the problem is text for most people. At pixar, where artists work with node-and-wire tools, I've "
                            },
                            {
                                "type": "text",
                                "text": "seen",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " them build up "
                            },
                            {
                                "type": "text",
                                "text": "insane",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " complexity with nodes. It's the moment they have to write text and mentally simulate things they can't see that they hit a brick wall. Again, this is fixable."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578924949.164800",
        "parent_user_id": "UMYKGHYBA",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL",
                    "UMUF3DUHE"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "D2B43653-7A3D-40F9-849D-694579533F49",
        "type": "message",
        "text": "Code is a machine-readable, text-serialized representation of a set of mental models (and not a particularly good representation, at that). Software is just a machine executing that representation with additional context (data). Every complexity in software development follows naturally as a result of that principle. ",
        "user": "UG0EL18H3",
        "ts": "1578950104.178400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UxCU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Code is a machine-readable, text-serialized representation of a set of mental models (and not a particularly good representation, at that). Software is just a machine executing that representation with additional context (data). Every complexity in software development follows naturally as a result of that principle. "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578910495.160600",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "54598ade-dc9c-452c-a434-2db1f077b828",
        "type": "message",
        "text": "I have been a bit busy and can't get to come here as often as I wish in the past week (and it will continue next one...) so I am very happy to see this newsletter in my inbox today! Thanks a lot <@UBN9AFS0N> :slightly_smiling_face:",
        "user": "UJ6LDMMN0",
        "ts": "1578951142.179300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "881",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have been a bit busy and can't get to come here as often as I wish in the past week (and it will continue next one...) so I am very happy to see this newsletter in my inbox today! Thanks a lot "
                            },
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578906654.152800",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "8D72C7B0-FA00-43F9-AAAF-F7C08FC6D640",
        "type": "message",
        "text": "I think people underestimate how much code \u201cnon-coders\u201d are writing - Excel macros and markup/HTML for CMS/Wordpress dwarf any other programming language you can think of. I think capitalizing on that trend is much more interesting than what most people mean by \u201cno code.\u201d",
        "user": "UQPF68WJ3",
        "ts": "1578951203.181000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r/G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think people underestimate how much code \u201cnon-coders\u201d are writing - Excel macros and markup/HTML for CMS/Wordpress dwarf any other programming language you can think of. I think capitalizing on that trend is much more interesting than what most people mean by \u201cno code.\u201d"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578924949.164800",
        "parent_user_id": "UMYKGHYBA",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    }
]