[
    {
        "client_msg_id": "f069fb7a-4064-43f0-9596-305b7c4078eb",
        "type": "message",
        "text": "Not to pile on, but Edward also said..\n&gt; I don't know what you mean by functional.\nFRP is \"functional\" in the sense of Functional Programming \u2014 it's an approach to specifying animations using function composition, where each function describes how to transform some input graphic according to some input time. _What the animation does_ is captured by the combination of functions and their return values as you vary the time input.\n\nIt sounds like CA works a bit like Greensock or Web Animations and other OO animation tools, where you create some state object to represent the animation, specify properties and values on the object, and then submit that object to some engine. _What the animation does_ is captured by the data in that object and what the engine does based on it.\n\nThen there are the procedural animation tools, like Processing or the HTML Canvas, where you write code that is executed every frame. _What the animation does_ is a side effect of your code directly manipulating or generating the graphic.",
        "user": "UC2A2ARPT",
        "ts": "1578439937.002900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1578440077.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6QJZk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not to pile on, but Edward also said..\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't know what you mean by functional."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FRP is \"functional\" in the sense of Functional Programming \u2014 it's an approach to specifying animations using function composition, where each function describes how to transform some input graphic according to some input time. "
                            },
                            {
                                "type": "text",
                                "text": "What the animation does",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is captured by the combination of functions and their return values as you vary the time input.\n\nIt sounds like CA works a bit like Greensock or Web Animations and other OO animation tools, where you create some state object to represent the animation, specify properties and values on the object, and then submit that object to some engine. "
                            },
                            {
                                "type": "text",
                                "text": "What the animation does",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is captured by the data in that object and what the engine does based on it.\n\nThen there are the procedural animation tools, like Processing or the HTML Canvas, where you write code that is executed every frame. "
                            },
                            {
                                "type": "text",
                                "text": "What the animation does",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is a side effect of your code directly manipulating or generating the graphic."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR"
    },
    {
        "client_msg_id": "78e8d3d7-57d4-4971-80af-29598e93fb65",
        "type": "message",
        "text": "I can prove this is impossible by case analysis.\n\u2022 Case 1, the executable machine-code file that you must run in order to start the live programming IDE (the \"kernel\") is built from immutable source that cannot be live edited from inside the live programming environment. This decision simplifies the design of the IDE. However, it means that you need a traditional build system to build the kernel. All of the Smalltalks have this property, by the way. You can't live edit the Smalltalk VM from inside of Smalltalk.\n\u2022 Case 2, the source code for the kernel executable is live editable from inside the IDE. Nobody has ever done this. It might be impossible: there is probably always some irreducible kernel that cannot be live edited. If it is possible (not proven), then it's probably very complicated, and there will be bugs. Nobody has demonstrated the ability to write complex software that is guaranteed bug free. Bugs have been found in software that has been \"proven\" to be correct. These IDE bugs can lead to the executable that you must run to start the kernel getting out of sync with the source code. So you need a traditional build system as a backup to recover from this situation, and if you don't have it, then you are screwed. If you have a traditional build system for the kernel, but you don't continually test it as the software changes, then when you finally have an emergency situation, the build system won't work, and you are screwed.",
        "user": "UJN1TAYEQ",
        "ts": "1578441187.004000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XRM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I can prove this is impossible by case analysis.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Case 1, the executable machine-code file that you must run in order to start the live programming IDE (the \"kernel\") is built from immutable source that cannot be live edited from inside the live programming environment. This decision simplifies the design of the IDE. However, it means that you need a traditional build system to build the kernel. All of the Smalltalks have this property, by the way. You can't live edit the Smalltalk VM from inside of Smalltalk."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Case 2, the source code for the kernel executable is live editable from inside the IDE. Nobody has ever done this. It might be impossible: there is probably always some irreducible kernel that cannot be live edited. If it is possible (not proven), then it's probably very complicated, and there will be bugs. Nobody has demonstrated the ability to write complex software that is guaranteed bug free. Bugs have been found in software that has been \"proven\" to be correct. These IDE bugs can lead to the executable that you must run to start the kernel getting out of sync with the source code. So you need a traditional build system as a backup to recover from this situation, and if you don't have it, then you are screwed. If you have a traditional build system for the kernel, but you don't continually test it as the software changes, then when you finally have an emergency situation, the build system won't work, and you are screwed."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "430FE0D9-55D5-40DE-9D2A-3910B540093B",
        "type": "message",
        "text": "oculus quest is probably your best bet if you want to jump in right now\u2014it would be a hack but you do get a camera feed from inside out tracking and it\u2019s \u201conly\u201d $400",
        "user": "UHWC9PXBL",
        "ts": "1578450774.006200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EBq5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "oculus quest is probably your best bet if you want to jump in right now\u2014it would be a hack but you do get a camera feed from inside out tracking and it\u2019s \u201conly\u201d $400"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577753221.212900",
        "parent_user_id": "UJ6LDMMN0",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6D8BD45E-8F25-4B2F-9E2A-038E7C6643E0",
        "type": "message",
        "text": "i aim for a feeling rather than a functional description first\u2014most functional descriptions are bad when you initially think of them and already taken by a yc company. if you can find an evocative phrase or two-word pairing you can riff on it pretty easily and test alternatives in my experience ",
        "user": "UHWC9PXBL",
        "ts": "1578451436.009000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/eGK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i aim for a feeling rather than a functional description first\u2014most functional descriptions are bad when you initially think of them and already taken by a yc company. if you can find an evocative phrase or two-word pairing you can riff on it pretty easily and test alternatives in my experience "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578328340.438400",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "fa1048d7-4dde-4952-98c6-56165a7c6f91",
        "type": "message",
        "text": "I finally saw this video.\n\nAs usual I'm probably mis-understanding something but I had ton of questions\n\nrename: If I have xyz = abc() + def() and I go change .unison/hasofabc/names/abc-&gt;def so now my code reads xyz = def() + def() ?!!?\n\nrename: One of the biggest issues in programming on the documentation side is the internet is full of examples of old deprecated code. So I decide that the function sould be named \"doTheThing\" as that would make the code more readable than \"thingADoRunRun\" that I named it originally. Ideally I'd like to lead all devs to use \"doTheThing\" but in unison \"thingADoRunRun\" will last forever and all examples using it will still work. You might think that's good. I think it's bad. I makes it impossible to deprecate old examples and docs\n\nrefactoring: So there's a bug in function foo, I fix the bug (change the implementation of foo). All the code is referencing the old implimentation by hash instead of indirectly by name so no bugs can ever get fixed?\n\nIn fact I don't even get how to write code in general. Let's say I write this\n\nadd(a, b) = a * b\n\na = add(1, 2)\nb = add(3, 4)\nc = add(5, 6)\n\nThen I run and see there was a mistake. I type * where I meant +. So change add to\n\nadd(a, b) = a + b\n\nBut the other 3 lines are pointing to the old version of add since they're tied to its implementation hash not to the word \"add\".\n\nWorse, how do I even fix the 3 lines? going back to the first renaming issue I can end up with these 3 lines all referring to different functions. that would seem super confusing\n\na = add(1, 2)\nb = add(3, 4)\nc = add(5, 6)\n\nno builds: Inspired by haskell I can't know before hand that a specific type is going to work with a specific implementation until I pass that type though the implementation's ast can it? In other words the compiler needs to apply the ast substuting the type I pass in and then see if that type is compatible with every statement in the ast?\n\nconflicts: the diamond conflict you mention is not an issue in modern JavaScript (es6 modules or even old amd modules). All names are in local space period. You can easily have an app that uses v1 and v2 of a library. In other words this issue was solved without the complex hashing and required custom IDE to code solution.\n\nsearching: the example is given that there are 2 functions named the same thing DoTheThing(v1), DoTheThing(v2). So now I can't, as a human, at a glance, know which version of the function is being called. I have to ask the IDE, which version of this function is this really? In JS I can just look at the import statement. `import {DoTheThing} from 'dth/v2';`",
        "user": "UC6997THT",
        "ts": "1578456911.009300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC6997THT",
            "ts": "1578461077.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "agal",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I finally saw this video.\n\nAs usual I'm probably mis-understanding something but I had ton of questions\n\nrename: If I have xyz = abc() + def() and I go change .unison/hasofabc/names/abc->def so now my code reads xyz = def() + def() ?!!?\n\nrename: One of the biggest issues in programming on the documentation side is the internet is full of examples of old deprecated code. So I decide that the function sould be named \"doTheThing\" as that would make the code more readable than \"thingADoRunRun\" that I named it originally. Ideally I'd like to lead all devs to use \"doTheThing\" but in unison \"thingADoRunRun\" will last forever and all examples using it will still work. You might think that's good. I think it's bad. I makes it impossible to deprecate old examples and docs\n\nrefactoring: So there's a bug in function foo, I fix the bug (change the implementation of foo). All the code is referencing the old implimentation by hash instead of indirectly by name so no bugs can ever get fixed?\n\nIn fact I don't even get how to write code in general. Let's say I write this\n\nadd(a, b) = a * b\n\na = add(1, 2)\nb = add(3, 4)\nc = add(5, 6)\n\nThen I run and see there was a mistake. I type * where I meant +. So change add to\n\nadd(a, b) = a + b\n\nBut the other 3 lines are pointing to the old version of add since they're tied to its implementation hash not to the word \"add\".\n\nWorse, how do I even fix the 3 lines? going back to the first renaming issue I can end up with these 3 lines all referring to different functions. that would seem super confusing\n\na = add(1, 2)\nb = add(3, 4)\nc = add(5, 6)\n\nno builds: Inspired by haskell I can't know before hand that a specific type is going to work with a specific implementation until I pass that type though the implementation's ast can it? In other words the compiler needs to apply the ast substuting the type I pass in and then see if that type is compatible with every statement in the ast?\n\nconflicts: the diamond conflict you mention is not an issue in modern JavaScript (es6 modules or even old amd modules). All names are in local space period. You can easily have an app that uses v1 and v2 of a library. In other words this issue was solved without the complex hashing and required custom IDE to code solution.\n\nsearching: the example is given that there are 2 functions named the same thing DoTheThing(v1), DoTheThing(v2). So now I can't, as a human, at a glance, know which version of the function is being called. I have to ask the IDE, which version of this function is this really? In JS I can just look at the import statement. `import {DoTheThing} from 'dth/v2';`"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1568603017.155300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "58a6d449-6bd5-4df3-bfd7-d1fdfdd8701c",
        "type": "message",
        "text": "There will always be rebuilds and restarts, whether you have 'build systems' or not.\n\nThe first question is:  at what granularity do we rebuild and restart?\n\nWhat if every change meant you had to rebuild the entire system image (kernel+userspace) and reboot? Too coarse? With present day systems we can rebuild a binary and restart the OS process. State external to the process is preserved (BTW, the backward compatibility problem of data structure still exists). But what if you change one function? Can we just build and re-integrate just the function into the running process?\n\nThe second question is: how manual is the rebuild and restart process?\n\nMost build systems need to be manually invoked. Sometimes we wrap them with file-watchers to rebuild whenever something changes. This is similar to re-running a script vs updating a cell in Excel. Why not have the continuous rebuild be always available with, say, controlled snapshots?\n\nEmitting machine code for optimization or kernel etc. is completely separate. Any program can be written to emit machine code and store it.",
        "user": "U8A5MS6R1",
        "ts": "1578461064.009700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1578463540.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HBB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There will always be rebuilds and restarts, whether you have 'build systems' or not.\n\nThe first question is:  at what granularity do we rebuild and restart?\n\nWhat if every change meant you had to rebuild the entire system image (kernel+userspace) and reboot? Too coarse? With present day systems we can rebuild a binary and restart the OS process. State external to the process is preserved (BTW, the backward compatibility problem of data structure still exists). But what if you change one function? Can we just build and re-integrate just the function into the running process?\n\nThe second question is: how manual is the rebuild and restart process?\n\nMost build systems need to be manually invoked. Sometimes we wrap them with file-watchers to rebuild whenever something changes. This is similar to re-running a script vs updating a cell in Excel. Why not have the continuous rebuild be always available with, say, controlled snapshots?\n\nEmitting machine code for optimization or kernel etc. is completely separate. Any program can be written to emit machine code and store it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "78606373-2AE5-4EF4-BC64-DD51EEDDD155",
        "type": "message",
        "text": "<@UHWC9PXBL> I didn\u2019t know that. Have you tried oculus quest yourself?",
        "user": "UFLN9JFRT",
        "ts": "1578461598.012300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5Ik",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " I didn\u2019t know that. Have you tried oculus quest yourself?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577753221.212900",
        "parent_user_id": "UJ6LDMMN0"
    },
    {
        "client_msg_id": "e7c3f840-f5d1-4fbf-a7bc-aa3301174dc5",
        "type": "message",
        "text": "Bracha doesn't talk about this but I think the build system idea is connected to the the idea of binaries/processes/apps: i.e. the output of the build. The pattern of using this is _build_ -&gt; output artifact -&gt;  _run_. If you look at systems where:\na) the 'runnable unit' of the OS isn't Unix process sized, but something smaller, and\nb) the running/not-running dichotomy isn't primary (e.g. you have auto-persisted system image),\nthen the build system model doesn't seem particularly interesting.\nThere's the recent twitter thread about Lisp machines, if you're looking for a specific example: <https://twitter.com/RainerJoswig/status/1213484071952752640>\n\nSince one of the problems of 'editing live' is that you can crash running things pretty badly, I think snapshotting and rollback become critical in this mode of operation.",
        "user": "U8A5MS6R1",
        "ts": "1578461613.012500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1578461645.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Zdc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Bracha doesn't talk about this but I think the build system idea is connected to the the idea of binaries/processes/apps: i.e. the output of the build. The pattern of using this is "
                            },
                            {
                                "type": "text",
                                "text": "build",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " -> output artifact ->  "
                            },
                            {
                                "type": "text",
                                "text": "run",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". If you look at systems where:\na) the 'runnable unit' of the OS isn't Unix process sized, but something smaller, and\nb) the running/not-running dichotomy isn't primary (e.g. you have auto-persisted system image),\nthen the build system model doesn't seem particularly interesting.\nThere's the recent twitter thread about Lisp machines, if you're looking for a specific example: "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/RainerJoswig/status/1213484071952752640"
                            },
                            {
                                "type": "text",
                                "text": "\n\nSince one of the problems of 'editing live' is that you can crash running things pretty badly, I think snapshotting and rollback become critical in this mode of operation."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "c0093d38-6d79-4754-95df-10c0bef858b8",
        "type": "message",
        "text": "In the case of Core Animation, there are various properties that you can specify for beginning and ending value, and it does the tricky job of interpolating. You can also chain animations, and run sequences of them in parallel, with triggers. It is a very complete and capable animation system, and far ahead of Windows at the time as MS was lagging in graphics except in DirectX ,which was basically a rogue team inside MS that wanted to make 3D games fast, and realized the only way was to bypass the normal Windows graphical kernel, so they built they own drivers for the hardware. Now we see Apple trying to beat MS's DirectX with their own 3D interface they call Metal.  There are also capabilities if i recall correctly to have a callback function called to generate parameters. The most unusual aspect of Core Animation is the it has a 4x4 matrix, but you are pinned down in some of the parameters so you can only put a plane in perspective. They stopped short of 3D. I call it 2 and 1/2 dimensions. Anyway supporting some animation is a very important aspect of building modern interfaces, if you want to go past simple 2D dragging of say images onto a flat surface. I would imagine some of the efforts in the FoC group are using WebGL and just going full bore into 3D. 3D comes with a lot of baggage, and it sure isn't friendly for beginners. There was an add-on library for Adobe AIR called Starling, the work of one really great german programmer, and it gives you the GPU for 2D sprite sheets, and many other accelerated things. A really great compromise, and many popular Mobile games are using Starling, because it leverages the machine independent virtual GPU that underlies Adobe AIR. I know it is a fading technology, but getting great accelerate 2D rendering is a terrific thing, and it takes a huge amount of work to build.",
        "user": "UEQ6M68H0",
        "ts": "1578469305.013100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xm6z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the case of Core Animation, there are various properties that you can specify for beginning and ending value, and it does the tricky job of interpolating. You can also chain animations, and run sequences of them in parallel, with triggers. It is a very complete and capable animation system, and far ahead of Windows at the time as MS was lagging in graphics except in DirectX ,which was basically a rogue team inside MS that wanted to make 3D games fast, and realized the only way was to bypass the normal Windows graphical kernel, so they built they own drivers for the hardware. Now we see Apple trying to beat MS's DirectX with their own 3D interface they call Metal.  There are also capabilities if i recall correctly to have a callback function called to generate parameters. The most unusual aspect of Core Animation is the it has a 4x4 matrix, but you are pinned down in some of the parameters so you can only put a plane in perspective. They stopped short of 3D. I call it 2 and 1/2 dimensions. Anyway supporting some animation is a very important aspect of building modern interfaces, if you want to go past simple 2D dragging of say images onto a flat surface. I would imagine some of the efforts in the FoC group are using WebGL and just going full bore into 3D. 3D comes with a lot of baggage, and it sure isn't friendly for beginners. There was an add-on library for Adobe AIR called Starling, the work of one really great german programmer, and it gives you the GPU for 2D sprite sheets, and many other accelerated things. A really great compromise, and many popular Mobile games are using Starling, because it leverages the machine independent virtual GPU that underlies Adobe AIR. I know it is a fading technology, but getting great accelerate 2D rendering is a terrific thing, and it takes a huge amount of work to build."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR"
    },
    {
        "client_msg_id": "de7b9d43-797c-4dce-a67e-d5e00b485d81",
        "type": "message",
        "text": "Honestly animation via code feels really strange to me-- hard to write and harder to read. I worked on an animation prototyping tool for a design tool and it felt so much better to use than direct code. We leveraged Greensock, had start/end states constrained by the design (or current page state), and provided tooling to visually modify the transition (basically just leveraging interpolation over the merged tree during playback).",
        "user": "UN57U8V53",
        "ts": "1578469309.013300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+91wp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Honestly animation via code feels really strange to me-- hard to write and harder to read. I worked on an animation prototyping tool for a design tool and it felt so much better to use than direct code. We leveraged Greensock, had start/end states constrained by the design (or current page state), and provided tooling to visually modify the transition (basically just leveraging interpolation over the merged tree during playback)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR"
    },
    {
        "client_msg_id": "26c12fba-6ba9-4f25-971d-cbcfc8c24cb2",
        "type": "message",
        "text": "Most of the classic 3D animation tools, like Autocat 3D studio max, and the Maya product, had graphical interactive interfaces, which automatically generated commands in their command line language, which you could then tweak. Or use as inspiration for generating code by computers. Animation has always existed, even back in Macromind Director which spawned the whole CDROM revolution, in concert with the ability to tweak the animation. In hollywood they do motion capture, and then tweak it a little bit by hand to make it just right. The human eye and hand can get you very close, but there is inevitably some massaging, and generating sequences by computer of course is done all the time by the masters at Pixar, which use every technique possible to get things to look good. Classic Disney style cel animation is the \"hard way\", and it is pretty much extinct due to its cost.  It took over 1200 people to draw Snow White.",
        "user": "UEQ6M68H0",
        "ts": "1578469886.014000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9vt8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Most of the classic 3D animation tools, like Autocat 3D studio max, and the Maya product, had graphical interactive interfaces, which automatically generated commands in their command line language, which you could then tweak. Or use as inspiration for generating code by computers. Animation has always existed, even back in Macromind Director which spawned the whole CDROM revolution, in concert with the ability to tweak the animation. In hollywood they do motion capture, and then tweak it a little bit by hand to make it just right. The human eye and hand can get you very close, but there is inevitably some massaging, and generating sequences by computer of course is done all the time by the masters at Pixar, which use every technique possible to get things to look good. Classic Disney style cel animation is the \"hard way\", and it is pretty much extinct due to its cost.  It took over 1200 people to draw Snow White."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR"
    },
    {
        "client_msg_id": "32bbe55a-1a46-4264-b5c1-551d2d75c40d",
        "type": "message",
        "text": "If you want to see hard core animation, here is a brief documentary on Snow White.  <https://www.youtube.com/watch?v=OebUzEhSLBI>\nThe most expensive cartoon of its time by more than a factor of 10. You have to hand it to Walt Disney he didn't think small.",
        "user": "UEQ6M68H0",
        "ts": "1578470103.014200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Making Of Disney's Snowwhite or How Disney Cartoons are made.flv",
                "title_link": "https://www.youtube.com/watch?v=OebUzEhSLBI",
                "author_name": "hereitbegins",
                "author_link": "https://www.youtube.com/user/hereitbegins",
                "thumb_url": "https://i.ytimg.com/vi/OebUzEhSLBI/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Making Of Disney's Snowwhite or How Disney Cartoons are made.flv",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https://www.youtube.com/embed/OebUzEhSLBI?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https://www.youtube.com/watch?v=OebUzEhSLBI",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=OebUzEhSLBI"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eoq6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you want to see hard core animation, here is a brief documentary on Snow White.  "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=OebUzEhSLBI"
                            },
                            {
                                "type": "text",
                                "text": "\nThe most expensive cartoon of its time by more than a factor of 10. You have to hand it to Walt Disney he didn't think small."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR"
    },
    {
        "client_msg_id": "b0d144ae-269c-4a9e-a884-351ecf3ed44c",
        "type": "message",
        "text": "This talk as some of the same issues of Bret Victor's talk. Yes, in some kind of utopia where there are not bad actors then having all apps share all data is great. But in the real world (the one we have today) we want (well I want) each app to have it's own data because I don't want any app to read my data. I don't want facebook to be reading the data of all my other apps. I don't want every app I download and every library in every app I download to read my context, check my calendar, look at my photos,\n\nSo, I love the idea, but in reality I have no idea how it would work. I get that it would be great if Uber/Lyft/Grab would look at my calendar and auto-order me a cab when I arrive at the airport and it could even look in my credit card history and figure out which hotel I booked so it knows both I'm at LAX and I'm staying at Hotel X. At the same time I absolutely don't want Uber/Lyft/Grab to have access to that data.\n\nSomeone brought up the issue after the talk but he basically just dismissed it. I feel like that's really the real issue that has to be solved. The idea of gluing tools together has been around forever. It's failed multiple times. Mostly probably for techincal reasons but now on top of technical reasons we're adding security reasons.",
        "user": "UC6997THT",
        "ts": "1578472068.014500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "egV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This talk as some of the same issues of Bret Victor's talk. Yes, in some kind of utopia where there are not bad actors then having all apps share all data is great. But in the real world (the one we have today) we want (well I want) each app to have it's own data because I don't want any app to read my data. I don't want facebook to be reading the data of all my other apps. I don't want every app I download and every library in every app I download to read my context, check my calendar, look at my photos,\n\nSo, I love the idea, but in reality I have no idea how it would work. I get that it would be great if Uber/Lyft/Grab would look at my calendar and auto-order me a cab when I arrive at the airport and it could even look in my credit card history and figure out which hotel I booked so it knows both I'm at LAX and I'm staying at Hotel X. At the same time I absolutely don't want Uber/Lyft/Grab to have access to that data.\n\nSomeone brought up the issue after the talk but he basically just dismissed it. I feel like that's really the real issue that has to be solved. The idea of gluing tools together has been around forever. It's failed multiple times. Mostly probably for techincal reasons but now on top of technical reasons we're adding security reasons."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578318823.435400",
        "parent_user_id": "UC21F8Q48"
    },
    {
        "client_msg_id": "AB49365A-5BF5-432D-961F-6BD372B99EFE",
        "type": "message",
        "text": "i haven\u2019t\u2014i have a regular old rift. however it\u2019s been getting absolutely fantastic reviews from  pretty much every trusted source on a price-to-performance ratio",
        "user": "UHWC9PXBL",
        "ts": "1578491817.016700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bRxo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i haven\u2019t\u2014i have a regular old rift. however it\u2019s been getting absolutely fantastic reviews from  pretty much every trusted source on a price-to-performance ratio"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577753221.212900",
        "parent_user_id": "UJ6LDMMN0"
    },
    {
        "client_msg_id": "50178e0f-1fbe-4e12-82f6-7cfc0628afe9",
        "type": "message",
        "text": "This was a good presentation, thanks for sharing, <@UC21F8Q48>. But wow, the Q&amp;A in the end makes me want to get to know the audience much more than the speaker. Super thoughtful questions and not very satisfying answers.\n\nOn the actual challenges with that vision:\nOn mobile platforms today, we slowly get more control over which data and capabilities we want to share with apps, and a lot of people find that extremely annoying. It's an interesting design challenge to find a good balance here. There are also more and more extensions points added that would take us just a little bit into the direction of that tools/substrates vision, but ironically it's often developers who are not willing to make a feature available to other parts of the system like that, because that breaks their business model.\n\nAnd that's what's really blocking progress: business models. The powerful incentives created through how all this created value is funded have taken us completely off track and into dangerous territory. We happily pay with our information to get stuff for \"free\", which is why we're not in control of it in the first place. And now almost every big tech company is more interested in learning even more about us to target us better and serve us ads and few really care about better tools for unlocking our creativity.",
        "user": "U5STGTB3J",
        "ts": "1578492078.020200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PwDk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This was a good presentation, thanks for sharing, "
                            },
                            {
                                "type": "user",
                                "user_id": "UC21F8Q48"
                            },
                            {
                                "type": "text",
                                "text": ". But wow, the Q&A in the end makes me want to get to know the audience much more than the speaker. Super thoughtful questions and not very satisfying answers.\n\nOn the actual challenges with that vision:\nOn mobile platforms today, we slowly get more control over which data and capabilities we want to share with apps, and a lot of people find that extremely annoying. It's an interesting design challenge to find a good balance here. There are also more and more extensions points added that would take us just a little bit into the direction of that tools/substrates vision, but ironically it's often developers who are not willing to make a feature available to other parts of the system like that, because that breaks their business model.\n\nAnd that's what's really blocking progress: business models. The powerful incentives created through how all this created value is funded have taken us completely off track and into dangerous territory. We happily pay with our information to get stuff for \"free\", which is why we're not in control of it in the first place. And now almost every big tech company is more interested in learning even more about us to target us better and serve us ads and few really care about better tools for unlocking our creativity."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578318823.435400",
        "parent_user_id": "UC21F8Q48"
    },
    {
        "client_msg_id": "00b8c16c-66c1-4d55-b0c6-451f838a3788",
        "type": "message",
        "text": "Oha! I didn't know about the live camera feed either and that could potentially make it the best AR headset available today.",
        "user": "U5STGTB3J",
        "ts": "1578492176.022800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LyJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oha! I didn't know about the live camera feed either and that could potentially make it the best AR headset available today."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577753221.212900",
        "parent_user_id": "UJ6LDMMN0"
    },
    {
        "client_msg_id": "A8CDCFF5-8B66-4122-8CFC-BF2CB392A1F4",
        "type": "message",
        "text": "rename 1: yes i think that would work but not sure why you\u2019d ever do that except as a prank\n\nrename 2: the name never existed exactly. everyone\u2019s code still runs because the only thing that changed was the human-readable alias, not the machine-checked identifier. so if you were browsing the code with the unison package manager, it would show you the most up-to-date names except where you had overridden them locally. the only difference here is that both old and new examples would work, and you could verify that they ran the same code",
        "user": "UHWC9PXBL",
        "ts": "1578492220.024000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vQp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "rename 1: yes i think that would work but not sure why you\u2019d ever do that except as a prank"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "rename 2: "
                            },
                            {
                                "type": "text",
                                "text": "t"
                            },
                            {
                                "type": "text",
                                "text": "he name never existed exactly. everyone\u2019s code still runs because the only thing that changed was the human-readable alias, not the machine-checked identifier. so if you were browsing the code with the unison package manager, it would show you the most up-to-date names except where you had overridden them locally. the only difference here is that both old and new examples would work, and you could verify that they ran the same code"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1568603017.155300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "F4906F93-AFE6-4236-8463-A3FEFAC5C217",
        "type": "message",
        "text": "refactoring: i don\u2019t think you\u2019ve quite grasped how the system works. you might want to watch that part of the talk again? on every compile the names of your functions get replaced by codes generated from the compiled abstract syntax of their respective function bodies\n\nso when you change the body of your add function and replace * with +, the ast of your add function changes, its hashed ID changes, and every instance of the word \u201cadd\u201d gets replaced with a different hashID in your code",
        "user": "UHWC9PXBL",
        "ts": "1578492454.028700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nAH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "refactoring: i don\u2019t think you\u2019ve quite grasped how the system works. you might want to watch that part of the talk again? on every compile the names of your functions get replaced by codes generated from the compiled abstract syntax of their respective function bodies"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "so when you change the body of your add function and replace * with +, the ast of your add function changes, its hashed ID changes, and every instance of the word \u201cadd\u201d gets replaced with a different hashID in your code"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1568603017.155300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "2B68BF07-A31F-4167-A2C9-C8BEBC446175",
        "type": "message",
        "text": "searching: i think you\u2019re neglecting to notice the amount of information you\u2019ve found previous to typing that import statement. you had to at some point google \u201credux form alternatives\u201d or whatever, identify an implementation you wanted, read docs/examples, find the correct function or module to import, etc. that context gives you all the information you need to understand \u2018import {DoTheThing} from...\u2019 unison\u2019s approach would enable you to skip most of that by letting you query available code on the package manager by for example type and/or function name and then quickly swipe through until you found the one your were looking for",
        "user": "UHWC9PXBL",
        "ts": "1578492866.035100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o11",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "searching: i think you\u2019re neglecting to notice the amount of information you\u2019ve found previous to typing that import statement. you had to at some point google \u201credux form alternatives\u201d or whatever, identify an implementation you wanted, read docs/examples, find the correct function or module to import, etc. that context gives you all the information you need to understand \u2018import {DoTheThing} from...\u2019 unison\u2019s approach would enable you to skip most of that by letting you query available code on the package manager by for example type and/or function name and then quickly swipe through until you found the one your were looking for"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1568603017.155300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "ACD2ABEF-FCEF-4EB6-8D1F-92502B9B7426",
        "type": "message",
        "text": "no builds: not sure i understand this one\n\nconflicts: if you\u2019ve seriously never had a problem with dependencies in javascript i\u2019m not sure this value prop is going to appeal to you",
        "user": "UHWC9PXBL",
        "ts": "1578492952.036700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AmBcS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "no builds: not sure i understand this one"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "conflicts: if you\u2019ve seriously never had a problem with dependencies in javascript i\u2019m not sure this value prop is going to appeal to you"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1568603017.155300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "99BD6BD2-F399-43BE-82F7-A93117714D12",
        "type": "message",
        "text": "i\u2019m not rock-solid on the technical implementation of unison but it does seem like most of what you\u2019re missing is the motivation for the project",
        "user": "UHWC9PXBL",
        "ts": "1578492993.037900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4/K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i\u2019m not rock-solid on the technical implementation of unison but it does seem like most of what you\u2019re missing is the motivation for the project"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1568603017.155300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "5faf5336-2245-4661-a5ed-9d40f63c6a5e",
        "type": "message",
        "text": "Ok, I'm sold. I'm gonna buy one...",
        "user": "UFLN9JFRT",
        "ts": "1578493453.038100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "spf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok, I'm sold. I'm gonna buy one..."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577753221.212900",
        "parent_user_id": "UJ6LDMMN0"
    },
    {
        "client_msg_id": "61d89ed9-2df9-4029-969a-491fd2f9f5bd",
        "type": "message",
        "text": "do you know of any elegant solution to handle dragging things long distances or dragging more than one thing from the same origin to the same target (in terms of distance, can be different sources and targets).\n\nSimilarly, do you know of a nice solution to drag/drop on touch devices?\n\nBoth usually involve scrolling in my case",
        "user": "UBN9AFS0N",
        "ts": "1578497507.039800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pe8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "do you know of any elegant solution to handle dragging things long distances or dragging more than one thing from the same origin to the same target (in terms of distance, can be different sources and targets).\n\nSimilarly, do you know of a nice solution to drag/drop on touch devices?\n\nBoth usually involve scrolling in my case"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578497507.039800",
        "reply_count": 13,
        "reply_users_count": 6,
        "latest_reply": "1578533699.076300",
        "reply_users": [
            "UJN1TAYEQ",
            "UP7SQ8KT3",
            "UBN9AFS0N",
            "UG0EL18H3",
            "ULM3U6275",
            "UC2A2ARPT"
        ],
        "subscribed": true,
        "last_read": "1578550920.079300"
    },
    {
        "client_msg_id": "a803b0ad-bbb7-4245-a5af-0b52c0156b2f",
        "type": "message",
        "text": "I have a tentative solution but I won't tell it to avoid biasing the answers or focusing on my idea",
        "user": "UBN9AFS0N",
        "ts": "1578497541.040400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T6OB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have a tentative solution but I won't tell it to avoid biasing the answers or focusing on my idea"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "7771ff98-8b21-4642-bfe9-b574466f2f68",
        "type": "message",
        "text": "Cut and Paste via the clipboard, possibly using a multiple selection.",
        "user": "UJN1TAYEQ",
        "ts": "1578497715.040500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zhR=y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cut and Paste via the clipboard, possibly using a multiple selection."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578497507.039800",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "5e502636-9d86-4474-9dd7-a8d848ccb232",
        "type": "message",
        "text": "<https://apps.apple.com/us/app/dropzone-3/id695406827?mt=12>\n&gt; Just drop files on the target and they stick there until you\u2019re ready to use them. You can even combine groups of files into stacks and then drop them onto a Dropzone action or onto another app.",
        "user": "UP7SQ8KT3",
        "ts": "1578497948.040700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UP7SQ8KT3",
            "ts": "1578497968.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P0mzA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://apps.apple.com/us/app/dropzone-3/id695406827?mt=12"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just drop files on the target and they stick there until you\u2019re ready to use them. You can even combine groups of files into stacks and then drop them onto a Dropzone action or onto another app."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578497507.039800",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "bf43f57c-7623-43ec-baf6-65515920e899",
        "type": "message",
        "text": "<@UP7SQ8KT3> that was my idea :slightly_smiling_face:",
        "user": "UBN9AFS0N",
        "ts": "1578498048.041200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=pQM8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UP7SQ8KT3"
                            },
                            {
                                "type": "text",
                                "text": " that was my idea "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578497507.039800",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "b6f1d87d-5aef-41e2-8295-7eaf6e3b548d",
        "type": "message",
        "text": "neat! i\u2019ve found a bunch of apps like this on the mac store that would make for great additions to the OS",
        "user": "UP7SQ8KT3",
        "ts": "1578498125.041400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GkA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "neat! i\u2019ve found a bunch of apps like this on the mac store that would make for great additions to the OS"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578497507.039800",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1::skin-tone-4",
                "users": [
                    "UBN9AFS0N",
                    "UA14TGLTC"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7f89d77c-605f-437c-b3cd-8f66c02a2c64",
        "type": "message",
        "text": "&gt;  refactoring: i don\u2019t think you\u2019ve quite grasped how the system works. you might want to watch that part of the talk again? on every compile the names of your functions get replaced by codes generated from the compiled abstract syntax of their respective function bodies\n&gt; \n&gt; so when you change the body of your add function and replace * with +, the ast of your add function changes, its hashed ID changes, and every instance of the word \u201cadd\u201d gets replaced with a different hashID in your code\nthey showed distributed code so when machine A sees a hash for function newABC and machine B sees a hash for oldABC how does machine B know it needs to replace all oldABC hashes with newABC hashes. Or as another example would be pulling in someone else's updated library. Your code says a = #12456(b, c). The new library used to define #123456 but now only defines #123457. In any previous system pulling in the new updated library matches on name but in their system there is not match anymore. Your code is still referencing the old hash\n\n&gt; conflicts: if you\u2019ve seriously never had a problem with dependencies in javascript i\u2019m not sure this value prop is going to appeal to you\nJS can function perfectly with zero conflicts unlike C/C++/C#/Java/Swift. You can make up conflicts by polluting the global namespace but that's on you. JS gives you way to make all modules not pollute any namespaces unlike C/C++/C#/Java/Switf. Back before Common JS, AMD and ES6 modules it was common to have that those conflicts. That pretty much all disappeared with CommonJS, AMD and now especially with ES6 modules. Any module that pollutes the global name space is shamed until they stop.\n\n&gt;  rename 1\nYou don't have to be pranking to have those issues. You only have to have 2+ devs who rename things.  A new problem has been added, one that didn't exist before. That problem is that from the programmers POV they can't look at a function name and know which function it is at a glance. They have to rely on the IDE to help them at best. This is a common complaint of C++ that there are so many invisible places in the language that can make it hard to really understand what the code is doing at a glance and because of that such a feature has been excluded from many languages in direct response to the problems it causes in C++. So adding a similar feature here doesn't sound like a win",
        "user": "UC6997THT",
        "ts": "1578498492.041600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC6997THT",
            "ts": "1578498623.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T56DK",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " refactoring: i don\u2019t think you\u2019ve quite grasped how the system works. you might want to watch that part of the talk again? on every compile the names of your functions get replaced by codes generated from the compiled abstract syntax of their respective function bodies\n\nso when you change the body of your add function and replace * with +, the ast of your add function changes, its hashed ID changes, and every instance of the word \u201cadd\u201d gets replaced with a different hashID in your code"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "they showed distributed code so when machine A sees a hash for function newABC and machine B sees a hash for oldABC how does machine B know it needs to replace all oldABC hashes with newABC hashes. Or as another example would be pulling in someone else's updated library. Your code says a = #12456(b, c). The new library used to define "
                            },
                            {
                                "type": "color",
                                "value": "#123456"
                            },
                            {
                                "type": "text",
                                "text": " but now only defines "
                            },
                            {
                                "type": "color",
                                "value": "#123457"
                            },
                            {
                                "type": "text",
                                "text": ". In any previous system pulling in the new updated library matches on name but in their system there is not match anymore. Your code is still referencing the old hash\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "conflicts: if you\u2019ve seriously never had a problem with dependencies in javascript i\u2019m not sure this value prop is going to appeal to you"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nJS can function perfectly with zero conflicts unlike C/C++/C#/Java/Swift. You can make up conflicts by polluting the global namespace but that's on you. JS gives you way to make all modules not pollute any namespaces unlike C/C++/C#/Java/Switf. Back before Common JS, AMD and ES6 modules it was common to have that those conflicts. That pretty much all disappeared with CommonJS, AMD and now especially with ES6 modules. Any module that pollutes the global name space is shamed until they stop.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " rename 1"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYou don't have to be pranking to have those issues. You only have to have 2+ devs who rename things.  A new problem has been added, one that didn't exist before. That problem is that from the programmers POV they can't look at a function name and know which function it is at a glance. They have to rely on the IDE to help them at best. This is a common complaint of C++ that there are so many invisible places in the language that can make it hard to really understand what the code is doing at a glance and because of that such a feature has been excluded from many languages in direct response to the problems it causes in C++. So adding a similar feature here doesn't sound like a win"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1568603017.155300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "1a43ebb2-0b85-4e11-a448-e78eee9b2a69",
        "type": "message",
        "text": "I've been trying to find more interesting ways to handle localization -- what we're currently doing is using graphql to query for each bit of text -- Has anyone written on how you'd do it in a pure language?\nAlso if anyone's written something more holistic that combines \"localized text\" and \"localized prices\" / marketing text and db models I'd be interested.\nSo far everything seems to get about this far:  `var\u00a0greeting\u00a0=\u00a0i18n.__('Hello');` and stops there as localization is \"solved\" :stuck_out_tongue:",
        "user": "USCSC4JF2",
        "ts": "1578499227.047600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "USCSC4JF2",
            "ts": "1578500338.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NqRzK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been trying to find more interesting ways to handle localization -- what we're currently doing is using graphql to query for each bit of text -- Has anyone written on how you'd do it in a pure language?\nAlso if anyone's written something more holistic that combines \"localized text\" and \"localized prices\" / marketing text and db models I'd be interested.\nSo far everything seems to get about this far:  "
                            },
                            {
                                "type": "text",
                                "text": "var\u00a0greeting\u00a0=\u00a0i18n.__('Hello');",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and stops there as localization is \"solved\" "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578499227.047600",
        "reply_count": 5,
        "reply_users_count": 3,
        "latest_reply": "1578586015.080300",
        "reply_users": [
            "UC6997THT",
            "ULZLXAWBE",
            "USCSC4JF2"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "cry",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f38cf010-03ed-4f79-9f8e-65ed108c125d",
        "type": "message",
        "text": "I'm guessing you've read this but the example you posted suggests maybe not so posting\n\n<https://metacpan.org/pod/Locale::Maketext::TPJ13>",
        "user": "UC6997THT",
        "ts": "1578499378.048000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Locale::Maketext::TPJ13",
                "title_link": "https://metacpan.org/pod/Locale::Maketext::TPJ13",
                "text": "article about software localization",
                "fallback": "Locale::Maketext::TPJ13",
                "from_url": "https://metacpan.org/pod/Locale::Maketext::TPJ13",
                "service_icon": "https://metacpan.org/static/icons/apple-touch-icon.png",
                "service_name": "metacpan.org",
                "id": 1,
                "original_url": "https://metacpan.org/pod/Locale::Maketext::TPJ13"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Zzjus",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm guessing you've read this but the example you posted suggests maybe not so posting\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://metacpan.org/pod/Locale::Maketext::TPJ13"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578499227.047600",
        "parent_user_id": "USCSC4JF2",
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "USCSC4JF2"
                ],
                "count": 1
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ddb8cdcc-c786-483a-afac-cd5677e8ee14",
        "type": "message",
        "text": "Also I don't have a suggestion really except that `var greeting = i18n.__('Hello');` sets off warning signals to me as it seems to suggest that 'Hello' will translate the same eveywhere it's used. That's not my experience so I'd expect `var greeting = i18n.__(I81N_GREETING_ID_24);`  given that some other place in the code will may also need 'Hello' but it will be a different 'Hello'",
        "user": "UC6997THT",
        "ts": "1578500219.048700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2L6I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also I don't have a suggestion really except that "
                            },
                            {
                                "type": "text",
                                "text": "var greeting = i18n.__('Hello');",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " sets off warning signals to me as it seems to suggest that 'Hello' will translate the same eveywhere it's used. That's not my experience so I'd expect "
                            },
                            {
                                "type": "text",
                                "text": "var greeting = i18n.__(I81N_GREETING_ID_24);",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  given that some other place in the code will may also need 'Hello' but it will be a different 'Hello'"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578499227.047600",
        "parent_user_id": "USCSC4JF2"
    },
    {
        "client_msg_id": "61654202-6A7F-466F-B3D6-24D0DD86AC49",
        "type": "message",
        "text": "you could use the concept of a \u201cbag\u201d? when you\u2019ve selected one or more things, you could drop them into a bag and then go to the place where you need to use them and drag them out of the bag. could be useful for dragging a group of things from one place to many, or for dragging many things from many places to one",
        "user": "UG0EL18H3",
        "ts": "1578505056.051500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rXgq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you could use the concept of a \u201cbag\u201d? when you\u2019ve selected one or more things, you could drop them into a bag and then go to the place where you need to use them and drag them out of the bag. could be useful for dragging a group of things from one place to many, or for dragging many things from many places to one"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578497507.039800",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8891A805-1B9F-401F-9780-1AEA6FC21C00",
        "type": "message",
        "text": "the Magic Cap OS had this concept and in retrospect it\u2019s a bit of a shame we got saddled with \u201cthe clipboard\u201d instead",
        "user": "UG0EL18H3",
        "ts": "1578505102.052600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UG0EL18H3",
            "ts": "1578505127.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bGS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the Magic Cap OS had this concept and in retrospect it\u2019s a bit of a shame we got saddled with \u201cthe clipboard\u201d instead"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578497507.039800",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "C1C13377-E79C-4153-BDF7-0DCCDA24E2CF",
        "type": "message",
        "text": "The NeXTstep File Browser used a \u201cshelf\u201d for this. I loved that feature and was sad to see it removed in OSX. Maybe OSX considers the desktop itself as the shelf, as you can drop items there but could not on NeXTstep.",
        "user": "ULM3U6275",
        "ts": "1578506128.055000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1578506345.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I55",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The NeXTstep File Browser used a \u201cshelf\u201d for this. I loved that feature and was sad to see it removed in OSX. Maybe OSX considers the desktop itself as the shelf, as you can drop items there but could not on NeXTstep."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578497507.039800",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "497F568A-804B-406F-B9BD-72C661E5695F",
        "type": "message",
        "text": "Btw, I\u2019d love to see a video or write-up of the interesting interactions and gestures used on older devices (Newton, MagicCap, Go, SketchPad, Smalltalk, Self, etc) that haven\u2019t (yet) been adopted on modern platforms. I recently noticed that Newton had a tap-drag to copy an item vs drag to move interaction that I thought was nice.",
        "user": "ULM3U6275",
        "ts": "1578507653.060700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fSuo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Btw, I\u2019d love to see a video or write-up of the interesting interactions and gestures used on older devices (Newton, MagicCap, Go, SketchPad, Smalltalk, Self, etc) that haven\u2019t (yet) been adopted on modern platforms. I recently noticed that Newton had a tap-drag to copy an item vs drag to move interaction that I thought was nice."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578497507.039800",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "a1e52dbc-cbdb-4744-8206-e68dd14d408b",
        "type": "message",
        "text": "Thanks to everyone that replied. I gave some of the suggestions here a shot the other day and came up with the name \u201cSTRVCT\u201d (short for structured editor). Any thoughts on this name? Good enough to be more than a codename? Is the V too weird?",
        "user": "ULM3U6275",
        "ts": "1578510082.060900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1578511137.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xvfU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks to everyone that replied. I gave some of the suggestions here a shot the other day and came up with the name \u201cSTRVCT\u201d (short for structured editor). Any thoughts on this name? Good enough to be more than a codename? Is the V too weird?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578328340.438400",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "932781df-5ad1-495f-9792-af0394a67e23",
        "type": "message",
        "text": "Tap-drag to copy sounds a bit like option-drag to copy, which is a near universal standard.",
        "user": "UC2A2ARPT",
        "ts": "1578517415.061700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ALBDB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tap-drag to copy sounds a bit like option-drag to copy, which is a near universal standard."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578497507.039800",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "36dd2d5f-84e1-4538-a849-3fb4d0ec8d6a",
        "type": "message",
        "text": "There was a beloved Mac utility that did the \"floating shelf you can temporarily drop stuff on\" thing, but after 24 years it _just_ died due to the end of 32-bit support. <https://dragthing.com>",
        "user": "UC2A2ARPT",
        "ts": "1578517453.061900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1578517527.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hDRyW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There was a beloved Mac utility that did the \"floating shelf you can temporarily drop stuff on\" thing, but after 24 years it "
                            },
                            {
                                "type": "text",
                                "text": "just",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " died due to the end of 32-bit support. "
                            },
                            {
                                "type": "link",
                                "url": "https://dragthing.com"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578497507.039800",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "2f833bc5-6d5c-4426-9d4e-5ac20366ecd7",
        "type": "message",
        "text": "<https://en.wikipedia.org/wiki/DragThing>",
        "user": "UC2A2ARPT",
        "ts": "1578517579.062400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1578517583.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h3IXH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/DragThing"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578497507.039800",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "5dc4c5ef-5733-4604-900f-c1ccd36df53c",
        "type": "message",
        "text": "<https://www.youtube.com/watch?v=YDvbDiJZpy0>",
        "user": "UBN9AFS0N",
        "ts": "1578517880.062900",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Meet the inventor of the electronic spreadsheet | Dan Bricklin",
                "title_link": "https://www.youtube.com/watch?v=YDvbDiJZpy0",
                "author_name": "TED",
                "author_link": "https://www.youtube.com/user/TEDtalksDirector",
                "thumb_url": "https://i.ytimg.com/vi/YDvbDiJZpy0/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Meet the inventor of the electronic spreadsheet | Dan Bricklin",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/YDvbDiJZpy0?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=YDvbDiJZpy0",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=YDvbDiJZpy0"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PPpX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=YDvbDiJZpy0"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UGLSY9X3J",
                    "UEGFXUK3M"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "1e5a62e3-2ad8-4503-bdfb-0280c513e4b8",
        "type": "message",
        "text": "Bob Frankston and Dan Bricklin invented Visicalc, one of the most important inventions of the century. It is a very interesting lesson in entrepreneurship to observe how Lotus 1-2-3 and Quattro out-competed them, ending with Multiplan then Excel taking over, and now Google docs slowly chipping away at MS's lead.",
        "user": "UEQ6M68H0",
        "ts": "1578519671.065000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1578527451.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r9=D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Bob Frankston and Dan Bricklin invented Visicalc, one of the most important inventions of the century. It is a very interesting lesson in entrepreneurship to observe how Lotus 1-2-3 and Quattro out-competed them, ending with Multiplan then Excel taking over, and now Google docs slowly chipping away at MS's lead."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "7f13c083-4c12-4c72-861f-83aa54ea077f",
        "type": "message",
        "text": "<@UJN1TAYEQ> One day i was visiting Project Mac, the operating system team at MIT. Bob Frankston (the future co-inventor of the spreadsheet) was one of the team members, and while in his cubicle how was demonstrating how the MULTICS operating system (the competitor to UNIX, and superior in most technical aspects) had dynamic linking, which meant that at any moment you could swap out kernel modules. He was experimenting with a new memory manager, and turned it on, while dozens of other people were using that Machine (this was time sharing days). It crashed immediately, and all the people in the other cubicles yelled out in anguish as the system was now down. Dynamic linking is a supremely powerful technique, but rather dangerous as this example shows.",
        "user": "UEQ6M68H0",
        "ts": "1578520123.065100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=ytC7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " One day i was visiting Project Mac, the operating system team at MIT. Bob Frankston (the future co-inventor of the spreadsheet) was one of the team members, and while in his cubicle how was demonstrating how the MULTICS operating system (the competitor to UNIX, and superior in most technical aspects) had dynamic linking, which meant that at any moment you could swap out kernel modules. He was experimenting with a new memory manager, and turned it on, while dozens of other people were using that Machine (this was time sharing days). It crashed immediately, and all the people in the other cubicles yelled out in anguish as the system was now down. Dynamic linking is a supremely powerful technique, but rather dangerous as this example shows."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578385588.031500",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "8489a7f4-b574-4c25-afa8-fc90245778a6",
        "type": "message",
        "text": "<@UEQ6M68H0> Have you read any analysis of how that happened? I know a former Lotus exec I could ask for their side of the story.",
        "user": "ULM3U6275",
        "ts": "1578521118.066600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0pU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " Have you read any analysis of how that happened? I know a former Lotus exec I could ask for their side of the story."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578521118.066600",
        "reply_count": 9,
        "reply_users_count": 3,
        "latest_reply": "1578688229.107700",
        "reply_users": [
            "UEQ6M68H0",
            "ULM3U6275",
            "UFLN9JFRT"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "8bd0a411-267c-4324-b9f9-81dea35e1c4f",
        "type": "message",
        "text": "<@UEQ6M68H0> What do you think about Rx and Reactive systems (FRP)?",
        "user": "UL3CJ7YKC",
        "ts": "1578521555.067100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1578521579.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NWi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " What do you think about Rx and Reactive systems (FRP)?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578521555.067100",
        "reply_count": 7,
        "reply_users_count": 4,
        "latest_reply": "1578546656.078800",
        "reply_users": [
            "UJN1TAYEQ",
            "UL3CJ7YKC",
            "UEQ6M68H0",
            "UA14TGLTC"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "29716be1-3090-4bf4-b603-969bde8add58",
        "type": "message",
        "text": "FRP is not the same as Rx. FRP is pure functional programming (functions are pure and there is no shared mutable state), whereas ReactiveX is imperative and object-oriented (Observable methods like onNext, onError, onCompleted have side effects, which requires shared mutable state). The ReactiveX web site says this:\n&gt; It is sometimes called \u201cfunctional reactive programming\u201d but this is a misnomer. ReactiveX may be functional, and it may be reactive, but \u201cfunctional reactive programming\u201d is a different animal. One main point of difference is that functional reactive programming operates on values that change\u00a0_continuously_\u00a0over time, while ReactiveX operates on\u00a0_discrete_\u00a0values that are emitted over time. (See\u00a0Conal Elliott\u2019s work for more-precise information on functional reactive programming.)",
        "user": "UJN1TAYEQ",
        "ts": "1578523409.067500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lzH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FRP is not the same as Rx. FRP is pure functional programming (functions are pure and there is no shared mutable state), whereas ReactiveX is imperative and object-oriented (Observable methods like onNext, onError, onCompleted have side effects, which requires shared mutable state). The ReactiveX web site says this:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It is sometimes called \u201cfunctional reactive programming\u201d but this is a misnomer. ReactiveX may be functional, and it may be reactive, but \u201cfunctional reactive programming\u201d is a different animal. One main point of difference is that functional reactive programming operates on values that change\u00a0"
                            },
                            {
                                "type": "text",
                                "text": "continuously",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u00a0over time, while ReactiveX operates on\u00a0"
                            },
                            {
                                "type": "text",
                                "text": "discrete",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u00a0values that are emitted over time. (See\u00a0Conal Elliott\u2019s work for more-precise information on functional reactive programming.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578521555.067100",
        "parent_user_id": "UL3CJ7YKC",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    }
]