[
    {
        "client_msg_id": "45623DA7-052D-4A99-B472-7CA62DCA3DF9",
        "type": "message",
        "text": "Are there any examples of systems that do a good job of this?",
        "user": "ULM3U6275",
        "ts": "1578793929.134200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bs0Bz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are there any examples of systems that do a good job of this?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "47e82b14-c204-4691-a051-9295bdd08971",
        "type": "message",
        "text": "Wow there's a lot of stuff to respond to here, but here's a summary of what I'm thinking. My hypothesis is that the barrier to entry for generative art / creative coding / reactive animations is very high because the medium is naturally difficult to map onto imperative code. FRP (or more specifically DCTP) was originally invented to solve this exact problem but hasn't taken off for many reasons: meta-level thinking required for higher order streams, lack of interfaces (text or otherwise) that allow one to manipulate streams in an easily-digestible way, and performance to name a few challenges. None of these seem insurmountable and I think that a tool like this has the potential to blur the line between programmer and artist like Processing intended nearly two decades ago",
        "user": "UQ3QA3ZAR",
        "ts": "1578797809.134400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RnnZS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wow there's a lot of stuff to respond to here, but here's a summary of what I'm thinking. My hypothesis is that the barrier to entry for generative art / creative coding / reactive animations is very high because the medium is naturally difficult to map onto imperative code. FRP (or more specifically DCTP) was originally invented to solve this exact problem but hasn't taken off for many reasons: meta-level thinking required for higher order streams, lack of interfaces (text or otherwise) that allow one to manipulate streams in an easily-digestible way, and performance to name a few challenges. None of these seem insurmountable and I think that a tool like this has the potential to blur the line between programmer and artist like Processing intended nearly two decades ago"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "349b52c0-4bf0-4b13-aa1b-130d190d44f2",
        "type": "message",
        "text": "Tools like Core Animation and Greensock are the exact opposite of what I'm looking for. I'm thinking about animation as a pure function from user interaction to pixels on a screen\u2014inherently interrupt-able. frameworks like these seem like solutions created for interfaces where the language didn't have the expressive power to model continuous time",
        "user": "UQ3QA3ZAR",
        "ts": "1578798292.134600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xvktm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tools like Core Animation and Greensock are the exact opposite of what I'm looking for. I'm thinking about animation as a pure function from user interaction to pixels on a screen\u2014inherently interrupt-able. frameworks like these seem like solutions created for interfaces where the language didn't have the expressive power to model continuous time"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR"
    },
    {
        "client_msg_id": "4e63909b-a0c8-442b-8d2a-49de02d654a4",
        "type": "message",
        "text": "Doug's thoughts above about FRAN I think are spot on though I'm biased toward artistic expression over mathematical purity",
        "user": "UQ3QA3ZAR",
        "ts": "1578798831.135100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vRxmJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Doug's thoughts above about FRAN I think are spot on though I'm biased toward artistic expression over mathematical purity"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "C4F482D3-35F3-4324-82EE-7F435AD969B7",
        "type": "message",
        "text": "I would recommend The Humane Interface, though apparently people who have actually used the hardware and software described in the book are less enthusiastic: <https://twitter.com/amyhoy/status/1209720373287124992|https://twitter.com/amyhoy/status/1209720373287124992>",
        "user": "UFEQUBNNT",
        "ts": "1578800042.138100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/amyhoy|@amyhoy>: 39. jef raskin. if you know who he is, you know that emperor has no clothes. his boondoggle, the cue cat, is quite possibly the least usable computer ever \u201cdesigned.\u201d his work speaks for itself.\n\nyet (some) people still treat him like a good source.",
                "ts": 1577254787,
                "author_name": "Amy \u201cSpoils the Fun\u201d Hoy",
                "author_link": "https://twitter.com/amyhoy/status/1209720373287124992",
                "author_icon": "https://pbs.twimg.com/profile_images/1213605284444164096/d785ziR8_normal.jpg",
                "author_subname": "@amyhoy",
                "text": "39. jef raskin. if you know who he is, you know that emperor has no clothes. his boondoggle, the cue cat, is quite possibly the least usable computer ever \u201cdesigned.\u201d his work speaks for itself.\n\nyet (some) people still treat him like a good source.",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/amyhoy/status/1209720373287124992",
                "id": 1,
                "original_url": "https://twitter.com/amyhoy/status/1209720373287124992",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C3K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would recommend The Humane Interface, though apparently people who have actually used the hardware and software described in the book are less enthusiastic: "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/amyhoy/status/1209720373287124992",
                                "text": "https://twitter.com/amyhoy/status/1209720373287124992"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "FB9152B8-2D9A-46E7-8F1E-4C820D27732F",
        "type": "message",
        "text": "(Cue Cat is a typo. He worked on the Canon Cat.)",
        "user": "UFEQUBNNT",
        "ts": "1578800078.138900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RF=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(Cue Cat is a typo. He worked on the Canon Cat.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "9e9b2a29-d9d2-4d54-a4c2-138742b689d0",
        "type": "message",
        "text": "Yeah, I might give it a read with my skeptic hat on. UI has evolved a lot since that book was written, so it will be interesting to see his perspective.",
        "user": "UCGAK10LS",
        "ts": "1578800358.139100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+BV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I might give it a read with my skeptic hat on. UI has evolved a lot since that book was written, so it will be interesting to see his perspective."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "0dd91b0d-eb66-40a4-8013-aa41757f85c9",
        "type": "message",
        "text": "<@ULM3U6275> Examples of good structure editors and/or systems that \"work well for both mouse navigation and keyboard navigation\"? I actually don't know many! I've seen a few apps that I've personally found convoluted, though.\nNotion is a pretty damn good structure editor, though the structure being edited isn't that complex. TreeSheets (<http://strlen.com/treesheets/>) extends the spreadsheet paradigm, but I find some of its controls awkward.",
        "user": "UCGAK10LS",
        "ts": "1578813047.139500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1578813070.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0VmZC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": " Examples of good structure editors and/or systems that \"work well for both mouse navigation and keyboard navigation\"? I actually don't know many! I've seen a few apps that I've personally found convoluted, though.\nNotion is a pretty damn good structure editor, though the structure being edited isn't that complex. TreeSheets ("
                            },
                            {
                                "type": "link",
                                "url": "http://strlen.com/treesheets/"
                            },
                            {
                                "type": "text",
                                "text": ") extends the spreadsheet paradigm, but I find some of its controls awkward."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "D7E2517B-5121-4391-846F-21B73A9F2C73",
        "type": "message",
        "text": "the developer of treesheets <@UHDQ62M4P> is in this slack and probably has thoughts about why the controls are that way\u2014might be worth talking to him",
        "user": "UHWC9PXBL",
        "ts": "1578815784.142200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qI9A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the developer of treesheets "
                            },
                            {
                                "type": "user",
                                "user_id": "UHDQ62M4P"
                            },
                            {
                                "type": "text",
                                "text": " is in this slack and probably has thoughts about why the controls are that way\u2014might be worth talking to him"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "bba07645-a877-429d-8be6-8704f3c86ec9",
        "type": "message",
        "text": "<@UCGAK10LS> which in particular are awkward? I started the UI trying to match Excel, but it diverged from that, clearly",
        "user": "UHDQ62M4P",
        "ts": "1578844877.143200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xsQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " which in particular are awkward? I started the UI trying to match Excel, but it diverged from that, clearly"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "20d898ad-7e42-498c-83c8-a6dba251f078",
        "type": "message",
        "text": "note I will make no claims of good UI.. TreeSheets was made purely to fill a personal need, then open sourced.. its very different from one of \"change the world\" startups with money behind them :slightly_smiling_face:",
        "user": "UHDQ62M4P",
        "ts": "1578845231.143400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4sJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "note I will make no claims of good UI.. TreeSheets was made purely to fill a personal need, then open sourced.. its very different from one of \"change the world\" startups with money behind them "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "8424ACC7-0CD7-41B0-9787-33D026062811",
        "type": "message",
        "text": "... in a good way!",
        "user": "UC2A2ARPT",
        "ts": "1578851844.144100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QUpDb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "... in a good way!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1578710091.108500",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "grinning",
                "users": [
                    "UHDQ62M4P",
                    "UBSMEUXAA",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "fb188877-9349-4197-ae7a-786a1872ec42",
        "type": "message",
        "text": "My main goals for Curv are:\n\u2022 Artistic expressiveness. You can make any kind of 2D or 3D art, using a wide variety of techniques.\n\u2022 Ease of use. This covers a lot of ground, including the IDE and the language itself.\nMathematical purity is not a goal, but there are lots of areas in the design where mathematical purity makes important contributions to artistic expressiveness, ease of use, and ease of engineering. So I use mathematical purity as a tool, not as an end in itself:\n\u2022 Pure functional programming. This contributes greatly to ease of use, and simplifies the engineering (generating data-parallel rendering code). The semantics of the language are much simpler. A pure functional API for constructing shapes by composing functions is *so much nicer* than a 1990's style API where graphical primitives paint directly onto a canvas and you have to manage a set of global variables containing the current colour, the current line width, the current transformation matrix, etc.\n\u2022 Abstract algebra, what Haskell calls \"equational reasoning\". Unlike most programming languages, the equality operator `a==b` is an equivalence relation: `a==a`; `a==b` implies `b==a`; `a==b` and `b==c` implies `a==c`. Unlike most dynamic languages, the boolean operations obey all the axioms of a boolean algebra. For example, unlike in Python Javascript Lisp, the boolean and operator is commutative. This all falls under ease of use: simple language semantics, no surprises.\nHowever, there are some kinds of mathematical purity in Haskell culture that are detrimental to my goals.\n\u2022 Lazy function calls are a net loss; Curv uses strict argument evaluation in function calls.\n\u2022 Static typing is a big barrier to learning a language, and is incompatible with live programming, so Curv is dynamically typed.\n\u2022 I haven't built a Turing complete reactive API yet, but DCTP looks really hard to understand. The Elm language transitioned from \"mathematically pure\" FRP to \"the Elm architecture\", which is much easier to understand, and it is still \"pure functional\" and \"reactive\". So I'll probably take my lead from Elm, begin with the Elm architecture, and iterate from there.",
        "user": "UJN1TAYEQ",
        "ts": "1578856902.144400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OHGt+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My main goals for Curv are:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Artistic expressiveness. You can make any kind of 2D or 3D art, using a wide variety of techniques."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Ease of use. This covers a lot of ground, including the IDE and the language itself."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Mathematical purity is not a goal, but there are lots of areas in the design where mathematical purity makes important contributions to artistic expressiveness, ease of use, and ease of engineering. So I use mathematical purity as a tool, not as an end in itself:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Pure functional programming. This contributes greatly to ease of use, and simplifies the engineering (generating data-parallel rendering code). The semantics of the language are much simpler. A pure functional API for constructing shapes by composing functions is "
                                    },
                                    {
                                        "type": "text",
                                        "text": "so much nicer",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " than a 1990's style API where graphical primitives paint directly onto a canvas and you have to manage a set of global variables containing the current colour, the current line width, the current transformation matrix, etc."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Abstract algebra, what Haskell calls \"equational reasoning\". Unlike most programming languages, the equality operator "
                                    },
                                    {
                                        "type": "text",
                                        "text": "a==b",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " is an equivalence relation: "
                                    },
                                    {
                                        "type": "text",
                                        "text": "a==a",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "; "
                                    },
                                    {
                                        "type": "text",
                                        "text": "a==b",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " implies "
                                    },
                                    {
                                        "type": "text",
                                        "text": "b==a",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "; "
                                    },
                                    {
                                        "type": "text",
                                        "text": "a==b",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " and "
                                    },
                                    {
                                        "type": "text",
                                        "text": "b==c",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " implies "
                                    },
                                    {
                                        "type": "text",
                                        "text": "a==c",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ". Unlike most dynamic languages, the boolean operations obey all the axioms of a boolean algebra. For example, unlike in Python Javascript Lisp, the boolean and operator is commutative. This all falls under ease of use: simple language semantics, no surprises."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "However, there are some kinds of mathematical purity in Haskell culture that are detrimental to my goals.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Lazy function calls are a net loss; Curv uses strict argument evaluation in function calls."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Static typing is a big barrier to learning a language, and is incompatible with live programming, so Curv is dynamically typed."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I haven't built a Turing complete reactive API yet, but DCTP looks really hard to understand. The Elm language transitioned from \"mathematically pure\" FRP to \"the Elm architecture\", which is much easier to understand, and it is still \"pure functional\" and \"reactive\". So I'll probably take my lead from Elm, begin with the Elm architecture, and iterate from there."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1578272464.418200",
        "parent_user_id": "UQ3QA3ZAR",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    }
]