[
    {
        "client_msg_id": "b1e9ef13-71a3-40b4-b388-97570ea901c0",
        "type": "message",
        "text": "Good to see a history on this, I've wanted to read one for a while! I see parallels here to other human psycho-technological constructs that haven't panned out well, like logical conlanguages and classical AI.\n\nIn the case of logical conlanguages, there's the social problem of people not agreeing on semantics and ontologies, and a tension between specific aesthetic notions of elegance and simplicity that the creators have, coming up against practical and realistic needs of a language speaker, and the psychology they already have. Seems like there may have been similar problems with the semantic web movement.",
        "user": "UMWF81HTP",
        "ts": "1579841474.022800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IuE9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good to see a history on this, I've wanted to read one for a while! I see parallels here to other human psycho-technological constructs that haven't panned out well, like logical conlanguages and classical AI.\n\nIn the case of logical conlanguages, there's the social problem of people not agreeing on semantics and ontologies, and a tension between specific aesthetic notions of elegance and simplicity that the creators have, coming up against practical and realistic needs of a language speaker, and the psychology they already have. Seems like there may have been similar problems with the semantic web movement."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579770732.001000",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "c284c0fa-9b5b-4df9-914f-a9637eb10aca",
        "type": "message",
        "text": "Grace Hopper is a classic -  she has a nice split between Data Processing and Math - she explains the history and how calculation of missile trajectory and record keeping tend to need different solutions. (1hour 25min) .. am fairly sure this is the right video, I remember it being long, but well worth watching. <https://www.youtube.com/watch?v=ZR0ujwlvbkQ&amp;feature=youtu.be>",
        "user": "UP6G25H35",
        "ts": "1579842248.028100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Grace Hopper Lecture",
                "title_link": "https://www.youtube.com/watch?v=ZR0ujwlvbkQ&amp;feature=youtu.be",
                "author_name": "MIT Lincoln Laboratory",
                "author_link": "https://www.youtube.com/channel/UCEt4etCj34K9V5ZJipW4C_A",
                "thumb_url": "https://i.ytimg.com/vi/ZR0ujwlvbkQ/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Grace Hopper Lecture",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/ZR0ujwlvbkQ?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=ZR0ujwlvbkQ&amp;feature=youtu.be",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=ZR0ujwlvbkQ&amp;feature=youtu.be"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VNoX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Grace Hopper is a classic -  she has a nice split between Data Processing and Math - she explains the history and how calculation of missile trajectory and record keeping tend to need different solutions. (1hour 25min) .. am fairly sure this is the right video, I remember it being long, but well worth watching. "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=ZR0ujwlvbkQ&feature=youtu.be"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579645005.241100",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "6726530e-8ffd-4647-9089-5d42e37232b8",
        "type": "message",
        "text": "<@UJN1TAYEQ> Javascript is way more directly related to Actionscript 2 and its predecessors than Self. If you look at the libraries for AS2 you can see JS copied the weird quirk of the date function that months start with 0 for january. Javascript is #1 not because of merit, but because dictators like Steve Jobs issued an edict from on high that JS was the only interpreted language permitted in their all important IOS universe and in their browsers. I admit that the V8 engine is one of the marvels of the modern software world; an interpreted language that is within spitting distance of the speed of a highly optimized compiled language, but that doesn't change the fact that JS was hardly designed to be the main programming language for millions of programmers, and carry billions of lines of codes. Its module system is a bungled subset of AS3, and i won't bore you with the myriad other problems of JS. My favorite is that adding a string accidentally into an expression can cause type changes all the way up the call chain, wreaking havoc. Part of the poor quality of modern software can be traced to flabby languages like JS.  I would not call Lua a derivative of Self. Lua was developed independently at the Catholic University in Rio, Brasil. I don't see anything in Self that survived, which is why i call it a dead end.  It was yet another Xerox Parc project that never got commercialized properly. One can argue that Xerox had the worst ratio of ideas commercialized divided by ideas invented, basically near zero. They should make all tech managers watch some kind of training film showing the repeated stupidity of the managers who basically forced their employees to leave and start companies, many of which are way bigger than Xerox. (Xerox has market cap of 8 billion, Adobe 170 billion for example).",
        "user": "UEQ6M68H0",
        "ts": "1579842769.033900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fcV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " Javascript is way more directly related to Actionscript 2 and its predecessors than Self. If you look at the libraries for AS2 you can see JS copied the weird quirk of the date function that months start with 0 for january. Javascript is #1 not because of merit, but because dictators like Steve Jobs issued an edict from on high that JS was the only interpreted language permitted in their all important IOS universe and in their browsers. I admit that the V8 engine is one of the marvels of the modern software world; an interpreted language that is within spitting distance of the speed of a highly optimized compiled language, but that doesn't change the fact that JS was hardly designed to be the main programming language for millions of programmers, and carry billions of lines of codes. Its module system is a bungled subset of AS3, and i won't bore you with the myriad other problems of JS. My favorite is that adding a string accidentally into an expression can cause type changes all the way up the call chain, wreaking havoc. Part of the poor quality of modern software can be traced to flabby languages like JS.  I would not call Lua a derivative of Self. Lua was developed independently at the Catholic University in Rio, Brasil. I don't see anything in Self that survived, which is why i call it a dead end.  It was yet another Xerox Parc project that never got commercialized properly. One can argue that Xerox had the worst ratio of ideas commercialized divided by ideas invented, basically near zero. They should make all tech managers watch some kind of training film showing the repeated stupidity of the managers who basically forced their employees to leave and start companies, many of which are way bigger than Xerox. (Xerox has market cap of 8 billion, Adobe 170 billion for example)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "38159e21-6bef-4e1d-b81e-e82888a585a3",
        "type": "message",
        "text": "A bright, entertaining woman, but COBOL was hideous, one of the most verbose languages ever devised.",
        "user": "UEQ6M68H0",
        "ts": "1579843024.034000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rGG4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A bright, entertaining woman, but COBOL was hideous, one of the most verbose languages ever devised."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579645005.241100",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "5cb60445-d502-4d9e-afb0-6dc53b881c02",
        "type": "message",
        "text": "JS predates ActionScript by 3 years..",
        "user": "UEBG0NPDK",
        "ts": "1579844885.034500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1579845083.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EHCWh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "JS predates ActionScript by 3 years.."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "142652b5-35c7-4a1f-a2bc-c29d047865a6",
        "type": "message",
        "text": "\"Given the process that created JavaScript and made it a de facto standard, we deserve something far worse.\" \u2014 Douglas Crockford\n\n\"Lua is best described as a closed-development, open-source project.  Lua is not developed in a collaborative way. ... Lua provides mechanism not policy. ... Instead of littering the language with lots of features, we provided ways for users to program the features themselves, in the way they wanted them, and only for those features they needed. ... Most successful languages are raised rather than designed. ... We include a new feature in Lua only when all three of us agree.\" \u2014 The Evolution of Lua",
        "user": "UA14TGLTC",
        "ts": "1579845088.035700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5uz6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Given the process that created JavaScript and made it a de facto standard, we deserve something far worse.\" \u2014 Douglas Crockford\n\n\"Lua is best described as a closed-development, open-source project.  Lua is not developed in a collaborative way. ... Lua provides mechanism not policy. ... Instead of littering the language with lots of features, we provided ways for users to program the features themselves, in the way they wanted them, and only for those features they needed. ... Most successful languages are raised rather than designed. ... We include a new feature in Lua only when all three of us agree.\" \u2014 The Evolution of Lua"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "24F8BB74-F46C-49A9-AF83-949CA7B4DEC2",
        "type": "message",
        "text": "JS and Lua feel to me to be more related to Netwonscript which was inspired by Self, but maybe this is just convergent evolution. I agree with Edward that JS is far from an ideal high level language, but it has most of the high level features one might want to build on (besides coroutines) and feels cleaner (to me) than many others (Perl, Python, Ruby, Java). ",
        "user": "ULM3U6275",
        "ts": "1579848082.043600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1579848120.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n5MIJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "JS and Lua feel to me to be more related to Netwonscript which was inspired by Self, but maybe this is just convergent evolution. I agree with Edward that JS is far from an ideal high level language, but it has most of the high level features one might want to build on (besides coroutines) and feels cleaner (to me) than many others (Perl, Python, Ruby, Java). "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "937f3feb-61fc-40bb-aebb-55451d572fc7",
        "type": "message",
        "text": "Coming back to the static/dynamic typing conversation of a few days ago (ephemerality thy name is Slack), what do yinz think of:\n```static void m(String s) {\n\tSystem.out.println(\"String\");\n}\n\nstatic void m(Object o) {\n\tSystem.out.println(\"String\");\n}\n\npublic static void main(String[] args) {\n\tString s = \"s\";\n\tObject o = s;\n\tm(s); // prints \"String\"\n\tm(o); // prints \"Object\n}```",
        "user": "UA14TGLTC",
        "ts": "1579848639.045500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p=ipq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Coming back to the static/dynamic typing conversation of a few days ago (ephemerality thy name is Slack), what do yinz think of:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "static void m(String s) {\n\tSystem.out.println(\"String\");\n}\n\nstatic void m(Object o) {\n\tSystem.out.println(\"String\");\n}\n\npublic static void main(String[] args) {\n\tString s = \"s\";\n\tObject o = s;\n\tm(s); // prints \"String\"\n\tm(o); // prints \"Object\n}"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "2de6d382-806b-46a9-9cd6-278e7ae1ffbe",
        "type": "message",
        "text": "<@UEQ6M68H0> js copied java\u2019s date stuff not actionscript. even ignoring that js came well before actionscript like <@UEBG0NPDK> said, i know this because i complained about it once on twitter and brendan came into my mentions to tell me to blame java and not him lol",
        "user": "UMU2RLPR8",
        "ts": "1579856617.047100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pxyS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " js copied java\u2019s date stuff not actionscript. even ignoring that js came well before actionscript like "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " said, i know this because i complained about it once on twitter and brendan came into my mentions to tell me to blame java and not him lol"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "8b36767a-648f-4ffd-8d50-656ed9cf5d20",
        "type": "message",
        "text": "Well brendan should know. The pioneers of scripting languages don't get their proper credit. Before AS2 there was Lingo and before that there were some other projects that were around hypercard time that allowed people to do multimedia on PC's. VideoWorks's (1985) sequel, Macromedia director 3 (1993), was huge in its day; cost hundreds in a fancy box designed by Clement Mok, back when people spent big money on boxes. These early scripting languages predate Java and JS. They had triggering on mouse clicks. The CDROM business, Random House/Living Books, Myst, etc., created a whole industry of multimedia that forever changed what computers were considered capable of doing. Broderbund was a key company in this phase; they made kids/educational products, which drove the entire market. Desktop people were stuck in silent spreadsheets, but now you had animation, and stereo sound. It sold a ton of PC's. Millions of PC's were sold, just via Myst alone. It was a pre-rendered 3D game that ran on machines with no 3D hardware, and used to great effect the fog filters of Strata and had a great soundtrack. Because there was so much copying done between the early products, and because the companies were so unstable and getting absorbed it is hard to give proper credit. JS didn't come out until 1995 long after these multimedia scripting products which must have been known to the JS team at Netscape. Marc Canter and his team were really big pioneers, and i wish more people would acknowledge how instrumental these tools were in creating a software revolution <http://lingoworkshop.com/articles/history>",
        "user": "UEQ6M68H0",
        "ts": "1579857909.058600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Lingoworkshop",
                "title_link": "http://lingoworkshop.com/articles/history",
                "text": "The Lingoworkshop: MeccaMedialight's contribution to the Director and Shockwave developer community.",
                "fallback": "Lingoworkshop",
                "from_url": "http://lingoworkshop.com/articles/history",
                "service_name": "lingoworkshop.com",
                "id": 1,
                "original_url": "http://lingoworkshop.com/articles/history"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZaQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well brendan should know. The pioneers of scripting languages don't get their proper credit. Before AS2 there was Lingo and before that there were some other projects that were around hypercard time that allowed people to do multimedia on PC's. VideoWorks's (1985) sequel, Macromedia director 3 (1993), was huge in its day; cost hundreds in a fancy box designed by Clement Mok, back when people spent big money on boxes. These early scripting languages predate Java and JS. They had triggering on mouse clicks. The CDROM business, Random House/Living Books, Myst, etc., created a whole industry of multimedia that forever changed what computers were considered capable of doing. Broderbund was a key company in this phase; they made kids/educational products, which drove the entire market. Desktop people were stuck in silent spreadsheets, but now you had animation, and stereo sound. It sold a ton of PC's. Millions of PC's were sold, just via Myst alone. It was a pre-rendered 3D game that ran on machines with no 3D hardware, and used to great effect the fog filters of Strata and had a great soundtrack. Because there was so much copying done between the early products, and because the companies were so unstable and getting absorbed it is hard to give proper credit. JS didn't come out until 1995 long after these multimedia scripting products which must have been known to the JS team at Netscape. Marc Canter and his team were really big pioneers, and i wish more people would acknowledge how instrumental these tools were in creating a software revolution "
                            },
                            {
                                "type": "link",
                                "url": "http://lingoworkshop.com/articles/history"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "5e19ace9-5cde-4573-b3ed-244c8bff4f57",
        "type": "message",
        "text": "Ah, i found the original product that predates or at the least is at the same time as JS, it was called FutureSplash Animator (1993) <https://weekly-geekly.github.io/articles/148212/index.html>  This was all owned by Macromedia at the time. Macromedia had Freehand (from Altsys), and Fontographer, and some other great products. Adobe bought all of these firms and unfortunately these tool pioneers are ignored.",
        "user": "UEQ6M68H0",
        "ts": "1579858977.062300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "What happened to the two developers who created Flash in 1993",
                "title_link": "https://weekly-geekly.github.io/articles/148212/index.html",
                "text": "In 1993, two American programmers Jonathan Gay (left) and Robert Tatsumi (right) founded the company Future Wave Software and released the vector edit...",
                "fallback": "What happened to the two developers who created Flash in 1993",
                "from_url": "https://weekly-geekly.github.io/articles/148212/index.html",
                "service_icon": "https://weekly-geekly.github.io/favicon.ico",
                "service_name": "weekly-geekly.github.io",
                "id": 1,
                "original_url": "https://weekly-geekly.github.io/articles/148212/index.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y2uO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, i found the original product that predates or at the least is at the same time as JS, it was called FutureSplash Animator (1993) "
                            },
                            {
                                "type": "link",
                                "url": "https://weekly-geekly.github.io/articles/148212/index.html"
                            },
                            {
                                "type": "text",
                                "text": "  This was all owned by Macromedia at the time. Macromedia had Freehand (from Altsys), and Fontographer, and some other great products. Adobe bought all of these firms and unfortunately these tool pioneers are ignored."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579858977.062300",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1579997929.128100",
        "reply_users": [
            "UA14TGLTC"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "38304221-b939-40b1-a423-47544865ca08",
        "type": "message",
        "text": "A completely unrelated question:\n\nEvery programming language has a notion of \"dependencies\" between data, e.g. the between the variables (or functions) of a program. Understanding this dependency graph is important: it helps you determine the flow of data through your program. Consequently, it's problematic if every value is accessible from everywhere. Programming languages usually solve this with a notion called *scope.* Scopes are typically nested. Scopes may take the form of \"modules\" or \"blocks\".\n\nIt's my understanding that organising data into scopes is a mere approximation to expressing the true dependency graph of a program's data (which can be a DAG or a cyclic graph, not just a tree). It's easy to see the extent of a value hidden in a block, but it's not possible to show that a value is referenced in precisely two blocks. Similarly, it's easy to make values internal to a module, but PLs don't have a built-in way to visualise how the imports and exports of modules are interconnected (there are some external tools for visualising this).\n\n*My question is:* has anyone seen some good ways of representing data dependencies? Something better than a boxes-and-arrows visualisation?",
        "user": "UCGAK10LS",
        "ts": "1579859955.070800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1579910643.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bXg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A completely unrelated question:\n\nEvery programming language has a notion of \"dependencies\" between data, e.g. the between the variables (or functions) of a program. Understanding this dependency graph is important: it helps you determine the flow of data through your program. Consequently, it's problematic if every value is accessible from everywhere. Programming languages usually solve this with a notion called "
                            },
                            {
                                "type": "text",
                                "text": "scope.",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " Scopes are typically nested. Scopes may take the form of \"modules\" or \"blocks\".\n\nIt's my understanding that organising data into scopes is a mere approximation to expressing the true dependency graph of a program's data (which can be a DAG or a cyclic graph, not just a tree). It's easy to see the extent of a value hidden in a block, but it's not possible to show that a value is referenced in precisely two blocks. Similarly, it's easy to make values internal to a module, but PLs don't have a built-in way to visualise how the imports and exports of modules are interconnected (there are some external tools for visualising this).\n\n"
                            },
                            {
                                "type": "text",
                                "text": "My question is:",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " has anyone seen some good ways of representing data dependencies? Something better than a boxes-and-arrows visualisation?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579859955.070800",
        "reply_count": 30,
        "reply_users_count": 8,
        "latest_reply": "1580630678.313300",
        "reply_users": [
            "UE6EFEPTQ",
            "UCGAK10LS",
            "UD3AK9JRF",
            "UFLN9JFRT",
            "UMVFWPZ36",
            "UA14TGLTC",
            "UPU0YJ1CM",
            "US370TRJA"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT",
                    "UQPHR6Y3S",
                    "UA14TGLTC",
                    "UPU0YJ1CM",
                    "UNLS33M61",
                    "US370TRJA"
                ],
                "count": 6
            }
        ]
    },
    {
        "client_msg_id": "c7960864-ac81-4167-a3d8-b81d89335a41",
        "type": "message",
        "text": "I want to avoid the idea of nested scope in my language, which means I need a good way to show data dependencies at a glance. Both fine-grained, as might be served by block scopes, and coarse-grained, as might be served by a module visualiser.",
        "user": "UCGAK10LS",
        "ts": "1579860090.072400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uOE5x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I want to avoid the idea of nested scope in my language, which means I need a good way to show data dependencies at a glance. Both fine-grained, as might be served by block scopes, and coarse-grained, as might be served by a module visualiser."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7e063af7-47f7-4beb-94bd-c464be8915fd",
        "type": "message",
        "text": "Just design a language built around the idea of data dependencies.\n\nYou're welcome.",
        "user": "UE6EFEPTQ",
        "ts": "1579860229.072700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uz0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just design a language built around the idea of data dependencies.\n\nYou're welcome."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579859955.070800",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "902eda07-ca0d-4ab9-b39c-62f523efa6f7",
        "type": "message",
        "text": "Sure, but how does that language represent those data dependencies?",
        "user": "UCGAK10LS",
        "ts": "1579860264.072900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AWqL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sure, but how does that language represent those data dependencies?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579859955.070800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "3bab0436-4759-45fd-9524-713a07b1e62d",
        "type": "message",
        "text": "Well in Onex, the rules have a left-hand-side matching part that goes out and plucks data (dependencies) from the surrounding network of objects.\nYou just look at the left-hand side.",
        "user": "UE6EFEPTQ",
        "ts": "1579860354.073200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vBt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well in Onex, the rules have a left-hand-side matching part that goes out and plucks data (dependencies) from the surrounding network of objects.\nYou just look at the left-hand side."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579859955.070800",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "30fd9afb-fc43-4e97-922e-33e0d6a91e43",
        "type": "message",
        "text": "Also, you can approximate the dependencies by looking at the links an object has to other objects - if it links, then there's a chance it depends, but it's not g'teed. It can't depend without linking, however.",
        "user": "UE6EFEPTQ",
        "ts": "1579860720.073400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WoT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, you can approximate the dependencies by looking at the links an object has to other objects - if it links, then there's a chance it depends, but it's not g'teed. It can't depend without linking, however."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579859955.070800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "1f8457c2-f6b1-4ef6-b11e-4404e7deb602",
        "type": "message",
        "text": "Scope obviously has another utility: implementation hiding. I wonder if organising dependencies is just a side-effect of that use-case?",
        "user": "UCGAK10LS",
        "ts": "1579861062.074600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1579861272.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ki/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Scope obviously has another utility: implementation hiding. I wonder if organising dependencies is just a side-effect of that use-case?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579861062.074600",
        "reply_count": 6,
        "reply_users_count": 3,
        "latest_reply": "1580004949.129900",
        "reply_users": [
            "UEBG0NPDK",
            "UCGAK10LS",
            "UA14TGLTC"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "4500ebb9-9394-4979-aabc-8742a9df59d6",
        "type": "message",
        "text": "is there a picture that can summarise what you're describing?",
        "user": "UCGAK10LS",
        "ts": "1579861130.074700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lYzqo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "is there a picture that can summarise what you're describing?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579859955.070800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "5f62cd4b-91ba-4721-8de1-3a84aba04f76",
        "type": "message",
        "text": "there's stuff on <http://object.network> but I may have to draw something extra for you..",
        "user": "UE6EFEPTQ",
        "ts": "1579861362.075100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "The Object Network",
                "title_link": "http://object.network/",
                "text": "About the Object Network",
                "fallback": "The Object Network",
                "from_url": "http://object.network/",
                "service_icon": "http://object.network/favicon.ico",
                "service_name": "object.network",
                "id": 1,
                "original_url": "http://object.network"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C83",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "there's stuff on "
                            },
                            {
                                "type": "link",
                                "url": "http://object.network"
                            },
                            {
                                "type": "text",
                                "text": " but I may have to draw something extra for you.."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579859955.070800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "380B3A4C-7216-4FCF-819D-978A4FC31BE7",
        "type": "message",
        "text": "It\u2019s one of those things I\u2019m confused why it isn\u2019t a standard feature of IDEs",
        "user": "UD3AK9JRF",
        "ts": "1579882119.076500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6xD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It\u2019s one of those things I\u2019m confused why it isn\u2019t a standard feature of IDEs"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579859955.070800",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "01C187D8-2508-4B92-B4BD-D577C3B18914",
        "type": "message",
        "text": "It doesn\u2019t sound like a language feature though.\nIf I hover over a variable in CLion it will highlight the other uses of that variable on the screen. This is pretty good. I have wanted a dataflow graph, though. I can sort of imagine something better than boxes and arrows, but for more specific tasks, eg showing various forms of provenance, peeking at the context of all callsites. ",
        "user": "UD3AK9JRF",
        "ts": "1579882591.082300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sj=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It doesn\u2019t sound like a language feature though.\n"
                            },
                            {
                                "type": "text",
                                "text": "If I hover over a variable in CLion it will highlight the other uses of that variable on the screen. This is pretty good. I have wanted a dataflow graph, though. I can sort of imagine something better than boxes and arrows, but for more specific tasks, eg showing various forms of provenance, peeking at the context of all callsites. "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579859955.070800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "7579F937-D5A3-431F-A899-F7256BE158EF",
        "type": "message",
        "text": "Is there a specific use case you have in mind?",
        "user": "UD3AK9JRF",
        "ts": "1579882624.083000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gPkyh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is there a specific use case you have in mind?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579859955.070800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "3fbf0d99-163b-4ed7-ab43-89cd0229309f",
        "type": "message",
        "text": "Interesting point re parametric design on the rise in CAD, another example of this in a different industry is the rise of a variety of procedural node-based editors in special effects for film production. In particular, Foundry Nuke for compositing, and SideFX Houdini for procedural special effects. I just saw this tweet yesterday about Nuke, which contains an info graphic with which software was used for Sundance Film Festival entries  <https://twitter.com/JulianCrespi/status/1220556492664967168>",
        "user": "UE0ETTCG7",
        "ts": "1579886905.085200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/JulianCrespi|@JulianCrespi>: <https://twitter.com/IlyaBayona|@IlyaBayona> <https://twitter.com/andrewpprice|@andrewpprice> Looking at this I bet a lot of people use AE for compositing. Nuke is way too expensive for a lot of studios out there, Fusion is cheaper but harder to get learning resources. Though nodes are ideal for compositing you can still get lots of work done with AE. <https://pbs.twimg.com/media/EPBJp10XUAAAtph.jpg>",
                "ts": 1579838319,
                "author_name": "Julian Crespi",
                "author_link": "https://twitter.com/JulianCrespi/status/1220556492664967168",
                "author_icon": "https://pbs.twimg.com/profile_images/1009147269759815681/oSLYz6XC_normal.jpg",
                "author_subname": "@JulianCrespi",
                "text": "<https://twitter.com/IlyaBayona|@IlyaBayona> <https://twitter.com/andrewpprice|@andrewpprice> Looking at this I bet a lot of people use AE for compositing. Nuke is way too expensive for a lot of studios out there, Fusion is cheaper but harder to get learning resources. Though nodes are ideal for compositing you can still get lots of work done with AE. <https://pbs.twimg.com/media/EPBJp10XUAAAtph.jpg>",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/JulianCrespi/status/1220556492664967168",
                "image_url": "https://pbs.twimg.com/media/EPBJp10XUAAAtph.jpg",
                "image_width": 752,
                "image_height": 1199,
                "image_bytes": 92405,
                "id": 1,
                "original_url": "https://twitter.com/JulianCrespi/status/1220556492664967168",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m0/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting point re parametric design on the rise in CAD, another example of this in a different industry is the rise of a variety of procedural node-based editors in special effects for film production. In particular, Foundry Nuke for compositing, and SideFX Houdini for procedural special effects. I just saw this tweet yesterday about Nuke, which contains an info graphic with which software was used for Sundance Film Festival entries  "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/JulianCrespi/status/1220556492664967168"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579640836.237100",
        "parent_user_id": "UQ706GB9U"
    },
    {
        "client_msg_id": "dbbaa854-0508-4a18-b043-4264c9a27a21",
        "type": "message",
        "text": "Another example is constraint-based layout systems like Apple's Auto Layout, which is the default way to layout interfaces that can scale to various device and window sizes in macOS and iOS.  <https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/>",
        "user": "UE0ETTCG7",
        "ts": "1579886922.085500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Auto Layout Guide: Understanding Auto Layout",
                "title_link": "https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/",
                "text": "Describes the constraint-based system for laying out user interface elements.",
                "fallback": "Auto Layout Guide: Understanding Auto Layout",
                "from_url": "https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/",
                "service_icon": "https://developer.apple.com/favicon.ico",
                "service_name": "developer.apple.com",
                "id": 1,
                "original_url": "https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y3yT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another example is constraint-based layout systems like Apple's Auto Layout, which is the default way to layout interfaces that can scale to various device and window sizes in macOS and iOS.  "
                            },
                            {
                                "type": "link",
                                "url": "https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579640836.237100",
        "parent_user_id": "UQ706GB9U"
    },
    {
        "client_msg_id": "1090c790-36c3-4740-9b78-85ac803f4deb",
        "type": "message",
        "text": "(PS please correct me if I'm wrong about any of these being examples of \"parametric design\", this is the first time I've heard this term and I think recognize the pattern, but I might not have it quite right.)",
        "user": "UE0ETTCG7",
        "ts": "1579886959.085800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NCP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(PS please correct me if I'm wrong about any of these being examples of \"parametric design\", this is the first time I've heard this term and I think recognize the pattern, but I might not have it quite right.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579640836.237100",
        "parent_user_id": "UQ706GB9U"
    },
    {
        "client_msg_id": "891d9f05-52a4-4930-bcee-96314d78a72f",
        "type": "message",
        "text": "On another angle is that this throws a monkey wrench in the idea that some things that have traditionally been done programmatically, are now being done visually, e.g., this post (which I love) by Webflow CEO Vlad Magdalin <https://medium.com/@callmevlad/a-cheeky-guide-to-creative-tools-e5e3388c4614> It seems that the full story is that visual tools are adopting programmatic techniques just as much as vice-versa.",
        "user": "UE0ETTCG7",
        "ts": "1579887387.086000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xKX4w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On another angle is that this throws a monkey wrench in the idea that some things that have traditionally been done programmatically, are now being done visually, e.g., this post (which I love) by Webflow CEO Vlad Magdalin "
                            },
                            {
                                "type": "link",
                                "url": "https://medium.com/@callmevlad/a-cheeky-guide-to-creative-tools-e5e3388c4614"
                            },
                            {
                                "type": "text",
                                "text": " It seems that the full story is that visual tools are adopting programmatic techniques just as much as vice-versa."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579640836.237100",
        "parent_user_id": "UQ706GB9U"
    },
    {
        "client_msg_id": "16e33fc5-d1cb-40c3-8c6d-5e5e3a4ef925",
        "type": "message",
        "text": "<@UE6EFEPTQ> So I looked at Object Network. Am I right in thinking that Version 1 will be an Android app that acts as an Object, and will access the devices functions, which can then be accessed via a HTTP/API call using the Object Link mechanism to control the phone remotely?",
        "user": "UFLN9JFRT",
        "ts": "1579891754.086600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wiLPN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": " So I looked at Object Network. Am I right in thinking that Version 1 will be an Android app that acts as an Object, and will access the devices functions, which can then be accessed via a HTTP/API call using the Object Link mechanism to control the phone remotely?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579859955.070800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "e3d909c1-a5b4-4db1-a5e7-6a0134c2a047",
        "type": "message",
        "text": "<@UFLN9JFRT> thanks for having a look at my project :smile:\n\nVersion 1 will be the Mother of all Switch and Lamp Demos! Showing how you can turn on lights with buttons, etc.\n\nYes, the \"IDE\" will be running on Android. Onex also runs on nRF5 devices such as the Puckjs: <https://www.puck-js.com/>, providing the button and light i/o.\n\nEach device is represented by its device object, that then links to multiple further i/o objects - so the Puck has a single device object linking to a button object and to a light object.\n\nSeeing those in the Android Onex app, you can wire the button over to the light so that it turns on when the button is pressed! :open_mouth: :smile:\n\nInside the Android phone, I intend to access all the sensors and actuators, data and APIs gradually over time, adding to the linkable objects visible in the UI.",
        "user": "UE6EFEPTQ",
        "ts": "1579896870.087100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SbR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFLN9JFRT"
                            },
                            {
                                "type": "text",
                                "text": " thanks for having a look at my project "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            },
                            {
                                "type": "text",
                                "text": "\n\nVersion 1 will be the Mother of all Switch and Lamp Demos! Showing how you can turn on lights with buttons, etc.\n\nYes, the \"IDE\" will be running on Android. Onex also runs on nRF5 devices such as the Puckjs: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.puck-js.com/"
                            },
                            {
                                "type": "text",
                                "text": ", providing the button and light i/o.\n\nEach device is represented by its device object, that then links to multiple further i/o objects - so the Puck has a single device object linking to a button object and to a light object.\n\nSeeing those in the Android Onex app, you can wire the button over to the light so that it turns on when the button is pressed! "
                            },
                            {
                                "type": "emoji",
                                "name": "open_mouth"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            },
                            {
                                "type": "text",
                                "text": "\n\nInside the Android phone, I intend to access all the sensors and actuators, data and APIs gradually over time, adding to the linkable objects visible in the UI."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579859955.070800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "9217E107-CD92-4C10-8524-1AB7B3337110",
        "type": "message",
        "text": "Ok very interesting what you describe but I think I will need to see it to understand it. I have seen hundreds of iot demos but they always are very techie and not useable by normal users",
        "user": "UFLN9JFRT",
        "ts": "1579899342.089200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3rAW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok very interesting what you describe but I think I will need to see it to understand it. I have seen hundreds of iot demos but they always are very techie and not useable by normal users"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579859955.070800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "dd51abc7-e15d-4d26-aea7-428658a17be5",
        "type": "message",
        "text": "If you haven't yet, I really highly recommend reading Herbert Simon's \"The Architecture of Complexity\". It makes a strong argument for why hierarchy is necessary and the notion of \"near decomposability\" is a nice way to understand a lot of the cult ideology in programming (despite being written in the 60's and for a different field!).",
        "user": "UEBG0NPDK",
        "ts": "1579903992.089400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mb9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you haven't yet, I really highly recommend reading Herbert Simon's \"The Architecture of Complexity\". It makes a strong argument for why hierarchy is necessary and the notion of \"near decomposability\" is a nice way to understand a lot of the cult ideology in programming (despite being written in the 60's and for a different field!)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579861062.074600",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "554626a1-0296-4c48-8842-2992f92c93ed",
        "type": "message",
        "text": "<http://www2.econ.iastate.edu/tesfatsi/ArchitectureOfComplexity.HSimon1962.pdf>",
        "user": "UEBG0NPDK",
        "ts": "1579903993.089600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SEmp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http://www2.econ.iastate.edu/tesfatsi/ArchitectureOfComplexity.HSimon1962.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579861062.074600",
        "parent_user_id": "UCGAK10LS"
    }
]