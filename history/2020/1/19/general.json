[
    {
        "client_msg_id": "53ede300-b8b2-4831-9784-1c6f112c8071",
        "type": "message",
        "text": "<@USJ899UUD> the alternative to gear-like is biology-like which is what Alan Kay has also talked about. Tissues don't have to fit perfectly but if one emits some chemicals that the other has some receptors for, then you get some interaction. There is some fundamental compatibility built-in - the actual mechanisms of messaging for instance. For useful processes, there would also have to be some shared notion of what different messages mean. But there is also tolerance for imperfect fits - unidentified messages may be just ignored and accumulate - perhaps picked up by other neighboring cells that do respond to these.\n\nBTW an interesting thing from biology I saw a long, long time ago: two cells from heart tissue may 'pulse' at different rates independently, but when touching each other, they pulse in synchrony. This is so unlike the kinds of compositions we see in computers where aggregation has to be hand wired.\n\nI think you're right that the extension of this idea is to 'run any behavior' in a new context. I suppose behavior-as-program is just data for the 'host'.",
        "user": "U8A5MS6R1",
        "ts": "1579389139.133800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4TOq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "USJ899UUD"
                            },
                            {
                                "type": "text",
                                "text": " the alternative to gear-like is biology-like which is what Alan Kay has also talked about. Tissues don't have to fit perfectly but if one emits some chemicals that the other has some receptors for, then you get some interaction. There is some fundamental compatibility built-in - the actual mechanisms of messaging for instance. For useful processes, there would also have to be some shared notion of what different messages mean. But there is also tolerance for imperfect fits - unidentified messages may be just ignored and accumulate - perhaps picked up by other neighboring cells that do respond to these.\n\nBTW an interesting thing from biology I saw a long, long time ago: two cells from heart tissue may 'pulse' at different rates independently, but when touching each other, they pulse in synchrony. This is so unlike the kinds of compositions we see in computers where aggregation has to be hand wired.\n\nI think you're right that the extension of this idea is to 'run any behavior' in a new context. I suppose behavior-as-program is just data for the 'host'."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "USJ899UUD",
                    "UCKRZS3DZ"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "6b2b84cc-d9c2-43d7-9a64-6ee02674bdb8",
        "type": "message",
        "text": "Very interesting <@UGMH4H202>. I read your paper, and I fully agree on the connection between cognitive science and UI design. I especially liked the example of the polyvagal theory: freeze response as last resort (non)solution!\n\nI believe 1) user interface design and 2) cognitive science &amp; philosophy of mind are both talking about the exact same thing. A typical example is The Extended Mind theory by Andy Clark and\u00a0David Chalmers: <http://cogprints.org/320/1/extended.html>\n\nIn mind and consciousness research (such as the paper above), we're trying to account for how the mind works, why are we making a separation between mind and body, and, eventually, we start taking the body seriously and develop theories that ground us as embodied creatures within a concrete environment. At that point, the connection with human computer interaction seems almost obvious.\n\nI think there's a vast literature in cognitive science and philosophy of mind from which HCI people could steal valuable thinking tools.",
        "user": "UKASUGYL8",
        "ts": "1579389694.134000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "//=H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very interesting "
                            },
                            {
                                "type": "user",
                                "user_id": "UGMH4H202"
                            },
                            {
                                "type": "text",
                                "text": ". I read your paper, and I fully agree on the connection between cognitive science and UI design. I especially liked the example of the polyvagal theory: freeze response as last resort (non)solution!\n\nI believe 1) user interface design and 2) cognitive science & philosophy of mind are both talking about the exact same thing. A typical example is The Extended Mind theory by Andy Clark and\u00a0David Chalmers: "
                            },
                            {
                                "type": "link",
                                "url": "http://cogprints.org/320/1/extended.html"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIn mind and consciousness research (such as the paper above), we're trying to account for how the mind works, why are we making a separation between mind and body, and, eventually, we start taking the body seriously and develop theories that ground us as embodied creatures within a concrete environment. At that point, the connection with human computer interaction seems almost obvious.\n\nI think there's a vast literature in cognitive science and philosophy of mind from which HCI people could steal valuable thinking tools."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579128538.206100",
        "parent_user_id": "UGMH4H202",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5STGTB3J",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "bf607fbc-253f-467e-afaa-35d8db46d686",
        "type": "message",
        "text": "&gt; <@U5STGTB3J> \"I see a huge opportunity in hiding this kind of complexity. It will likely not have any performance benefits, but putting these computation cycles to work to no longer make people distinguish between Int32 or Int64 or Int and Float, ... seems like a path to massively simplify programming for people trying to learn it.\"\nI agree with this, and I'm doing it in my project for that reason. Curv has a single numeric type, the \"number\", which is represented internally as a float64. No need to explain why 1 and 1.0 are different objects, or why (in Ruby) 7/2 is 3 but 7.0/2.0 is 3.5. Javascript works this way. It's an old idea. Dartmouth BASIC worked this way, in the mid 1970's. APL worked this way in the mid 1960's.\n\nWhere I encounter a problem with having a single Number type is when I want to work with huge, multi-dimensional arrays, which blow up memory if all numbers are 64 bits. In this case, I need to exert precise control over how array elements are laid out in memory. I need *representation types* like UInt32, Float32, and UNorm8 (a number between 0 and 1, represented using 8 bits, so that 0x00 is 0, 0xFF is 1, 0x55 is 1/3, and so on. This last one is used for representing RGB values in a pixel array. So now I can create a \"typed array\", where I use a representation type to specify how abstract values are mapped onto bit patterns in memory. This is a low level programming interface, and is only needed by developers who are developing libraries that use efficient internal representations for data. This interface shouldn't be needed by typical end users, who only need to understand about abstract values like \"numbers\". So there is a way to do low level programming without inflicting all of the concerns of low level programmers onto end users who are just using high level library interfaces.",
        "user": "UJN1TAYEQ",
        "ts": "1579390039.134200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t8l",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " \"I see a huge opportunity in hiding this kind of complexity. It will likely not have any performance benefits, but putting these computation cycles to work to no longer make people distinguish between Int32 or Int64 or Int and Float, ... seems like a path to massively simplify programming for people trying to learn it.\""
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree with this, and I'm doing it in my project for that reason. Curv has a single numeric type, the \"number\", which is represented internally as a float64. No need to explain why 1 and 1.0 are different objects, or why (in Ruby) 7/2 is 3 but 7.0/2.0 is 3.5. Javascript works this way. It's an old idea. Dartmouth BASIC worked this way, in the mid 1970's. APL worked this way in the mid 1960's.\n\nWhere I encounter a problem with having a single Number type is when I want to work with huge, multi-dimensional arrays, which blow up memory if all numbers are 64 bits. In this case, I need to exert precise control over how array elements are laid out in memory. I need "
                            },
                            {
                                "type": "text",
                                "text": "representation types",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " like UInt32, Float32, and UNorm8 (a number between 0 and 1, represented using 8 bits, so that 0x00 is 0, 0xFF is 1, 0x55 is 1/3, and so on. This last one is used for representing RGB values in a pixel array. So now I can create a \"typed array\", where I use a representation type to specify how abstract values are mapped onto bit patterns in memory. This is a low level programming interface, and is only needed by developers who are developing libraries that use efficient internal representations for data. This interface shouldn't be needed by typical end users, who only need to understand about abstract values like \"numbers\". So there is a way to do low level programming without inflicting all of the concerns of low level programmers onto end users who are just using high level library interfaces."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "F2ECDA96-74E2-4AB2-8AF5-501CD3872D4D",
        "type": "message",
        "text": "Yes! I think any serious effort to create a qualitatively better programming experience than what we have now needs to take learnability seriously. And to make learnable programming I suspect you have to create a curriculum(in a broad sense) alongside it.",
        "user": "UMWF81HTP",
        "ts": "1579394900.147800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "amUs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes! I think any serious effort to create a qualitatively better programming experience than what we have now needs to take learnability seriously. And to make learnable programming I suspect you have to create a curriculum(in a broad sense) alongside it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579380266.113200",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "1A4C7947-7495-45DF-BF29-C7B3DD1F0480",
        "type": "message",
        "text": "My thoughts on the screen size issue:\n\n\nLast year I made a small prototype of a data-driven design tool for smartphones: \n\n<https://twitter.com/yoshikischmitz/status/1176642448077967362?s=2|https://twitter.com/yoshikischmitz/status/1176642448077967362?s=2>\n\nSo the screen size imposed a lot of constraints, the biggest one is limiting the number of things you can display at once, which in turn limits the number of things you can reason about at once(for example, I wanted to edit properties of multiple nodes at once, but that wasn\u2019t possible in that panel based UI). \n\nOne solution I\u2019ve thought about is to leverage the fact that many people own or have access to multiple smartphones, and create a programming system that can run on two phones at once, and the user can decide how to divide things between them. So you could say, use one smartphone as a \u201cpreview\u201d device and another as an \u201cediting\u201d device, or use one phone as a debug log.\n\nAnother one I\u2019ve thought about particular to my app is to allow one to extract property editors for multiple nodes into another panel where you can edit multiple properties side by side. If you have multiple such panels and can quickly switch between them, my hunch is that you would be able to get some nice productivity.",
        "user": "UMWF81HTP",
        "ts": "1579396480.155400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/yoshikischmitz|@yoshikischmitz>: I've been jamming on this concept for making data-driven designs. Given some JSON, this app will provide you with an interface to describe how you want each entry styled, allowing you to gradually create a more complicated design. Here I create an airbnb-ish app. <https://pbs.twimg.com/ext_tw_video_thumb/1176641726049476608/pu/img/xFjMsTzYNj0_4XQ6.jpg>",
                "ts": 1569368395,
                "author_name": "yoshiki \u7fa9\u6a39",
                "author_link": "https://twitter.com/yoshikischmitz/status/1176642448077967362",
                "author_icon": "https://pbs.twimg.com/profile_images/1098933170265718786/9f2wc9jn_normal.jpg",
                "author_subname": "@yoshikischmitz",
                "text": "I've been jamming on this concept for making data-driven designs. Given some JSON, this app will provide you with an interface to describe how you want each entry styled, allowing you to gradually create a more complicated design. Here I create an airbnb-ish app.",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/yoshikischmitz/status/1176642448077967362?s=2",
                "thumb_url": "https://pbs.twimg.com/ext_tw_video_thumb/1176641726049476608/pu/img/xFjMsTzYNj0_4XQ6.jpg",
                "thumb_width": 1200,
                "thumb_height": 675,
                "video_html_width": 1200,
                "video_html_height": 675,
                "video_html": "<video controls poster=\"https://pbs.twimg.com/ext_tw_video_thumb/1176641726049476608/pu/img/xFjMsTzYNj0_4XQ6.jpg\" width=\"1200\" height=\"675\"><source type=\"video/mp4\" src=\"https://video.twimg.com/ext_tw_video/1176641726049476608/pu/vid/1280x720/ldIOmEL7L9B3bWmv.mp4?tag=10\"></video>",
                "id": 1,
                "original_url": "https://twitter.com/yoshikischmitz/status/1176642448077967362?s=2",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gnsp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My thoughts on the screen size issue:\n\n\nLast year I made a small prototype of a data-driven design tool for smartphones: \n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/yoshikischmitz/status/1176642448077967362?s=2",
                                "text": "https://twitter.com/yoshikischmitz/status/1176642448077967362?s=2"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\nSo the screen size imposed a lot of constraints, the biggest one is limiting the number of things you can display at once, which in turn limits the number of things you can reason about at once(for example, I wanted to edit properties of multiple nodes at once, but that wasn\u2019t possible in that panel based UI). \n\nOne solution I\u2019ve thought about is to leverage the fact that many people own or have access to multiple smartphones, and create a programming system that can run on two phones at once, and the user can decide how to divide things between them. So you could say, use one smartphone as a \u201cpreview\u201d device and another as an \u201cediting\u201d device, or use one phone as a debug log.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Another one I\u2019ve thought about particular to my app is to allow one to extract property editors for multiple nodes into another panel where you can edit multiple properties side by side. If you have multiple such panels and can quickly switch between them, my hunch is that you would be able to get some nice productivity."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579320626.049700",
        "parent_user_id": "UMWF81HTP",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "UFLN9JFRT"
                ],
                "count": 2
            },
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD",
                    "UFLN9JFRT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "5C067D47-8AFF-444E-B6F3-E7B120E65323",
        "type": "message",
        "text": "I think every tool that allows people to manipulate abstract structures(in our case code) needs to help people build a strong mental model of that structure in their minds. I think there\u2019s a lot of value to be gained by more work on this, and it would benefit people on all screen sizes.\n\nEven when VR and AR becomes more common, and we technically have infinite space, we probably often want some sort of symbolic semantics to extract a view or lens of some larger structure to reason about, manipulate, or connect it with, another view from a different context, and intuitive means to rediscover the contexts for when we inevitably lose track of them. We would want ways to quickly view a compressed gist of the larger structure when we forget it, without having to review the whole thing. And we would want powerful organization primitives to teleport from one context to another(like in a table of contents or an index of a book), without having to retrod the particular path we first took there.\n\nI don\u2019t think we have a good \u201cuniversal UI language\u201d for these operations, nor a good internalization as designers of how people forget and lose track of things, but I suspect that if we did, it would make such operations on every device more powerful, regardless of screen size.",
        "user": "UMWF81HTP",
        "ts": "1579397308.170600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UMWF81HTP",
            "ts": "1579397538.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "no7XC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think every tool that allows people to manipulate abstract structures(in our case code) needs to help people build a strong mental model of that structure in their minds. I think there\u2019s a lot of value to be gained by more work on this, and it would benefit people on all screen sizes.\n\nEven when VR and AR becomes more common, and we technically have infinite space, we probably often want some sort of symbolic semantics to extract a view or lens of some larger structure to reason about, manipulate, or connect it with, another view from a different context, and intuitive means to rediscover the contexts for when we inevitably lose track of them. We would want ways to quickly view a compressed gist of the larger structure when we forget it, without having to review the whole thing. And we would want powerful organization primitives to teleport from one context to another(like in a table of contents or an index of a book), without having to retrod the particular path we first took there.\n\nI don\u2019t think we have a good \u201cuniversal UI language\u201d for these operations, nor a good internalization as designers of how people forget and lose track of things, but I suspect that if we did, it would make such operations on every device more powerful, regardless of screen size."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579320626.049700",
        "parent_user_id": "UMWF81HTP",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UJN1TAYEQ",
                    "U5STGTB3J",
                    "U7C7B75R6",
                    "UHWC9PXBL"
                ],
                "count": 5
            }
        ]
    },
    {
        "client_msg_id": "ADE52EDE-70E9-4F00-A29B-82F22AB59E77",
        "type": "message",
        "text": "Also \u201cmultiple representations\u201d. In this case 3: the source code, the property editor(which also shows *potential* properties), and the rendered view.",
        "user": "UMWF81HTP",
        "ts": "1579398056.172900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MtIU6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also \u201cmultiple representations\u201d. In this case 3: the source code, the property editor(which also shows "
                            },
                            {
                                "type": "text",
                                "text": "potential",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " properties), and the rendered view."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579324191.059700",
        "parent_user_id": "UQPHR6Y3S",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UQPHR6Y3S"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f78a41e5-131f-4762-a884-ba130fd274c2",
        "type": "message",
        "text": "Looks like there isn\u2019t enough interest to do this.",
        "user": "ULM3U6275",
        "ts": "1579399848.173600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eQF9U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Looks like there isn\u2019t enough interest to do this."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579239299.000900"
    },
    {
        "client_msg_id": "d915b04b-4c31-4d29-990e-bea398c4560e",
        "type": "message",
        "text": "Firstly, to those people who object that Apple has a \"walled garden\" approach, Apple has had a very salutary effect on the ability of the independent developer to earn an honest living. With piracy protection, a marketplace that is considered family friendly, and an honest company that pays monthly, i don't see what is wrong about the $99/year publishing fee. You don't pay per title submitted, and this encourages people to make lots of apps, which they do. This ecosystem generates tens of billions in royalties to developers, and allowed me to feed my family, at least in the beginning, when the number of titles was reasonable. In the history of publishing the Apple royalty rate of 70% of retail payable to the developer is an order of magnitude better than in previous industries like books or recorded music.\n\nThe overwhelming success of the App store has exposed the very poor indexing system that they have not modified much since its creation.\n\nTo my knowledge there are many programming apps on the store, and i am not aware of any programming language toolkit that was blocked from publishing due to App store restrictions. Yes, their decision-making logic can be capricious and if you have any nudity be prepared for a long slog. It took me two months get an art calendar with Adam and Eve represented to be approved, which doomed the product.  You can't really expect Adam and Eve to be wearing clothes. And I wasn't too fond of Apple kicking out my titles because i wouldn't update them to accommodate their stupid notch.  They also have a nasty habit of breaking stuff along the way, because they just-don't-care about older hardware and software. As an apple customer you are expected to follow their releases. In that respect, MS is a far more generous company.\n\nAs for tools that generate Mobile, Desktop and Web, there are several FoC projects like Red, Beads that are targeting cross-platform development where one code base can emit products on multiple platforms. There are long running framework/language combinations like Dart/Flutter which are good at this as well.\n\nI personally find it bizarre that people accept the expensive and wasteful system of having different toolchains for each of the 3 main platforms (IOS, Android, Web), not to mention the other 2 big OS (Mac and Windows).",
        "user": "UEQ6M68H0",
        "ts": "1579403279.174200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1579403356.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mpOcW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Firstly, to those people who object that Apple has a \"walled garden\" approach, Apple has had a very salutary effect on the ability of the independent developer to earn an honest living. With piracy protection, a marketplace that is considered family friendly, and an honest company that pays monthly, i don't see what is wrong about the $99/year publishing fee. You don't pay per title submitted, and this encourages people to make lots of apps, which they do. This ecosystem generates tens of billions in royalties to developers, and allowed me to feed my family, at least in the beginning, when the number of titles was reasonable. In the history of publishing the Apple royalty rate of 70% of retail payable to the developer is an order of magnitude better than in previous industries like books or recorded music.\n\nThe overwhelming success of the App store has exposed the very poor indexing system that they have not modified much since its creation.\n\nTo my knowledge there are many programming apps on the store, and i am not aware of any programming language toolkit that was blocked from publishing due to App store restrictions. Yes, their decision-making logic can be capricious and if you have any nudity be prepared for a long slog. It took me two months get an art calendar with Adam and Eve represented to be approved, which doomed the product.  You can't really expect Adam and Eve to be wearing clothes. And I wasn't too fond of Apple kicking out my titles because i wouldn't update them to accommodate their stupid notch.  They also have a nasty habit of breaking stuff along the way, because they just-don't-care about older hardware and software. As an apple customer you are expected to follow their releases. In that respect, MS is a far more generous company.\n\nAs for tools that generate Mobile, Desktop and Web, there are several FoC projects like Red, Beads that are targeting cross-platform development where one code base can emit products on multiple platforms. There are long running framework/language combinations like Dart/Flutter which are good at this as well.\n\nI personally find it bizarre that people accept the expensive and wasteful system of having different toolchains for each of the 3 main platforms (IOS, Android, Web), not to mention the other 2 big OS (Mac and Windows)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579320626.049700",
        "parent_user_id": "UMWF81HTP"
    },
    {
        "client_msg_id": "b4daf6ac-edb2-47fb-8793-596a382ebfff",
        "type": "message",
        "text": "Having made a living as an independent software developer for decades, shipping products all over the world, i find the near 0% piracy rate of the Apple ecosystem to be fantastic. I had an over 99% piracy rate in southeast asia (outside of Japan, which is very honest). I consistently sold the same number of copies per year to the island nation of new caledonia as i did to southeast asia, which is a 100,000 : 1 ratio when compared per capita.",
        "user": "UEQ6M68H0",
        "ts": "1579403523.174600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U/4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Having made a living as an independent software developer for decades, shipping products all over the world, i find the near 0% piracy rate of the Apple ecosystem to be fantastic. I had an over 99% piracy rate in southeast asia (outside of Japan, which is very honest). I consistently sold the same number of copies per year to the island nation of new caledonia as i did to southeast asia, which is a 100,000 : 1 ratio when compared per capita."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579320626.049700",
        "parent_user_id": "UMWF81HTP"
    },
    {
        "client_msg_id": "fa4e24f8-722f-4bf4-bb36-08656d394251",
        "type": "message",
        "text": "<@UFB8STN7K> modeling involves a bit of a performance in a way that text editing does not, not so much.  Whereas a solution to a programming \"how do you\" is a code snippet that does the thing, the solution to a modeling \"how do you\" usually involves a lot of clicking around.\n\n(One of my interests is in bridging these two interaction modalities by the way.)",
        "user": "UA14TGLTC",
        "ts": "1579403559.174800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2TP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFB8STN7K"
                            },
                            {
                                "type": "text",
                                "text": " modeling involves a bit of a performance in a way that text editing does not, not so much.  Whereas a solution to a programming \"how do you\" is a code snippet that does the thing, the solution to a modeling \"how do you\" usually involves a lot of clicking around.\n\n(One of my interests is in bridging these two interaction modalities by the way.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579380266.113200",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "ea2964ea-a219-4499-ad8e-33f8b0853369",
        "type": "message",
        "text": "There's a fundamental philosophical divide here: I don't care about improving how we sell software. That side seems to be working fine. Being a programmer pays great, in a wide variety of ways.\n\nSo sure, it's great that Apple lets programmers sell consumptive apps to laypeople. It seems irrelevant to our agenda of getting people creating more with their computers.",
        "user": "UCUSW7WVD",
        "ts": "1579403877.175000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tPyc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's a fundamental philosophical divide here: I don't care about improving how we sell software. That side seems to be working fine. Being a programmer pays great, in a wide variety of ways.\n\nSo sure, it's great that Apple lets programmers sell consumptive apps to laypeople. It seems irrelevant to our agenda of getting people creating more with their computers."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579320626.049700",
        "parent_user_id": "UMWF81HTP",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "be9a3cdd-8f45-4f7a-b999-c957fc0bd340",
        "type": "message",
        "text": "What do I work on?  My bread-and-butter amounts to very specialized Rails mixed with the raising of a five year old \u2014 entails a lot of picture book reading and since Christmas break at least 100 hours invested into building this together <https://brickset.com/sets/42043-1/Mercedes-Benz-Arocs-3245>.  The programming language/environment research is a side interest.  Wrote up a little bit recently <https://gist.github.com/wtaysom/7e5fda6d65807073c3fa6b92b1e25a32>.",
        "user": "UA14TGLTC",
        "ts": "1579404230.175200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Brickset.com",
                "title": "42043-1: Mercedes-Benz Arocs 3245",
                "title_link": "https://brickset.com/sets/42043-1/Mercedes-Benz-Arocs-3245",
                "text": "A Technic set released in 2015.",
                "fallback": "Brickset.com: 42043-1: Mercedes-Benz Arocs 3245",
                "image_url": "https://images.brickset.com/sets/images/42043-1.jpg",
                "from_url": "https://brickset.com/sets/42043-1/Mercedes-Benz-Arocs-3245",
                "image_width": 301,
                "image_height": 250,
                "image_bytes": 106000,
                "service_icon": "https://brickset.com/assets/images/icons/apple-icon-57x57.png",
                "id": 1,
                "original_url": "https://brickset.com/sets/42043-1/Mercedes-Benz-Arocs-3245"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0is=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What do I work on?  My bread-and-butter amounts to very specialized Rails mixed with the raising of a five year old \u2014 entails a lot of picture book reading and since Christmas break at least 100 hours invested into building this together "
                            },
                            {
                                "type": "link",
                                "url": "https://brickset.com/sets/42043-1/Mercedes-Benz-Arocs-3245"
                            },
                            {
                                "type": "text",
                                "text": ".  The programming language/environment research is a side interest.  Wrote up a little bit recently "
                            },
                            {
                                "type": "link",
                                "url": "https://gist.github.com/wtaysom/7e5fda6d65807073c3fa6b92b1e25a32"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579300289.037700",
        "parent_user_id": "USF232R18"
    },
    {
        "client_msg_id": "215b464d-7be7-4716-855c-29c044514aa1",
        "type": "message",
        "text": "On a slight tangent:\n\n&gt; This ecosystem generates tens of billions in royalties to developers, and allowed me to feed my family, at least in the beginning, when the number of titles was reasonable.\nIt's always surprising to me when people mention this but fail to dwell on its implications. Independent developers will _never_ again make enough to feed their families on any mobile app store. If you didn't get big enough fast enough, neither Apple nor Google care about your family. This dynamic has a lot in common with chain letters, pyramid schemes and MLM outfits. But we don't think of those as ethical operations. Even if they get _some_ families fed.",
        "user": "UCUSW7WVD",
        "ts": "1579404453.175500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "98paI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On a slight tangent:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This ecosystem generates tens of billions in royalties to developers, and allowed me to feed my family, at least in the beginning, when the number of titles was reasonable."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIt's always surprising to me when people mention this but fail to dwell on its implications. Independent developers will "
                            },
                            {
                                "type": "text",
                                "text": "never",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " again make enough to feed their families on any mobile app store. If you didn't get big enough fast enough, neither Apple nor Google care about your family. This dynamic has a lot in common with chain letters, pyramid schemes and MLM outfits. But we don't think of those as ethical operations. Even if they get "
                            },
                            {
                                "type": "text",
                                "text": "some",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " families fed."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579320626.049700",
        "parent_user_id": "UMWF81HTP"
    },
    {
        "client_msg_id": "5523d3b8-4647-4ba9-b86d-90fa629c19dc",
        "type": "message",
        "text": "&gt; <@UMWF81HTP> I think every tool that allows people to manipulate abstract \n&gt; structures (in our case code) needs to help people build a strong mental \n&gt; model of that structure in their minds.\n&gt; \n&gt; We probably often want some sort of symbolic semantics to extract a view or lens of some larger structure to reason about, manipulate, or connect it with, another view from a different context, and intuitive means to rediscover the contexts for when we inevitably lose track of them. We would want ways to quickly view a compressed gist of the larger structure when we forget it, without having to review the whole thing. And we would want powerful organization primitives to teleport from one context to another (like in a table of contents or an index of a book), without having to retread the particular path we first took there.\n&gt; \n&gt; I don\u2019t think we have a good \u201cuniversal UI language\u201d for these operations, nor a good internalization as designers of how people forget and lose track of things, but I suspect that if we did, it would make such operations on every device more powerful, regardless of screen size.\nThis is an excellent summary of the problem.\nMy idea is to organize the entire structure in space, and build a zoomable user interface for navigating the structure. It won't be straight \"photographic\" zooming. Instead, as you zoom out, structures are progressively compressed by eliding increasing more detail, while allowing important labels to remain visible for longer. Zooming in adds details. The zooming, and the animation as details are squashed during zooming, needs to be continuous and smooth, not jerky. The graphics implementation will rely heavily on the GPU hardware.",
        "user": "UJN1TAYEQ",
        "ts": "1579409482.176000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0nxoV",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UMWF81HTP"
                            },
                            {
                                "type": "text",
                                "text": " I think every tool that allows people to manipulate abstract \nstructures (in our case code) needs to help people build a strong mental \nmodel of that structure in their minds.\n\nWe probably often want some sort of symbolic semantics to extract a view or lens of some larger structure to reason about, manipulate, or connect it with, another view from a different context, and intuitive means to rediscover the contexts for when we inevitably lose track of them. We would want ways to quickly view a compressed gist of the larger structure when we forget it, without having to review the whole thing. And we would want powerful organization primitives to teleport from one context to another (like in a table of contents or an index of a book), without having to retread the particular path we first took there.\n\nI don\u2019t think we have a good \u201cuniversal UI language\u201d for these operations, nor a good internalization as designers of how people forget and lose track of things, but I suspect that if we did, it would make such operations on every device more powerful, regardless of screen size."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is an excellent summary of the problem.\nMy idea is to organize the entire structure in space, and build a zoomable user interface for navigating the structure. It won't be straight \"photographic\" zooming. Instead, as you zoom out, structures are progressively compressed by eliding increasing more detail, while allowing important labels to remain visible for longer. Zooming in adds details. The zooming, and the animation as details are squashed during zooming, needs to be continuous and smooth, not jerky. The graphics implementation will rely heavily on the GPU hardware."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579320626.049700",
        "parent_user_id": "UMWF81HTP",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMWF81HTP",
                    "U7C7B75R6",
                    "UFLN9JFRT",
                    "UML4ZEKDK"
                ],
                "count": 4
            },
            {
                "name": "telescope",
                "users": [
                    "UMWF81HTP",
                    "UFLN9JFRT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "4d981271-185e-4a59-ba1b-340e6c98dd8f",
        "type": "message",
        "text": "Gabriel was interviewed in corecursive podcast though they didn't talked too much about dhall:\n<https://corecursive.com/040-tech-evangelism-with-gabriel-gonzalez/>",
        "user": "U7C7B75R6",
        "ts": "1579433443.177300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FGmS+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Gabriel was interviewed in corecursive podcast though they didn't talked too much about dhall:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://corecursive.com/040-tech-evangelism-with-gabriel-gonzalez/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579084874.196600",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "c3328c39-6d1c-485a-9b0c-417ee64f55f2",
        "type": "message",
        "text": "<@UHDQ62M4P> That is not entirely true. I invested in Light Table/Eve when it was totally uncool!",
        "user": "UFLN9JFRT",
        "ts": "1579449559.178900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OBqSs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHDQ62M4P"
                            },
                            {
                                "type": "text",
                                "text": " That is not entirely true. I invested in Light Table/Eve when it was totally uncool!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579449559.178900",
        "reply_count": 6,
        "reply_users_count": 5,
        "latest_reply": "1579524877.207700",
        "reply_users": [
            "UCUSW7WVD",
            "UC2A2ARPT",
            "UFLN9JFRT",
            "UMYKGHYBA",
            "U5STGTB3J"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "fist",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 2
            },
            {
                "name": "pray",
                "users": [
                    "UEBG0NPDK"
                ],
                "count": 1
            },
            {
                "name": "slightly_smiling_face",
                "users": [
                    "UEBG0NPDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7a32b63e-e55f-4d0b-b113-ddcc0b6c4c88",
        "type": "message",
        "text": "Do you think of yourself as a VC, though? I've always found angels (investing their own money) to have more original thinking than VCs (who are required to display rational astrology: <https://www.interfluidity.com/v2/3513.html|https://www.interfluidity.com/v2/3513.html>)",
        "user": "UCUSW7WVD",
        "ts": "1579451950.179100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lQw5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do you think of yourself as a VC, though? I've always found angels (investing their own money) to have more original thinking than VCs (who are required to display rational astrology: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.interfluidity.com/v2/3513.html",
                                "text": "https://www.interfluidity.com/v2/3513.html"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579449559.178900",
        "parent_user_id": "UFLN9JFRT"
    },
    {
        "client_msg_id": "ea26303d-e3b1-468a-9aa8-55a0749ffb03",
        "type": "message",
        "text": "I also \"invested\" in LightTable, if Kickstarter counts as investment :P",
        "user": "UC2A2ARPT",
        "ts": "1579452416.179300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1579452429.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3ejV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also \"invested\" in LightTable, if Kickstarter counts as investment :P"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579449559.178900",
        "parent_user_id": "UFLN9JFRT"
    },
    {
        "client_msg_id": "e67dffe7-5c20-4097-a7cc-74e4c3740d69",
        "type": "message",
        "text": "what's funny is that I expected the reference to \"nocode\" to be under \"Developer Tools\", but instead it came under \"The Enterprise Dabblers\", maybe that's telling? Though I appreciate trying to tackle a problem in a limited domain first, don't get me wrong",
        "user": "UHDQ62M4P",
        "ts": "1579452913.179600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fDtAZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "what's funny is that I expected the reference to \"nocode\" to be under \"Developer Tools\", but instead it came under \"The Enterprise Dabblers\", maybe that's telling? Though I appreciate trying to tackle a problem in a limited domain first, don't get me wrong"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579366438.076800",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "BE5F1598-0C41-4F8C-B8C4-0BE4A9A0C9D5",
        "type": "message",
        "text": "Yes Kickstarter counts too as an investment. I used to be a VC in a private fund where we invested in a lot of startups. But lighttable / eve I did on my own. VC is mostly an overblown term people use these days to sound important though, as most VCs lose money and never make it ",
        "user": "UFLN9JFRT",
        "ts": "1579453500.183400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iIzR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes Kickstarter counts too as an investment. I used to be a VC in a private fund where we invested in a lot of startups. But lighttable / eve I did on my own. VC is mostly an overblown term people use these days to sound important though, as most VCs lose money and never make it "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579449559.178900",
        "parent_user_id": "UFLN9JFRT"
    },
    {
        "client_msg_id": "063859b0-8e1d-4436-b728-15c0719895d1",
        "type": "message",
        "text": "Hi Ben, and welcome! It is good to see that a Scratch team member joins this community. :slightly_smiling_face:",
        "user": "UJ6LDMMN0",
        "ts": "1579454881.183900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJ6LDMMN0",
            "ts": "1579455341.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YK0np",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi Ben, and welcome! It is good to see that a Scratch team member joins this community. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579300289.037700",
        "parent_user_id": "USF232R18"
    },
    {
        "client_msg_id": "67d4e760-3c05-4ce1-b138-aa46aaf30007",
        "type": "message",
        "text": "I am using Scratch for creative workshops with since 5 years and really enjoy it. I also use it to show what programming is for adults and it is a great tool for that.",
        "user": "UJ6LDMMN0",
        "ts": "1579455054.184100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JSed",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am using Scratch for creative workshops with since 5 years and really enjoy it. I also use it to show what programming is for adults and it is a great tool for that."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579300289.037700",
        "parent_user_id": "USF232R18"
    },
    {
        "client_msg_id": "0428f773-780a-447f-9f70-df0283e14508",
        "type": "message",
        "text": "Scratch is an inspiring tool for my thougts about the future of programming and how to make programming more end-user friendly.",
        "user": "UJ6LDMMN0",
        "ts": "1579455325.184300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bvvJ3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Scratch is an inspiring tool for my thougts about the future of programming and how to make programming more end-user friendly."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579300289.037700",
        "parent_user_id": "USF232R18"
    },
    {
        "client_msg_id": "7d92016f-2169-4bd8-8963-c6b59539e3be",
        "type": "message",
        "text": "Approach I like is to use separated operators for different functions. For example: 7 / 2 = 3.5, 7 // 2 = 3, 1 + 2 = 3, \"1\" ++ \"2\" = \"12\".\nWhen you limit ambiguity on one side it's much more safe to allow \"1\" + \"2\" = 3 because we know that '+' is always mathematical plus operator.",
        "user": "U7C7B75R6",
        "ts": "1579463552.184800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UW9a",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Approach I like is to use separated operators for different functions. For example: 7 / 2 = 3.5, 7 // 2 = 3, 1 + 2 = 3, \"1\" ++ \"2\" = \"12\".\nWhen you limit ambiguity on one side it's much more safe to allow \"1\" + \"2\" = 3 because we know that '+' is always mathematical plus operator."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJN1TAYEQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c0cd3639-9f7a-463a-a467-607ac7b778da",
        "type": "message",
        "text": "<@U7C7B75R6> I agree, it's the only sensible and correct way to design math operators. There is a paper by John Reynolds that formalizes the design principle using category theory.\n\nIf you introduce a coercion between strings and numbers, then you have a problem, because there isn't a one to one correspondence between strings and numbers. There are multiple string representations for each number. For example, 1==1.0 and 01==1, but \"1\" != \"1.0\" and \"01\" != \"1\". So now your equality operator is broken, and the way to fix it, according to this principle, is to do what Perl 5 does, and provide different equality operators for numbers and strings. In other words, a coercion between numbers and strings doesn't simplify anything, it just pushes language complexity from one place to another.",
        "user": "UJN1TAYEQ",
        "ts": "1579468936.185200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WEy0m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U7C7B75R6"
                            },
                            {
                                "type": "text",
                                "text": " I agree, it's the only sensible and correct way to design math operators. There is a paper by John Reynolds that formalizes the design principle using category theory.\n\nIf you introduce a coercion between strings and numbers, then you have a problem, because there isn't a one to one correspondence between strings and numbers. There are multiple string representations for each number. For example, 1==1.0 and 01==1, but \"1\" != \"1.0\" and \"01\" != \"1\". So now your equality operator is broken, and the way to fix it, according to this principle, is to do what Perl 5 does, and provide different equality operators for numbers and strings. In other words, a coercion between numbers and strings doesn't simplify anything, it just pushes language complexity from one place to another."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "D78FAE3A-F370-424D-B508-D22B0CB0EE72",
        "type": "message",
        "text": "<@U7C7B75R6> What\u2019s the behavior if the values are of different types?",
        "user": "ULM3U6275",
        "ts": "1579469565.186900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9feAQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U7C7B75R6"
                            },
                            {
                                "type": "text",
                                "text": " What\u2019s the behavior if the values are of different types?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "c45e1e1e-8f55-40ca-85d6-287c0fb9c3eb",
        "type": "message",
        "text": "<@UJN1TAYEQ> yea that's true. And to be precise coercion between strings and numbers parts wasn't included to things I like :sweat_smile:\n\n<@ULM3U6275> \"/\" is float -&gt; float -&gt; float so if any input is integer they are converted to float. \"//\" is int -&gt; int -&gt; int and if you are trying to insert float you should &lt;placeholder for some trade-off&gt; :grin:\n\nBut one thing I have been considered is implicit write &amp; explicit read separation. So you could write implicit way: \"1\" + \"2\" but derived form of that code would be int.parse(\"1\") + int.parse(\"2\").\nSomething like: <https://www.beslogic.com/wp-content/uploads/2018/05/type-inference.png>\nStill challenge is that such visualization separations doesn't fit too well on text edit.",
        "user": "U7C7B75R6",
        "ts": "1579470293.187200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "874x307px image",
                "image_url": "https://www.beslogic.com/wp-content/uploads/2018/05/type-inference.png",
                "image_width": 874,
                "image_height": 307,
                "image_bytes": 42914,
                "from_url": "https://www.beslogic.com/wp-content/uploads/2018/05/type-inference.png",
                "id": 1,
                "original_url": "https://www.beslogic.com/wp-content/uploads/2018/05/type-inference.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XkY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " yea that's true. And to be precise coercion between strings and numbers parts wasn't included to things I like "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": " \"/\" is float -> float -> float so if any input is integer they are converted to float. \"//\" is int -> int -> int and if you are trying to insert float you should <placeholder for some trade-off> "
                            },
                            {
                                "type": "emoji",
                                "name": "grin"
                            },
                            {
                                "type": "text",
                                "text": "\n\nBut one thing I have been considered is implicit write & explicit read separation. So you could write implicit way: \"1\" + \"2\" but derived form of that code would be int.parse(\"1\") + int.parse(\"2\").\nSomething like: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.beslogic.com/wp-content/uploads/2018/05/type-inference.png"
                            },
                            {
                                "type": "text",
                                "text": "\nStill challenge is that such visualization separations doesn't fit too well on text edit."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579212773.252900",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "54a86bd8-2ce6-4117-816e-ba4774eccc92",
        "type": "message",
        "text": "Video on following thread is quite describing current state of GUIs (<https://futureofcoding.slack.com/archives/C5T9GPWFL/p1579324191059700>). GUI is usually flat static object with literals. Interaction is only about editing literals and navigation between views. We can copy some literals to clipboard and recover them but for example you cannot even copy/paste value of multi select button.\n\nMaybe:\n-Treat all literals as real copy pasteable values like mutiselect buttons, radios, checkboxes, file inputs etc.\n-Treat composition of form values as first class 'thing'\n-Allow user to manage those literals outside of specific form\n-Allow user to define variable so that single value can be updated easily on multiple places",
        "user": "U7C7B75R6",
        "ts": "1579471100.187500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1579324191059700",
                "fallback": "[January 17th, 2020 9:09 PM] noahtren: What would you call a visual tool or widget that generates code based on how you interact with it? Kind of like a midpoint between code and nocode in my mind. Here's a great example:  <https://twitter.com/Raathigesh/status/1133357919427223553?s=19|https://twitter.com/Raathigesh/status/1133357919427223553?s=19>",
                "ts": "1579324191.059700",
                "author_id": "UQPHR6Y3S",
                "author_subname": "noahtren",
                "channel_id": "C5T9GPWFL",
                "channel_name": "general",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "What would you call a visual tool or widget that generates code based on how you interact with it? Kind of like a midpoint between code and nocode in my mind. Here's a great example:  <https://twitter.com/Raathigesh/status/1133357919427223553?s=19|https://twitter.com/Raathigesh/status/1133357919427223553?s=19>",
                "author_name": "noahtren",
                "author_link": "https://futureofcoding.slack.com/team/UQPHR6Y3S",
                "author_icon": "https://avatars.slack-edge.com/2020-01-09/890538367777_072ed9b65c977f61e33b_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1579324191059700",
                "footer": "Thread in #general"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tBU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Video on following thread is quite describing current state of GUIs ("
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1579324191059700"
                            },
                            {
                                "type": "text",
                                "text": "). GUI is usually flat static object with literals. Interaction is only about editing literals and navigation between views. We can copy some literals to clipboard and recover them but for example you cannot even copy/paste value of multi select button.\n\nMaybe:\n-Treat all literals as real copy pasteable values like mutiselect buttons, radios, checkboxes, file inputs etc.\n-Treat composition of form values as first class 'thing'\n-Allow user to manage those literals outside of specific form\n-Allow user to define variable so that single value can be updated easily on multiple places"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579320626.049700",
        "parent_user_id": "UMWF81HTP",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UMWF81HTP"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "848e1964-c611-412c-9c6c-48b5ec98efd6",
        "type": "message",
        "text": "Delighted to see some Latour in there.",
        "user": "UD3AK9JRF",
        "ts": "1579471627.187800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+fKat",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Delighted to see some Latour in there."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1579382384.130500",
        "parent_user_id": "UC2A2ARPT"
    }
]