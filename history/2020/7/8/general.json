[
    {
        "client_msg_id": "65aecd2f-373e-4f69-a04a-42d96ad479b8",
        "type": "message",
        "text": "<@ULM3U6275> sorry I dropped your (rhetorical?) question. What I was getting at is the distinction between using synchronization primitives and _having to reason about synchronization_. Every time I create a shell pipeline I use synchronization. But I don't need to think about it. Do programmers need to think about or appreciate synchronization more than they do today? I'm not yet convinced. And similarly for many of your other axes. They're the stuff of CS degrees, sure, and I have a CS degree so I'm closer to them than most. But they feel like accidental complexity in most situations.",
        "user": "UCUSW7WVD",
        "ts": "1594159483.055100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mzn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": " sorry I dropped your (rhetorical?) question. What I was getting at is the distinction between using synchronization primitives and "
                            },
                            {
                                "type": "text",
                                "text": "having to reason about synchronization",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Every time I create a shell pipeline I use synchronization. But I don't need to think about it. Do programmers need to think about or appreciate synchronization more than they do today? I'm not yet convinced. And similarly for many of your other axes. They're the stuff of CS degrees, sure, and I have a CS degree so I'm closer to them than most. But they feel like accidental complexity in most situations."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593722002.162200",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "4f3b2d05-df36-4a49-b037-0189bb0b34d5",
        "type": "message",
        "text": "Re: Doug\n&gt; [very good comment that I enjoyed and agreed with, ending with...] But don't make me manually lay out the nodes for 'x + y + z'.\nAgreed! No _good_ node editor would make you do that. (There is a paucity of good node editors.)\n\nThat said, `Vec3.add(x, Vec3.add(y, z))` is bad too \u2014\u00a0and it's common in languages that don't have operator overloading. But operator overloading isn't a total win either, given precedence is typically fixed (good luck using `^` for the geometric wedge product). So in the end, you still often have to manually lay out your equations, just using extra verbosity instead of extra cabling.",
        "user": "UC2A2ARPT",
        "ts": "1594159640.055300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1594161177.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X+UU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Re: Doug\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[very good comment that I enjoyed and agreed with, ending with...] But don't make me manually lay out the nodes for 'x + y + z'."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAgreed! No "
                            },
                            {
                                "type": "text",
                                "text": "good",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " node editor would make you do that. (There is a paucity of good node editors.)\n\nThat said, "
                            },
                            {
                                "type": "text",
                                "text": "Vec3.add(x, Vec3.add(y, z))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is bad too \u2014\u00a0and it's common in languages that don't have operator overloading. But operator overloading isn't a total win either, given precedence is typically fixed (good luck using "
                            },
                            {
                                "type": "text",
                                "text": "^",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for the geometric wedge product). So in the end, you still often have to manually lay out your equations, just using extra verbosity instead of extra cabling."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "81C54324-E7BB-40FF-9372-E24442E48D7C",
        "type": "message",
        "text": "The ideal is probably something like a rich symbolic algebra editor, and it'd be easier to build that within a powerful visual environment than within a powerful text-grid environment.\n\n(Considering that things like Atom and Code are built within a web rendering engine, the distinction becomes less and less meaningful)",
        "user": "UC2A2ARPT",
        "ts": "1594162816.060200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QBk1+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The ideal is probably something like a rich symbolic algebra editor, and it'd be easier to build that within a powerful visual environment than within a powerful text-grid environment.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "(Considering that things like Atom and Code are built within a web rendering engine, the distinction becomes less and less meaningful)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "d6f7c161-7eb3-43c6-b51b-cb6f49c6ef62",
        "type": "message",
        "text": "&gt; But don't make me manually lay out the nodes for 'x + y + z'.\n&gt; &gt; Agreed! No _good_ node editor would make you do that.\nShow me an example of one that doesn't make me do that. The problem with node+wire is that once you add a node to the canvas, it is stuck in that position until you move it. So what happens after you have written a substantial amount of code, and need to revise it? Suppose I want to insert 'x + y + z' into the middle of a computation, but it won't fit, there is no room on the canvas to put those nodes where I want. So either I manually rearrange all the nodes to make room for the new code, or I put the new code off to one side where there is space, and drag input and output wires from the place where the computation needs to be, off to where I put the nodes, and now the code looks like a plate of spaghetti.\n\nSo that's why I want automatic layout. If I insert nodes, the code automatically reflows to make room. If I delete nodes, the code automatically reflows to fill in the gap.",
        "user": "UJN1TAYEQ",
        "ts": "1594162823.060400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s73cY",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But don't make me manually lay out the nodes for 'x + y + z'.\n> Agreed! No "
                            },
                            {
                                "type": "text",
                                "text": "good",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " node editor would make you do that."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Show me an example of one that doesn't make me do that. The problem with node+wire is that once you add a node to the canvas, it is stuck in that position until you move it. So what happens after you have written a substantial amount of code, and need to revise it? Suppose I want to insert 'x + y + z' into the middle of a computation, but it won't fit, there is no room on the canvas to put those nodes where I want. So either I manually rearrange all the nodes to make room for the new code, or I put the new code off to one side where there is space, and drag input and output wires from the place where the computation needs to be, off to where I put the nodes, and now the code looks like a plate of spaghetti.\n\nSo that's why I want automatic layout. If I insert nodes, the code automatically reflows to make room. If I delete nodes, the code automatically reflows to fill in the gap."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "5aca00f2-1f37-4851-96aa-fd2391e07bb0",
        "type": "message",
        "text": "<@UC2A2ARPT> \"The ideal is probably something like a rich symbolic algebra editor\" -- Are we agreeing that the ideal is not node+wire?",
        "user": "UJN1TAYEQ",
        "ts": "1594162946.062500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1RMe8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " \"The ideal is probably something like a rich symbolic algebra editor\" -- Are we agreeing that the ideal is not node+wire?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "b7a029c8-f489-4b8e-a78d-c5f5ad1149a0",
        "type": "message",
        "text": "<@UJN1TAYEQ> Though few editors do this, \"moving stuff out of the way to make room for new construction\" is the kind of \"auto-tidying\" that a good editor should do. I don't think that's in conflict with allowing the user to spatially organize, as long as it doesn't outright prevent the user from moving stuff around on their own.",
        "user": "U6FKVSVCK",
        "ts": "1594163242.063900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OVnK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " Though few editors do this, \"moving stuff out of the way to make room for new construction\" is the kind of \"auto-tidying\" that a good editor should do. I don't think that's in conflict with allowing the user to spatially organize, as long as it doesn't outright prevent the user from moving stuff around on their own."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "61a24a41-30e8-463f-ade4-8ae15ed375d3",
        "type": "message",
        "text": "&gt; moving stuff out of the way\n3d modelling tools have solved this problem without automatic layout. They give you rich tools to manipulate objects in space, and the space itself, by leveraging the properties of the structure of objects and space.\n\nWant to insert something in the middle of a dense mesh? Grab a vertex and spread out new vertices along every inbound edge, turning the original vertex into a face \u2014\u00a0in 1 keypress + click. Or, slice a plane through the mesh, and push both halves of the mesh apart. Or, band-select all the faces pointing toward the camera, and pull them away from all the faces looking away from the camera. At all times, you have full control over exactly where every vertex is, and when editing in bulk, exactly how each vertex is moving \u2014\u00a0you would absolutely not want to tell the program \"just move my vertices out of the way _somehow_\".\n\nThere are, also, automatic tools you can use. But the manual modelling tools are so good, you rarely want to use the automatic tools. (This gets more weedsy when talking about animation, UV mapping, mesh sculpting, etc. \u2014 those areas have manual+automatic hybrids.\u00a0But they're also less about putting things in places and more about setting relationships, which is relevant to us, but not relevant to this question.)\n\n&gt; Are we agreeing that the ideal is not node+wire?\nA rich symbolic algebra editor could (and should) just be another node. (And, ideally, you should be able to crack it open and play with the nodes inside it.)\n\nThis thread is broadly about node-and-wire programming, implicitly vs text editing, so that's where I've been focusing my thoughts. But do count me in with team \"node-and-wire isn't the best that visual programming has to offer\".\n\n&gt; Show me an example of one that doesn't make me do that.\n\"There is a paucity of good node editors.\" So, you'll have to use your imagination :(\n\n(There are a bunch of node-and-wire tools that let you put JavaScript or C++ or whatever inside a node. I view that as cheating. There are some node editors, though their names escape me, that do have dedicated equation nodes. None of them are especially rich.)",
        "user": "UC2A2ARPT",
        "ts": "1594164030.064100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1594164544.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VKo",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "moving stuff out of the way"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n3d modelling tools have solved this problem without automatic layout. They give you rich tools to manipulate objects in space, and the space itself, by leveraging the properties of the structure of objects and space.\n\nWant to insert something in the middle of a dense mesh? Grab a vertex and spread out new vertices along every inbound edge, turning the original vertex into a face \u2014\u00a0in 1 keypress + click. Or, slice a plane through the mesh, and push both halves of the mesh apart. Or, band-select all the faces pointing toward the camera, and pull them away from all the faces looking away from the camera. At all times, you have full control over exactly where every vertex is, and when editing in bulk, exactly how each vertex is moving \u2014\u00a0you would absolutely not want to tell the program \"just move my vertices out of the way "
                            },
                            {
                                "type": "text",
                                "text": "somehow",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\".\n\nThere are, also, automatic tools you can use. But the manual modelling tools are so good, you rarely want to use the automatic tools. (This gets more weedsy when talking about animation, UV mapping, mesh sculpting, etc. \u2014 those areas have manual+automatic hybrids.\u00a0But they're also less about putting things in places and more about setting relationships, which is relevant to us, but not relevant to this question.)\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are we agreeing that the ideal is not node+wire?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nA rich symbolic algebra editor could (and should) just be another node. (And, ideally, you should be able to crack it open and play with the nodes inside it.)\n\nThis thread is broadly about node-and-wire programming, implicitly vs text editing, so that's where I've been focusing my thoughts. But do count me in with team \"node-and-wire isn't the best that visual programming has to offer\".\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Show me an example of one that doesn't make me do that."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\"There is a paucity of good node editors.\" So, you'll have to use your imagination :(\n\n(There are a bunch of node-and-wire tools that let you put JavaScript or C++ or whatever inside a node. I view that as cheating. There are some node editors, though their names escape me, that do have dedicated equation nodes. None of them are especially rich.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "62e934de-9b10-4ba0-b1bc-987f88b24c1a",
        "type": "message",
        "text": "Notebooks feel like the first avenue where node-and-wire will go beyond PoC applications \u2014 the scripts to replace are small / the number of pieces to display and enable are limited (and are already on screen, to understand) \u2014 and notebooks are already a half-visual / hybrid context, going full-visual is a win for the audience (vs a _meh_ for developers anywhere else)\n\nSomething like <https://github.com/IBM/node-red-dsx-workflow> but cell-by-cell within a notebook",
        "user": "USH01JEDQ",
        "ts": "1594165381.064700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "USH01JEDQ",
            "ts": "1594165388.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AW4XH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Notebooks feel like the first avenue where node-and-wire will go beyond PoC applications \u2014 the scripts to replace are small / the number of pieces to display and enable are limited (and are already on screen, to understand) \u2014 and notebooks are already a half-visual / hybrid context, going full-visual is a win for the audience (vs a "
                            },
                            {
                                "type": "text",
                                "text": "meh",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for developers anywhere else)\n\nSomething like "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/IBM/node-red-dsx-workflow"
                            },
                            {
                                "type": "text",
                                "text": " but cell-by-cell within a notebook"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "383bf9e0-228b-45f2-955e-7b980e9b133f",
        "type": "message",
        "text": "Specifically wrt data schemas, <@U5STGTB3J> have you seen Cambria from Ink &amp; Switch? Its early research but could be interesting reading <https://inkandswitch.github.io/cambria/>",
        "user": "U8A5MS6R1",
        "ts": "1594167761.065100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Cambria",
                "title_link": "https://inkandswitch.github.io/cambria/",
                "text": "On-Demand Migrations for Decentralized Data",
                "fallback": "Cambria",
                "from_url": "https://inkandswitch.github.io/cambria/",
                "service_name": "inkandswitch.github.io",
                "id": 1,
                "original_url": "https://inkandswitch.github.io/cambria/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ro3S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Specifically wrt data schemas, "
                            },
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " have you seen Cambria from Ink & Switch? Its early research but could be interesting reading "
                            },
                            {
                                "type": "link",
                                "url": "https://inkandswitch.github.io/cambria/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "bd849e39-96f1-486d-b9f8-95b86011f6c7",
        "type": "message",
        "text": "I loved Mercury when I saw it originally. I didn't know about makespace but that looks great too.\n\nThe main thing that struck me about Mercury isn't just the clean UI but that the software is organized around 'app-free intentions aka flows'. All operating systems (iOS, Linux, Windows) are very app oriented. Mercury provides your 'intention' or 'workflow' as a concrete organizational model. Typically you jump from app to app to app to acomplish a given intention - the thread of intention just lives in your head, but nothing connects the corresponding windows on your screen. Mercury solves this.\n\nCheck out this 'flow' of a single intention (getting coffee with a friend) that spans multiple apps - nothing like this exists in any mainstream OS: <https://miro.medium.com/max/1000/1*0hAZt7GMWzgSjSDK5VBwCA.gif>\n\nI would *love* to create threads that connect snippets of information across multiple 'apps' - all are related to one intention. Unfortunately what I do is just reframe a calendar view or mail view I already have open (for one purpose) to another purpose. I end up with a cluster of app windows with different purposes all mixed together. Not at all ideal, but something we're just used to I guess.",
        "user": "U8A5MS6R1",
        "ts": "1594168693.065400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1594168900.000000"
        },
        "attachments": [
            {
                "fallback": "1200x675px image",
                "image_url": "https://miro.medium.com/max/1000/1*0hAZt7GMWzgSjSDK5VBwCA.gif",
                "image_width": 1200,
                "image_height": 675,
                "image_bytes": 9148183,
                "is_animated": true,
                "from_url": "https://miro.medium.com/max/1000/1*0hAZt7GMWzgSjSDK5VBwCA.gif",
                "id": 1,
                "original_url": "https://miro.medium.com/max/1000/1*0hAZt7GMWzgSjSDK5VBwCA.gif"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "utq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I loved Mercury when I saw it originally. I didn't know about makespace but that looks great too.\n\nThe main thing that struck me about Mercury isn't just the clean UI but that the software is organized around 'app-free intentions aka flows'. All operating systems (iOS, Linux, Windows) are very app oriented. Mercury provides your 'intention' or 'workflow' as a concrete organizational model. Typically you jump from app to app to app to acomplish a given intention - the thread of intention just lives in your head, but nothing connects the corresponding windows on your screen. Mercury solves this.\n\nCheck out this 'flow' of a single intention (getting coffee with a friend) that spans multiple apps - nothing like this exists in any mainstream OS: "
                            },
                            {
                                "type": "link",
                                "url": "https://miro.medium.com/max/1000/1*0hAZt7GMWzgSjSDK5VBwCA.gif"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI would "
                            },
                            {
                                "type": "text",
                                "text": "love",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to create threads that connect snippets of information across multiple 'apps' - all are related to one intention. Unfortunately what I do is just reframe a calendar view or mail view I already have open (for one purpose) to another purpose. I end up with a cluster of app windows with different purposes all mixed together. Not at all ideal, but something we're just used to I guess."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594131292.451400",
        "parent_user_id": "UJFN50C00",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFQQ3P867"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f733730e-b34f-4289-8202-eec6ff06e32a",
        "type": "message",
        "text": "Wat Peter just posted this to <#CCL5VVBAN|feedback> today and I only now saw it heh: <https://futureofcoding.slack.com/archives/CCL5VVBAN/p1594164273362200>",
        "user": "U8A5MS6R1",
        "ts": "1594169124.066200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/CCL5VVBAN/p1594164273362200",
                "fallback": "[July 7th, 2020 4:24 PM] pvh: Distributed systems struggle with the evolution of their data types over time. The classical solution is carefully orchestrated database migrations, API deprecations, and the like. In decentralised software many of these techniques do not apply. How then, should we manage change over time in evolving systems? We're exploring this question at Ink &amp; Switch with the Cambria project. You might enjoy following along with our weekly updates posted here: <https://inkandswitch.github.io/cambria/>",
                "ts": "1594164273.362200",
                "author_id": "UFXFB1RK8",
                "author_subname": "Peter van Hardenberg",
                "channel_id": "CCL5VVBAN",
                "channel_name": "feedback",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "Distributed systems struggle with the evolution of their data types over time. The classical solution is carefully orchestrated database migrations, API deprecations, and the like. In decentralised software many of these techniques do not apply. How then, should we manage change over time in evolving systems? We're exploring this question at Ink &amp; Switch with the Cambria project. You might enjoy following along with our weekly updates posted here: <https://inkandswitch.github.io/cambria/>",
                "author_name": "Peter van Hardenberg",
                "author_link": "https://futureofcoding.slack.com/team/UFXFB1RK8",
                "author_icon": "https://secure.gravatar.com/avatar/53ffd374deb821ab07cdef9f7e321364.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0011-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/CCL5VVBAN/p1594164273362200",
                "footer": "Thread in #feedback"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xuf2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wat Peter just posted this to "
                            },
                            {
                                "type": "channel",
                                "channel_id": "CCL5VVBAN"
                            },
                            {
                                "type": "text",
                                "text": " today and I only now saw it heh: "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/CCL5VVBAN/p1594164273362200"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594129616.447900",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "0c7250c9-2fb5-4294-8886-4c7a0e16bd1f",
        "type": "message",
        "text": "This recent blog post gives a good idea of what makes GToolkit different. It's written for people with some Pharo background, but I suppose most people here will get the gist even without that.  <https://blog.feenk.com/glamorous-toolkit-and-pharo-5aufgcequ38az2s0dj0t1nu0f/>",
        "user": "UJBAJNFLK",
        "ts": "1594191939.066800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Glamorous Toolkit and Pharo",
                "title_link": "https://blog.feenk.com/glamorous-toolkit-and-pharo-5aufgcequ38az2s0dj0t1nu0f/",
                "text": "Glamorous Toolkit is built in Pharo, and it enables people to work with Pharo systems. Nevertheless, its goal is distinct from that of Pharo and so is its realization.",
                "fallback": "Glamorous Toolkit and Pharo",
                "from_url": "https://blog.feenk.com/glamorous-toolkit-and-pharo-5aufgcequ38az2s0dj0t1nu0f/",
                "service_name": "blog.feenk.com",
                "id": 1,
                "original_url": "https://blog.feenk.com/glamorous-toolkit-and-pharo-5aufgcequ38az2s0dj0t1nu0f/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PNUx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This recent blog post gives a good idea of what makes GToolkit different. It's written for people with some Pharo background, but I suppose most people here will get the gist even without that.  "
                            },
                            {
                                "type": "link",
                                "url": "https://blog.feenk.com/glamorous-toolkit-and-pharo-5aufgcequ38az2s0dj0t1nu0f/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593677610.126000",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "f537ad6d-eac5-4ab8-8922-6d8d09e62485",
        "type": "message",
        "text": "<@UFQQ3P867> thanks for bringing up the Deutsch limit.  I don't know about others, but when a whole page of text is in front of me, I certainly cannot parse out 50 items at once.  It may be dense, but it is no more clear than zooming out on a diagram (or a mechanical assembly).  As for the quote, \"Well, this is all fine and well, but the problem with visual programming languages is that you can\u2019t have more than 50 visual primitives on the screen at the same time. How are you going to write an operating system?\"  Is he trolling us?  I mean I have handy here a project of... ~20,000 LoC.  I can't see all of that at once.*  A dozen people are working on it.  I'm sure there are horrors to be found that a decent visualization would reveal \u2014 both at the level of basic formatting, style, structuring and at the deeper level of knotted up semantics, conditionals, wrapping something up only to unwrap it elsewhere.  The usual suspects.",
        "user": "UA14TGLTC",
        "ts": "1594196717.067400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5vD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFQQ3P867"
                            },
                            {
                                "type": "text",
                                "text": " thanks for bringing up the Deutsch limit.  I don't know about others, but when a whole page of text is in front of me, I certainly cannot parse out 50 items at once.  It may be dense, but it is no more clear than zooming out on a diagram (or a mechanical assembly).  As for the quote, \"Well, this is all fine and well, but the problem with visual programming languages is that you can\u2019t have more than 50 visual primitives on the screen at the same time. How are you going to write an operating system?\"  Is he trolling us?  I mean I have handy here a project of... ~20,000 LoC.  I can't see all of that at once.*  A dozen people are working on it.  I'm sure there are horrors to be found that a decent visualization would reveal \u2014 both at the level of basic formatting, style, structuring and at the deeper level of knotted up semantics, conditionals, wrapping something up only to unwrap it elsewhere.  The usual suspects."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UHWC9PXBL",
                    "UC2A2ARPT",
                    "UFQQ3P867"
                ],
                "count": 3
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "41824889-ee08-43c8-8df2-0465d276b253",
        "type": "message",
        "text": "* Text search works great though.  So that's something visual tools could benefit from.",
        "user": "UA14TGLTC",
        "ts": "1594196776.067600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zjWF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "* Text search works great though.  So that's something visual tools could benefit from."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "text": "So when people on social media notice how social media fails, even in not too advanced ways, is it our fault as programmers? Designers? Who designs Cultural myths like Apps and social media designs like \u201cfeeds\u201d and threads ? ",
        "files": [
            {
                "id": "F016REHPCEP",
                "created": 1594214424,
                "timestamp": 1594214424,
                "name": "Bild von iOS.png",
                "title": "Bild von iOS",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UJFN50C00",
                "editable": false,
                "size": 101731,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F016REHPCEP/bild_von_ios.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F016REHPCEP/download/bild_von_ios.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F016REHPCEP-8bd96797c6/bild_von_ios_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F016REHPCEP-8bd96797c6/bild_von_ios_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F016REHPCEP-8bd96797c6/bild_von_ios_360.png",
                "thumb_360_w": 203,
                "thumb_360_h": 360,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F016REHPCEP-8bd96797c6/bild_von_ios_480.png",
                "thumb_480_w": 270,
                "thumb_480_h": 480,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F016REHPCEP-8bd96797c6/bild_von_ios_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F016REHPCEP-8bd96797c6/bild_von_ios_720.png",
                "thumb_720_w": 406,
                "thumb_720_h": 720,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F016REHPCEP-8bd96797c6/bild_von_ios_800.png",
                "thumb_800_w": 451,
                "thumb_800_h": 800,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F016REHPCEP-8bd96797c6/bild_von_ios_960.png",
                "thumb_960_w": 541,
                "thumb_960_h": 960,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F016REHPCEP-8bd96797c6/bild_von_ios_1024.png",
                "thumb_1024_w": 577,
                "thumb_1024_h": 1024,
                "image_exif_rotation": 1,
                "original_w": 640,
                "original_h": 1136,
                "thumb_tiny": "AwAwABvOKvtDEHaelA4ByG/CnmWRohGX+UdsUwgn+KgBvSgkk5JowfSigB4zgf8A16Xn3/WmA8dBRu9hQA//AD3qOgnNFADsHjrSc+9LnCjpSbvYUAITRS557Uh60Af/2Q==",
                "permalink": "https://futureofcoding.slack.com/files/UJFN50C00/F016REHPCEP/bild_von_ios.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F016REHPCEP-efc494cc06",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": true,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ncgt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So when people on social media notice how social media fails, even in not too advanced ways, is it our fault as programmers? Designers? Who designs Cultural myths like Apps and social media designs like \u201cfeeds\u201d and threads ? "
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UJFN50C00",
        "display_as_bot": false,
        "ts": "1594214426.071200",
        "edited": {
            "user": "UJFN50C00",
            "ts": "1594220339.000000"
        },
        "client_msg_id": "6D56277E-0509-4617-8AC4-8CAF839C5DD1",
        "thread_ts": "1594214426.071200",
        "reply_count": 5,
        "reply_users_count": 3,
        "latest_reply": "1594218710.074400",
        "reply_users": [
            "UDQBTJ211",
            "UT60XSVCN",
            "UR482RFPY"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UR482RFPY"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "2cc45bfe-09bb-4ce4-ac2b-0a7c29b890c6",
        "type": "message",
        "text": "We shouldn't discuss the Deutsch limit without also discussing APL/J/K. In the communities that use these languages, dense code is highly valued. Because this allows you to put a large program on the screen in its entirety, and read it without scrolling. APL was invented in the late 1950's, and there has been 60 years of work on achieving ever higher code densities. So now you can put the logic from 10,000 lines of C++ code in two pages and read it without scrolling. The claim is that once you surmount the steep learning curve, you become more productive. You can write a page of C code in a few keystrokes. There is less use of libraries: the attitude is that if the name of a library function is more keystrokes than inline coding the same logic using language primitives, then you should use language primitives instead.",
        "user": "UJN1TAYEQ",
        "ts": "1594215349.071500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Upp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We shouldn't discuss the Deutsch limit without also discussing APL/J/K. In the communities that use these languages, dense code is highly valued. Because this allows you to put a large program on the screen in its entirety, and read it without scrolling. APL was invented in the late 1950's, and there has been 60 years of work on achieving ever higher code densities. So now you can put the logic from 10,000 lines of C++ code in two pages and read it without scrolling. The claim is that once you surmount the steep learning curve, you become more productive. You can write a page of C code in a few keystrokes. There is less use of libraries: the attitude is that if the name of a library function is more keystrokes than inline coding the same logic using language primitives, then you should use language primitives instead."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL",
                    "UFQQ3P867"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "e8b7450f-b808-49c8-9498-eaa36910d0e9",
        "type": "message",
        "text": "I think there is an opportunity to combine the ideas from APL with visual programming and projectional editing. I like the idea of a \"zoom out to APL\" feature. Dense APL-style code would have a less steep learning curve, and be more accessible, if it was just one of several different code views that you could select among. I also find the APL operator symbols beautiful and suggestive: icons instead of words.",
        "user": "UJN1TAYEQ",
        "ts": "1594215531.071700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1594218200.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TDTdX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think there is an opportunity to combine the ideas from APL with visual programming and projectional editing. I like the idea of a \"zoom out to APL\" feature. Dense APL-style code would have a less steep learning curve, and be more accessible, if it was just one of several different code views that you could select among. I also find the APL operator symbols beautiful and suggestive: icons instead of words."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "2a279d13-0ea4-4a54-a418-8faacdf8fd65",
        "type": "message",
        "text": "The issue here is that comment threads are a phenomenally complicated type of conversation with no equivalent in the real world",
        "user": "UDQBTJ211",
        "ts": "1594216249.073400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9Z9tJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The issue here is that comment threads are a phenomenally complicated type of conversation with no equivalent in the real world"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594214426.071200",
        "parent_user_id": "UJFN50C00",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UR482RFPY",
                    "ULM3U6275",
                    "UUK6Y29R8"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "4ebe058d-ffe6-4b48-a946-973c4874cb79",
        "type": "message",
        "text": "If you pick a leaf node, you can read it fine as a linear conversation from the root. If you start with the root you're screwed",
        "user": "UDQBTJ211",
        "ts": "1594216360.073600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8SMi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you pick a leaf node, you can read it fine as a linear conversation from the root. If you start with the root you're screwed"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594214426.071200",
        "parent_user_id": "UJFN50C00",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UR482RFPY",
                    "UR08YDGHW"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "e77799d9-3f9e-4619-b11b-4302f1ec040e",
        "type": "message",
        "text": "_Twitter_ comment threads are, sure, but that's a choice they made for who knows what reason. Pretty much every other major web forum has clearer comment threads and are generally not all that ambiguous",
        "user": "UT60XSVCN",
        "ts": "1594218276.073900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c2i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Twitter",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " comment threads are, sure, but that's a choice they made for who knows what reason. Pretty much every other major web forum has clearer comment threads and are generally not all that ambiguous"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594214426.071200",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "58d5c427-251a-4bfc-b72d-6aeecdf96efd",
        "type": "message",
        "text": "Here's a project I saw recently, it tries to reify the underlying graph: <https://man.sr.ht/~whereswaldon/arborchat/|https://man.sr.ht/~whereswaldon/arborchat/>",
        "user": "UT60XSVCN",
        "ts": "1594218337.074100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gc59l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's a project I saw recently, it tries to reify the underlying graph: "
                            },
                            {
                                "type": "link",
                                "url": "https://man.sr.ht/~whereswaldon/arborchat/",
                                "text": "https://man.sr.ht/~whereswaldon/arborchat/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594214426.071200",
        "parent_user_id": "UJFN50C00",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UR482RFPY"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b7acda43-6c8a-4571-9959-5996039ea3d5",
        "type": "message",
        "text": "Twitter comments are especially complicated now because they went from being trees to being potentially cyclic graphs (if you consider both quote-tweets and replies to be edges). A pet project of mine is a tool for visualizing the tree portion of the graph (i.e. ignoring the quote tweet edges): <http://treeverse.app|treeverse.app>",
        "user": "UR482RFPY",
        "ts": "1594218710.074400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "amU8h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Twitter comments are especially complicated now because they went from being trees to being potentially cyclic graphs (if you consider both quote-tweets and replies to be edges). A pet project of mine is a tool for visualizing the tree portion of the graph (i.e. ignoring the quote tweet edges): "
                            },
                            {
                                "type": "link",
                                "url": "http://treeverse.app",
                                "text": "treeverse.app"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594214426.071200",
        "parent_user_id": "UJFN50C00",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UDQBTJ211",
                    "ULM3U6275",
                    "U013ZLJARC7",
                    "UPU0YJ1CM",
                    "UUK6Y29R8"
                ],
                "count": 6
            },
            {
                "name": "grimacing",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "66F1C747-80C3-48C8-8C06-80E4762C4A1A",
        "type": "message",
        "text": "I recently tweeted a reflection on the Deutsch Limit: <https://twitter.com/spiralganglion/status/1272613075292532736|https://twitter.com/spiralganglion/status/1272613075292532736>",
        "user": "UC2A2ARPT",
        "ts": "1594220517.076400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1594266121.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vvvta",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I recently tweeted a reflection on the Deutsch Limit: "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/spiralganglion/status/1272613075292532736",
                                "text": "https://twitter.com/spiralganglion/status/1272613075292532736"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "ULK0Z4MPV",
                    "UHWC9PXBL"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UHWC9PXBL",
                    "UFQQ3P867"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "8DDA21C2-EB34-4005-836F-FDFAF62E09C1",
        "type": "message",
        "text": "WOW makespace looks ridiculously cool and relevant to my interests thank you for sharing it!! ",
        "user": "UHWC9PXBL",
        "ts": "1594224989.078800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jke",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "WOW makespace looks ridiculously cool and relevant to my interests thank you for sharing it!! "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594131292.451400",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "9430DBDF-FB94-49D1-AE3C-3D19A5B422A2",
        "type": "message",
        "text": "IMO deserves its own thread",
        "user": "UHWC9PXBL",
        "ts": "1594224997.079200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NNOd9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "IMO deserves its own thread"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594131292.451400",
        "parent_user_id": "UJFN50C00",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "A55B1673-3036-48BD-9F47-CFCC47855ADD",
        "type": "message",
        "text": "APL also has a great sense of using positioning and punning to deliver more information <@UJN1TAYEQ> . glad to see it brought up in combination. also, some of the symbols are IMO just plain visual genius (eg: tally)",
        "user": "UHWC9PXBL",
        "ts": "1594225619.081600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LgM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "APL also has a great sense of using positioning and punning to deliver more information "
                            },
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " . glad to see it brought up in combination. also, some of the symbols are IMO just plain visual genius (eg: tally)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "09600089-5FEF-42A0-9D2D-AEEC808D5A33",
        "type": "message",
        "text": "actually, now that i think about it, the insistence on REPL-driven development and properly formatted tables are two more marks in the \u201cAPL has stuff to offer visual programming environments\u201d column ",
        "user": "UHWC9PXBL",
        "ts": "1594225694.083600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hdkl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "actually, now that i think about it, the insistence on REPL-driven development and properly formatted tables are two more marks in the \u201cAPL has stuff to offer visual programming environments\u201d column "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594060589.389400",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "ae89efd2-64ec-4231-8ffa-3ff672356c89",
        "type": "message",
        "text": "While I agree that one should understand what effect a given change should have, that is not the same as knowing if it is the change one will have wanted to have made after considering it in context, possibly alongside a number of other experimental changes. In general, any theory of programming that assumes we know our destination before we've begun our journey rules out many areas of human endeavor.",
        "user": "U013ZLJARC7",
        "ts": "1594231900.084600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ijX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "While I agree that one should understand what effect a given change should have, that is not the same as knowing if it is the change one will have wanted to have made after considering it in context, possibly alongside a number of other experimental changes. In general, any theory of programming that assumes we know our destination before we've begun our journey rules out many areas of human endeavor."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594010464.369300",
        "parent_user_id": "UMWF81HTP",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UMWF81HTP"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "BA25DF1C-0713-47F1-81D2-C20E1CB1270B",
        "type": "message",
        "text": "&gt; What if, instead of lowering source code down for the purpose of execution, we raised source code for the purpose of understanding?\n&gt; \n&gt; What if we took the lessons of the semantic web and applied them to source code?\n&gt; \n&gt; \n<https://nshipster.com/as-we-may-code/|https://nshipster.com/as-we-may-code/>",
        "user": "U5STGTB3J",
        "ts": "1594240980.085300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1594241001.000000"
        },
        "attachments": [
            {
                "service_name": "NSHipster",
                "title": "As We May Code",
                "title_link": "https://nshipster.com/as-we-may-code/",
                "text": "What if, instead of lowering source code down for the purpose of execution, we raised it for the purpose of understanding?",
                "fallback": "NSHipster: As We May Code",
                "thumb_url": "https://nshipster.com/logo.png",
                "fields": [
                    {
                        "title": "Category",
                        "value": "Miscellaneous",
                        "short": true
                    }
                ],
                "ts": 1594105200,
                "from_url": "https://nshipster.com/as-we-may-code/",
                "thumb_width": 500,
                "thumb_height": 500,
                "service_icon": "https://nshipster.com/apple-touch-icon.png",
                "id": 1,
                "original_url": "https://nshipster.com/as-we-may-code/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hlw",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What if, instead of lowering source code down for the purpose of execution, we raised source code for the purpose of understanding?\n\nWhat if we took the lessons of the semantic web and applied them to source code?"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://nshipster.com/as-we-may-code/",
                                "text": "https://nshipster.com/as-we-may-code/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594240980.085300",
        "reply_count": 7,
        "reply_users_count": 5,
        "latest_reply": "1594285721.137200",
        "reply_users": [
            "UE1JQM9HQ",
            "UCUSW7WVD",
            "U013ZLJARC7",
            "U5STGTB3J",
            "UN9SCH5RD"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "2be141e0-58fc-4059-9f91-5c35c9a824fc",
        "type": "message",
        "text": "Interesting article. It\u2019s interesting to note that it is written as an invitation to imagine a better world. There really isn\u2019t any need to imagine representing code as data and adding semantics to it by reasoning about it as data. That future is already here.",
        "user": "UE1JQM9HQ",
        "ts": "1594241612.085600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vKod",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting article. It\u2019s interesting to note that it is written as an invitation to imagine a better world. There really isn\u2019t any need to imagine representing code as data and adding semantics to it by reasoning about it as data. That future is already here."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594240980.085300",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL",
                    "UU45NNMHT",
                    "UD3AK9JRF",
                    "U016HU16BS6",
                    "UA14TGLTC",
                    "UJBAJNFLK",
                    "U013ZLJARC7",
                    "U5STGTB3J",
                    "UFLN9JFRT"
                ],
                "count": 10
            }
        ]
    }
]