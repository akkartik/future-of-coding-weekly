[
    {
        "client_msg_id": "3b916d89-812e-4415-826e-47ec3d1af731",
        "type": "message",
        "text": "I'm slowly making Mu safer and more testable, but it's now at the point where I'm also starting to have some fun every week. Hopefully y'all agree.\n\n<https://archive.org/details/akkartik-2min-2020-07-01>\n\nMini rant on prototypes. While a prototype like this would possibly be less work to build on say Python, I think building it atop Mu provides some significant advantages. Research prototypes are not entirely throw-away; the goal with them is to accumulate learning even while the codebase churns. Because it relies on so few dependencies, Mu is more robust to bitrot. This makes it easy for someone else to reproduce an experiment. Even relatively far in the future. I really hope we can converge on a shared platform something like this for research prototypes. It does still need graphics and sound, though..",
        "user": "UCUSW7WVD",
        "ts": "1593647953.023500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Internet Archive",
                "title": "2020-07-01: text-mode animation : Kartik Agaram : Free Download, Borrow, and Streaming : Internet Archive",
                "title_link": "https://archive.org/details/akkartik-2min-2020-07-01",
                "text": "2-minute video of the Mu project for the Future of Coding forum (<https://futureofcoding.org>)",
                "fallback": "Internet Archive: 2020-07-01: text-mode animation : Kartik Agaram : Free Download, Borrow, and Streaming : Internet Archive",
                "thumb_url": "https://archive.org/download/akkartik-2min-2020-07-01/akkartik-2min-2020-07-01.thumbs/akkartik-2min-2020-07-01_000027.jpg",
                "video_html_width": 890,
                "video_html_height": 480,
                "video_url": "https://archive.org/download/akkartik-2min-2020-07-01/akkartik-2min-2020-07-01.mp4",
                "from_url": "https://archive.org/details/akkartik-2min-2020-07-01",
                "thumb_width": 720,
                "thumb_height": 388,
                "service_icon": "https://archive.org/favicon.ico",
                "id": 1,
                "original_url": "https://archive.org/details/akkartik-2min-2020-07-01"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "siel",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm slowly making Mu safer and more testable, but it's now at the point where I'm also starting to have some fun every week. Hopefully y'all agree.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://archive.org/details/akkartik-2min-2020-07-01"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMini rant on prototypes. While a prototype like this would possibly be less work to build on say Python, I think building it atop Mu provides some significant advantages. Research prototypes are not entirely throw-away; the goal with them is to accumulate learning even while the codebase churns. Because it relies on so few dependencies, Mu is more robust to bitrot. This makes it easy for someone else to reproduce an experiment. Even relatively far in the future. I really hope we can converge on a shared platform something like this for research prototypes. It does still need graphics and sound, though.."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593647953.023500",
        "reply_count": 17,
        "reply_users_count": 6,
        "latest_reply": "1593742264.044200",
        "reply_users": [
            "UC2A2ARPT",
            "UHWC9PXBL",
            "UCUSW7WVD",
            "UBN9AFS0N",
            "UUQ2EQW21",
            "U01661S9F34"
        ],
        "subscribed": true,
        "last_read": "1593742264.044200",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "U01661S9F34"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "66e24824-2acf-47df-803a-a2390ebce28d",
        "type": "message",
        "text": "\"Oh, you're still here?\"\n\nKartik, I am _extremely_ here.",
        "user": "UC2A2ARPT",
        "ts": "1593652711.023700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KGC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Oh, you're still here?\"\n\nKartik, I am "
                            },
                            {
                                "type": "text",
                                "text": "extremely",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " here."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8c2f5c8b-4084-4884-8fa9-90b2bc72e941",
        "type": "message",
        "text": "What's the thinking behind only having hex numbers? That `0x5f5e100` might as well be a roman numeral, compared to the adjacent `100 ms`  comment.",
        "user": "UC2A2ARPT",
        "ts": "1593652851.024000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hLk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What's the thinking behind only having hex numbers? That "
                            },
                            {
                                "type": "text",
                                "text": "0x5f5e100",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " might as well be a roman numeral, compared to the adjacent "
                            },
                            {
                                "type": "text",
                                "text": "100 ms",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  comment."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "1e38ddf7-5371-443d-92c1-8f301f0ce32d",
        "type": "message",
        "text": "yeah, i\u2019m never going to stop following this project",
        "user": "UHWC9PXBL",
        "ts": "1593652899.024200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iQGRZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah, i\u2019m never going to stop following this project"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3941472f-67dd-4153-a999-05b1f84053f0",
        "type": "message",
        "text": "Hex started out as just a temporary thing, but changing it now creates cascading consequences.\n\n* It's weird to support it in Mu but not SubX. `10` may mean different numbers in one file vs another.\n* Supporting it in SubX requires writing more SubX without syntax sugar. Including improving error messages in some situations.\n* Supporting it in SubX requires thinking about all the 2-digit opcodes in SubX that I've been writing in hex because that's how the Intel manual represents them.\n\nBut yeah, it _is_ a gotcha that `10` means 16. There's a reason why I always prefix numbers with `0x` unless they're a single digit. I might revisit this. A PR would certainly put me over the edge..",
        "user": "UCUSW7WVD",
        "ts": "1593653125.024700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1593653192.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zA0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hex started out as just a temporary thing, but changing it now creates cascading consequences.\n\n* It's weird to support it in Mu but not SubX. "
                            },
                            {
                                "type": "text",
                                "text": "10",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " may mean different numbers in one file vs another.\n* Supporting it in SubX requires writing more SubX without syntax sugar. Including improving error messages in some situations.\n* Supporting it in SubX requires thinking about all the 2-digit opcodes in SubX that I've been writing in hex because that's how the Intel manual represents them.\n\nBut yeah, it "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a gotcha that "
                            },
                            {
                                "type": "text",
                                "text": "10",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " means 16. There's a reason why I always prefix numbers with "
                            },
                            {
                                "type": "text",
                                "text": "0x",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " unless they're a single digit. I might revisit this. A PR would certainly put me over the edge.."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "eed2cc6c-13d0-4fe6-96de-745a8bcf7a23",
        "type": "message",
        "text": "Caution \u2014 after watching Kartik's video, turn down your volume to a normal level before watching mine. (I wish there was some sort of automatic tool I could share so that all our videos would have normalized audio. If anyone knows of something...)",
        "user": "UC2A2ARPT",
        "ts": "1593666684.026200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wZTm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Caution \u2014 after watching Kartik's video, turn down your volume to a normal level before watching mine. (I wish there was some sort of automatic tool I could share so that all our videos would have normalized audio. If anyone knows of something...)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "dcd6d9db-344f-4e87-bc07-14757941c59f",
        "type": "message",
        "text": "In this update, I share.. some books I've been reading, to help me knock down a few barriers in my ongoing development of Hest. My current focus is on representing and rendering objects in space, so that includes things like: coordinate systems, affine transformations, cameras and perspective/ortho projection, vertex and fragment shaders on the GPU\u2026 and then carefully abstracting all of this so that the artist using Hest will have the right degree of control, and can (for instance) have objects that encode their graphics in various formats (eg: HTML, SVG, glTF) which all coexist in the same space, efficiently.\n\n<https://www.youtube.com/watch?v=LTNb-6uAcPg>",
        "user": "UC2A2ARPT",
        "ts": "1593667067.031300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1593667266.000000"
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Hest Week 3",
                "title_link": "https://www.youtube.com/watch?v=LTNb-6uAcPg",
                "author_name": "Spiral Ganglion",
                "author_link": "https://www.youtube.com/user/sisoft",
                "thumb_url": "https://i.ytimg.com/vi/LTNb-6uAcPg/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Hest Week 3",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https://www.youtube.com/embed/LTNb-6uAcPg?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https://www.youtube.com/watch?v=LTNb-6uAcPg",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=LTNb-6uAcPg"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EEsag",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In this update, I share.. some books I've been reading, to help me knock down a few barriers in my ongoing development of Hest. My current focus is on representing and rendering objects in space, so that includes things like: coordinate systems, affine transformations, cameras and perspective/ortho projection, vertex and fragment shaders on the GPU\u2026 and then carefully abstracting all of this so that the artist using Hest will have the right degree of control, and can (for instance) have objects that encode their graphics in various formats (eg: HTML, SVG, glTF) which all coexist in the same space, efficiently.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=LTNb-6uAcPg"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593667067.031300",
        "reply_count": 23,
        "reply_users_count": 8,
        "latest_reply": "1595203585.137700",
        "reply_users": [
            "UEBG0NPDK",
            "UJN1TAYEQ",
            "UC2A2ARPT",
            "ULK0Z4MPV",
            "U01661S9F34",
            "UHWC9PXBL",
            "UUQ2EQW21",
            "UAVCC2X70"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "UAZT04VT4",
                    "UE6EFEPTQ",
                    "UJ6LDMMN0",
                    "UBSMEUXAA",
                    "U01661S9F34",
                    "UHWC9PXBL",
                    "UUQ2EQW21"
                ],
                "count": 8
            },
            {
                "name": "wave",
                "users": [
                    "UJRDRMWQN"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "121859c4-cf92-42ac-b756-ae2868dfa3a5",
        "type": "message",
        "text": "The face behind the pizza! :stuck_out_tongue:",
        "user": "UEBG0NPDK",
        "ts": "1593669640.031700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jVxOv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The face behind the pizza! "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UE6EFEPTQ",
                    "UHWC9PXBL",
                    "UAVCC2X70"
                ],
                "count": 3
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "pizza",
                "users": [
                    "U8A5MS6R1",
                    "U85HCL7JP"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "f6103dd2-a721-47fc-a80b-84bcc2f08210",
        "type": "message",
        "text": "Really excited to see where you land on the 3d/rendering side. We want to do something similar, where having 2d and 3d in the same space isn't something special. Just plop something down in the workspace and go to town.",
        "user": "UEBG0NPDK",
        "ts": "1593669943.031900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1593669959.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bmdx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Really excited to see where you land on the 3d/rendering side. We want to do something similar, where having 2d and 3d in the same space isn't something special. Just plop something down in the workspace and go to town."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "cab66a0f-2a4f-49ba-9410-eb9d41acaf10",
        "type": "message",
        "text": "is there a \"layer\" where you plan to drop specifying the registers?",
        "user": "UBN9AFS0N",
        "ts": "1593677594.032400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Pzp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "is there a \"layer\" where you plan to drop specifying the registers?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "49b9488c-6b44-40e1-affa-f92f6a6cd4a7",
        "type": "message",
        "text": "do you have a plan to support other CPU architectures?",
        "user": "UBN9AFS0N",
        "ts": "1593677607.032600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WCHTL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "do you have a plan to support other CPU architectures?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "30a552e4-4773-474f-bda3-80f21e9c5360",
        "type": "message",
        "text": "The Mu stack minimizes notations, but my plan is to have one more (called 'level 3' in <http://akkartik.name/post/mu-2019-1>). It's still very much vaporware. The hazy plan is some combination of shell (<http://www.oilshell.org/blog/2017/02/05.html>), awk (<http://www.oilshell.org/blog/2016/11/13.html>) and lisp (<http://paulgraham.com/bel.html>). But it'll stay interpreted so the implementation is easy to understand. To do anything that requires performance I expect people to write small pieces in the existing level 2 (with registers) that can then be glued together using level 3.\n\nI'm not attached to any particular syntax for level 3, I just don't want separate languages for commandline vs scripts. And I don't want the commandline to accrete features without a coherent design the way shells historically did. In the fullness of time I fully expect a MuPy fork, a MuSmalltalk fork, and so on. I'd love to contribute to them if someone else starts them.\n\nCPU architectures similarly will need their own fork. From <http://akkartik.name/akkartik-convivial-20200607.pdf> (section 2.1):\n\n&gt; Portability is explicitly a non-goal. Portability guarantees require extra effort to maintain, and can be particularly challenging for newcomers who may not be inclined to ensure their changes work on platforms they don't regularly run. Rather than attempt to fight a losing battle, we retreat from it entirely.\nThat doesn't mean it's somebody else's problem. I'm very interested in contributing to a RISC-V fork or ARM fork (which has been increasingly on my mind). But it's unlikely to be a priority in 2020 at least.",
        "user": "UCUSW7WVD",
        "ts": "1593702765.033300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1593702975.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c9P+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Mu stack minimizes notations, but my plan is to have one more (called 'level 3' in "
                            },
                            {
                                "type": "link",
                                "url": "http://akkartik.name/post/mu-2019-1"
                            },
                            {
                                "type": "text",
                                "text": "). It's still very much vaporware. The hazy plan is some combination of shell ("
                            },
                            {
                                "type": "link",
                                "url": "http://www.oilshell.org/blog/2017/02/05.html"
                            },
                            {
                                "type": "text",
                                "text": "), awk ("
                            },
                            {
                                "type": "link",
                                "url": "http://www.oilshell.org/blog/2016/11/13.html"
                            },
                            {
                                "type": "text",
                                "text": ") and lisp ("
                            },
                            {
                                "type": "link",
                                "url": "http://paulgraham.com/bel.html"
                            },
                            {
                                "type": "text",
                                "text": "). But it'll stay interpreted so the implementation is easy to understand. To do anything that requires performance I expect people to write small pieces in the existing level 2 (with registers) that can then be glued together using level 3.\n\nI'm not attached to any particular syntax for level 3, I just don't want separate languages for commandline vs scripts. And I don't want the commandline to accrete features without a coherent design the way shells historically did. In the fullness of time I fully expect a MuPy fork, a MuSmalltalk fork, and so on. I'd love to contribute to them if someone else starts them.\n\nCPU architectures similarly will need their own fork. From "
                            },
                            {
                                "type": "link",
                                "url": "http://akkartik.name/akkartik-convivial-20200607.pdf"
                            },
                            {
                                "type": "text",
                                "text": " (section 2.1):\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Portability is explicitly a non-goal. Portability guarantees require extra effort to maintain, and can be particularly challenging for newcomers who may not be inclined to ensure their changes work on platforms they don't regularly run. Rather than attempt to fight a losing battle, we retreat from it entirely."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That doesn't mean it's somebody else's problem. I'm very interested in contributing to a RISC-V fork or ARM fork (which has been increasingly on my mind). But it's unlikely to be a priority in 2020 at least."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "1a539171-6725-48fe-ae2d-ff4dca3d190e",
        "type": "message",
        "text": "how much do you envision those forks sharing? or once forked they have to be kept in sync \"manually\"",
        "user": "UBN9AFS0N",
        "ts": "1593704076.033700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vIEN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "how much do you envision those forks sharing? or once forked they have to be kept in sync \"manually\""
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "1fa7a39c-4bfb-4757-ae88-0c3da8a02c0f",
        "type": "message",
        "text": "at some point in the abstractions (I know you don't like that word :P) do you think some upper layer can ignore which of the forks is below?",
        "user": "UBN9AFS0N",
        "ts": "1593704110.033900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1593704125.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hs=sd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "at some point in the abstractions (I know you don't like that word :P) do you think some upper layer can ignore which of the forks is below?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "cef6a19a-e396-4ff4-84a2-f08c005612d0",
        "type": "message",
        "text": "I hope we can come up with tools to reduce/automate the manual burden of merging, particularly if forks have good tests. But I don't plan to mandate some 'standard' that all forks have to follow below some level. I think that gets us to the same situation as today, with creeping complexity. Anybody can do what they want within their fork, and the goal is to make it easy for forks to stay internally consistent and comprehensible. Going between forks is important but secondary.",
        "user": "UCUSW7WVD",
        "ts": "1593704524.034200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BC/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I hope we can come up with tools to reduce/automate the manual burden of merging, particularly if forks have good tests. But I don't plan to mandate some 'standard' that all forks have to follow below some level. I think that gets us to the same situation as today, with creeping complexity. Anybody can do what they want within their fork, and the goal is to make it easy for forks to stay internally consistent and comprehensible. Going between forks is important but secondary."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "37475713-a694-4f03-ae23-796b32fdf8fc",
        "type": "message",
        "text": "I'm also looking forward to seeing the 3D. I've already got 3D animated graphics, and I'm interested in ways to make the programming interface more visual (right now programs are plain text). Integrating 2D and 3D in the same UI is something I'm thinking about.",
        "user": "UJN1TAYEQ",
        "ts": "1593704928.034500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hteX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm also looking forward to seeing the 3D. I've already got 3D animated graphics, and I'm interested in ways to make the programming interface more visual (right now programs are plain text). Integrating 2D and 3D in the same UI is something I'm thinking about."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "b7a99d4f-0079-47bd-b713-250cb7ce3083",
        "type": "message",
        "text": "My plan is to have the programming model be 2D, but embedded in a 3D space. This allows for a few things I think I'll like, such as:\n\u2022 Depth (with DOF/volumetrics to limit visual noise/clutter) separates different working spaces akin to tabs in a text editor. Switch spaces by moving back and forth through Z. I don't plan for this to be truly spatial \u2014\u00a0rather, spaces can come and go as needed.\n\u2022 Splines can be used to show connections between spaces separated in Z. Splines, like spaces, will come and go as needed. My goal is that, even if points can be \"teleported\" or \"jumped\" without wires, there should be a way to visualize the movement using a transient wire. Nelson's \"show connections\" is a Hest doctrine.",
        "user": "UC2A2ARPT",
        "ts": "1593705718.034700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3E2h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My plan is to have the programming model be 2D, but embedded in a 3D space. This allows for a few things I think I'll like, such as:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Depth (with DOF/volumetrics to limit visual noise/clutter) separates different working spaces akin to tabs in a text editor. Switch spaces by moving back and forth through Z. I don't plan for this to be truly spatial \u2014\u00a0rather, spaces can come and go as needed."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Splines can be used to show connections between spaces separated in Z. Splines, like spaces, will come and go as needed. My goal is that, even if points can be \"teleported\" or \"jumped\" without wires, there should be a way to visualize the movement using a transient wire. Nelson's \"show connections\" is a Hest doctrine."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "13e4f7bb-c485-40e1-8a83-85c9da006d60",
        "type": "message",
        "text": "Jeez, going super deep! I have a similar 2D /3D model in my project. One thing the watch out for is aligning 3D objects to a 2D coordinate space - Perspective cams can really make the alignment difficult to see, especially if the cam can't rotate around object and can only pan/zoom. I've stuck with ortho because of this. Looking forward to seeing what you build!",
        "user": "ULK0Z4MPV",
        "ts": "1593707484.035100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vrhx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Jeez, going super deep! I have a similar 2D /3D model in my project. One thing the watch out for is aligning 3D objects to a 2D coordinate space - Perspective cams can really make the alignment difficult to see, especially if the cam can't rotate around object and can only pan/zoom. I've stuck with ortho because of this. Looking forward to seeing what you build!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "5b686306-df6e-4191-b2ef-c8fb9569b024",
        "type": "message",
        "text": "The point of the project is to teach people knowledge from the 'ground up' right?  I guess adding abstractions moves further away from that goal?  Nice video, as always :slightly_smiling_face:",
        "user": "UUQ2EQW21",
        "ts": "1593712110.035400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rpTD5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The point of the project is to teach people knowledge from the 'ground up' right?  I guess adding abstractions moves further away from that goal?  Nice video, as always "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "50ad91c2-bb50-454f-8e26-0f382ca5b04a",
        "type": "message",
        "text": "This evokes the most excellent research question, \"What does productive programming look like in VR?\" :smile:",
        "user": "U01661S9F34",
        "ts": "1593714642.035800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5+JgU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This evokes the most excellent research question, \"What does productive programming look like in VR?\" "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "436178eb-0e25-4d3c-8aa8-9922d5678933",
        "type": "message",
        "text": "<@ULK0Z4MPV> \u2014\u00a0Great advice. On the one hand, I trust my instincts here, because I have a background in 3d animation. On the other hand, that means I've had more practice comprehending 3d spaces than most people. So this idea will either be something I can strike a good balance on, or something I need to toss out and take a different direction. One way to find out :)",
        "user": "UC2A2ARPT",
        "ts": "1593716104.036100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/tu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULK0Z4MPV"
                            },
                            {
                                "type": "text",
                                "text": " \u2014\u00a0Great advice. On the one hand, I trust my instincts here, because I have a background in 3d animation. On the other hand, that means I've had more practice comprehending 3d spaces than most people. So this idea will either be something I can strike a good balance on, or something I need to toss out and take a different direction. One way to find out :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "muscle",
                "users": [
                    "ULK0Z4MPV"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8b5c43f7-4fec-488e-bfae-77fcc7d0c6cf",
        "type": "message",
        "text": "<@U01661S9F34> \u2014 For my money, it certainly doesn't look like all the VR coding environments I've seen which just.. put your text code in a floating rectangle. I'd think it looks more like <@UULA9D1GT>'s <https://www.graycrawford.com|work>.",
        "user": "UC2A2ARPT",
        "ts": "1593716210.036300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1593716216.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ewV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01661S9F34"
                            },
                            {
                                "type": "text",
                                "text": " \u2014 For my money, it certainly doesn't look like all the VR coding environments I've seen which just.. put your text code in a floating rectangle. I'd think it looks more like "
                            },
                            {
                                "type": "user",
                                "user_id": "UULA9D1GT"
                            },
                            {
                                "type": "text",
                                "text": "'s "
                            },
                            {
                                "type": "link",
                                "url": "https://www.graycrawford.com",
                                "text": "work"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U01661S9F34"
                ],
                "count": 1
            },
            {
                "name": "heart_eyes",
                "users": [
                    "ULK0Z4MPV"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3f68614c-0c84-42c5-b80e-151a1b2e63c8",
        "type": "message",
        "text": "Also reminds me of the Zoomable GUI stuff: <https://ieeexplore.ieee.org/document/1316870>\n<https://blog.codinghorror.com/zoomable-interfaces/>",
        "user": "U01661S9F34",
        "ts": "1593716602.037000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01661S9F34",
            "ts": "1593717019.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Lo8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also reminds me of the Zoomable GUI stuff: "
                            },
                            {
                                "type": "link",
                                "url": "https://ieeexplore.ieee.org/document/1316870"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://blog.codinghorror.com/zoomable-interfaces/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "4ad085c8-4c9e-45a2-bb5d-a4dc3b02ec11",
        "type": "message",
        "text": "Yes! I'm building Hest initially just for my teammates, who make these zoomable interactive industrial <https://www.lunchboxsessions.com/materials/deere-hitachi-excavators-shovels/hitachi-john-deere-main-pump-regulator-simulation|simulations>. So the design of Hest is, in many ways, an outgrowth of our design work on these simulations.",
        "user": "UC2A2ARPT",
        "ts": "1593717297.037600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1593717301.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4tpZ=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes! I'm building Hest initially just for my teammates, who make these zoomable interactive industrial "
                            },
                            {
                                "type": "link",
                                "url": "https://www.lunchboxsessions.com/materials/deere-hitachi-excavators-shovels/hitachi-john-deere-main-pump-regulator-simulation",
                                "text": "simulations"
                            },
                            {
                                "type": "text",
                                "text": ". So the design of Hest is, in many ways, an outgrowth of our design work on these simulations."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U01661S9F34"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "4024ac92-ce6c-42bb-a14a-3daf81916f0e",
        "type": "message",
        "text": "Next step, a re-implementation of ncurses :stuck_out_tongue:\n\nI find your choice to stay with hex and the choice to maintain the numerical op codes instead of mnemonics very interesting. I understand why you made those decisions, but it does seem intuitively \"weird\" to me.\n\nIs it just because it's foreign to me and different from the status quo, or do those choices fundamentally make the language more or less clear in some way?\n\nYou already make a distinction between SubX with syntax sugar and SubX without syntax sugar. Is it worth it to add another layer of syntax sugar for translating bases (or translating mnemonics)?\n\nI've been thinking about your mnemonics debate. IIUC, You are worried about ambiguity, but if it's a \"separate pass\" it could be easily user modifiable, allowing the user to choose names that are less ambiguous to them. You could have \"syntax skins\".\n\nMore layers of syntax sugar arguably goes against your principle, \"It uses as few notations (languages, syntaxes, intermediate representations) as possible.\"\nBut it might help with the principle of \"It focuses on encoding intention\". Or at least encoding understanding. I'm not sure. I very easily fall into the trap of assuming \"more productive\" is equivalent to \"better understanding\".",
        "user": "U01661S9F34",
        "ts": "1593717429.038000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01661S9F34",
            "ts": "1593718088.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xlS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Next step, a re-implementation of ncurses "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI find your choice to stay with hex and the choice to maintain the numerical op codes instead of mnemonics very interesting. I understand why you made those decisions, but it does seem intuitively \"weird\" to me.\n\nIs it just because it's foreign to me and different from the status quo, or do those choices fundamentally make the language more or less clear in some way?\n\nYou already make a distinction between SubX with syntax sugar and SubX without syntax sugar. Is it worth it to add another layer of syntax sugar for translating bases (or translating mnemonics)?\n\nI've been thinking about your mnemonics debate. IIUC, You are worried about ambiguity, but if it's a \"separate pass\" it could be easily user modifiable, allowing the user to choose names that are less ambiguous to them. You could have \"syntax skins\".\n\nMore layers of syntax sugar arguably goes against your principle, \"It uses as few notations (languages, syntaxes, intermediate representations) as possible.\"\nBut it might help with the principle of \"It focuses on encoding intention\". Or at least encoding understanding. I'm not sure. I very easily fall into the trap of assuming \"more productive\" is equivalent to \"better understanding\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "30530261-6FB1-4D02-BA3A-A5A4BB7B47C3",
        "type": "message",
        "text": "on the off chance you haven\u2019t checked it out, 3blue1brown has a great series on linear algebra that i\u2019ve been going through: <https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab|https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab>",
        "user": "UHWC9PXBL",
        "ts": "1593722957.039700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "title": "Essence of linear algebra",
                "title_link": "https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab",
                "text": "A geometric understanding of matrices, determinants, eigen-stuffs and more.",
                "fallback": "YouTube: Essence of linear algebra",
                "thumb_url": "https://i9.ytimg.com/s_p/PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab/landscape_mqdefault.jpg?sqp=CMyO-fcFir7X7AMGCOqwiNsF&rs=AOn4CLDaGFwiS2ovyyPlVzAtROoqME4t7g&v=5b62186a",
                "from_url": "https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab",
                "thumb_width": 320,
                "thumb_height": 180,
                "service_icon": "https://s.ytimg.com/yts/img/favicon-vfl8qSV2F.ico",
                "id": 1,
                "original_url": "https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3ca",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "on the off chance you haven\u2019t checked it out, 3blue1brown has a great series on linear algebra that i\u2019ve been going through: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab",
                                "text": "https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UAVCC2X70"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "4AC256F4-00A7-4295-8D1A-F7F56235AED1",
        "type": "message",
        "text": "in the middle of it i realized that i could probably de-abstract a lot of it into examples using pictures of dogs... so that\u2019s one of the newer projects i\u2019m working on",
        "user": "UHWC9PXBL",
        "ts": "1593723001.041300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aGIu1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in the middle of it i realized that i could probably de-abstract a lot of it into examples using pictures of dogs... so that\u2019s one of the newer projects i\u2019m working on"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "370B0D44-E3F6-459A-AAFB-0FC68A6668E4",
        "type": "message",
        "text": "Grant's video on the determinant was quite helpful to me.",
        "user": "UC2A2ARPT",
        "ts": "1593723514.042400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qGga",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Grant's video on the determinant was quite helpful to me."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593667067.031300",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "0cc063e3-5b27-4f03-bcdb-23ed3649f019",
        "type": "message",
        "text": "Funny story on ncurses: I started out with a Lisp prototype of Mu back in 2015 that depended on a wrapper around ncurses. Since then I've gradually moved down the stack to:\n* a C program calling ncurses\n* a C program calling termbox, which is a simpler replacement for ncurses\n* forking termbox to rip out stuff I didn't use, gradually understanding its internals, still sending patches upstream (<http://arclanguage.org/item?id=20221>)\n* dropping my fork of termbox and making syscalls directly. What was interesting here was realizing how few syscalls I need. ncurses actually doesn't do much for many features we associate with it, just prints bytes to stdout.\n\nBottomline: ncurses is quite old, and a lot of the stuff it does was valuable in a world where everyone had thin terminals and very slow internet connections to their servers. It manages an in-memory copy of the screen just so it can compute the minimum it needs to change and send only those bytes over the wire to the server. But for most of us it now runs locally and there's nothing to send. It's all complexity we pay for but don't need. Another source of complexity is support for a huge database of ancient terminal types, none of which anyone uses anymore.\n\nSo check out <http://akkartik.github.io/mu/html/103screen.subx.html>. It's been quite a journey to boil ncurses down to ~300 static instructions of machine code. And there's exactly one `ioctl()` in there, see if you can spot what it's needed for.",
        "user": "UCUSW7WVD",
        "ts": "1593724898.042600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wgnaf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Funny story on ncurses: I started out with a Lisp prototype of Mu back in 2015 that depended on a wrapper around ncurses. Since then I've gradually moved down the stack to:\n* a C program calling ncurses\n* a C program calling termbox, which is a simpler replacement for ncurses\n* forking termbox to rip out stuff I didn't use, gradually understanding its internals, still sending patches upstream ("
                            },
                            {
                                "type": "link",
                                "url": "http://arclanguage.org/item?id=20221"
                            },
                            {
                                "type": "text",
                                "text": ")\n* dropping my fork of termbox and making syscalls directly. What was interesting here was realizing how few syscalls I need. ncurses actually doesn't do much for many features we associate with it, just prints bytes to stdout.\n\nBottomline: ncurses is quite old, and a lot of the stuff it does was valuable in a world where everyone had thin terminals and very slow internet connections to their servers. It manages an in-memory copy of the screen just so it can compute the minimum it needs to change and send only those bytes over the wire to the server. But for most of us it now runs locally and there's nothing to send. It's all complexity we pay for but don't need. Another source of complexity is support for a huge database of ancient terminal types, none of which anyone uses anymore.\n\nSo check out "
                            },
                            {
                                "type": "link",
                                "url": "http://akkartik.github.io/mu/html/103screen.subx.html"
                            },
                            {
                                "type": "text",
                                "text": ". It's been quite a journey to boil ncurses down to ~300 static instructions of machine code. And there's exactly one "
                            },
                            {
                                "type": "text",
                                "text": "ioctl()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in there, see if you can spot what it's needed for."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7ec448b6-0c57-4e11-b02c-279a576088f2",
        "type": "message",
        "text": "<@U01661S9F34> \"Mnemonics debate\" sounds like you've been reading more deeply here than most people I talk to. Can you point me at any links to stuff you've read on my site or repo, just so I can respond at the best level for you? Or let me know if you're just going by the paper, and I'll respond.",
        "user": "UCUSW7WVD",
        "ts": "1593725262.042900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1593725291.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cUz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01661S9F34"
                            },
                            {
                                "type": "text",
                                "text": " \"Mnemonics debate\" sounds like you've been reading more deeply here than most people I talk to. Can you point me at any links to stuff you've read on my site or repo, just so I can respond at the best level for you? Or let me know if you're just going by the paper, and I'll respond."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD"
    }
]