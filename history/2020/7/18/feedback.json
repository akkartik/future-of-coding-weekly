[
    {
        "client_msg_id": "706a71d2-e959-4182-a660-b63e935fb3ad",
        "type": "message",
        "text": "This week in the Cambria project we're sharing the state of our lens language which is inspired by Pierce's work at UPenn but intended for (eventual) production usage: <https://inkandswitch.github.io/cambria/weekly-updates/week-5-6/>",
        "user": "UFXFB1RK8",
        "ts": "1595031472.394700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Cambria, Weeks Five and Six: Nesting Instinct",
                "title_link": "https://inkandswitch.github.io/cambria/weekly-updates/week-5-6/",
                "text": "The last two weeks have been incredibly busy. We\u2019ve spent a lot of time getting our foundations into better shape, so let\u2019s dive right into it. (If you feel like watching instead of reading, skip ahead to the video demo.) A lens for every purpose Conceptually, what we\u2019re working on is connecting different data structures together while supporting bi-directional conversions. The simplest case to think about is renaming a property.",
                "fallback": "Cambria, Weeks Five and Six: Nesting Instinct",
                "ts": 1595012758,
                "from_url": "https://inkandswitch.github.io/cambria/weekly-updates/week-5-6/",
                "service_name": "inkandswitch.github.io",
                "id": 1,
                "original_url": "https://inkandswitch.github.io/cambria/weekly-updates/week-5-6/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=4Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This week in the Cambria project we're sharing the state of our lens language which is inspired by Pierce's work at UPenn but intended for (eventual) production usage: "
                            },
                            {
                                "type": "link",
                                "url": "https://inkandswitch.github.io/cambria/weekly-updates/week-5-6/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595031472.394700",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1595797141.422800",
        "reply_users": [
            "UJ6LDMMN0",
            "UCUSW7WVD"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "UMWF81HTP",
                    "UJ6LDMMN0"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "5502b704-7630-4a84-b6f5-6d663d1249c9",
        "type": "message",
        "text": "This is awesome, and exactly the kind of thing I\u2019m hoping to do in my custom editor.  The way it currently works for me is that I can reserve pixels above and below a current text line; and then render custom graphics in that space.  But your image inspires me to do inline things too; I had previously thought about a custom comment marker that gets replaced.  Like /* SlideFloat */",
        "user": "UUQ2EQW21",
        "ts": "1595060244.395100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UUQ2EQW21",
            "ts": "1595060268.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eIX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is awesome, and exactly the kind of thing I\u2019m hoping to do in my custom editor.  The way it currently works for me is that I can reserve pixels above and below a current text line; and then render custom graphics in that space.  But your image inspires me to do inline things too; I had previously thought about a custom comment marker that gets replaced.  Like /* SlideFloat */"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594810935.386500",
        "parent_user_id": "UNGNT3BKR"
    }
]