[
    {
        "type": "message",
        "text": "I've been working on editor integration for the alv livecoding language, and finally have something worth showing. Alv scripts being a bunch of stateful pieces, *seeing* that state feels like a gamechanger to me, even more than I originally anticipated. I feel like this single demo clip might now show what alv is about better than my attempts at communicating it verbally or textually; maybe those who have followed along with my (few) videos in <#C0120A3L30R> or the other posts can confirm or deny that?\n\n<https://twitter.com/S0lll0s/status/1283349999213051904>",
        "user": "UNGNT3BKR",
        "ts": "1594810935.386500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/S0lll0s|@S0lll0s>: #alv + <https://twitter.com/AtomEditor|@AtomEditor> = :black_heart:\n\nNow with toggle-able widgets for various kinds of expressions :)\n\n<https://alv.s-ol.nu> <https://pbs.twimg.com/ext_tw_video_thumb/1283349564695683072/pu/img/M3vv7EWbuI_WyjAK.jpg>",
                "ts": 1594809457,
                "author_name": "s-ol",
                "author_link": "https://twitter.com/S0lll0s/status/1283349999213051904",
                "author_icon": "https://pbs.twimg.com/profile_images/794999695676440576/bdvGoDKB_normal.jpg",
                "author_subname": "@S0lll0s",
                "text": "#alv + <https://twitter.com/AtomEditor|@AtomEditor> = :black_heart:\n\nNow with toggle-able widgets for various kinds of expressions :)\n\n<https://alv.s-ol.nu>",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/S0lll0s/status/1283349999213051904",
                "thumb_url": "https://pbs.twimg.com/ext_tw_video_thumb/1283349564695683072/pu/img/M3vv7EWbuI_WyjAK.jpg",
                "thumb_width": 726,
                "thumb_height": 718,
                "video_html_width": 726,
                "video_html_height": 718,
                "video_html": "<video controls poster=\"https://pbs.twimg.com/ext_tw_video_thumb/1283349564695683072/pu/img/M3vv7EWbuI_WyjAK.jpg\" width=\"726\" height=\"718\"><source type=\"video/mp4\" src=\"https://video.twimg.com/ext_tw_video/1283349564695683072/pu/vid/726x718/RQXV_TnECVjv_6LZ.mp4?tag=10\"></video>",
                "id": 1,
                "original_url": "https://twitter.com/S0lll0s/status/1283349999213051904",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "thread_ts": "1594810935.386500",
        "reply_count": 27,
        "reply_users_count": 8,
        "latest_reply": "1595582405.402000",
        "reply_users": [
            "U013ZLJARC7",
            "UK3LH8CF5",
            "UNGNT3BKR",
            "UE0H4170F",
            "UEQ6M68H0",
            "UHWC9PXBL",
            "UJ6LDMMN0",
            "UUQ2EQW21"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJN1TAYEQ",
                    "U01661S9F34",
                    "U85HCL7JP",
                    "U8A5MS6R1",
                    "UHWC9PXBL",
                    "UE0H4170F",
                    "UJ6LDMMN0"
                ],
                "count": 7
            },
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "UHDQ62M4P"
                ],
                "count": 2
            },
            {
                "name": "clap",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            },
            {
                "name": "sunglasses",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "cb8d7504-c500-441d-9e0f-2e6b538a2230",
        "type": "message",
        "text": "I always love to see livecoding bound to external devices! Here's a video showing something I made in 2012 to allow easy remote control of a Clojure visualization I had been commissioned to create for a dance performance in NYC.",
        "user": "U013ZLJARC7",
        "ts": "1594817042.386900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Dmx/H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I always love to see livecoding bound to external devices! Here's a video showing something I made in 2012 to allow easy remote control of a Clojure visualization I had been commissioned to create for a dance performance in NYC."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594810935.386500",
        "parent_user_id": "UNGNT3BKR"
    },
    {
        "type": "message",
        "text": "",
        "files": [
            {
                "id": "F017H8PGVCZ",
                "created": 1594817082,
                "timestamp": 1594817082,
                "name": "remote-tweaker.mp4",
                "title": "remote-tweaker.mp4",
                "mimetype": "video/mp4",
                "filetype": "mp4",
                "pretty_type": "MPEG 4 Video",
                "user": "U013ZLJARC7",
                "editable": false,
                "size": 447097,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F017H8PGVCZ/remote-tweaker.mp4",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F017H8PGVCZ/download/remote-tweaker.mp4",
                "thumb_video": "https://files.slack.com/files-tmb/T5TCAFTA9-F017H8PGVCZ-674f1cfcd9/remote-tweaker_thumb_video.jpeg",
                "permalink": "https://futureofcoding.slack.com/files/U013ZLJARC7/F017H8PGVCZ/remote-tweaker.mp4",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F017H8PGVCZ-f507479647",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "user": "U013ZLJARC7",
        "display_as_bot": false,
        "ts": "1594817086.387100",
        "thread_ts": "1594810935.386500",
        "parent_user_id": "UNGNT3BKR"
    },
    {
        "client_msg_id": "261ea81c-d4b4-4e5d-b452-11928ad28601",
        "type": "message",
        "text": "His is really cool <@UNGNT3BKR>. I love the visualizations. I didn't know that atom supported that sort of inline visualization. How is that implemented? Is it rendering arbitrary html or some custom font? I'd love to learn a bit more about how you made it work.",
        "user": "UK3LH8CF5",
        "ts": "1594832900.387700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hjPgT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "His is really cool "
                            },
                            {
                                "type": "user",
                                "user_id": "UNGNT3BKR"
                            },
                            {
                                "type": "text",
                                "text": ". I love the visualizations. I didn't know that atom supported that sort of inline visualization. How is that implemented? Is it rendering arbitrary html or some custom font? I'd love to learn a bit more about how you made it work."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594810935.386500",
        "parent_user_id": "UNGNT3BKR"
    },
    {
        "client_msg_id": "47a1f587-6d8f-4023-8959-02e81424c7b7",
        "type": "message",
        "text": "<@U013ZLJARC7> Nice! This supports MIDI CC and note input currently, and OSC whenever I get around to it. With the language features you can build things like step sequencers out of a MIDI Controller... maybe that will make it into the next 2min demo video :)",
        "user": "UNGNT3BKR",
        "ts": "1594835876.387900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Sli",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " Nice! This supports MIDI CC and note input currently, and OSC whenever I get around to it. With the language features you can build things like step sequencers out of a MIDI Controller... maybe that will make it into the next 2min demo video :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594810935.386500",
        "parent_user_id": "UNGNT3BKR",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "a9de91aa-c31f-4877-84ee-791e5503ee4c",
        "type": "message",
        "text": "<@UK3LH8CF5> yeah, it's a touchy subject ;)\nSince Atom renders as a html page, you can do all kinds of things (adding DOM, changing styling) etc, but the hard part is staying within what Atom can handle to make the editing experience still work. For example you could add or remove content with these featues, but then clicking at one location places the cursor at a different one and similar things, so you can break the editing experience really quickly.\n\nIf you pay close attention in the moments where I toggle the live view feature on and off, you can see that all my widgets take the place of the [tags] that every expression has. This way I can get rid of them and also reserve space for the widgets :wink:",
        "user": "UNGNT3BKR",
        "ts": "1594836075.388100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oN6W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " yeah, it's a touchy subject ;)\nSince Atom renders as a html page, you can do all kinds of things (adding DOM, changing styling) etc, but the hard part is staying within what Atom can handle to make the editing experience still work. For example you could add or remove content with these featues, but then clicking at one location places the cursor at a different one and similar things, so you can break the editing experience really quickly.\n\nIf you pay close attention in the moments where I toggle the live view feature on and off, you can see that all my widgets take the place of the [tags] that every expression has. This way I can get rid of them and also reserve space for the widgets "
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594810935.386500",
        "parent_user_id": "UNGNT3BKR"
    },
    {
        "client_msg_id": "10492da3-702e-444d-b7bd-82d7564be0cf",
        "type": "message",
        "text": "I'm using a tree-sitter parser in Atom to parse the source code into a simple AST, then I get the Ranges that different elements occupy and turn them into \"Marker\". The Markers can be \"decorated\"; I use three styles of decoration:\n- type: text with color: transparent to make the tags invisible\n- type: overlay with a custom DOM node to fill the custom widget into the newly created gap\n- type: highlight to highlight the background behind active elements in (switch) etc.",
        "user": "UNGNT3BKR",
        "ts": "1594836225.388300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kA=qb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm using a tree-sitter parser in Atom to parse the source code into a simple AST, then I get the Ranges that different elements occupy and turn them into \"Marker\". The Markers can be \"decorated\"; I use three styles of decoration:\n- type: text with color: transparent to make the tags invisible\n- type: overlay with a custom DOM node to fill the custom widget into the newly created gap\n- type: highlight to highlight the background behind active elements in (switch) etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594810935.386500",
        "parent_user_id": "UNGNT3BKR",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3778f86b-bfa8-4e3e-8ea2-769041ac6243",
        "type": "message",
        "text": "<@UK3LH8CF5> most of what you are interested in is in this file: <https://github.com/s-ol/language-alv/blob/editor-support/lib/highlights.js|https://github.com/s-ol/language-alv/blob/editor-support/lib/highlights.js>\n\nAtom also knows \"block decorations\" which are more or less the only way of adding larger and varying-size pieces of custom information to the editor. They can be placed only *between lines* of the editor and can show whatever they want at any height they choose there.",
        "user": "UNGNT3BKR",
        "ts": "1594836384.388500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "[s-ol/language-alv] lib/highlights.js",
                "text": "```\n'use babel';\n\nconst getChildOfType = (node, type) =&gt; {\n  const matches = node.children.filter(c =&gt; c.type == type);\n  if (matches.length &gt; 1)\n    throw new Error(`more than one ${type} child`);\n\n  return matches.length &gt; 0 ? matches[0] : null;\n}\n\nexport class NullWidget {\n  constructor(client, widgetNode) {\n    this.widgetNode = widgetNode;\n\n    this.element = document.createElement('div');\n    this.element.classList.add('alv--null');\n\n    this.widgetNode.appendChild(this.element);\n  }\n\n  update(info) {}\n\n  destroy() {\n    this.widgetNode.removeChild(this.element);\n  }\n}\n\n\nexport class EventWidget {\n  constructor(client, widgetNode) {\n    this.client = client;\n    this.widgetNode = widgetNode;\n\n    this.element = document.createElement('div');\n    this.element.classList.add('alv--event');\n\n    this.widgetNode.appendChild(this.element);\n  }\n\n  update(info) {\n    if (info.result.updated &gt;= this.client.lastTick) {\n      if (this.flashTimeout)\n        clearTimeout(this.flashTimeout);\n      \n      this.element.classList.add('active');\n      this.flashTimeout = setTimeout(() =&gt; {\n        this.element.classList.remove('active');\n        this.flashTimeout = null;\n      }, 200);\n    }\n  }\n\n  destroy() {\n    if (this.flashTimeout) {\n      clearTimeout(this.flashTimeout);\n      this.flashTimeout = null;\n    }\n    this.widgetNode.removeChild(this.element);\n  }\n}\n\nexport class BoolWidget {\n  constructor(client, widgetNode) {\n    this.widgetNode = widgetNode;\n\n    this.element = document.createElement('div');\n    this.element.classList.add('alv--bool');\n\n    this.widgetNode.appendChild(this.element);\n  }\n\n  update(info) {\n    if (info.result.value)\n      this.element.classList.add('active');\n    else\n      this.element.classList.remove('active');\n  }\n\n  destroy() {\n    this.widgetNode.removeChild(this.element);\n  }\n}\n\nexport class BarWidget {\n  constructor(client, widgetNode) {\n    this.widgetNode = widgetNode;\n\n    this.element = document.createElement('div');\n    this.inner = document.createElement('div');\n    this.element.appendChild(this.inner);\n    this.element.classList.add('alv--bar');\n\n    this.widgetNode.appendChild(this.element);\n  }\n\n  update(info) {\n    this.inner.style.width = `${info.vis.bar * 100}%`;\n  }\n\n  destroy() {\n    this.widgetNode.removeChild(this.element);\n  }\n}\n\nexport class ColorWidget {\n  constructor(client, widgetNode, info) {\n    this.widgetNode = widgetNode;\n\n    this.element = document.createElement('div');\n    this.element.classList.add('alv--color');\n    this.widgetNode.appendChild(this.element);\n    this.update(info);\n  }\n\n  update(info) {\n    let [r, g, b, a] = info.vis.rgb;\n\n    let color;\n    if (a == null)\n      a = 1;\n\n    color = `rgba(${r*256}, ${g*256}, ${b*256}, ${a})`;\n\n    this.element.style.backgroundColor = color;\n  }\n\n  destroy() {\n    this.widgetNode.removeChild(this.element);\n  }\n}\n\nexport class TagHighlight {\n  constructor(client, info, tagNode) {\n    this.client = client;\n    <http://this.info|this.info> = info;\n    this.tag = info.tag;\n    this.subhls = new Set();\n\n    const editor = this.client.editor;\n    this.mark = editor.markBufferRange(tagNode.range, { persistent: false, invalidate: 'inside' });\n\n    const element = document.createElement('a');\n    element.classList.add('alv--tag');\n    element.innerText = tagNode.text;\n    element.href = '#';\n    element.onclick = e =&gt; this.toggleWidget();\n\n    this.wrapper = document.createElement('div');\n    element.appendChild(this.wrapper);\n\n    this.element = element;\n\n    if (this.isEvt)\n      element.classList.add('evt');\n\n    this.deco = editor.decorateMarker(this.mark, {\n      type: 'overlay',\n      position: 'tail',\n      item: element,\n   });\n\n   this.cover = editor.decorateMarker(this.mark, {\n      type: 'text',\n      style: { color: 'transparent' },\n   });\n\n   this.noWidget = true;\n   this.toggleWidget();\n  }\n\n  toggleWidget() {\n    this.noWidget = !this.noWidget;\n\n    const WidgetClass = this.noWidget ? NullWidget : this.getWidgetClass();\n\n    if (this.widget)\n      this.widget.destroy();\n    this.widget = new WidgetClass(this.client, this.wrapper, <http://this.info|this.info>);\n  }\n\n  getWidgetClass() {\n    <http://console.info|console.info>(this.info.vis);\n    const vis = this.info.vis;\n    if (vis == null || vis.type == null)\n      return NullWidget;\n\n    switch (vis.type) {\n      case 'event': return EventWidget;\n      case 'bool': return BoolWidget;\n      case 'bar': return BarWidget;\n      case 'rgb': return ColorWidget;\n    }\n\n    return NullWidget;\n  }\n\n  update(info) {\n    return this.client\n      .sendTx({ type: 'info', tag: this.tag })\n      .then(info =&gt; {\n        if (this.widget)\n          this.widget.update(info);\n\n        for (var sub of this.subhls)\n          sub.update(info);\n      });\n  }\n\n  destroy() {\n    this.mark.destroy();\n\n    if (this.widget)\n      this.widget.destroy();\n\n    for (var sub of this.subhls)\n      sub.destroy();\n  }\n}\n\nexport class StepHighlight {\n  constructor(client, info, node) {\n    this.client = client;\n    this.tag = info.tag;\n\n    const editor = this.client.editor;\n    this.marks = [];\n    this.decos = [];\n\n    const children = node.namedChildren;\n    if (children[0].type === 'tag')\n      children.splice(0, 1);\n\n    for (var i = 2; i &lt; children.length; i++) {\n      const child = children[i];\n      const mark = editor.markBufferRange(child.range, { persistent: false });\n      const deco = editor.decorateMarker(mark, { type: 'highlight', class: 'alv switch' });\n      this.marks.push(mark);\n      this.decos.push(deco);\n\n      this.lastStep = -1;\n    }\n  }\n\n  update(info) {\n    const last = this.decos[this.lastStep];\n    if (last)\n      last.setProperties({ type: 'highlight', class: 'alv step' });\n\n    this.lastStep = info.vis.step;\n    const next = this.decos[this.lastStep];\n    if (next)\n      next.setProperties({ type: 'highlight', class: 'alv step active' });\n  }\n\n  destroy() {\n    for (var mark of this.marks)\n      mark.destroy();\n  }\n}\n\nexport const highlight = (client, node, outSet) =&gt; {\n  const tagNode = getChildOfType(node, 'tag');\n  if (!tagNode)\n    return Promise.resolve(null);\n\n  const tag = parseInt(tagNode.text.substr(1, tagNode.text.length-2));\n\n  return client\n    .sendTx({ type: 'info', tag })\n    .then(info =&gt; {\n      const main = new TagHighlight(client, info, tagNode);\n      if (info.vis &amp;&amp; info.vis.step)\n        main.subhls.add(new StepHighlight(client, info, node));\n\n      outSet.add(main);\n    });\n};\n\n```",
                "title": "lib/highlights.js",
                "footer": "<https://github.com/s-ol/language-alv|s-ol/language-alv>",
                "id": 1,
                "title_link": "https://github.com/s-ol/language-alv/blob/editor-support/lib/highlights.js",
                "footer_icon": "https://github.githubassets.com/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https://github.com/s-ol/language-alv/blob/editor-support/lib/highlights.js",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4fKD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " most of what you are interested in is in this file: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/s-ol/language-alv/blob/editor-support/lib/highlights.js",
                                "text": "https://github.com/s-ol/language-alv/blob/editor-support/lib/highlights.js"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAtom also knows \"block decorations\" which are more or less the only way of adding larger and varying-size pieces of custom information to the editor. They can be placed only "
                            },
                            {
                                "type": "text",
                                "text": "between lines",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of the editor and can show whatever they want at any height they choose there."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594810935.386500",
        "parent_user_id": "UNGNT3BKR"
    },
    {
        "client_msg_id": "42778633-8c81-4922-93ef-2c2e4a101783",
        "type": "message",
        "text": "That's super useful. Thanks!",
        "user": "UK3LH8CF5",
        "ts": "1594836495.388800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n3RWm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's super useful. Thanks!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594810935.386500",
        "parent_user_id": "UNGNT3BKR"
    },
    {
        "client_msg_id": "21369952-001b-47ed-843e-58bfb30b9f3d",
        "type": "message",
        "text": "this looks fantastic! can\u2019t remember if I\u2019ve sent this to you before, but I do similar stuff in a web-based live coding language: <https://gibber-cc.github.io/gibber/playground/>",
        "user": "UE0H4170F",
        "ts": "1594839569.389000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE0H4170F",
            "ts": "1594864834.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e3v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this looks fantastic! can\u2019t remember if I\u2019ve sent this to you before, but I do similar stuff in a web-based live coding language: "
                            },
                            {
                                "type": "link",
                                "url": "https://gibber-cc.github.io/gibber/playground/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594810935.386500",
        "parent_user_id": "UNGNT3BKR",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UNGNT3BKR"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8df3023a-1be6-4b38-8b17-b3cdbd29600f",
        "type": "message",
        "text": "and if you haven\u2019t looked at Ben Swift\u2019s work with Impromptu there seems like some parallels: <https://eprints.qut.edu.au/61525/13/liveannotations.pdf>",
        "user": "UE0H4170F",
        "ts": "1594839592.389200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GUFZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and if you haven\u2019t looked at Ben Swift\u2019s work with Impromptu there seems like some parallels: "
                            },
                            {
                                "type": "link",
                                "url": "https://eprints.qut.edu.au/61525/13/liveannotations.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594810935.386500",
        "parent_user_id": "UNGNT3BKR"
    },
    {
        "client_msg_id": "b79567ac-72af-4158-acf4-1e325fc897ed",
        "type": "message",
        "text": "What wonderful thing to inline the pulsations and speeds of the different oscillators. I think you will be better off writing your own editor. It just isn't that hard, and wrestling with Atom is probably consuming more hours than you realize. Atom was never designed for this level of animation. Look at how many features Atom has, and ask yourself, how many of those am i actually needing for editing the music code? Atom and other fancy editors spend a lot of time to be able to handle million line files, etc., none of which you need.",
        "user": "UEQ6M68H0",
        "ts": "1594846980.389900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1594847201.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5CKb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What wonderful thing to inline the pulsations and speeds of the different oscillators. I think you will be better off writing your own editor. It just isn't that hard, and wrestling with Atom is probably consuming more hours than you realize. Atom was never designed for this level of animation. Look at how many features Atom has, and ask yourself, how many of those am i actually needing for editing the music code? Atom and other fancy editors spend a lot of time to be able to handle million line files, etc., none of which you need."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594810935.386500",
        "parent_user_id": "UNGNT3BKR"
    }
]