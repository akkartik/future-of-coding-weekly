[
    {
        "client_msg_id": "6658ec08-b197-4d8e-be28-4d3799953be1",
        "type": "message",
        "text": "<@UL5AX4G2H> title 1 sounds like a title from pre 2018, and title 2 sounds like a title from post 2018 (for better or worse) :stuck_out_tongue: it's interesting that kind of phrasing totally developed out of clickbait marketing but seeing it in increasingly reputable news services now too...",
        "user": "U013KEPEJ2H",
        "ts": "1595541751.276200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oM7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UL5AX4G2H"
                            },
                            {
                                "type": "text",
                                "text": " title 1 sounds like a title from pre 2018, and title 2 sounds like a title from post 2018 (for better or worse) "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            },
                            {
                                "type": "text",
                                "text": " it's interesting that kind of phrasing totally developed out of clickbait marketing but seeing it in increasingly reputable news services now too..."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595528501.266600",
        "parent_user_id": "UL5AX4G2H"
    },
    {
        "client_msg_id": "e12f501b-acbe-4f6d-bd33-78e2ce727e80",
        "type": "message",
        "text": "People don\u2019t get Rx / eventStreams :stuck_out_tongue_winking_eye: &amp; FRP",
        "user": "UL3CJ7YKC",
        "ts": "1595548803.276700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1595548827.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rvE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "People don\u2019t get Rx / eventStreams "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue_winking_eye"
                            },
                            {
                                "type": "text",
                                "text": " & FRP"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591041589.315800",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "b2f3650b-db8c-443e-bdc8-2a0f603ea319",
        "type": "message",
        "text": "that's so 2018, devs can only collectively swoon over one thing at a time, now it's CRDTs",
        "user": "USH01JEDQ",
        "ts": "1595549112.277200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hm6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "that's so 2018, devs can only collectively swoon over one thing at a time, now it's CRDTs"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591041589.315800",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d16026e2-72c5-4d15-a9be-6eaf56e2b230",
        "type": "message",
        "text": "<@UCUSW7WVD> Hah, you are reading my mind! These are my top priorities as well!\n\nI\u2019d add that, which is remained unsolved to me in the past years, and maybe this is the main driver behind all of my research:\n*Be ready to change/delete any part of the code any time!*\n\nMixing it with your 2nd (controlling evo) and 4th (controlling deps) point:\n\n*avoid broken abstractions*\n *- AKA -* \n*don\u2019t write (or evolve to!) code which forces you to delete more (prod+test) code than neccesary (in case of new requirements)* \n*- AKA -* \n*eliminate God Objects (don\u2019t even let them birth!)*\n*-AKA -* \n*Minimal surface: don\u2019t make available any data in any given scope you don\u2019t use =&gt; if you do, you are creating a God object and you have to REIMPLEMENT the stuff after deleting the nighmare and all of its connections.*\n\nSure it is an obvious idea to do that, but hard/impossible(!!!) to do without the correct level of abstractions (I think anything \u201cbelow eventStreams\u201d).\n\nTo me it seems like we might need some level of redundancy to get there, but I\u2019d pay that price if I can make sure the freaking God object and spaghetti bs goes away\u2026\n\nThis is just a deep intuition at this time, but I\u2019ll update on that later.",
        "user": "UL3CJ7YKC",
        "ts": "1595550284.277800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1595550571.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0Wtn4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " Hah, you are reading my mind! These are my top priorities as well!\n\nI\u2019d add that, which is remained unsolved to me in the past years, and maybe this is the main driver behind all of my research:\n"
                            },
                            {
                                "type": "text",
                                "text": "Be ready to change/delete any part of the code any time!",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nMixing it with your 2nd (controlling evo) and 4th (controlling deps) point:\n\n"
                            },
                            {
                                "type": "text",
                                "text": "avoid broken abstractions",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": " - AKA - ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "don\u2019t write (or evolve to!) code which forces you to delete more (prod+test) code than neccesary (in case of new requirements) ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "- AKA - ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "eliminate God Objects (don\u2019t even let them birth!)",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "-AKA - ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Minimal surface: don\u2019t make available any data in any given scope you don\u2019t use => if you do, you are creating a God object and you have to REIMPLEMENT the stuff after deleting the nighmare and all of its connections.",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nSure it is an obvious idea to do that, but hard/impossible(!!!) to do without the correct level of abstractions (I think anything \u201cbelow eventStreams\u201d).\n\nTo me it seems like we might need some level of redundancy to get there, but I\u2019d pay that price if I can make sure the freaking God object and spaghetti bs goes away\u2026\n\nThis is just a deep intuition at this time, but I\u2019ll update on that later."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593722002.162200",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "fbf616f2-c155-4083-b7fc-379f2af4e3b1",
        "type": "message",
        "text": "It was CRDTs in 2010, too ;)\n\nOr maybe, like the hipster who burnt their mouth on the pizza, I was into CRDTs before they were cool.",
        "user": "UC2A2ARPT",
        "ts": "1595550375.278000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IJO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It was CRDTs in 2010, too ;)\n\nOr maybe, like the hipster who burnt their mouth on the pizza, I was into CRDTs before they were cool."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591041589.315800",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UL3CJ7YKC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e88c000f-00ea-4557-8920-f0d1f3d76cf6",
        "type": "message",
        "text": "Amazing thread. Been slow churning on this for years with nothing to show for it. Anyway, recently found this paper which may be of interest - tries to define a 'conceptual graph' that represents info of how the user sees it, without the storage representation details: <https://pdfs.semanticscholar.org/2ae6/ac8fc13710d9c086c0e5cb952eef52c9b3cd.pdf>",
        "user": "U8A5MS6R1",
        "ts": "1595551088.278600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YYav",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Amazing thread. Been slow churning on this for years with nothing to show for it. Anyway, recently found this paper which may be of interest - tries to define a 'conceptual graph' that represents info of how the user sees it, without the storage representation details: "
                            },
                            {
                                "type": "link",
                                "url": "https://pdfs.semanticscholar.org/2ae6/ac8fc13710d9c086c0e5cb952eef52c9b3cd.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "82873568-ac48-4d5c-a015-b9f030b12304",
        "type": "message",
        "text": "You probably were all about FRP in 2009 - so tell us about 2028 Ivan",
        "user": "USH01JEDQ",
        "ts": "1595551790.279000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "01D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You probably were all about FRP in 2009 - so tell us about 2028 Ivan"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591041589.315800",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "095bb152-ee71-4aff-9547-c1e408be64fd",
        "type": "message",
        "text": "<@UCGAK10LS> I\u2019ve been thinking about similar things for a while.\n\nWhat I see now is (obviously?) graphs are the only, truly extendable &amp; fractal like structures.\n\nFractal like: which also means the minimum we can do with the \u201cGraph Information\u201d on a the \u201csimplest level\u201d is also the maximum we can do with it on \u201chigher levels\u201d. With that in mind I feel like the direction to is to build \u201cViews\u201d on the top of the \u201cGraph Information\u201d - which Views themselves are going to be Graph based entities. Also, we can say these Views would act like filters to reduce the noise of \u201call information\u201d and deliver the proper context.\n\nSo after that, my answer is: just simple, pure Graphs, but a new question arises: how to build Views on them - even on multiple levels\u2026\n\nI just don\u2019t see ANY other idea which can\u2019t be translated to that approach. It seems to me it\u2019s the alpha and omega.\n\nIt\u2019s not accidental RDF node-edge-node triplets and stuff like that emerged and ontology is full of that.",
        "user": "UL3CJ7YKC",
        "ts": "1595552295.284400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1595552617.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4qIyT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " I\u2019ve been thinking about similar things for a while.\n\nWhat I see now is (obviously?) graphs are the only, truly extendable & fractal like structures.\n\nFractal like: which also means the minimum we can do with the \u201cGraph Information\u201d on a the \u201csimplest level\u201d is also the maximum we can do with it on \u201chigher levels\u201d. With that in mind I feel like the direction to is to build \u201cViews\u201d on the top of the \u201cGraph Information\u201d - which Views themselves are going to be Graph based entities. Also, we can say these Views would act like filters to reduce the noise of \u201call information\u201d and deliver the proper context.\n\nSo after that, my answer is: just simple, pure Graphs, but a new question arises: how to build Views on them - even on multiple levels\u2026\n\nI just don\u2019t see ANY other idea which can\u2019t be translated to that approach. It seems to me it\u2019s the alpha and omega.\n\nIt\u2019s not accidental RDF node-edge-node triplets and stuff like that emerged and ontology is full of that."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "A07402EC-9C92-43AC-B3F1-035B0ED76930",
        "type": "message",
        "text": "this thread is amazing. i\u2019ve been working on this since i started hoarding popular science magazines in middle school and wanted a way to organize them lmao. lately i\u2019ve become convinced that whatever structure you settle on is going to have to be expected to be in an \u201cincomplete\u201d state, and that there\u2019s some kind of dual relationship between data and computation that needs to be leveraged (thinking about issues like caches and garbage collection as a UX feature rather than an infrastructure bug). i\u2019m working on a really stupid version of this stuff in json and will be posting in <#CCL5VVBAN|feedback> and <#C0120A3L30R|two-minute-week>, and i would be delighted if any of the people in this thread ruthlessly criticize where i end up!",
        "user": "UHWC9PXBL",
        "ts": "1595552328.285500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1595564573.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DVX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this thread is amazing. i\u2019ve been working on this since i started hoarding popular science magazines in middle school and wanted a way to organize them lmao. lately i\u2019ve become convinced that whatever structure you settle on is going to have to be expected to be in an \u201cincomplete\u201d state, and that there\u2019s some kind of dual relationship between data and computation that needs to be leveraged (thinking about issues like caches and garbage collection as a UX feature rather than an infrastructure bug). i\u2019m working on a really stupid version of this stuff in json and will be posting in "
                            },
                            {
                                "type": "channel",
                                "channel_id": "CCL5VVBAN"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C0120A3L30R"
                            },
                            {
                                "type": "text",
                                "text": ", and i would be delighted if any of the people in this thread ruthlessly criticize where i end up!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "UA14TGLTC",
                    "ULK0Z4MPV"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "U014WA16VNJ"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "12f8fcc1-4211-4bf5-ac78-f67293854752",
        "type": "message",
        "text": "Still, I think this is a real issue preventing progress. Sorry. :&lt; :smile:",
        "user": "UL3CJ7YKC",
        "ts": "1595553102.286100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mkh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Still, I think this is a real issue preventing progress. Sorry. :< "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591041589.315800",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "6b30e8fb-d9ca-4136-954d-b774304d0d2a",
        "type": "message",
        "text": "When <@UEBG0NPDK> says \"6th normal form,\" it more or less means \"all hash tables\" with array keys as needed and does a great job of capturing the dependencies of the form for every ___ and ___, you can have a ___.  Correct me if I'm way off base.",
        "user": "UA14TGLTC",
        "ts": "1595554174.286700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C/0GH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " says \"6th normal form,\" it more or less means \"all hash tables\" with array keys as needed and does a great job of capturing the dependencies of the form for every ___ and ___, you can have a ___.  Correct me if I'm way off base."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "pray",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e2e6bd92-dbb3-498b-85e7-7682471763ae",
        "type": "message",
        "text": "Yep! You can also think of it as triples where the entity can be a composite key. This gets you to true atomic units of data, reducing any further would cause information to be lost. The important thing that this captures is properties on hyperedges - e.g. something like marriage where the key would be two people and maybe the value would be the date or number of people in attendance.",
        "user": "UEBG0NPDK",
        "ts": "1595554975.287000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tPtd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yep! You can also think of it as triples where the entity can be a composite key. This gets you to true atomic units of data, reducing any further would cause information to be lost. The important thing that this captures is properties on hyperedges - e.g. something like marriage where the key would be two people and maybe the value would be the date or number of people in attendance."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "pray",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7b03f2db-fd18-4db3-a305-98e0541cfefe",
        "type": "message",
        "text": "I think my \"nested labelled sets\" conception is just a particular manifestation of a 6NF DB, with the only difference being it has a notion of *scope* and *modularity* that allows you to easily shuffle chunks of data around. <@UEBG0NPDK> this is like your scope-limiting ~bag~ \"database\" notion in Eve (I re-checked the name), except you can nest them inside each other.",
        "user": "UCGAK10LS",
        "ts": "1595555333.287200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1595555453.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o0awc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think my \"nested labelled sets\" conception is just a particular manifestation of a 6NF DB, with the only difference being it has a notion of "
                            },
                            {
                                "type": "text",
                                "text": "scope",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "modularity",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that allows you to easily shuffle chunks of data around. "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " this is like your scope-limiting "
                            },
                            {
                                "type": "text",
                                "text": "bag",
                                "style": {
                                    "strike": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " \"database\" notion in Eve (I re-checked the name), except you can nest them inside each other."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "4ee52e60-0d0b-4344-b147-700e5c36a103",
        "type": "message",
        "text": "yeah, we ended up calling them databases. We regretted adding them and removed them right after 0.2. The problem was that it became very confusing to figure out where things were and should be. Namespaced tags/attributes ended up working much better for us.",
        "user": "UEBG0NPDK",
        "ts": "1595555567.287500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1595555618.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lxP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah, we ended up calling them databases. We regretted adding them and removed them right after 0.2. The problem was that it became very confusing to figure out where things were and should be. Namespaced tags/attributes ended up working much better for us."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "12ddd109-a0f0-495d-923a-804d244fc93e",
        "type": "message",
        "text": "You have to have a boundary at some point though right? If your PL supports distributed apps you don't want to accidentally query some fact from a server in some Japanese village somewhere. At what point do you hit a \"bucket\" of data?",
        "user": "UCGAK10LS",
        "ts": "1595555692.287800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gJmQI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You have to have a boundary at some point though right? If your PL supports distributed apps you don't want to accidentally query some fact from a server in some Japanese village somewhere. At what point do you hit a \"bucket\" of data?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "7d1a4be6-1d2d-4850-b812-dbab5eed3a9b",
        "type": "message",
        "text": "you would bring those in as namespaced tags, so #foo vs #japanese-village/foo",
        "user": "UEBG0NPDK",
        "ts": "1595555816.288000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kvS2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you would bring those in as namespaced tags, so #foo vs #japanese-village/foo"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "635a5e85-7416-479e-9d6e-46c30acccd18",
        "type": "message",
        "text": "And every query must draw facts from a specific namespace?",
        "user": "UCGAK10LS",
        "ts": "1595555851.288200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "93pc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And every query must draw facts from a specific namespace?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "6a8346a8-2179-4b15-9987-09b81c631c13",
        "type": "message",
        "text": "you can arbitrarily union them together within a query, you can also bind them to some common tag and just query that tag",
        "user": "UEBG0NPDK",
        "ts": "1595555899.288400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3fuh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you can arbitrarily union them together within a query, you can also bind them to some common tag and just query that tag"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "470b0159-8d73-4d8c-9181-b3fc851caca2",
        "type": "message",
        "text": "Isn't that the same as an Eve 0.2 \"database\" if you add the ability to make the database a variable? That would emulate the latter capability you mentioned anyway.",
        "user": "UCGAK10LS",
        "ts": "1595556015.288600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1595556135.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PntY0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Isn't that the same as an Eve 0.2 \"database\" if you add the ability to make the database a variable? That would emulate the latter capability you mentioned anyway."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "0c2e6904-cbf7-4df9-bed3-ac43f1e8f19b",
        "type": "message",
        "text": "I guess I'm trying to understand this problem you mentioned:\n&gt; it became very confusing to figure out where things were and should be\nI don't quite understand how this could be a serious problem. I'm no fan of hierarchical organisation in file systems, but a _little bit_ of hierarchy is good for modularity, which you really need in any distributed system.",
        "user": "UCGAK10LS",
        "ts": "1595556408.288900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p++",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I guess I'm trying to understand this problem you mentioned:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it became very confusing to figure out where things were and should be"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't quite understand how this could be a serious problem. I'm no fan of hierarchical organisation in file systems, but a "
                            },
                            {
                                "type": "text",
                                "text": "little bit",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of hierarchy is good for modularity, which you really need in any distributed system."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "d4a9ffd9-6220-4e5f-8da5-a0003473b167",
        "type": "message",
        "text": "We should probably split this off so as to not derail the conversation further. The difference is largely in how people approach the two mechanisms. One is just a more specific name, the other is an actual place. We, ourselves, pretty consistently made mistakes about which place to query and write into, but we didn't experience the same problems with more specific names. Part of the difference is also how you selected a database in Eve (declaring it at the search/bind level) which made unions pretty awkward. That one's not at all fundamental and you could've chosen something else, but I suspect it would look a lot like namespaced tags if you did.",
        "user": "UEBG0NPDK",
        "ts": "1595556418.289100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0kO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We should probably split this off so as to not derail the conversation further. The difference is largely in how people approach the two mechanisms. One is just a more specific name, the other is an actual place. We, ourselves, pretty consistently made mistakes about which place to query and write into, but we didn't experience the same problems with more specific names. Part of the difference is also how you selected a database in Eve (declaring it at the search/bind level) which made unions pretty awkward. That one's not at all fundamental and you could've chosen something else, but I suspect it would look a lot like namespaced tags if you did."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e16ea5bb-c3f7-4fda-b2f9-eab1e0b0cb95",
        "type": "message",
        "text": "It's easy to forget the database name, or forget to change it when you copy a block over, for example. And the bugs that result from that are pretty hard to understand without some nicer tooling.",
        "user": "UEBG0NPDK",
        "ts": "1595556502.289300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EZsm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's easy to forget the database name, or forget to change it when you copy a block over, for example. And the bugs that result from that are pretty hard to understand without some nicer tooling."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "0f2bb814-5471-4226-87f7-e20c5ab22632",
        "type": "message",
        "text": "Question: Can *modularity* (drawing sensible \"boundaries\" between units of code and/or data) be achieved without *hierarchy*? Discuss. :slightly_smiling_face:",
        "user": "UCGAK10LS",
        "ts": "1595556744.290800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1595571086.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NWqi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Question: Can "
                            },
                            {
                                "type": "text",
                                "text": "modularity",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (drawing sensible \"boundaries\" between units of code and/or data) be achieved without "
                            },
                            {
                                "type": "text",
                                "text": "hierarchy",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "? Discuss. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595556744.290800",
        "reply_count": 21,
        "reply_users_count": 7,
        "latest_reply": "1595641955.007500",
        "reply_users": [
            "UAVCC2X70",
            "UCGAK10LS",
            "UCUSW7WVD",
            "UDQBTJ211",
            "U5STGTB3J",
            "UHDQ62M4P",
            "UKP3B2J5D"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "a23a22d9-052e-4032-b438-8942a858ff1c",
        "type": "message",
        "text": "Modularity (separating things into separate \"wholes\") is not necessarily related to there being any hierarchy. I think a lot of hierarchy comes into trying to shove like things into a \"common base\" and then subclass. But on that matter I'll just say: composition over inheritance, interfaces over subclasses, labels over a tree. \"A city is not a tree\". Some things fit multiple categories, or can play multiple roles, and that does not slice cleanly into exclusive buckets",
        "user": "UAVCC2X70",
        "ts": "1595558045.291600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dTJd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Modularity (separating things into separate \"wholes\") is not necessarily related to there being any hierarchy. I think a lot of hierarchy comes into trying to shove like things into a \"common base\" and then subclass. But on that matter I'll just say: composition over inheritance, interfaces over subclasses, labels over a tree. \"A city is not a tree\". Some things fit multiple categories, or can play multiple roles, and that does not slice cleanly into exclusive buckets"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595556744.290800",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "UKP3B2J5D",
                    "U013ZLJARC7",
                    "U014WA16VNJ",
                    "UJ6LDMMN0"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "f4009be2-7315-4f03-9a9e-8d08dfcde4b9",
        "type": "message",
        "text": "Traditional approaches to modularity certainly induce hierarchy. In a typical program you have \"modules\" containing \"functions\" containing nested functions, loops, or other kinds of scopes. And that has nothing to do with OOP!",
        "user": "UCGAK10LS",
        "ts": "1595558311.291800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nj5uN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Traditional approaches to modularity certainly induce hierarchy. In a typical program you have \"modules\" containing \"functions\" containing nested functions, loops, or other kinds of scopes. And that has nothing to do with OOP!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595556744.290800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "0f002f9c-644d-4089-bcd5-4fff3b794ff7",
        "type": "message",
        "text": "I'm discovering how complicated a question this is. I'm not even ready to provide a response myself yet! I'll respond a bit later :slightly_smiling_face:",
        "user": "UCGAK10LS",
        "ts": "1595558419.292000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K0j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm discovering how complicated a question this is. I'm not even ready to provide a response myself yet! I'll respond a bit later "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595556744.290800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "98d1fc38-5976-4f57-838f-ad1939dfb19d",
        "type": "message",
        "text": "Anyway, breaking things into parts does NOT mean you have modularity -- less likely if there's a hierarchy involved.\n\nModularity is about how \"whole\" those pieces are: Do they make sense in isolation, or are they highly dependent / interconnected with each other?\n\nI'll add more in a bit, I have to step away",
        "user": "UAVCC2X70",
        "ts": "1595558598.292300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "awjeY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Anyway, breaking things into parts does NOT mean you have modularity -- less likely if there's a hierarchy involved.\n\nModularity is about how \"whole\" those pieces are: Do they make sense in isolation, or are they highly dependent / interconnected with each other?\n\nI'll add more in a bit, I have to step away"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595556744.290800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "50fce442-5edb-49db-bcd1-af4a3bccbde5",
        "type": "message",
        "text": "I think \"namespaced tags\" and buckets/databases only diverge in meaning in the presence of mutation (changing values). I'll discuss that in this thread (once I think it over further): <https://futureofcoding.slack.com/archives/C5T9GPWFL/p1595571049299600>",
        "user": "UCGAK10LS",
        "ts": "1595558764.292500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1595579109.000000"
        },
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1595556744290800",
                "fallback": "[July 23rd, 2020 7:12 PM] nmsmith65: Question: Can *modularity* (separation of concerns) be achieved without *hierarchy*? Can *tags* serve the same role as data *buckets*? Discuss. :slightly_smiling_face:",
                "ts": "1595556744.290800",
                "author_id": "UCGAK10LS",
                "author_subname": "Nick Smith",
                "channel_id": "C5T9GPWFL",
                "channel_name": "general",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "Question: Can *modularity* (separation of concerns) be achieved without *hierarchy*? Can *tags* serve the same role as data *buckets*? Discuss. :slightly_smiling_face:",
                "author_name": "Nick Smith",
                "author_link": "https://futureofcoding.slack.com/team/UCGAK10LS",
                "author_icon": "https://avatars.slack-edge.com/2020-04-17/1092364753072_770c193fd379ebbced3f_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1595556744290800",
                "footer": "Thread in #general"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XHAnQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think \"namespaced tags\" and buckets/databases only diverge in meaning in the presence of mutation (changing values). I'll discuss that in this thread (once I think it over further): "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1595571049299600"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "21311744-8b2b-40ca-87e3-15c770a4d387",
        "type": "message",
        "text": "Each module should be it's own world -- not a fragment of a larger picture. However, it may be an inhabitant of a larger world, or may have inhabitants of its own. But it should have no knowledge of the outside world, or of the inside world of its inhabitants. It may know if the interface-boundary of its inhabitants, but without their knowledge.",
        "user": "UAVCC2X70",
        "ts": "1595559316.293000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Uap",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Each module should be it's own world -- not a fragment of a larger picture. However, it may be an inhabitant of a larger world, or may have inhabitants of its own. But it should have no knowledge of the outside world, or of the inside world of its inhabitants. It may know if the interface-boundary of its inhabitants, but without their knowledge."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595556744.290800",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d48f66ce-7a9e-4614-9dcd-07a186e85904",
        "type": "message",
        "text": "So for example, a Car may have an engine and doors and wheels, and might have behaviors (methods) like drive forward, turn left, etc. But \"pick up the kids at noon\" is NOT part of a Car, but part of a bigger scenario that may *contain* a car. That scenario would know that the car can drive and turn, etc., but it's naive to how the car actually does it.\n\nSometimes there's the illusion of modularity in software, where a larger behavior is handed off from one thing to the next; but that's not modularity, because you pull one thing out of the pipeline, and you've broken that overall behavior. Generally speaking, you want \"vertical\" slicing, not horizontal. So instead of A hands off to B hands off to C (which slices what should be one while picture into fragments), you instead have the whole flow exist as one whole thing, and it may call down into A, B, and C. But for example, the code that updates your database should not \"know\" that it's supposed to do that after the user clicks a button.",
        "user": "UAVCC2X70",
        "ts": "1595559858.293400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fTAp=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So for example, a Car may have an engine and doors and wheels, and might have behaviors (methods) like drive forward, turn left, etc. But \"pick up the kids at noon\" is NOT part of a Car, but part of a bigger scenario that may "
                            },
                            {
                                "type": "text",
                                "text": "contain",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a car. That scenario would know that the car can drive and turn, etc., but it's naive to how the car actually does it.\n\nSometimes there's the illusion of modularity in software, where a larger behavior is handed off from one thing to the next; but that's not modularity, because you pull one thing out of the pipeline, and you've broken that overall behavior. Generally speaking, you want \"vertical\" slicing, not horizontal. So instead of A hands off to B hands off to C (which slices what should be one while picture into fragments), you instead have the whole flow exist as one whole thing, and it may call down into A, B, and C. But for example, the code that updates your database should not \"know\" that it's supposed to do that after the user clicks a button."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595556744.290800",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c0c66035-c100-4096-80b6-2d3573ae0005",
        "type": "message",
        "text": "One clear indicator of broken modularity is when something tries to \"happen at the right time\" (rather than just letting the outer environment call into it as needed). This can look like event listeners, AOP, pipelines, or components communicating indirectly with each other through some \"mediator\" or \"command\" pattern. Those things can have their place, but if it's to split apart a larger whole, rather than to incorporate multiple unrelated whole things that don't need to work together, than that's not modularity: you're going to have to reverse engineer everything and trace the cause and effect all over the place, to really understand what's happening in that code, and you're opening the door for race conditions and unexpected breakages when things change. The whole point of modularity is to make it easy to understand and change things.",
        "user": "UAVCC2X70",
        "ts": "1595560157.293700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1595560301.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U9G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One clear indicator of broken modularity is when something tries to \"happen at the right time\" (rather than just letting the outer environment call into it as needed). This can look like event listeners, AOP, pipelines, or components communicating indirectly with each other through some \"mediator\" or \"command\" pattern. Those things can have their place, but if it's to split apart a larger whole, rather than to incorporate multiple unrelated whole things that don't need to work together, than that's not modularity: you're going to have to reverse engineer everything and trace the cause and effect all over the place, to really understand what's happening in that code, and you're opening the door for race conditions and unexpected breakages when things change. The whole point of modularity is to make it easy to understand and change things."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595556744.290800",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "UKP3B2J5D",
                    "UJ6LDMMN0"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "98b59345-0410-47fd-b700-03cc248c9455",
        "type": "message",
        "text": "... I've thought a lot about this before :)",
        "user": "UAVCC2X70",
        "ts": "1595560359.294200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qSoS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "... I've thought a lot about this before :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595556744.290800",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8ce4a332-cd35-48db-b48b-3329f8440f25",
        "type": "message",
        "text": "You can see a program as a hierarchy of modules and scopes, or you can see it as a network of scopes calling other scopes. Which is more important? The hierarchy doesn't feel like the important piece here.\n\nOn a different note, there's a common idiom of decomposing programs into layers (MVC, app/lib/kernel, etc.) That's arguably a hierarchical organization even though there's no containment. The network is a DAG, and it has a definite 'grain' to it. This feels like an important lens. Arguably here we already have tags, in the form of providers and so on.",
        "user": "UCUSW7WVD",
        "ts": "1595561281.294400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OnprR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can see a program as a hierarchy of modules and scopes, or you can see it as a network of scopes calling other scopes. Which is more important? The hierarchy doesn't feel like the important piece here.\n\nOn a different note, there's a common idiom of decomposing programs into layers (MVC, app/lib/kernel, etc.) That's arguably a hierarchical organization even though there's no containment. The network is a DAG, and it has a definite 'grain' to it. This feels like an important lens. Arguably here we already have tags, in the form of providers and so on."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595556744.290800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "5c689d42-6879-4cd1-af05-cfc2c797db84",
        "type": "message",
        "text": "I said above I think being able to distribute in one file *might* be a reason things haven't happened. So that feature is missing. WASM doesn't work with one file. In fact typically it's min 3 files not including assets. One HTML file, one script with all the JS&lt;-&gt;WASM glue. One wasm file.\n\nPico-8 has definitely has some of the vibe of flash games but it's a way higher barrier to entry than flash ever was. There's no doing anything in Pico-8 without code but there was plenty of flash with no or minimal code.\n\nSo I think 4 things are missing\n\n1. being able to distribute as a single file. not entirely sure this is important but feel it's possible it is important\n2. being able to stream the assets from that single file vs having to wait for the entire file to download. If 1 is important than so is this.\n3. working well on mobile in the browser (this is only semi-possible because Apple has so far refused to implement the needed APIs. In particular the fullscreen API so a webpage can go fullscreen (or close to it ) like a native app can and the orientation API so a webpage can force landscape view. Android Chrome/Firefox has had both of these for 6+ years and it hasn't ruined the browsing experience there.\n4. A well designed non-programmer friendly app for making things\nI also feel it really is about the app. Unity and Unreal are not doing anything that game engines didn't do in 2003 but the fact that they package it all up so a non-programmer can build a Dear Esther type of game with no programming or even with a little programming is what made current explosion of games.\n\nThe same was true for flash IMO. It wasn't just that the tech existed. It's that there was an app that let people easily use tech to make stuff.\n\nIt could also be though the flash was just something that happened and it's time has passed. I found this site yesterday\n\n<http://poki.com/>\n\nIt's got a ton of games that seem right out of the flash days except with higher-res art :stuck_out_tongue:\n\nalso <https://itch.io> is full indie games and many run in the browser, though likely desktop only unfortunately.",
        "user": "UC6997THT",
        "ts": "1595567306.294900",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Online Games on Poki",
                "title_link": "http://poki.com/",
                "text": "On Poki you can play free online games at school or at home. Poki has the best online game selection and offers the most fun experience to play alone or with friends. We support :iphone: and :desktop_computer: games.",
                "fallback": "Online Games on Poki",
                "from_url": "http://poki.com/",
                "service_icon": "https://a.poki.com/icons/fav-512.png",
                "service_name": "poki.com",
                "id": 1,
                "original_url": "http://poki.com/"
            },
            {
                "service_name": "itch.io",
                "title": "Download the latest indie games",
                "title_link": "https://itch.io/",
                "text": "<http://itch.io|itch.io> is a simple way to find, download and distribute indie games online. Whether you're a developer looking to upload your game or just someone looking for something new to play <http://itch.io|itch.io> has you covered.",
                "fallback": "itch.io: Download the latest indie games",
                "image_url": "https://static.itch.io/images/promo/homepage-screenshot-2018-thumb.png",
                "from_url": "https://itch.io/",
                "image_width": 485,
                "image_height": 250,
                "image_bytes": 172157,
                "service_icon": "https://itch.io/favicon.ico",
                "id": 2,
                "original_url": "https://itch.io"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iva",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I said above I think being able to distribute in one file "
                            },
                            {
                                "type": "text",
                                "text": "might",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " be a reason things haven't happened. So that feature is missing. WASM doesn't work with one file. In fact typically it's min 3 files not including assets. One HTML file, one script with all the JS<->WASM glue. One wasm file.\n\nPico-8 has definitely has some of the vibe of flash games but it's a way higher barrier to entry than flash ever was. There's no doing anything in Pico-8 without code but there was plenty of flash with no or minimal code.\n\nSo I think 4 things are missing\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "being able to distribute as a single file. not entirely sure this is important but feel it's possible it is important"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "being able to stream the assets from that single file vs having to wait for the entire file to download. If 1 is important than so is this."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "working well on mobile in the browser (this is only semi-possible because Apple has so far refused to implement the needed APIs. In particular the fullscreen API so a webpage can go fullscreen (or close to it ) like a native app can and the orientation API so a webpage can force landscape view. Android Chrome/Firefox has had both of these for 6+ years and it hasn't ruined the browsing experience there."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A well designed non-programmer friendly app for making things"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI also feel it really is about the app. Unity and Unreal are not doing anything that game engines didn't do in 2003 but the fact that they package it all up so a non-programmer can build a Dear Esther type of game with no programming or even with a little programming is what made current explosion of games.\n\nThe same was true for flash IMO. It wasn't just that the tech existed. It's that there was an app that let people easily use tech to make stuff.\n\nIt could also be though the flash was just something that happened and it's time has passed. I found this site yesterday\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http://poki.com/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIt's got a ton of games that seem right out of the flash days except with higher-res art "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            },
                            {
                                "type": "text",
                                "text": "\n\nalso "
                            },
                            {
                                "type": "link",
                                "url": "https://itch.io"
                            },
                            {
                                "type": "text",
                                "text": " is full indie games and many run in the browser, though likely desktop only unfortunately."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595442804.152100",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "4e0d17ff-69da-43a7-9541-e13e8c38402f",
        "type": "message",
        "text": "&gt; Some things fit multiple categories, or can play multiple roles, and that does not slice cleanly into exclusive buckets\n<@UAVCC2X70> Yes, I agree. There's a need to be able to categorise something without allocating it to an exclusive location (a bucket).\n&gt; Each module [...] may be an inhabitant of a larger world, or may have inhabitants of its own. But it should have no knowledge of the outside world, or of the inside world of its inhabitants.\nHow do you identity whether a module has inappropriate \"knowledge\" of something external? You must be talking about *Objects* specifically, right? Classic information hiding concerns etc. Your answers all seem to be in the context of OOP and method calls.\n\n&gt; Generally speaking, you want \"vertical\" slicing, not horizontal\nI'm not really clear what distinction you're trying to make there. Are you arguing for call stacks (RPC) over message-passing and/or events? Call stacks are definitely banned from my own design. They're irredeemable in a distributed system.\n\n&gt; you're going to have to reverse engineer everything and trace the cause and effect all over the place, to really understand what's happening in that code, and you're opening the door for race conditions and unexpected breakages when things change\nThese are problems induced by poor language and tool designs; they're not really an immediate consequence of having an event system. I agree that if you have some kind of event system, then it has to be designed to play a carefully thought-out role in a larger architecture and in a way that can't be abused or \"used wrong\".",
        "user": "UCGAK10LS",
        "ts": "1595568823.295200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1595570468.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bmUDw",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some things fit multiple categories, or can play multiple roles, and that does not slice cleanly into exclusive buckets"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " Yes, I agree. There's a need to be able to categorise something without allocating it to an exclusive location (a bucket).\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Each module [...] may be an inhabitant of a larger world, or may have inhabitants of its own. But it should have no knowledge of the outside world, or of the inside world of its inhabitants."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How do you identity whether a module has inappropriate \"knowledge\" of something external? You must be talking about "
                            },
                            {
                                "type": "text",
                                "text": "Objects",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " specifically, right? Classic information hiding concerns etc. Your answers all seem to be in the context of OOP and method calls.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Generally speaking, you want \"vertical\" slicing, not horizontal"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not really clear what distinction you're trying to make there. Are you arguing for call stacks (RPC) over message-passing and/or events? Call stacks are definitely banned from my own design. They're irredeemable in a distributed system.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you're going to have to reverse engineer everything and trace the cause and effect all over the place, to really understand what's happening in that code, and you're opening the door for race conditions and unexpected breakages when things change"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "These are problems induced by poor language and tool designs; they're not really an immediate consequence of having an event system. I agree that if you have some kind of event system, then it has to be designed to play a carefully thought-out role in a larger architecture and in a way that can't be abused or \"used wrong\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595556744.290800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "1222d2b4-b30e-4a46-b89a-495e48943449",
        "type": "message",
        "text": "I feel like your overall point is a condemnation of existing software architectures and design patterns, rather than a denouncement (or advocation) of any particular abstract programming primitives. I don't know what else to say to that. I'm certainly not about to defend the status quo of software engineering!",
        "user": "UCGAK10LS",
        "ts": "1595569295.295700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1595569375.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mj+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I feel like your overall point is a condemnation of existing software architectures and design patterns, rather than a denouncement (or advocation) of any particular abstract programming primitives. I don't know what else to say to that. I'm certainly not about to defend the status quo of software engineering!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595556744.290800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "3b243e11-a000-460b-add9-cdb64d7acbdf",
        "type": "message",
        "text": "<@UCUSW7WVD> You're talking about code, but what about information? Are you saying that a piece of information (e.g. an employee record, or the state of a video game) should be represented as a network of scopes? How do I address that as a self-contained unit?",
        "user": "UCGAK10LS",
        "ts": "1595569610.296200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s4iC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " You're talking about code, but what about information? Are you saying that a piece of information (e.g. an employee record, or the state of a video game) should be represented as a network of scopes? How do I address that as a self-contained unit?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595556744.290800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "e620933f-1e5c-4e4c-94ef-2a63b20e91d5",
        "type": "message",
        "text": "Data needs to be modularised too. Not just code!",
        "user": "UCGAK10LS",
        "ts": "1595569632.296400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n18IY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Data needs to be modularised too. Not just code!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595556744.290800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "61065dd5-4d8a-494a-a1ad-f62b726ddb7e",
        "type": "message",
        "text": "I think the above question is better split into two, so here's a separate prompt:\n\nWhat is the difference between an exclusive data *bucket* and a *tag*? Is one inferior to the other? How do you tell them apart, behaviourally?\n(My definition of \"bucket\" here means simply an exclusive location that a datum is considered to \"live\" within, whereas a \"tag\" is not a residence. Example of buckets: the \"folders\" of a hierarchical file system. Example of tags: the labels placed upon Github issues or the #hashtags of social media posts.)",
        "user": "UCGAK10LS",
        "ts": "1595571049.299600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1595593452.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FVBM8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the above question is better split into two, so here's a separate prompt:\n\nWhat is the difference between an exclusive data "
                            },
                            {
                                "type": "text",
                                "text": "bucket",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and a "
                            },
                            {
                                "type": "text",
                                "text": "tag",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "? Is one inferior to the other? How do you tell them apart, behaviourally?\n(My definition of \"bucket\" here means simply an exclusive location that a datum is considered to \"live\" within, whereas a \"tag\" is not a residence. Example of buckets: the \"folders\" of a hierarchical file system. Example of tags: the labels placed upon Github issues or the #hashtags of social media posts.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571049.299600",
        "reply_count": 17,
        "reply_users_count": 6,
        "latest_reply": "1595601044.426700",
        "reply_users": [
            "UDQBTJ211",
            "U013ZLJARC7",
            "UCGAK10LS",
            "U5STGTB3J",
            "UL3CJ7YKC",
            "UHWC9PXBL"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UDQBTJ211"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "text": "Of course, <https://codefaster.substack.com/p/jq-features-considered-harmful> . Yeah, a good title seems to matter almost more than a good article these days...",
        "user": "UL5AX4G2H",
        "ts": "1595573579.300500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Avoid these 6 jq features",
                "title_link": "https://codefaster.substack.com/p/jq-features-considered-harmful",
                "text": "In this tutorial, we\u2019ll discuss features of jq that will slow you down and what to use instead. jq has 3 fabulously dangerous methods...",
                "fallback": "Avoid these 6 jq features",
                "image_url": "https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/c21d3e2d-bc9d-401f-bbe8-225d0d0643d9_256x256.png",
                "from_url": "https://codefaster.substack.com/p/jq-features-considered-harmful",
                "image_width": 250,
                "image_height": 250,
                "image_bytes": 3306,
                "service_icon": "https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/d8afe861-b0e8-49ce-b80e-2d642b648703/apple-touch-icon-57x57.png",
                "service_name": "codefaster.substack.com",
                "id": 1,
                "original_url": "https://codefaster.substack.com/p/jq-features-considered-harmful"
            }
        ],
        "thread_ts": "1595528501.266600",
        "parent_user_id": "UL5AX4G2H"
    },
    {
        "client_msg_id": "874b121a-bb80-41fc-8fa2-364b1cc00414",
        "type": "message",
        "text": "This reminds me of A City Is Not A Tree, where he says a city should be modelled as a semilattice. In particular it has some discussion similar to above about when things are truly \"separate\" or not",
        "user": "UDQBTJ211",
        "ts": "1595576988.300900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NsCo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This reminds me of A City Is Not A Tree, where he says a city should be modelled as a semilattice. In particular it has some discussion similar to above about when things are truly \"separate\" or not"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595556744.290800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "79C564F2-9627-41AA-86A8-5891B06754EB",
        "type": "message",
        "text": "I think some of you here will enjoy this podcast by Ryan Singer of Basecamp, author of _Shape Up_:\n<https://synthetic.transistor.fm/|https://synthetic.transistor.fm/>",
        "user": "U5STGTB3J",
        "ts": "1595578576.302300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Synthetic A Priori",
                "title_link": "https://synthetic.transistor.fm/",
                "text": "Step into the messy phase of wrestling with ideas before they become conclusions. Ryan Singer draws connections between design, tech, science, and formal systems.",
                "fallback": "Synthetic A Priori",
                "image_url": "https://images.transistor.fm/file/transistor/images/social_images/site/4480/Asset_1_3x.png",
                "from_url": "https://synthetic.transistor.fm/",
                "image_width": 250,
                "image_height": 250,
                "image_bytes": 49538,
                "service_name": "synthetic.transistor.fm",
                "id": 1,
                "original_url": "https://synthetic.transistor.fm/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vRq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think some of you here will enjoy this podcast by Ryan Singer of Basecamp, author of "
                            },
                            {
                                "type": "text",
                                "text": "Shape Up",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ":\n"
                            },
                            {
                                "type": "link",
                                "url": "https://synthetic.transistor.fm/",
                                "text": "https://synthetic.transistor.fm/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595578576.302300",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1595623223.450900",
        "reply_users": [
            "UBM0S2AN4"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UKP3B2J5D",
                    "UMWF81HTP",
                    "U014WA16VNJ",
                    "UBM0S2AN4"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "ffb0a5ce-fdf9-4dac-9df0-2ec907d6c109",
        "type": "message",
        "text": "Just to add kindly precision (but I am not sure if this is really important for the discussion):\n&gt; WASM doesn't work with one file. In fact typically it's min 3 files not including assets. One HTML file, one script with all the JS&lt;-&gt;WASM glue. One wasm file.\nTechnically, if needed one can bundle all this in one HTML file, with a script tag for the JavaScript / WASM glue, and with the WebAssembly binary content encoded in base64 somewhere in the script or in a custom HTML tag.",
        "user": "UJ6LDMMN0",
        "ts": "1595579159.302600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hSdV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just to add kindly precision (but I am not sure if this is really important for the discussion):\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "WASM doesn't work with one file. In fact typically it's min 3 files not including assets. One HTML file, one script with all the JS<->WASM glue. One wasm file."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Technically, if needed one can bundle all this in one HTML file, with a script tag for the JavaScript / WASM glue, and with the WebAssembly binary content encoded in base64 somewhere in the script or in a custom HTML tag."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595442804.152100",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7",
                    "U01661S9F34",
                    "ULK0Z4MPV",
                    "UC2A2ARPT"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "4eb9428b-c093-48d9-b2ea-5ebe37ac1248",
        "type": "message",
        "text": "I am 100% sure these map to different processors in your brain. The exclusivity of a bucket allows you to leverage your Location powers. As things like the Mind Palace technique, and the trick of returning to the place you lost your train of thought, show, leveraging our sense of physical location is very powerful.\n\nTags are also brilliant, but they leverage a different thing, which is our natural ability to categorise and stereotype. This is mainly useful for describing queries and commands.\n\nI remember having an argument about 15 years ago with somebody who was saying that filesystems should be rewritten to be based only on tags, as it's more general. They made the (good) point that it's absurd to distinguish between /usr/photos/wedding/ and /usr/wedding/photos/. I still struggle to explain why I hate the idea so gutturally, but I do. I can't relax until I can say \"that's *there's*, that's *here*\" etc. \n\nBasically the ideal system for me is built on a bedrock of buckets, but with the ability to arbitrary query it based on properties, including arbitrary user defined tags. Something's location, i.e. it's filepath can be considered an implicit tag but it should be recognised as fundamentally different.\n\nI am actually making a system like this; basically a Lucene+Tika powered add-on for a filesystem. Impossible to know how universal my preferences are   :shrug:",
        "user": "UDQBTJ211",
        "ts": "1595580201.303800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nq5V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am 100% sure these map to different processors in your brain. The exclusivity of a bucket allows you to leverage your Location powers. As things like the Mind Palace technique, and the trick of returning to the place you lost your train of thought, show, leveraging our sense of physical location is very powerful.\n\nTags are also brilliant, but they leverage a different thing, which is our natural ability to categorise and stereotype. This is mainly useful for describing queries and commands.\n\nI remember having an argument about 15 years ago with somebody who was saying that filesystems should be rewritten to be based only on tags, as it's more general. They made the (good) point that it's absurd to distinguish between /usr/photos/wedding/ and /usr/wedding/photos/. I still struggle to explain why I hate the idea so gutturally, but I do. I can't relax until I can say \"that's "
                            },
                            {
                                "type": "text",
                                "text": "there's",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", that's "
                            },
                            {
                                "type": "text",
                                "text": "here",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\" etc. \n\nBasically the ideal system for me is built on a bedrock of buckets, but with the ability to arbitrary query it based on properties, including arbitrary user defined tags. Something's location, i.e. it's filepath can be considered an implicit tag but it should be recognised as fundamentally different.\n\nI am actually making a system like this; basically a Lucene+Tika powered add-on for a filesystem. Impossible to know how universal my preferences are   "
                            },
                            {
                                "type": "emoji",
                                "name": "shrug"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571049.299600",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "1d5247c2-1c58-4d8e-a2b2-74766440a39c",
        "type": "message",
        "text": "There was a good bit written about this distinction in the early 00s, trying to tease out the differences using the terms _taxonomy_ and _folksonomy_. Some of that work might be of interest to your concerns.\n\n<@UDQBTJ211> Do kangaroos go in `/animals/australian` or `/animals/marsupial`? Is a hot dog a sandwich?",
        "user": "U013ZLJARC7",
        "ts": "1595580726.304100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N/AC5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There was a good bit written about this distinction in the early 00s, trying to tease out the differences using the terms "
                            },
                            {
                                "type": "text",
                                "text": "taxonomy",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "folksonomy",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Some of that work might be of interest to your concerns.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UDQBTJ211"
                            },
                            {
                                "type": "text",
                                "text": " Do kangaroos go in "
                            },
                            {
                                "type": "text",
                                "text": "/animals/australian",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "/animals/marsupial",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "? Is a hot dog a sandwich?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571049.299600",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "77369ec8-a365-45d3-9509-e5964e87ae63",
        "type": "message",
        "text": "I think the point is, it doesn't matter, there's value in it going Somewhere if that allows you to make use of a sense of location.\n\nWhere does a spork go in a kitchen? I bet it varies by person, but I bet all of those people would remember where *they* put it, in their own kitchen. In someone else's kitchen they would have to start querying and searching, for sure.",
        "user": "UDQBTJ211",
        "ts": "1595581000.304300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q9k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the point is, it doesn't matter, there's value in it going Somewhere if that allows you to make use of a sense of location.\n\nWhere does a spork go in a kitchen? I bet it varies by person, but I bet all of those people would remember where "
                            },
                            {
                                "type": "text",
                                "text": "they",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " put it, in their own kitchen. In someone else's kitchen they would have to start querying and searching, for sure."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571049.299600",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS",
                    "UKP3B2J5D",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "b6e06123-8965-4a36-882c-827fe32c9cc1",
        "type": "message",
        "text": "I recently sorted out my Lego so been thinking about this a lot :sweat_smile:",
        "user": "UDQBTJ211",
        "ts": "1595581085.304500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CqHX0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I recently sorted out my Lego so been thinking about this a lot "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571049.299600",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "U013ZLJARC7",
                    "UE6EFEPTQ",
                    "UKP3B2J5D"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "dfc1daaa-736d-4c91-b66a-6d173be35962",
        "type": "message",
        "text": "<@UDQBTJ211> So in the \"models for information\" thread, <@UEBG0NPDK> was talking about how he prefers the idea of \"namespaced tags\", which look a lot like file paths, so you can write something like `/usr/photo/wedding/`. The distinction from exclusive buckets though, is that you can reference a single datum under multiple different paths!  How does that idea feel to you?",
        "user": "UCGAK10LS",
        "ts": "1595581668.305100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ioKly",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDQBTJ211"
                            },
                            {
                                "type": "text",
                                "text": " So in the \"models for information\" thread, "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " was talking about how he prefers the idea of \"namespaced tags\", which look a lot like file paths, so you can write something like "
                            },
                            {
                                "type": "text",
                                "text": "/usr/photo/wedding/",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". The distinction from exclusive buckets though, is that you can reference a single datum under multiple different paths!  How does that idea feel to you?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571049.299600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "48d4f8d7-e558-4343-b61a-32508cc77fe4",
        "type": "message",
        "text": "<@U013ZLJARC7> Those terms are leading me to some interesting resources. Thank you!",
        "user": "UCGAK10LS",
        "ts": "1595581928.305300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HiP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " Those terms are leading me to some interesting resources. Thank you!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571049.299600",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "FAC36E86-AFF4-4C5D-A789-620AFD72F5ED",
        "type": "message",
        "text": "The classic paper _<https://www.cc.gatech.edu/classes/AY2013/cs7601_spring/papers/Simon-Complexity.pdf|The Architecture of Complexity>_ has a lot to say about hierarchy, and where it comes from. It's hard to not see hierarchies everywhere, although it isn\u2019t really clear if that's because _they are_ everywhere, or if it's because _we_ just like to see them everywhere. (Hint: it's us. Our brains love containment as a foundational structure for sense-making.)",
        "user": "U5STGTB3J",
        "ts": "1595584897.320400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t=UQk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The classic paper "
                            },
                            {
                                "type": "link",
                                "url": "https://www.cc.gatech.edu/classes/AY2013/cs7601_spring/papers/Simon-Complexity.pdf",
                                "text": "The Architecture of Complexity",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " has a lot to say about hierarchy, and where it comes from. It's hard to not see hierarchies everywhere, although it isn\u2019t really clear if that's because "
                            },
                            {
                                "type": "text",
                                "text": "they are",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " everywhere, or if it's because "
                            },
                            {
                                "type": "text",
                                "text": "we",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " just like to see them everywhere. (Hint: it's us. Our brains love containment as a foundational structure for sense-making.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595556744.290800",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "D8D18321-00E3-4355-9551-5B0ED10052B1",
        "type": "message",
        "text": "<@UCGAK10LS> You mention a lot of different things as part of the \u201cbucket\u201d category, so it\u2019s a little difficult to come up with a single, universal answer to what the differences are.\n\nMathematically, a set and a tag can both be just a binary relation without any explicit properties assumed. Then they could be the same, behaviorally.\n\nA list implies some sort of order on multiple relations of that kind, which a tag doesn\u2019t (although you\u2019d always have to order elements tagged with the same tag in some way to display them).\n\nTables and databases add more assumptions on the relations they model. Are they reflexive? Transitive (which you need to model hierarchy)? Etc.\n\nTags probably feel more flexible because they don\u2019t assume anything about the relation they model other than that there exists one (perhaps if it\u2019s one- or two-way?), while \u201cbuckets\u201d, especially when seen as containers, do assume that these relations have additional properties which makes them less \u201cflexible\u201d.\n\nAt the end of the day though, the \u201cpurity\u201d of tags is diluted by practical concerns, e.g. how to display all elements tagged with the same tag, and then you\u2019re forced to ensure the relations have certain properties, and suddenly you\u2019re back in container-land, just that the same elements can now also be in several containers at once. And then you run into questions of identity: if I change that element in one category, does it change everywhere, or does it just change in the current context (was it just a copy)?\n\nAlso, not hard-coding any properties of these relations basically just shifts the burden on the user; they still need to remember what a tag means to them and keeping different kinds of meaning apart. That\u2019s when they suddenly re-introduce containment with hacks like namespaces or paths.\n\nTechnically, modeling fewer assumptions on relations gives you more flexibility in exchange for performance, as the system can\u2019t make certain assumptions (e.g. order) which could be used for optimizations (e.g. indices).\n\nThankfully, the way the system seems to work from a user\u2019s perspective doesn\u2019t necessarily have to be the way it\u2019s implemented. That probably is what good abstractions are about \u2014 they\u2019re not just hiding something, they\u2019re hiding a dramatically different structure that you wouldn\u2019t expect from how the system behaves \u2014 and hopefully the way it behaves is easier to understand than how it actually works.",
        "user": "U5STGTB3J",
        "ts": "1595588743.356700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6p=l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " You mention a lot of different things as part of the \u201cbucket\u201d category, so it\u2019s a little difficult to come up with a single, universal answer to what the differences are.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Mathematically, a set and a tag can both be just a binary relation without any explicit properties assumed. Then they could be the same, behaviorally.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "A list implies some sort of order on multiple relations of that kind, which a tag doesn\u2019t (although you\u2019d always have to order elements tagged with the same tag in some way to display them).\n"
                            },
                            {
                                "type": "text",
                                "text": "\nTables and databases add more assumptions on the relations they model. Are they reflexive? Transitive (which you need to model hierarchy)? Etc.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Tags probably feel more flexible because they don\u2019t assume anything about the relation they model other than that there exists one (perhaps if it\u2019s one- or two-way?), while \u201cbuckets\u201d, especially when seen as containers, do assume that these relations have additional properties which makes them less \u201cflexible\u201d.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "At the end of the day though, the \u201cpurity\u201d of tags is diluted by practical concerns, e.g. how to display all elements tagged with the same tag, and then you\u2019re forced to ensure the relations have certain properties, and suddenly you\u2019re back in container-land, just that the same elements can now also be in several containers at once. And then you run into questions of identity: if I change that element in one category, does it change everywhere, or does it just change in the current context (was it just a copy)?\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Also, not hard-coding any properties of these relations basically just shifts the burden on the user; they still need to remember what a tag means to them and keeping different kinds of meaning apart. That\u2019s when they suddenly re-introduce containment with hacks like namespaces or paths.\n"
                            },
                            {
                                "type": "text",
                                "text": "\nTechnically, modeling fewer assumptions on relations gives you more flexibility in exchange for performance, as the system can\u2019t make certain assumptions (e.g. order) which could be used for optimizations (e.g. indices).\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Thankfully, the way the system seems to work from a user\u2019s perspective doesn\u2019t necessarily have to be the way it\u2019s implemented. That probably is what good abstractions are about \u2014 they\u2019re not just hiding something, they\u2019re hiding a dramatically different structure that you wouldn\u2019t expect from how the system behaves \u2014 and hopefully the way it behaves is easier to understand than how it actually works."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571049.299600",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UKP3B2J5D",
                    "UL3CJ7YKC",
                    "UHWC9PXBL",
                    "UDQBTJ211",
                    "UJ6LDMMN0"
                ],
                "count": 5
            }
        ]
    },
    {
        "client_msg_id": "d150c252-ab30-494a-adde-91baa641db92",
        "type": "message",
        "text": "Yes, <@UCGAK10LS>, that's a good point: you can't edit db views. You can't edit the value in a formula cell. So a bucket that can evolve may look the same as a query result, but the latter only evolves because one of the former does. Same with tagged data: the \"bucket\" of items with that tag depends on items being tagged, and can't be edited or evolve independent of that. Whereas a directory of items, a bucket, can.",
        "user": "UE6EFEPTQ",
        "ts": "1595589039.356900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eyr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, "
                            },
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": ", that's a good point: you can't edit db views. You can't edit the value in a formula cell. So a bucket that can evolve may look the same as a query result, but the latter only evolves because one of the former does. Same with tagged data: the \"bucket\" of items with that tag depends on items being tagged, and can't be edited or evolve independent of that. Whereas a directory of items, a bucket, can."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "75faf964-ca73-4fb3-a995-c8c09c723350",
        "type": "message",
        "text": "From an end user perspective, the question is whether the item or a collection of items is the primary focus. In some modelling tasks, it's important to model a first class bucket of items, e.g. the actual people standing in an actual room, rather than having a big swimming pool of people and picking out those who are in the room to be tagged accordingly.",
        "user": "UE6EFEPTQ",
        "ts": "1595589386.357100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fNcco",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "From an end user perspective, the question is whether the item or a collection of items is the primary focus. In some modelling tasks, it's important to model a first class bucket of items, e.g. the actual people standing in an actual room, rather than having a big swimming pool of people and picking out those who are in the room to be tagged accordingly."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "fa656949-860a-4171-87fc-f08697c477e8",
        "type": "message",
        "text": "<@UCGAK10LS> Also don\u2019t forget you can replace data on edges easily by introducing a new, intermediate node. `(N1)--[E]--(N2)` might become `(N1)--(E)--(N2)` , then you have a bipartite graph to work with.",
        "user": "UL3CJ7YKC",
        "ts": "1595591178.357700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1595591270.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hwcE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " Also don\u2019t forget you can replace data on edges easily by introducing a new, intermediate node. "
                            },
                            {
                                "type": "text",
                                "text": "(N1)--[E]--(N2)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " might become "
                            },
                            {
                                "type": "text",
                                "text": "(N1)--(E)--(N2)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " , then you have a bipartite graph to work with."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "a9f86b21-7fdb-4a49-82ea-923190b66ca3",
        "type": "message",
        "text": "<@U5STGTB3J> I think we're going off into the weeds a bit here. I'm (personally) not interested in talking about specific data structures or data models in this thread. That kind of discussion is best reserved for the thread I initiated yesterday. I listed a couple of examples only to hint at how the abstract notion of a \"bucket\" can manifest.\n&gt; \u201cbuckets\u201d, especially when seen as containers, do assume that these relations have additional properties which makes them less \u201cflexible\u201d.\nI think the actual *interface* that users are presented with is going to be the main driver of assumptions about what a bucket means. My definition of \"bucket\" here means simply an exclusive location that a datum is considered to \"live\" within. That's extremely broad, and my hope for this thread is that we can work out the relevance and utility of buckets in comparison to tags.\n&gt; And then you run into questions of identity: if I change that element in one category, does it change everywhere, or does it just change in the current context (was it just a copy)?\nI actually believe this to be the *only* difference between buckets and tags. In the presence of *mutation*, the two concepts may behave differently, and without mutation, they are equivalent. I've not yet had time to develop detailed reasoning as to why this might be the case. I'll hopefully post something here in the next 24h.",
        "user": "UCGAK10LS",
        "ts": "1595591963.358400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1595592057.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K8O0q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " I think we're going off into the weeds a bit here. I'm (personally) not interested in talking about specific data structures or data models in this thread. That kind of discussion is best reserved for the thread I initiated yesterday. I listed a couple of examples only to hint at how the abstract notion of a \"bucket\" can manifest.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\u201cbuckets\u201d, especially when seen as containers, do assume that these relations have additional properties which makes them less \u201cflexible\u201d."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the actual "
                            },
                            {
                                "type": "text",
                                "text": "interface",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that users are presented with is going to be the main driver of assumptions about what a bucket means. My definition of \"bucket\" here means simply an exclusive location that a datum is considered to \"live\" within. That's extremely broad, and my hope for this thread is that we can work out the relevance and utility of buckets in comparison to tags.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And then you run into questions of identity: if I change that element in one category, does it change everywhere, or does it just change in the current context (was it just a copy)?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I actually believe this to be the "
                            },
                            {
                                "type": "text",
                                "text": "only",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " difference between buckets and tags. In the presence of "
                            },
                            {
                                "type": "text",
                                "text": "mutation",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", the two concepts may behave differently, and without mutation, they are equivalent. I've not yet had time to develop detailed reasoning as to why this might be the case. I'll hopefully post something here in the next 24h."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571049.299600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "dbb6b701-324a-42bd-a01a-1e2aae95fe4d",
        "type": "message",
        "text": "I just put out the latest Enso devblog:\n<https://medium.com/@enso_org/enso-dev-blog-friday-17th-july-702456f6f94>\nThis one\u2019s got some neat stuff in it, including first look at the standard library (in textual Enso, not yet in visual), and the colour-by-type for ports and edges that may be familiar to users of Luna 1.x.",
        "user": "U0165TZ39GV",
        "ts": "1595592612.359800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U0165TZ39GV",
            "ts": "1595595456.000000"
        },
        "attachments": [
            {
                "fallback": "<https://twitter.com/enso_org|@enso_org>: :rotating_light: New dev blog :rotating_light:\nThis week:\n- Types represented in the colour of ports and edges\n- Context-sensitive code suggestions database\n- CLI for the Enso launcher\n- First look at the standard library, with State, List, and testing\n<https://medium.com/@enso_org/enso-dev-blog-19th-june-2020-335e528d50b>",
                "ts": 1595592521,
                "author_name": "Enso (formerly Luna)",
                "author_link": "https://twitter.com/enso_org/status/1286634404404768768",
                "author_icon": "https://pbs.twimg.com/profile_images/1276175817400291335/zvrNeVit_normal.jpg",
                "author_subname": "@enso_org",
                "text": ":rotating_light: New dev blog :rotating_light:\nThis week:\n- Types represented in the colour of ports and edges\n- Context-sensitive code suggestions database\n- CLI for the Enso launcher\n- First look at the standard library, with State, List, and testing\n<https://medium.com/@enso_org/enso-dev-blog-19th-june-2020-335e528d50b>",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/enso_org/status/1286634404404768768",
                "id": 1,
                "original_url": "https://twitter.com/enso_org/status/1286634404404768768",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iMN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just put out the latest Enso devblog:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://medium.com/@enso_org/enso-dev-blog-friday-17th-july-702456f6f94"
                            },
                            {
                                "type": "text",
                                "text": "\nThis one\u2019s got some neat stuff in it, including first look at the standard library (in textual Enso, not yet in visual), and the colour-by-type for ports and edges that may be familiar to users of Luna 1.x."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595592612.359800",
        "reply_count": 2,
        "reply_users_count": 1,
        "latest_reply": "1595595463.388800",
        "reply_users": [
            "U0165TZ39GV"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "sunglasses",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "fb2c7345-fa4b-458d-9330-2636843a85ae",
        "type": "message",
        "text": "*Set* ~= *Tag* isn\u2019t it?\n\nAs for *List* / *Table*: they have an extra layer of connection via integers (list 1D, table 2D), but you could replace this \u201cmesh\u201d with adding proper *next/prev* information (tags) everywhere. Integers themselves can be modeled! You should check out Idris!\n\nlist of [1,2,3] VS\nset of numbers(1,3,2) + nexts( (1,2) (2,3) ) + prevs( (2,1), (3,2) ) + the automation which adds these pieces of information always on change.\n\nTo me, naturally, if we would like to be really really precise we would only use Sets + adding out extra layers of information to the models by ourselves, but Integers are so useful and make us so capable to hack around with a degree of certaincy without fluff. However, using integers exposes logic you can use to reason about your code.\n\nOn the other hand, building on Integers means you are exposed to \u201cvulnerability\u201d, because you don\u2019t use the \u201creal interfaces\u201d Integers themselves really do have behind. (eg. successor aka \u201cnext\u201d/ successor^-1 aka \u201cprev\u201d)",
        "user": "UL3CJ7YKC",
        "ts": "1595592623.360000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1595592866.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6qMq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Set",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ~= "
                            },
                            {
                                "type": "text",
                                "text": "Tag",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " isn\u2019t it?\n\nAs for "
                            },
                            {
                                "type": "text",
                                "text": "List",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " / "
                            },
                            {
                                "type": "text",
                                "text": "Table",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": they have an extra layer of connection via integers (list 1D, table 2D), but you could replace this \u201cmesh\u201d with adding proper "
                            },
                            {
                                "type": "text",
                                "text": "next/prev",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " information (tags) everywhere. Integers themselves can be modeled! You should check out Idris!\n\nlist of [1,2,3] VS\nset of numbers(1,3,2) + nexts( (1,2) (2,3) ) + prevs( (2,1), (3,2) ) + the automation which adds these pieces of information always on change.\n\nTo me, naturally, if we would like to be really really precise we would only use Sets + adding out extra layers of information to the models by ourselves, but Integers are so useful and make us so capable to hack around with a degree of certaincy without fluff. However, using integers exposes logic you can use to reason about your code.\n\nOn the other hand, building on Integers means you are exposed to \u201cvulnerability\u201d, because you don\u2019t use the \u201creal interfaces\u201d Integers themselves really do have behind. (eg. successor aka \u201cnext\u201d/ successor^-1 aka \u201cprev\u201d)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571049.299600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "216dbe58-02db-47c2-a671-ada1982fe970",
        "type": "message",
        "text": "<@UL3CJ7YKC> Tbh I'm not really keen on thinking about graphs as a foundational concept. Graphs are a solution looking for a problem. You can use a graph to model a set of relationships, but a graph *is not itself* a set of relationships. I think we should talk about \"entities\" and \"pointers\" between them as a *potential use case* for graphs rather than talking about graphs first and figuring out their applicability thereafter. Otherwise our thought patterns will never escape from our preconceptions of what a graph _is_ and _can be_.",
        "user": "UCGAK10LS",
        "ts": "1595592626.360200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1595592668.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yEblu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UL3CJ7YKC"
                            },
                            {
                                "type": "text",
                                "text": " Tbh I'm not really keen on thinking about graphs as a foundational concept. Graphs are a solution looking for a problem. You can use a graph to model a set of relationships, but a graph "
                            },
                            {
                                "type": "text",
                                "text": "is not itself",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a set of relationships. I think we should talk about \"entities\" and \"pointers\" between them as a "
                            },
                            {
                                "type": "text",
                                "text": "potential use case",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for graphs rather than talking about graphs first and figuring out their applicability thereafter. Otherwise our thought patterns will never escape from our preconceptions of what a graph "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "can be",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "e8f8942d-d7eb-464d-a8de-938b1888ccb5",
        "type": "message",
        "text": "<@UC2A2ARPT> I think the layered state stuff speaks to some of your questions about variables",
        "user": "U0165TZ39GV",
        "ts": "1595592632.360400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pvPg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " I think the layered state stuff speaks to some of your questions about variables"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595592612.359800",
        "parent_user_id": "U0165TZ39GV",
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d7864afc-84a3-4ff5-b55f-5e99a69b20aa",
        "type": "message",
        "text": "We're off-topic again! I'm going to delete the mentions of those concrete data structures from the question. They are not really what I was trying to talk about at all here.",
        "user": "UCGAK10LS",
        "ts": "1595592891.361000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1595592911.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tsw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We're off-topic again! I'm going to delete the mentions of those concrete data structures from the question. They are not really what I was trying to talk about at all here."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571049.299600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "ceca6352-4732-481f-ba58-ce929f759a6c",
        "type": "message",
        "text": "Ah. Ok. Then my answer is: nothing. :smile: But maybe I don\u2019t get the idea.",
        "user": "UL3CJ7YKC",
        "ts": "1595592961.361400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y===",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah. Ok. Then my answer is: nothing. "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            },
                            {
                                "type": "text",
                                "text": " But maybe I don\u2019t get the idea."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571049.299600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "4cd5ad9a-7c90-4eed-99d0-c979f85cee65",
        "type": "message",
        "text": "I added an extra note to the question clarifying the conceptual difference.",
        "user": "UCGAK10LS",
        "ts": "1595593088.361700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xn4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I added an extra note to the question clarifying the conceptual difference."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571049.299600",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UL3CJ7YKC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "36E7C555-2ED3-4744-96D0-20FF89CF321B",
        "type": "message",
        "text": "What are the axes on which different programming languages differ?\nSo far, I have\nevaluation - eager or lazy\nabstraction mechanisms - classes, modules etc\ntypes - static, dynamic, strongly, weakly (I know first 2 and last 2 are different categories:slightly_smiling_face:)\nsyntax\nprimitives\nWhat else?",
        "user": "UKP3B2J5D",
        "ts": "1595594347.362500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UKP3B2J5D",
            "ts": "1595594649.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bhz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What are the axes on which different programming languages differ?\nSo far, I have\nevaluation - eager or lazy\nabstraction mechanisms - classes, modules etc\ntypes - static, dynamic, strongly, weakly (I know first 2 and last 2 are different categories"
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": ")\nsyntax\nprimitives\nWhat else?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595594347.362500",
        "reply_count": 17,
        "reply_users_count": 8,
        "latest_reply": "1595633572.489400",
        "reply_users": [
            "U014WA16VNJ",
            "U0165TZ39GV",
            "UKP3B2J5D",
            "UHWC9PXBL",
            "UEBG0NPDK",
            "UC2A2ARPT",
            "UJN1TAYEQ",
            "UFB8STN7K"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "U0165TZ39GV",
                    "U014WA16VNJ",
                    "USA54AECX",
                    "UA14TGLTC"
                ],
                "count": 4
            },
            {
                "name": "brain",
                "users": [
                    "USA54AECX"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9E050EDC-3753-4645-A5C2-D3CFA4D0542B",
        "type": "message",
        "text": "Perhaps paradigm, exceptions, or expressive power? (As measured by some formal heuristic, such as statement ratio or line ratio, often compared to C)",
        "user": "U014WA16VNJ",
        "ts": "1595594698.364700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L0s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perhaps paradigm, exceptions, or expressive power? (As measured by some formal heuristic, such as statement ratio or line ratio, often compared to C)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595594347.362500",
        "parent_user_id": "UKP3B2J5D"
    },
    {
        "client_msg_id": "E77D5CE1-33CE-450C-86B7-25DBB43700BB",
        "type": "message",
        "text": "I don\u2019t really like my contributions above so perhaps I can ask a useful question. Could you further define axes, in this context. Should they be formal properties? Should the options be mutually exclusive?",
        "user": "U014WA16VNJ",
        "ts": "1595594803.367400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U014WA16VNJ",
            "ts": "1595594825.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JnAZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don\u2019t really like my contributions above so perhaps I can ask a useful question. Could you further define axes, in this context. Should they be formal properties? Should the options be mutually exclusive?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595594347.362500",
        "parent_user_id": "UKP3B2J5D"
    },
    {
        "client_msg_id": "4a844a67-90c2-4f36-9fe6-5f547032a260",
        "type": "message",
        "text": "Size? There\u2019s a lot of languages, i.e. Lua, where a major feature they espouse is being small in size and embeddable, for example",
        "user": "U0165TZ39GV",
        "ts": "1595594899.369400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U0165TZ39GV",
            "ts": "1595594911.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5Ig87",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Size? There\u2019s a lot of languages, i.e. Lua, where a major feature they espouse is being small in size and embeddable, for example"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595594347.362500",
        "parent_user_id": "UKP3B2J5D"
    },
    {
        "client_msg_id": "A65C75A1-8245-414D-88B8-5DA1AA9E56B2",
        "type": "message",
        "text": "<@UCGAK10LS> I agree for most of us we should not go from graphs -&gt; use-cases and want to add: \u201cNot every problem is a graph problem\u201d which is evidently true. There\u2019s also the useful truth that almost any imaginable problem can be translated into some sort of graph. (Space efficiency, practical implementation aside)",
        "user": "U014WA16VNJ",
        "ts": "1595595114.380200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U014WA16VNJ",
            "ts": "1595595157.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JcMHf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " I agree for most of us we should not go from graphs -> use-cases and want to add: \u201cNot every problem is a graph problem\u201d which is evidently true. There\u2019s also the useful truth that almost any imaginable problem can be translated into some sort of graph. (Space efficiency, practical implementation aside)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "352E98E7-0069-4268-81FA-2B3F3177B0BE",
        "type": "message",
        "text": "I mean something concrete that\u2019s a property of the language not just what it affords. Like you can do functional programming in the broad sense in python for example but Haskell affords it better so I want to keep paradigms out since the programmer can decide to use different paradigms. I remember something Phillip Wadler said(I think he is the one who said it) that Haskell is the best imperative language. \n\nlike a friend pointed out Memory management - Garbage collection. Though I wonder if garbage collection is going a bit into the implementation vs. what the language actually is.",
        "user": "UKP3B2J5D",
        "ts": "1595595168.382300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "75dD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I mean something concrete that\u2019s a property of the language not just what it affords. Like you can do functional programming in the broad sense in python for example but Haskell affords it better so I want to keep paradigms out since the programmer can decide to use different paradigms. I remember something Phillip Wadler said(I think he is the one who said it) that Haskell is the best imperative language. \n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "like a friend pointed out Memory management - Garbage collection. Though I wonder if garbage collection is going a bit into the implementation vs. what the language actually is."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595594347.362500",
        "parent_user_id": "UKP3B2J5D"
    },
    {
        "client_msg_id": "b5e94a5b-9af7-4d3d-b09c-194413a0dd4a",
        "type": "message",
        "text": "(just updated because I managed to post the old link)",
        "user": "U0165TZ39GV",
        "ts": "1595595463.388800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZogMe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(just updated because I managed to post the old link)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595592612.359800",
        "parent_user_id": "U0165TZ39GV"
    },
    {
        "client_msg_id": "D2B16D86-2FA0-4B1F-8627-CBA6991A0177",
        "type": "message",
        "text": "Pointers or no pointers. Mutable variables",
        "user": "UKP3B2J5D",
        "ts": "1595595548.392700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5sjC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Pointers or no pointers. Mutable variables"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595594347.362500",
        "parent_user_id": "UKP3B2J5D"
    },
    {
        "client_msg_id": "5F15EC1B-E7FE-458C-A345-39491B2A0D35",
        "type": "message",
        "text": "I often think in sets, partial orders, trees connected to lists inside of graphs next to some other structure, etcetera. It\u2019s certainly a messy business and we\u2019d miss a lot of perfectly sensible thinking if we forced people to first translate their thoughts into graphs. But I guess that\u2019s what the computer is there for :wink: ",
        "user": "U014WA16VNJ",
        "ts": "1595595566.393500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8mkWe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I often think in sets, partial orders, trees connected to lists inside of graphs next to some other structure, etcetera. It\u2019s certainly a messy business and we\u2019d miss a lot of perfectly sensible thinking if we forced people to first translate their thoughts into graphs. But I guess that\u2019s what the computer is there for "
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "b7e7f61a-51e5-463b-91a2-8ab86806fa21",
        "type": "message",
        "text": "I think the key distinguisher is the exclusivity. This is what maps to our natural understanding of location and identity. An object can only be in one place. If otherwise identical objects are in different locations we perceive them as copies. I think this persists even if mutations on one affect the other. We perceive the \"other object\" as being magically affected \"at a distance\", we can't perceive it as one object with two locations. The notion than an object can only be in one location at a time, overpowers the related notion that objects can easily change their location and persist their identity.\n\nThis is not quite the same as containment. The features of physical containment are transitivity and anti-reflectivity. If A contains B, then B cannot contain A. If A contains B, and B contains C, then C is also inside A (indirectly).\n\nA filesystem obeys these physical properties, but something like Python's list does not obey either. This is why users get confused by lists that contain each other, and objects being changed when they are in two lists. It is also why symlinks can be so confusing. (You thought you were deleting a copy? Too bad sucker!)",
        "user": "UDQBTJ211",
        "ts": "1595596457.403200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tuPn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the key distinguisher is the exclusivity. This is what maps to our natural understanding of location and identity. An object can only be in one place. If otherwise identical objects are in different locations we perceive them as copies. I think this persists even if mutations on one affect the other. We perceive the \"other object\" as being magically affected \"at a distance\", we can't perceive it as one object with two locations. The notion than an object can only be in one location at a time, overpowers the related notion that objects can easily change their location and persist their identity.\n\nThis is not quite the same as containment. The features of physical containment are transitivity and anti-reflectivity. If A contains B, then B cannot contain A. If A contains B, and B contains C, then C is also inside A (indirectly).\n\nA filesystem obeys these physical properties, but something like Python's list does not obey either. This is why users get confused by lists that contain each other, and objects being changed when they are in two lists. It is also why symlinks can be so confusing. (You thought you were deleting a copy? Too bad sucker!)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571049.299600",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "A8425617-A8DB-4A2E-A811-0523BA7C6E28",
        "type": "message",
        "text": "Let\u2019s go off-topic to the other side then\u2026 :-)\n\nWhen you say \u201cinterface\u201d I hear \u201chow users understand it\u201d. Then we can talk about my favorite topic: image schemas. These are cognitive patterns that we all use to structure our understanding.\n\nA \u201cbucket\u201d is an instance of the _container_ schema. Things are either in it or not, and it has a boundary (which we might or might not be able to describe precisely). That means that the container is of a different quality than the elements it contains.\n\nA \u201ctag\u201d is an instance of the _link_ schema. It just means there is something that connects the things at the two ends like a rope (imagine the force you feel when two items are tied together with a rope; and it is such physicality that gives meaning to the abstract concept). The two items connected to each other don\u2019t automatically have different \u201cstatus\u201d like in the container version, although they could have through other schemas in effect simultaneously.\n\nWe can cope with the same things being in different containers at once, usually through frames, which are larger contexts of experience. E.g. when you say \u201ccut the flesh\u201d and you are in a restaurant, you evoke completely different images than when you\u2019re a surgeon in a hospital. And it even works out ok on the surgeon\u2019s night out to the steak house. ;-)\n\nNow if you use a tag to signify membership to a group, e.g. all blog articles tagged with \u201ctechnology\u201d, then it\u2019s used much more like a container and likely understood based on the container schema.\n\nThere are also more complex image schemas that could be relevant, for instance _whole-part_, which is a little like a container, but where the elements don\u2019t just have to be present, but also need to be arranged in a certain configuration for the whole to emerge. E.g. if you disassemble your car and still have all the parts, it\u2019s not really a car anymore. (That\u2019s also behind the layers example Kartik made in the other thread.)\n\nOr take the _center-periphery_ schema. This is how we understand gradual or fuzzy relations. Some things are \u201ccore\u201d or central, and if you change them the thing is no longer the same thing, e,g. a tree where you cut the trunk is still a tree, but it\u2019s not the same tree anymore. Other things are peripheral and can change, but if they do the thing still stays the same. E.g. if the tree loses all leads in winter it\u2019s still the same tree. Oh, did you have a haircut recently? No problem, still you.\n\nThe difference between \u201cbucket\u201d and \u201ctag\u201d can be as simple as _container_ vs. _link_, depending on how you use it. \nIf the identity of an object changes when it\u2019s modified in different places, does it mean it wasn\u2019t supposed to be the same thing in the first place? This is at the core(!) of programming issues around value vs. reference types and affects your system design. What parts of the elements tagged or put into buckets can change without making them a different thing?",
        "user": "U5STGTB3J",
        "ts": "1595597489.416200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LKljz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Let\u2019s go off-topic to the other side then\u2026 :-)\n\n"
                            },
                            {
                                "type": "text",
                                "text": "When you say \u201cinterface\u201d I hear \u201chow users understand it\u201d. Then we can talk about my favorite topic: image schemas. These are cognitive patterns that we all use to structure our understanding.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "A \u201cbucket\u201d is an instance of the "
                            },
                            {
                                "type": "text",
                                "text": "container",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " schema. Things are either in it or not, and it has a boundary (which we might or might not be able to describe precisely). That means that the container is of a different quality than the elements it contains.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "A \u201ctag\u201d is an instance of the "
                            },
                            {
                                "type": "text",
                                "text": "link",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " schema. It just means there is something that connects the things at the two ends like a rope (imagine the force you feel when two items are tied together with a rope; and it is such physicality that gives meaning to the abstract concept). The two items connected to each other don\u2019t automatically have different \u201cstatus\u201d like in the container version, although they could have through other schemas in effect simultaneously.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "We can cope with the same things being in different containers at once, usually through frames, which are larger contexts of experience. E.g. when you say \u201ccut the flesh\u201d and you are in a restaurant, you evoke completely different images than when you\u2019re a surgeon in a hospital. And it even works out ok on the surgeon\u2019s night out to the steak house. ;-)\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Now if you use a tag to signify membership to a group, e.g. all blog articles tagged with \u201ctechnology\u201d, then it\u2019s used much more like a container and likely understood based on the container schema.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "There are also more complex image schemas that could be relevant, for instance "
                            },
                            {
                                "type": "text",
                                "text": "whole-part",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", which is a little like a container, but where the elements don\u2019t just have to be present, but also need to be arranged in a certain configuration for the whole to emerge. E.g. if you disassemble your car and still have all the parts, it\u2019s not really a car anymore. (That\u2019s also behind the layers example Kartik made in the other thread.)\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Or take the "
                            },
                            {
                                "type": "text",
                                "text": "center-periphery",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " schema. This is how we understand gradual or fuzzy relations. Some things are \u201ccore\u201d or central, and if you change them the thing is no longer the same thing, e,g. a tree where you cut the trunk is still a tree, but it\u2019s not the same tree anymore. Other things are peripheral and can change, but if they do the thing still stays the same. E.g. if the tree loses all leads in winter it\u2019s still the same tree. Oh, did you have a haircut recently? No problem, still you.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "The difference between \u201cbucket\u201d and \u201ctag\u201d can be as simple as "
                            },
                            {
                                "type": "text",
                                "text": "container",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " vs. "
                            },
                            {
                                "type": "text",
                                "text": "link",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", depending on how you use it. \nIf the identity of an object changes when it\u2019s modified in different places, does it mean it wasn\u2019t supposed to be the same thing in the first place? This is at the core(!) of programming issues around value vs. reference types and affects your system design. What parts of the elements tagged or put into buckets can change without making them a different thing?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571049.299600",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UDQBTJ211",
                    "UHWC9PXBL",
                    "UKP3B2J5D"
                ],
                "count": 3
            },
            {
                "name": "heavy_minus_sign",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9054b4ce-508b-4c4f-84b5-caf2085b3d02",
        "type": "message",
        "text": "I think I disagree that tagging is the same as linking. Tagging to me is a kind of a categorizing/grouping. It's a type of non-exclusive container. Then I would put \"bucket\" as a separate image schema of exclusive container, which to me feels like a v important distinction. Mistaking a non-exclusive container for an exclusive container is surely to root of those spooky action at a distance gotchas.",
        "user": "UDQBTJ211",
        "ts": "1595599048.416500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0kEnU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think I disagree that tagging is the same as linking. Tagging to me is a kind of a categorizing/grouping. It's a type of non-exclusive container. Then I would put \"bucket\" as a separate image schema of exclusive container, which to me feels like a v important distinction. Mistaking a non-exclusive container for an exclusive container is surely to root of those spooky action at a distance gotchas."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571049.299600",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "23C326B5-E0DD-4642-B557-ECCB876CDC46",
        "type": "message",
        "text": "deep in the weeds here, but i think that the core of the ambiguity here is about identity vs value. in my head a value is something you can \u201cget to\u201d by eg a query or a computation (paths, links), whereas an identity refers to more of a physical object you might find in a place (something you can mutate). if you change a path or a computation, you get a different value. if you change \u201ca thing\u201d, the values update (properties of that thing update? language is hard). that kind of implies that a paths and computations are \u201cthings\u201d that \u201cgive you\u201d values, which strikes me as both exciting and scary (too meta?)",
        "user": "UHWC9PXBL",
        "ts": "1595600820.423200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "leQtV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "deep in the weeds here, but i think that the core of the ambiguity here is about identity vs value. in my head a value is something you can \u201cget to\u201d by eg a query or a computation (paths, links), whereas an identity refers to more of a physical object you might find in a place (something you can mutate). if you change a path or a computation, you get a different value. if you change \u201ca thing\u201d, the values update (properties of that thing update? language is hard). that kind of implies that a paths and computations are \u201cthings\u201d that \u201cgive you\u201d values, which strikes me as both exciting and scary (too meta?)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571049.299600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "32944FB5-F497-41F9-A0E3-D6036CDCFA86",
        "type": "message",
        "text": "if that\u2019s the case, buckets are things that contain things whereas tags are things that return or evaluate to values (lists of things). i think?\n\ni think the system needs to address both copy &amp; paste and linking but it needs to do so in a closed way (algebraically) ",
        "user": "UHWC9PXBL",
        "ts": "1595601044.426700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lOB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if that\u2019s the case, buckets are things that contain things whereas tags are things that return or evaluate to values (lists of things). i think?\n\ni think the system needs to address both copy & paste and linking but it needs to do so in a closed way (algebraically) "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571049.299600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "2CA9060D-35D5-4C8E-A438-16D74F9FD0B7",
        "type": "message",
        "text": "scope and name resolution!",
        "user": "UHWC9PXBL",
        "ts": "1595601248.427100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q5hPX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "scope and name resolution!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595594347.362500",
        "parent_user_id": "UKP3B2J5D",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "A3C2A6F2-1F29-4802-9D5C-F68C952E9124",
        "type": "message",
        "text": "<https://www.famicol.in/language_checklist.html|https://www.famicol.in/language_checklist.html>",
        "user": "UEBG0NPDK",
        "ts": "1595601788.427400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "biB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.famicol.in/language_checklist.html",
                                "text": "https://www.famicol.in/language_checklist.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595594347.362500",
        "parent_user_id": "UKP3B2J5D",
        "reactions": [
            {
                "name": "grin",
                "users": [
                    "U013ZLJARC7",
                    "UKP3B2J5D",
                    "UJ6LDMMN0"
                ],
                "count": 3
            },
            {
                "name": "rolling_on_the_floor_laughing",
                "users": [
                    "U01661S9F34"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "BC60B729-5536-4C13-8113-8BA60F181D92",
        "type": "message",
        "text": "<@UEBG0NPDK> <@UA14TGLTC> does that mean that clojure\u2019s EDN is a natural fit for 6NF or am i missing something?",
        "user": "UHWC9PXBL",
        "ts": "1595603621.429000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5oWax",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " does that mean that clojure\u2019s EDN is a natural fit for 6NF or am i missing something?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595489301.204200",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "F29A41E4-7650-413C-A22E-758891FF759E",
        "type": "message",
        "text": "(There needs to be a :sigh: reaction)",
        "user": "UC2A2ARPT",
        "ts": "1595603659.429900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xYCr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(There needs to be a :sigh: reaction)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595594347.362500",
        "parent_user_id": "UKP3B2J5D",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "F562536A-17AD-47A2-B0FF-78C41F7ACA19",
        "type": "message",
        "text": "Considering generics, one of the axes could be: how dynamic is polymorphism, and where is it handled? (Is it just based on data types, or are there protocols, or templates, or generics, etc)\n\nAlso... how large is the type-level part of the language? Is it just primitive hints like Int / String, can you define new types, or is it basically a whole other execution context (a la Idris)?",
        "user": "UC2A2ARPT",
        "ts": "1595603970.434100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1595604411.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bEeO+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Considering generics, one of the axes could be: how dynamic is polymorphism, and where is it handled? (Is it just based on data types, or are there protocols, or templates, or generics, etc)\n\nAlso... how large is the type-level part of the language? Is it just primitive hints like Int / String, can you define new types, or is it basically a whole other execution context (a la Idris)?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595594347.362500",
        "parent_user_id": "UKP3B2J5D",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "224276BF-7F53-4A1D-B5AC-6FE57D3BEA5E",
        "type": "message",
        "text": "Another axis (or, rather, a space): what details of the underlying stack do they reveal, redefine, or obscure?",
        "user": "UC2A2ARPT",
        "ts": "1595604479.435600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N8b=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another axis (or, rather, a space): what details of the underlying stack do they reveal, redefine, or obscure?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595594347.362500",
        "parent_user_id": "UKP3B2J5D",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "1C0DF261-6872-4242-B444-342F6C0ED07E",
        "type": "message",
        "text": "How are they meant to be evaluated? Effectful statements in order? Some sort of tree with branches in parallel? Some sort of search through a possibility space? No notion of evaluation at all? (Not all programming languages are meant to \"run\" on a \"computer\")",
        "user": "UC2A2ARPT",
        "ts": "1595604747.438800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gLJQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How are they meant to be evaluated? Effectful statements in order? Some sort of tree with branches in parallel? Some sort of search through a possibility space? No notion of evaluation at all? (Not all programming languages are meant to \"run\" on a \"computer\")"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595594347.362500",
        "parent_user_id": "UKP3B2J5D",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            },
            {
                "name": "thinking_face",
                "users": [
                    "U01661S9F34"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "E9DB474E-2F74-41E3-A3B5-6767B54D3A10",
        "type": "message",
        "text": "(Many of these points won't lie on a line unless you sort of... rank them from \"totally chill and normal and boring\" to \"very eccentric, don't invite to the office\", which I think is a wonderful way to rank ideas in computer science)",
        "user": "UC2A2ARPT",
        "ts": "1595604870.441300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1595609099.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iDuU=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(Many of these points won't lie on a line unless you sort of... rank them from \"totally chill and normal and boring\" to \"very eccentric, don't invite to the office\", which I think is a wonderful way to rank ideas in computer science)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595594347.362500",
        "parent_user_id": "UKP3B2J5D",
        "reactions": [
            {
                "name": "the_horns",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "844d9a07-fedd-405b-869a-00bb0bb1d9da",
        "type": "message",
        "text": "Instead of \"mutable variables\", I prefer 'pure functions and referentially transparent expressions' vs 'shared mutable state'. Curv is in the former category, but it supports mutable local variables and a `while` loop. Curv wants to be a better imperative language than Haskell.",
        "user": "UJN1TAYEQ",
        "ts": "1595612276.443400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7OMmY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Instead of \"mutable variables\", I prefer 'pure functions and referentially transparent expressions' vs 'shared mutable state'. Curv is in the former category, but it supports mutable local variables and a "
                            },
                            {
                                "type": "text",
                                "text": "while",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " loop. Curv wants to be a better imperative language than Haskell."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595594347.362500",
        "parent_user_id": "UKP3B2J5D",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3ed24df2-4842-4346-88b1-17117bb3aa97",
        "type": "message",
        "text": "I forgot about <http://itch.io|itch.io>! That is another great example of a modern Flash games like market! <http://poke.com|poke.com> looks interesting as well.\n\n&gt; but it's a way higher barrier to entry than flash ever was. There's no doing anything in Pico-8 without code but there was plenty of flash with no or minimal code.\nGood point. I can see that much of your argument is about barrier to entry and ease of use.  :+1:\n\nNow about your 4 things. I'm going to disagree with you on a few points:\n\n&gt; 1. being able to distribute as a single file. not entirely sure this is important but feel it's possible it is important\nI would like to point out that Flash _was not that different._ \nIn theory you could just \"play a swf\" file directly, but nobody did that. You still had to host a website with an HTML file (and probably a CSS file), and embed the swf file. And the user had to download or update their flash player on a regular basis.\nIn fact, nobody did that either! They uploaded their swf to Newgrounds, who did all the hosting work for them. The key here is the marketplace (Newgrounds).\n\nThat's not much different than the JS/WASM, HTML, CSS combo we have today. It's not really just \"one file\"...\nAn important part of the equation was that Newgrounds did a lot of that hosting work for you as a content creator.\nThere is no reason the same kind of thing couldn't be done for WASM or modern JS. In fact, that's what <http://itch.io|itch.io> and Pico-8 are doing!\n\nI would also like to point out that _you can embedd assets_ in the WASM binary!\nModern assets like 3D models and bitmap textures are also very different from Vector based assets (I will talk more about this below).\n\nThe key is that there was a convenient way to get from the content creation tool to the hosting site easily. That's a really good point!\nI just want to point out that there is nothing technologically preventing us from building something just as convenient today, it just hasn't been built yet...\n\n&gt; being able to stream the assets from that single file vs having to wait for the entire file to download. If 1 is important than so is this.\nI am actually not sure what you mean by _stream_ assets. It's been a long time since I programmed with flash (I did back in the day, but it was a looong time ago), but I'm pretty sure it didn't \"stream\" anything, at least not in the modern sense of sending bytes over a network a little bit at a time. Youtube didn't even exist until 2005, and when Youtube started, streaming technology was still pretty bad... If I'm wrong, please give me a source and correct me.\n\nI _think_ what you mean is compression. Flash was good at compression. It also had good \"time to first interaction\" latency. I totally agree that \"time to first interaction\" is super important and extremely under appreciated with modern computers. It's a big pet peeve of mine (and anyone who follows Jon Blow, Casey Muratori, and the handmade philosophy).,\n\nI would like to point out the Flash assets were almost entirely vector based. Vectors compress extremely well! They are just control points for a Bezier curve equation.\nThe internet also had much less bandwidth during the height of Flash, so in general the assets were smaller.\nI remember Flash animations that had a lot of bitmap assets instead of vectors. You got loading screens just as bad as today (worse in some cases).\n\nThe situation is actually better today for the end user from the tech standpoint. The internet has orders of magnitude more bandwidth, and the browser apis let us do actual proper streaming of data (through js download requests or websockets).\n\n&gt; working well on mobile in the browser (this is only semi-possible because Apple has so far refused to implement the needed APIs. In particular the fullscreen API so a webpage can go fullscreen (or close to it ) like a native app can and the orientation API so a webpage can force landscape view. Android Chrome/Firefox has had both of these for 6+ years and it hasn't ruined the browsing experience there.\nYeah. Modern Apple sucks. I agree. lol\n\n&gt; A well designed non-programmer friendly app for making things\n&gt; It wasn't just that the tech existed. It's that there was an app that let people easily use tech to make stuff.\nI think you make a really good point here. I would add that it's not just about the content creation app, but also the hosting and distribution sites like Newgrounds. Newgrounds was a \"proto-app-store\" in many ways.\n\n&gt; It could also be though the flash was just something that happened and it's time has passed.\nYou might be right here. It seems like the big game engines like Unity, and the proprietary app stores, both on mobile and desktop, have taken over the hole left by Flash.",
        "user": "U01661S9F34",
        "ts": "1595614891.443600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01661S9F34",
            "ts": "1595616366.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HiWc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I forgot about "
                            },
                            {
                                "type": "link",
                                "url": "http://itch.io",
                                "text": "itch.io"
                            },
                            {
                                "type": "text",
                                "text": "! That is another great example of a modern Flash games like market! "
                            },
                            {
                                "type": "link",
                                "url": "http://poke.com",
                                "text": "poke.com"
                            },
                            {
                                "type": "text",
                                "text": " looks interesting as well.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "but it's a way higher barrier to entry than flash ever was. There's no doing anything in Pico-8 without code but there was plenty of flash with no or minimal code."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good point. I can see that much of your argument is about barrier to entry and ease of use.  "
                            },
                            {
                                "type": "emoji",
                                "name": "+1"
                            },
                            {
                                "type": "text",
                                "text": "\n\nNow about your 4 things. I'm going to disagree with you on a few points:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "1. being able to distribute as a single file. not entirely sure this is important but feel it's possible it is important"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would like to point out that Flash "
                            },
                            {
                                "type": "text",
                                "text": "was not that different. ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nIn theory you could just \"play a swf\" file directly, but nobody did that. You still had to host a website with an HTML file (and probably a CSS file), and embed the swf file. And the user had to download or update their flash player on a regular basis.\nIn fact, nobody did that either! They uploaded their swf to Newgrounds, who did all the hosting work for them. The key here is the marketplace (Newgrounds).\n\nThat's not much different than the JS/WASM, HTML, CSS combo we have today. It's not really just \"one file\"...\nAn important part of the equation was that Newgrounds did a lot of that hosting work for you as a content creator.\nThere is no reason the same kind of thing couldn't be done for WASM or modern JS. In fact, that's what "
                            },
                            {
                                "type": "link",
                                "url": "http://itch.io",
                                "text": "itch.io"
                            },
                            {
                                "type": "text",
                                "text": " and Pico-8 are doing!\n\nI would also like to point out that "
                            },
                            {
                                "type": "text",
                                "text": "you can embedd assets",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in the WASM binary!\nModern assets like 3D models and bitmap textures are also very different from Vector based assets (I will talk more about this below).\n\nThe key is that there was a convenient way to get from the content creation tool to the hosting site easily. That's a really good point!\nI just want to point out that there is nothing technologically preventing us from building something just as convenient today, it just hasn't been built yet...\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "being able to stream the assets from that single file vs having to wait for the entire file to download. If 1 is important than so is this."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am actually not sure what you mean by "
                            },
                            {
                                "type": "text",
                                "text": "stream ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "assets. It's been a long time since I programmed with flash (I did back in the day, but it was a looong time ago), but I'm pretty sure it didn't \"stream\" anything, at least not in the modern sense of sending bytes over a network a little bit at a time. Youtube didn't even exist until 2005, and when Youtube started, streaming technology was still pretty bad... If I'm wrong, please give me a source and correct me.\n\nI "
                            },
                            {
                                "type": "text",
                                "text": "think ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "what you mean is compression. Flash was good at compression. It also had good \"time to first interaction\" latency. I totally agree that \"time to first interaction\" is super important and extremely under appreciated with modern computers. It's a big pet peeve of mine (and anyone who follows Jon Blow, Casey Muratori, and the handmade philosophy).,\n\nI would like to point out the Flash assets were almost entirely vector based. Vectors compress extremely well! They are just control points for a Bezier curve equation.\nThe internet also had much less bandwidth during the height of Flash, so in general the assets were smaller.\nI remember Flash animations that had a lot of bitmap assets instead of vectors. You got loading screens just as bad as today (worse in some cases).\n\nThe situation is actually better today for the end user from the tech standpoint. The internet has orders of magnitude more bandwidth, and the browser apis let us do actual proper streaming of data (through js download requests or websockets).\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "working well on mobile in the browser (this is only semi-possible because Apple has so far refused to implement the needed APIs. In particular the fullscreen API so a webpage can go fullscreen (or close to it ) like a native app can and the orientation API so a webpage can force landscape view. Android Chrome/Firefox has had both of these for 6+ years and it hasn't ruined the browsing experience there."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYeah. Modern Apple sucks. I agree. lol\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A well designed non-programmer friendly app for making things\nIt wasn't just that the tech existed. It's that there was an app that let people easily use tech to make stuff."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think you make a really good point here. I would add that it's not just about the content creation app, but also the hosting and distribution sites like Newgrounds. Newgrounds was a \"proto-app-store\" in many ways.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It could also be though the flash was just something that happened and it's time has passed."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You might be right here. It seems like the big game engines like Unity, and the proprietary app stores, both on mobile and desktop, have taken over the hole left by Flash."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595442804.152100",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "fcf5e798-9bbb-4580-a33e-429928cce127",
        "type": "message",
        "text": "In the abstract, if making a \"module\" is taking together N nodes in a graph such that internal connections are isolated from ones that go thru the module boundary, then not allowing hierarchy at all will limit the \"arity reduction\", since either there will be a ton of modules, or modules will contain a ton of nodes. Hierarchy will help with the cognitive complexity of the graph, IF the average amount of edges is low or very clustered. The problem with hierarchy is what happens when a new edge gets introduced, and the system doesn't allow re-running the modularization heuristics from zero :slightly_smiling_face:",
        "user": "UHDQ62M4P",
        "ts": "1595615267.444100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UHDQ62M4P",
            "ts": "1595615488.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xdmJ6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the abstract, if making a \"module\" is taking together N nodes in a graph such that internal connections are isolated from ones that go thru the module boundary, then not allowing hierarchy at all will limit the \"arity reduction\", since either there will be a ton of modules, or modules will contain a ton of nodes. Hierarchy will help with the cognitive complexity of the graph, IF the average amount of edges is low or very clustered. The problem with hierarchy is what happens when a new edge gets introduced, and the system doesn't allow re-running the modularization heuristics from zero "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595556744.290800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "20b3f051-df8e-40d6-8a80-96c4229b97aa",
        "type": "message",
        "text": "My TLDR; description of the \"ideal system\" we are describing looks like this:\n\n\u2022 A content creation tool that is polished and intuitive for artists (normies?  non-technical people?)\n\u2022 with low barrier to entry scripting / programming interface\n\u2022 A runtime that allows for a low \"time to first use\" latency metric and good compression (that might mean vector based, or some other easily compressed asset, or taking better advantage of modern data streaming technology)\n\u2022 Is tied to some hosting platform. Some \"app-store\" or \"marketplace\" like system that is integrated with the creation tool to provide creators with low friction content distribution and hosting.\nThe technology to build all of this exists today imo, but:\nIs there a place in the modern web (or modern computers in general if we include mobile devices) for such a platform?\nDoes it make sense to tie it to the web given the rise of mobile computing and politics like Apple's walled garden?",
        "user": "U01661S9F34",
        "ts": "1595616049.444600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01661S9F34",
            "ts": "1595620062.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OS7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My TLDR; description of the \"ideal system\" we are describing looks like this:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A content creation tool that is polished and intuitive for artists (normies?  non-technical people?)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "with low barrier to entry scripting / programming interface"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A runtime that allows for a low \"time to first use\" latency metric and good compression (that might mean vector based, or some other easily compressed asset, or taking better advantage of modern data streaming technology)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Is tied to some hosting platform. Some \"app-store\" or \"marketplace\" like system that is integrated with the creation tool to provide creators with low friction content distribution and hosting."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe technology to build all of this exists today imo, but:\nIs there a place in the modern web (or modern computers in general if we include mobile devices) for such a platform?\nDoes it make sense to tie it to the web given the rise of mobile computing and politics like Apple's walled garden?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595442804.152100",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "ULK0Z4MPV",
                    "UBSMEUXAA"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "ba8b3bf2-ba41-4f25-b672-dd30139aa223",
        "type": "message",
        "text": "I think that many companies are standardizing a workflow, that before writing any code you need to write a `design document` with the options on how to solve a problem and the chosen solution. A lot of times this document has the code changes required by any of the solution options.\nTo me the options that we didn't end up following seem as valuable as the chosen option, and those options should also be captured in code. A really easy way could be in separate branches, but then we loose visibility of them.\nIs anybody familiar with source control software or with patterns to work with source control that also keeps tracks of options considered but not followed at the end?",
        "user": "U85HCL7JP",
        "ts": "1595618648.446000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oJqR2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think that many companies are standardizing a workflow, that before writing any code you need to write a "
                            },
                            {
                                "type": "text",
                                "text": "design document",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with the options on how to solve a problem and the chosen solution. A lot of times this document has the code changes required by any of the solution options.\nTo me the options that we didn't end up following seem as valuable as the chosen option, and those options should also be captured in code. A really easy way could be in separate branches, but then we loose visibility of them.\nIs anybody familiar with source control software or with patterns to work with source control that also keeps tracks of options considered but not followed at the end?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595618648.446000",
        "reply_count": 7,
        "reply_users_count": 4,
        "latest_reply": "1595789520.122800",
        "reply_users": [
            "UUB7RA7PF",
            "UCUSW7WVD",
            "U85HCL7JP",
            "U016VUZGUUQ"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "1f19486b-02cd-413e-a1ff-f14ad2d48047",
        "type": "message",
        "text": "I can confirm regarding design documents (we called them Tech Design Docs - TDD - not the best name since it is confused with test driven development).\n\nRegarding documenting different options, usually we would consult the TDD or ask somebody, which is certainly not very approachable.\nAnd if there was a clearly better alternative to implement something, usually we would describe it in TODO comment next to the implementation.\n\nHowever, I wonder how often somebody really asks (why wasn't this done in this way), from my experience, I haven't seen that happening very often, at least not at the degree where reviewing all the previously considered options would be useful. But it does happen sometimes, and then TDDs usually worked out (but with lot of digging, figuring out the latest one and so on).\nJust thinking out loud, I might on the other hand find it useful if they were more available, but it is hard to imagine right now.",
        "user": "UUB7RA7PF",
        "ts": "1595619208.446300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UUB7RA7PF",
            "ts": "1595619287.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Stk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I can confirm regarding design documents (we called them Tech Design Docs - TDD - not the best name since it is confused with test driven development).\n\nRegarding documenting different options, usually we would consult the TDD or ask somebody, which is certainly not very approachable.\nAnd if there was a clearly better alternative to implement something, usually we would describe it in TODO comment next to the implementation.\n\nHowever, I wonder how often somebody really asks (why wasn't this done in this way), from my experience, I haven't seen that happening very often, at least not at the degree where reviewing all the previously considered options would be useful. But it does happen sometimes, and then TDDs usually worked out (but with lot of digging, figuring out the latest one and so on).\nJust thinking out loud, I might on the other hand find it useful if they were more available, but it is hard to imagine right now."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595618648.446000",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "530ec9e4-a06f-49d6-8ede-255c8e3aa7bb",
        "type": "message",
        "text": "Yeah, I'm not aware of existing solutions, but this is a problem I've often felt and tried to hack my way towards.\n\nOn my projects I use a system of layers so that I can keep track of past versions with fewer features. And continue to keep them working in CI: <http://akkartik.name/post/wart-layers>. Layers form a linear sequence, and I've often considered introducing branches. But I've never found a strong concrete use case and clean way to do this.\n\nOne easy approach may be branches as you mentioned coupled with links to those branches (on GitHub or wherever) sprinkled in a few key places that the branch modifies. I like links :slightly_smiling_face: (<https://futureofcoding.slack.com/archives/C5T9GPWFL/p1592285060323600?thread_ts=1592252831.319600&amp;cid=C5T9GPWFL>)",
        "user": "UCUSW7WVD",
        "ts": "1595620968.446900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1595620991.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4DfLy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I'm not aware of existing solutions, but this is a problem I've often felt and tried to hack my way towards.\n\nOn my projects I use a system of layers so that I can keep track of past versions with fewer features. And continue to keep them working in CI: "
                            },
                            {
                                "type": "link",
                                "url": "http://akkartik.name/post/wart-layers"
                            },
                            {
                                "type": "text",
                                "text": ". Layers form a linear sequence, and I've often considered introducing branches. But I've never found a strong concrete use case and clean way to do this.\n\nOne easy approach may be branches as you mentioned coupled with links to those branches (on GitHub or wherever) sprinkled in a few key places that the branch modifies. I like links "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " ("
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1592285060323600?thread_ts=1592252831.319600&cid=C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595618648.446000",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "3542934f-2f27-46c9-be4c-6950477a4a2b",
        "type": "message",
        "text": "Here's another attempt in an old project of mine, creating a subdirectory called 'alternatives' with clones of the top-level at specific points: <https://github.com/akkartik/wart/tree/master/alternatives/lite>. And each of them has a subdirectory called 'orig' with the baseline to compare against. Like I said, totally hacky.",
        "user": "UCUSW7WVD",
        "ts": "1595621059.447300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ugl1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's another attempt in an old project of mine, creating a subdirectory called 'alternatives' with clones of the top-level at specific points: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/akkartik/wart/tree/master/alternatives/lite"
                            },
                            {
                                "type": "text",
                                "text": ". And each of them has a subdirectory called 'orig' with the baseline to compare against. Like I said, totally hacky."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595618648.446000",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "8beabef5-6978-4234-9967-cab486a484da",
        "type": "message",
        "text": "One thing I'll say it's that it often makes sense to have hierarchy of the data model, and you'll almost always have a hierarchal execution model (e.g. data composition and function composition). But it's a mistake to shoe-horn one into the other. That's the mistake I see most often in OO programs: This part of the use case touches this data (class), so that class owns that slice of the behavior, e.g. Car.DriveToTheStore() (or maybe maybe MapNavigator.DriveToTheStorePart1() calls Car.DriveToThrStorePart2(), etc.)",
        "user": "UAVCC2X70",
        "ts": "1595622443.447600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1595622562.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bcg4k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One thing I'll say it's that it often makes sense to have hierarchy of the data model, and you'll almost always have a hierarchal execution model (e.g. data composition and function composition). But it's a mistake to shoe-horn one into the other. That's the mistake I see most often in OO programs: This part of the use case touches this data (class), so that class owns that slice of the behavior, e.g. Car.DriveToTheStore() (or maybe maybe MapNavigator.DriveToTheStorePart1() calls Car.DriveToThrStorePart2(), etc.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595556744.290800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "8a1dbb25-ae77-4724-8913-f70fa2dd1dcb",
        "type": "message",
        "text": "It's a bit chicken &amp; egg, whilst platforms accelerated the growth of the flash, the content existed first. I imagine modern equivalents might be able to compile and publish to many platforms, eg. apple / google app stores, native desktop, and the web.\n\nPerhaps animation is a nice gateway into programming. Tweening is a nice simple point-click exercise but the more complex behaviour you need, the deeper into programming you go.",
        "user": "ULK0Z4MPV",
        "ts": "1595622749.447900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/lc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's a bit chicken & egg, whilst platforms accelerated the growth of the flash, the content existed first. I imagine modern equivalents might be able to compile and publish to many platforms, eg. apple / google app stores, native desktop, and the web.\n\nPerhaps animation is a nice gateway into programming. Tweening is a nice simple point-click exercise but the more complex behaviour you need, the deeper into programming you go."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595442804.152100",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "amiga-tick",
                "users": [
                    "U01661S9F34"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7D4C823C-8317-458A-95D8-66E6158BC5F2",
        "type": "message",
        "text": "I\u2019ve been really enjoying this podcast. I don\u2019t always understand what Ryan is saying but it is interesting and relaxing :relieved:",
        "user": "UBM0S2AN4",
        "ts": "1595623223.450900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t+8AS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019ve been really enjoying this podcast. I don\u2019t always understand what Ryan is saying but it is interesting and relaxing "
                            },
                            {
                                "type": "emoji",
                                "name": "relieved"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595578576.302300",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "cde853c7-a707-4503-9cbf-46075ce215e2",
        "type": "message",
        "text": "&gt; Perhaps animation is a nice gateway into programming. Tweening is a nice simple point-click exercise but the more complex behaviour you need, the deeper into programming you go.\n:point_up: This right here is a key insight I think!\n\nFrom a \"FOC\" point of view. Flash served as a \"gentle intro to programming\" gateway drug for a generation of programmers.\nFlash was the 2000's equivalent of Basic for many people.\n\nWhat made Flash a good intro to programming tool? I think you just answered that question :smile:",
        "user": "U01661S9F34",
        "ts": "1595624049.460300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A2q91",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Perhaps animation is a nice gateway into programming. Tweening is a nice simple point-click exercise but the more complex behaviour you need, the deeper into programming you go."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "point_up"
                            },
                            {
                                "type": "text",
                                "text": " This right here is a key insight I think!\n\nFrom a \"FOC\" point of view. Flash served as a \"gentle intro to programming\" gateway drug for a generation of programmers.\nFlash was the 2000's equivalent of Basic for many people.\n\nWhat made Flash a good intro to programming tool? I think you just answered that question "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595442804.152100",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "ULK0Z4MPV"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0f8ffebc-2aa4-4bc5-ad93-db047cb0bc9e",
        "type": "message",
        "text": "I was thinking in an earlier thread how flash animation might be a good introduction to programming, and a lot of you here are working ways to democratise / make programming easier. So perhaps understanding how people learnt to program could offer insights into how to teach people to program and make programming in general less complex. So I'm curious, how did you learn to program?",
        "user": "ULK0Z4MPV",
        "ts": "1595624526.464200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m0h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was thinking in an earlier thread how flash animation might be a good introduction to programming, and a lot of you here are working ways to democratise / make programming easier. So perhaps understanding how people learnt to program could offer insights into how to teach people to program and make programming in general less complex. So I'm curious, how did you learn to program?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595624526.464200",
        "reply_count": 22,
        "reply_users_count": 14,
        "latest_reply": "1595770326.108200",
        "reply_users": [
            "ULK0Z4MPV",
            "U01661S9F34",
            "UKP3B2J5D",
            "UBN9AFS0N",
            "UHWC9PXBL",
            "U013866H7LY",
            "UR482RFPY",
            "UBM0S2AN4",
            "UCUSW7WVD",
            "UJ6LDMMN0",
            "U013ZLJARC7",
            "U0123H7JRDM",
            "UC6997THT",
            "UDQBTJ211"
        ],
        "subscribed": true,
        "last_read": "1595770326.108200",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UKP3B2J5D",
                    "UBSMEUXAA"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "0bafdd76-cb7c-45e4-8f19-adf9164fd2f0",
        "type": "message",
        "text": "I learnt the basics via <https://store.steampowered.com/app/383730/RPG_Maker_2000/|RPG Maker 2000>. You can use it to make little gameboy-like RPG games with point n' click coding (I wanted to make my own Pokemon obviously).\n\nAt first if I wanted something different to happen I just duplicated the map, so if you entered the forest, and went back to town you'd end up in an entirely new but identical map with characters saying new things. I had 100s of identical maps but the great thing about the RPG Maker is you could download and see inside other people games.\n\nSo I downloaded someone else's game and they only had one copy of each map and instead they used these things called switches (boolean values) to make different things happen after particular events. Soon my games had 1000s of switches. Eventually, I downloaded another game and it had barely any switches instead it had a single storyline variable that would increment by one every time something significant happened.\n\nFrom there I learnt to use variables in more complex ways, and whilst I only pursued programming as a career fairly recently, I've used a basic level of programming with almost everything I do, and that's stuck with me as a foundation ever since.",
        "user": "ULK0Z4MPV",
        "ts": "1595624541.464300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULK0Z4MPV",
            "ts": "1595625079.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GxUGD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I learnt the basics via "
                            },
                            {
                                "type": "link",
                                "url": "https://store.steampowered.com/app/383730/RPG_Maker_2000/",
                                "text": "RPG Maker 2000"
                            },
                            {
                                "type": "text",
                                "text": ". You can use it to make little gameboy-like RPG games with point n' click coding (I wanted to make my own Pokemon obviously).\n\nAt first if I wanted something different to happen I just duplicated the map, so if you entered the forest, and went back to town you'd end up in an entirely new but identical map with characters saying new things. I had 100s of identical maps but the great thing about the RPG Maker is you could download and see inside other people games.\n\nSo I downloaded someone else's game and they only had one copy of each map and instead they used these things called switches (boolean values) to make different things happen after particular events. Soon my games had 1000s of switches. Eventually, I downloaded another game and it had barely any switches instead it had a single storyline variable that would increment by one every time something significant happened.\n\nFrom there I learnt to use variables in more complex ways, and whilst I only pursued programming as a career fairly recently, I've used a basic level of programming with almost everything I do, and that's stuck with me as a foundation ever since."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595624526.464200",
        "parent_user_id": "ULK0Z4MPV",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UR482RFPY"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "175bdaf5-76fc-425f-90f5-4e1005a3351f",
        "type": "message",
        "text": "<@U01661S9F34> thought it would be interesting to make a thread about this <https://futureofcoding.slack.com/archives/C5T9GPWFL/p1595624526464200>",
        "user": "ULK0Z4MPV",
        "ts": "1595624603.464700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1595624526464200",
                "fallback": "[July 24th, 2020 2:02 PM] ryan.king1809: I was thinking in an earlier thread how flash animation might be a good introduction to programming, and a lot of you here are working ways to democratise / make programming easier. So perhaps understanding how people learnt to program could offer insights into how to teach people to program and make programming in general less complex. So I'm curious, how did you learn to program?",
                "ts": "1595624526.464200",
                "author_id": "ULK0Z4MPV",
                "author_subname": "Ryan King",
                "channel_id": "C5T9GPWFL",
                "channel_name": "general",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "I was thinking in an earlier thread how flash animation might be a good introduction to programming, and a lot of you here are working ways to democratise / make programming easier. So perhaps understanding how people learnt to program could offer insights into how to teach people to program and make programming in general less complex. So I'm curious, how did you learn to program?",
                "author_name": "Ryan King",
                "author_link": "https://futureofcoding.slack.com/team/ULK0Z4MPV",
                "author_icon": "https://avatars.slack-edge.com/2020-05-07/1111736156419_84fdccb39d9b31c2626b_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1595624526464200",
                "footer": "Thread in #general"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+H1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01661S9F34"
                            },
                            {
                                "type": "text",
                                "text": " thought it would be interesting to make a thread about this "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1595624526464200"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595442804.152100",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U01661S9F34"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "61b2955b-3822-4113-92c4-21619c38cf84",
        "type": "message",
        "text": "When I was a kid, we would get the \"Things You Never Knew Existed\" catalog in the mail. For those not familiar, it was full of mostly useless \"as seen on TV\" type products. I loved looking at all the weird stuff in that magazine...\n\nI somehow convinced my parents to order two things from that magazine. First was a deck of Pokemon cards. Second was \"Interplay's learn to program BASIC on CD-ROM\"\nI am a product of late 90's edu-tainment :rolling_on_the_floor_laughing:\n\nI found a youtube video of \"learn to program BASIC\" for your horror and entertainment:\n<https://www.youtube.com/watch?v=uBYz9syhNAA>",
        "user": "U01661S9F34",
        "ts": "1595625356.465400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01661S9F34",
            "ts": "1595625391.000000"
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Learn to Program Basic: The Movie (1998, Interplay)",
                "title_link": "https://www.youtube.com/watch?v=uBYz9syhNAA",
                "author_name": "Khalbrae",
                "author_link": "https://www.youtube.com/channel/UCixwylFMG0iRLMskabyf5IA",
                "thumb_url": "https://i.ytimg.com/vi/uBYz9syhNAA/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Learn to Program Basic: The Movie (1998, Interplay)",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https://www.youtube.com/embed/uBYz9syhNAA?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https://www.youtube.com/watch?v=uBYz9syhNAA",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=uBYz9syhNAA"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fQDw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When I was a kid, we would get the \"Things You Never Knew Existed\" catalog in the mail. For those not familiar, it was full of mostly useless \"as seen on TV\" type products. I loved looking at all the weird stuff in that magazine...\n\nI somehow convinced my parents to order two things from that magazine. First was a deck of Pokemon cards. Second was \"Interplay's learn to program BASIC on CD-ROM\"\nI am a product of late 90's edu-tainment "
                            },
                            {
                                "type": "emoji",
                                "name": "rolling_on_the_floor_laughing"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI found a youtube video of \"learn to program BASIC\" for your horror and entertainment:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=uBYz9syhNAA"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595624526.464200",
        "parent_user_id": "ULK0Z4MPV",
        "reactions": [
            {
                "name": "anguished",
                "users": [
                    "ULK0Z4MPV"
                ],
                "count": 1
            },
            {
                "name": "smile",
                "users": [
                    "UKP3B2J5D",
                    "U013ZLJARC7"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "74f3c9a2-dfdb-411a-baec-eb4e4d22cf9e",
        "type": "message",
        "text": "<@U01661S9F34> this aesthetic is clearly what FoC projects are missing",
        "user": "ULK0Z4MPV",
        "ts": "1595625690.465800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wk4x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01661S9F34"
                            },
                            {
                                "type": "text",
                                "text": " this aesthetic is clearly what FoC projects are missing"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595624526.464200",
        "parent_user_id": "ULK0Z4MPV",
        "reactions": [
            {
                "name": "rolling_on_the_floor_laughing",
                "users": [
                    "U01661S9F34"
                ],
                "count": 1
            },
            {
                "name": "ok_hand",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "1846AFE7-C118-4E0C-B5F6-494F3D990D88",
        "type": "message",
        "text": "So technically I was taught QBasic in secondary school but I don\u2019t remember any of it. \n\nThen first year in uni picked up Java but never got to the point where I felt competent so I dropped it. \n\nThen I found Python In year 3 I think and I loved it! Compared to C, which was another language I dabbled in because I wanted to write embedded systems; It had/has better UX. With C, I guess I was way too sloppy and would get frustrated by the segmentation faults + it was really low level while python had this robust standard library. \nTo get proficient, my gateway drug was competitive programming - Hackerrank in particular. It was/is fun coming up with solution and it appealed to my math/competitive side a lot. Was a side thing and planned to write embedded systems but here I am :slightly_smiling_face:",
        "user": "UKP3B2J5D",
        "ts": "1595626294.474900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JAqSA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So technically I was taught QBasic in secondary school but I don\u2019t remember any of it. \n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Then first year in uni picked up Java but never got to the point where I felt competent so I dropped it. \n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Then I found Python In year 3 I think and I loved it! Compared to C, which was another language I dabbled in because I wanted to write embedded systems; It had/has better UX. With C, I guess I was way too sloppy and would get frustrated by the segmentation faults + it was really low level while python had this robust standard library. \nTo get proficient, my gateway drug was competitive programming - Hackerrank in particular. It was/is fun coming up with solution and it appealed to my math/competitive side a lot. Was a side thing and planned to write embedded systems but here I am "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595624526.464200",
        "parent_user_id": "ULK0Z4MPV",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U01661S9F34"
                ],
                "count": 2
            },
            {
                "name": "sunglasses",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "2116E8A2-8EA5-4B79-A52F-1DEA73BCE4EA",
        "type": "message",
        "text": "<@UAVCC2X70> to illustrate with another example, paper.cut() this for me is a wrong way to model stuff. Somethings are just data and can\u2019t do anything. They should be acted upon instead. It should be cut(paper).",
        "user": "UKP3B2J5D",
        "ts": "1595626800.480700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bl23",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " to illustrate with another example, paper.cut() this for me is a wrong way to model stuff. Somethings are just data and can\u2019t do anything. They should be acted upon instead. It should be cut(paper)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595556744.290800",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0af44bfc-c867-4343-a763-bc3afbfaea54",
        "type": "message",
        "text": "Multimethods are useful here.",
        "user": "UCUSW7WVD",
        "ts": "1595626941.480900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "atrmK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Multimethods are useful here."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595556744.290800",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "51ae2c31-fa21-4be6-bd0e-aa7463700e58",
        "type": "message",
        "text": "html, then copypasting javascript without knowing what I was doing (20 years ago), then c",
        "user": "UBN9AFS0N",
        "ts": "1595627612.484500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q21",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "html, then copypasting javascript without knowing what I was doing (20 years ago), then c"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595624526.464200",
        "parent_user_id": "ULK0Z4MPV",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    }
]