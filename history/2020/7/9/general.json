[
    {
        "client_msg_id": "7f3da900-1602-4a54-8a9a-df43efacad2b",
        "type": "message",
        "text": "The premise feels overblown for the rest of the content. Generating RDF triples from source code is not raising. At best it is flattening (not lowering). The distinction becomes clearer if cast in terms of information content. Lowering takes away information. Not lowering is feasible. But raising is _adding_ information. What can we do to add information that the code doesn't already contain? That's a really hard problem that the article doesn't address.\n\nFor starters, mining just the code has limited value because there are many properties of a program that someone reading it can (laboriously) deduce that don't actually exist in software. You may know things about the production environment or expected inputs based on past experience. You may inspect runtime using a debugger.\n\nBottomline: the premise is a well-known holy grail akin to \"world peace\", and the rest of the content is doable/novel but of far more limited utility.",
        "user": "UCUSW7WVD",
        "ts": "1594253006.086900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1594253152.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Io4l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The premise feels overblown for the rest of the content. Generating RDF triples from source code is not raising. At best it is flattening (not lowering). The distinction becomes clearer if cast in terms of information content. Lowering takes away information. Not lowering is feasible. But raising is "
                            },
                            {
                                "type": "text",
                                "text": "adding",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " information. What can we do to add information that the code doesn't already contain? That's a really hard problem that the article doesn't address.\n\nFor starters, mining just the code has limited value because there are many properties of a program that someone reading it can (laboriously) deduce that don't actually exist in software. You may know things about the production environment or expected inputs based on past experience. You may inspect runtime using a debugger.\n\nBottomline: the premise is a well-known holy grail akin to \"world peace\", and the rest of the content is doable/novel but of far more limited utility."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594240980.085300",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "0f5e01af-786a-4a32-b484-db3768ca79e1",
        "type": "message",
        "text": "Does anyone have database recommendations for user generated data structures? I'm currently using postgres and it's feeling a little inadequate. For example, a user might have simple formula like `10 + 5` which I store as a string, and I have a `numberCache` column storing `15` for querying. But a formula can also be a string, or a date, so now I need a `stringCache` column and a `boolCache` column. And then there's user input `if statements` which I haven't thought about yet and may need to calculate on the fly.\n\nI have dynamic types, and dynamic relationships, and I'm wrangling postgres into shape, but I can't help but feel there must be something better suited? I was thinking of playing with something more schema-less like mongoDB. Any advice would be appreciated!",
        "user": "ULK0Z4MPV",
        "ts": "1594255230.095900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULK0Z4MPV",
            "ts": "1594256107.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sea",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does anyone have database recommendations for user generated data structures? I'm currently using postgres and it's feeling a little inadequate. For example, a user might have simple formula like "
                            },
                            {
                                "type": "text",
                                "text": "10 + 5",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " which I store as a string, and I have a "
                            },
                            {
                                "type": "text",
                                "text": "numberCache",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " column storing "
                            },
                            {
                                "type": "text",
                                "text": "15",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for querying. But a formula can also be a string, or a date, so now I need a "
                            },
                            {
                                "type": "text",
                                "text": "stringCache",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " column and a "
                            },
                            {
                                "type": "text",
                                "text": "boolCache",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " column. And then there's user input "
                            },
                            {
                                "type": "text",
                                "text": "if statements",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " which I haven't thought about yet and may need to calculate on the fly.\n\nI have dynamic types, and dynamic relationships, and I'm wrangling postgres into shape, but I can't help but feel there must be something better suited? I was thinking of playing with something more schema-less like mongoDB. Any advice would be appreciated!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594255230.095900",
        "reply_count": 18,
        "reply_users_count": 8,
        "latest_reply": "1594326695.166800",
        "reply_users": [
            "UR482RFPY",
            "UCUSW7WVD",
            "ULK0Z4MPV",
            "UC2A2ARPT",
            "UEQ6M68H0",
            "U013ZLJARC7",
            "UN9SCH5RD",
            "U016LEA3J1H"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "dcdafbcb-28b2-48f2-82d6-bda26302510e",
        "type": "message",
        "text": "What about using a JSON type in postgres? <https://www.postgresql.org/docs/10/datatype-json.html|https://www.postgresql.org/docs/10/datatype-json.html>",
        "user": "UR482RFPY",
        "ts": "1594257532.096300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yG=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What about using a JSON type in postgres? "
                            },
                            {
                                "type": "link",
                                "url": "https://www.postgresql.org/docs/10/datatype-json.html",
                                "text": "https://www.postgresql.org/docs/10/datatype-json.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV"
    },
    {
        "client_msg_id": "00353437-acfc-480a-8269-d7cccc50048b",
        "type": "message",
        "text": "I'd need more information about what you're trying to do. \"User generated data structures\" doesn't seem like a well-posed category that one can make generalizations about. For example, why would you want to cache the result of `10 + 5`? Repeatedly recomputing it would be almost certainly cheaper than a database lookup. If it _is_ worth caching, the first choice of cache is in memory, which would again be much faster than a database lookup. Do you have millions of users running billions of programs a day? If not, a simple program without a database or caching would likely be sufficient for your purposes.",
        "user": "UCUSW7WVD",
        "ts": "1594258355.096500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V0K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd need more information about what you're trying to do. \"User generated data structures\" doesn't seem like a well-posed category that one can make generalizations about. For example, why would you want to cache the result of "
                            },
                            {
                                "type": "text",
                                "text": "10 + 5",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "? Repeatedly recomputing it would be almost certainly cheaper than a database lookup. If it "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " worth caching, the first choice of cache is in memory, which would again be much faster than a database lookup. Do you have millions of users running billions of programs a day? If not, a simple program without a database or caching would likely be sufficient for your purposes."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "1e1deb8d-4c36-4dc7-b01d-50238417e729",
        "type": "message",
        "text": "Yes, you're right, maybe I'm overthinking it and should just compute on the fly. The most complex user inputs might have many dependencies. ie. `v1 = 100`, `v2 = v1+50`, `v3 = v1 + v2` - but I wouldn't expect a chain greater than 20-30 dependencies. It's just important the data is queryable &amp; aggregatable in the future. And I wouldn't be aggregating more than than 10,000 items\n\nI find postgres json columns aren't very great for queries that go more then 1 level deep but maybe I can make things as flat as possible.\n\nThanks for your help!",
        "user": "ULK0Z4MPV",
        "ts": "1594264021.096700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j4o3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, you're right, maybe I'm overthinking it and should just compute on the fly. The most complex user inputs might have many dependencies. ie. "
                            },
                            {
                                "type": "text",
                                "text": "v1 = 100",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "v2 = v1+50",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "v3 = v1 + v2",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " - but I wouldn't expect a chain greater than 20-30 dependencies. It's just important the data is queryable & aggregatable in the future. And I wouldn't be aggregating more than than 10,000 items\n\nI find postgres json columns aren't very great for queries that go more then 1 level deep but maybe I can make things as flat as possible.\n\nThanks for your help!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8c84d00d-832e-4819-b50f-821b7c78e1d5",
        "type": "message",
        "text": "I find the syntax of Postgres JSON really frustrating to work with. I also have mixed feelings about schemaless, but it does seem like a slightly better fit for this kind of a use case, assuming you go with something that lets you do your queries and aggregations in the DB rather than the client.",
        "user": "UC2A2ARPT",
        "ts": "1594266330.097200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JeB4s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I find the syntax of Postgres JSON really frustrating to work with. I also have mixed feelings about schemaless, but it does seem like a slightly better fit for this kind of a use case, assuming you go with something that lets you do your queries and aggregations in the DB rather than the client."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "ULK0Z4MPV"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8ae65479-78b4-4c5a-842f-92f58edc29e5",
        "type": "message",
        "text": "<@ULK0Z4MPV> I'm still curious to hear more about an app where the database has code expressions.",
        "user": "UCUSW7WVD",
        "ts": "1594267349.097500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Atu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULK0Z4MPV"
                            },
                            {
                                "type": "text",
                                "text": " I'm still curious to hear more about an app where the database has code expressions."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV"
    },
    {
        "client_msg_id": "e798b331-1eea-43b5-93d9-1b7469e3a7ab",
        "type": "message",
        "text": "I'm building an interactive gantt chart tool. A quick 2 min overview here <https://youtu.be/Anv8-3sZFVE>",
        "user": "ULK0Z4MPV",
        "ts": "1594268497.097700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Gantt Week 1",
                "title_link": "https://youtu.be/Anv8-3sZFVE",
                "author_name": "Coincraft",
                "author_link": "https://www.youtube.com/channel/UCCiOKnUhV48EjhXhh9TdPDw",
                "thumb_url": "https://i.ytimg.com/vi/Anv8-3sZFVE/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Gantt Week 1",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/Anv8-3sZFVE?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/Anv8-3sZFVE",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/Anv8-3sZFVE"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ArRZN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm building an interactive gantt chart tool. A quick 2 min overview here "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/Anv8-3sZFVE"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ac045a26-ad9a-4da3-8dd9-a0c7fa82491e",
        "type": "message",
        "text": "A user will have many `tasks` and `resources` . A task has various properties (including custom properties) same with resources. A task property may be dependant on other tasks and resources.",
        "user": "ULK0Z4MPV",
        "ts": "1594268644.098000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w+L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A user will have many "
                            },
                            {
                                "type": "text",
                                "text": "tasks",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "resources",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " . A task has various properties (including custom properties) same with resources. A task property may be dependant on other tasks and resources."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV"
    },
    {
        "client_msg_id": "9a8463bf-8586-4d97-8c0c-c105e10073f6",
        "type": "message",
        "text": "All properties can be formulas, stored as strings. The idea is to try to be very excel-like and the user could theoretically use this for any time / scheduling based calculations.",
        "user": "ULK0Z4MPV",
        "ts": "1594268807.098200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Rdz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "All properties can be formulas, stored as strings. The idea is to try to be very excel-like and the user could theoretically use this for any time / scheduling based calculations."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV"
    },
    {
        "client_msg_id": "871f1399-bfe7-4120-ab03-5862979a3353",
        "type": "message",
        "text": "For building an interactive gantt chart tool, my Beads language would offer a RAM database that has number, string, image, sound, records, pointers, etc., and will greatly simplify the tricky issue of resizing your interface to fit different screen resolutions your software will be run on. Desktop resolutions are around 100 dpi, but mobile can reach 500, and any drawing in pixels will not work well, nor will calculating sizes in points work in all cases, as the physical screen sizes vary quite a bit as well. In a Gantt chart program, the majority of the code will be related to drawing, not calculating dates.\n\nBut you might be happier using an OpenGL foundation because you may want to zoom smoothly in real time, and nothing zooms more beautifully than 3D rendered stuff which of course can just move the camera to zoom without rebuilding anything.",
        "user": "UEQ6M68H0",
        "ts": "1594268848.098400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8Mv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For building an interactive gantt chart tool, my Beads language would offer a RAM database that has number, string, image, sound, records, pointers, etc., and will greatly simplify the tricky issue of resizing your interface to fit different screen resolutions your software will be run on. Desktop resolutions are around 100 dpi, but mobile can reach 500, and any drawing in pixels will not work well, nor will calculating sizes in points work in all cases, as the physical screen sizes vary quite a bit as well. In a Gantt chart program, the majority of the code will be related to drawing, not calculating dates.\n\nBut you might be happier using an OpenGL foundation because you may want to zoom smoothly in real time, and nothing zooms more beautifully than 3D rendered stuff which of course can just move the camera to zoom without rebuilding anything."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV"
    },
    {
        "client_msg_id": "1332dd7a-cb24-44bc-90b3-8ac5c8488569",
        "type": "message",
        "text": "<@UEQ6M68H0> thanks but I have no issues with drawing for the time being. Hopefully I can test out beads when I have a spare moment though :)",
        "user": "ULK0Z4MPV",
        "ts": "1594269192.098700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "104ti",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " thanks but I have no issues with drawing for the time being. Hopefully I can test out beads when I have a spare moment though :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV"
    },
    {
        "client_msg_id": "A4EC4C36-E086-40A4-BA42-0AF67EBC450F",
        "type": "message",
        "text": "One way to categorize FoC projects is to consider the following spectrum. (Go with me here \u2014 resist the urge to treat this as a multidimensional space.)\n\nIn the center, we have projects that resemble typical programming languages. These tools are designed with particular semantics that the programmer will employ to structure their problem solving. They are general purpose. They don't have much regard for the particular kinds of problems being solved. This is your Java, Clojure, Vulkan, brainfuck, etc.\n\nOff to one side, you have programming tools that have both tightly defined semantics and a focus on solving particular kinds of problems. These are specialized. This is Excel, Notion, Max/MSP, OpenGL, bash, etc.\n\nOff to the other side, we have programming tools that, while they still have semantics, don't expect you to work entirely within those semantics. They have even less regard for the problem domain. These are tools that expect you to first build some new tools from or within them, then solve your problem with those tools. This is Racket, and arguably REST, RDF, stored procedures in a DB, and other things.\n\nNow my question: are you building an FoC project that falls into the latter category? If so, talk about that a bit. What's the rationale?",
        "user": "UC2A2ARPT",
        "ts": "1594276999.116700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/r0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One way to categorize FoC projects is to consider the following spectrum. (Go with me here \u2014 resist the urge to treat this as a multidimensional space.)\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "In the center, we have projects that resemble typical programming languages. These tools are designed with particular semantics that the programmer will employ to structure their problem solving. They are general purpose. They don't have much regard for the particular kinds of problems being solved. This is your Java, Clojure, Vulkan, brainfuck, etc.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Off to one side, you have programming tools that have both tightly defined semantics and a focus on solving particular kinds of problems. These are specialized. This is Excel, Notion, Max/MSP, OpenGL, bash, etc.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Off to the other side, we have programming tools that, while they still have semantics, don't expect you to work entirely within those semantics. They have even less regard for the problem domain. These are tools that expect you to first build some new tools from or within them, then solve your problem with those tools. This is Racket, and arguably REST, RDF, stored procedures in a DB, and other things.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Now my question: are you building an FoC project that falls into the latter category? If so, talk about that a bit. What's the rationale?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594276999.116700",
        "reply_count": 27,
        "reply_users_count": 6,
        "latest_reply": "1594388063.199100",
        "reply_users": [
            "UJ6LDMMN0",
            "U5STGTB3J",
            "UHWC9PXBL",
            "UC2A2ARPT",
            "U8A5MS6R1",
            "UJBAJNFLK"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "a958c610-4773-4d75-8973-b6d9ef42d99a",
        "type": "message",
        "text": "One important aspect of what I want to build, is the possibility for the users to define their own visual representations for their programming artifacts. Of course the programming environment will come with some visual semantics as building blocks or general tools, but I would like to allow anybody to add new one.\n\nThe idea is that the history of visual programming is full of unsuccessful attempts (for an \"incomplete\"/old list see for example: <http://blog.interfacevision.com/design/design-visual-progarmming-languages-snapshots/>). So I feel that finding and designing the \"good one\" from start is quite hard and will most certainly miss essentials features. So I want to provide some core functionalities that are enough to build complete things but also let some other visual tools emerge from actual usages.\n\nThis idea is in fact at the core of my project.",
        "user": "UJ6LDMMN0",
        "ts": "1594279127.117000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJ6LDMMN0",
            "ts": "1594319548.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0=j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One important aspect of what I want to build, is the possibility for the users to define their own visual representations for their programming artifacts. Of course the programming environment will come with some visual semantics as building blocks or general tools, but I would like to allow anybody to add new one.\n\nThe idea is that the history of visual programming is full of unsuccessful attempts (for an \"incomplete\"/old list see for example: "
                            },
                            {
                                "type": "link",
                                "url": "http://blog.interfacevision.com/design/design-visual-progarmming-languages-snapshots/"
                            },
                            {
                                "type": "text",
                                "text": "). So I feel that finding and designing the \"good one\" from start is quite hard and will most certainly miss essentials features. So I want to provide some core functionalities that are enough to build complete things but also let some other visual tools emerge from actual usages.\n\nThis idea is in fact at the core of my project."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "23c67236-8324-4d84-bcbe-e33946549766",
        "type": "message",
        "text": "In fact, \"visual representations of programming artifacts\" will be first class citizens in my programming environment, I guess in a similar way that functions are first class citizens in function oriented programming.",
        "user": "UJ6LDMMN0",
        "ts": "1594279299.117300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b077T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In fact, \"visual representations of programming artifacts\" will be first class citizens in my programming environment, I guess in a similar way that functions are first class citizens in function oriented programming."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "86a01ce6-dbcc-4f2c-9647-28bf536ef527",
        "type": "message",
        "text": "<@UCUSW7WVD> There is value in placing the extracted triples in the context of an ontology, thus facilitating richer queries and automatic reasoning about the code. It \"adds\" knowledge to the codebase in the same way that having knowledge of programming adds to one's understanding of a given piece of code.\n\nI think it would be quite interesting to combine the ideas in that article with the direction seen in Codeq: <https://blog.datomic.com/2012/10/codeq.html>",
        "user": "U013ZLJARC7",
        "ts": "1594280386.117700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q2SRe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " There is value in placing the extracted triples in the context of an ontology, thus facilitating richer queries and automatic reasoning about the code. It \"adds\" knowledge to the codebase in the same way that having knowledge of programming adds to one's understanding of a given piece of code.\n\nI think it would be quite interesting to combine the ideas in that article with the direction seen in Codeq: "
                            },
                            {
                                "type": "link",
                                "url": "https://blog.datomic.com/2012/10/codeq.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594240980.085300",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "11f40a90-4806-4078-b400-ef039b32d72e",
        "type": "message",
        "text": "You might consider a graph database for storing the (ahem) graph?",
        "user": "U013ZLJARC7",
        "ts": "1594280703.118000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uFs3B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You might consider a graph database for storing the (ahem) graph?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV"
    },
    {
        "client_msg_id": "3DF08D3B-2596-437B-9A78-257547806C30",
        "type": "message",
        "text": "I really appreciate <@UE1JQM9HQ>\u2019s:\n\n&gt; It\u2019s interesting to note that it is written as an invitation to imagine a better world.\n&gt; \nBecause the two things we all seem to like most is (a) imagining a better world and (b) telling other people why their imagined version of a better world isn\u2019t going to work. ;-)",
        "user": "U5STGTB3J",
        "ts": "1594282954.120300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ifm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really appreciate "
                            },
                            {
                                "type": "user",
                                "user_id": "UE1JQM9HQ"
                            },
                            {
                                "type": "text",
                                "text": "\u2019s:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It\u2019s interesting to note that it is written as an invitation to imagine a better world.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nBecause the two things we all seem to like most is (a) imagining a better world and (b) telling other people why their imagined version of a better world isn\u2019t going to work. ;-)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594240980.085300",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "d1e97509-c590-4163-83f5-fd6f2f9acf01",
        "type": "message",
        "text": "<@UCUSW7WVD> The representation itself does not add or remove any semantics, but once you see code as data, the semantics are added in the queries, visualizations you can do with that data. It is the act of formulating thought through those analysese that is the key.",
        "user": "UE1JQM9HQ",
        "ts": "1594283395.123900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE1JQM9HQ",
            "ts": "1594283398.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1uET",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " The representation itself does not add or remove any semantics, but once you see code as data, the semantics are added in the queries, visualizations you can do with that data. It is the act of formulating thought through those analysese that is the key."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594240980.085300",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "bba1b802-3ccb-4591-b79a-25cc9eb2d840",
        "type": "message",
        "text": "Did you guys know about this one - <https://brython.info/index.html>",
        "user": "UPVBV34EL",
        "ts": "1594283860.129300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Brython",
                "title_link": "https://brython.info/index.html",
                "text": "Brython",
                "fallback": "Brython",
                "from_url": "https://brython.info/index.html",
                "service_icon": "https://brython.info/favicon.png",
                "service_name": "brython.info",
                "id": 1,
                "original_url": "https://brython.info/index.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1gx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Did you guys know about this one - "
                            },
                            {
                                "type": "link",
                                "url": "https://brython.info/index.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594283860.129300",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1594373051.194900",
        "reply_users": [
            "UKP3B2J5D",
            "UPVBV34EL"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "4D48FE0A-D297-43D4-8C08-11F2F16205D7",
        "type": "message",
        "text": "I\u2019m having a hard time resisting that urge to at least turn this into a 2-by-2, but ok\u2026 I\u2019ll play by the rules.\n\nGiven that spectrum I guess I fall into the latter extreme, because I think the power that programming gives to programmers is to improve their own process and often through building their own tools (albeit \u201ctool\u201d here can have a much broader definition). If you can program, you can make computers do things that regular people can\u2019t make them do. \n\nTo democratize access to that power, a great alternative to teaching everybody how to code is to instead make building things easier. And I still believe that is very much possible, because we currently live deep in just one specific branch of the solution space which was strongly influenced by the needs to not just create things, but to satisfy certain success metrics (revenue, popularity, engagement, etc.).\n\nThat\u2019s why we can find so many promising ideas closer to the trunk of the tree in the papers of the 60-80s, when using computers was much closer to programming them, and when visions were mostly driven by imagination and less warped by specific incentives.\n\nThe most important reason for giving people the power to build their own tools instead of building them for them is that they know what they need best and I will never be as good as them to really understand what they really want or need. They might not understand it fully themselves. That\u2019s why they need to build it themselves. They need to invent it themselves. They need to discover solutions on their own. And to do so, they need to have the power to do that. And that needs to be simpler than it is today.",
        "user": "U5STGTB3J",
        "ts": "1594284474.136400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oCe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019m having a hard time resisting that urge to at least turn this into a 2-by-2, but ok\u2026 I\u2019ll play by the rules.\n\nGiven that spectrum I guess I fall into the latter extreme, because I think the power that programming gives to programmers is to improve their own process and often through building their own tools (albeit \u201ctool\u201d here can have a much broader definition). If you can program, you can make computers do things that regular people can\u2019t make them do. \n\nTo democratize access to that power, a great alternative to teaching everybody how to code is to instead make building things easier. And I still believe that is very much possible, because we currently live deep in just one specific branch of the solution space which was strongly influenced by the needs to not just create things, but to satisfy certain success metrics (revenue, popularity, engagement, etc.).\n\n"
                            },
                            {
                                "type": "text",
                                "text": "That\u2019s why we can find so many promising ideas closer to the trunk of the tree in the papers of the 60-80s, when using computers was much closer to programming them, and when visions were mostly driven by imagination and less warped by specific incentives.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "The most important reason for giving people the power to build their own tools instead of building them for them is that they know what they need best and I will never be as good as them to really understand what they really want or need. They might not understand it fully themselves. That\u2019s why they need to build it themselves. They need to invent it themselves. They need to discover solutions on their own. And to do so, they need to have the power to do that. And that needs to be simpler than it is today."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "U013ZLJARC7"
                ],
                "count": 2
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "73abdcc8-f90d-4179-9a4b-61f3fe2de98c",
        "type": "message",
        "text": "I've been using BaseX recently and I was pleasantly surprised how nice XQuery 3.1 is to use. Since you are talking about storing expressions XML may be perfect for that. Who knows... you may even enjoy transforming your AST with XSLT  3.1 (although you don't need XSLT). <https://docs.basex.org/wiki/Main_Page>",
        "user": "UN9SCH5RD",
        "ts": "1594284660.136600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3taW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been using BaseX recently and I was pleasantly surprised how nice XQuery 3.1 is to use. Since you are talking about storing expressions XML may be perfect for that. Who knows... you may even enjoy transforming your AST with XSLT  3.1 (although you don't need XSLT). "
                            },
                            {
                                "type": "link",
                                "url": "https://docs.basex.org/wiki/Main_Page"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV"
    },
    {
        "client_msg_id": "533dfbcd-6619-4d1d-835f-f2169fbeb419",
        "type": "message",
        "text": "Some of the ideas on that blog post reminded me of existing projects:\n\u2022 Queries over a code base: <https://www.ndepend.com/features/cqlinq#CQL>\n\u2022 Addressability of code: <https://www.unisonweb.org/docs/tour>",
        "user": "UN9SCH5RD",
        "ts": "1594285475.136800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "NDepend",
                "title": "Code Rule and Code Query over LINQ (CQLinq)",
                "title_link": "https://www.ndepend.com/features/cqlinq#CQL",
                "text": "NDepend has more than 150 default code rules to check against best practices and CQLinq for custom code queries.",
                "fallback": "NDepend: Code Rule and Code Query over LINQ (CQLinq)",
                "from_url": "https://www.ndepend.com/features/cqlinq#CQL",
                "service_icon": "https://www.ndepend.com/assets/img/apple-touch-icon.png",
                "id": 1,
                "original_url": "https://www.ndepend.com/features/cqlinq#CQL"
            },
            {
                "title": "A tour of Unison",
                "title_link": "https://www.unisonweb.org/docs/tour",
                "text": "A tour of Unison and its codebase management tool",
                "fallback": "A tour of Unison",
                "from_url": "https://www.unisonweb.org/docs/tour",
                "service_name": "unisonweb.org",
                "id": 2,
                "original_url": "https://www.unisonweb.org/docs/tour"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p9v=M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some of the ideas on that blog post reminded me of existing projects:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Queries over a code base: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://www.ndepend.com/features/cqlinq#CQL"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Addressability of code: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://www.unisonweb.org/docs/tour"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1594240980.085300",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "UKP3B2J5D"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "356a1ff3-3bb4-4969-87af-996eb2e9e581",
        "type": "message",
        "text": "Also came across this tiny ontology in teh past... I think it is a student project but who knows, may be useful if you decide to actually explore the RDF idea further: <https://fno.io/spec/>",
        "user": "UN9SCH5RD",
        "ts": "1594285721.137200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TnC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also came across this tiny ontology in teh past... I think it is a student project but who knows, may be useful if you decide to actually explore the RDF idea further: "
                            },
                            {
                                "type": "link",
                                "url": "https://fno.io/spec/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594240980.085300",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "af7cd49f-3bf4-4264-90e3-a6cf8f0baeb2",
        "type": "message",
        "text": "<@ULK0Z4MPV> have you seen Materialize? <https://materialize.io/> if you could represent your computation as a SQL query it would do what you want very efficiently and typed all the way through",
        "user": "U016LEA3J1H",
        "ts": "1594299098.138300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Materialize",
                "title": "Homepage",
                "title_link": "https://materialize.io/",
                "text": "A Streaming Database for Real-Time Applications",
                "fallback": "Materialize: Homepage",
                "image_url": "https://materialize.io/wp-content/uploads/2020/02/Asset-3.png",
                "from_url": "https://materialize.io/",
                "image_width": 677,
                "image_height": 250,
                "image_bytes": 140831,
                "service_icon": "https://materialize.io/apple-touch-icon.png",
                "id": 1,
                "original_url": "https://materialize.io/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X0=Ab",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULK0Z4MPV"
                            },
                            {
                                "type": "text",
                                "text": " have you seen Materialize? "
                            },
                            {
                                "type": "link",
                                "url": "https://materialize.io/"
                            },
                            {
                                "type": "text",
                                "text": " if you could represent your computation as a SQL query it would do what you want very efficiently and typed all the way through"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV"
    },
    {
        "type": "message",
        "text": "This week in code faster. Unlike last week, my post did not go viral. What a difference! Not viral means ~500 views, viral means 18k (36x!). Beginner tutorials have much better virality because of their wider appeal, and there's some luck involved. However, there are some ideas about jq I want to write about to finish up my \"mastering jq\" series. After this, I'll try writing some basic tutorials to various unix commands (sed, xargs, grep, etc.) and see if other people find them more valuable. It's a lot more fun to write about advanced techniques, but as JZ said, \"If skills sold, truth be told, I'd probably be lyrically Talib Kweli. Truthfully I want to rhyme like Common Sense (but I did 5 mil). I ain't been rhyming like Common since\"",
        "user": "UL5AX4G2H",
        "ts": "1594305000.145100",
        "team": "T5TCAFTA9",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "5E0AFBE3-88D0-4101-A89B-DA0B284C1892",
        "type": "message",
        "text": "one thing i\u2019d like to see in visual programming paradigms is using an object-oriented heuristic: if you have a bunch of identifiers that start or end with the same word (eg xReducer, yReducer or ICommand, IUser), in OOP it should probably be a type. in visual programming it should probably be an affordance, like a color, shape, symbol, or some combination",
        "user": "UHWC9PXBL",
        "ts": "1594305313.149000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xEl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "one thing i\u2019d like to see in visual programming paradigms is using an object-oriented heuristic: if you have a bunch of identifiers that start or end with the same word (eg xReducer, yReducer or ICommand, IUser), in OOP it should probably be a type. in visual programming it should probably be an affordance, like a color, shape, symbol, or some combination"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594305313.149000",
        "reply_count": 15,
        "reply_users_count": 5,
        "latest_reply": "1594504872.251000",
        "reply_users": [
            "ULK0Z4MPV",
            "UKP3B2J5D",
            "U0139HUPMQ9",
            "UHWC9PXBL",
            "UJBAJNFLK"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "3a63e869-bed8-4b70-832f-d885785880ca",
        "type": "message",
        "text": "<@U013ZLJARC7> I was thinking a graph database but all the relationships are stored in the formula string as well. Perhaps I could split the formula into a ast and store that but that feels a little absurd.\n\n<@UN9SCH5RD> Thanks, will take a look.\n\n<@U016LEA3J1H> Interesting approach. Will look into it!",
        "user": "ULK0Z4MPV",
        "ts": "1594305401.149100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eCnS4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " I was thinking a graph database but all the relationships are stored in the formula string as well. Perhaps I could split the formula into a ast and store that but that feels a little absurd.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UN9SCH5RD"
                            },
                            {
                                "type": "text",
                                "text": " Thanks, will take a look.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U016LEA3J1H"
                            },
                            {
                                "type": "text",
                                "text": " Interesting approach. Will look into it!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV"
    },
    {
        "client_msg_id": "772872CC-25FF-4867-AE6C-EB863D7651CA",
        "type": "message",
        "text": "i\u2019m trying to build the latter but i\u2019m trying to make it explicitly feel like the opposite side, where the problem domain is the transformation of data over time. hard to describe with words but i\u2019ll give it a shot:\n\nif your tools let you describe and transform structured data, and they can take unstructured data and turn it into data, and you describe those transformations and build the tool in the same data format, then you should be able to use the tool on itself to make the tool look like your domain",
        "user": "UHWC9PXBL",
        "ts": "1594305652.154500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G6x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i\u2019m trying to build the latter but i\u2019m trying to make it explicitly feel like the opposite side, where the problem domain is the transformation of data over time. hard to describe with words but i\u2019ll give it a shot:\n\n"
                            },
                            {
                                "type": "text",
                                "text": "if your tools let you describe and transform structured data, and they can take unstructured data and turn it into data, and you describe those transformations and build the tool in the same data format, then you should be able to use the tool on itself to make the tool look like your domain"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "88A31BDC-D853-4DBA-943B-420E113D0188",
        "type": "message",
        "text": "like, you start by putting some specific piece of data into, idk, a form? and then you extract the stuff that changes, describe how it changes, and then repeat until you have your model of the domain",
        "user": "UHWC9PXBL",
        "ts": "1594306507.156500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7NI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "like, you start by putting some specific piece of data into, idk, a form? and then you extract the stuff that changes, describe how it changes, and then repeat until you have your model of the domain"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "b48f210c-145f-4648-b063-aee8faed01f9",
        "type": "message",
        "text": "Reminds me of zachtronics games <http://www.zachtronics.com/opus-magnum/>\n\nThere's also something interesting about being able to see your code move and execute. It makes it really easy to spot failures in logic.",
        "user": "ULK0Z4MPV",
        "ts": "1594306752.156800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JqczW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reminds me of zachtronics games "
                            },
                            {
                                "type": "link",
                                "url": "http://www.zachtronics.com/opus-magnum/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThere's also something interesting about being able to see your code move and execute. It makes it really easy to spot failures in logic."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594305313.149000",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "sparkling_heart",
                "users": [
                    "U016LEA3J1H"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "C2BE28BB-A010-4E26-87DD-757E008ADE46",
        "type": "message",
        "text": "Hm I think this is a good idea but I worry it would get out of hand quickly. \nAnother example of an affordance would be that if it\u2019s a commutative operation the symbol has to be symmetric etc. There are probably more rules like this - also similar to linting rules where class names are capitalised. Functions are lowercase etc",
        "user": "UKP3B2J5D",
        "ts": "1594307646.159900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UKP3B2J5D",
            "ts": "1594308093.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kre+2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hm I think this is a good idea but I worry it would get out of hand quickly. \nAnother example of an affordance would be that if it\u2019s a commutative operation the symbol has to be symmetric etc. There are probably more rules like this - also similar to linting rules where class names are capitalised. Functions are lowercase etc"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594305313.149000",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "3600dad1-50d5-4ba6-8bc8-f713b1ab647a",
        "type": "message",
        "text": "I really like that <@ULK0Z4MPV>. being able to see the code move and execute is also the core idea behind Philip Guo's Python Tutor (<http://www.pythontutor.com|link> for those who are unfamiliar with it)",
        "user": "U0139HUPMQ9",
        "ts": "1594312359.160700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U0139HUPMQ9",
            "ts": "1594312421.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mT7GO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really like that "
                            },
                            {
                                "type": "user",
                                "user_id": "ULK0Z4MPV"
                            },
                            {
                                "type": "text",
                                "text": ". being able to see the code move and execute is also the core idea behind Philip Guo's Python Tutor ("
                            },
                            {
                                "type": "link",
                                "url": "http://www.pythontutor.com",
                                "text": "link"
                            },
                            {
                                "type": "text",
                                "text": " for those who are unfamiliar with it)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594305313.149000",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "ULK0Z4MPV",
                    "UHWC9PXBL",
                    "UKP3B2J5D"
                ],
                "count": 3
            },
            {
                "name": "100",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e10df99a-336c-469f-aa76-b81f286cf4d5",
        "type": "message",
        "text": "Ah, I think I misunderstood the situation! It seemed to me that you might have multiple pieces of code in different places that referenced one another, in which case you'd want some link between a node in one AST to a node in another AST to keep track of dependencies between \"code blocks\".",
        "user": "U013ZLJARC7",
        "ts": "1594313366.161000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WEB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, I think I misunderstood the situation! It seemed to me that you might have multiple pieces of code in different places that referenced one another, in which case you'd want some link between a node in one AST to a node in another AST to keep track of dependencies between \"code blocks\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV"
    },
    {
        "client_msg_id": "65BD8009-65FA-49CD-9F46-53AAB6FB462C",
        "type": "message",
        "text": "If you insist on an external database then Neo4j is a lot of fun the two-way relationships are very useful when you\u2019re crawling your graph all different directions. There in my design spec but I actually haven\u2019t needed to use them yet. It\u2019s a very powerful data structure and illuminates most and use cases that would otherwise call for a relational database",
        "user": "UEQ6M68H0",
        "ts": "1594313897.161700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xXF+r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you insist on an external database then Neo4j is a lot of fun the two-way relationships are very useful when you\u2019re crawling your graph all different directions. There in my design spec but I actually haven\u2019t needed to use them yet. It\u2019s a very powerful data structure and illuminates most and use cases that would otherwise call for a relational database"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV"
    },
    {
        "client_msg_id": "a2b86bde-dc01-4e91-aa63-beaa94b4e9df",
        "type": "message",
        "text": "Yes, that could definitely be beneficial, thanks! I'll have to develop better understanding of what jobs are required from the database and client to reach the best solution (I also need the graph on the client).\n\nI'm thinking mongo might be the simplest solution for the time being - it's easy to learn and will remove the constraints I'm experiencing with postgres. And once the app is further developed I can reassess if a graph database will be more beneficial, I think it's too early to know right now.\n\nThanks for all your advice, it's been really helpful :)",
        "user": "ULK0Z4MPV",
        "ts": "1594317837.164200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZQk/2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, that could definitely be beneficial, thanks! I'll have to develop better understanding of what jobs are required from the database and client to reach the best solution (I also need the graph on the client).\n\nI'm thinking mongo might be the simplest solution for the time being - it's easy to learn and will remove the constraints I'm experiencing with postgres. And once the app is further developed I can reassess if a graph database will be more beneficial, I think it's too early to know right now.\n\nThanks for all your advice, it's been really helpful :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV"
    },
    {
        "client_msg_id": "cd913824-d194-4bec-b560-e13ec99a1904",
        "type": "message",
        "text": "<@UKP3B2J5D> i think you\u2019re right about it getting out of hand if the system isn\u2019t carefully designed. there are a few ways to combine things that might make such a system more robust to change. For example, in the case of a data structure, if you have visual primitives that match your data primitives, you could potentially combine those visual primitives in the same way you combine the semantic primitives. i think it\u2019d also be important to start with something smaller than, say, java.\n\nAt a minimum, we\u2019re doing our best to keep all this complexity in our heads using naming things for our existing systems, which work ok (for a sufficiently cynical definition of \u201cok\u201d)\n\nOn the other hand, we track a lot of visual primitives in everyday life. In the common case with languages like english that are made up of letters, cognitive studies show that we tend to read words sort of like individual gylphs (wihch is why you can raed wrods werhe the ltetrs are jmuebld according to Many Memes). and with experts using systems, like airline pilots, mathematicians, and carpenters, people seem to have a facility for remembering thousands of things provided that they have a context where theyre using them often. Or even in games\u2014for example, most hearthstone players have all of the cards and their effects memorized by picture just as a side effect of playing the game. more so for magic the gathering, where the smallest set of allowed cards for tournament play is usually around 2,700",
        "user": "UHWC9PXBL",
        "ts": "1594318929.164900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1594328840.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GVs/0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKP3B2J5D"
                            },
                            {
                                "type": "text",
                                "text": " i think you\u2019re right about it getting out of hand if the system isn\u2019t carefully designed. there are a few ways to combine things that might make such a system more robust to change. For example, in the case of a data structure, if you have visual primitives that match your data primitives, you could potentially combine those visual primitives in the same way you combine the semantic primitives. i think it\u2019d also be important to start with something smaller than, say, java.\n\nAt a minimum, we\u2019re doing our best to keep all this complexity in our heads using naming things for our existing systems, which work ok (for a sufficiently cynical definition of \u201cok\u201d)\n\nOn the other hand, we track a lot of visual primitives in everyday life. In the common case with languages like english that are made up of letters, cognitive studies show that we tend to read words sort of like individual gylphs (wihch is why you can raed wrods werhe the ltetrs are jmuebld according to Many Memes). and with experts using systems, like airline pilots, mathematicians, and carpenters, people seem to have a facility for remembering thousands of things provided that they have a context where theyre using them often. Or even in games\u2014for example, most hearthstone players have all of the cards and their effects memorized by picture just as a side effect of playing the game. more so for magic the gathering, where the smallest set of allowed cards for tournament play is usually around 2,700"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594305313.149000",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "fcbfe591-0f43-40b1-9d6d-94beabb87223",
        "type": "message",
        "text": "<@UJ6LDMMN0>\n\n&gt; One important aspect of what I want to build, is the possibility for the users to define their own visual representations for their programming artifacts. Of course the programming environment will come with some visual semantics as building blocks or general tools, but I would like to allow anybody to add new one\nWhen the user defines a new visual representation, is that like defining a new datatype or function, or is it more like defining a new paradigm or means of evaluation \u2014\u00a0new semantics \u2014 like imperative, FP, stack-based, CSP, eager-vs-lazy, curried, etc.?",
        "user": "UC2A2ARPT",
        "ts": "1594320047.165200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yfzgP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJ6LDMMN0"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One important aspect of what I want to build, is the possibility for the users to define their own visual representations for their programming artifacts. Of course the programming environment will come with some visual semantics as building blocks or general tools, but I would like to allow anybody to add new one"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWhen the user defines a new visual representation, is that like defining a new datatype or function, or is it more like defining a new paradigm or means of evaluation \u2014\u00a0new semantics \u2014 like imperative, FP, stack-based, CSP, eager-vs-lazy, curried, etc.?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "96a966fb-304e-4120-bf20-a9914daefe17",
        "type": "message",
        "text": "Based on the responses so far (thanks!) I think I underspecified the last category. I was hoping the examples would make it clear, but in the cold light of morning yadda yadda.\n\nAs I said in the reply to Nicolas, I'm interested in thoughts/work at the paradigms &amp; semantics level. Tools that are designed to be a scaffold for language (or \"programming system\", though I dislike the term) experimentation. As a node-and-wire example, it'd be an environment that may include nodes and wires, and some execution strategy that covers what to do with those nodes and wires, but that doesn't expect you to stick with that execution strategy. You can (and are encouraged to) define what it means to be a node or an edge \u2014\u00a0to turn <http://puredata.info|Pure Data> into <http://joshuahhh.com/projects/pane/|PANE>. You can decide that there are no edges.\n\nWhen someone like Rich Hickey <https://clojure.org/about/history|creates> a Clojure or a Datomic, this is the level that he's thinking at: What semantics should Clojure have, and why? I'm interested in tools that are designed to support working at this level. I don't know what to call them, or how to even frame them.",
        "user": "UC2A2ARPT",
        "ts": "1594320744.165400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D=XNS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Based on the responses so far (thanks!) I think I underspecified the last category. I was hoping the examples would make it clear, but in the cold light of morning yadda yadda.\n\nAs I said in the reply to Nicolas, I'm interested in thoughts/work at the paradigms & semantics level. Tools that are designed to be a scaffold for language (or \"programming system\", though I dislike the term) experimentation. As a node-and-wire example, it'd be an environment that may include nodes and wires, and some execution strategy that covers what to do with those nodes and wires, but that doesn't expect you to stick with that execution strategy. You can (and are encouraged to) define what it means to be a node or an edge \u2014\u00a0to turn "
                            },
                            {
                                "type": "link",
                                "url": "http://puredata.info",
                                "text": "Pure Data"
                            },
                            {
                                "type": "text",
                                "text": " into "
                            },
                            {
                                "type": "link",
                                "url": "http://joshuahhh.com/projects/pane/",
                                "text": "PANE"
                            },
                            {
                                "type": "text",
                                "text": ". You can decide that there are no edges.\n\nWhen someone like Rich Hickey "
                            },
                            {
                                "type": "link",
                                "url": "https://clojure.org/about/history",
                                "text": "creates"
                            },
                            {
                                "type": "text",
                                "text": " a Clojure or a Datomic, this is the level that he's thinking at: What semantics should Clojure have, and why? I'm interested in tools that are designed to support working at this level. I don't know what to call them, or how to even frame them."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "e573e9fb-35a7-481f-9377-453788931bd2",
        "type": "message",
        "text": "Ivan, it is exactly what I have in mind and what I want to build: an environment that provides tools to allow the definition of visual representations and how these representations are used to produced a behavior. Even if it can stay at the \"new datatype or function\" definition level, the real plus is to allow the user to tell what to do with the information in the visual representation.\n\nSo, one can define some nodes and wires representation for a build system, where rounded boxes defines files, squared boxes for bash building rules and links for dependencies, and that this produces a `Makefile`. Someone else might use something similar but to produce a `.gitlab-ci.yml` file. And a third one will have the rules in something else than bash (maybe another visual?) and that it is plugged directly to a \"live\" customed building system (maybe a serverless infra).",
        "user": "UJ6LDMMN0",
        "ts": "1594323540.165800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJ6LDMMN0",
            "ts": "1594323547.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UFBd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ivan, it is exactly what I have in mind and what I want to build: an environment that provides tools to allow the definition of visual representations and how these representations are used to produced a behavior. Even if it can stay at the \"new datatype or function\" definition level, the real plus is to allow the user to tell what to do with the information in the visual representation.\n\nSo, one can define some nodes and wires representation for a build system, where rounded boxes defines files, squared boxes for bash building rules and links for dependencies, and that this produces a "
                            },
                            {
                                "type": "text",
                                "text": "Makefile",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Someone else might use something similar but to produce a "
                            },
                            {
                                "type": "text",
                                "text": ".gitlab-ci.yml",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " file. And a third one will have the rules in something else than bash (maybe another visual?) and that it is plugged directly to a \"live\" customed building system (maybe a serverless infra)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "1E243DA4-EE9D-4E30-A3F0-3A31BD0143D8",
        "type": "message",
        "text": "Also when you are asking about Database is you kind a need to specify what language your programming in because not every database has bindings for every language, and also some languages have concepts and data types which are not storable in many databases. It becomes a gigantic pain in the ass when you are having to encode and decode constantly when moving to and from the database. I would call this in impedance mismatch, and it\u2019s one of the reasons I put the database inside the language in Beads because I have data types that don\u2019t exist and other systems such as extended arithmetic, and a bookean that has four states. ",
        "user": "UEQ6M68H0",
        "ts": "1594326695.166800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eXp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also when you are asking about Database is you kind a need to specify what language your programming in because not every database has bindings for every language, and also some languages have concepts and data types which are not storable in many databases. It becomes a gigantic pain in the ass when you are having to encode and decode constantly when moving to and from the database. I would call this in impedance mismatch, and it\u2019s one of the reasons I put the database inside the language in Beads because I have data types that don\u2019t exist and other systems such as extended arithmetic, and a bookean that has four states. "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594255230.095900",
        "parent_user_id": "ULK0Z4MPV"
    },
    {
        "client_msg_id": "C9277B55-A8D8-4094-BFC2-36CE3B1C4615",
        "type": "message",
        "text": "<@UHWC9PXBL> Yup, totally. I think that\u2019s why text is so powerful. Each word becomes a unit - has an associated sound, conceptually a thing. Like the example you just so elegantly described - it means there is redundancy and we can error correct to get the information back out even when it has been distorted. ",
        "user": "UKP3B2J5D",
        "ts": "1594327115.171600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L+qjc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " Yup, totally. I think that\u2019s why text is so powerful. Each word becomes a unit - has an associated sound, conceptually a thing. Like the example you just so elegantly described - it means there is redundancy and we can error correct to get the information back out even when it has been distorted. "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594305313.149000",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "b3202c31-fa30-44c8-a25f-7fbef031c20f",
        "type": "message",
        "text": "If I understand it correctly, that's all stuff you could do with a programming language like C or Java, right? In your system, the programmer defines some data or a function and binds it to a certain graphic (\"rounded boxes defines files, squared boxes for bash building rules\"), which is akin to binding symbols/identifiers to functions or data in a text PL, and then the programer decides which of those graphics to invoke in various contexts and at various times (\"links for dependencies\") much like writing the main() function. That means what you're designing will be a peer to a traditional general purpose programming languages, whereas most visual languages currently aren't even designed to be that powerful.\n\nBut what you can't do _within_ C or Java is change their semantics. You can't change the way code is executed, not without changing the compiler/interpreter (at which point, you're no longer making a typical C or Java program that'd work with any C compiler or JVM). You can't turn C into a lazy evaluated language. At best, you can use C to create a new language that is lazy evaluated.\n\nAn example in a hypothetical visual language where code is tree-structured would be: can you, working entirely within the language, decide whether execution is \"pushed\" from the root node down, reevaluating every node as it goes, or whether execution is \"pulled\", starting from a leaf and evaluating back up to the root?\n\nAnother example \u2014 a visual programming environment in which you can define the \"grammar\" and how it's parsed. So you could build an execution strategy that makes use of color, or that makes use of proximity, or that makes use of the fineness of detail. You aren't saying \"round boxes represent files\", but rather \"roundness of corners is a semantic detail, so whenever a corner is rounded, here's how to interpret that\". For instance, you could say that shapes should be evaluated in order of roundness: circles come first, roundrects second, and boxes last.\n\nAnother example \u2014\u00a0a node-and-wire environment where you can control whether edges simply associate something on one end with something on the other end (as like a function call), or mutably remove a value from storage on one side and insert it into storage on the other side (as like an inbox/outbox), or are themselves mutable storage (as like a queue).\n\nI think what you've described is a big improvement on what currently exists. But it doesn't feel like it fits the (admittedly, _very_ poorly defined) region of concept space I'm trying to map out. I wish I had better theoretical PL chops so I could know what, if any, terminology to use here.",
        "user": "UC2A2ARPT",
        "ts": "1594327121.171800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1594327964.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GiW96",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If I understand it correctly, that's all stuff you could do with a programming language like C or Java, right? In your system, the programmer defines some data or a function and binds it to a certain graphic (\"rounded boxes defines files, squared boxes for bash building rules\"), which is akin to binding symbols/identifiers to functions or data in a text PL, and then the programer decides which of those graphics to invoke in various contexts and at various times (\"links for dependencies\") much like writing the main() function. That means what you're designing will be a peer to a traditional general purpose programming languages, whereas most visual languages currently aren't even designed to be that powerful.\n\nBut what you can't do "
                            },
                            {
                                "type": "text",
                                "text": "within",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " C or Java is change their semantics. You can't change the way code is executed, not without changing the compiler/interpreter (at which point, you're no longer making a typical C or Java program that'd work with any C compiler or JVM). You can't turn C into a lazy evaluated language. At best, you can use C to create a new language that is lazy evaluated.\n\nAn example in a hypothetical visual language where code is tree-structured would be: can you, working entirely within the language, decide whether execution is \"pushed\" from the root node down, reevaluating every node as it goes, or whether execution is \"pulled\", starting from a leaf and evaluating back up to the root?\n\nAnother example \u2014 a visual programming environment in which you can define the \"grammar\" and how it's parsed. So you could build an execution strategy that makes use of color, or that makes use of proximity, or that makes use of the fineness of detail. You aren't saying \"round boxes represent files\", but rather \"roundness of corners is a semantic detail, so whenever a corner is rounded, here's how to interpret that\". For instance, you could say that shapes should be evaluated in order of roundness: circles come first, roundrects second, and boxes last.\n\nAnother example \u2014\u00a0a node-and-wire environment where you can control whether edges simply associate something on one end with something on the other end (as like a function call), or mutably remove a value from storage on one side and insert it into storage on the other side (as like an inbox/outbox), or are themselves mutable storage (as like a queue).\n\nI think what you've described is a big improvement on what currently exists. But it doesn't feel like it fits the (admittedly, "
                            },
                            {
                                "type": "text",
                                "text": "very",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " poorly defined) region of concept space I'm trying to map out. I wish I had better theoretical PL chops so I could know what, if any, terminology to use here."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "71C89023-C218-4D85-9913-945A84B07B1F",
        "type": "message",
        "text": "And about visual primitives it\u2019s interesting that memory systems use things like a memory palace. I think the key trick is making information more interesting and redundant - can\u2019t just be a bunch of unrelated symbols on a screen. So maybe text isn\u2019t that powerful :smile:",
        "user": "UKP3B2J5D",
        "ts": "1594327284.175800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UKP3B2J5D",
            "ts": "1594327601.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kFg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And about visual primitives it\u2019s interesting that memory systems use things like a memory palace. I think the key trick is making information more interesting and redundant - can\u2019t just be a bunch of unrelated symbols on a screen. So maybe text isn\u2019t that powerful "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594305313.149000",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "B50BD82E-EBE3-44BB-B337-4D7A00DBB578",
        "type": "message",
        "text": "i don\u2019t know if there are specific terms for that but it\u2019s exactly what VPRI was working on",
        "user": "UHWC9PXBL",
        "ts": "1594328099.177200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3rbX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i don\u2019t know if there are specific terms for that but it\u2019s exactly what VPRI was working on"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UJ6LDMMN0"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "dcafa6b1-9526-4e01-b501-751ad6b671de",
        "type": "message",
        "text": "First, I must say that as I haven't yet actually worked on all this, I have not a precise vision of how this will work, and maybe the examples are not very well chosen/realistic/etc.\nBut the idea is really to try to give the maximum opportunities to users to define some visual representations and what they means in terms of behaviors. So ultimately, all your examples are really good illustrations of the kind of things I would like to allow the users to do. I agree, my examples are too simple: only mapping visuals to text languages, I definitely want to go further!",
        "user": "UJ6LDMMN0",
        "ts": "1594328614.177700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JWGXU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "First, I must say that as I haven't yet actually worked on all this, I have not a precise vision of how this will work, and maybe the examples are not very well chosen/realistic/etc.\nBut the idea is really to try to give the maximum opportunities to users to define some visual representations and what they means in terms of behaviors. So ultimately, all your examples are really good illustrations of the kind of things I would like to allow the users to do. I agree, my examples are too simple: only mapping visuals to text languages, I definitely want to go further!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "cdaddd84-a087-46fc-939f-6cbfd88ff7cb",
        "type": "message",
        "text": "link spam (none of these are visual, unfortunately):\n\u2022 open, extensible composition models: <http://www.vpri.org/pdf/tr2011002_oecm.pdf>\n\u2022 open, extensible object models: <https://www.piumarta.com/software/cola/objmodel2.pdf>\n\u2022 the reflective language Black by Kenichi Asai: <http://pllab.is.ocha.ac.jp/~asai/Black/>   \n\u2022         some pretty cool video content on this subject by Nada Amin: <https://www.youtube.com/watch?v=SrKj4hYic5A>\n\u2022         another one on towers of interpreters: <https://www.youtube.com/watch?v=Ywy_eSzCLi8>\n\u2022 red/rebol programming language (this is not well documented. if anyone wants to go on a hunt i\u2019m looking for study partners): <https://www.red-lang.org/>\n\u2022        in particular: its weird binding methodology <https://en.wikibooks.org/wiki/Rebol_Programming/Advanced/Bindology> (rebol and red are very similar)\n\u2022 the kernel programming language: <https://web.cs.wpi.edu/~jshutt/kernel.html>\n\u2022 the io programming language: <https://iolanguage.org/>\n\u2022 the ioke programming language: <https://ioke.org/>\n\u2022 the factor programming language: <https://factorcode.org/>\n\u2022       especially the \u201cparsing words\u201d section here: <https://andreaferretti.github.io/factor-tutorial/>",
        "user": "UHWC9PXBL",
        "ts": "1594328665.178000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1594333370.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BneG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "link spam (none of these are visual, unfortunately):\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "open, extensible composition models: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http://www.vpri.org/pdf/tr2011002_oecm.pdf"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "open, extensible object models: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://www.piumarta.com/software/cola/objmodel2.pdf"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the reflective language Black by Kenichi Asai: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "http://pllab.is.ocha.ac.jp/~asai/Black/"
                                    },
                                    {
                                        "type": "text",
                                        "text": "   "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "        some pretty cool video content on this subject by Nada Amin: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://www.youtube.com/watch?v=SrKj4hYic5A"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "        another one on towers of interpreters: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://www.youtube.com/watch?v=Ywy_eSzCLi8"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "red/rebol programming language (this is not well documented. if anyone wants to go on a hunt i\u2019m looking for study partners): "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://www.red-lang.org/"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "       in particular: its weird binding methodology "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://en.wikibooks.org/wiki/Rebol_Programming/Advanced/Bindology"
                                    },
                                    {
                                        "type": "text",
                                        "text": " (rebol and red are very similar)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the kernel programming language: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://web.cs.wpi.edu/~jshutt/kernel.html"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the io programming language: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://iolanguage.org/"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the ioke programming language: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://ioke.org/"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the factor programming language: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://factorcode.org/"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "      especially the \u201cparsing words\u201d section here: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://andreaferretti.github.io/factor-tutorial/"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0203641b-17e5-4319-908e-09b5eee03063",
        "type": "message",
        "text": "<@UC2A2ARPT> this area is a particular obsession of mine, and I suspect it may require a visual representation of some primitives to do with the barest stuff computation/interpretation/semantics are made out of\u2014stuff like transformation, parsing, term rewriting, replacement, storage, etc",
        "user": "UHWC9PXBL",
        "ts": "1594328925.178700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o4f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " this area is a particular obsession of mine, and I suspect it may require a visual representation of some primitives to do with the barest stuff computation/interpretation/semantics are made out of\u2014stuff like transformation, parsing, term rewriting, replacement, storage, etc"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "4fe85de4-a797-4a59-931a-c9e9cab49203",
        "type": "message",
        "text": "incidentally, i\u2019m trying to figure out a good visual representation for lists like the one i just dropped in here\u2014anyone have any ideas? i don\u2019t know what to call them\u2026 bundles?",
        "user": "UHWC9PXBL",
        "ts": "1594329032.178900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rEIx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "incidentally, i\u2019m trying to figure out a good visual representation for lists like the one i just dropped in here\u2014anyone have any ideas? i don\u2019t know what to call them\u2026 bundles?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594276999.116700",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "37fdef9b-1917-410c-841b-d56192818f3c",
        "type": "message",
        "text": "now im thinking that\u2026 if data has a \u201cdefault\u201d visual display, and you start with example data, and things like \u201cuser profile\u201d are displayed visually somewhere\u2026 you may just be able to get away with reusing the visual design from the interface you want to display as the default symbol for that data structure\u2026? and the buttons or dials or whatever for the actions",
        "user": "UHWC9PXBL",
        "ts": "1594329319.179300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z7CgR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "now im thinking that\u2026 if data has a \u201cdefault\u201d visual display, and you start with example data, and things like \u201cuser profile\u201d are displayed visually somewhere\u2026 you may just be able to get away with reusing the visual design from the interface you want to display as the default symbol for that data structure\u2026? and the buttons or dials or whatever for the actions"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594305313.149000",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "d4bbf36c-c7f6-465f-9918-0524deb9c2b6",
        "type": "message",
        "text": "seems like a big stretch, but the type you could train your system to make",
        "user": "UHWC9PXBL",
        "ts": "1594329332.179500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q3u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "seems like a big stretch, but the type you could train your system to make"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1594305313.149000",
        "parent_user_id": "UHWC9PXBL"
    }
]