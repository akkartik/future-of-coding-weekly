[
    {
        "client_msg_id": "c71f4db2-4b78-4a61-af0c-0c5da4851810",
        "type": "message",
        "text": "<@ULM3U6275> Yeah, that's becoming clear to me as well. I intended \"controlling evolution over time\" to mean just a low-level sense of tracking the past rather than maintainability in the future. Not that maintainability is unimportant, of course.\n\nYour example is actually not that serious. I was deliberately trying to focus on the shared activities we perform as programmers rather than the diverse tools we may use to help us do them. Things that require manual consideration regardless of what tooling we may use to reduce the effort of acting on this consideration.\n\nBut yeah, it's clearly a question in progress, and I'm failing to articulate boundaries crisply. Basically I'm imagining a series of yes/no questions of the form \"do you think about ___?\" What would all programmers above some level say yes to that programmers below wouldn't? In what ways does the practice of programming rewire our brains? Quite possible my initial answers don't fit.",
        "user": "UCUSW7WVD",
        "ts": "1593901527.326300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lNh22",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": " Yeah, that's becoming clear to me as well. I intended \"controlling evolution over time\" to mean just a low-level sense of tracking the past rather than maintainability in the future. Not that maintainability is unimportant, of course.\n\nYour example is actually not that serious. I was deliberately trying to focus on the shared activities we perform as programmers rather than the diverse tools we may use to help us do them. Things that require manual consideration regardless of what tooling we may use to reduce the effort of acting on this consideration.\n\nBut yeah, it's clearly a question in progress, and I'm failing to articulate boundaries crisply. Basically I'm imagining a series of yes/no questions of the form \"do you think about ___?\" What would all programmers above some level say yes to that programmers below wouldn't? In what ways does the practice of programming rewire our brains? Quite possible my initial answers don't fit."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593722002.162200",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "71996F9C-9B96-45A9-86F6-DCEE94444494",
        "type": "message",
        "text": "I\u2019d guess I\u2019d file these under \u201cmanaging complexity\u201d. The other under appreciated sub-areas I\u2019d add are maintainability, portability, persistence, synchronization, communication, and security.",
        "user": "ULM3U6275",
        "ts": "1593905500.333500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iiRC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019d guess I\u2019d file these under \u201cmanaging complexity\u201d. The other under appreciated sub-areas I\u2019d add are maintainability, portability, persistence, synchronization, communication, and security."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593722002.162200",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "66b11ce4-d60a-421d-abbc-59a80de49e16",
        "type": "message",
        "text": "I don't have much experience dealing with parallel or distributed computing, and I have zero experience with security. I think portability is irrelevant to 90% of programmers today. So -- to the extent that I'm a programmer -- your list seems quite aspirational.",
        "user": "UCUSW7WVD",
        "ts": "1593907634.333700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+UwM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't have much experience dealing with parallel or distributed computing, and I have zero experience with security. I think portability is irrelevant to 90% of programmers today. So -- to the extent that I'm a programmer -- your list seems quite aspirational."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593722002.162200",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "6e36ee0d-efe7-4c3c-9cf3-46bc497f37f4",
        "type": "message",
        "text": "Lately I've been thinking about syntax highlighting and how helpful it is for developers. Recent research on this seems to be mostly focused on students and beginners, but the consensus (if there is any) seems to be that SH has negligible effects on source code comprehension (some examples: <https://dl.acm.org/doi/pdf/10.1145/2987491.2987536|1>, <https://refubium.fu-berlin.de/bitstream/handle/fub188/21867/emip2017_report.pdf;jsessionid=D5D8345F061D423D87BB519F94D6B346?sequence=1#page=6|2>, <https://link.springer.com/content/pdf/10.1007/s10664-017-9579-0.pdf|3>). A <https://d1wqtxts1xzle7.cloudfront.net/38888331/sarkar_2015_syntax_colouring.pdf?1443186018=&amp;response-content-disposition=inline%3B+filename%3DThe_impact_of_syntax_colouring_on_progra.pdf&amp;Expires=1593952423&amp;Signature=VAr9tKNZznILbhZz9-f5PlsVtDUIiQgnZCMjbfgYFjf31o5omzBx8D8-WnGRS~Y9O9QyYuUeRgycsfqW1do5wZQv4WE2FkIUmfcv~-yFWwDmxPliMDVAm759IeTPjZr9s3yVyOj-XNZHP9THuot3Zt4b6elvTWGdNqENvjFzB424N6QmV3z5zXpzMT9xWveglmRB7P-Pd9~Z5AsFifJQ5De3wCwFSyIAwi2L9UW8KgDQHO~z9rU6IiZ0EV2lg822bxezra~OiYike1LsxgWy7U7o402G2DV3D~vsJ3OK~nMH7Z5ceWxq6nGi3BGIMTl0GfDTIyuiRyjvx~Ls-9u7VQ__&amp;Key-Pair-Id=APKAJLOHF5GGSLRBV4ZA|2015 paper> found an positive benefit, but the study had a small sample size and found that the effect is strongest for beginners.\n\nThe authors of the <https://link.springer.com/content/pdf/10.1007/s10664-017-9579-0.pdf|2018 paper> (linked above) made the following claim:\n\n&gt; Our findings indicate that current IDEs possibly waste a feedback channel to the developer with an ineffective code highlighting scheme. This feedback channel could convey more meaningful information, for example the font colour could encode the type of function in terms of its namespace.\nIn other words, \"semantic highlighting\" could be more beneficial for programmer productivity, a paradigm that \"attempts to reveal the meaning of the code\" instead of just \"identifying syntactic elements\" [<https://dl.acm.org/doi/pdf/10.1145/2846680.2846685|source>]. This can mean something simple like giving each variable its own colour, but I think it can also incorporate more creative ideas.\n\nI found two IDE packages for semantic highlighting: <https://marketplace.visualstudio.com/items?itemName=AndreasReischuck.SemanticColorizer|SemanticColorizer> for Visual Studio and <https://atom.io/packages/semanticolor|semanticolor> for Atom. Has anyone here has used those packages (or something similar) and found them useful? I'm also interested what opinions you have about syntax highlighting in general (I've already read <https://groups.google.com/forum/#!msg/golang-nuts/hJHCAaiL0so/kG3BHV6QFfIJ|Rob Pike's opinion>). :slightly_smiling_face:",
        "user": "U0139HUPMQ9",
        "ts": "1593951627.352200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F77",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lately I've been thinking about syntax highlighting and how helpful it is for developers. Recent research on this seems to be mostly focused on students and beginners, but the consensus (if there is any) seems to be that SH has negligible effects on source code comprehension (some examples: "
                            },
                            {
                                "type": "link",
                                "url": "https://dl.acm.org/doi/pdf/10.1145/2987491.2987536",
                                "text": "1"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https://refubium.fu-berlin.de/bitstream/handle/fub188/21867/emip2017_report.pdf;jsessionid=D5D8345F061D423D87BB519F94D6B346?sequence=1#page=6",
                                "text": "2"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https://link.springer.com/content/pdf/10.1007/s10664-017-9579-0.pdf",
                                "text": "3"
                            },
                            {
                                "type": "text",
                                "text": "). A "
                            },
                            {
                                "type": "link",
                                "url": "https://d1wqtxts1xzle7.cloudfront.net/38888331/sarkar_2015_syntax_colouring.pdf?1443186018=&response-content-disposition=inline%3B+filename%3DThe_impact_of_syntax_colouring_on_progra.pdf&Expires=1593952423&Signature=VAr9tKNZznILbhZz9-f5PlsVtDUIiQgnZCMjbfgYFjf31o5omzBx8D8-WnGRS~Y9O9QyYuUeRgycsfqW1do5wZQv4WE2FkIUmfcv~-yFWwDmxPliMDVAm759IeTPjZr9s3yVyOj-XNZHP9THuot3Zt4b6elvTWGdNqENvjFzB424N6QmV3z5zXpzMT9xWveglmRB7P-Pd9~Z5AsFifJQ5De3wCwFSyIAwi2L9UW8KgDQHO~z9rU6IiZ0EV2lg822bxezra~OiYike1LsxgWy7U7o402G2DV3D~vsJ3OK~nMH7Z5ceWxq6nGi3BGIMTl0GfDTIyuiRyjvx~Ls-9u7VQ__&Key-Pair-Id=APKAJLOHF5GGSLRBV4ZA",
                                "text": "2015 paper"
                            },
                            {
                                "type": "text",
                                "text": " found an positive benefit, but the study had a small sample size and found that the effect is strongest for beginners.\n\nThe authors of the "
                            },
                            {
                                "type": "link",
                                "url": "https://link.springer.com/content/pdf/10.1007/s10664-017-9579-0.pdf",
                                "text": "2018 paper"
                            },
                            {
                                "type": "text",
                                "text": " (linked above) made the following claim:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Our findings indicate that current IDEs possibly waste a feedback channel to the developer with an ineffective code highlighting scheme. This feedback channel could convey more meaningful information, for example the font colour could encode the type of function in terms of its namespace."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIn other words, \"semantic highlighting\" could be more beneficial for programmer productivity, a paradigm that \"attempts to reveal the meaning of the code\" instead of just \"identifying syntactic elements\" ["
                            },
                            {
                                "type": "link",
                                "url": "https://dl.acm.org/doi/pdf/10.1145/2846680.2846685",
                                "text": "source"
                            },
                            {
                                "type": "text",
                                "text": "]. This can mean something simple like giving each variable its own colour, but I think it can also incorporate more creative ideas.\n\nI found two IDE packages for semantic highlighting: "
                            },
                            {
                                "type": "link",
                                "url": "https://marketplace.visualstudio.com/items?itemName=AndreasReischuck.SemanticColorizer",
                                "text": "SemanticColorizer"
                            },
                            {
                                "type": "text",
                                "text": " for Visual Studio and "
                            },
                            {
                                "type": "link",
                                "url": "https://atom.io/packages/semanticolor",
                                "text": "semanticolor"
                            },
                            {
                                "type": "text",
                                "text": " for Atom. Has anyone here has used those packages (or something similar) and found them useful? I'm also interested what opinions you have about syntax highlighting in general (I've already read "
                            },
                            {
                                "type": "link",
                                "url": "https://groups.google.com/forum/#!msg/golang-nuts/hJHCAaiL0so/kG3BHV6QFfIJ",
                                "text": "Rob Pike's opinion"
                            },
                            {
                                "type": "text",
                                "text": "). "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593951627.352200",
        "reply_count": 10,
        "reply_users_count": 7,
        "latest_reply": "1594005386.361900",
        "reply_users": [
            "UP28ETUSE",
            "UL5AX4G2H",
            "UT60XSVCN",
            "UAL7940NM",
            "U0136G8R8KG",
            "UJN1TAYEQ",
            "UCUSW7WVD"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "9FC25255-74F7-4DE1-9FB6-3980B5AD19ED",
        "type": "message",
        "text": "When was parallel/distributed computing mentioned?",
        "user": "ULM3U6275",
        "ts": "1593953976.353200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5VO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When was parallel/distributed computing mentioned?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593722002.162200",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "type": "message",
        "text": "I use this occurrence-based highlighting (giving it the semantic attribute seems a bit of an overstatement to me) in IntellIJ IDEA with Scala. Honestly, I haven't felt any improvement, but i'm also not bothered by it, so I kept it active. I guess I should disable it and see whether I'll be missing it.\n\nWhat I'd love to see, though, is a plugin that colors identifiers based on types, so that I can _see_ how types flow through an implementation. I've created a couple images at some point to show this idea. I needed this when I was attempting to explain the implementation of a Cartesian product function to some people at a coding dojo.\n\nThe language in the screenshots is Haskell.",
        "files": [
            {
                "id": "F0164AUB2F9",
                "created": 1593955907,
                "timestamp": 1593955907,
                "name": "cartesian-product-0.png",
                "title": "cartesian-product-0.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UP28ETUSE",
                "editable": false,
                "size": 168377,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F0164AUB2F9/cartesian-product-0.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F0164AUB2F9/download/cartesian-product-0.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F0164AUB2F9-21c7281421/cartesian-product-0_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F0164AUB2F9-21c7281421/cartesian-product-0_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F0164AUB2F9-21c7281421/cartesian-product-0_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 131,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F0164AUB2F9-21c7281421/cartesian-product-0_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 175,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F0164AUB2F9-21c7281421/cartesian-product-0_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F0164AUB2F9-21c7281421/cartesian-product-0_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 263,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F0164AUB2F9-21c7281421/cartesian-product-0_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 292,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F0164AUB2F9-21c7281421/cartesian-product-0_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 350,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F0164AUB2F9-21c7281421/cartesian-product-0_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 373,
                "image_exif_rotation": 1,
                "original_w": 1470,
                "original_h": 536,
                "thumb_tiny": "AwARADDRJP8AhSKSBhnyfpRKCUyvUHNQtvIU7PnPfHSgCdAwzufd+GKdTMtgED86Xd0+U8+1FwHUU0vhgNrc98Uu7nGD9aAFooooAKKKKACiiigD/9k=",
                "permalink": "https://futureofcoding.slack.com/files/UP28ETUSE/F0164AUB2F9/cartesian-product-0.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F0164AUB2F9-d0e30f688f",
                "is_starred": false,
                "has_rich_preview": false
            },
            {
                "id": "F0164AUBCCF",
                "created": 1593955908,
                "timestamp": 1593955908,
                "name": "cartesian-product-1.png",
                "title": "cartesian-product-1.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UP28ETUSE",
                "editable": false,
                "size": 170283,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F0164AUBCCF/cartesian-product-1.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F0164AUBCCF/download/cartesian-product-1.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F0164AUBCCF-f35fae62b7/cartesian-product-1_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F0164AUBCCF-f35fae62b7/cartesian-product-1_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F0164AUBCCF-f35fae62b7/cartesian-product-1_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 124,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F0164AUBCCF-f35fae62b7/cartesian-product-1_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 166,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F0164AUBCCF-f35fae62b7/cartesian-product-1_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F0164AUBCCF-f35fae62b7/cartesian-product-1_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 248,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F0164AUBCCF-f35fae62b7/cartesian-product-1_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 276,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F0164AUBCCF-f35fae62b7/cartesian-product-1_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 331,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F0164AUBCCF-f35fae62b7/cartesian-product-1_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 353,
                "original_w": 1472,
                "original_h": 508,
                "thumb_tiny": "AwAQADDS5zRmlNJzQAtFJzS0AFFH4UUAf//Z",
                "permalink": "https://futureofcoding.slack.com/files/UP28ETUSE/F0164AUBCCF/cartesian-product-1.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F0164AUBCCF-265c8c3da5",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9dd3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I use this occurrence-based highlighting (giving it the semantic attribute seems a bit of an overstatement to me) in IntellIJ IDEA with Scala. Honestly, I haven't felt any improvement, but i'm also not bothered by it, so I kept it active. I guess I should disable it and see whether I'll be missing it.\n\nWhat I'd love to see, though, is a plugin that colors identifiers based on types, so that I can "
                            },
                            {
                                "type": "text",
                                "text": "see",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " how types flow through an implementation. I've created a couple images at some point to show this idea. I needed this when I was attempting to explain the implementation of a Cartesian product function to some people at a coding dojo.\n\nThe language in the screenshots is Haskell."
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UP28ETUSE",
        "ts": "1593955945.353400",
        "thread_ts": "1593951627.352200",
        "parent_user_id": "U0139HUPMQ9"
    },
    {
        "client_msg_id": "951f360b-df58-4b27-af92-43a91a964e40",
        "type": "message",
        "text": "In the example above, the type-based highlighting makes it easier to notice that the first and second pattern matches of `[]` are on different type occurences.",
        "user": "UP28ETUSE",
        "ts": "1593956204.354000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u8j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the example above, the type-based highlighting makes it easier to notice that the first and second pattern matches of "
                            },
                            {
                                "type": "text",
                                "text": "[]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are on different type occurences."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593951627.352200",
        "parent_user_id": "U0139HUPMQ9"
    },
    {
        "client_msg_id": "c37e81bb-fffb-4f91-9263-747d975ed709",
        "type": "message",
        "text": "Few ideas:\n\nThe value for beginners shouldnt be underestimated because anybody in a new codebase or language is like a beginner. Having colors for keywords and meaning makes it easier to learn the language.\n\nhighlighting helps with writing code. I find it helps me identify typos while typing because the word is the wrong color. Similarly it helps me identify keywords I forgot were keywords.\n\nSemantic highlighting can be thought of as something to strengthen code smell. If code looks the wrong color, it has a very bad smell that's easy to spot, whereas code with a single letter missing has a very subtle bad smell. \n\nI'd imagine highlighting would be most helpful for debugging.",
        "user": "UL5AX4G2H",
        "ts": "1593956769.354200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d+8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Few ideas:\n\nThe value for beginners shouldnt be underestimated because anybody in a new codebase or language is like a beginner. Having colors for keywords and meaning makes it easier to learn the language.\n\nhighlighting helps with writing code. I find it helps me identify typos while typing because the word is the wrong color. Similarly it helps me identify keywords I forgot were keywords.\n\nSemantic highlighting can be thought of as something to strengthen code smell. If code looks the wrong color, it has a very bad smell that's easy to spot, whereas code with a single letter missing has a very subtle bad smell. \n\nI'd imagine highlighting would be most helpful for debugging."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593951627.352200",
        "parent_user_id": "U0139HUPMQ9",
        "reactions": [
            {
                "name": "white_check_mark",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "487b59cb-1e24-4735-84ab-e442bffbcb27",
        "type": "message",
        "text": "I find it varies with language\u2014in C for example, I find it very helpful, quite often I'll find myself in a conversation of sorts with my editor to make sure the highlighting match up, if it doesn't highlight like I expect, I know I've made a syntactic error somewhere. On the other hand, take any lisp, I don't find highlighting tokens to be too useful at all, but I find myself doing a similar thing with the autoindenter, though rainbow parens are also great.\n\nI personally find tooling quite important",
        "user": "UT60XSVCN",
        "ts": "1593957252.354400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4XmxO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I find it varies with language\u2014in C for example, I find it very helpful, quite often I'll find myself in a conversation of sorts with my editor to make sure the highlighting match up, if it doesn't highlight like I expect, I know I've made a syntactic error somewhere. On the other hand, take any lisp, I don't find highlighting tokens to be too useful at all, but I find myself doing a similar thing with the autoindenter, though rainbow parens are also great.\n\nI personally find tooling quite important"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593951627.352200",
        "parent_user_id": "U0139HUPMQ9"
    },
    {
        "client_msg_id": "86560971-10bf-4111-a3ed-3a82c006c221",
        "type": "message",
        "text": "My experience is that syntax highlighting really helps spotting some errors quickly. If the syntax highlighting is even slightly off, it really confuses me. For example, when I started learning Rust, the VS Code incorrectly highlighted some regular names as built-ins. So before thinking of \"semantic highlighting\", I think it's more important to do \"correct highlighting\" first. For most languages, this means that you can't simply use Regex highlighting rules.\nI've used individually-colored names in Jetbrains products and liked it, but it wasn't a huge productivity boost. Rainbow-Parens are also helpful IMO.\n\nWhen talking about syntax highlighting, it's usually about text / background color and font variants (bold/italic) only. My hypothesis is that source code readablility could benefit from using different fonts for different syntactic elements. Identifiers and literals could use a sans-serif font, documentation a serif one and keywords / punctuation a monospace font. I'm currently building a prototype that uses different fonts depending on the element type. I can hopefully show something next week.",
        "user": "UAL7940NM",
        "ts": "1593960634.354800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3x8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My experience is that syntax highlighting really helps spotting some errors quickly. If the syntax highlighting is even slightly off, it really confuses me. For example, when I started learning Rust, the VS Code incorrectly highlighted some regular names as built-ins. So before thinking of \"semantic highlighting\", I think it's more important to do \"correct highlighting\" first. For most languages, this means that you can't simply use Regex highlighting rules.\nI've used individually-colored names in Jetbrains products and liked it, but it wasn't a huge productivity boost. Rainbow-Parens are also helpful IMO.\n\nWhen talking about syntax highlighting, it's usually about text / background color and font variants (bold/italic) only. My hypothesis is that source code readablility could benefit from using different fonts for different syntactic elements. Identifiers and literals could use a sans-serif font, documentation a serif one and keywords / punctuation a monospace font. I'm currently building a prototype that uses different fonts depending on the element type. I can hopefully show something next week."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593951627.352200",
        "parent_user_id": "U0139HUPMQ9",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "63743f56-4569-4781-8457-f063ed365030",
        "type": "message",
        "text": "Douglas Crockford has a similar opinion as Rob Pike about normal syntax highlighting. He discusses his system in his \"monads and gonads\" video. In it he uses color to signify scope. Here is a vscode plugin based on that idea:\n<https://github.com/azz/vscode-levels|https://github.com/azz/vscode-levels>\n\nI haven't used it myself, but I wonder whether non-traditional syntax highlighting schemes wouldn't have the same level of utility as traditional ones (which I agree is low; though I also use the \"wrong\" color as a signal that something is syntactically wrong with my code, there are better ways my editor can and does use to inform me of such problems).\n\nThere is a small set of limited colors that can be unambiguously used at the same time (say max 7ish), incidentally about the same as the limit of how many things I can hold in my head at the same time (<https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two|7, plus or minus two>). This color limit is especially true if I'm using different colors for the same syntax elements (to indicate something other than syntax, such as scope or other semantics).\n\nIn order to program I need to build up a mental model of the code. Highlighting will only help me if it can extend the capability of my brain to do that beyond its natural limits, e.g. work with a partial mental model, supported by \"color context\", or help me build up a regular mental model more quickly.",
        "user": "U0136G8R8KG",
        "ts": "1593966552.355200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "azz/vscode-levels",
                "text": ":dolls: JavaScript scope-based syntax highlighting",
                "title": "azz/vscode-levels",
                "footer": "<https://github.com/azz/vscode-levels|azz/vscode-levels>",
                "id": 1,
                "footer_icon": "https://github.githubassets.com/favicon.ico",
                "ts": 1492874481,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Stars",
                        "value": "12",
                        "short": true
                    },
                    {
                        "title": "Language",
                        "value": "TypeScript",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https://github.com/azz/vscode-levels",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j4O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Douglas Crockford has a similar opinion as Rob Pike about normal syntax highlighting. He discusses his system in his \"monads and gonads\" video. In it he uses color to signify scope. Here is a vscode plugin based on that idea:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/azz/vscode-levels",
                                "text": "https://github.com/azz/vscode-levels"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI haven't used it myself, but I wonder whether non-traditional syntax highlighting schemes wouldn't have the same level of utility as traditional ones (which I agree is low; though I also use the \"wrong\" color as a signal that something is syntactically wrong with my code, there are better ways my editor can and does use to inform me of such problems).\n\nThere is a small set of limited colors that can be unambiguously used at the same time (say max 7ish), incidentally about the same as the limit of how many things I can hold in my head at the same time ("
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two",
                                "text": "7, plus or minus two"
                            },
                            {
                                "type": "text",
                                "text": "). This color limit is especially true if I'm using different colors for the same syntax elements (to indicate something other than syntax, such as scope or other semantics).\n\nIn order to program I need to build up a mental model of the code. Highlighting will only help me if it can extend the capability of my brain to do that beyond its natural limits, e.g. work with a partial mental model, supported by \"color context\", or help me build up a regular mental model more quickly."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593951627.352200",
        "parent_user_id": "U0139HUPMQ9",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "35a74988-958a-426a-8a4d-1355646547ba",
        "type": "message",
        "text": "Another thought on this: even if studies showed that there was no productivity increase when using syntax highlighting, I'd still want to use it just for the aesthetics.",
        "user": "UAL7940NM",
        "ts": "1593969960.355500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z4SZm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another thought on this: even if studies showed that there was no productivity increase when using syntax highlighting, I'd still want to use it just for the aesthetics."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593951627.352200",
        "parent_user_id": "U0139HUPMQ9",
        "reactions": [
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "UP28ETUSE",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "50AC1EF3-7C34-4F64-AA2F-C0A1E5C2CD6A",
        "type": "message",
        "text": "Ok I watched the gtoolkit video. This feels like an exploratory programming interface. Has anyone here actually used it?",
        "user": "UFLN9JFRT",
        "ts": "1593974907.357000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vzze",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok I watched the gtoolkit video. This feels like an exploratory programming interface. Has anyone here actually used it?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593677610.126000",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "5102161E-5268-4B60-AB3F-336BC475FB2E",
        "type": "message",
        "text": "Well I am not sure we have walled gardens. Npm, container repos and others let anyone make their own version of a repo library  if they wish don\u2019t they? Or am I misunderstanding the thesis? Like Facebook did with npm and yarn ",
        "user": "UFLN9JFRT",
        "ts": "1593975241.359200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFLN9JFRT",
            "ts": "1593975298.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LY3y2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well I am not sure we have walled gardens. Npm, container repos and others let anyone make their own version of a repo library  if they wish don\u2019t they? Or am I misunderstanding the thesis? Like Facebook did with npm and yarn "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593692019.136100",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "9A3DD73E-8E5E-42BC-9968-1078BAADB3F1",
        "type": "message",
        "text": "Yep sorry I forgot to update it here. I posted here and On Hacker news ",
        "user": "UFLN9JFRT",
        "ts": "1593975361.360400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FfBx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yep sorry I forgot to update it here. I posted here and On Hacker news "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592922339.405900",
        "parent_user_id": "UGLSY9X3J"
    },
    {
        "client_msg_id": "96bac323-20b9-4c88-8a86-6786c499f94b",
        "type": "message",
        "text": "I originally had the same opinion as Rob Pike. Now, I'm programming in C++, and I sometimes disable blocks of code using ``#if  1 try this #else old code #endif`` when I am experimenting with a new implementation. Vim colours the disabled `old code` differently, so I can quickly see that a large block of code is disabled even if I can't see the preprocessor `#` tags that disabled it. That's useful. Ditto for colouring block comments and multiline string literals. On the other hand, giving each token on a line a different colour is just visual noise.",
        "user": "UJN1TAYEQ",
        "ts": "1593980946.360800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xqig",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I originally had the same opinion as Rob Pike. Now, I'm programming in C++, and I sometimes disable blocks of code using `"
                            },
                            {
                                "type": "text",
                                "text": "#if  1 try this #else old code #endif",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "` when I am experimenting with a new implementation. Vim colours the disabled "
                            },
                            {
                                "type": "text",
                                "text": "old code",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " differently, so I can quickly see that a large block of code is disabled even if I can't see the preprocessor "
                            },
                            {
                                "type": "text",
                                "text": "#",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " tags that disabled it. That's useful. Ditto for colouring block comments and multiline string literals. On the other hand, giving each token on a line a different colour is just visual noise."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593951627.352200",
        "parent_user_id": "U0139HUPMQ9",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    }
]