[
    {
        "client_msg_id": "792d9d81-1f7b-45bd-babc-b0ab0454bb74",
        "type": "message",
        "text": "Oh you're right! I guess I never actually tried clicking on them. Thank you!",
        "user": "UCUSW7WVD",
        "ts": "1595634841.408600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ajgE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh you're right! I guess I never actually tried clicking on them. Thank you!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571873.400800",
        "parent_user_id": "UE1JQM9HQ"
    },
    {
        "type": "message",
        "text": "I\u2019m writing a paper for the Human Aspects of Types and Reasoning Assistants workshop (<https://2020.splashcon.org/home/hatra-2020#Call-for-Papers>) about what makes ownership in Rust challenging to use. For example, how incompleteness of static analysis makes it hard to interpret type errors as the fault of the user or the compiler. I\u2019d love to get feedback on:\n\u2022 Does the process of interpreting a type error make sense? Does it ring true to your own experience (in Rust or other languages?)\n\u2022 Did you learn something new? Does this paper help you understand/frame the usability challenges about Rust specifically, or potentially a different language?",
        "files": [
            {
                "id": "F0179JPB77Z",
                "created": 1595636396,
                "timestamp": 1595636396,
                "name": "usability_of_ownership_draft.pdf",
                "title": "usability_of_ownership_draft.pdf",
                "mimetype": "application/pdf",
                "filetype": "pdf",
                "pretty_type": "PDF",
                "user": "UFB8STN7K",
                "editable": false,
                "size": 418094,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F0179JPB77Z/usability_of_ownership_draft.pdf",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F0179JPB77Z/download/usability_of_ownership_draft.pdf",
                "thumb_pdf": "https://files.slack.com/files-tmb/T5TCAFTA9-F0179JPB77Z-8afaa5ecf0/usability_of_ownership_draft_thumb_pdf.png",
                "thumb_pdf_w": 743,
                "thumb_pdf_h": 1100,
                "permalink": "https://futureofcoding.slack.com/files/UFB8STN7K/F0179JPB77Z/usability_of_ownership_draft.pdf",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F0179JPB77Z-cc7c058d6e",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OBf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019m writing a paper for the Human Aspects of Types and Reasoning Assistants workshop ("
                            },
                            {
                                "type": "link",
                                "url": "https://2020.splashcon.org/home/hatra-2020#Call-for-Papers"
                            },
                            {
                                "type": "text",
                                "text": ") about what makes ownership in Rust challenging to use. For example, how incompleteness of static analysis makes it hard to interpret type errors as the fault of the user or the compiler. I\u2019d love to get feedback on:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "style": "bullet",
                        "indent": 0,
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Does the process of interpreting a type error make sense? Does it ring true to your own experience (in Rust or other languages?)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Did you learn something new? Does this paper help you understand/frame the usability challenges about Rust specifically, or potentially a different language?"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UFB8STN7K",
        "display_as_bot": false,
        "ts": "1595636687.411800",
        "thread_ts": "1595636687.411800",
        "reply_count": 5,
        "reply_users_count": 3,
        "latest_reply": "1595810020.423400",
        "reply_users": [
            "UHWC9PXBL",
            "UFB8STN7K",
            "UCUSW7WVD"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "a97eb23f-1884-4f7b-949f-f0a867bed13e",
        "type": "message",
        "text": "Windows support is good news. Is 3D graphics support in the roadmap?",
        "user": "UJN1TAYEQ",
        "ts": "1595638662.412100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NvJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Windows support is good news. Is 3D graphics support in the roadmap?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571873.400800",
        "parent_user_id": "UE1JQM9HQ"
    },
    {
        "client_msg_id": "e98ea15d-7c7c-4c8b-b71a-b05a3c1917e6",
        "type": "message",
        "text": "Thank you for trying <@UCUSW7WVD> :slightly_smiling_face:",
        "user": "UE1JQM9HQ",
        "ts": "1595658570.412400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2yM8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you for trying "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571873.400800",
        "parent_user_id": "UE1JQM9HQ"
    },
    {
        "client_msg_id": "fa564a26-6875-4524-a507-579696aa29be",
        "type": "message",
        "text": "<@UJN1TAYEQ> what specifically do you mean by 3D graphics support?",
        "user": "UE1JQM9HQ",
        "ts": "1595658589.412600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3PjN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " what specifically do you mean by 3D graphics support?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571873.400800",
        "parent_user_id": "UE1JQM9HQ"
    },
    {
        "client_msg_id": "b519822d-d675-4454-923e-98d3e6c1f1c6",
        "type": "message",
        "text": "You've said that it is possible to use GT as an IDE for programming languages other than Smalltalk. My language, Curv, is a DSL for constructing interactive 2D and 3D animations. So I am investigating whether it is possible to use GT as an IDE for Curv.\n\nOne requirement is to be able to inspect Curv values (eg, inspect the value of a variable). A value in Curv may be an interactive 3D animation. I would also like to be able to construct documentation for Curv using GT, and embed Curv interactive animations within this documentation, in the manner of \"explorable explanations\" or \"The Book of Shaders\".\n\nSo the basic requirement is to be able to embed interactive 3D graphics directly in a GT window or document, rather than use a Pharo plugin that invokes the operating system to open a separate 3D graphics window outside of Pharo.\n\nPerformance is also important. I need to use the GPU to render 3D graphics to get sufficient performance for interactive frame rates. I don't want interaction to be laggy, so I'd prefer to get the pixels from the GPU frame buffer into the Pharo window in the most direct way possible.\n\nIs support for this something you would like to see in GT in the future? If so, do you have a preferred technical approach for how you would like to get there?",
        "user": "UJN1TAYEQ",
        "ts": "1595689358.412800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sR6e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You've said that it is possible to use GT as an IDE for programming languages other than Smalltalk. My language, Curv, is a DSL for constructing interactive 2D and 3D animations. So I am investigating whether it is possible to use GT as an IDE for Curv.\n\nOne requirement is to be able to inspect Curv values (eg, inspect the value of a variable). A value in Curv may be an interactive 3D animation. I would also like to be able to construct documentation for Curv using GT, and embed Curv interactive animations within this documentation, in the manner of \"explorable explanations\" or \"The Book of Shaders\".\n\nSo the basic requirement is to be able to embed interactive 3D graphics directly in a GT window or document, rather than use a Pharo plugin that invokes the operating system to open a separate 3D graphics window outside of Pharo.\n\nPerformance is also important. I need to use the GPU to render 3D graphics to get sufficient performance for interactive frame rates. I don't want interaction to be laggy, so I'd prefer to get the pixels from the GPU frame buffer into the Pharo window in the most direct way possible.\n\nIs support for this something you would like to see in GT in the future? If so, do you have a preferred technical approach for how you would like to get there?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1595571873.400800",
        "parent_user_id": "UE1JQM9HQ",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]