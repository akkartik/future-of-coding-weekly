[
    {
        "client_msg_id": "f399f859-7e9f-451e-99b3-3374a3a00209",
        "type": "message",
        "text": "<@UCUSW7WVD>\nYour journey with ncurses and termbox is fascinating. Thanks for sharing. I've tried both for some toy side projects, including dealing with bindings to other languages. TBH, even at the api leveI, I came to similar conclusions. They were big dependencies and I ended up having to manage most of my own state anyway. There was a point where I was looking into creating a terminal emulator, and I ran into the \"huge database of terminal types\" problem. There is an almost absurd backwards compatibility burden these things impose. It's such a weird artifact of history with seemingly little modern benefit.\n\nThis is a tangent, but there is a lot of hidden conservative corporate politics that keep that stuff alive. The recent news about Cobol programmers still being needed for maintenance should tell you that these old mainframes and their dumb terminals are still around, and have a surprisingly long shelf life.\n\nRe: `ioctl` Damn screen size :stuck_out_tongue: you could just force a fixed terminal size. It would be like programming a graphing calculator. It adds to the authenticity of the experience /sarcasm. (I'm full of terribly bad jokes. Ignore me and don't actually do this lol.)\n\nRe: the \"mnemonics debate\"\nYour project has really caught my attention! I think it's a very cool idea.\nI've read two of your blog posts:\n<http://akkartik.name/post/mu-2019-1>\n<http://akkartik.name/post/mu-2019-2>\nand the github issue here:\n<https://github.com/akkartik/mu/issues/39>\nI'm about a 1/3 through your paper. I'm slowly reading it in my free minutes through-out the day.",
        "user": "U01661S9F34",
        "ts": "1593730170.043200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "author_name": "akkartik",
                "fallback": "[akkartik/mu] #39 Opcode mnemonics for SubX",
                "text": "Giving mnemonics to x86 opcodes might make SubX easier for newcomers to read. This issue is intended to track the pros and cons.\n\nPrevious discussion: <https://news.ycombinator.com/item?id=21268252#21293301|https://news.ycombinator.com/item?id=21268252#21293301>\n\nInitial list of pros and cons:\n\n\u2022 Pro: names give some indication (albeit imprecise) of the operation being performed.\n\u2022 Pro: names can be checked by tooling. Typoing `8d` for `8f` seems easier than typoing `copy` for `pop`.\n\u2022 Con: per-opcode mnemonics are an additional set of things for the new reader to understand and navigate. And cross-correlate with the Intel manual, since it only gives names to sets of opcodes.\n\u2022 Con: tooling may have a hard time giving a good error message when a user typos one variant of say `add` for another.",
                "title": "#39 Opcode mnemonics for SubX",
                "footer": "<https://github.com/akkartik/mu|akkartik/mu>",
                "id": 1,
                "title_link": "https://github.com/akkartik/mu/issues/39",
                "author_link": "https://github.com/akkartik",
                "author_icon": "https://avatars3.githubusercontent.com/u/3161?v=4",
                "footer_icon": "https://github.githubassets.com/favicon.ico",
                "ts": 1571502934,
                "color": "36a64f",
                "fields": [
                    {
                        "title": "Labels",
                        "value": "proposals solicited",
                        "short": true
                    },
                    {
                        "title": "Comments",
                        "value": "5",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https://github.com/akkartik/mu/issues/39",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t8D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": "\nYour journey with ncurses and termbox is fascinating. Thanks for sharing. I've tried both for some toy side projects, including dealing with bindings to other languages. TBH, even at the api leveI, I came to similar conclusions. They were big dependencies and I ended up having to manage most of my own state anyway. There was a point where I was looking into creating a terminal emulator, and I ran into the \"huge database of terminal types\" problem. There is an almost absurd backwards compatibility burden these things impose. It's such a weird artifact of history with seemingly little modern benefit.\n\nThis is a tangent, but there is a lot of hidden conservative corporate politics that keep that stuff alive. The recent news about Cobol programmers still being needed for maintenance should tell you that these old mainframes and their dumb terminals are still around, and have a surprisingly long shelf life.\n\nRe: "
                            },
                            {
                                "type": "text",
                                "text": "ioctl",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " Damn screen size "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            },
                            {
                                "type": "text",
                                "text": " you could just force a fixed terminal size. It would be like programming a graphing calculator. It adds to the authenticity of the experience /sarcasm. (I'm full of terribly bad jokes. Ignore me and don't actually do this lol.)\n\nRe: the \"mnemonics debate\"\nYour project has really caught my attention! I think it's a very cool idea.\nI've read two of your blog posts:\n"
                            },
                            {
                                "type": "link",
                                "url": "http://akkartik.name/post/mu-2019-1"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "http://akkartik.name/post/mu-2019-2"
                            },
                            {
                                "type": "text",
                                "text": "\nand the github issue here:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/akkartik/mu/issues/39"
                            },
                            {
                                "type": "text",
                                "text": "\nI'm about a 1/3 through your paper. I'm slowly reading it in my free minutes through-out the day."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "668b735f-3bfd-42a2-b547-6b4eac634cce",
        "type": "message",
        "text": "I knew it! You've already read almost anything I could say about mnemonics. The only argument left to mention, I think, is that ambiguity complicates error handling, and again this is error handling one must implement fairly close to the metal, in unsafe machine code.\n\n<https://www.laarc.io/item?id=1945>\n\nThis, incidentally, is also why I try to minimize syntax sugar: any part of the pipeline that emits error messages can be confusing if the code it's referring to was generated by some syntax sugar it's oblivious to.\n\nThat said, syntax skins that don't persist in the source code could be interesting. None of this stuff is black and white. SubX does use syntax sugar, as you point out. We just have to take costs into account. I don't yet feel confident that I am estimating costs right in any of my design choices so far. That'll require a newcomer to actually spend time with Mu and tell me how easy it has been for them to learn/retain.",
        "user": "UCUSW7WVD",
        "ts": "1593731449.043600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1593731488.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "26rs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I knew it! You've already read almost anything I could say about mnemonics. The only argument left to mention, I think, is that ambiguity complicates error handling, and again this is error handling one must implement fairly close to the metal, in unsafe machine code.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.laarc.io/item?id=1945"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThis, incidentally, is also why I try to minimize syntax sugar: any part of the pipeline that emits error messages can be confusing if the code it's referring to was generated by some syntax sugar it's oblivious to.\n\nThat said, syntax skins that don't persist in the source code could be interesting. None of this stuff is black and white. SubX does use syntax sugar, as you point out. We just have to take costs into account. I don't yet feel confident that I am estimating costs right in any of my design choices so far. That'll require a newcomer to actually spend time with Mu and tell me how easy it has been for them to learn/retain."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "slightly_smiling_face",
                "users": [
                    "U01661S9F34"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "5b3dc060-3bda-4af2-891a-9975dd775124",
        "type": "message",
        "text": "Fun tidbit, because it was mentioned in the laarc thread you reference, I first learned assembly with \"the Art of Assembly\" book and HLA. I have fond memories of it. That probably gives away some bias I have :smile:\n\nYou have definitely made me question some assumptions I had about assembly language. I intuitively want mnemonics. I think your worry about making the user have to look up extra tables in their mind may not be as big of a problem as you think (especially if you provide good documentation). But you bring up some really good points about the implementation complexity, especially around error messages at this level.\n\nIf you do support mnemonics, also supporting a base 10 to base 16 translation seems like a natural next step. The two syntax sugars compliment each other.\n\nThere is probably still value in having a base 10 translation pass without a mnemonics pass, but maybe less so.\n\n\"That'll require a newcomer to actually spend time with Mu and tell me how easy it has been for them to learn/retain.\"\n\nlol. I get the hint. Curiosity might get the better of me and convince me to pull the repo and play with Mu. But I make no promises :smirk:",
        "user": "U01661S9F34",
        "ts": "1593742264.044200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JSMor",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fun tidbit, because it was mentioned in the laarc thread you reference, I first learned assembly with \"the Art of Assembly\" book and HLA. I have fond memories of it. That probably gives away some bias I have "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            },
                            {
                                "type": "text",
                                "text": "\n\nYou have definitely made me question some assumptions I had about assembly language. I intuitively want mnemonics. I think your worry about making the user have to look up extra tables in their mind may not be as big of a problem as you think (especially if you provide good documentation). But you bring up some really good points about the implementation complexity, especially around error messages at this level.\n\nIf you do support mnemonics, also supporting a base 10 to base 16 translation seems like a natural next step. The two syntax sugars compliment each other.\n\nThere is probably still value in having a base 10 translation pass without a mnemonics pass, but maybe less so.\n\n\"That'll require a newcomer to actually spend time with Mu and tell me how easy it has been for them to learn/retain.\"\n\nlol. I get the hint. Curiosity might get the better of me and convince me to pull the repo and play with Mu. But I make no promises "
                            },
                            {
                                "type": "emoji",
                                "name": "smirk"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593647953.023500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "f05c86cc-d2cc-45ee-a44e-503adddfea85",
        "type": "message",
        "text": "It is the end of my first \"full time\" week, and it is really cool (yet a bit weird for now) to have the \"future of programming\" as the main thing to think about. So some video watching, some chat, some reading, etc. And, some archeology on an old project with a bit of coding to refresh tiny parts and try new things.\nIt is what I then called *zed*, an editor highly inspired by PureData and Max/MSP but to mix visual programming with text programming for the web platform (and, sorry, no audio for now). The podcast episode with Miller Puckette (the father of PureData and Max/MSP) two month ago made me want to make a TMW video on this zed project, in echo of the discussions following the podcast (and didn't have time then): <https://futureofcoding.slack.com/archives/C5T9GPWFL/p1589265827352600>\nSo here is a quick (2 minutes is really short...) presentation of this old project of mine which I will kept some ideas for my future work: <https://archive.org/details/ogadaki_foc_tmw_1>",
        "user": "UJ6LDMMN0",
        "ts": "1593813312.058700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJ6LDMMN0",
            "ts": "1593814800.000000"
        },
        "attachments": [
            {
                "service_name": "Internet Archive",
                "title": "ogadaki FoC TMW #1 : Ogadaki : Free Download, Borrow, and Streaming : Internet Archive",
                "title_link": "https://archive.org/details/ogadaki_foc_tmw_1",
                "text": "Episode 1 from ogadaki for the two-minutes-week video of the Future of Coding community",
                "fallback": "Internet Archive: ogadaki FoC TMW #1 : Ogadaki : Free Download, Borrow, and Streaming : Internet Archive",
                "thumb_url": "https://archive.org/download/ogadaki_foc_tmw_1/ogadaki_foc_tmw_1.thumbs/ogadaki_foc_tmw_1_000027.jpg",
                "video_html_width": 853,
                "video_html_height": 480,
                "video_url": "https://archive.org/download/ogadaki_foc_tmw_1/ogadaki_foc_tmw_1.mp4",
                "from_url": "https://archive.org/details/ogadaki_foc_tmw_1",
                "thumb_width": 720,
                "thumb_height": 406,
                "service_icon": "https://archive.org/favicon.ico",
                "id": 2,
                "original_url": "https://archive.org/details/ogadaki_foc_tmw_1"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B8DI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It is the end of my first \"full time\" week, and it is really cool (yet a bit weird for now) to have the \"future of programming\" as the main thing to think about. So some video watching, some chat, some reading, etc. And, some archeology on an old project with a bit of coding to refresh tiny parts and try new things.\nIt is what I then called "
                            },
                            {
                                "type": "text",
                                "text": "zed",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", an editor highly inspired by PureData and Max/MSP but to mix visual programming with text programming for the web platform (and, sorry, no audio for now). The podcast episode with Miller Puckette (the father of PureData and Max/MSP) two month ago made me want to make a TMW video on this zed project, in echo of the discussions following the podcast (and didn't have time then): "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1589265827352600"
                            },
                            {
                                "type": "text",
                                "text": "\nSo here is a quick (2 minutes is really short...) presentation of this old project of mine which I will kept some ideas for my future work: "
                            },
                            {
                                "type": "link",
                                "url": "https://archive.org/details/ogadaki_foc_tmw_1"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593813312.058700",
        "reply_count": 10,
        "reply_users_count": 7,
        "latest_reply": "1595232716.139000",
        "reply_users": [
            "UC2A2ARPT",
            "UHWC9PXBL",
            "UCUSW7WVD",
            "UJ6LDMMN0",
            "UUQ2EQW21",
            "U013ZLJARC7",
            "UAVCC2X70"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UP3FH4CLU",
                    "UHWC9PXBL",
                    "UA14TGLTC",
                    "U5T9JLUAE",
                    "U013ZLJARC7",
                    "U016KSS47EF",
                    "UAVCC2X70"
                ],
                "count": 8
            },
            {
                "name": "heart_eyes",
                "users": [
                    "UC2A2ARPT",
                    "UHWC9PXBL"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UAZT04VT4",
                    "UUQ2EQW21"
                ],
                "count": 3
            }
        ]
    }
]