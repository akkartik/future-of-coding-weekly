[
    {
        "client_msg_id": "48858e35-cc6f-45ca-bd8c-38b0e6098d6c",
        "type": "message",
        "text": "I know might be heresy but I'm curious why people like the interaction of scrubbing numbers.\nIMO it's hardly discoverable, it lacks reference values to know how far to drag and feels like poor UX.\nWhat others think about it?\nThe first time I saw it was on Bret Victor's learnable programming, also great to know more history about it, and if somebody knows previous uses of it.\n<http://worrydream.com/LearnableProgramming/Movies/Vocab12.mp4>",
        "user": "U85HCL7JP",
        "ts": "1598051713.009800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U85HCL7JP",
            "ts": "1598051808.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "61hZT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I know might be heresy but I'm curious why people like the interaction of scrubbing numbers.\nIMO it's hardly discoverable, it lacks reference values to know how far to drag and feels like poor UX.\nWhat others think about it?\nThe first time I saw it was on Bret Victor's learnable programming, also great to know more history about it, and if somebody knows previous uses of it.\n"
                            },
                            {
                                "type": "link",
                                "url": "http://worrydream.com/LearnableProgramming/Movies/Vocab12.mp4"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598051713.009800",
        "reply_count": 21,
        "reply_users_count": 9,
        "latest_reply": "1598248276.080500",
        "reply_users": [
            "UC2A2ARPT",
            "U6FKVSVCK",
            "UJN1TAYEQ",
            "UMWF81HTP",
            "UUQ2EQW21",
            "UBN9AFS0N",
            "U013GB24BD4",
            "U85HCL7JP",
            "U0123H7JRDM"
        ],
        "subscribed": true,
        "last_read": "1598114060.032100",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e431e80a-edb1-478b-b0d8-fd8ba0f4d06e",
        "type": "message",
        "text": "My initial angle on this \u2014 they're a bit like a 1D, text-code version of <https://futureofcoding.slack.com/archives/C5U3SEW6A/p1597389554026100|this style> of 2D GUI input (see also the <https://en.wikipedia.org/wiki/Kaoss_Pad|Kaoss pad>). I don't much care for the inline scrubbing numbers a la Bret's <http://worrydream.com/Tangle/|Tangle>, since they feel like the _tiniest_ step away from text code toward a richer graphical/visual coding environment. I'd prefer that we just take the whole entire step and start building rich scrubbers in a truly graphical/visual context.\n\nAll that said \u2014 basic scrubbers are nice if the medium you're working in is purely text. That's what's nice about Tangle. It's not for programming, it's for prose.",
        "user": "UC2A2ARPT",
        "ts": "1598052041.010000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1598052103.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PBc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My initial angle on this \u2014 they're a bit like a 1D, text-code version of "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1597389554026100",
                                "text": "this style"
                            },
                            {
                                "type": "text",
                                "text": " of 2D GUI input (see also the "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Kaoss_Pad",
                                "text": "Kaoss pad"
                            },
                            {
                                "type": "text",
                                "text": "). I don't much care for the inline scrubbing numbers a la Bret's "
                            },
                            {
                                "type": "link",
                                "url": "http://worrydream.com/Tangle/",
                                "text": "Tangle"
                            },
                            {
                                "type": "text",
                                "text": ", since they feel like the "
                            },
                            {
                                "type": "text",
                                "text": "tiniest ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "step away from text code toward a richer graphical/visual coding environment. I'd prefer that we just take the whole entire step and start building rich scrubbers in a truly graphical/visual context.\n\nAll that said \u2014 basic scrubbers are nice if the medium you're working in is purely text. That's what's nice about Tangle. It's not for programming, it's for prose."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598051713.009800",
        "parent_user_id": "U85HCL7JP",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U85HCL7JP"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c464c32b-3ecf-4860-ba4b-b9834553d88b",
        "type": "message",
        "text": "Number-scrubbers are pretty common in visual effects software. You might have a text expression that drives something visual, and dialing in something to taste is _terrible_ UX  if you have to type out numbers.\n\nUsually the dragging \"scale\" is adjusted for the magnitude of the number that you're scrubbing. Some apps also let you manually choose the sensitivity with a context menu.",
        "user": "U6FKVSVCK",
        "ts": "1598052918.010600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kxbNj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Number-scrubbers are pretty common in visual effects software. You might have a text expression that drives something visual, and dialing in something to taste is "
                            },
                            {
                                "type": "text",
                                "text": "terrible",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " UX  if you have to type out numbers.\n\nUsually the dragging \"scale\" is adjusted for the magnitude of the number that you're scrubbing. Some apps also let you manually choose the sensitivity with a context menu."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598051713.009800",
        "parent_user_id": "U85HCL7JP",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UMWF81HTP",
                    "U013GB24BD4"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "8c262cef-f761-4fd9-8154-be34ee8f4f24",
        "type": "message",
        "text": "The domain where I want to use it is writing programs that generate graphics. What makes this interaction awesome is that you get continuous feedback in the graphics output area while you are scrubbing the value. So much more productive than: type in a number, render, type in another number, render.",
        "user": "UJN1TAYEQ",
        "ts": "1598052925.010800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BgfAi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The domain where I want to use it is writing programs that generate graphics. What makes this interaction awesome is that you get continuous feedback in the graphics output area while you are scrubbing the value. So much more productive than: type in a number, render, type in another number, render."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598051713.009800",
        "parent_user_id": "U85HCL7JP",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "313a0fa7-d400-4f6d-83d0-6601560c362f",
        "type": "message",
        "text": "This UI isn't restricted to 1D. In the other thread, I referenced the <https://github.com/patriciogonzalezvivo/glslEditor|glslEditor> project on github, which supports colour scrubbers and vector scrubbers.",
        "user": "UJN1TAYEQ",
        "ts": "1598053141.011000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1598053915.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7OCy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This UI isn't restricted to 1D. In the other thread, I referenced the "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/patriciogonzalezvivo/glslEditor",
                                "text": "glslEditor"
                            },
                            {
                                "type": "text",
                                "text": " project on github, which supports colour scrubbers and vector scrubbers."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598051713.009800",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "3bee1692-35f3-420f-9386-f349c6dd5c47",
        "type": "message",
        "text": "Seconding their applicability in graphics stuff. Also note how Bret uses it to tune the jump factor in the demo game in \"Inventing on Principle\". Scrubbers are great for situations like that when you're trying to find \"magic numbers\"- parameters you don't care what exact value they are as much as how they affect your simulation in relation to others.",
        "user": "UMWF81HTP",
        "ts": "1598059231.011800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UMWF81HTP",
            "ts": "1598059280.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "REm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Seconding their applicability in graphics stuff. Also note how Bret uses it to tune the jump factor in the demo game in \"Inventing on Principle\". Scrubbers are great for situations like that when you're trying to find \"magic numbers\"- parameters you don't care what exact value they are as much as how they affect your simulation in relation to others."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598051713.009800",
        "parent_user_id": "U85HCL7JP",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "ULK0Z4MPV",
                    "UKP3B2J5D",
                    "U015V233CFL"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "fd02d397-c335-4008-b35a-fe50100be2ca",
        "type": "message",
        "text": "re: discoverability, this can be a valid critique of some systems. After Effects however signals scrubbability by giving the numbers an underline+blue text to signal interactivity, and when you hover over them your cursor turns into that horizontal scrubbing icon `&lt;-&gt;` (will edit later with the correct name).",
        "user": "UMWF81HTP",
        "ts": "1598059829.012100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eM5jM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "re: discoverability, this can be a valid critique of some systems. After Effects however signals scrubbability by giving the numbers an underline+blue text to signal interactivity, and when you hover over them your cursor turns into that horizontal scrubbing icon "
                            },
                            {
                                "type": "text",
                                "text": "<->",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (will edit later with the correct name)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598051713.009800",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "ac56ce70-a3e5-4653-a8bf-2b814fa127ae",
        "type": "message",
        "text": "Further on discoverability \u2014 there are a lot of tools (3d programs, for instance) where _all_ number inputs are scrubbable, and it's clear from the styling whenever a field is just an output/measurement and not an input.\n\nOther tools will put a vertical up/down control next to the field, and (like Yoshiki said) the cursor changes to give you a hint that it can be scrubbed.\n\n_On the other hand:_ number-type inputs in some web browsers are automatically scrubbable _using the scroll wheel!_ So it's regretfully easy to accidentally scrub them when trying to scroll through the page. Argh!",
        "user": "UC2A2ARPT",
        "ts": "1598069924.012500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1598070021.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2uo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Further on discoverability \u2014 there are a lot of tools (3d programs, for instance) where "
                            },
                            {
                                "type": "text",
                                "text": "all",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " number inputs are scrubbable, and it's clear from the styling whenever a field is just an output/measurement and not an input.\n\nOther tools will put a vertical up/down control next to the field, and (like Yoshiki said) the cursor changes to give you a hint that it can be scrubbed.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "On the other hand: ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "number-type inputs in some web browsers are automatically scrubbable "
                            },
                            {
                                "type": "text",
                                "text": "using the scroll wheel! ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "So it's regretfully easy to accidentally scrub them when trying to scroll through the page. Argh!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598051713.009800",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "b59ffd14-885c-4ff6-ac19-324450a8fb17",
        "type": "message",
        "text": "Reference values is another interesting facet that Daniel raised. Ignoring traditional sliders or input-&gt;output graph views (the Curves adjustment in Photoshop, say), I can't think of any text-based scrubbers that do a good job hinting at ranges or reference values.\n\nI guess one way would be to express a value as a percentage.\n\nGoing further \u2014 how do you hint that the value has some degree of nonlinearity to its effect, just using text?",
        "user": "UC2A2ARPT",
        "ts": "1598070236.012800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1598070278.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ita/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reference values is another interesting facet that Daniel raised. Ignoring traditional sliders or input->output graph views (the Curves adjustment in Photoshop, say), I can't think of any text-based scrubbers that do a good job hinting at ranges or reference values.\n\nI guess one way would be to express a value as a percentage.\n\nGoing further \u2014 how do you hint that the value has some degree of nonlinearity to its effect, just using text?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598051713.009800",
        "parent_user_id": "U85HCL7JP",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UMWF81HTP"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "08EAB997-909A-4CFF-A0C8-6F868749EC2A",
        "type": "message",
        "text": "Yeah there are a lot of cases I can think of where ~reference~ range values are part of the tacit knowledge you have when approaching the system, f<https://medium.com/@jxnblk/mathematical-web-typography-d69186780a41|or example \u201cscales\u201d in a design system.> So I think this limitation of scrubbable numbers can\u2019t be discussed absent of specific contexts like that. I can also imagine situations where they aren\u2019t appropriate(also cases where ppl get overly enthusiastic in using them in the wrong context. On reflection, I\u2019ve done this before!!)",
        "user": "UMWF81HTP",
        "ts": "1598070737.017300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UMWF81HTP",
            "ts": "1598075789.000000"
        },
        "attachments": [
            {
                "service_name": "Medium",
                "title": "Mathematical Web Typography",
                "title_link": "https://medium.com/@jxnblk/mathematical-web-typography-d69186780a41",
                "text": "When it comes to designing for the Web I like to follow a handful of general principles. First, design for the medium, or as Frank Chimero puts it, follow \u201cthe grain of the Web\u201d. The Web is fluid \u2014\u2026",
                "fallback": "Medium: Mathematical Web Typography",
                "fields": [
                    {
                        "title": "Reading time",
                        "value": "5 min read",
                        "short": true
                    }
                ],
                "ts": 1445101792,
                "from_url": "https://medium.com/@jxnblk/mathematical-web-typography-d69186780a41",
                "service_icon": "https://cdn-images-1.medium.com/fit/c/152/152/1*8I-HPL0bfoIzGied-dzOvA.png",
                "id": 1,
                "original_url": "https://medium.com/@jxnblk/mathematical-web-typography-d69186780a41"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MtdSI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah there are a lot of cases I can think of where "
                            },
                            {
                                "type": "text",
                                "text": "reference",
                                "style": {
                                    "strike": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " range values are part of the tacit knowledge you have when approaching the system, f"
                            },
                            {
                                "type": "link",
                                "url": "https://medium.com/@jxnblk/mathematical-web-typography-d69186780a41",
                                "text": "or example \u201cscales\u201d in a design system."
                            },
                            {
                                "type": "text",
                                "text": " So I think this limitation of scrubbable numbers can\u2019t be discussed absent of specific contexts like that. I can also imagine situations where they aren\u2019t appropriate(also cases where ppl get overly enthusiastic in using them in the wrong context. On reflection, I\u2019ve done this before!!)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598051713.009800",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "type": "message",
        "text": "As some of you know, I've worked a bit on this stuff and plan to do more.  I'm hoping to give this feature some love over the next couple of weeks; mainly because recent discussions here have inspired me to do better.\nThis is what I did the last time I looked at it; auto discover the variable and add a slider in a space somewhere around it.\nYou can imagine a color swatch or some other style of widget to make it obvious; and allowing the user to add a comment to help identify the UI for ambiguous cases.\n```float val; // widget-slider```\nI agree that plain numbers aren't as discoverable, but the way they are drawn is different in the demo posted by <@U013GB24BD4> - with their black backgrounds.  I think you only have to 'discover' them once.  And a pop-up indicator with limits, etc. would be easy enough to do.\nThat said, I think I still prefer adding UI widgets inside the document, giving it more of the feel of a jupyter doc.  Indicating non-linearity or limits is much easier if you aren't restricted to text.\nAnother idea I had was to have the widgets 'cover' the text and fade back to editable text based on context, but I think this is probably too confusing.",
        "files": [
            {
                "id": "F0199BHJQKF",
                "created": 1598081468,
                "timestamp": 1598081468,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UUQ2EQW21",
                "editable": false,
                "size": 26226,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F0199BHJQKF/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F0199BHJQKF/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F0199BHJQKF-181ab9d318/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F0199BHJQKF-181ab9d318/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F0199BHJQKF-181ab9d318/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 150,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F0199BHJQKF-181ab9d318/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 200,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F0199BHJQKF-181ab9d318/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F0199BHJQKF-181ab9d318/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 299,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F0199BHJQKF-181ab9d318/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 333,
                "original_w": 818,
                "original_h": 340,
                "thumb_tiny": "AwATADCt5gxyB+VJ5gpo5OMge5o5yPmFADvMH+RQZB25ppzyNwpCuDjIP0oAd5ntR5ntTSuO4P0pKAFPGKTJ9aU9BSUAFFFFABRRRQB//9k=",
                "permalink": "https://futureofcoding.slack.com/files/UUQ2EQW21/F0199BHJQKF/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F0199BHJQKF-523c4e62f0",
                "is_starred": false,
                "has_rich_preview": false
            },
            {
                "id": "F019GU0GL04",
                "created": 1598081847,
                "timestamp": 1598081847,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UUQ2EQW21",
                "editable": false,
                "size": 67401,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F019GU0GL04/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F019GU0GL04/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F019GU0GL04-d461c140e7/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F019GU0GL04-d461c140e7/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F019GU0GL04-d461c140e7/image_360.png",
                "thumb_360_w": 162,
                "thumb_360_h": 360,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F019GU0GL04-d461c140e7/image_480.png",
                "thumb_480_w": 215,
                "thumb_480_h": 480,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F019GU0GL04-d461c140e7/image_160.png",
                "original_w": 281,
                "original_h": 626,
                "thumb_tiny": "AwAwABWnTmiZRkrxSKQCCanNwDEVx06GqsLSxWYYptOam0gH0mfY0tFMBpOexpPwNOakpASI5Q8dPSn/ALp+uY2/MVDmjcKTS3AWRdrYyD7imUpINJmmB//Z",
                "permalink": "https://futureofcoding.slack.com/files/UUQ2EQW21/F019GU0GL04/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F019GU0GL04-dd1089440f",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2lzx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As some of you know, I've worked a bit on this stuff and plan to do more.  I'm hoping to give this feature some love over the next couple of weeks; mainly because recent discussions here have inspired me to do better.\nThis is what I did the last time I looked at it; auto discover the variable and add a slider in a space somewhere around it.\nYou can imagine a color swatch or some other style of widget to make it obvious; and allowing the user to add a comment to help identify the UI for ambiguous cases.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "float val; // widget-slider"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree that plain numbers aren't as discoverable, but the way they are drawn is different in the demo posted by "
                            },
                            {
                                "type": "user",
                                "user_id": "U013GB24BD4"
                            },
                            {
                                "type": "text",
                                "text": " - with their black backgrounds.  I think you only have to 'discover' them once.  And a pop-up indicator with limits, etc. would be easy enough to do.\nThat said, I think I still prefer adding UI widgets inside the document, giving it more of the feel of a jupyter doc.  Indicating non-linearity or limits is much easier if you aren't restricted to text.\nAnother idea I had was to have the widgets 'cover' the text and fade back to editable text based on context, but I think this is probably too confusing."
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UUQ2EQW21",
        "ts": "1598081934.019300",
        "thread_ts": "1598051713.009800",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "77523a81-647e-4fbf-bf59-dc9520723ca9",
        "type": "message",
        "text": "Extremely shallow feedback, but: the project name &amp; logo are fantastic. :grin:",
        "user": "UBKNXPBAB",
        "ts": "1598084021.019900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bHw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Extremely shallow feedback, but: the project name & logo are fantastic. "
                            },
                            {
                                "type": "emoji",
                                "name": "grin"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1596648362.184600",
        "parent_user_id": "UPU0YJ1CM",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UPVBV34EL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "fc34d5f4-74d1-45f1-bdd8-8e0b1ceb4036",
        "type": "message",
        "text": "I always found the discoverability hard and for the stuff I do the problem is that if a thing can be scrubbed, then it can't be dragged :confused:",
        "user": "UBN9AFS0N",
        "ts": "1598091454.020100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "onyKh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I always found the discoverability hard and for the stuff I do the problem is that if a thing can be scrubbed, then it can't be dragged "
                            },
                            {
                                "type": "emoji",
                                "name": "confused"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598051713.009800",
        "parent_user_id": "U85HCL7JP",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3e367d40-157b-435c-99f9-af679a94b10f",
        "type": "message",
        "text": "<@UBN9AFS0N> if you have ways to toggle the scrubbing then standard text interactions (selection, dragging) are still possible.\n\nHere's two possibilities:\nToggling (Ctrl+Shift): <https://codepen.io/domjancik/pen/XWdjrQv>\nHold to enable (Ctrl): <https://codepen.io/domjancik/pen/VwamOyJ>",
        "user": "U013GB24BD4",
        "ts": "1598097055.020600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U013GB24BD4",
            "ts": "1598100501.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A1CGf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " if you have ways to toggle the scrubbing then standard text interactions (selection, dragging) are still possible.\n\nHere's two possibilities:\nToggling (Ctrl+Shift): "
                            },
                            {
                                "type": "link",
                                "url": "https://codepen.io/domjancik/pen/XWdjrQv"
                            },
                            {
                                "type": "text",
                                "text": "\nHold to enable (Ctrl): "
                            },
                            {
                                "type": "link",
                                "url": "https://codepen.io/domjancik/pen/VwamOyJ"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598051713.009800",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "0ab4c353-9172-4345-861f-54db1096bc76",
        "type": "message",
        "text": "yes, there are ways, but they become less discoverable even :slightly_smiling_face:",
        "user": "UBN9AFS0N",
        "ts": "1598098498.021000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=Q2F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yes, there are ways, but they become less discoverable even "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598051713.009800",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "fc657ed8-b2b6-40c9-96dc-067e392d7226",
        "type": "message",
        "text": "<@UBN9AFS0N> Prompt? <https://codepen.io/domjancik/pen/VwamOyJ>",
        "user": "U013GB24BD4",
        "ts": "1598100551.021500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U013GB24BD4",
            "ts": "1598100562.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dlO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " Prompt? "
                            },
                            {
                                "type": "link",
                                "url": "https://codepen.io/domjancik/pen/VwamOyJ"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598051713.009800",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "574dbc16-6b8e-48e8-8d9c-d5cc7458334a",
        "type": "message",
        "text": "yes, that's the way I'm solving the discoverability problems in my app, tooltip (almost) all the things, but instead of showing them as tooltips I show them always in the same place with some extra metadata",
        "user": "UBN9AFS0N",
        "ts": "1598102589.021900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cXg7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yes, that's the way I'm solving the discoverability problems in my app, tooltip (almost) all the things, but instead of showing them as tooltips I show them always in the same place with some extra metadata"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598051713.009800",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "49628653-40f9-4053-acd7-d8e807233183",
        "type": "message",
        "text": "<@U013GB24BD4> you linked twice to the same link, maybe you copied the wrong one? :slightly_smiling_face:",
        "user": "UBN9AFS0N",
        "ts": "1598103280.022100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YiP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013GB24BD4"
                            },
                            {
                                "type": "text",
                                "text": " you linked twice to the same link, maybe you copied the wrong one? "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598051713.009800",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "b0178ece-b347-4da4-8141-fd56fb271c04",
        "type": "message",
        "text": "&gt; Scrubbers are great for situations like that when you're trying to find \"magic numbers\"\nTo me the real solution would be to fix the problem of magic numbers, I know it's a hard thing to do. But scrubbers just feel like a bandaid to the real problem.",
        "user": "U85HCL7JP",
        "ts": "1598112423.022400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hc0i",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Scrubbers are great for situations like that when you're trying to find \"magic numbers\""
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To me the real solution would be to fix the problem of magic numbers, I know it's a hard thing to do. But scrubbers just feel like a bandaid to the real problem."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598051713.009800",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "9E18EBC7-57E1-4FA5-86BB-125906EA6D97",
        "type": "message",
        "text": "The solution that I want is more like a real knob/slider which you can turn (or slide). A knob can be endless if that fits the situation. So that you can be precise if needed or change the value to a much higher value by turning the knob faster. These kind of knobs are available on midi controllers and I've seen them in software (ableton and vst's come to mind) as well. It would be cool if the html-browser range input would support this behavior more or less out of the box",
        "user": "U0123H7JRDM",
        "ts": "1598114060.032100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RyvNM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The solution that I want is more like a real knob/slider which you can turn (or slide). A knob can be endless if that fits the situation. So that you can be precise if needed or change the value to a much higher value by turning the knob faster. These kind of knobs are available on midi controllers and I've seen them in software (ableton and vst's come to mind) as well. It would be cool if the html-browser range input would support this behavior more or less out of the box"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598051713.009800",
        "parent_user_id": "U85HCL7JP"
    },
    {
        "client_msg_id": "3c81e37b-da1e-4e34-acd7-289613f11bc9",
        "type": "message",
        "text": "*Imperative programming and math pedagogy:*\nTLDR; converting an algorithm or concept from a research paper into imperative code is often seen as tedious, but I think the process helps with learning and clarifying understanding. This is an underrated advantage of imperative code.\n\nThoughts? Do you agree or disagree? How can this idea of \"reification\" of algorithms be extended to other paradigms?\n\n*The long version:*\nI am a big fan of Coding Adventures by Sebastian Lague. He just release a new video: <https://www.youtube.com/watch?v=DxfEbulyFcY>\n\nHe skims over the details (the videos are more edutainment than true in depth education), but a strategy he seems to follow is to look at the top research papers on a subject, take the key equations, and implement those equations as shaders in Unity with HLSL i.e. a C derivative language.\n\nThis is a technique I'm very familiar with. I assume many people here are familiar with it as well. It can be tedious work to do this kind of translation, but it's hugely useful. I find that after doing a translation like that, I often have a much stronger understanding of the concept.\n\nThe way I truly understood integrals and summations was through implementing them as for loops.\n\nI didn't understand monads and combinators until I implemented a parser combinator in an imperative language. In PHP no less. I was young and naive :stuck_out_tongue:.\n\nMany people in this community are fans of functional programming; there have been quite a few threads about ways to encode algorithms more effectively or \"true to their mathematical form:\" everything from APL to natural language to category theory.\n\nThis is a counterpoint against always looking for the \"most efficient way\" to encode an algorithm.\n\nThere is something about taking something \"functional\" and reifying it into a series of imperative steps that helps understanding a concept, at least for my personal learning style.\n\nI have very little experience with visual programming, but things like Factorio (mentioned recently), make me think that reification as learning tool can be just as effective in the visual paradigm. How can this idea of \"reification\" of algorithms be extended to other paradigms, or taken into account more generally?",
        "user": "U01661S9F34",
        "ts": "1598125322.060600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Coding Adventure: Atmosphere",
                "title_link": "https://www.youtube.com/watch?v=DxfEbulyFcY",
                "author_name": "Sebastian Lague",
                "author_link": "https://www.youtube.com/user/Cercopithecan",
                "thumb_url": "https://i.ytimg.com/vi/DxfEbulyFcY/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Coding Adventure: Atmosphere",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/DxfEbulyFcY?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=DxfEbulyFcY",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=DxfEbulyFcY"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wx9x9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Imperative programming and math pedagogy:",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nTLDR; converting an algorithm or concept from a research paper into imperative code is often seen as tedious, but I think the process helps with learning and clarifying understanding. This is an underrated advantage of imperative code.\n\nThoughts? Do you agree or disagree? How can this idea of \"reification\" of algorithms be extended to other paradigms?\n\n"
                            },
                            {
                                "type": "text",
                                "text": "The long version:",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nI am a big fan of Coding Adventures by Sebastian Lague. He just release a new video: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=DxfEbulyFcY"
                            },
                            {
                                "type": "text",
                                "text": "\n\nHe skims over the details (the videos are more edutainment than true in depth education), but a strategy he seems to follow is to look at the top research papers on a subject, take the key equations, and implement those equations as shaders in Unity with HLSL i.e. a C derivative language.\n\nThis is a technique I'm very familiar with. I assume many people here are familiar with it as well. It can be tedious work to do this kind of translation, but it's hugely useful. I find that after doing a translation like that, I often have a much stronger understanding of the concept.\n\nThe way I truly understood integrals and summations was through implementing them as for loops.\n\nI didn't understand monads and combinators until I implemented a parser combinator in an imperative language. In PHP no less. I was young and naive "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nMany people in this community are fans of functional programming; there have been quite a few threads about ways to encode algorithms more effectively or \"true to their mathematical form:\" everything from APL to natural language to category theory.\n\nThis is a counterpoint against always looking for the \"most efficient way\" to encode an algorithm.\n\nThere is something about taking something \"functional\" and reifying it into a series of imperative steps that helps understanding a concept, at least for my personal learning style.\n\nI have very little experience with visual programming, but things like Factorio (mentioned recently), make me think that reification as learning tool can be just as effective in the visual paradigm. How can this idea of \"reification\" of algorithms be extended to other paradigms, or taken into account more generally?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598125322.060600",
        "reply_count": 11,
        "reply_users_count": 6,
        "latest_reply": "1598252784.081300",
        "reply_users": [
            "UJN1TAYEQ",
            "UCUSW7WVD",
            "U01661S9F34",
            "UUQ2EQW21",
            "UJBAJNFLK",
            "U013ZLJARC7"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U014WA16VNJ",
                    "UCUSW7WVD"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "c8b12dbc-cf7e-45e8-9d6f-6ebbfa0a44a0",
        "type": "message",
        "text": "I'll rewrite your statement slightly: \"Implementing an algorithm or concept from a research paper as code that you have written from scratch is a process that helps with learning and clarifying understanding.\" No need to restrict this to imperative code. One trick I use to understand a difficult research paper is to write out the concepts in my own language (in English, I mean).",
        "user": "UJN1TAYEQ",
        "ts": "1598128463.060900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RDnIm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'll rewrite your statement slightly: \"Implementing an algorithm or concept from a research paper as code that you have written from scratch is a process that helps with learning and clarifying understanding.\" No need to restrict this to imperative code. One trick I use to understand a difficult research paper is to write out the concepts in my own language (in English, I mean)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598125322.060600",
        "parent_user_id": "U01661S9F34",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UBKNXPBAB",
                    "U01661S9F34"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "bc3f9ad8-59a5-4a3d-8fb5-2c6b71627b5b",
        "type": "message",
        "text": "Of course, when you write code as a way of learning or understanding someone else's ideas, you should code in a language and style that you understand very well, and feel most comfortable in. For many people, that will be imperative code. That may be because the first programming language most people learn is imperative. Whether imperative programming is inherently easier to understand than function programming is a separate issue.",
        "user": "UJN1TAYEQ",
        "ts": "1598128588.061200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "33Lv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Of course, when you write code as a way of learning or understanding someone else's ideas, you should code in a language and style that you understand very well, and feel most comfortable in. For many people, that will be imperative code. That may be because the first programming language most people learn is imperative. Whether imperative programming is inherently easier to understand than function programming is a separate issue."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598125322.060600",
        "parent_user_id": "U01661S9F34"
    },
    {
        "client_msg_id": "f63f9cf9-ca13-4cec-b45c-0b9cfc776d39",
        "type": "message",
        "text": "Yeah, I agree with Doug. While my personal experience agrees with Ray's, I have to conclude after looking around that the phrase \"personal learning style\" is key.\n\nThere's some overlap between this thread and my pet pedagogical approach of learning things bottom up. I found it easier to learn Haskell by ignoring layout rules and infix operators, and explicitly specifying the bounds of each function call.",
        "user": "UCUSW7WVD",
        "ts": "1598128706.061400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vmlay",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I agree with Doug. While my personal experience agrees with Ray's, I have to conclude after looking around that the phrase \"personal learning style\" is key.\n\nThere's some overlap between this thread and my pet pedagogical approach of learning things bottom up. I found it easier to learn Haskell by ignoring layout rules and infix operators, and explicitly specifying the bounds of each function call."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598125322.060600",
        "parent_user_id": "U01661S9F34",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U01661S9F34",
                    "UUQ2EQW21"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "8481a360-1ae5-4ed7-8a95-c841977ff6cc",
        "type": "message",
        "text": "These are all great points. You are right to emphasize \"personal learning style\". (Maybe I should have emphasized that more.) The more I contemplate, the more I think that the important part is reification; making a concrete \"thing\".",
        "user": "U01661S9F34",
        "ts": "1598130823.061800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RRV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "These are all great points. You are right to emphasize \"personal learning style\". (Maybe I should have emphasized that more.) The more I contemplate, the more I think that the important part is reification; making a concrete \"thing\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598125322.060600",
        "parent_user_id": "U01661S9F34",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    }
]