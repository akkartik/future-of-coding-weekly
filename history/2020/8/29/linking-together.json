[
    {
        "client_msg_id": "31662BC8-7D73-4F1D-859B-6D9DF8360183",
        "type": "message",
        "text": "<https://thesephist.com/posts/programming-environment/|https://thesephist.com/posts/programming-environment/>\n\u201cBut while programming languages are academically interesting, I think we more desperately need innovation in programming environments.\n\nThe programming environment isn\u2019t a single component of our workflow, but the total sum enabled by the tools working together harmoniously. The environment contains the programming language, but also includes the debugging experience, dependency management, how we communicate with other developers (both within source code and without), how we trace and observe code in production, and everything else in the process of designing APIs to recovering from failure.\n\nThe story of programming language evolution is also a story of rising ideas in what capabilities good programming environments should grant developers. Many languages came to popularity not necessarily based on their merits as great languages, but because they were paired with some new and powerful capability to understand software and write better implementations of it.\u201d",
        "user": "UKP3B2J5D",
        "ts": "1598653094.102400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JLl6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://thesephist.com/posts/programming-environment/",
                                "text": "https://thesephist.com/posts/programming-environment/"
                            },
                            {
                                "type": "text",
                                "text": "\n\u201cBut while programming languages are academically interesting, I think we more desperately need innovation in programming environments.\n"
                            },
                            {
                                "type": "text",
                                "text": "\nThe programming environment isn\u2019t a single component of our workflow, but the total sum enabled by the tools working together harmoniously. The environment contains the programming language, but also includes the debugging experience, dependency management, how we communicate with other developers (both within source code and without), how we trace and observe code in production, and everything else in the process of designing APIs to recovering from failure.\n\nThe story of programming language evolution is also a story of rising ideas in what capabilities good programming environments should grant developers. Many languages came to popularity not necessarily based on their merits as great languages, but because they were paired with some new and powerful capability to understand software and write better implementations of it.\u201d"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598653094.102400",
        "reply_count": 7,
        "reply_users_count": 4,
        "latest_reply": "1598688226.106600",
        "reply_users": [
            "USH01JEDQ",
            "UKP3B2J5D",
            "UN9SCH5RD",
            "U013ZLJARC7"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "USH01JEDQ",
                    "UBSMEUXAA",
                    "UHWC9PXBL",
                    "UJ6LDMMN0"
                ],
                "count": 4
            },
            {
                "name": "100",
                "users": [
                    "U8A5MS6R1",
                    "U016VUZGUUQ",
                    "UN9SCH5RD",
                    "U013ZLJARC7",
                    "UA14TGLTC",
                    "UJBAJNFLK",
                    "UAHHWT22U"
                ],
                "count": 7
            }
        ]
    },
    {
        "client_msg_id": "3b7cfb1b-ef2c-4c72-86d6-db2858934664",
        "type": "message",
        "text": "I really need to subscribe to this person",
        "user": "USH01JEDQ",
        "ts": "1598653960.102600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FzFmj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I really need to subscribe to this person"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598653094.102400",
        "parent_user_id": "UKP3B2J5D"
    },
    {
        "client_msg_id": "F48C2468-FC3C-4F93-85A5-AD6DC7B46F4A",
        "type": "message",
        "text": "He does really interesting stuff!",
        "user": "UKP3B2J5D",
        "ts": "1598654472.103200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8b6tc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "He does really interesting stuff!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598653094.102400",
        "parent_user_id": "UKP3B2J5D",
        "reactions": [
            {
                "name": "beer",
                "users": [
                    "USH01JEDQ",
                    "UAHHWT22U"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "a959d67b-cdb4-4752-914b-5a100b692a89",
        "type": "message",
        "text": "Mike Cook has done a lot of research into automated game generation.  He recently released this video which is both a tutorial and an overview of the field <https://t.co/tdU06DfsRd?amp=1>",
        "user": "UBSMEUXAA",
        "ts": "1598656964.104300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Getting Started in Automated Game Design",
                "title_link": "https://www.youtube.com/watch?v=dZv-vRrnHDA",
                "author_name": "Games by ANGELINA",
                "author_link": "https://www.youtube.com/user/gamesbyangelina",
                "thumb_url": "https://i.ytimg.com/vi/dZv-vRrnHDA/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Getting Started in Automated Game Design",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/dZv-vRrnHDA?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=dZv-vRrnHDA",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=dZv-vRrnHDA"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l3o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Mike Cook has done a lot of research into automated game generation.  He recently released this video which is both a tutorial and an overview of the field "
                            },
                            {
                                "type": "link",
                                "url": "https://t.co/tdU06DfsRd?amp=1"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598656964.104300",
        "reply_count": 3,
        "reply_users_count": 1,
        "latest_reply": "1598657299.105000",
        "reply_users": [
            "UBSMEUXAA"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b94ee62b-ff9c-4c89-a4dc-f00d2b1fc491",
        "type": "message",
        "text": "Also released this, which is a small abstract game generator <https://github.com/possibilityspace/bluecap>",
        "user": "UBSMEUXAA",
        "ts": "1598657073.104500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "possibilityspace/bluecap",
                "title_link": "https://github.com/possibilityspace/bluecap",
                "text": "A simple open-source automated game designer. Contribute to possibilityspace/bluecap development by creating an account on GitHub.",
                "fallback": "GitHub: possibilityspace/bluecap",
                "thumb_url": "https://avatars0.githubusercontent.com/u/33789239?s=400&v=4",
                "from_url": "https://github.com/possibilityspace/bluecap",
                "thumb_width": 200,
                "thumb_height": 200,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/possibilityspace/bluecap"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "del",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also released this, which is a small abstract game generator "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/possibilityspace/bluecap"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598656964.104300",
        "parent_user_id": "UBSMEUXAA"
    },
    {
        "client_msg_id": "acf6e761-2b14-4a29-8301-5f34773ddc7e",
        "type": "message",
        "text": "Even if you aren't interested in game design specifically, I believe it's a good introduction to program synthesis in general",
        "user": "UBSMEUXAA",
        "ts": "1598657202.104800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ng/U4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Even if you aren't interested in game design specifically, I believe it's a good introduction to program synthesis in general"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598656964.104300",
        "parent_user_id": "UBSMEUXAA"
    },
    {
        "client_msg_id": "f7634a7e-d8c4-4418-826b-d5bef62de3ff",
        "type": "message",
        "text": "I don't too much discussion about program synthesis here (except for some AI startups and GPT-3 code generation), but it's possible it comes up more often and I've missed discussions",
        "user": "UBSMEUXAA",
        "ts": "1598657299.105000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6yI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't too much discussion about program synthesis here (except for some AI startups and GPT-3 code generation), but it's possible it comes up more often and I've missed discussions"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598656964.104300",
        "parent_user_id": "UBSMEUXAA"
    },
    {
        "client_msg_id": "8bf4c643-71f5-4c43-89b9-da8734c7d465",
        "type": "message",
        "text": "regarding environments, I often think we could do better even without innovating, just polishing the current tools further. Imagine a programming environment that just worked: no configuration, no environment variables, no editor plugins, no \"escaping to the shell\" to type extraneous commands, no PATH conflicts, no dependency hell, no skimming the backtrace to find the originating source of the error... etc. etc. just a quick install tool that worked 100% the same in each platform. Push one button, get a binary for any platform. Users could download the zip/binary, double click and have the thing running. There's no current platform that is as easy to work with as I describe.",
        "user": "UN9SCH5RD",
        "ts": "1598684946.105700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NAxz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "regarding environments, I often think we could do better even without innovating, just polishing the current tools further. Imagine a programming environment that just worked: no configuration, no environment variables, no editor plugins, no \"escaping to the shell\" to type extraneous commands, no PATH conflicts, no dependency hell, no skimming the backtrace to find the originating source of the error... etc. etc. just a quick install tool that worked 100% the same in each platform. Push one button, get a binary for any platform. Users could download the zip/binary, double click and have the thing running. There's no current platform that is as easy to work with as I describe."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598653094.102400",
        "parent_user_id": "UKP3B2J5D",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "99c9d07d-86fe-4bd3-a76d-7058c69fe547",
        "type": "message",
        "text": "I may be wrong, but I feel the fix for all the problems I described has already been invented. It is probably a more boring problem to solve that coming up with a new and innovative way of programming ... :slightly_smiling_face:",
        "user": "UN9SCH5RD",
        "ts": "1598684995.105900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q9b4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I may be wrong, but I feel the fix for all the problems I described has already been invented. It is probably a more boring problem to solve that coming up with a new and innovative way of programming ... "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598653094.102400",
        "parent_user_id": "UKP3B2J5D",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "1e1fddd2-196a-48ed-9bd4-5fa379f710f7",
        "type": "message",
        "text": "different languages do better than others here, but I've been revisiting a lot of PLs these last weeks, writing small programs in diff languages (Java, C++, Fennel, Go, Clojure, F#, OCaml, Python, Lua+LuaRocks, Scheme, Racket) and for each one I found small and painful things to deal with just related to the system environment (being under Windows 10 definitely doesn't help). Each have diff quirks and procedures to setup the base env and to get dependencies",
        "user": "UN9SCH5RD",
        "ts": "1598685154.106100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7s6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "different languages do better than others here, but I've been revisiting a lot of PLs these last weeks, writing small programs in diff languages (Java, C++, Fennel, Go, Clojure, F#, OCaml, Python, Lua+LuaRocks, Scheme, Racket) and for each one I found small and painful things to deal with just related to the system environment (being under Windows 10 definitely doesn't help). Each have diff quirks and procedures to setup the base env and to get dependencies"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598653094.102400",
        "parent_user_id": "UKP3B2J5D",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UKP3B2J5D",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "52d33128-8c53-4a49-af05-7b91a6ebed16",
        "type": "message",
        "text": "I keep this thread on my bookmarks because I think the author described pretty well elements of a PL environment that are many times (IMHO) an afterthought for designers but I wish was a point of focus early on: <https://news.ycombinator.com/item?id=23347357>",
        "user": "UN9SCH5RD",
        "ts": "1598685496.106300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "86zA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I keep this thread on my bookmarks because I think the author described pretty well elements of a PL environment that are many times (IMHO) an afterthought for designers but I wish was a point of focus early on: "
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=23347357"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598653094.102400",
        "parent_user_id": "UKP3B2J5D"
    },
    {
        "client_msg_id": "0cbc8bc5-8038-49ad-a8ad-828fd1faf7a0",
        "type": "message",
        "text": "I love this and strongly agree that we need to bring the perspective of the overall programming experience -- which is necessarily situated in an environment -- to language design itself, rather than regarding the languages as abstract mathematical curiosities. (I find <@UC25EFSJC>'s work with Hazel and typed holes a nice example of that kind of work.)",
        "user": "U013ZLJARC7",
        "ts": "1598688226.106600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C/7Co",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I love this and strongly agree that we need to bring the perspective of the overall programming experience -- which is necessarily situated in an environment -- to language design itself, rather than regarding the languages as abstract mathematical curiosities. (I find "
                            },
                            {
                                "type": "user",
                                "user_id": "UC25EFSJC"
                            },
                            {
                                "type": "text",
                                "text": "'s work with Hazel and typed holes a nice example of that kind of work.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598653094.102400",
        "parent_user_id": "UKP3B2J5D",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UKP3B2J5D",
                    "UN57U8V53",
                    "UJBAJNFLK",
                    "UBSMEUXAA",
                    "UAHHWT22U"
                ],
                "count": 5
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "BFBAA84C-0938-4476-93D7-0A0DC3A02603",
        "type": "message",
        "text": "I enjoyed reading this article by Greg Bryant about Christopher Alexander\u2019s connection to the software industry.\n\nDon\u2019t read this for the application \u201cGatemaker\u201d. Read this for a fascinating outsider\u2019s view on the software industry, systems design, and end-user programming.\n\nHere are a few excerpts to whet your appetite (and/or get you upset enough) to embrace the rather long read (highlights mine):\n\n&gt; _The focus of the subsequent Software Patterns movement remained within the formal sciences, and so could not interpret CA\u2019s work in the natural and human sciences: the application of human judgment using feeling, the smooth unfolding of natural geometry, and the task of helping people (programmers or users) to become more whole and alive. The criteria for \u2018good\u2019 were so different, that everything was misconstrued, from \u2018pattern\u2019 to \u2018incremental\u2019. Again, they aren\u2019t to blame: *this focus on abstraction, and the dismissal of feeling, and the reality beyond constructed formal systems, is endemic in the computer industry.* Today, Software Patterns proponents, like most successful computer people, are not even interested in this cavernous disparity._\n&gt; _Interchangeable parts make an adaptive natural structure impossible. Programming environments, including those inspired by patterns, push this \u2018parts\u2019 view, which hampers sensitivity and true novelty. *It\u2019s the worldview of the factory-builder, and these tools for mass-production logistics have little regard for people.*_\n&gt; _*When underlying code is considered different, and more important, the tendency is simply to trash hard-won efforts to improve the user\u2019s experience.* This happens all the time in the industry, and Google is among those pushing the lunatic idea that we may not need people to create user interfaces.\n&gt; This is a complete divergence from CA\u2019s work, where the underlying structure is in harmony with human interaction. Computing is not \u2018somehow different\u2019. It is still a human tool recruited for human purposes, and the principles still apply._\n&gt; _But it was hard to get computing folk to focus on the actual human effect of the program. In fact, they saw it, experienced it, momentarily agreed that it was surprising, but soon forgot it.\n&gt; To be fair, they simply weren\u2019t equipped to discuss what we\u2019d accomplished. They were not natural scientists, nor activists. *They shared \u2018pragmatic\u2019 and fashionable industry viewpoints that make it nearly impossible for anyone to discover anything new or important about people &amp; computers*_\n&gt; _The software patterns literature has no such research initiative. Instead, they focus on objects, properties, types, lists, titles and categories. *It looks like butterfly collecting, with no drive to build a theory with explanatory adequacy. It\u2019s Natural History instead of Natural Science.*_\n<http://www.rainmagazine.com/archive/2014/gatemaker|http://www.rainmagazine.com/archive/2014/gatemaker>",
        "user": "U5STGTB3J",
        "ts": "1598713285.112800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1598713351.000000"
        },
        "attachments": [
            {
                "title": "Gatemaker: Christopher Alexander's dialogue with the computer industry - RAIN",
                "title_link": "http://www.rainmagazine.com/archive/2014/gatemaker",
                "fallback": "Gatemaker: Christopher Alexander's dialogue with the computer industry - RAIN",
                "image_url": "http://www.rainmagazine.com/_/rsrc/1413100235732/archive/2014/gatemaker/OFFICEcropped.png",
                "from_url": "http://www.rainmagazine.com/archive/2014/gatemaker",
                "image_width": 451,
                "image_height": 250,
                "image_bytes": 6908,
                "service_icon": "http://www.gstatic.com/sites/p/e58b30/system/app/images/apple-touch-icon.png",
                "service_name": "rainmagazine.com",
                "id": 1,
                "original_url": "http://www.rainmagazine.com/archive/2014/gatemaker"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BgJq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I enjoyed reading this article by Greg Bryant about Christopher Alexander\u2019s connection to the software industry.\n\nDon\u2019t read this for the application \u201cGatemaker\u201d. Read this for a fascinating outsider\u2019s view on the software industry, systems design, and end-user programming.\n\nHere are a few excerpts to whet your appetite (and/or get you upset enough) to embrace the rather long read (highlights mine):\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The focus of the subsequent Software Patterns movement remained within the formal sciences, and so could not interpret CA\u2019s work in the natural and human sciences: the application of human judgment using feeling, the smooth unfolding of natural geometry, and the task of helping people (programmers or users) to become more whole and alive. The criteria for \u2018good\u2019 were so different, that everything was misconstrued, from \u2018pattern\u2019 to \u2018incremental\u2019. Again, they aren\u2019t to blame: ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "this focus on abstraction, and the dismissal of feeling, and the reality beyond constructed formal systems, is endemic in the computer industry.",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " Today, Software Patterns proponents, like most successful computer people, are not even interested in this cavernous disparity.",
                                "style": {
                                    "italic": true
                                }
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interchangeable parts make an adaptive natural structure impossible. Programming environments, including those inspired by patterns, push this \u2018parts\u2019 view, which hampers sensitivity and true novelty. ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "It\u2019s the worldview of the factory-builder, and these tools for mass-production logistics have little regard for people.",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "When underlying code is considered different, and more important, the tendency is simply to trash hard-won efforts to improve the user\u2019s experience.",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " This happens all the time in the industry, and Google is among those pushing the lunatic idea that we may not need people to create user interfaces.\nThis is a complete divergence from CA\u2019s work, where the underlying structure is in harmony with human interaction. Computing is not \u2018somehow different\u2019. It is still a human tool recruited for human purposes, and the principles still apply.",
                                "style": {
                                    "italic": true
                                }
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But it was hard to get computing folk to focus on the actual human effect of the program. In fact, they saw it, experienced it, momentarily agreed that it was surprising, but soon forgot it.\nTo be fair, they simply weren\u2019t equipped to discuss what we\u2019d accomplished. They were not natural scientists, nor activists. ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "They shared \u2018pragmatic\u2019 and fashionable industry viewpoints that make it nearly impossible for anyone to discover anything new or important about people & computers",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The software patterns literature has no such research initiative. Instead, they focus on objects, properties, types, lists, titles and categories. ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "It looks like butterfly collecting, with no drive to build a theory with explanatory adequacy. It\u2019s Natural History instead of Natural Science.",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "http://www.rainmagazine.com/archive/2014/gatemaker",
                                "text": "http://www.rainmagazine.com/archive/2014/gatemaker"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598713285.112800",
        "reply_count": 4,
        "reply_users_count": 3,
        "latest_reply": "1598741044.000700",
        "reply_users": [
            "U5STGTB3J",
            "UBKNXPBAB",
            "UCUSW7WVD"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UUB7RA7PF"
                ],
                "count": 1
            },
            {
                "name": "cool",
                "users": [
                    "UUB7RA7PF"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UCGAK10LS",
                    "U013ZLJARC7",
                    "UJ6LDMMN0",
                    "UHWC9PXBL"
                ],
                "count": 5
            }
        ]
    },
    {
        "client_msg_id": "56C472EA-1677-4290-BFE7-421A95B62250",
        "type": "message",
        "text": "This is a slightly less relevant but nonetheless interesting observation from the same article:\n\n&gt; _Fractals are such a poor idealization of the real world.\n&gt; In nature, factors and interrelationships typically change at different scales. You can\u2019t find a Mandelbrot set in nature. L-Systems cannot be considered first-order approximations of trees. They tell us more about our perception than about trees._",
        "user": "U5STGTB3J",
        "ts": "1598713473.114600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RzVX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is a slightly less relevant but nonetheless interesting observation from the same article:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fractals are such a poor idealization of the real world.\n",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "In nature, factors and interrelationships typically change at different scales. You can\u2019t find a Mandelbrot set in nature. L-Systems cannot be considered first-order approximations of trees. They tell us more about our perception than about trees.",
                                "style": {
                                    "italic": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598713285.112800",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "CA4E6237-71F3-4AA5-8FDE-27213F320156",
        "type": "message",
        "text": "And, let\u2019s get this out of the way: I also find the UI of Gatemaker horrendous. I do appreciate the cognitive dissonance that reading about it creates in me though. And I can definitely see some of the behavior criticized in our industry, right here in this forum, and sometimes even in myself.",
        "user": "U5STGTB3J",
        "ts": "1598713685.117800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fIZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And, let\u2019s get this out of the way: I also find the UI of Gatemaker horrendous. I do appreciate the cognitive dissonance that reading about it creates in me though. And I can definitely see some of the behavior criticized in our industry, right here in this forum, and sometimes even in myself."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598713285.112800",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "text": "Thanks for this! I hadn't heard of Greg Bryant \u2013\u00a0his work is real interesting.\n\nRelatedly: Here's a vignette from The Timeless Way of Building that's stuck with me, on the failure of interchangeable parts to create harmonious wholes.",
        "files": [
            {
                "id": "F01A42XTA1F",
                "created": 1598733076,
                "timestamp": 1598733076,
                "name": "t2.png",
                "title": "t2.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UBKNXPBAB",
                "editable": false,
                "size": 1317176,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F01A42XTA1F/t2.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F01A42XTA1F/download/t2.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F01A42XTA1F-f1dffc6373/t2_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F01A42XTA1F-f1dffc6373/t2_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F01A42XTA1F-f1dffc6373/t2_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 150,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F01A42XTA1F-f1dffc6373/t2_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 200,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F01A42XTA1F-f1dffc6373/t2_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F01A42XTA1F-f1dffc6373/t2_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 300,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F01A42XTA1F-f1dffc6373/t2_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 333,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F01A42XTA1F-f1dffc6373/t2_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 400,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F01A42XTA1F-f1dffc6373/t2_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 427,
                "original_w": 3465,
                "original_h": 1444,
                "thumb_tiny": "AwAUADDTpDnHFJjmlzgUAAzmkc7RkAmgHnpQetACnpSAnNKOlLQAUUUUAGBRgUUUAFFFFAH/2Q==",
                "permalink": "https://futureofcoding.slack.com/files/UBKNXPBAB/F01A42XTA1F/t2.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F01A42XTA1F-6ddc87246d",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xv8Im",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for this! I hadn't heard of Greg Bryant \u2013\u00a0his work is real interesting.\n\nRelatedly: Here's a vignette from The Timeless Way of Building that's stuck with me, on the failure of interchangeable parts to create harmonious wholes."
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UBKNXPBAB",
        "display_as_bot": false,
        "ts": "1598734488.000100",
        "thread_ts": "1598713285.112800",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UAHHWT22U",
                    "UHWC9PXBL",
                    "U85HCL7JP"
                ],
                "count": 4
            }
        ]
    }
]