[
    {
        "client_msg_id": "ceb86f67-0c68-4177-8f34-0f44857519b7",
        "type": "message",
        "text": "That was PL302 in a four-minute lesson, nicely done",
        "user": "USH01JEDQ",
        "ts": "1598653195.194900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5ho",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That was PL302 in a four-minute lesson, nicely done"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598649949.189300",
        "parent_user_id": "US370TRJA"
    },
    {
        "client_msg_id": "81ED7218-BF6A-416A-A8F7-81B5B5F3CBAB",
        "type": "message",
        "text": "Thanks for the very clear answer in spite of the slightly muddled question <@UC2A2ARPT> ! I feel like a big part of why I was drawn to VSCode (from sublime text) was knowing I could write extensions in JS instead of Python. \n\nRealizing that not every language/ecosystem aspires/has good ergonomics for used for  GUI/editor toolmaking makes me think that if someone wanted to change the Jupyter situation, it may be more efficient trying to get JS devs curious about plugin-making then modifying Jupyter so that plugins could be written using the science scripting languages eg Python/Julia/R. ",
        "user": "US370TRJA",
        "ts": "1598653695.202200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cvg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for the very clear answer in spite of the slightly muddled question "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " ! I feel like a big part of why I was drawn to VSCode (from sublime text) was knowing I could write extensions in JS instead of Python. \n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Realizing that not every language/ecosystem aspires/has good ergonomics for used for  GUI/editor toolmaking makes me think that if someone wanted to change the Jupyter situation, it may be more efficient trying to get JS devs curious about plugin-making then modifying Jupyter so that plugins could be written using the science scripting languages eg Python/Julia/R. "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598649949.189300",
        "parent_user_id": "US370TRJA"
    },
    {
        "type": "message",
        "text": "I'd like to know more about how Eve managed reactivity (eg 'commit vs bind' and the idea of tables that contain events). What worked well? Did later iterations/inspired projects tweak this approach? How (if at all) can lazy vs eager reactivity be managed using this approach?\n\n<http://docs-next.witheve.com/v0.2/handbook/bind/>",
        "files": [
            {
                "id": "F019A98J6UX",
                "created": 1598684411,
                "timestamp": 1598684411,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UBRKVHMCL",
                "editable": false,
                "size": 106731,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F019A98J6UX/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F019A98J6UX/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F019A98J6UX-4f78662409/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F019A98J6UX-4f78662409/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F019A98J6UX-4f78662409/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 140,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F019A98J6UX-4f78662409/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 187,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F019A98J6UX-4f78662409/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F019A98J6UX-4f78662409/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 281,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F019A98J6UX-4f78662409/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 312,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F019A98J6UX-4f78662409/image_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 374,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F019A98J6UX-4f78662409/image_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 399,
                "original_w": 1336,
                "original_h": 521,
                "thumb_tiny": "AwASADDRHHSjJooz70AGTRuNGTRn3oAXJ9KOfSm596UHmgA706m96dQAUUUUAFFFFAH/2Q==",
                "permalink": "https://futureofcoding.slack.com/files/UBRKVHMCL/F019A98J6UX/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F019A98J6UX-81c5217dd6",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DSqWE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd like to know more about how Eve managed reactivity (eg 'commit vs bind' and the idea of tables that contain events). What worked well? Did later iterations/inspired projects tweak this approach? How (if at all) can lazy vs eager reactivity be managed using this approach?\n\n"
                            },
                            {
                                "type": "link",
                                "url": "http://docs-next.witheve.com/v0.2/handbook/bind/"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UBRKVHMCL",
        "display_as_bot": false,
        "ts": "1598684481.204900",
        "edited": {
            "user": "UBRKVHMCL",
            "ts": "1598685655.000000"
        },
        "thread_ts": "1598684481.204900",
        "reply_count": 4,
        "reply_users_count": 2,
        "latest_reply": "1598847143.029100",
        "reply_users": [
            "UA14TGLTC",
            "UBRKVHMCL"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "ca4abb84-0906-4755-81c7-8c124ebe1b12",
        "type": "message",
        "text": "In the best case, the environment is \"made of something you want to make with\" and is completely interactive. The biggest failing of projects like Atom and VSCode is that although they run inside a live environment they do not provide a REPL that allows code execution _in the context of the editor itself_. This makes plugin development a static compile-test-run sort of affair rather than an interactive \"build up from small pieces\" experience.",
        "user": "U013ZLJARC7",
        "ts": "1598685448.205300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qVOf1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the best case, the environment is \"made of something you want to make with\" and is completely interactive. The biggest failing of projects like Atom and VSCode is that although they run inside a live environment they do not provide a REPL that allows code execution "
                            },
                            {
                                "type": "text",
                                "text": "in the context of the editor itself",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". This makes plugin development a static compile-test-run sort of affair rather than an interactive \"build up from small pieces\" experience."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598649949.189300",
        "parent_user_id": "US370TRJA",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC",
                    "UDQBTJ211",
                    "U018LAH5QCT",
                    "US370TRJA"
                ],
                "count": 4
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "80854c6b-dbf9-4f34-a942-87dd7815cda7",
        "type": "message",
        "text": "<@U5STGTB3J> If we dig into this particular Buddha nature we find it at every level. :blush:\n\nAlthough we colloquially divide state from the algorithm that specifies transformations of that state, the algorithm itself exists as state encoded in the registers, stack, instruction pointer, and so on. Sometimes we modify the behavior of the system by having the algorithm change its own code while running. Okay, code is also data.\n\nIf we implement the naive B-tree algorithm, the shape (and thus performance) of the constructed B-tree depends entirely on the entropy present in the sequence of keys we insert into it. In this situation the B-Tree compiles a tiny state machine from the \"code\" of the input keys. Okay, data is also code.\n\n<https://zoo.cs.yale.edu/classes/cs112/2012-spring/helpdoc/pike.html|This> old Rob Pike quote also regards this matter:\n\n&gt; Code and data\u00a0_are_\u00a0the same, or at least they can be. How else can you explain how a compiler works?\nEverything is state and computation is just state over time.",
        "user": "U013ZLJARC7",
        "ts": "1598687558.205700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d0w8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " If we dig into this particular Buddha nature we find it at every level. "
                            },
                            {
                                "type": "emoji",
                                "name": "blush"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAlthough we colloquially divide state from the algorithm that specifies transformations of that state, the algorithm itself exists as state encoded in the registers, stack, instruction pointer, and so on. Sometimes we modify the behavior of the system by having the algorithm change its own code while running. Okay, code is also data.\n\nIf we implement the naive B-tree algorithm, the shape (and thus performance) of the constructed B-tree depends entirely on the entropy present in the sequence of keys we insert into it. In this situation the B-Tree compiles a tiny state machine from the \"code\" of the input keys. Okay, data is also code.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://zoo.cs.yale.edu/classes/cs112/2012-spring/helpdoc/pike.html",
                                "text": "This"
                            },
                            {
                                "type": "text",
                                "text": " old Rob Pike quote also regards this matter:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Code and data\u00a0"
                            },
                            {
                                "type": "text",
                                "text": "are",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u00a0the same, or at least they can be. How else can you explain how a compiler works?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nEverything is state and computation is just state over time."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5STGTB3J",
                    "UA14TGLTC",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "b846a6f3-f085-4f34-9d05-f0d1fcb84b55",
        "type": "message",
        "text": "The quote sounds about right.  I forget why, but I remember getting sequences of commits to work was tricky in Eve.  Stepping back, first-class time is a really interesting idea that I'd like to see more systems explore.",
        "user": "UA14TGLTC",
        "ts": "1598693227.206000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aYi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The quote sounds about right.  I forget why, but I remember getting sequences of commits to work was tricky in Eve.  Stepping back, first-class time is a really interesting idea that I'd like to see more systems explore."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598684481.204900",
        "parent_user_id": "UBRKVHMCL"
    },
    {
        "client_msg_id": "2626ffb8-c126-4cc9-8e47-d2606679334d",
        "type": "message",
        "text": "Sort of ruins the fun.",
        "user": "UA14TGLTC",
        "ts": "1598693335.206400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Rl02",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sort of ruins the fun."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598649949.189300",
        "parent_user_id": "US370TRJA",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3199cf8b-549e-4a78-94d6-fa702e7aa4a4",
        "type": "message",
        "text": "<@UA14TGLTC> yes - <@UEBG0NPDK> said similar comments in 2018 here: <https://news.ycombinator.com/item?id=16631333>",
        "user": "UBRKVHMCL",
        "ts": "1598706021.207000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M4Lt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " yes - "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " said similar comments in 2018 here: "
                            },
                            {
                                "type": "link",
                                "url": "https://news.ycombinator.com/item?id=16631333"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598684481.204900",
        "parent_user_id": "UBRKVHMCL"
    },
    {
        "client_msg_id": "67e422bd-587d-4019-ae46-17afc0819475",
        "type": "message",
        "text": "when you say 'first-class time', do you mean having a ticker (of varying granularities) that can be observed?",
        "user": "UBRKVHMCL",
        "ts": "1598706056.207200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MMP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "when you say 'first-class time', do you mean having a ticker (of varying granularities) that can be observed?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598684481.204900",
        "parent_user_id": "UBRKVHMCL"
    },
    {
        "client_msg_id": "33072a91-30a9-4c14-b314-be601fc6fede",
        "type": "message",
        "text": "I hate to bring up the tired old distinction of \"product vs process\", but let me see if it has new life in this context. Is self-bootstrapping important? Is the software at hand supposed to be a concrete product providing a reliable experience, or is it a fluid process for experimenting toward experiences we haven't imagined yet? In \"The Computer Revolution Hasn't Happened Yet\", Alan Kay talked about Squeak as a tool to help you build the next version of itself. In contrast, he says that commercial Smalltalk didn't change much once it was released. It's difficult to build software products with a moving foundation. I think there's a fundamental tension between (r)evolutionary software-as-process and commercial software-as-product. The balance between progress and stability is tough to strike.\n\nOn a different note, one thing I like about self-bootstrapping systems is the conceptual unity. Once you \"get it\", you get a LOT. That's one reason I too jumped to VSCode--writing plugins using the same tech those plugins are supposed to work with reduced cognitive load. But then I got annoyed with VSCode because of the compile-test-run cycle. VSCode is a product, not a process. There is an essential staticness to it. You can't tinker with it to create something fundamentally other than what it is.\n\nThat's why I started experimenting with a self-bootstrapping JS editor. Ideally, application development and editor live-tinkering should be the same fundamental process. Ideally, I think end-user development abstractions should be built directly on top of developer constructs (e.g., <http://hadron.app|hadron.app>). I think self-bootstrapping, if taken to its limit, offers the chance to build a deep ubiquitous language for communication between users and developers in building pliable software.",
        "user": "U018LAH5QCT",
        "ts": "1598712981.207500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U018LAH5QCT",
            "ts": "1598713046.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lWdt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I hate to bring up the tired old distinction of \"product vs process\", but let me see if it has new life in this context. Is self-bootstrapping important? Is the software at hand supposed to be a concrete product providing a reliable experience, or is it a fluid process for experimenting toward experiences we haven't imagined yet? In \"The Computer Revolution Hasn't Happened Yet\", Alan Kay talked about Squeak as a tool to help you build the next version of itself. In contrast, he says that commercial Smalltalk didn't change much once it was released. It's difficult to build software products with a moving foundation. I think there's a fundamental tension between (r)evolutionary software-as-process and commercial software-as-product. The balance between progress and stability is tough to strike.\n\nOn a different note, one thing I like about self-bootstrapping systems is the conceptual unity. Once you \"get it\", you get a LOT. That's one reason I too jumped to VSCode--writing plugins using the same tech those plugins are supposed to work with reduced cognitive load. But then I got annoyed with VSCode because of the compile-test-run cycle. VSCode is a product, not a process. There is an essential staticness to it. You can't tinker with it to create something fundamentally other than what it is.\n\nThat's why I started experimenting with a self-bootstrapping JS editor. Ideally, application development and editor live-tinkering should be the same fundamental process. Ideally, I think end-user development abstractions should be built directly on top of developer constructs (e.g., hadron.app). I think self-bootstrapping, if taken to its limit, offers the chance to build a deep ubiquitous language for communication between users and developers in building pliable software."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598649949.189300",
        "parent_user_id": "US370TRJA",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0",
                    "US370TRJA",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "f9e2abab-6a69-4b1f-99cb-c40ba66a155c",
        "type": "message",
        "text": "\"How important...\" for reaching which goal? Jupyter is a development environment like most others, in that it is a tool designed by tool designed for end users who are not supposed to modify it. So the toolchain used for Jupyter development is something Jupyter users don't care much about - otherwise they probably wouldn't use Jupyter.\nPersonally, I find tools that I can adapt myself much more empowering, and for reaching that goal it helps a lot to have a single medium. But such tools are rare, most people have never experienced one, and so they are not asking for it.",
        "user": "UJBAJNFLK",
        "ts": "1598715276.208000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9b2n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"How important...\" for reaching which goal? Jupyter is a development environment like most others, in that it is a tool designed by tool designed for end users who are not supposed to modify it. So the toolchain used for Jupyter development is something Jupyter users don't care much about - otherwise they probably wouldn't use Jupyter.\nPersonally, I find tools that I can adapt myself much more empowering, and for reaching that goal it helps a lot to have a single medium. But such tools are rare, most people have never experienced one, and so they are not asking for it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598649949.189300",
        "parent_user_id": "US370TRJA"
    },
    {
        "client_msg_id": "ECCCE6EE-0903-404A-9EEF-5ABD46664B97",
        "type": "message",
        "text": "The functions vs objects and static vs dynamic typing wars seem to come from the assumption that all-or-nothing is the only reasonable option. Why can\u2019t each of these have their appropriate use cases and the best system be one that can use each where the trade offs make the most sense for a given project\u2019s goals?",
        "user": "ULM3U6275",
        "ts": "1598717706.214500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GUD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The functions vs objects and static vs dynamic typing wars seem to come from the assumption that all-or-nothing is the only reasonable option. Why can\u2019t each of these have their appropriate use cases and the best system be one that can use each where the trade offs make the most sense for a given project\u2019s goals?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U8A5MS6R1",
                    "U013ZLJARC7",
                    "UHWC9PXBL",
                    "UA14TGLTC"
                ],
                "count": 4
            }
        ]
    }
]