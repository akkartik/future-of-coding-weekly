[
    {
        "client_msg_id": "364eb162-ae37-4d56-9296-c09cd6292d92",
        "type": "message",
        "text": "I do want to experiment with very 3D programming languages, but occlusion is an issue.  Two ideas I thought of are a 3D wire world/redstone variant, and tangible programming inspired by modular robotics kits",
        "user": "UBSMEUXAA",
        "ts": "1598655985.128000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v3v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I do want to experiment with very 3D programming languages, but occlusion is an issue.  Two ideas I thought of are a 3D wire world/redstone variant, and tangible programming inspired by modular robotics kits"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598552082.107500",
        "parent_user_id": "UBSMEUXAA",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "721fbd2d-35cc-4766-8f49-8d97b4f9419d",
        "type": "message",
        "text": "oh 3D graphical rules rewrite system in the style of KidSim",
        "user": "UBSMEUXAA",
        "ts": "1598656534.128200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e/I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "oh 3D graphical rules rewrite system in the style of KidSim"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598552082.107500",
        "parent_user_id": "UBSMEUXAA"
    },
    {
        "client_msg_id": "7DE5DEEB-C890-4BA3-8B28-07AADE70FB0C",
        "type": "message",
        "text": "this looks really cool! can you talk a bit more about how the data directs the ui tree? ",
        "user": "UHWC9PXBL",
        "ts": "1598657565.129300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ya2G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this looks really cool! can you talk a bit more about how the data directs the ui tree? "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598634636.121900",
        "parent_user_id": "U019W8A1884"
    },
    {
        "client_msg_id": "72e09d40-8732-4d0a-a448-beab6680a919",
        "type": "message",
        "text": "Building a 3D esolang in VR would also be fun <https://esolangs.org/wiki/Category:Multi-dimensional_languages>",
        "user": "UBSMEUXAA",
        "ts": "1598658096.129500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4CwGi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Building a 3D esolang in VR would also be fun "
                            },
                            {
                                "type": "link",
                                "url": "https://esolangs.org/wiki/Category:Multi-dimensional_languages"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598552082.107500",
        "parent_user_id": "UBSMEUXAA",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "c06adfd0-d22e-4ad8-88f8-e989a55e242c",
        "type": "message",
        "text": "My mind keeps going back to this idea of layered text and everything you could do with it. What about true overlapping layers? Would it make sense? E.g one layer may have a text snippet and another layer may have a link that overlaps exactly with that snippet. It can subsume all embedded markup. You just dump all style info into the style layer, exactly overlapping with the parts you're styling.",
        "user": "U8A5MS6R1",
        "ts": "1598676442.130000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nFhcC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My mind keeps going back to this idea of layered text and everything you could do with it. What about true overlapping layers? Would it make sense? E.g one layer may have a text snippet and another layer may have a link that overlaps exactly with that snippet. It can subsume all embedded markup. You just dump all style info into the style layer, exactly overlapping with the parts you're styling."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598502207.080100",
        "parent_user_id": "UG0EL18H3",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "U016VUZGUUQ",
                    "UC2A2ARPT",
                    "UJBAJNFLK"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "3170f9da-7f9f-497f-b0b9-701092f78a1f",
        "type": "message",
        "text": "OK if layered text, and not plain _flat_ text, was the lingua franca of Unix, what would programming languages look like?",
        "user": "U8A5MS6R1",
        "ts": "1598676495.130200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OkVm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "OK if layered text, and not plain "
                            },
                            {
                                "type": "text",
                                "text": "flat",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " text, was the lingua franca of Unix, what would programming languages look like?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598502207.080100",
        "parent_user_id": "UG0EL18H3",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "exploding_head",
                "users": [
                    "UG0EL18H3"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f2055050-b159-4567-be44-fa665d6ff421",
        "type": "message",
        "text": "It would be cool to have OS support, but I worry about pipe-based composability. I think that's essential to being a Unix \"lingua franca\". To process a piece of layered text, you have to know what layers exist and what they mean. Most of them are probably very application-specific, even stream-specific. You could generically pass them through, but then an entire ecosystem of utilities has to deal with format complexity they can't benefit from and can only mess up. At that point it's probably better to build a full object system like Powershell, since you're already paying for most of it.",
        "user": "U016VUZGUUQ",
        "ts": "1598678457.130600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/Tw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It would be cool to have OS support, but I worry about pipe-based composability. I think that's essential to being a Unix \"lingua franca\". To process a piece of layered text, you have to know what layers exist and what they mean. Most of them are probably very application-specific, even stream-specific. You could generically pass them through, but then an entire ecosystem of utilities has to deal with format complexity they can't benefit from and can only mess up. At that point it's probably better to build a full object system like Powershell, since you're already paying for most of it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598502207.080100",
        "parent_user_id": "UG0EL18H3"
    },
    {
        "client_msg_id": "69559d60-c413-4f70-8543-a5e140f9c961",
        "type": "message",
        "text": "Pipes could still be flat text (you'd select or flatten the layers when you pipe), but what I was getting at was how the 'medium' affects what we design. We design PLs with a 'flat' grammar because we are designing languages represented in flat text. Layered text is still very free form and Unix like, but would lead to different kinds of PLs that make use of the layers.",
        "user": "U8A5MS6R1",
        "ts": "1598679505.130800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vHi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Pipes could still be flat text (you'd select or flatten the layers when you pipe), but what I was getting at was how the 'medium' affects what we design. We design PLs with a 'flat' grammar because we are designing languages represented in flat text. Layered text is still very free form and Unix like, but would lead to different kinds of PLs that make use of the layers."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598502207.080100",
        "parent_user_id": "UG0EL18H3"
    },
    {
        "client_msg_id": "f000d3fa-e065-4613-bb18-b9b7a57e73f3",
        "type": "message",
        "text": "I'm trying to get the implementation of this clear in my head, since I'm seriously considering adding it to my text editor to help with other issues.  One thing I've been thinking about is annotating shaders with widget information.  For example, what if my flattened code looked like this:\n```/* Layer:1 Widget:Slider, Min:0, Max:10 */ float val;```\nEffectively showing layer 1 would enable editing of how the float value widget would work.  Hiding layer 1 just gives you the shader code with the widget popup.\nAs I understand it layers aren't nested, but I think you'd need to be able to 'expand' deeper layers into upper layers without opening intermediate layers.  For example:\nL0:-----------|---\nL1: ------|-------\nL2 ----|----------\nThe | represents the location in Layer1 of layer2.  Expanding layer 1 would show layer 2, and inside layer 2 there is another point where a further layer lives.  But if L2 is shown but L1 is not, then L2 would effectively appear where the | is on layer 0.  I think?\nAnd of course, edits to the L0 layer would wind up 'moving' the insertion point of Layer1.  But what about deleting the region around the expand point?  I guess the next layer just drops into the nearest sensible position.....\nI do something similar with Markers in my code, which can be used for things like compile errors.  Which brings up the next issue of compiling code and referring back to locations in the source that may not be expanded, etc. :wink:\nSo in short, interesting issues that might lead to a powerful system......",
        "user": "UUQ2EQW21",
        "ts": "1598686696.131300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8Au",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm trying to get the implementation of this clear in my head, since I'm seriously considering adding it to my text editor to help with other issues.  One thing I've been thinking about is annotating shaders with widget information.  For example, what if my flattened code looked like this:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "/* Layer:1 Widget:Slider, Min:0, Max:10 */ float val;"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Effectively showing layer 1 would enable editing of how the float value widget would work.  Hiding layer 1 just gives you the shader code with the widget popup.\nAs I understand it layers aren't nested, but I think you'd need to be able to 'expand' deeper layers into upper layers without opening intermediate layers.  For example:\nL0:-----------|---\nL1: ------|-------\nL2 ----|----------\nThe | represents the location in Layer1 of layer2.  Expanding layer 1 would show layer 2, and inside layer 2 there is another point where a further layer lives.  But if L2 is shown but L1 is not, then L2 would effectively appear where the | is on layer 0.  I think?\nAnd of course, edits to the L0 layer would wind up 'moving' the insertion point of Layer1.  But what about deleting the region around the expand point?  I guess the next layer just drops into the nearest sensible position.....\nI do something similar with Markers in my code, which can be used for things like compile errors.  Which brings up the next issue of compiling code and referring back to locations in the source that may not be expanded, etc. "
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            },
                            {
                                "type": "text",
                                "text": "\nSo in short, interesting issues that might lead to a powerful system......"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598502207.080100",
        "parent_user_id": "UG0EL18H3"
    },
    {
        "client_msg_id": "f8fa9c83-78cf-47e6-900a-22ebf5a7b810",
        "type": "message",
        "text": "Implementation note: with layers that contain extra information comes the possibility that a flattened file could not be just dropped into a game engine without sanitizing.  So for this case, comments in layers makes sense because it keeps the code compiling and keeps it as a plain text file.  But it's just a convention.",
        "user": "UUQ2EQW21",
        "ts": "1598687104.131500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V66",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Implementation note: with layers that contain extra information comes the possibility that a flattened file could not be just dropped into a game engine without sanitizing.  So for this case, comments in layers makes sense because it keeps the code compiling and keeps it as a plain text file.  But it's just a convention."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598502207.080100",
        "parent_user_id": "UG0EL18H3"
    },
    {
        "client_msg_id": "53c60947-4c05-468f-b961-eb0e45ff587a",
        "type": "message",
        "text": "Oh.....",
        "user": "UUQ2EQW21",
        "ts": "1598687349.131700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qIH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh....."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598502207.080100",
        "parent_user_id": "UG0EL18H3"
    },
    {
        "client_msg_id": "6856b6ce-a985-462a-b5ef-023e1a9aee1b",
        "type": "message",
        "text": "And collapsing Layer1 from my code sample above could have a special display; I was thinking some kind of mark in the code to indicate points where layers are embedded; but suppose the widget was a color picker.... then the collapsed layer 1 would be a color swatch.  Nice....\nAnd not forgetting that layer 1 is effectively several fragments, since there can be multiple point in the text where layer 1 pieces are inserted.  Hmm, this might keep me going for a week or 2!\nOK, I'll stop designing out loud......:)",
        "user": "UUQ2EQW21",
        "ts": "1598687486.131900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hXO5e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And collapsing Layer1 from my code sample above could have a special display; I was thinking some kind of mark in the code to indicate points where layers are embedded; but suppose the widget was a color picker.... then the collapsed layer 1 would be a color swatch.  Nice....\nAnd not forgetting that layer 1 is effectively several fragments, since there can be multiple point in the text where layer 1 pieces are inserted.  Hmm, this might keep me going for a week or 2!\nOK, I'll stop designing out loud......:)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598502207.080100",
        "parent_user_id": "UG0EL18H3",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UG0EL18H3"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d19b46ee-fe66-4f64-9e20-fc229901fc74",
        "type": "message",
        "text": "Thanks for your thoughts <@UBSMEUXAA>.  I've been messing with a 3D esolang \u2014 though progress certainly ground to a halt with the ending of the world.  My superficial constraint has been no text.  The real constraint is to make it \"non-symbolic\" in that representations cannot be \"arbitrary.\" Representations need to be structure preserving in a sort of uniform way.",
        "user": "UA14TGLTC",
        "ts": "1598692734.132200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lnwOC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for your thoughts "
                            },
                            {
                                "type": "user",
                                "user_id": "UBSMEUXAA"
                            },
                            {
                                "type": "text",
                                "text": ".  I've been messing with a 3D esolang \u2014 though progress certainly ground to a halt with the ending of the world.  My superficial constraint has been no text.  The real constraint is to make it \"non-symbolic\" in that representations cannot be \"arbitrary.\" Representations need to be structure preserving in a sort of uniform way."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598552082.107500",
        "parent_user_id": "UBSMEUXAA"
    },
    {
        "client_msg_id": "15efb2f2-7145-48ae-a6a1-89a3b851e319",
        "type": "message",
        "text": "<@U8A5MS6R1> One use case would be to make type annotations a different layer, to reduce visual clutter. And that would open the way to having multiple annotations on code, not just a single rigid type system.",
        "user": "UJBAJNFLK",
        "ts": "1598715884.132800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FUI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " One use case would be to make type annotations a different layer, to reduce visual clutter. And that would open the way to having multiple annotations on code, not just a single rigid type system."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598502207.080100",
        "parent_user_id": "UG0EL18H3",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "61F6E4AD-9ECA-4CC2-81F8-1F2170B5AFED",
        "type": "message",
        "text": "<@UUQ2EQW21> feel free to keep designing out loud :) It's really helpful to hear this sort of feedback because there are just so many ways this idea can be interpreted. My proof-of-concept was deliberately open-ended for this reason: I really like to see the sorts of assumptions folks make once they start implementing a concept such as this and how practicalities like the choice of underlying data structure influence which affordances become possible or impossible as a result. ",
        "user": "UG0EL18H3",
        "ts": "1598720702.138100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UG0EL18H3",
            "ts": "1598721017.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H90f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UUQ2EQW21"
                            },
                            {
                                "type": "text",
                                "text": " feel free to keep designing out loud :) It's really helpful to hear this sort of feedback because there are just so many ways this idea can be interpreted. My proof-of-concept was deliberately open-ended for this reason: I really like to see the sorts of assumptions folks make once they start implementing a concept such as this and how practicalities like the choice of underlying data structure influence which affordances become possible or impossible as a result. "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598502207.080100",
        "parent_user_id": "UG0EL18H3",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UJBAJNFLK",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "355053ea-cccc-491f-b2bb-cfcb3f9c3dd8",
        "type": "message",
        "text": "<@UCUSW7WVD> tried finding PANE unsuccessfully, got a link?",
        "user": "U019W8A1884",
        "ts": "1598723891.139200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1ik",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " tried finding PANE unsuccessfully, got a link?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598634636.121900",
        "parent_user_id": "U019W8A1884"
    },
    {
        "client_msg_id": "96dc2d6e-04e5-4ff1-b0c1-c8ef41d49c08",
        "type": "message",
        "text": "Sorry, I was on the phone when I wrote my previous comment. <http://joshuahhh.com/projects/pane>. The author posted new work here recently: <https://futureofcoding.slack.com/archives/CCL5VVBAN/p1598126579060300>",
        "user": "UCUSW7WVD",
        "ts": "1598724180.139400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/CCL5VVBAN/p1598126579060300",
                "fallback": "[August 22nd, 2020 1:02 PM] joshuah: I'm prototyping a new approach to drawing dynamic pictures with direct manipulation. So far, I've been calling it \"Apparatus with Magnets\". We'll see if the name... sticks. :wink:\n\nHere's a \"project proposal\": <https://www.notion.so/Apparatus-with-Magnets-077e72bc1ebf4f7a9ec512ef76d47994|https://notion.so/Apparatus-with-Magnets-Intro-2e32af5b59b64a45b3b203408374a56e><https://www.notion.so/Apparatus-with-Magnets-077e72bc1ebf4f7a9ec512ef76d47994|\u2026.> Progress is slow but steady. Feedback is welcome!",
                "ts": "1598126579.060300",
                "author_id": "UBKNXPBAB",
                "author_subname": "Joshua Horowitz",
                "channel_id": "CCL5VVBAN",
                "channel_name": "share-your-work",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "I'm prototyping a new approach to drawing dynamic pictures with direct manipulation. So far, I've been calling it \"Apparatus with Magnets\". We'll see if the name... sticks. :wink:\n\nHere's a \"project proposal\": <https://www.notion.so/Apparatus-with-Magnets-077e72bc1ebf4f7a9ec512ef76d47994|https://notion.so/Apparatus-with-Magnets-Intro-2e32af5b59b64a45b3b203408374a56e><https://www.notion.so/Apparatus-with-Magnets-077e72bc1ebf4f7a9ec512ef76d47994|\u2026.> Progress is slow but steady. Feedback is welcome!",
                "author_name": "Joshua Horowitz",
                "author_link": "https://futureofcoding.slack.com/team/UBKNXPBAB",
                "author_icon": "https://secure.gravatar.com/avatar/d48812709bdc0ff86746b7fbe56b0f13.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0010-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "files": [
                    {
                        "id": "F019H9PQCG4",
                        "created": 1598126549,
                        "timestamp": 1598126549,
                        "name": "gif2 (1).gif",
                        "title": "gif2 (1).gif",
                        "mimetype": "image/gif",
                        "filetype": "gif",
                        "pretty_type": "GIF",
                        "user": "UBKNXPBAB",
                        "editable": false,
                        "size": 5304303,
                        "mode": "hosted",
                        "is_external": false,
                        "external_type": "",
                        "is_public": true,
                        "public_url_shared": false,
                        "display_as_bot": false,
                        "username": "",
                        "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F019H9PQCG4/gif2__1_.gif",
                        "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F019H9PQCG4/download/gif2__1_.gif",
                        "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F019H9PQCG4-6b3e029d2b/gif2__1__64.png",
                        "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F019H9PQCG4-6b3e029d2b/gif2__1__80.png",
                        "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F019H9PQCG4-6b3e029d2b/gif2__1__360.png",
                        "thumb_360_w": 360,
                        "thumb_360_h": 203,
                        "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F019H9PQCG4-6b3e029d2b/gif2__1__480.png",
                        "thumb_480_w": 480,
                        "thumb_480_h": 270,
                        "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F019H9PQCG4-6b3e029d2b/gif2__1__160.png",
                        "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F019H9PQCG4-6b3e029d2b/gif2__1__720.png",
                        "thumb_720_w": 720,
                        "thumb_720_h": 405,
                        "thumb_360_gif": "https://files.slack.com/files-tmb/T5TCAFTA9-F019H9PQCG4-6b3e029d2b/gif2__1__360.gif",
                        "thumb_480_gif": "https://files.slack.com/files-tmb/T5TCAFTA9-F019H9PQCG4-6b3e029d2b/gif2__1__480.gif",
                        "original_w": 720,
                        "original_h": 405,
                        "deanimate_gif": "https://files.slack.com/files-tmb/T5TCAFTA9-F019H9PQCG4-6b3e029d2b/gif2__1__deanimate_gif.png",
                        "thumb_tiny": "AwAbADDSPQ0ynnoabQAUtJntUctwkJw559BQBLThUENzHMdoJDehqegBG+6aZmnt901GKAGXEwhj3D7x4FZrkuSWPJ71Z1A/MgqtGAXXPrTeiGizBAQm7OGPer6fcGfSoV6VYHSpQM//2Q==",
                        "permalink": "https://futureofcoding.slack.com/files/UBKNXPBAB/F019H9PQCG4/gif2__1_.gif",
                        "permalink_public": "https://slack-files.com/T5TCAFTA9-F019H9PQCG4-99b7e51209",
                        "has_rich_preview": false
                    }
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/CCL5VVBAN/p1598126579060300",
                "footer": "Thread in #share-your-work"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0rugR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sorry, I was on the phone when I wrote my previous comment. "
                            },
                            {
                                "type": "link",
                                "url": "http://joshuahhh.com/projects/pane"
                            },
                            {
                                "type": "text",
                                "text": ". The author posted new work here recently: "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/CCL5VVBAN/p1598126579060300"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598634636.121900",
        "parent_user_id": "U019W8A1884",
        "reactions": [
            {
                "name": "pray",
                "users": [
                    "U019W8A1884"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "4367ef19-a50f-4b90-9f62-8fb4aabc93d1",
        "type": "message",
        "text": "<@UHWC9PXBL> sure! When you define your `ui-root` you give it a `lookup` function and `content-keys` . from there it works like reduce: you pass it a `root-id` that it passes to `lookup`. lookup returns data that root wraps in your defined UI components or the default component. It also looks for `content-keys` on `lookup`s return value, passes those to `lookup` and recurses down all the paths. Upfront root is not aware of the structure of the data. Given the id, `lookup` can run arbitrary computation. It can for example issue an http request or read from indexedDB. It can return data or a promise that root will resolve and eventually render. It\u2019s dumb by design and that gives it lots of flexibility.",
        "user": "U019W8A1884",
        "ts": "1598724581.139800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U019W8A1884",
            "ts": "1598724745.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3m9N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " sure! When you define your "
                            },
                            {
                                "type": "text",
                                "text": "ui-root",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " you give it a "
                            },
                            {
                                "type": "text",
                                "text": "lookup",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " function and "
                            },
                            {
                                "type": "text",
                                "text": "content-keys",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " . from there it works like reduce: you pass it a "
                            },
                            {
                                "type": "text",
                                "text": "root-id",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that it passes to "
                            },
                            {
                                "type": "text",
                                "text": "lookup",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". lookup returns data that root wraps in your defined UI components or the default component. It also looks for "
                            },
                            {
                                "type": "text",
                                "text": "content-keys",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " on "
                            },
                            {
                                "type": "text",
                                "text": "lookup",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "s return value, passes those to "
                            },
                            {
                                "type": "text",
                                "text": "lookup",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and recurses down all the paths. Upfront root is not aware of the structure of the data. Given the id, "
                            },
                            {
                                "type": "text",
                                "text": "lookup",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " can run arbitrary computation. It can for example issue an http request or read from indexedDB. It can return data or a promise that root will resolve and eventually render. It\u2019s dumb by design and that gives it lots of flexibility."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598634636.121900",
        "parent_user_id": "U019W8A1884",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            },
            {
                "name": "pray",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    }
]