[
    {
        "client_msg_id": "6c461365-4b06-4d51-8fc9-343d536f85c2",
        "type": "message",
        "text": "<@UKDM3GLAJ> It was actually my intent to connote both \"class of animal\" and \"class of students\": in my current PL design a category is indistinguishable from a collection (\"classroom\").\n\nThe social status connotation is not intended, but given the context is coding, I doubt people would start thinking their source code is describing wealth and power inequality. The context of use should provide clarity.\n\nBut regardless, I'll probably prefer \"group\" for now, to avoid OOP at the very least.",
        "user": "UCGAK10LS",
        "ts": "1597793091.075100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BTEIN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKDM3GLAJ"
                            },
                            {
                                "type": "text",
                                "text": " It was actually my intent to connote both \"class of animal\" and \"class of students\": in my current PL design a category is indistinguishable from a collection (\"classroom\").\n\nThe social status connotation is not intended, but given the context is coding, I doubt people would start thinking their source code is describing wealth and power inequality. The context of use should provide clarity.\n\nBut regardless, I'll probably prefer \"group\" for now, to avoid OOP at the very least."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597722674.051300",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "e7e6b7db-0e72-4b34-8911-38e3cf1241ca",
        "type": "message",
        "text": "<@UUQ2EQW21> An existing concept gets in the way of something new when you choose a poor word for it. For example, \"objects\" in traditional OOP are *nothing* like our everyday understanding.\n\n...\"An object is instantiated from a class (template), which is its inherent and sole category. You can't re-categorize/re-purpose an existing object. Just like in the real world!\"\n...\"An object has public and private members, because that makes them more 'secure' or something. Just like real life!\"\n...\"An object has a fixed set of methods (behaviours) inherent to them. Systems don't have behaviour as a whole; behaviour belongs to individual entities, and they are all pre-defined before the system is turned on. Wow, reminds me of reality! Animals and pencils are both like this.\"\n...\"Objects change when other objects call their methods, and the world freezes whilst they change. Every object has total authority on whether its state changes; no external force has the power to change its state. Just like the real world!\"\n\nAnd so on. That's when existing intuitions aren't helpful.",
        "user": "UCGAK10LS",
        "ts": "1597794590.075300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1597794660.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Kb=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UUQ2EQW21"
                            },
                            {
                                "type": "text",
                                "text": " An existing concept gets in the way of something new when you choose a poor word for it. For example, \"objects\" in traditional OOP are "
                            },
                            {
                                "type": "text",
                                "text": "nothing",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " like our everyday understanding.\n\n...\"An object is instantiated from a class (template), which is its inherent and sole category. You can't re-categorize/re-purpose an existing object. Just like in the real world!\"\n...\"An object has public and private members, because that makes them more 'secure' or something. Just like real life!\"\n...\"An object has a fixed set of methods (behaviours) inherent to them. Systems don't have behaviour as a whole; behaviour belongs to individual entities, and they are all pre-defined before the system is turned on. Wow, reminds me of reality! Animals and pencils are both like this.\"\n...\"Objects change when other objects call their methods, and the world freezes whilst they change. Every object has total authority on whether its state changes; no external force has the power to change its state. Just like the real world!\"\n\nAnd so on. That's when existing intuitions aren't helpful."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597722674.051300",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "db16564c-a331-46aa-b3fc-0f810d35df16",
        "type": "message",
        "text": "Traditional objects are just a big knot of everything some computer scientists came up with after reading about biology whilst on an acid trip. No single term can intuitively describe that knot. The solution is to avoid knotting together half-baked metaphors in the first place.",
        "user": "UCGAK10LS",
        "ts": "1597794869.075600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1597794932.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FN5+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Traditional objects are just a big knot of everything some computer scientists came up with after reading about biology whilst on an acid trip. No single term can intuitively describe that knot. The solution is to avoid knotting together half-baked metaphors in the first place."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597722674.051300",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "5e8c7c74-dc62-4580-b0b6-78419a54d7f1",
        "type": "message",
        "text": "(OOP rant over)",
        "user": "UCGAK10LS",
        "ts": "1597794907.075800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "71DU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(OOP rant over)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597722674.051300",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "06c0235e-f81a-43d3-b222-92ba970cfad3",
        "type": "message",
        "text": "_Computer Lib_ and _Notes on the Synthesis of Form_ are what I would consider essential reading in this area. _Tools for Thought_ by Howard Rheingold is an excellent chronology, spanning many centuries (basically from Charles Babbage and Ada Lovelace to the end of Xerox PARC). Lately I've been reading through _Philosophical Essays_ of Leibniz, mostly trying to understand the concept of a _characteristica universalis_ that he introduced in one of his many papers. This has a strong relation to the concept of a \"pattern language\", which is what currently captivates me. Here is my list of FoC-adjacent books I've aggregated over the last year or so: <https://www.goodreads.com/review/list/100125761-chris-rabl?shelf=future-of-coding&amp;utf8=\u2713>",
        "user": "UG0EL18H3",
        "ts": "1597807589.076200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UG0EL18H3",
            "ts": "1597808057.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lUBz/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Computer Lib",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "Notes on the Synthesis of Form ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "are what I would consider essential reading in this area. "
                            },
                            {
                                "type": "text",
                                "text": "Tools for Thought",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ",
                                "style": {
                                    "bold": true,
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "by Howard Rheingold is an excellent chronology, spanning many centuries (basically from Charles Babbage and Ada Lovelace to the end of Xerox PARC). Lately I've been reading through "
                            },
                            {
                                "type": "text",
                                "text": "Philosophical Essays",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of Leibniz, mostly trying to understand the concept of a "
                            },
                            {
                                "type": "text",
                                "text": "characteristica universalis",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that he introduced in one of his many papers. This has a strong relation to the concept of a \"pattern language\", which is what currently captivates me. Here is my list of FoC-adjacent books I've aggregated over the last year or so: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.goodreads.com/review/list/100125761-chris-rabl?shelf=future-of-coding&utf8=\u2713"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597675256.030400",
        "parent_user_id": "U014WA16VNJ",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U014WA16VNJ",
                    "UC2A2ARPT",
                    "UKP3B2J5D",
                    "UN57U8V53"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "E0508EE8-9814-453D-8FFC-FA60AA98E3BF",
        "type": "message",
        "text": "<@UG0EL18H3> ordered the Leibniz essays! I\u2019ve read the others and love them all, seems we have overlapping interests.\nYour linked collection is awesome and there\u2019s quite a few there I\u2019m going to have to read soon.",
        "user": "U014WA16VNJ",
        "ts": "1597809379.085600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U014WA16VNJ",
            "ts": "1597809802.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x2Qb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UG0EL18H3"
                            },
                            {
                                "type": "text",
                                "text": " ordered the Leibniz essays! I\u2019ve read the others and love them all, seems we have overlapping interests.\nYour linked collection is awesome and there\u2019s quite a few there I\u2019m going to have to read soon."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597675256.030400",
        "parent_user_id": "U014WA16VNJ",
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "UG0EL18H3"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "2862acc4-8ab1-4f38-82b1-7419e2435c7e",
        "type": "message",
        "text": "I'm slowly convincing myself that the future of programming includes *verbalizability* (and thus, natural language).\n\nThe *ubiquity* and *utility* of natural language is well known: almost all of the information we read, write/type, speak and hear every day is communicated via a natural language, not a specially-crafted one. Natural language is our primary means of understanding the world and interacting with other humans, especially in the absence of supplementary tools such as pen-and-paper (e.g. in face-to-face conversation). When was the last time you described a cause-and-effect phenomenon (a story, event, or task instructions) to someone without extensive use of natural language? At best, we use other artifacts (diagrams, formal models) as aids.\n\nDespite the ubiquity and utility of natural language, if one person tries to \"speak\" a Java/C/JS/Rust program to another person, they have to go through an extremely complicated and lossy translation process from *code* to *words*. Based on some of my recent design work (not shared yet), I'm beginning to believe we could actually design programming languages whose \"source code\" consists *solely* of *terse* natural language sentences/structures with *very specific* syntax restrictions (to deny multiple interpretations / ambiguities). The language would not be accompanied by any supplementary symbols (!@#$%^&amp;]/-&gt;) with domain-specific meaning, since those would inhibit verbalization. Writing code in this language still requires careful deliberation (to develop the logic), but _reading_ and _discussing_ code with full verbalization becomes trivial: no translation is required at all!\n\nYes, I'm not the first person to think about putting natural language in PLs. Someone might bring up COBOL, HyperTalk, SQL, or similar. I'm not saying verbalizability is \"the solution\" to programming alone, but along with a well-crafted semantics (information model etc.), it could lead to something extraordinary.\n\nIf anyone wants to think further about this, Felienne Hermans <https://youtu.be/CgR5mSAGxtA?t=2663|discusses verbalization/vocalization of PLs as part of a larger talk> (video is timestamped to that bit). Quote: \"how does code sound?\"\n\nI searched this Slack's <http://history.futureofcoding.org/|archives>, and I was surprised to discover the word \"verbalization\" has never been used.",
        "user": "UCGAK10LS",
        "ts": "1597811295.101400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1597812979.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J7gU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm slowly convincing myself that the future of programming includes "
                            },
                            {
                                "type": "text",
                                "text": "verbalizability ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(and thus, natural language).\n\nThe "
                            },
                            {
                                "type": "text",
                                "text": "ubiquity",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "utility",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of natural language is well known: almost all of the information we read, write/type, speak and hear every day is communicated via a natural language, not a specially-crafted one. Natural language is our primary means of understanding the world and interacting with other humans, especially in the absence of supplementary tools such as pen-and-paper (e.g. in face-to-face conversation). When was the last time you described a cause-and-effect phenomenon (a story, event, or task instructions) to someone without extensive use of natural language? At best, we use other artifacts (diagrams, formal models) as aids.\n\nDespite the ubiquity and utility of natural language, if one person tries to \"speak\" a Java/C/JS/Rust program to another person, they have to go through an extremely complicated and lossy translation process from "
                            },
                            {
                                "type": "text",
                                "text": "code",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to "
                            },
                            {
                                "type": "text",
                                "text": "words",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Based on some of my recent design work (not shared yet), I'm beginning to believe we could actually design programming languages whose \"source code\" consists "
                            },
                            {
                                "type": "text",
                                "text": "solely",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of "
                            },
                            {
                                "type": "text",
                                "text": "terse",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " natural language sentences/structures with "
                            },
                            {
                                "type": "text",
                                "text": "very specific",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " syntax restrictions (to deny multiple interpretations / ambiguities). The language would not be accompanied by any supplementary symbols (!@#$%^&]/->) with domain-specific meaning, since those would inhibit verbalization. Writing code in this language still requires careful deliberation (to develop the logic), but "
                            },
                            {
                                "type": "text",
                                "text": "reading",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "and "
                            },
                            {
                                "type": "text",
                                "text": "discussing",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "code with full verbalization becomes trivial: no translation is required at all!\n\nYes, I'm not the first person to think about putting natural language in PLs. Someone might bring up COBOL, HyperTalk, SQL, or similar. I'm not saying verbalizability is \"the solution\" to programming alone, but along with a well-crafted semantics (information model etc.), it could lead to something extraordinary.\n\nIf anyone wants to think further about this, Felienne Hermans "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/CgR5mSAGxtA?t=2663",
                                "text": "discusses verbalization/vocalization of PLs as part of a larger talk"
                            },
                            {
                                "type": "text",
                                "text": " (video is timestamped to that bit). Quote: \"how does code sound?\"\n\nI searched this Slack's "
                            },
                            {
                                "type": "link",
                                "url": "http://history.futureofcoding.org/",
                                "text": "archives"
                            },
                            {
                                "type": "text",
                                "text": ", and I was surprised to discover the word \"verbalization\" has never been used."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597811295.101400",
        "reply_count": 23,
        "reply_users_count": 13,
        "latest_reply": "1597980730.006500",
        "reply_users": [
            "UCUSW7WVD",
            "UAL7940NM",
            "UEBG0NPDK",
            "U016VUZGUUQ",
            "UCGAK10LS",
            "UJBAJNFLK",
            "UKP3B2J5D",
            "U014WA16VNJ",
            "U5STGTB3J",
            "UMH5FAW2Y",
            "UK3LH8CF5",
            "UDQKHNP51",
            "UA14TGLTC"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UKP3B2J5D",
                    "UFPPABQ7P",
                    "UFQQ3P867"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "e8680c2f-605c-405a-a3a8-a7d1877bea09",
        "type": "message",
        "text": "I think you might be making my argument for me though :wink: If an existing concept is getting in the way,  and none of our existing concepts accurately describe what is happening, time for a new one.....",
        "user": "UUQ2EQW21",
        "ts": "1597814516.101800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "leH+i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think you might be making my argument for me though "
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            },
                            {
                                "type": "text",
                                "text": " If an existing concept is getting in the way,  and none of our existing concepts accurately describe what is happening, time for a new one....."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597722674.051300",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "6692f965-44a1-4b3e-9d16-45d2373e09aa",
        "type": "message",
        "text": "<@UKP3B2J5D> mentioned it before: <https://futureofcoding.slack.com/archives/C5T9GPWFL/p1593728981205800?thread_ts=1593726809.181800&amp;cid=C5T9GPWFL>. There may be others using different words.",
        "user": "UCUSW7WVD",
        "ts": "1597815230.102000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1593728981205800?thread_ts=1593726809.181800&amp;cid=C5T9GPWFL",
                "fallback": "[July 2nd, 2020 3:29 PM] ogunks900: It\u2019s also the same thing with stuff like operators in Haskell - how do you pronounce this \u2018@&amp;\u00a3\u2019 operator (I made it up btw)? Sure it is brief but it\u2019s three characters in my head and doesn\u2019t have a real name(I am convinced with Haskell it should be possible to give operators aliases, funny thing is \u2018&gt;&gt;=\u2018 is \u2018bind\u2019. Being able to pronounce things is vital for chunking I think. Again, wish we had a more data driven approach to these questions.",
                "ts": "1593728981.205800",
                "author_id": "UKP3B2J5D",
                "author_subname": "Ope",
                "channel_id": "C5T9GPWFL",
                "channel_name": "thinking-together",
                "is_msg_unfurl": true,
                "is_reply_unfurl": true,
                "text": "It\u2019s also the same thing with stuff like operators in Haskell - how do you pronounce this \u2018@&amp;\u00a3\u2019 operator (I made it up btw)? Sure it is brief but it\u2019s three characters in my head and doesn\u2019t have a real name(I am convinced with Haskell it should be possible to give operators aliases, funny thing is \u2018&gt;&gt;=\u2018 is \u2018bind\u2019. Being able to pronounce things is vital for chunking I think. Again, wish we had a more data driven approach to these questions.",
                "author_name": "Ope",
                "author_link": "https://futureofcoding.slack.com/team/UKP3B2J5D",
                "author_icon": "https://avatars.slack-edge.com/2020-07-03/1220847671058_4980e1f3e51a273b630a_48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1593728981205800?thread_ts=1593726809.181800&amp;cid=C5T9GPWFL",
                "footer": "From a thread in #thinking-together"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D1/Es",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKP3B2J5D"
                            },
                            {
                                "type": "text",
                                "text": " mentioned it before: "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1593728981205800?thread_ts=1593726809.181800&cid=C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": ". There may be others using different words."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS",
                    "UKP3B2J5D"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "cd37910f-b647-4855-8e54-cb82cc1bf4a7",
        "type": "message",
        "text": "Sounds interesting! I'm looking forward to learning more.",
        "user": "UAL7940NM",
        "ts": "1597817234.102700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w91",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sounds interesting! I'm looking forward to learning more."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCGAK10LS",
                    "UFQQ3P867"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "8ee4b5d8-ce39-4408-beb0-bfa2c9ce7485",
        "type": "message",
        "text": "Our latest work on a front-end revolves pretty much entirely around this idea. :slightly_smiling_face: The big shift for us came from moving our focus away from \u201csimple\u201d to \u201csimple to understand.\u201d The results have been encouraging so far. Here\u2019s the obligatory \u201cincrementer button\u201d\n```an incrementer is a button with a count of 0\n    the text is bound to its count\n\nwhen an incrementer is clicked\n    increment the count```\nNone of that is builtin, e.g. here\u2019s how increment is defined:\n```to increment a number\n    set the number to the number + 1```\nAnd here\u2019s a button:\n```a button is an element that has a text string\n    its tag is \"button\"\n    always set \"textContent\" of the button to its text```",
        "user": "UEBG0NPDK",
        "ts": "1597817316.103200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ESdvZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Our latest work on a front-end revolves pretty much entirely around this idea. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " The big shift for us came from moving our focus away from \u201csimple\u201d to \u201csimple to understand.\u201d The results have been encouraging so far. Here\u2019s the obligatory \u201cincrementer button\u201d\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "an incrementer is a button with a count of 0\n    the text is bound to its count\n\nwhen an incrementer is clicked\n    increment the count"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "None of that is builtin, e.g. here\u2019s how increment is defined:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "to increment a number\n    set the number to the number + 1"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And here\u2019s a button:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a button is an element that has a text string\n    its tag is \"button\"\n    always set \"textContent\" of the button to its text"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL",
                    "UFQQ3P867"
                ],
                "count": 3
            },
            {
                "name": "heart",
                "users": [
                    "U018LAH5QCT",
                    "UFPPABQ7P",
                    "U014WA16VNJ",
                    "UHWC9PXBL",
                    "UA14TGLTC",
                    "UCGAK10LS",
                    "UFQQ3P867"
                ],
                "count": 7
            }
        ]
    },
    {
        "client_msg_id": "cbc66268-5d8d-4d00-80e7-43aa20f3af4b",
        "type": "message",
        "text": "Verbalizability (I'm going to go with pronounceability) is an entirely different prospect from natural language. Pronounceability is definitely a great thing, for accessibility if nothing else. I still can't imagine a system of \"terse natural language sentences\" that isn't hostile to at least one of precision or concision. I'd love to be convinced otherwise. Can you give a napkin-example of what you have in mind?\n\nFor pronounceability I would still follow the lead of mathematics as pronounced, e.g. \"f of x equals forall y in d g of x and y\". Whatever approach you take needs to have enough expressive power to balance out the bandwidth limit of at least speech, if not word-based notation (I like the idea of a conventional-looking system with operators that happen to all have reasonable pronunciations, which would keep the written syntax relatively compact).\n\nOTOH: if you can just avoid the trap of phrases that look like multiple words but parse like a single token (in that they always have to be together in the same order), if you just let words be independently composable, you'll be head and shoulders above COBOL et al.",
        "user": "U016VUZGUUQ",
        "ts": "1597817344.104200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UIuM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Verbalizability (I'm going to go with pronounceability) is an entirely different prospect from natural language. Pronounceability is definitely a great thing, for accessibility if nothing else. I still can't imagine a system of \"terse natural language sentences\" that isn't hostile to at least one of precision or concision. I'd love to be convinced otherwise. Can you give a napkin-example of what you have in mind?\n\nFor pronounceability I would still follow the lead of mathematics as pronounced, e.g. \"f of x equals forall y in d g of x and y\". Whatever approach you take needs to have enough expressive power to balance out the bandwidth limit of at least speech, if not word-based notation (I like the idea of a conventional-looking system with operators that happen to all have reasonable pronunciations, which would keep the written syntax relatively compact).\n\nOTOH: if you can just avoid the trap of phrases that look like multiple words but parse like a single token (in that they always have to be together in the same order), if you just let words be independently composable, you'll be head and shoulders above COBOL et al."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "3064B940-B01E-48A8-BCFB-C7FE7BD082CA",
        "type": "message",
        "text": "<@UCUSW7WVD> ah, good work! I searched for \u201cverbal-\u201d and \u201cvocal-\u201c but not \u201cpronounce\u201d.",
        "user": "UCGAK10LS",
        "ts": "1597817353.104500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pTdhe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " ah, good work! I searched for \u201cverbal-\u201d and \u201cvocal-\u201c but not \u201cpronounce\u201d."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "87ba07ff-0eb3-4003-8a4e-b4b1d6eb35ef",
        "type": "message",
        "text": "Oh you mean \"an existing PL concept\" rather than \"an existing real-world concept\"? In that case, sure, having a pre-existing PL concept that has already claimed the term for itself (and poisoned it with a complicated meaning) definitely does pose a problem.",
        "user": "UCGAK10LS",
        "ts": "1597818050.104800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aPym",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh you mean \"an existing PL concept\" rather than \"an existing real-world concept\"? In that case, sure, having a pre-existing PL concept that has already claimed the term for itself (and poisoned it with a complicated meaning) definitely does pose a problem."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597722674.051300",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "3da28130-02b1-4f12-9869-ce829281937f",
        "type": "message",
        "text": "<@U016VUZGUUQ> The only reason I'd say \"verbalize\" rather than \"pronounce\" is that the latter usually refers to individual words, whereas the former can refer to *whole systems*. I want readers to be able to verbalize an entire system, as if they were hearing a (detailed, accurate) description from a friend.\n\nRegarding \"following the lead of mathematics\", my language is going to be extraordinarily light on *functions* (if I can get away with it), and thus on mathematical notation. Code re-use occurs through via interrelated rules that observe and produce abstracted data through pattern-matching. These act like polymorphic functions, so for most computations there is nothing to \"call\" and no need for mathematical primitives, no \"f(x)\". We can still retain that classical syntax for mathematical (numeric) expressions, though.\n\nRegarding \"multiple words that parse like a token\", that shouldn't be a problem, because programs will be built through structured editing (AST etc) with appropriate autocomplete and syntax highlighting.\n\nI'll see if I can come up with a napkin example that I can actually defend! I'm still working on the semantics of my system, and I'm worried that an example wouldn't make sense to anyone else yet.",
        "user": "UCGAK10LS",
        "ts": "1597819215.105000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1597819236.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Aahk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016VUZGUUQ"
                            },
                            {
                                "type": "text",
                                "text": " The only reason I'd say \"verbalize\" rather than \"pronounce\" is that the latter usually refers to individual words, whereas the former can refer to "
                            },
                            {
                                "type": "text",
                                "text": "whole systems",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". I want readers to be able to verbalize an entire system, as if they were hearing a (detailed, accurate) description from a friend.\n\nRegarding \"following the lead of mathematics\", my language is going to be extraordinarily light on "
                            },
                            {
                                "type": "text",
                                "text": "functions ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(if I can get away with it), and thus on mathematical notation. Code re-use occurs through via interrelated rules that observe and produce abstracted data through pattern-matching. These act like polymorphic functions, so for most computations there is nothing to \"call\" and no need for mathematical primitives, no \"f(x)\". We can still retain that classical syntax for mathematical (numeric) expressions, though.\n\nRegarding \"multiple words that parse like a token\", that shouldn't be a problem, because programs will be built through structured editing (AST etc) with appropriate autocomplete and syntax highlighting.\n\nI'll see if I can come up with a napkin example that I can actually defend! I'm still working on the semantics of my system, and I'm worried that an example wouldn't make sense to anyone else yet."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "d2d22bf1-4a36-4850-8323-999ec86f893d",
        "type": "message",
        "text": "<@UEBG0NPDK> Yeah I think that a \"simple model\" and an \"easy to read language\" (in terms of Rich Hickey's definitions of \"simple\" and \"easy\") are both crucial. I've also been focusing too narrow-mindedly on the former.\n\nYour code example demonstrates not just a *language*, but obviously an *information model* and a *time model* as well. I like the readability of the language, but now you've got me curious about the underlying models. :thinking_face:",
        "user": "UCGAK10LS",
        "ts": "1597819557.105300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8on1z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " Yeah I think that a \"simple model\" and an \"easy to read language\" (in terms of Rich Hickey's definitions of \"simple\" and \"easy\") are both crucial. I've also been focusing too narrow-mindedly on the former.\n\nYour code example demonstrates not just a "
                            },
                            {
                                "type": "text",
                                "text": "language",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but obviously an "
                            },
                            {
                                "type": "text",
                                "text": "information model",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and a "
                            },
                            {
                                "type": "text",
                                "text": "time model",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as well. I like the readability of the language, but now you've got me curious about the underlying models. "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "16624b86-c9e6-4bfe-9176-e117bffd45d8",
        "type": "message",
        "text": "<@UEBG0NPDK> Also, it looks like your prototype is building on HTML? The thought scares me tbh. It looks like it could warp the design of your information and time models. Your language semantics become tied to HTML/CSS semantics.",
        "user": "UCGAK10LS",
        "ts": "1597820432.105500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1597820574.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "edUvL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " Also, it looks like your prototype is building on HTML? The thought scares me tbh. It looks like it could warp the design of your information and time models. Your language semantics become tied to HTML/CSS semantics."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "aeb0cbf0-e5fb-4d62-b65c-93e70d18ea1f",
        "type": "message",
        "text": "It's interesting to compare operator-heavy languages like Haskell with math notation. The latter has always been a shorthand notation for a highly codified jargon. It is pronounceable because mathematicians have communicated orally all the time. Occasional excesses into unpronounceable notations have been made, but never made it into mainstream. This mechanism hasn't worked for digital notations because people  don't communicate about them orally.\n\nA cultural practice of the Lisp community (in the widest sense, including Scheme etc.) that I have always appreciated is to value pronounceability of names. Which may seem surprising to all those who never take a closer look at Lisp because of all those parentheses. For me, Lisps are the PLs closest to natural language (but I have never used Cobol), and that's their strong point.",
        "user": "UJBAJNFLK",
        "ts": "1597821305.106700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Kt7T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's interesting to compare operator-heavy languages like Haskell with math notation. The latter has always been a shorthand notation for a highly codified jargon. It is pronounceable because mathematicians have communicated orally all the time. Occasional excesses into unpronounceable notations have been made, but never made it into mainstream. This mechanism hasn't worked for digital notations because people  don't communicate about them orally.\n\nA cultural practice of the Lisp community (in the widest sense, including Scheme etc.) that I have always appreciated is to value pronounceability of names. Which may seem surprising to all those who never take a closer look at Lisp because of all those parentheses. For me, Lisps are the PLs closest to natural language (but I have never used Cobol), and that's their strong point."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UKP3B2J5D",
                    "U013ZLJARC7",
                    "UA14TGLTC"
                ],
                "count": 3
            },
            {
                "name": "ok_hand",
                "users": [
                    "U010328JA1E"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "15B87C14-3D70-47EC-9F32-D9FAE544209E",
        "type": "message",
        "text": "<@UCGAK10LS> thanks for this link! <https://youtu.be/CgR5mSAGxtA|https://youtu.be/CgR5mSAGxtA> . Posting here cos it\u2019s super relevant to this thread ",
        "user": "UKP3B2J5D",
        "ts": "1597832255.110900",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Explicit Direct Instruction in Programming Education - Felienne",
                "title_link": "https://youtu.be/CgR5mSAGxtA",
                "author_name": "RStudio",
                "author_link": "https://www.youtube.com/channel/UC3xfbCMLCw1Hh4dWop3XtHg",
                "thumb_url": "https://i.ytimg.com/vi/CgR5mSAGxtA/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Explicit Direct Instruction in Programming Education - Felienne",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/CgR5mSAGxtA?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/CgR5mSAGxtA",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/CgR5mSAGxtA"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M56",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " thanks for this link! "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/CgR5mSAGxtA",
                                "text": "https://youtu.be/CgR5mSAGxtA"
                            },
                            {
                                "type": "text",
                                "text": " . Posting here cos it\u2019s super relevant to this thread "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593726809.181800",
        "parent_user_id": "UKP3B2J5D",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFPPABQ7P"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "befd497a-88b1-4af7-b5d7-c522df7256c6",
        "type": "message",
        "text": "<@UKP3B2J5D> No worries. I probably wouldn't pollute the main channel with this link though (unless you want to post it to <#C5U3SEW6A|linking-together>). Perhaps re-post it just in this thread?",
        "user": "UCGAK10LS",
        "ts": "1597832368.111300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1597832401.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PU2b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKP3B2J5D"
                            },
                            {
                                "type": "text",
                                "text": " No worries. I probably wouldn't pollute the main channel with this link though (unless you want to post it to "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C5U3SEW6A"
                            },
                            {
                                "type": "text",
                                "text": "). Perhaps re-post it just in this thread?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593726809.181800",
        "parent_user_id": "UKP3B2J5D"
    },
    {
        "client_msg_id": "751486BE-D0B7-4EEC-A800-DF2569581844",
        "type": "message",
        "text": "Don\u2019t think there is any way to undo the sending to the channel. I wanted it called out since whoever that was on this thread would definitely be interested in this too. ",
        "user": "UKP3B2J5D",
        "ts": "1597832486.113400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uRna",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Don\u2019t think there is any way to undo the sending to the channel. I wanted it called out since whoever that was on this thread would definitely be interested in this too. "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593726809.181800",
        "parent_user_id": "UKP3B2J5D"
    },
    {
        "client_msg_id": "1bde77c7-ed67-4c59-b456-c27c352b71ec",
        "type": "message",
        "text": "Delete and re-post should do it.\n\nIt's definitely right for this thread, but not for the main <#C5T9GPWFL|thinking-together> feed. (People on the thread get a notification, so will still see it).",
        "user": "UCGAK10LS",
        "ts": "1597832559.113600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1597832722.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ash",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Delete and re-post should do it.\n\nIt's definitely right for this thread, but not for the main "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": " feed. (People on the thread get a notification, so will still see it)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593726809.181800",
        "parent_user_id": "UKP3B2J5D"
    },
    {
        "client_msg_id": "421744F5-D14B-44E0-8362-91EB05E0B849",
        "type": "message",
        "text": "For next time? I don\u2019t think it\u2019s that big a deal. ",
        "user": "UKP3B2J5D",
        "ts": "1597832752.114900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WDvJu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For next time? I don\u2019t think it\u2019s that big a deal. "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593726809.181800",
        "parent_user_id": "UKP3B2J5D"
    },
    {
        "client_msg_id": "07577bd4-8d9f-434b-b82c-0772e2cbdb19",
        "type": "message",
        "text": "Sure.",
        "user": "UCGAK10LS",
        "ts": "1597832802.115100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g0CX/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sure."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593726809.181800",
        "parent_user_id": "UKP3B2J5D"
    },
    {
        "client_msg_id": "76D2DEAF-F01A-4997-BC55-983F733A8266",
        "type": "message",
        "text": "To buttress your point <@UJBAJNFLK> I miss being able to name variables \u2018open?\u2019 . This is an interesting example actually because when said out loud it is the same word as \u2018open\u2019 but with a different tone or maybe \u2018open?\u2019 should be pronounced \u2018is open\u2019 . \n\nIs that a strike against using variable names like this :thinking_face:.",
        "user": "UKP3B2J5D",
        "ts": "1597835979.118700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UKP3B2J5D",
            "ts": "1597836007.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ysB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To buttress your point "
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " I miss being able to name variables \u2018open?\u2019 . This is an interesting example actually because when said out loud it is the same word as \u2018open\u2019 but with a different tone or maybe \u2018open?\u2019 should be pronounced \u2018is open\u2019 . \n\nIs that a strike against using variable names like this "
                            },
                            {
                                "type": "emoji",
                                "name": "thinking_face"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UDQBTJ211"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "15a1f49a-d4aa-4676-b559-7a0ae19e18a0",
        "type": "message",
        "text": "<@UKP3B2J5D> Indeed, the question mark was one of the main innovations coming from Scheme. Once you have seen it, you can't help but consider the `-p` prefix from earlier Lisp days incredibly clumsy. I read the question mark with a different tone (to myself, I hardly speak Lisp to others), and that sounds very natural to me.",
        "user": "UJBAJNFLK",
        "ts": "1597840757.119100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XKCS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UKP3B2J5D"
                            },
                            {
                                "type": "text",
                                "text": " Indeed, the question mark was one of the main innovations coming from Scheme. Once you have seen it, you can't help but consider the "
                            },
                            {
                                "type": "text",
                                "text": "-p",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " prefix from earlier Lisp days incredibly clumsy. I read the question mark with a different tone (to myself, I hardly speak Lisp to others), and that sounds very natural to me."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "2C6FB6BC-1609-4E52-819F-98CE06D0478A",
        "type": "message",
        "text": "Obligatory mention of <http://osmosianplainenglishprogramming.blog|The Osmosian Order of Plain English Programmers> ",
        "user": "U014WA16VNJ",
        "ts": "1597846270.121000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U014WA16VNJ",
            "ts": "1597846314.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l8=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Obligatory mention of "
                            },
                            {
                                "type": "link",
                                "url": "http://osmosianplainenglishprogramming.blog",
                                "text": "The Osmosian Order of Plain English Programmers"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "a5aec372-3343-4265-b644-e43f27620a3a",
        "type": "message",
        "text": "When trying to use natural language as a basis for programming, I suppose a lot of effort needs to go into dealing with ambiguity.\n\nI'm all for this, because I think problems with complexity and with understandability come from the level of precision that is required to do programming today, which caters to logic and math types, and is far beyond what non-programmers are used to from their daily lives.\n\nI wonder, <@UEBG0NPDK>, can you talk more about how you explicitly deal with ambiguities in that prototype, or is that not a concern at all?",
        "user": "U5STGTB3J",
        "ts": "1597847135.121300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eNMJ1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When trying to use natural language as a basis for programming, I suppose a lot of effort needs to go into dealing with ambiguity.\n\nI'm all for this, because I think problems with complexity and with understandability come from the level of precision that is required to do programming today, which caters to logic and math types, and is far beyond what non-programmers are used to from their daily lives.\n\nI wonder, "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": ", can you talk more about how you explicitly deal with ambiguities in that prototype, or is that not a concern at all?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "type": "message",
        "text": "There was a good useR keynote last month on some of this by Amelia McNamara called \"Speaking R\" (<https://www.youtube.com/watch?v=ckW9sSdIVAc&feature=youtu.be&t=676|video>, <https://www.amelia.mn/SpeakingR/#1|slides>).",
        "files": [
            {
                "id": "F0194E47L3C",
                "created": 1597850493,
                "timestamp": 1597850493,
                "name": "Screen Shot 2020-08-19 at 8.19.58 AM.png",
                "title": "Screen Shot 2020-08-19 at 8.19.58 AM.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UMH5FAW2Y",
                "editable": false,
                "size": 622626,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F0194E47L3C/screen_shot_2020-08-19_at_8.19.58_am.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F0194E47L3C/download/screen_shot_2020-08-19_at_8.19.58_am.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F0194E47L3C-6d33fd2d3b/screen_shot_2020-08-19_at_8.19.58_am_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F0194E47L3C-6d33fd2d3b/screen_shot_2020-08-19_at_8.19.58_am_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F0194E47L3C-6d33fd2d3b/screen_shot_2020-08-19_at_8.19.58_am_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 201,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F0194E47L3C-6d33fd2d3b/screen_shot_2020-08-19_at_8.19.58_am_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 268,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F0194E47L3C-6d33fd2d3b/screen_shot_2020-08-19_at_8.19.58_am_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F0194E47L3C-6d33fd2d3b/screen_shot_2020-08-19_at_8.19.58_am_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 402,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F0194E47L3C-6d33fd2d3b/screen_shot_2020-08-19_at_8.19.58_am_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 447,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F0194E47L3C-6d33fd2d3b/screen_shot_2020-08-19_at_8.19.58_am_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 536,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F0194E47L3C-6d33fd2d3b/screen_shot_2020-08-19_at_8.19.58_am_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 572,
                "original_w": 2206,
                "original_h": 1232,
                "thumb_tiny": "AwAaADDRbOeGx+FAPHJz+FDEjpSBj3NADtwoyKAc+lRTTeXIijqQSfoKAJqKq+fKJGJT92eF55NTxMzL84IYdQaA8xzAkik2n2pTRigBACD2qN4o3k3NnIGKmFMxyfrQBF5CcAu21SSAO1TIAMnJJPfFOpDQB//Z",
                "permalink": "https://futureofcoding.slack.com/files/UMH5FAW2Y/F0194E47L3C/screen_shot_2020-08-19_at_8.19.58_am.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F0194E47L3C-49d057d03e",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RSwZ1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There was a good useR keynote last month on some of this by Amelia McNamara called \"Speaking R\" ("
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=ckW9sSdIVAc&feature=youtu.be&t=676",
                                "text": "video"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https://www.amelia.mn/SpeakingR/#1",
                                "text": "slides"
                            },
                            {
                                "type": "text",
                                "text": ")."
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UMH5FAW2Y",
        "display_as_bot": false,
        "ts": "1597850526.122600",
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "62f0d23e-b3ed-48f9-acec-0d53ae2693d4",
        "type": "message",
        "text": "Removed :)",
        "user": "UC2A2ARPT",
        "ts": "1597851707.123100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sHfob",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Removed :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593726809.181800",
        "parent_user_id": "UKP3B2J5D",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ea59ed5b-fa32-4960-88e8-976c360ad60f",
        "type": "message",
        "text": "(OT: <@UC6997THT> Also posted <https://futureofcoding.slack.com/archives/C5U3SEW6A/p1597552498071900?thread_ts=1597436373.033600&amp;cid=C5U3SEW6A|another version> of that same talk recently. Fun coincidence.)",
        "user": "UC2A2ARPT",
        "ts": "1597851876.123400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1597851880.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D5F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(OT: "
                            },
                            {
                                "type": "user",
                                "user_id": "UC6997THT"
                            },
                            {
                                "type": "text",
                                "text": " Also posted "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1597552498071900?thread_ts=1597436373.033600&cid=C5U3SEW6A",
                                "text": "another version"
                            },
                            {
                                "type": "text",
                                "text": " of that same talk recently. Fun coincidence.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593726809.181800",
        "parent_user_id": "UKP3B2J5D",
        "reactions": [
            {
                "name": "white_check_mark",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "64048bee-64e8-44b4-b16a-771a702f5f0f",
        "type": "message",
        "text": "<@UCGAK10LS> Nothing is builtin, so drawing to HTML in this instance has no implications on the semantics of the language itself. You could just as easily replace the definition of element with something that draws to GL. This is all you need for the def of element:\n```an element is a thing with a tag \"div\"\n\nto create an element\n    dom.elem(the element, its tag)```\nIt\u2019s just an FFI call. The language was designed to be able to go all the way down to bare metal if desired.\n\nThe full semantics of the model is probably best left for another discussion :slightly_smiling_face:",
        "user": "UEBG0NPDK",
        "ts": "1597855277.124100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1597859210.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VCR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " Nothing is builtin, so drawing to HTML in this instance has no implications on the semantics of the language itself. You could just as easily replace the definition of element with something that draws to GL. This is all you need for the def of element:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "an element is a thing with a tag \"div\"\n\nto create an element\n    dom.elem(the element, its tag)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It\u2019s just an FFI call. The language was designed to be able to go all the way down to bare metal if desired.\n\nThe full semantics of the model is probably best left for another discussion "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "U014WA16VNJ"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "81dbc2a7-94ef-47a6-a087-e5f71da05cc7",
        "type": "message",
        "text": "<@U5STGTB3J> we spent a bunch of time trying to understand what ambiguity really is and where it comes up in previous work on doing sophisticated natural language querying. In the end we realized that as long as you\u2019re not writing full prose (e.g. limiting yourself to individual sentences rather than full paragraphs) the only form of ambiguity you really have to deal with is the edges between nodes in the sentence. For example, which object\u2019s count does \u201cthe count\u201d refer to? There are lots of simple heuristics we employ as humans to resolve that and in the end the only thing you really need to provide is a way to correct the edge if it\u2019s wrong. In past projects we did that by exposing a formal representation of these linkages as a really simple nested list :)\n\nIn this particular case, we\u2019ve designed the language such that ambiguities are pretty rare, but certainly not impossible. The editor we\u2019re building along side this has tools for helping you understand and fix ambiguity if it comes up. We also leverage things like autocomplete to guide you towards unambiguous formulations to being with. Reducing everything down to simple declarative statements and single line actions gives us a ton of leverage to make both the meaning of things clear and keep the editing experience really natural.",
        "user": "UEBG0NPDK",
        "ts": "1597855918.124600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1597856131.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gryuv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " we spent a bunch of time trying to understand what ambiguity really is and where it comes up in previous work on doing sophisticated natural language querying. In the end we realized that as long as you\u2019re not writing full prose (e.g. limiting yourself to individual sentences rather than full paragraphs) the only form of ambiguity you really have to deal with is the edges between nodes in the sentence. For example, which object\u2019s count does \u201cthe count\u201d refer to? There are lots of simple heuristics we employ as humans to resolve that and in the end the only thing you really need to provide is a way to correct the edge if it\u2019s wrong. In past projects we did that by exposing a formal representation of these linkages as a really simple nested list :)\n\nIn this particular case, we\u2019ve designed the language such that ambiguities are pretty rare, but certainly not impossible. The editor we\u2019re building along side this has tools for helping you understand and fix ambiguity if it comes up. We also leverage things like autocomplete to guide you towards unambiguous formulations to being with. Reducing everything down to simple declarative statements and single line actions gives us a ton of leverage to make both the meaning of things clear and keep the editing experience really natural."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U5STGTB3J"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "908c1fd7-cefe-40d3-89c6-e1525c364ef1",
        "type": "message",
        "text": "Where things get really interesting is in the mixture of this way of talking about nouns and verbs in the world coupled with an editor that helps you understand the whole system concretely. I can\u2019t wait to show you guys what that\u2019s going to let us do. :slightly_smiling_face:",
        "user": "UEBG0NPDK",
        "ts": "1597856061.124900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I2K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Where things get really interesting is in the mixture of this way of talking about nouns and verbs in the world coupled with an editor that helps you understand the whole system concretely. I can\u2019t wait to show you guys what that\u2019s going to let us do. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "U014WA16VNJ",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "3dfc75cb-e2f4-4704-ac35-19a0f306ae59",
        "type": "message",
        "text": "It\u2019s also worth pointing out that despite this being an extremely high level language, that doesn\u2019t have to come at the cost of performance. The backend was able to match handwritten and carefully tuned rust in some of our experiments. The only reason the rust ended up being faster was because I dropped down to SIMD intrinsics and we\u2019re generating JS right now, which doesn\u2019t have access to SIMD.",
        "user": "UEBG0NPDK",
        "ts": "1597856607.126000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2Rc8l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It\u2019s also worth pointing out that despite this being an extremely high level language, that doesn\u2019t have to come at the cost of performance. The backend was able to match handwritten and carefully tuned rust in some of our experiments. The only reason the rust ended up being faster was because I dropped down to SIMD intrinsics and we\u2019re generating JS right now, which doesn\u2019t have access to SIMD."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "a09023cd-b3ae-47b5-83e8-a802435d889e",
        "type": "message",
        "text": "<https://github.com/Felienne/hedy>",
        "user": "UC6997THT",
        "ts": "1597861763.127000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "Felienne/hedy",
                "title_link": "https://github.com/Felienne/hedy",
                "text": "Hedy is a gradual programming language, which increases in syntactic elements level by level. - Felienne/hedy",
                "fallback": "GitHub: Felienne/hedy",
                "thumb_url": "https://avatars0.githubusercontent.com/u/1003685?s=400&v=4",
                "from_url": "https://github.com/Felienne/hedy",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/Felienne/hedy"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NNk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://github.com/Felienne/hedy"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593726809.181800",
        "parent_user_id": "UKP3B2J5D",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UKP3B2J5D"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "49eaa30f-5770-44c3-a079-692f41360102",
        "type": "message",
        "text": "<@UEBG0NPDK> I love hearing some much about where things are going. Definitely can't wait till you can share more :slightly_smiling_face:\n\nI am interested to know, who is we? Is this work you are doing in your spare time or at a company?",
        "user": "UK3LH8CF5",
        "ts": "1597864575.127600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UK3LH8CF5",
            "ts": "1597864635.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bzs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " I love hearing some much about where things are going. Definitely can't wait till you can share more "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI am interested to know, who is we? Is this work you are doing in your spare time or at a company?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "dca2668f-8381-48ef-9b58-ce1e2560b8a6",
        "type": "message",
        "text": "Josh (from Eve) and I left our jobs and are doing this off of savings at the moment. Our goal is to try to put something impactful enough together that we can create a sustainable small business around it. :slightly_smiling_face:",
        "user": "UEBG0NPDK",
        "ts": "1597865137.128000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1597865175.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jVQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Josh (from Eve) and I left our jobs and are doing this off of savings at the moment. Our goal is to try to put something impactful enough together that we can create a sustainable small business around it. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597811295.101400",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UK3LH8CF5",
                    "U014WA16VNJ",
                    "UA14TGLTC",
                    "UDQBTJ211"
                ],
                "count": 4
            },
            {
                "name": "grimacing",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "19690993-0681-428c-bcb0-ea0d6bc57b65",
        "type": "message",
        "text": "I contributed to the Xiki Kickstarter, even met up with Craig to try some pairing on it (though we didn\u2019t get that far), and then watched the mailing list traffic as the project gradually lost support. (The most recent thread was two years ago, when his pitch for a second Kickstarter was shot down by the backers of the first one: <https://groups.google.com/forum/#!topic/xiki/Dvzo14Lhoyg> )\n\nIt\u2019s still a lovely idea, buried by its creator sacrificing near-term assistance in pursuit of a long-term dream that will probably not be reached. It\u2019s yet another lesson in the difference between an Open Source license and an actually open project. If he\u2019d properly shared his work and made it easy to contribute, Xiki would probably be usable today.",
        "user": "UFV8P4472",
        "ts": "1597871475.128700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFV8P4472",
            "ts": "1597871562.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rRm7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I contributed to the Xiki Kickstarter, even met up with Craig to try some pairing on it (though we didn\u2019t get that far), and then watched the mailing list traffic as the project gradually lost support. (The most recent thread was two years ago, when his pitch for a second Kickstarter was shot down by the backers of the first one: "
                            },
                            {
                                "type": "link",
                                "url": "https://groups.google.com/forum/#!topic/xiki/Dvzo14Lhoyg"
                            },
                            {
                                "type": "text",
                                "text": " )\n\nIt\u2019s still a lovely idea, buried by its creator sacrificing near-term assistance in pursuit of a long-term dream that will probably not be reached. It\u2019s yet another lesson in the difference between an Open Source license and an actually open project. If he\u2019d properly shared his work and made it easy to contribute, Xiki would probably be usable today."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592844348.403300",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "cry",
                "users": [
                    "UA14TGLTC",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    }
]