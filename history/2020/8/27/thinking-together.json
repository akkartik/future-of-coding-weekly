[
    {
        "client_msg_id": "dcc00f55-f79d-41af-9555-cbf619807a18",
        "type": "message",
        "text": "<@U018LAH5QCT> ah thats a shame you are having issues on windows. Im a windows user too and was planning on having a tinker with it when I get a spare min",
        "user": "U0143PC0UTC",
        "ts": "1598485881.126000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "13AF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U018LAH5QCT"
                            },
                            {
                                "type": "text",
                                "text": " ah thats a shame you are having issues on windows. Im a windows user too and was planning on having a tinker with it when I get a spare min"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598413978.113200",
        "parent_user_id": "U0143PC0UTC"
    },
    {
        "client_msg_id": "1a1d93bc-7702-40b7-a684-2ab3c6e854e9",
        "type": "message",
        "text": "I'd like to apologise to those with whom I've had recent conversations about linguistics, logic, and ontologies, for brushing off the relevance of the latter topics to the former. It seems these topics are more deeply intertwined than I had previously realised.\n\u2022 The field of logic emerged as a means of studying how humans _reason_ using natural language. Logic is irrevocably tied to the structure of natural language, and therefore it seems foolish to try to add natural language to a programming system without basing it on logic.\n\u2022 Ontology is the study of categories and relationships. Ontology languages like OWL are actually based on Description Logic (I was surprised!), which could be perceived as a *type system* based on first-order logic. This gives us a formal way of conceptualising entities and have the computer *check* that a program is going to respect that conceptualisation.\nI had been dissuaded from reading into the use of ontologies in information systems because most resources I encountered about it are about the \"Semantic Web\"; I had equated the two. I'm interested merely in programming systems, and accordingly I have no interest in trying to make or support global standards for the categorisation of information. But the fundamental idea of ontology is sound: it seems like a *bridge* between natural language, logic, and type systems. I'd be a fool to ignore it given I'm designing a _logic_ programming system.\n\n*Next up:* Several weeks studying the interplay between logic, natural language, ontologies, and type systems!",
        "user": "UCGAK10LS",
        "ts": "1598499469.142200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1598500594.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LkiM/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd like to apologise to those with whom I've had recent conversations about linguistics, logic, and ontologies, for brushing off the relevance of the latter topics to the former. It seems these topics are more deeply intertwined than I had previously realised.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The field of logic emerged as a means of studying how humans "
                                    },
                                    {
                                        "type": "text",
                                        "text": "reason",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " using natural language. Logic is irrevocably tied to the structure of natural language, and therefore it seems foolish to try to add natural language to a programming system without basing it on logic."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Ontology is the study of categories and relationships. Ontology languages like OWL are actually based on Description Logic (I was surprised!), which could be perceived as a "
                                    },
                                    {
                                        "type": "text",
                                        "text": "type system",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " based on first-order logic. This gives us a formal way of conceptualising entities and have the computer "
                                    },
                                    {
                                        "type": "text",
                                        "text": "check",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " that a program is going to respect that conceptualisation."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I had been dissuaded from reading into the use of ontologies in information systems because most resources I encountered about it are about the \"Semantic Web\"; I had equated the two. I'm interested merely in programming systems, and accordingly I have no interest in trying to make or support global standards for the categorisation of information. But the fundamental idea of ontology is sound: it seems like a "
                            },
                            {
                                "type": "text",
                                "text": "bridge ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "between natural language, logic, and type systems. I'd be a fool to ignore it given I'm designing a "
                            },
                            {
                                "type": "text",
                                "text": "logic",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "programming system.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Next up:",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " Several weeks studying the interplay between logic, natural language, ontologies, and type systems!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598499469.142200",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1598818029.010400",
        "reply_users": [
            "UA14TGLTC",
            "UC2A2ARPT",
            "UP3FH4CLU"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT",
                    "U016VUZGUUQ",
                    "UPX3PH28N",
                    "UJUQESQ1Z",
                    "UA14TGLTC",
                    "UJBAJNFLK",
                    "UKP3B2J5D",
                    "UML4ZEKDK",
                    "U5STGTB3J",
                    "UJNJQD2AC"
                ],
                "count": 10
            },
            {
                "name": "rainbow",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f3b7a117-7ffc-48a9-a799-74c149317fdc",
        "type": "message",
        "text": "<@UUQ2EQW21> I've never seen that half keyboard before. That's wild!",
        "user": "U016VUZGUUQ",
        "ts": "1598509050.142900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ezWr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UUQ2EQW21"
                            },
                            {
                                "type": "text",
                                "text": " I've never seen that half keyboard before. That's wild!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598432237.114700",
        "parent_user_id": "UL5AX4G2H"
    },
    {
        "client_msg_id": "95129375-9d27-4f5c-8e90-48a5b86fb397",
        "type": "message",
        "text": "Advising a friend on a Sci-Fi story, I imagined what a keyboard a few decades hence might be.  I recommended the character point in the direction where she wants the text to appear in the world, wiggle her finger as though swiping on a phone (yes, QWERTY style), and mumble what it is that she means to write (for the audience).  We could imagine subvocalizations as well.  Moral being that the noisy signals (subvocalizations and finger wiggles) get fused by the dictation software.  Just a thought.",
        "user": "UA14TGLTC",
        "ts": "1598514976.143700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TyN0j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Advising a friend on a Sci-Fi story, I imagined what a keyboard a few decades hence might be.  I recommended the character point in the direction where she wants the text to appear in the world, wiggle her finger as though swiping on a phone (yes, QWERTY style), and mumble what it is that she means to write (for the audience).  We could imagine subvocalizations as well.  Moral being that the noisy signals (subvocalizations and finger wiggles) get fused by the dictation software.  Just a thought."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598432237.114700",
        "parent_user_id": "UL5AX4G2H",
        "reactions": [
            {
                "name": "hatching_chick",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "034ecdaa-223d-4683-90bf-6429fc148234",
        "type": "message",
        "text": "I have some familiarity with OWL.  Worked with Pat Hayes.  He has a short article from a while back expressing thoughts <https://www.ihmc.us/users/phayes/CatchingTheDreams2003.html>.  I think this stuff didn't do much anywhere because Google and Wikipedia did instead.  Maybe.",
        "user": "UA14TGLTC",
        "ts": "1598516180.144000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UkB1U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have some familiarity with OWL.  Worked with Pat Hayes.  He has a short article from a while back expressing thoughts "
                            },
                            {
                                "type": "link",
                                "url": "https://www.ihmc.us/users/phayes/CatchingTheDreams2003.html"
                            },
                            {
                                "type": "text",
                                "text": ".  I think this stuff didn't do much anywhere because Google and Wikipedia did instead.  Maybe."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598499469.142200",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3fa01259-5c02-4586-986a-06c632b717cf",
        "type": "message",
        "text": "<@UPX3PH28N> I thought you were going to say you remapped 'jk' to escape; which is what I do; it's a real typing saver in vim; never reaching for escape again; easy to learn, with only the minor inconvenience that you have to remap every vim editor you use to :noremap jk &lt;Esc&gt;",
        "user": "UUQ2EQW21",
        "ts": "1598522117.144400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F=t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UPX3PH28N"
                            },
                            {
                                "type": "text",
                                "text": " I thought you were going to say you remapped 'jk' to escape; which is what I do; it's a real typing saver in vim; never reaching for escape again; easy to learn, with only the minor inconvenience that you have to remap every vim editor you use to :noremap jk <Esc>"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598432237.114700",
        "parent_user_id": "UL5AX4G2H"
    },
    {
        "client_msg_id": "db88667e-3e20-4fe1-8e1e-d41c82b3eb3a",
        "type": "message",
        "text": "<@UA14TGLTC> I always thought that a futuristic (or maybe not so future) keyboard would just involve wiggling fingers.  I think it should be possible to learn to gesture stenographically in space.  Perhaps the new iPhone will enable more experiments like this.  I'm fascinated by this whole field of efficient gesture input; I even learned T-line shorthand when I was a kid, for 'fun' :slightly_smiling_face:   We have been hamstrung by keyboards for far too long.\nThe other reason we need gestures for typing is of course VR.",
        "user": "UUQ2EQW21",
        "ts": "1598522322.144600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AXJ/i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " I always thought that a futuristic (or maybe not so future) keyboard would just involve wiggling fingers.  I think it should be possible to learn to gesture stenographically in space.  Perhaps the new iPhone will enable more experiments like this.  I'm fascinated by this whole field of efficient gesture input; I even learned T-line shorthand when I was a kid, for 'fun' "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": "   We have been hamstrung by keyboards for far too long.\nThe other reason we need gestures for typing is of course VR."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598432237.114700",
        "parent_user_id": "UL5AX4G2H",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U016VUZGUUQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d7f0e4bc-3211-440a-8f51-f5d15d4d122d",
        "type": "message",
        "text": "<@UUQ2EQW21> this trick doesn't actually work with Workman. Because of the rolling combos, most of the keys that are close, also occur often in the text. I mapped ESC on Caps Lock place though",
        "user": "UPX3PH28N",
        "ts": "1598522616.144800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1ND5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UUQ2EQW21"
                            },
                            {
                                "type": "text",
                                "text": " this trick doesn't actually work with Workman. Because of the rolling combos, most of the keys that are close, also occur often in the text. I mapped ESC on Caps Lock place though"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598432237.114700",
        "parent_user_id": "UL5AX4G2H"
    },
    {
        "client_msg_id": "d74e0309-7e61-4c18-942e-12224c7883fe",
        "type": "message",
        "text": "I was rewatching Are We There Yet the other day (<https://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey/>) which is Rich Hickey (mr Clojure himself)'s treatise on how he sees the world, how objects are lies, and how modelling whole applications as streams of new states produced by pure functions with structural sharing to keep performance good. super interesting to see him talking about this in the Java community in 2009 and see it percolate through to the JS community with immer and redux and whatnot, but i was struck by a certain feeling that i'd love to know if y'all share.\n\nThe whole OOP/functional debate, this talk, and frankly a lot of my thinking seem to principally be about modelling logic, and striving to get to some place where state is abstracted away. I/we seem to want to get to a world where I/we think mostly about computation and not about state change over time. I had a very strange experience switching from working on a backend team where state is the devil and ruins performance of everything (it'd be so fast if it didn't store anything!) to working in analytics where data is everything and where the code is a tiny little ever-changing bit of glue that manipulates this massive, permanent, far more important artifact. I found it nasty. It's nasty because the data captures every mistake ever made, which pile up and force every user to care about until fixed. It's nasty because it's big and hard to make development responsive. It's nasty because it feels wrong to write \"poor\" code you run once to fix something then delete, and it is really hard to get a handle on the shape, or quality, or meaning of real big datasets.\n\nI think I had (have) data-phobia, and it took getting immersed in a data-heavy product to realize that I think I/we have it backwards, and that the data is more important than the instructions for manipulating it, and deserves to be the focus, not the nagging feeling at the back of your head. What I was struck with in Rich's talk is that the epochal time model and FP writ large seem like they are born of the same phobia, trying to escape the shackles of state management in order to get back to some pure world of computation that doesn't actually exist. A bunch of Bret Victor's work circles around this too, where the instructions to run the code are way less emphasized than the (often visual) data created by what the instructions are actually doing. All the hover-to-see-the-value or watch-this-expression debugging tools are us being forced to go back from pure computation to look at the actual data flowing through once more. Airtable/spreadsheets are counter examples of non-data-phobic tools that seem to be easier to use, maybe because they put the data first.\n\nSo ... am I off my rocker? Is data-phobia a real thing, a force that has shaped our tools to demote a super important piece of our lives? Is there an antidote?",
        "user": "U016LEA3J1H",
        "ts": "1598534303.161500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "InfoQ",
                "title": "Are We There Yet?",
                "title_link": "https://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey/",
                "text": "In his keynote at JVM Languages Summit 2009, Rich Hickey advocated for the reexamination of basic principles like state, identity, value, time, types, genericity, complexity, as they are used by OOP today, to be able to create the new constructs and languages to deal with the massive parallelism and concurrency of the future.",
                "fallback": "InfoQ: Are We There Yet?",
                "from_url": "https://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey/",
                "thumb_url": "https://res.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey/en/smallimage/Hickey.jpg",
                "thumb_width": 70,
                "thumb_height": 100,
                "service_icon": "https://cdn.infoq.com/statics_s2_20200821055107_1/apple-touch-icon.png",
                "id": 1,
                "original_url": "https://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5b+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was rewatching Are We There Yet the other day ("
                            },
                            {
                                "type": "link",
                                "url": "https://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey/"
                            },
                            {
                                "type": "text",
                                "text": ") which is Rich Hickey (mr Clojure himself)'s treatise on how he sees the world, how objects are lies, and how modelling whole applications as streams of new states produced by pure functions with structural sharing to keep performance good. super interesting to see him talking about this in the Java community in 2009 and see it percolate through to the JS community with immer and redux and whatnot, but i was struck by a certain feeling that i'd love to know if y'all share.\n\nThe whole OOP/functional debate, this talk, and frankly a lot of my thinking seem to principally be about modelling logic, and striving to get to some place where state is abstracted away. I/we seem to want to get to a world where I/we think mostly about computation and not about state change over time. I had a very strange experience switching from working on a backend team where state is the devil and ruins performance of everything (it'd be so fast if it didn't store anything!) to working in analytics where data is everything and where the code is a tiny little ever-changing bit of glue that manipulates this massive, permanent, far more important artifact. I found it nasty. It's nasty because the data captures every mistake ever made, which pile up and force every user to care about until fixed. It's nasty because it's big and hard to make development responsive. It's nasty because it feels wrong to write \"poor\" code you run once to fix something then delete, and it is really hard to get a handle on the shape, or quality, or meaning of real big datasets.\n\nI think I had (have) data-phobia, and it took getting immersed in a data-heavy product to realize that I think I/we have it backwards, and that the data is more important than the instructions for manipulating it, and deserves to be the focus, not the nagging feeling at the back of your head. What I was struck with in Rich's talk is that the epochal time model and FP writ large seem like they are born of the same phobia, trying to escape the shackles of state management in order to get back to some pure world of computation that doesn't actually exist. A bunch of Bret Victor's work circles around this too, where the instructions to run the code are way less emphasized than the (often visual) data created by what the instructions are actually doing. All the hover-to-see-the-value or watch-this-expression debugging tools are us being forced to go back from pure computation to look at the actual data flowing through once more. Airtable/spreadsheets are counter examples of non-data-phobic tools that seem to be easier to use, maybe because they put the data first.\n\nSo ... am I off my rocker? Is data-phobia a real thing, a force that has shaped our tools to demote a super important piece of our lives? Is there an antidote?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "reply_count": 27,
        "reply_users_count": 16,
        "latest_reply": "1598812365.009300",
        "reply_users": [
            "UE6EFEPTQ",
            "UA14TGLTC",
            "UN7K3UT4G",
            "UJBAJNFLK",
            "UC2A2ARPT",
            "U013ZLJARC7",
            "U8A5MS6R1",
            "UJ6LDMMN0",
            "U016LEA3J1H",
            "U016VUZGUUQ",
            "UJNJQD2AC",
            "UHWC9PXBL",
            "U5STGTB3J",
            "U019W8A1884",
            "ULM3U6275",
            "U6KQ2S410"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC",
                    "US370TRJA"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL",
                    "ULM3U6275"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "22f38e45-c08d-4a5f-a751-c4d2e3be7038",
        "type": "message",
        "text": "Yus data/state-phobia is real, as evidenced by both imperative (OO) and declarative (FP/LP) approaches, which deprecate or hide it.",
        "user": "UE6EFEPTQ",
        "ts": "1598537908.162800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dDANw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yus data/state-phobia is real, as evidenced by both imperative (OO) and declarative (FP/LP) approaches, which deprecate or hide it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "f626eda8-aeab-44e1-ab95-b42b6f51130b",
        "type": "message",
        "text": "and `state -&gt; f() -&gt; state -&gt; f() -&gt; state` is a good model for programming.",
        "user": "UE6EFEPTQ",
        "ts": "1598537961.163800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9NbFz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and "
                            },
                            {
                                "type": "text",
                                "text": "state -> f() -> state -> f() -> state",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is a good model for programming."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "69EB1232-44E3-4145-B66B-7D28E60C68FF",
        "type": "message",
        "text": "Thinking how structured programming shows the control flow of you program, the steps, but not the... yeah what <@UE6EFEPTQ> said.",
        "user": "UA14TGLTC",
        "ts": "1598537978.164000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IW8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thinking how structured programming shows the control flow of you program, the steps, but not the... yeah what "
                            },
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": " said."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "a74357e2-fc2a-42f0-8831-a5148778e7dc",
        "type": "message",
        "text": "IMAO (In My Arrogant Opinion) :smile:",
        "user": "UE6EFEPTQ",
        "ts": "1598538025.164200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EKl7N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "IMAO (In My Arrogant Opinion) "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "boom",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0906D1BF-AED2-4984-96B4-745540F1FEA0",
        "type": "message",
        "text": "Stenography!  Now we\u2019re talking!",
        "user": "UA14TGLTC",
        "ts": "1598538175.164900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lUJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Stenography!  Now we\u2019re talking!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598432237.114700",
        "parent_user_id": "UL5AX4G2H"
    },
    {
        "type": "message",
        "text": "I've been using colemak for a good few years now. I recently made some of the more common mods (\"Angle\", \"Wide\", \"Curl-DH\" <https://colemakmods.github.io/ergonomic-mods/>)\nbecause I started to notice RSI symptoms in my right pinky and realized how much of the keyboard it normally controls.\n\nI've also remapped tapping caps lock to be escape and holding it to be ctrl, both very useful for vim.\n(Another change I made recently was to entirely remap vim, e.g. making the equivalent of IJKL act as arrow keys instead of HJKL).\n\nI'm on a normal keyboard atm (Microsoft Sidewinder X4), but I've been planning to make my own split ergo keyboard for a while, maybe the Dactyl (pictured)...\n\nHappy to answer any questions.",
        "files": [
            {
                "id": "F019TETVDJQ",
                "created": 1598540626,
                "timestamp": 1598540626,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UEDDR6L5Q",
                "editable": false,
                "size": 1580212,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F019TETVDJQ/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F019TETVDJQ/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F019TETVDJQ-d8460414e2/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F019TETVDJQ-d8460414e2/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F019TETVDJQ-d8460414e2/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 240,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F019TETVDJQ-d8460414e2/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 320,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F019TETVDJQ-d8460414e2/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F019TETVDJQ-d8460414e2/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 480,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F019TETVDJQ-d8460414e2/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 534,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F019TETVDJQ-d8460414e2/image_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 640,
                "original_w": 1000,
                "original_h": 667,
                "thumb_tiny": "AwAgADCkse5dxYKPepYYBI20KzerdAKro5RgRzg9DVxryQxqUKrnOVUc0BuPexiSByzHeBkc9Kz6sozOxcsSD95sZ4oS3V5sfNsPPTnFK47FbFFXZrdWXagAZenvVMgg4IwaE7g1Z2G0ozRS5piLEVz5YVcADv71ZTykbKqeentWYcnmp7e6MJ5XcPr0pNXQ07MvZHY/lTZ4kaJnl+UgcHvUf25j/q4gPcmoJGkkyZHJ9u1BPK+bmZ//2Q==",
                "permalink": "https://futureofcoding.slack.com/files/UEDDR6L5Q/F019TETVDJQ/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F019TETVDJQ-c06805bab7",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Cq1g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been using colemak for a good few years now. I recently made some of the more common mods (\"Angle\", \"Wide\", \"Curl-DH\" "
                            },
                            {
                                "type": "link",
                                "url": "https://colemakmods.github.io/ergonomic-mods/"
                            },
                            {
                                "type": "text",
                                "text": ")\nbecause I started to notice RSI symptoms in my right pinky and realized how much of the keyboard it normally controls.\n\nI've also remapped tapping caps lock to be escape and holding it to be ctrl, both very useful for vim.\n(Another change I made recently was to entirely remap vim, e.g. making the equivalent of IJKL act as arrow keys instead of HJKL).\n\nI'm on a normal keyboard atm (Microsoft Sidewinder X4), but I've been planning to make my own split ergo keyboard for a while, maybe the Dactyl (pictured)...\n\nHappy to answer any questions."
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UEDDR6L5Q",
        "display_as_bot": false,
        "ts": "1598540711.165100",
        "thread_ts": "1598432237.114700",
        "parent_user_id": "UL5AX4G2H"
    },
    {
        "client_msg_id": "9ffb3051-e3f3-43d1-baf0-f344b8033364",
        "type": "message",
        "text": "When I occasionally move back to QWERTY it reminds me how terrible of a layout it is - lots of stretching for digrams and common letters out of easy reach. I changed more for reducing finger strain than for speed",
        "user": "UEDDR6L5Q",
        "ts": "1598540828.165500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RGMbV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When I occasionally move back to QWERTY it reminds me how terrible of a layout it is - lots of stretching for digrams and common letters out of easy reach. I changed more for reducing finger strain than for speed"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598432237.114700",
        "parent_user_id": "UL5AX4G2H"
    },
    {
        "client_msg_id": "3eeb66c6-25d1-4f2d-b03d-d367d324dd7f",
        "type": "message",
        "text": "I'm curious if you have measured your speed?  On QWERTY or otherwise.",
        "user": "UUQ2EQW21",
        "ts": "1598540934.165800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6aP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm curious if you have measured your speed?  On QWERTY or otherwise."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598432237.114700",
        "parent_user_id": "UL5AX4G2H"
    },
    {
        "type": "message",
        "text": "<@UEDDR6L5Q> how did you remap caps lock to tap vs hold?",
        "user": "UL5AX4G2H",
        "ts": "1598541108.166000",
        "team": "T5TCAFTA9",
        "thread_ts": "1598432237.114700",
        "parent_user_id": "UL5AX4G2H"
    },
    {
        "client_msg_id": "887a3981-cfaf-4d29-a434-10e04d4d8022",
        "type": "message",
        "text": "I think it\u2019s an artifact of the way we learn to program: <http://theprogrammersparadox.blogspot.com/2020/08/duality.html>",
        "user": "UN7K3UT4G",
        "ts": "1598541200.166200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Duality",
                "title_link": "http://theprogrammersparadox.blogspot.com/2020/08/duality.html",
                "text": "A blog about software development and programming.",
                "fallback": "Duality",
                "from_url": "http://theprogrammersparadox.blogspot.com/2020/08/duality.html",
                "service_icon": "http://theprogrammersparadox.blogspot.com/favicon.ico",
                "service_name": "theprogrammersparadox.blogspot.com",
                "id": 1,
                "original_url": "http://theprogrammersparadox.blogspot.com/2020/08/duality.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h+M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think it\u2019s an artifact of the way we learn to program: "
                            },
                            {
                                "type": "link",
                                "url": "http://theprogrammersparadox.blogspot.com/2020/08/duality.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "b7d27221-d723-48d2-a73b-8465f460a650",
        "type": "message",
        "text": "Not sure if phobia is the right term, but I also perceive an aversion to dealing with data particularly in the academic CS world that would prefer so much to concentrate on pure computations.\n\nAt the highest level, computing is always about that big mass of data that is sitting on your computer's disk. All that stuff that accumulated over time as the result of lots of computations and equally many user interactions. There is no way around this fact. That mass of data is the reason why we use computers at all.\nOn the other hand, that mass of data is also what we mess up all the time, so we have been looking for ways to do data updates in some principled way. In the end, that's what both OO and FP are about. OO divides the state into compartments so that we can look at small pieces at a time. FP focuses on data transformations, which it divides into compartments so that we can better reason about them.",
        "user": "UJBAJNFLK",
        "ts": "1598541352.166500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LJY4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure if phobia is the right term, but I also perceive an aversion to dealing with data particularly in the academic CS world that would prefer so much to concentrate on pure computations.\n\nAt the highest level, computing is always about that big mass of data that is sitting on your computer's disk. All that stuff that accumulated over time as the result of lots of computations and equally many user interactions. There is no way around this fact. That mass of data is the reason why we use computers at all.\nOn the other hand, that mass of data is also what we mess up all the time, so we have been looking for ways to do data updates in some principled way. In the end, that's what both OO and FP are about. OO divides the state into compartments so that we can look at small pieces at a time. FP focuses on data transformations, which it divides into compartments so that we can better reason about them."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "28a263d4-4a8a-4c61-aed0-e54d69d32cb7",
        "type": "message",
        "text": "<@UL5AX4G2H> with AutoHotKey on Windows, XCAPE on Linux (and you could use Karabiner with Mac) <https://gist.github.com/tanyuan/55bca522bf50363ae4573d4bdcf06e2e>\n<https://vim.fandom.com/wiki/Map_caps_lock_to_escape_in_Windows>\n<https://www.dannyguo.com/blog/remap-caps-lock-to-escape-and-control/>",
        "user": "UEDDR6L5Q",
        "ts": "1598541672.166700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEDDR6L5Q",
            "ts": "1598543214.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lKSm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UL5AX4G2H"
                            },
                            {
                                "type": "text",
                                "text": " with AutoHotKey on Windows, XCAPE on Linux (and you could use Karabiner with Mac) "
                            },
                            {
                                "type": "link",
                                "url": "https://gist.github.com/tanyuan/55bca522bf50363ae4573d4bdcf06e2e"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://vim.fandom.com/wiki/Map_caps_lock_to_escape_in_Windows"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.dannyguo.com/blog/remap-caps-lock-to-escape-and-control/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598432237.114700",
        "parent_user_id": "UL5AX4G2H"
    },
    {
        "client_msg_id": "4ca80b61-1d96-4da3-b8a6-ecaea5dae399",
        "type": "message",
        "text": "(On a meta level \u2014 this was a fantastic <#C5T9GPWFL|thinking-together> post, Nick. Thank you for writing it.)",
        "user": "UC2A2ARPT",
        "ts": "1598542916.167000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uIg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(On a meta level \u2014 this was a fantastic "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": " post, Nick. Thank you for writing it.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598499469.142200",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6ca3f512-951a-46fa-9c97-eaee9442b280",
        "type": "message",
        "text": "What Konrad said, but in joke form: that there's an \"expressionless\" emoji :expressionless: but there's no \"stateless\" emoji should tell you everything you need to know about the world.",
        "user": "UC2A2ARPT",
        "ts": "1598543141.167300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JMU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What Konrad said, but in joke form: that there's an \"expressionless\" emoji "
                            },
                            {
                                "type": "emoji",
                                "name": "expressionless"
                            },
                            {
                                "type": "text",
                                "text": " but there's no \"stateless\" emoji should tell you everything you need to know about the world."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "UHWC9PXBL",
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "62ad979e-103b-43c5-b389-f7b848d8d75f",
        "type": "message",
        "text": "Rich's position seems to be not \"state is bad\" so much as \"shared mutable state is bad\" and \"change occurs over time.\" An example of the former in the small is that is your code will be easier for everyone, including you, to understand if it's made of functions that take inputs and outputs rather than ones that change a shared scratch pad. The latter is why Datomic keeps all previous versions of what's been written to it and treats a handle to a database as pertaining to a snapshot at a particular moment in time.",
        "user": "U013ZLJARC7",
        "ts": "1598543494.167700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U013ZLJARC7",
            "ts": "1598543526.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dFEpQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Rich's position seems to be not \"state is bad\" so much as \"shared mutable state is bad\" and \"change occurs over time.\" An example of the former in the small is that is your code will be easier for everyone, including you, to understand if it's made of functions that take inputs and outputs rather than ones that change a shared scratch pad. The latter is why Datomic keeps all previous versions of what's been written to it and treats a handle to a database as pertaining to a snapshot at a particular moment in time."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U8A5MS6R1",
                    "UPX3PH28N",
                    "UHWC9PXBL",
                    "UA14TGLTC",
                    "UKP3B2J5D",
                    "US370TRJA"
                ],
                "count": 6
            }
        ]
    },
    {
        "client_msg_id": "57459df7-5856-4188-8605-4d609bdf6395",
        "type": "message",
        "text": "Instead of \"data\" I like to think of the information expressed via \"data\" and really the \"meaning\" induced in our minds - which is what we really care about in the end. Yes I agree there isn't enough study of these aspects of computing. Many pieces of data can mean the same thing (xml, json, in-memory struct, db, object...). They use different mediums, but how do these mediums affect the representations? How do we determine equivalence? What can be directly represented in the medium vs what needs to be simulated (e.g. Objects can represent \"identity\", or you can simulate it via 'ids' in a system that doesn't have them. \"Time\" is built-in to some models, but may be simulated via version_ids, etags etc.).\n\nImportantly how do these mediums affect the description of computations (programs)?",
        "user": "U8A5MS6R1",
        "ts": "1598545294.168100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J=hF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Instead of \"data\" I like to think of the information expressed via \"data\" and really the \"meaning\" induced in our minds - which is what we really care about in the end. Yes I agree there isn't enough study of these aspects of computing. Many pieces of data can mean the same thing (xml, json, in-memory struct, db, object...). They use different mediums, but how do these mediums affect the representations? How do we determine equivalence? What can be directly represented in the medium vs what needs to be simulated (e.g. Objects can represent \"identity\", or you can simulate it via 'ids' in a system that doesn't have them. \"Time\" is built-in to some models, but may be simulated via version_ids, etags etc.).\n\nImportantly how do these mediums affect the description of computations (programs)?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "0d582f39-12ef-4e99-b39d-cca7cd28adc9",
        "type": "message",
        "text": "It is interesting to note that in many languages Computer Science is called Informati(que|k|ca|...), focusing more on the data.",
        "user": "UJ6LDMMN0",
        "ts": "1598545822.168400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ar7d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It is interesting to note that in many languages Computer Science is called Informati(que|k|ca|...), focusing more on the data."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6f823716-684d-48e9-9429-38ae405ea6f5",
        "type": "message",
        "text": "I think my comment on \"reproducibility\" needs to be clarified a bit with some definitions.\n\nThere is the denotative, dictionary definition of \"reproducibility\": The ability \"reproduce\" *something* (note, this is generic, it can be anything, not just a research paper); to build a copy or simulacrum that exhibits the same behavior or results as the original.\n\nFrom what I see in the thread, we all basically agree that this is a good and useful thing, particularly for learning and understanding.\n\nBut there is a connotative definition of \"reproducibility\" often associated with scientific research. This definition has more specific context associated with it. In this sense, \"reproducibility\" is the ability to make a copy or simulacrum that exhibits the same behavior or results of *a research paper* specifically for the purpose of peer review and validation.\n\nThis definition often implies that the reproduction should be created *completely independently from original result* using only the information found in the paper (and associated references and domain knowledge), but no contact with the original authors.\n\nThis second definition is what I believe <@UN9SCH5RD> was referring to, based on the context of his post and associated links. My response to that post was an attempt to separate the two concepts. I think I did a bad job initially, and hopefully this is more clear.",
        "user": "U01661S9F34",
        "ts": "1598552659.168900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PcmK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think my comment on \"reproducibility\" needs to be clarified a bit with some definitions.\n\nThere is the denotative, dictionary definition of \"reproducibility\": The ability \"reproduce\" "
                            },
                            {
                                "type": "text",
                                "text": "something ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(note, this is generic, it can be anything, not just a research paper); to build a copy or simulacrum that exhibits the same behavior or results as the original.\n\nFrom what I see in the thread, we all basically agree that this is a good and useful thing, particularly for learning and understanding.\n\nBut there is a connotative definition of \"reproducibility\" often associated with scientific research. This definition has more specific context associated with it. In this sense, \"reproducibility\" is the ability to make a copy or simulacrum that exhibits the same behavior or results of"
                            },
                            {
                                "type": "text",
                                "text": " a research paper ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "specifically for the purpose of peer review and validation.\n\nThis definition often implies that the reproduction should be created "
                            },
                            {
                                "type": "text",
                                "text": "completely independently from original result",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " using only the information found in the paper (and associated references and domain knowledge), but no contact with the original authors.\n\nThis second definition is what I believe "
                            },
                            {
                                "type": "user",
                                "user_id": "UN9SCH5RD"
                            },
                            {
                                "type": "text",
                                "text": " was referring to, based on the context of his post and associated links. My response to that post was an attempt to separate the two concepts. I think I did a bad job initially, and hopefully this is more clear."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598125322.060600",
        "parent_user_id": "U01661S9F34"
    },
    {
        "client_msg_id": "61ce22d3-4775-49eb-800f-cf775d668531",
        "type": "message",
        "text": "I agree that epochal time model for programming makes a lot of sense and the small amount of work i've done with Datomic was nice, but, it seems strange how much work Datomic has to go through to present to us a consistent snapshot of the world so our programs can pretend it isn't changing. the databases bend over backwards to present to us an unrealistic model of data because we want to program in this way that pretends things arent changing or messy or big, and i feel like i get intuitively why things have evolved that way, but i feel like there's a whole branch of research that i don't know about or hasnt been done yet for the alternative model of embracing state and change and the mess",
        "user": "U016LEA3J1H",
        "ts": "1598553584.169200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OZwUN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree that epochal time model for programming makes a lot of sense and the small amount of work i've done with Datomic was nice, but, it seems strange how much work Datomic has to go through to present to us a consistent snapshot of the world so our programs can pretend it isn't changing. the databases bend over backwards to present to us an unrealistic model of data because we want to program in this way that pretends things arent changing or messy or big, and i feel like i get intuitively why things have evolved that way, but i feel like there's a whole branch of research that i don't know about or hasnt been done yet for the alternative model of embracing state and change and the mess"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "01c5f6b8-df67-4e26-9bcd-6911929554fa",
        "type": "message",
        "text": "Rich went to great lengths to explain why observations are always out of date and why we should be designing for real latency between event, observation, and reaction, and i think the epochal time model fits that, but it seems to twist the data to fit the code when perhaps it could be the other way around",
        "user": "U016LEA3J1H",
        "ts": "1598553720.169400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b9bv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Rich went to great lengths to explain why observations are always out of date and why we should be designing for real latency between event, observation, and reaction, and i think the epochal time model fits that, but it seems to twist the data to fit the code when perhaps it could be the other way around"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "b6dba05e-097d-4e0f-9952-a81fa169ff4c",
        "type": "message",
        "text": "(i feel it terribly heretical to disagree with anything Rich Hickey says and definitely don't know what I'm talking about, I just have this nagging feeling that we're missing something)",
        "user": "U016LEA3J1H",
        "ts": "1598553794.169600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i3b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(i feel it terribly heretical to disagree with anything Rich Hickey says and definitely don't know what I'm talking about, I just have this nagging feeling that we're missing something)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "93f92152-df1f-4a60-85cf-e85213948a16",
        "type": "message",
        "text": "There are some branches of research that preserve 'identity'. E.g. see NAMOS/pseudo time from David Reed (1978) and a related work on Virtual Time. Here's a nice collection of links: <https://prabros.com/readings-on-time>",
        "user": "U8A5MS6R1",
        "ts": "1598553844.169800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Prabros. - Readings on Time",
                "title": "Readings on Time",
                "title_link": "https://prabros.com/readings-on-time",
                "text": "On the aspect of managed time missing in programming languages",
                "fallback": "Prabros. - Readings on Time: Readings on Time",
                "image_url": "https://prabros.com/img/readings-on-time-cover.png",
                "from_url": "https://prabros.com/readings-on-time",
                "image_width": 250,
                "image_height": 250,
                "image_bytes": 662356,
                "id": 1,
                "original_url": "https://prabros.com/readings-on-time"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CZ=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are some branches of research that preserve 'identity'. E.g. see NAMOS/pseudo time from David Reed (1978) and a related work on Virtual Time. Here's a nice collection of links: "
                            },
                            {
                                "type": "link",
                                "url": "https://prabros.com/readings-on-time"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "pray",
                "users": [
                    "U016LEA3J1H",
                    "UA14TGLTC"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "242141af-0a39-43d3-87ef-3446f034ef7f",
        "type": "message",
        "text": "like using Rich's analogy of the people watching a baseball field, i'm more interested in the players playing the baseball game, the ones who have to make decisions and affect outcomes, and they are perceiving data but reacting to it and changing it. for example, what's the programming equivalent of fast twitch muscle fibres vs slow twitch? or pre-game visualization? or 10000 practice swings of a bat? our bodies are extreme examples of perceptors that participate effectively in a highly complex, dynamic situation, i want to build things that can do that",
        "user": "U016LEA3J1H",
        "ts": "1598553911.170100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a+3F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "like using Rich's analogy of the people watching a baseball field, i'm more interested in the players playing the baseball game, the ones who have to make decisions and affect outcomes, and they are perceiving data but reacting to it and changing it. for example, what's the programming equivalent of fast twitch muscle fibres vs slow twitch? or pre-game visualization? or 10000 practice swings of a bat? our bodies are extreme examples of perceptors that participate effectively in a highly complex, dynamic situation, i want to build things that can do that"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "ef67e4b2-0fb8-4e95-8d60-b52aa64e99cc",
        "type": "message",
        "text": "the audience is easy to build, they just eat pretzels and hoot and holler",
        "user": "U016LEA3J1H",
        "ts": "1598553938.170300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NHF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the audience is easy to build, they just eat pretzels and hoot and holler"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UN9SCH5RD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "53ddf3f5-e144-4ba0-8a80-c97da4dcd094",
        "type": "message",
        "text": "So if you look at NAMOS/pseudo time - it doesn't give up the idea of 'objects' or identity and instead of putting the 'timestamp' into one database - a corner of your system - the timestamps are pervasively spread out all across the system (each message carries a timestamp identifiying which 'version' it is from - these are pseudo (virtual) timestamps).",
        "user": "U8A5MS6R1",
        "ts": "1598553950.170500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E+Bm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So if you look at NAMOS/pseudo time - it doesn't give up the idea of 'objects' or identity and instead of putting the 'timestamp' into one database - a corner of your system - the timestamps are pervasively spread out all across the system (each message carries a timestamp identifiying which 'version' it is from - these are pseudo (virtual) timestamps)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "c453e0e5-4f5f-40bc-8589-34bdfd5a2ea4",
        "type": "message",
        "text": "Stateful computations are hard to analyze, for humans or machines, which means they're hard to get correct. Large masses of data are hard to understand. I think this is the basic cause of data phobia to extent it exists, and I don't think it's entirely unreasonable to program in a way that works around it.",
        "user": "U016VUZGUUQ",
        "ts": "1598554273.170700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mp75=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Stateful computations are hard to analyze, for humans or machines, which means they're hard to get correct. Large masses of data are hard to understand. I think this is the basic cause of data phobia to extent it exists, and I don't think it's entirely unreasonable to program in a way that works around it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598534303.161500",
        "parent_user_id": "U016LEA3J1H"
    },
    {
        "client_msg_id": "e822c565-49ae-4afe-b8a6-8cc45013f6bd",
        "type": "message",
        "text": "Yeah. Even if 99% of papers have reproducibility problems, I suspect the graphics papers that the (excellent!) demo link up top uses don't have that problem.\n\nPerhaps we need a separate thread on the academic notion of reproducibility.",
        "user": "UCUSW7WVD",
        "ts": "1598557827.170900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fg0lg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah. Even if 99% of papers have reproducibility problems, I suspect the graphics papers that the (excellent!) demo link up top uses don't have that problem.\n\nPerhaps we need a separate thread on the academic notion of reproducibility."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598125322.060600",
        "parent_user_id": "U01661S9F34",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U01661S9F34"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3bdc9003-c3d4-44bc-bc35-247612c4b447",
        "type": "message",
        "text": "<@U01661S9F34> The terminology around this topic is a mess. There's people who have written articles just on what should be called what, and of course they disagree. That's life.\n\nOne initiative worth mentioning in this context is <https://reproducible-builds.org/>. It's about making (Linux) executables reproducible from source code, so that you can be sure you are actually running the program whose source code you are reading. It's an answer to Ken Thompsons Turing Award speech \"Reflections on trusting trust\" (<https://www.cs.cmu.edu/~rdriley/487/papers/Thompson_1984_ReflectionsonTrustingTrust.pdf>).",
        "user": "UJBAJNFLK",
        "ts": "1598559488.171200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eGd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01661S9F34"
                            },
                            {
                                "type": "text",
                                "text": " The terminology around this topic is a mess. There's people who have written articles just on what should be called what, and of course they disagree. That's life.\n\nOne initiative worth mentioning in this context is "
                            },
                            {
                                "type": "link",
                                "url": "https://reproducible-builds.org/"
                            },
                            {
                                "type": "text",
                                "text": ". It's about making (Linux) executables reproducible from source code, so that you can be sure you are actually running the program whose source code you are reading. It's an answer to Ken Thompsons Turing Award speech \"Reflections on trusting trust\" ("
                            },
                            {
                                "type": "link",
                                "url": "https://www.cs.cmu.edu/~rdriley/487/papers/Thompson_1984_ReflectionsonTrustingTrust.pdf"
                            },
                            {
                                "type": "text",
                                "text": ")."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598125322.060600",
        "parent_user_id": "U01661S9F34",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U01661S9F34",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    }
]