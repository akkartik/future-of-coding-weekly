[
    {
        "client_msg_id": "082f69c9-f364-40ba-b446-adefb80eec93",
        "type": "message",
        "text": "I just stumbled across this article. It left me feeling like I stumbled onto something very profound. It's not directly related to coding, but this article gets at the very core of what this community is about if we are honest. I know my 16-bit processor, assembly language and ultimately the high level language I'm trying to build are me trying to say something, to be consulted about the future of coding. <https://ftrain.com/wwic>",
        "user": "U015902ESJC",
        "ts": "1597103007.378400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "The Web Is a Customer Service Medium (Ftrain.com)",
                "title_link": "https://ftrain.com/wwic",
                "text": "I look forward to your feedback.",
                "fallback": "The Web Is a Customer Service Medium (Ftrain.com)",
                "from_url": "https://ftrain.com/wwic",
                "service_icon": "https://ftrain.com/favicon.ico",
                "service_name": "ftrain.com",
                "id": 1,
                "original_url": "https://ftrain.com/wwic"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z+8VL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just stumbled across this article. It left me feeling like I stumbled onto something very profound. It's not directly related to coding, but this article gets at the very core of what this community is about if we are honest. I know my 16-bit processor, assembly language and ultimately the high level language I'm trying to build are me trying to say something, to be consulted about the future of coding. "
                            },
                            {
                                "type": "link",
                                "url": "https://ftrain.com/wwic"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597103007.378400",
        "reply_count": 7,
        "reply_users_count": 4,
        "latest_reply": "1597185658.423800",
        "reply_users": [
            "UCUSW7WVD",
            "U016VUZGUUQ",
            "U013ZLJARC7",
            "U015902ESJC"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "ULM3U6275",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "810c4a4d-2745-4182-b8ab-ee57f30a505c",
        "type": "message",
        "text": "Wow, this pretty much blew me away. Really aren't far from at least the visual aspects of the holodeck.",
        "user": "U015902ESJC",
        "ts": "1597103509.378600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9eMq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wow, this pretty much blew me away. Really aren't far from at least the visual aspects of the holodeck."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597094873.373200",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "bf07dad3-bc86-4e31-83fb-7cf0fdbe4498",
        "type": "message",
        "text": "Blast from the past! Great article.",
        "user": "UCUSW7WVD",
        "ts": "1597103575.378800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9/Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Blast from the past! Great article."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597103007.378400",
        "parent_user_id": "U015902ESJC"
    },
    {
        "client_msg_id": "0c5511b0-138d-4ecf-a022-d0403771b6fc",
        "type": "message",
        "text": "&gt; \u201cIntense moderation\u201d in a customer service medium is what \u201cediting\u201d was for publishing.\n\nDang, that's good.\n\nI must confess I also loved the part where he called out four sets of programming language zealots in three words.",
        "user": "U016VUZGUUQ",
        "ts": "1597106820.379000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H7vf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> \u201cIntense moderation\u201d in a customer service medium is what \u201cediting\u201d was for publishing.\n\nDang, that's good.\n\nI must confess I also loved the part where he called out four sets of programming language zealots in three words."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597103007.378400",
        "parent_user_id": "U015902ESJC"
    },
    {
        "client_msg_id": "be2e489b-9110-43d7-b61f-fe120627e30d",
        "type": "message",
        "text": "Hmm yeah. Definitely a good start, but its lacking some customizing.",
        "user": "UT9TWSZB5",
        "ts": "1597108513.379200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x6brV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmm yeah. Definitely a good start, but its lacking some customizing."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1596963256.327200",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "6faa766e-5182-40fe-bd42-18d7d287051f",
        "type": "message",
        "text": "I'd really like to build a custom UI inside the component",
        "user": "UT9TWSZB5",
        "ts": "1597108529.379400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z5GKN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd really like to build a custom UI inside the component"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1596963256.327200",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "30f85c57-561f-4488-a314-1be7fdfaf45c",
        "type": "message",
        "text": "<@U013ZLJARC7> To respond to each of your four points:\n\u2022 (folksonomy) My belief that a simple tagging system is inadequate is what led me to make this post. If `#skilled_baker` is an atomic tag, then you can't add qualifiers (extra adjectives) programmatically, unless you feel like playing with string parsing. I feel like qualifiers could be really important in a tag-based programming system: you can use it to organise/sort information *within a specific context* (noun), i.e. you don't pollute the global tag space and thereby risk the accidental inclusion of an entity into some faraway dataset that happened to use the same qualifier. You can use qualifiers to programmatically sort your `#user`s into `#free` `#user`s and `#premium` `#user`s.\n\u2022 (semantic) To me, this is the \"graph view\" of the problem. A graph-based model is an alternative to a tag-based model, in my mind (though some might argue you can combine them or switch between them). Some people are doing graphs, but I'm personally trying to avoid graphs where possible.\n\u2022 (statistical 1) This is about code (inference), not merely data! I think code is an important layer, but we can (and should) keep the layers separate. Code is not a tag, but code can _apply_ tags. That still leaves us with the original question of what the tagging model should be.\n\u2022 (statistical 2) Ditto.",
        "user": "UCGAK10LS",
        "ts": "1597108880.379600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1597116640.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J8tl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " To respond to each of your four points:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "(folksonomy) My belief that a simple tagging system is inadequate is what led me to make this post. If "
                                    },
                                    {
                                        "type": "text",
                                        "text": "#skilled_baker",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " is an atomic tag, then you can't add qualifiers (extra adjectives) programmatically, unless you feel like playing with string parsing. I feel like qualifiers could be really important in a tag-based programming system: you can use it to organise/sort information "
                                    },
                                    {
                                        "type": "text",
                                        "text": "within a specific context ",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "(noun), i.e. you don't pollute the global tag space and thereby risk the accidental inclusion of an entity into some faraway dataset that happened to use the same qualifier. You can use qualifiers to programmatically sort your "
                                    },
                                    {
                                        "type": "text",
                                        "text": "#user",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "s into "
                                    },
                                    {
                                        "type": "text",
                                        "text": "#free",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    },
                                    {
                                        "type": "text",
                                        "text": "#user",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "s and "
                                    },
                                    {
                                        "type": "text",
                                        "text": "#premium",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    },
                                    {
                                        "type": "text",
                                        "text": "#user",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "s."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "(semantic) To me, this is the \"graph view\" of the problem. A graph-based model is an alternative to a tag-based model, in my mind (though some might argue you can combine them or switch between them). Some people are doing graphs, but I'm personally trying to avoid graphs where possible."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "(statistical 1) This is about code (inference), not merely data! I think code is an important layer, but we can (and should) keep the layers separate. Code is not a tag, but code can "
                                    },
                                    {
                                        "type": "text",
                                        "text": "apply",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " tags. That still leaves us with the original question of what the tagging model should be."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "(statistical 2) Ditto."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1597061810.364800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "14f2726d-94bd-4f77-a1f7-dc825389ecfd",
        "type": "message",
        "text": "<@U5STGTB3J> In linguistics, I'm hoping to better understand the means by which we classify, qualify, and describe (etc.) things using natural language, and determine whether it is possible and useful to construct a *simplified* and *reduced* version of that as a means to classify, qualify, and describe *digital* information.\n\nAs I said, this is all for the purpose of finding, to the degree possible, \"an ideal model for information\".",
        "user": "UCGAK10LS",
        "ts": "1597109251.379900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1597109291.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3HF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " In linguistics, I'm hoping to better understand the means by which we classify, qualify, and describe (etc.) things using natural language, and determine whether it is possible and useful to construct a "
                            },
                            {
                                "type": "text",
                                "text": "simplified",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "reduced ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "version of that as a means to classify, qualify, and describe "
                            },
                            {
                                "type": "text",
                                "text": "digital ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "information.\n\nAs I said, this is all for the purpose of finding, to the degree possible, \"an ideal model for information\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597061810.364800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "fb8b2d6b-9dc1-4d25-9a77-2dd450959744",
        "type": "message",
        "text": "<@U015902ESJC> I didn't mention it in my original post, but I'm focused on an information model for a user to *develop* *programs* within, such that they can easily understand how program data is organised and manipulated.\n\nI'm not looking for a \"machine-readable\" information model to be used as an input for AI. I think that was the problem of the whole \"semantic web\" thing: it was about AI, and AI isn't easy.",
        "user": "UCGAK10LS",
        "ts": "1597109800.380200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1597128554.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yYX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U015902ESJC"
                            },
                            {
                                "type": "text",
                                "text": " I didn't mention it in my original post, but I'm focused on an information model for a user to "
                            },
                            {
                                "type": "text",
                                "text": "develop",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "programs",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " within, such that they can easily understand how program data is organised and manipulated.\n\nI'm not looking for a \"machine-readable\" information model to be used as an input for AI. I think that was the problem of the whole \"semantic web\" thing: it was about AI, and AI isn't easy."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597061810.364800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "4185F91F-7BA9-499E-BD07-7CD1F6BEE6CD",
        "type": "message",
        "text": "<https://twitter.com/workingdog_/status/1292940516548640774?s=21|https://twitter.com/workingdog_/status/1292940516548640774?s=21> this thread, i think, points to what we lose when our systems and databases aren\u2019t modifiable by everyday users. it\u2019s about the diversity of human experience, and a love of pen and paper, but i think the most important thing to note about the way pen and paper gets talked about here is that the people filling out the forms are free to scratch things out and file reasonable requests and modify things as really existing people and events shake up the ontologies of the processes they are tasked with using",
        "user": "UHWC9PXBL",
        "ts": "1597115964.384500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/workingdog_|@workingdog_>: When you work in civil service, social services, or even just bureaucracy, you just become very aware of the vast diversity of experiences and life circumstances that exist in the world and how you have to adjust your systems to accommodate.",
                "ts": 1597096015,
                "author_name": "Shel\ud83d\udc36\ud83d\udc3e",
                "author_link": "https://twitter.com/workingdog_/status/1292940516548640774",
                "author_icon": "https://pbs.twimg.com/profile_images/1232186813403607040/8vybFnmm_normal.jpg",
                "author_subname": "@workingdog_",
                "text": "When you work in civil service, social services, or even just bureaucracy, you just become very aware of the vast diversity of experiences and life circumstances that exist in the world and how you have to adjust your systems to accommodate.",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/workingdog_/status/1292940516548640774?s=21",
                "id": 1,
                "original_url": "https://twitter.com/workingdog_/status/1292940516548640774?s=21",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GBp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://twitter.com/workingdog_/status/1292940516548640774?s=21",
                                "text": "https://twitter.com/workingdog_/status/1292940516548640774?s=21"
                            },
                            {
                                "type": "text",
                                "text": " this thread, i think, points to what we lose when our systems and databases aren\u2019t modifiable by everyday users. it\u2019s about the diversity of human experience, and a love of pen and paper, but i think the most important thing to note about the way pen and paper gets talked about here is that the people filling out the forms are free to scratch things out and file reasonable requests and modify things as really existing people and events shake up the ontologies of the processes they are tasked with using"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597115964.384500",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1597142731.394800",
        "reply_users": [
            "UCUSW7WVD",
            "USL4R0T61",
            "UHWC9PXBL"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UETJZ9V0T",
                    "UDQBTJ211",
                    "ULK0Z4MPV"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "4a3a740d-c1d1-4c71-b184-43641d9eb1cc",
        "type": "message",
        "text": "On the flip side, it rarely works out for me to scratch out a field on a form. And I've done forms on paper a good amount. Somehow the database schema doesn't feel like the bottleneck in dealing with bureaucracies.\n\nI'll certainly cop to computers perpetuating existing power structures, but it feels a bit much to claim things were all kumbaya before them.",
        "user": "UCUSW7WVD",
        "ts": "1597117229.384800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g6H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On the flip side, it rarely works out for me to scratch out a field on a form. And I've done forms on paper a good amount. Somehow the database schema doesn't feel like the bottleneck in dealing with bureaucracies.\n\nI'll certainly cop to computers perpetuating existing power structures, but it feels a bit much to claim things were all kumbaya before them."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597115964.384500",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "85f5b045-841c-4b2e-9182-90b0c22cd88e",
        "type": "message",
        "text": "Great lateral thought to apply this to the world of databases! At the very least it is another case-in-point for the importance of \"localism\" for administrative purposes. Some of the best shelters I know of really typify this.",
        "user": "USL4R0T61",
        "ts": "1597120818.385100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tvJvO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great lateral thought to apply this to the world of databases! At the very least it is another case-in-point for the importance of \"localism\" for administrative purposes. Some of the best shelters I know of really typify this."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597115964.384500",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "f1f5d067-36ba-4dd5-a125-d7996f9e84cb",
        "type": "message",
        "text": "More commonly I have mutually exclusive tags (states really).  Like, I don't know: #one_star, #two_star, #three_star.",
        "user": "UA14TGLTC",
        "ts": "1597123729.385400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wuuk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "More commonly I have mutually exclusive tags (states really).  Like, I don't know: #one_star, #two_star, #three_star."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597061810.364800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "131d9a3b-2b26-4f51-b8c7-a877faff10cf",
        "type": "message",
        "text": "<@UC2A2ARPT> Got to love the hacks!",
        "user": "UA14TGLTC",
        "ts": "1597123785.385700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M/JJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " Got to love the hacks!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597094873.373200",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "02aad019-0efb-4bff-ae7c-7aa2c9fcf0e1",
        "type": "message",
        "text": "I haven\u2019t shown this before, but I figured that it might be interesting to this group. For 2 years I was the tech lead on a robotics visualization tool called Webviz (I\u2019ve moved to a different team now though). Not really looking for feedback since the intended audience is robotics engineers, and the onboarding experience is.. super rough. :sweat_smile: But we can get away with that since it\u2019s incredibly useful; it\u2019s the most used internal tool at our company. Which goes to show how important interactive programming visualizations are \u2014 especially in a complex domain like robotics! Anyway, figured some of you might find this interesting. Happy to answer any questions. <https://webviz.io/>",
        "user": "UCUNN529Y",
        "ts": "1597124964.388700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "webviz",
                "title_link": "https://webviz.io/",
                "text": "Visualizing robotics data in the browser",
                "fallback": "webviz",
                "image_url": "https://open-source-webviz-ui.s3-us-west-2.amazonaws.com/landing/og-image.png",
                "from_url": "https://webviz.io/",
                "image_width": 431,
                "image_height": 250,
                "image_bytes": 280448,
                "service_icon": "https://webviz.io/favicon.ico",
                "service_name": "webviz.io",
                "id": 1,
                "original_url": "https://webviz.io/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9Egrd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I haven\u2019t shown this before, but I figured that it might be interesting to this group. For 2 years I was the tech lead on a robotics visualization tool called Webviz (I\u2019ve moved to a different team now though). Not really looking for feedback since the intended audience is robotics engineers, and the onboarding experience is.. super rough. "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile"
                            },
                            {
                                "type": "text",
                                "text": " But we can get away with that since it\u2019s incredibly useful; it\u2019s the most used internal tool at our company. Which goes to show how important interactive programming visualizations are \u2014 especially in a complex domain like robotics! Anyway, figured some of you might find this interesting. Happy to answer any questions. "
                            },
                            {
                                "type": "link",
                                "url": "https://webviz.io/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597124964.388700",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1597125189.388900",
        "reply_users": [
            "UCUNN529Y"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UKP3B2J5D",
                    "U013HU44GLS"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "748ed7ee-e80c-4c4c-977f-8d48eaf331e0",
        "type": "message",
        "text": "Also there\u2019s an article with some more background: <https://medium.com/cruise/webviz-fb5f77ebe52b>",
        "user": "UCUNN529Y",
        "ts": "1597125189.388900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUNN529Y",
            "ts": "1597125198.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rDk0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also there\u2019s an article with some more background: "
                            },
                            {
                                "type": "link",
                                "url": "https://medium.com/cruise/webviz-fb5f77ebe52b"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597124964.388700",
        "parent_user_id": "UCUNN529Y"
    },
    {
        "client_msg_id": "9222fbc4-c85a-460a-b7cb-605686eed885",
        "type": "message",
        "text": "<@UCGAK10LS> Tags are also a graph, just with a constrained set of semantics. Code is data and vice versa. <@U016VUZGUUQ>\u2019s observation that \"logic is what you want\" isn't wrong, but it's worth remembering that logic and language are co-travelers -- both spandrels evolved to serialize graph-structured human internals for transmission to other humans. If you follow linguistics -&gt; logics to tease out the meaning of the transmissions, you end up with First Order Logic-based knowledge representation systems, like -- as <@U015902ESJC> said -- the semantic web stack.",
        "user": "U013ZLJARC7",
        "ts": "1597127858.389300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U013ZLJARC7",
            "ts": "1597128246.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FC3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " Tags are also a graph, just with a constrained set of semantics. Code is data and vice versa. "
                            },
                            {
                                "type": "user",
                                "user_id": "U016VUZGUUQ"
                            },
                            {
                                "type": "text",
                                "text": "\u2019s observation that \"logic is what you want\" isn't wrong, but it's worth remembering that logic and language are co-travelers -- both spandrels evolved to serialize graph-structured human internals for transmission to other humans. If you follow linguistics -> logics to tease out the meaning of the transmissions, you end up with First Order Logic-based knowledge representation systems, like -- as "
                            },
                            {
                                "type": "user",
                                "user_id": "U015902ESJC"
                            },
                            {
                                "type": "text",
                                "text": " said -- the semantic web stack."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597061810.364800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "0eb370d6-e4b0-4dba-8882-ab8f84ccdbea",
        "type": "message",
        "text": "Paul's an old dear friend. If you enjoyed that one, don't miss: <https://www.bloomberg.com/graphics/2015-paul-ford-what-is-code/>",
        "user": "U013ZLJARC7",
        "ts": "1597128400.390100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Bloomberg.com",
                "title": "What Is Code? If You Don't Know, You Need to Read This",
                "title_link": "https://www.bloomberg.com/graphics/2015-paul-ford-what-is-code/",
                "text": "The world belongs to people who code. Those who don\u2019t understand will be left behind.",
                "fallback": "Bloomberg.com: What Is Code? If You Don't Know, You Need to Read This",
                "image_url": "http://www.bloomberg.com/graphics/2015-paul-ford-what-is-code/images/promo.jpg",
                "from_url": "https://www.bloomberg.com/graphics/2015-paul-ford-what-is-code/",
                "image_width": 333,
                "image_height": 250,
                "image_bytes": 307253,
                "id": 1,
                "original_url": "https://www.bloomberg.com/graphics/2015-paul-ford-what-is-code/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A58",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Paul's an old dear friend. If you enjoyed that one, don't miss: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.bloomberg.com/graphics/2015-paul-ford-what-is-code/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597103007.378400",
        "parent_user_id": "U015902ESJC"
    },
    {
        "client_msg_id": "9e1d9921-357d-4855-ac3e-9572f47be9c3",
        "type": "message",
        "text": "<@U013ZLJARC7> I think we should be careful in uses of the word \"are\" and \"is\" when comparing concepts. It often sweeps away deeper understandings. Saying \"tags are a graph\" irks me, because a graph is defined as a set of nodes and edges (perhaps with attributes), and tags obviously aren't defined in terms of the same concepts. So perhaps the true relationship to be illuminated is: graphs can model anything that tags can model, i.e. graphs are a strictly more powerful model? This seems true when by \"tag\" we mean a traditional tagging system (hash tags), but that doesn't mean that *all conceivable* tagging/annotation systems are strictly less powerful than graphs. I'm worried that graphs are a conceptual cage that, once you've committed to thinking in terms of them, deny you the ability to discover new models.",
        "user": "UCGAK10LS",
        "ts": "1597129602.390500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1597129654.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ft2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " I think we should be careful in uses of the word \"are\" and \"is\" when comparing concepts. It often sweeps away deeper understandings. Saying \"tags are a graph\" irks me, because a graph is defined as a set of nodes and edges (perhaps with attributes), and tags obviously aren't defined in terms of the same concepts. So perhaps the true relationship to be illuminated is: graphs can model anything that tags can model, i.e. graphs are a strictly more powerful model? This seems true when by \"tag\" we mean a traditional tagging system (hash tags), but that doesn't mean that "
                            },
                            {
                                "type": "text",
                                "text": "all conceivable",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " tagging/annotation systems are strictly less powerful than graphs. I'm worried that graphs are a conceptual cage that, once you've committed to thinking in terms of them, deny you the ability to discover new models."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597061810.364800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "30809ba1-e921-4e33-a8bc-40b16ae391be",
        "type": "message",
        "text": "Of course if you find something more powerful than graphs, you could then extend the definition of a graph, adding new \"features\" until it reaches power parity, but at that point you've bent and distorted the original definition (of which there are already many variants). So it might not hurt to just start from a clean state, rather than bolt on new features to an old model.",
        "user": "UCGAK10LS",
        "ts": "1597130062.390800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ym2X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Of course if you find something more powerful than graphs, you could then extend the definition of a graph, adding new \"features\" until it reaches power parity, but at that point you've bent and distorted the original definition (of which there are already many variants). So it might not hurt to just start from a clean state, rather than bolt on new features to an old model."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597061810.364800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "dad00703-b2b8-4cf0-80c6-c0f15a112dbe",
        "type": "message",
        "text": "Also invented the tilde movement, iirc.",
        "user": "UCUSW7WVD",
        "ts": "1597130332.391000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j5wYN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also invented the tilde movement, iirc."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597103007.378400",
        "parent_user_id": "U015902ESJC",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "2b21f68b-5aa7-4155-b059-c584adaa4374",
        "type": "message",
        "text": "<@U016VUZGUUQ> <@U013ZLJARC7> Yes, predicate logic is relevant, but the answer obviously isn't \"just use logic\". If it were, then we would already have found an ideal information model and/or programming language decades ago. Original ideas are needed. I spent a few years trying to do exactly as you suggest: take *existing* concepts/models/theories and just apply and combine them in the right way. But it's never worked out. Mathematicians *invented* predicate logic, and they *invented* graph theory. For my project I'm taking these ideas as inspiration but I truly think I need to *invent* a new model, which will obviously have some relationship/mapping to old ones.",
        "user": "UCGAK10LS",
        "ts": "1597130483.391200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SpE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016VUZGUUQ"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " Yes, predicate logic is relevant, but the answer obviously isn't \"just use logic\". If it were, then we would already have found an ideal information model and/or programming language decades ago. Original ideas are needed. I spent a few years trying to do exactly as you suggest: take "
                            },
                            {
                                "type": "text",
                                "text": "existing",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " concepts/models/theories and just apply and combine them in the right way. But it's never worked out. Mathematicians "
                            },
                            {
                                "type": "text",
                                "text": "invented",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " predicate logic, and they "
                            },
                            {
                                "type": "text",
                                "text": "invented",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " graph theory. For my project I'm taking these ideas as inspiration but I truly think I need to "
                            },
                            {
                                "type": "text",
                                "text": "invent",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a new model, which will obviously have some relationship/mapping to old ones."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597061810.364800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "e996308e-b4a4-4b10-afd8-173e5d763dd6",
        "type": "message",
        "text": "<@UCGAK10LS> Seems like we're thinking about similar things \u2014 would love to hear/read more about your project.\n\nI went down the linguistics route (I'm two years in now), and as much as I'm happy to find people interested in it, from the previous discussion I can only sense that it would be more of a distraction for you than it would actually help. What you seem to be looking for is what linguists and cognitive scientists call \"categorization\". When I found out about it, I was shocked how much linguists ask the same questions we ask when we try to design a good data model.\n\nIf you stay on the \"classic\" generative linguistics path (Chomsky et al.), you'd better get extremely comfortable around hierarchies and taxonomies. It seems most of the work here in the last few decades is basically trying to fit into the classic models what we learn about how the brain works, which more and more diverts from what can be meaningfully expressed with those models that are primarily based on set theory, perhaps with some fuzzy logic applied to it. It looks a lot like the frustration you voiced earlier \u2014 we can make it work by stretching the current models and making them much more complex, but it's everything but satisfying.\n\nThere are linguists who realized that and who went looking for new approaches. I've been looking deeply into cognitive linguistics and think that's a great field to look at for inspiration. There's Rosch's prototype theory, which is still pretty close to classic categorization with a little bit of fuzzy logic sprinkled in, but that's just the gateway drug into metaphorical structuring and image schemas, and then all your set-theory based logic goes out the window, and you're left with embodied cognition and stuff that is way too ambiguous for what we'd like for static modeling. It seems you have extremely specific use cases in mind, and so I don't feel good about recommending you look into this.\n\nWhen you say you're looking for more powerful models, _\"something more powerful than graphs\"_, I wonder what that means to you?\n\nIf you want more flexibility in modeling, you need to take into account that this always comes in the form of trade-offs. Mathematics has this pretty much figured out though. If you look at algebraic structures you can pick one with few rules, which gives you a lot of flexibility of what you can model with them, but then you can't do much with these models \u2014 if you can't make any assumptions about structure, you can't run algorithms against it. And you will see that graphs are already pretty high up there in terms of flexibility, but to do anything useful with them, you'd have to look at slightly more restrictive (semi-)lattices or\u2026 tada\u2026 trees again. There's a reason why almost anything can be represented as a graph. Look at Category Theory as an extreme (not to be confused with the \"categories\" from above). I guess that's the only branch left that qualifies as \"more powerful than graphs\", but then all its useful applications are only useful once you pull them back down into the land of graphs, sets, and trees.\n\nI'm currently working under the assumption that \"a better model\" doesn't exist, or at least that I'm certainly not clever enough to invent it, and that the models we have are more than what's needed for progress \u2014 the problem is just that we need different models at different times. That's why I'm betting on homomorphic representations and (bi-directional) transformations between them to solve some of the problems of static models that lack the flexibility we need to model dynamic systems.",
        "user": "U5STGTB3J",
        "ts": "1597138886.391800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/yxWO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " Seems like we're thinking about similar things \u2014 would love to hear/read more about your project.\n\nI went down the linguistics route (I'm two years in now), and as much as I'm happy to find people interested in it, from the previous discussion I can only sense that it would be more of a distraction for you than it would actually help. What you seem to be looking for is what linguists and cognitive scientists call \"categorization\". When I found out about it, I was shocked how much linguists ask the same questions we ask when we try to design a good data model.\n\nIf you stay on the \"classic\" generative linguistics path (Chomsky et al.), you'd better get extremely comfortable around hierarchies and taxonomies. It seems most of the work here in the last few decades is basically trying to fit into the classic models what we learn about how the brain works, which more and more diverts from what can be meaningfully expressed with those models that are primarily based on set theory, perhaps with some fuzzy logic applied to it. It looks a lot like the frustration you voiced earlier \u2014 we can make it work by stretching the current models and making them much more complex, but it's everything but satisfying.\n\nThere are linguists who realized that and who went looking for new approaches. I've been looking deeply into cognitive linguistics and think that's a great field to look at for inspiration. There's Rosch's prototype theory, which is still pretty close to classic categorization with a little bit of fuzzy logic sprinkled in, but that's just the gateway drug into metaphorical structuring and image schemas, and then all your set-theory based logic goes out the window, and you're left with embodied cognition and stuff that is way too ambiguous for what we'd like for static modeling. It seems you have extremely specific use cases in mind, and so I don't feel good about recommending you look into this.\n\nWhen you say you're looking for more powerful models, "
                            },
                            {
                                "type": "text",
                                "text": "\"something more powerful than graphs\"",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", I wonder what that means to you?\n\nIf you want more flexibility in modeling, you need to take into account that this always comes in the form of trade-offs. Mathematics has this pretty much figured out though. If you look at algebraic structures you can pick one with few rules, which gives you a lot of flexibility of what you can model with them, but then you can't do much with these models \u2014 if you can't make any assumptions about structure, you can't run algorithms against it. And you will see that graphs are already pretty high up there in terms of flexibility, but to do anything useful with them, you'd have to look at slightly more restrictive (semi-)lattices or\u2026 tada\u2026 trees again. There's a reason why almost anything can be represented as a graph. Look at Category Theory as an extreme (not to be confused with the \"categories\" from above). I guess that's the only branch left that qualifies as \"more powerful than graphs\", but then all its useful applications are only useful once you pull them back down into the land of graphs, sets, and trees.\n\nI'm currently working under the assumption that \"a better model\" doesn't exist, or at least that I'm certainly not clever enough to invent it, and that the models we have are more than what's needed for progress \u2014 the problem is just that we need different models at different times. That's why I'm betting on homomorphic representations and (bi-directional) transformations between them to solve some of the problems of static models that lack the flexibility we need to model dynamic systems."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597061810.364800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "f8cc8864-4d33-46ef-b31f-03200d1d9e70",
        "type": "message",
        "text": "<@U5STGTB3J> My project is an enormous soup of concepts, each sitting somewhere on an axis of acceptance/rejection, understanding/ignorance, and integration/isolation (from other concepts). I've been spending a few years (first casually, but now seriously) mapping out what the \"ideal programming system\" might look like, and some aspects (like a model for code/change/time/distribution) are starting to become clear, but fundamental aspects like the structure of information are still unclear. I've been saying for a long while that I will write a blog post when a sufficient fraction of my project crystallises, but until then I'm just going to keep churning on ideas. Essentially, I need to understand enough that I can build a non-trivial prototype. It's hard to do that without an information model!\n\nI'm not willing to believe that linguistics is a distraction yet. I'm only interested in the *basics*: I guess I want to understand what *word classes,* *syntax,* and *grammar* from a natural language might be useful as a basis for describing and manipulating the type of information found within a programming system. I probably don't want to go much further down the rabbit hole.\n\nBy \"more powerful model\", I mean *giving power to the programmer*. I mean a model that makes it *easy* to express the things that a programmer might want to express, i.e. being _possible_ is not enough. It's _possible_ to model anything with a (souped-up) graph, I'm sure, but that doesn't help much.\n\nI definitely think a better model exists. As I said before, the models we know about today were just *invented* by some creative people a few decades or centuries ago, usually as a tool to explore a particular domain. Nobody _discovered_ graph theory in the Amazon rainforest or on the surface of Venus. There _are_ some fundamental patterns that result from the physical laws of our universe (e.g. as reified in geometry), but the models we build around these patterns are typically layered with additional constraints. We have a new domain now: programming, and I think it's very possible to invent new models which are appropriate for the domain.",
        "user": "UCGAK10LS",
        "ts": "1597140951.392000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1597141634.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O419",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " My project is an enormous soup of concepts, each sitting somewhere on an axis of acceptance/rejection, understanding/ignorance, and integration/isolation (from other concepts). I've been spending a few years (first casually, but now seriously) mapping out what the \"ideal programming system\" might look like, and some aspects (like a model for code/change/time/distribution) are starting to become clear, but fundamental aspects like the structure of information are still unclear. I've been saying for a long while that I will write a blog post when a sufficient fraction of my project crystallises, but until then I'm just going to keep churning on ideas. Essentially, I need to understand enough that I can build a non-trivial prototype. It's hard to do that without an information model!\n\nI'm not willing to believe that linguistics is a distraction yet. I'm only interested in the "
                            },
                            {
                                "type": "text",
                                "text": "basics",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": I guess I want to understand what "
                            },
                            {
                                "type": "text",
                                "text": "word classes,",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "syntax, ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "and "
                            },
                            {
                                "type": "text",
                                "text": "grammar",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " from a natural language might be useful as a basis for describing and manipulating the type of information found within a programming system. I probably don't want to go much further down the rabbit hole.\n\nBy \"more powerful model\", I mean "
                            },
                            {
                                "type": "text",
                                "text": "giving power to the programmer",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". I mean a model that makes it "
                            },
                            {
                                "type": "text",
                                "text": "easy",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to express the things that a programmer might want to express, i.e. being "
                            },
                            {
                                "type": "text",
                                "text": "possible",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is not enough. It's "
                            },
                            {
                                "type": "text",
                                "text": "possible",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to model anything with a (souped-up) graph, I'm sure, but that doesn't help much.\n\nI definitely think a better model exists. As I said before, the models we know about today were just "
                            },
                            {
                                "type": "text",
                                "text": "invented",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " by some creative people a few decades or centuries ago, usually as a tool to explore a particular domain. Nobody "
                            },
                            {
                                "type": "text",
                                "text": "discovered",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " graph theory in the Amazon rainforest or on the surface of Venus. There "
                            },
                            {
                                "type": "text",
                                "text": "are",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " some fundamental patterns that result from the physical laws of our universe (e.g. as reified in geometry), but the models we build around these patterns are typically layered with additional constraints. We have a new domain now: programming, and I think it's very possible to invent new models which are appropriate for the domain."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597061810.364800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "9d97657a-5916-4698-8b98-f4b3d998c2bf",
        "type": "message",
        "text": "I'm believing more and more that \"fixed mindsets\" are endemic in 21st century Western society \u2014 there is a disappointingly low threshold for what we are willing to accept can be newly created. We're willing to accept that we can create new dinner recipes, music, apps, programming languages, etc, but we're not willing to accept we can invent fundamentally new and groundbreaking things, especially foundational models (see: the mess that is modern physics). Besides the domain-specific knowledge required, what\u2019s the difference? Reminds me of Peter Thiel's thesis on Western society's recent inability to invent new technologies.\n\nI've definitely been trapped in fixed mindsets myself. The hardest part is noticing the illusory walls, and the next-hardest part is figuring out an alternative.",
        "user": "UCGAK10LS",
        "ts": "1597141232.392200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1597154866.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dIUg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm believing more and more that \"fixed mindsets\" are endemic in 21st century Western society \u2014 there is a disappointingly low threshold for what we are willing to accept can be newly created. We're willing to accept that we can create new dinner recipes, music, apps, programming languages, etc, but we're not willing to accept we can invent fundamentally new and groundbreaking things, especially foundational models (see: the mess that is modern physics). Besides the domain-specific knowledge required, what\u2019s the difference? Reminds me of Peter Thiel's thesis on Western society's recent inability to invent new technologies.\n\nI've definitely been trapped in fixed mindsets myself. The hardest part is noticing the illusory walls, and the next-hardest part is figuring out an alternative."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597061810.364800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "0F532071-EDFE-4F18-AC24-B8E8D4C4DC03",
        "type": "message",
        "text": "<@UCUSW7WVD> definitely not my intention to argue in support of bureaucracies\u2014just pointing out that you can get a lot of leeway forced into a system when users know in their hands that they can change it",
        "user": "UHWC9PXBL",
        "ts": "1597142731.394800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jGi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " definitely not my intention to argue in support of bureaucracies\u2014just pointing out that you can get a lot of leeway forced into a system when users know in their hands that they can change it"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597115964.384500",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "U014WA16VNJ"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "92596a5c-c2c6-46f0-af3c-f5d837a9248e",
        "type": "message",
        "text": "This is definitely a tricky thing to balance, and I have not yet seen what I would consider a \"great\" answer. For my own projects of this shape, I am planning to use an open, self-hostable model, as I think it's critical for user control to be able to host it all yourself if you want. A subset of premium features would rely on a hosted service, which people could pay for or host themselves.\n\nHere are some useful resources related to this:\n\n* Social vs. market norms: <https://github.com/feross/funding/issues/11#issuecomment-524609870>\n* Premium features: <https://agenda.community/t/get-all-features/21>",
        "user": "UML4ZEKDK",
        "ts": "1597144946.395500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UML4ZEKDK",
            "ts": "1597145161.000000"
        },
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "What do we want Open Source to look like in 10 years? \u00b7 Issue #11 \u00b7 feross/funding",
                "title_link": "https://github.com/feross/funding/issues/11#issuecomment-524609870",
                "text": "Ok, so we&amp;#39;ve talked about what&amp;#39;s wrong with open source, but what is it that we love, and what are we aspiring to. A lot of the anger about this module is coupled deeply to values many of u...",
                "fallback": "GitHub: What do we want Open Source to look like in 10 years? \u00b7 Issue #11 \u00b7 feross/funding",
                "thumb_url": "https://avatars1.githubusercontent.com/u/121766?s=400&v=4",
                "from_url": "https://github.com/feross/funding/issues/11#issuecomment-524609870",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/feross/funding/issues/11#issuecomment-524609870"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1PW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is definitely a tricky thing to balance, and I have not yet seen what I would consider a \"great\" answer. For my own projects of this shape, I am planning to use an open, self-hostable model, as I think it's critical for user control to be able to host it all yourself if you want. A subset of premium features would rely on a hosted service, which people could pay for or host themselves.\n\nHere are some useful resources related to this:\n\n* Social vs. market norms: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/feross/funding/issues/11#issuecomment-524609870"
                            },
                            {
                                "type": "text",
                                "text": "\n* Premium features: "
                            },
                            {
                                "type": "link",
                                "url": "https://agenda.community/t/get-all-features/21"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1596907862.313700",
        "parent_user_id": "UNBPP291C"
    },
    {
        "client_msg_id": "5306583d-9477-41ec-998f-acd44411912d",
        "type": "message",
        "text": "what's the future of error handling?",
        "user": "UBN9AFS0N",
        "ts": "1597151841.396200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CcDGg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "what's the future of error handling?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "reply_count": 22,
        "reply_users_count": 8,
        "latest_reply": "1597173427.421400",
        "reply_users": [
            "UGYGY18UX",
            "UHWC9PXBL",
            "UBN9AFS0N",
            "UA14TGLTC",
            "UE6EFEPTQ",
            "UCUSW7WVD",
            "UJFN50C00",
            "U016VUZGUUQ"
        ],
        "subscribed": true,
        "last_read": "1597173427.421400",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UKP3B2J5D",
                    "UHWC9PXBL",
                    "U014WA16VNJ"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "D4CCED8F-2390-4F32-9958-797DBD34B97B",
        "type": "message",
        "text": "<@UA14TGLTC> It's the 8-frame amount latency, specifically, that caught my attention. That's a lot of lag. Between that and the LED pixel pitch forcing them to shoot soft, it seems like they still would need to digitally replace the background in post. It makes me wonder if they'll ever not need to replace the background.",
        "user": "UC2A2ARPT",
        "ts": "1597151998.399700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1597170391.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z=S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " It's the 8-frame amount latency, specifically, that caught my attention. That's a lot of lag. Between that and the LED pixel pitch forcing them to shoot soft, it seems like they still would need to digitally replace the background in post. It makes me wonder if they'll ever not need to replace the background."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597094873.373200",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "351BAB4E-17F3-4111-ABE2-3CB804C7FABA",
        "type": "message",
        "text": "<https://www.tandfonline.com/doi/abs/10.1207/s15326985ep4102_1|https://www.tandfonline.com/doi/abs/10.1207/s15326985ep4102_1> ",
        "user": "UKP3B2J5D",
        "ts": "1597152062.400000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yo73B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.tandfonline.com/doi/abs/10.1207/s15326985ep4102_1",
                                "text": "https://www.tandfonline.com/doi/abs/10.1207/s15326985ep4102_1"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1596966732.340700",
        "parent_user_id": "UKP3B2J5D"
    },
    {
        "client_msg_id": "89447723-252D-40C7-8979-5579A4B1E52C",
        "type": "message",
        "text": "<https://www.usenix.org/legacy/events/sec99/full_papers/whitten/whitten_html/index.html|https://www.usenix.org/legacy/events/sec99/full_papers/whitten/whitten_html/index.html> this was about how a new field usable security came to be. The point being that, it\u2019s not just about stuff technically working it\u2019s about making sure it usable. People in security used to be like if it\u2019s not cryptography it doesn\u2019t belong. ",
        "user": "UKP3B2J5D",
        "ts": "1597152156.402100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d51",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.usenix.org/legacy/events/sec99/full_papers/whitten/whitten_html/index.html",
                                "text": "https://www.usenix.org/legacy/events/sec99/full_papers/whitten/whitten_html/index.html"
                            },
                            {
                                "type": "text",
                                "text": " this was about how a new field usable security came to be. The point being that, it\u2019s not just about stuff technically working it\u2019s about making sure it usable. People in security used to be like if it\u2019s not cryptography it doesn\u2019t belong. "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1596966732.340700",
        "parent_user_id": "UKP3B2J5D"
    },
    {
        "client_msg_id": "FEDA713F-9B71-4AB3-B3C2-E60117342E26",
        "type": "message",
        "text": "<https://cs.brown.edu/~sk/Publications/Papers/Published/tgpk-beh-grad-types-user-study/paper.pdf|https://cs.brown.edu/~sk/Publications/Papers/Published/tgpk-beh-grad-types-user-study/paper.pdf>",
        "user": "UKP3B2J5D",
        "ts": "1597152169.402400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F=Lu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://cs.brown.edu/~sk/Publications/Papers/Published/tgpk-beh-grad-types-user-study/paper.pdf",
                                "text": "https://cs.brown.edu/~sk/Publications/Papers/Published/tgpk-beh-grad-types-user-study/paper.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1596966732.340700",
        "parent_user_id": "UKP3B2J5D"
    },
    {
        "client_msg_id": "ACAF6017-7825-44B2-BBAF-73C9A11AB627",
        "type": "message",
        "text": "<https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/excel-1.pdf|https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/excel-1.pdf>",
        "user": "UKP3B2J5D",
        "ts": "1597152176.402700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3Ss",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/excel-1.pdf",
                                "text": "https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/excel-1.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1596966732.340700",
        "parent_user_id": "UKP3B2J5D"
    },
    {
        "client_msg_id": "56DCDDA3-0371-4F7B-BC85-B531AB212BFB",
        "type": "message",
        "text": "Sorry just got to these are the ones that are still my browser tab :slightly_smiling_face:.",
        "user": "UKP3B2J5D",
        "ts": "1597152306.404000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "elL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sorry just got to these are the ones that are still my browser tab "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1596966732.340700",
        "parent_user_id": "UKP3B2J5D"
    },
    {
        "client_msg_id": "DFEF8BC3-CA5B-4BDD-9AB7-0F7B2438EA4C",
        "type": "message",
        "text": "And yeah, one of the biggest problem is that papers are under a firewall (I know scihub I know :) ) but it meant I closed some links cos I could be bothered to check. TMI already ",
        "user": "UKP3B2J5D",
        "ts": "1597152384.405600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O57hI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And yeah, one of the biggest problem is that papers are under a firewall (I know scihub I know :) ) but it meant I closed some links cos I could be bothered to check. TMI already "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1596966732.340700",
        "parent_user_id": "UKP3B2J5D"
    },
    {
        "client_msg_id": "A0EC64EB-E15D-4204-B2AD-140393779D95",
        "type": "message",
        "text": "<https://link.springer.com/article/10.1007/s101110050034|https://link.springer.com/article/10.1007/s101110050034>",
        "user": "UKP3B2J5D",
        "ts": "1597152393.405900",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Cognition, Technology &amp; Work",
                "title": "Extra-Ordinary Human\u2013Machine Interaction: What can be Learned from People with Disabilities?",
                "title_link": "https://link.springer.com/article/10.1007/s101110050034",
                "text": "When specifying, designing and implementing technology for work, it is very important to consider the whole of the potential user group, and not to forget that this might include people with disabilities. Obvious reasons for this are demography, disabled people forming a significant and growing proportion of the workforce, and legal obligations caused by equal opportunities legislation. There are more subtle reasons, however, which link so-called \u2018disabled people\u2019 with the rest of the population. The paper notes that most people have some disabilities, sometimes temporarily due to accident, or permanently due to ageing and other processes. In addition it notes that even otherwise fully functioning people can be seriously handicapped by hostile environments, and a parallel is drawn between the human interface needs of disabled people operating in ordinary situations and able-bodied people operating in high workload and stress situations. The paper concludes by suggesting a research agenda for the field on the basis of these considerations.",
                "fallback": "Cognition, Technology &amp; Work: Extra-Ordinary Human\u2013Machine Interaction: What can be Learned from People with Disabilities?",
                "thumb_url": "https://media.springernature.com/w110/springer-static/cover/journal/10111.jpg",
                "from_url": "https://link.springer.com/article/10.1007/s101110050034",
                "thumb_width": 110,
                "thumb_height": 146,
                "id": 1,
                "original_url": "https://link.springer.com/article/10.1007/s101110050034"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DfId",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://link.springer.com/article/10.1007/s101110050034",
                                "text": "https://link.springer.com/article/10.1007/s101110050034"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1596966732.340700",
        "parent_user_id": "UKP3B2J5D"
    },
    {
        "client_msg_id": "798ABBE1-D598-4390-85D4-D279ED349E18",
        "type": "message",
        "text": "<https://github.com/nadia-polikarpova/cse291-program-synthesis/tree/master/lectures|https://github.com/nadia-polikarpova/cse291-program-synthesis/tree/master/lectures>",
        "user": "UKP3B2J5D",
        "ts": "1597152406.406300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "nadia-polikarpova/cse291-program-synthesis",
                "title_link": "https://github.com/nadia-polikarpova/cse291-program-synthesis/tree/master/lectures",
                "text": "Program Synthesis Course. Contribute to nadia-polikarpova/cse291-program-synthesis development by creating an account on GitHub.",
                "fallback": "GitHub: nadia-polikarpova/cse291-program-synthesis",
                "thumb_url": "https://avatars0.githubusercontent.com/u/1465401?s=400&v=4",
                "from_url": "https://github.com/nadia-polikarpova/cse291-program-synthesis/tree/master/lectures",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/nadia-polikarpova/cse291-program-synthesis/tree/master/lectures"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rppW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://github.com/nadia-polikarpova/cse291-program-synthesis/tree/master/lectures",
                                "text": "https://github.com/nadia-polikarpova/cse291-program-synthesis/tree/master/lectures"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1596966732.340700",
        "parent_user_id": "UKP3B2J5D"
    },
    {
        "client_msg_id": "df84e68f-6b31-43ce-a470-4037c92726e1",
        "type": "message",
        "text": "Interfaces should be respectful of the work that the user has done up to the point an error occurs. The computer should freeze/salvage as much of the state as makes sense for the context, and provide the ability to resume from there. Kinda like Common Lisp\u2019s condition system, but potentially spanning multiple network nodes, and also surfaced meaningfully in the user land.\u00a0\n\nIt should include contextual suggestions to help \u201cfix\u201d the error, and carry on. Loosely mapping to the Common Lisp restarts.\n\nIt should speak the user\u2019s language. It shouldn\u2019t gratuitously expose them to the semantic layers beneath. Unless they want to! Which means you need some sort of \u201cmoldability\u201d in your error framework.",
        "user": "UGYGY18UX",
        "ts": "1597152440.407300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Sp2R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interfaces should be respectful of the work that the user has done up to the point an error occurs. The computer should freeze/salvage as much of the state as makes sense for the context, and provide the ability to resume from there. Kinda like Common Lisp\u2019s condition system, but potentially spanning multiple network nodes, and also surfaced meaningfully in the user land.\u00a0\n\nIt should include contextual suggestions to help \u201cfix\u201d the error, and carry on. Loosely mapping to the Common Lisp restarts.\n\nIt should speak the user\u2019s language. It shouldn\u2019t gratuitously expose them to the semantic layers beneath. Unless they want to! Which means you need some sort of \u201cmoldability\u201d in your error framework."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "Just updated this with some links from the summer school.. cc <@UFB8STN7K> any other ones to add?",
        "user": "UKP3B2J5D",
        "ts": "1597152459.407800",
        "thread_ts": "1596966732.340700",
        "root": {
            "client_msg_id": "B27B8EBB-0141-4712-B686-EEC51DBEC4AC",
            "type": "message",
            "text": "Found the link to this course from the Summer school. Looks interesting so far. In case anyone wanted to take a look - <https://people.csail.mit.edu/asolar/SynthesisCourse/Lecture1.htm|https://people.csail.mit.edu/asolar/SynthesisCourse/Lecture1.htm>",
            "user": "UKP3B2J5D",
            "ts": "1596966732.340700",
            "team": "T5TCAFTA9",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "HgMh",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "Found the link to this course from the Summer school. Looks interesting so far. In case anyone wanted to take a look - "
                                },
                                {
                                    "type": "link",
                                    "url": "https://people.csail.mit.edu/asolar/SynthesisCourse/Lecture1.htm",
                                    "text": "https://people.csail.mit.edu/asolar/SynthesisCourse/Lecture1.htm"
                                }
                            ]
                        }
                    ]
                }
            ],
            "thread_ts": "1596966732.340700",
            "reply_count": 12,
            "reply_users_count": 3,
            "latest_reply": "1597152459.407800",
            "reply_users": [
                "UKP3B2J5D",
                "UJ6LDMMN0",
                "U01986Y20GG"
            ],
            "subscribed": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NdyxF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just updated this with some links from the summer school.. cc "
                            },
                            {
                                "type": "user",
                                "user_id": "UFB8STN7K"
                            },
                            {
                                "type": "text",
                                "text": " any other ones to add?"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "A44690EE-45D0-4BCC-882E-C888924A1546",
        "reactions": [
            {
                "name": "ok_hand",
                "users": [
                    "UFB8STN7K"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "DBEBE210-4204-4127-9560-7ACCE7D78726",
        "type": "message",
        "text": "i agree with the above ^ every error should be result in a question from the user about how to proceed, with the opportunity to fix the issue using any required data from a humane interface for finding it",
        "user": "UHWC9PXBL",
        "ts": "1597152717.410100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wosm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i agree with the above ^ every error should be result in a question from the user about how to proceed, with the opportunity to fix the issue using any required data from a humane interface for finding it"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "1263056f-936e-4cf7-9c7f-634a4f653532",
        "type": "message",
        "text": "and what if the error corrupted state or left it in an inconsistent state?",
        "user": "UBN9AFS0N",
        "ts": "1597152840.410300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A30u/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and what if the error corrupted state or left it in an inconsistent state?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "75AB6336-5EF5-48EF-910C-3E7B76EF6A63",
        "type": "message",
        "text": "<@UBN9AFS0N> rewind!",
        "user": "UA14TGLTC",
        "ts": "1597153240.411200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dZ/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " rewind!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d40a9133-01eb-412c-85fc-f0f4bb01b15c",
        "type": "message",
        "text": "so the future is immutable? :slightly_smiling_face:",
        "user": "UBN9AFS0N",
        "ts": "1597153408.411400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IN19",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "so the future is immutable? "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "2c6018c7-a810-47cd-bd5a-3c2a3d0f79e1",
        "type": "message",
        "text": "I don't believe in errors or exceptions, because I believe programming is creating models of reality, and you don't get errors or exceptions in reality.",
        "user": "UE6EFEPTQ",
        "ts": "1597157132.411900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TrKT4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't believe in errors or exceptions, because I believe programming is creating models of reality, and you don't get errors or exceptions in reality."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "sob",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "4e4bc902-b64f-4af3-b419-4a6ea1129e2e",
        "type": "message",
        "text": "how parsing a csv when given a pdf is a model of reality?",
        "user": "UBN9AFS0N",
        "ts": "1597157318.412100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ua94v",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "how parsing a csv when given a pdf is a model of reality?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "23f16173-83f2-4df3-8008-739c51e3f603",
        "type": "message",
        "text": "There are two ways of answering that: from the point of view of (a) syntax as type in a programming model, or (b) interfacing between a clean programming model and the dirty realities of legacy tech",
        "user": "UE6EFEPTQ",
        "ts": "1597157928.412300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1597157941.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pAVOb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are two ways of answering that: from the point of view of (a) syntax as type in a programming model, or (b) interfacing between a clean programming model and the dirty realities of legacy tech"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "7dd87d25-3b22-4d3c-a41c-a0e37d22e5ae",
        "type": "message",
        "text": "(a) If you expect some shape and don't see it, you don't see it, no errors, just no behaviour. Hopefully your programming environment will help you play with the stuff of your model to enable you to feel and experiment your way forwards",
        "user": "UE6EFEPTQ",
        "ts": "1597158032.412600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mVKS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(a) If you expect some shape and don't see it, you don't see it, no errors, just no behaviour. Hopefully your programming environment will help you play with the stuff of your model to enable you to feel and experiment your way forwards"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "d436e3d5-1d98-41cf-b327-dd3651d325d1",
        "type": "message",
        "text": "(b) yes, something tells you the data import didn't work, in a log or something; so maybe you can have \"error as type\": an object in the clean programming environment that was meant to be populated with the CSV data has an \"error message\"; fair enough! :smile:",
        "user": "UE6EFEPTQ",
        "ts": "1597158061.412800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1597158260.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w90",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(b) yes, something tells you the data import didn't work, in a log or something; so maybe you can have \"error as type\": an object in the clean programming environment that was meant to be populated with the CSV data has an \"error message\"; fair enough! "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "94ef563e-d55d-4153-b43c-8c23de0ea42e",
        "type": "message",
        "text": "Depends on the future of everything else! It makes no sense to design features separately and then bolt them on.\n\nDepends on where in the utopian stack you're talking about. Different places will need different, _ahem_, trade-offs.",
        "user": "UCUSW7WVD",
        "ts": "1597158267.413300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1597179599.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XEkp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Depends on the future of everything else! It makes no sense to design features separately and then bolt them on.\n\nDepends on where in the utopian stack you're talking about. Different places will need different, "
                            },
                            {
                                "type": "text",
                                "text": "ahem",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", trade-offs."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT",
                    "U6FKVSVCK",
                    "U014WA16VNJ",
                    "U015902ESJC"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "fdbfa971-dd2c-43c7-adfd-1f615815ec04",
        "type": "message",
        "text": "\u2191 and what Kartik sez",
        "user": "UE6EFEPTQ",
        "ts": "1597158294.413500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6QD5k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\u2191 and what Kartik sez"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "expressionless",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "B48152B7-98ED-4F68-BBC3-B8AC503D5268",
        "type": "message",
        "text": "Robust Computing ",
        "user": "UJFN50C00",
        "ts": "1597161477.414600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CrXNP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Robust Computing "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "D12B6511-639F-4737-AC40-056B440AFAA1",
        "type": "message",
        "text": "yeah, ideally the error percolates up as a mismatch\u2014for example, somethings undefined. the tool rewinds the execution trace to where that symbol became undefined\u2014gives you the process and lets you edit it such that it doesn\u2019t happen again",
        "user": "UHWC9PXBL",
        "ts": "1597168764.417200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CRbwc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah, ideally the error percolates up as a mismatch\u2014for example, somethings undefined. the tool rewinds the execution trace to where that symbol became undefined\u2014gives you the process and lets you edit it such that it doesn\u2019t happen again"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "0EACF0BA-998C-49A8-A3BE-6E4A8C5F2046",
        "type": "message",
        "text": "similar to how TDD works in a smalltalk image",
        "user": "UHWC9PXBL",
        "ts": "1597168777.417800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8trje",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "similar to how TDD works in a smalltalk image"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "EC075481-9920-47B4-9DC9-586A8D029B8B",
        "type": "message",
        "text": "demonstrated at 17:30-21:00 in this video (tldr at 19:30-20:45): <https://youtu.be/eGaKZBr0ga4|https://youtu.be/eGaKZBr0ga4>",
        "user": "UHWC9PXBL",
        "ts": "1597169435.419100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "MountainWest RubyConf 2014 - But Really, You Should Learn Smalltalk",
                "title_link": "https://youtu.be/eGaKZBr0ga4",
                "author_name": "Confreaks",
                "author_link": "https://www.youtube.com/user/Confreaks",
                "thumb_url": "https://i.ytimg.com/vi/eGaKZBr0ga4/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: MountainWest RubyConf 2014 - But Really, You Should Learn Smalltalk",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/eGaKZBr0ga4?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/eGaKZBr0ga4",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/eGaKZBr0ga4"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DP=3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "demonstrated at 17:30-21:00 in this video (tldr at 19:30-20:45): "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/eGaKZBr0ga4",
                                "text": "https://youtu.be/eGaKZBr0ga4"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "5490912e-a985-44a9-90ce-08fbbb9b8bde",
        "type": "message",
        "text": ".. * tl;dw you mean :smile:",
        "user": "UE6EFEPTQ",
        "ts": "1597169712.419400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QaH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": ".. * tl;dw you mean "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "ok_hand",
                "users": [
                    "UHWC9PXBL",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "ba0c8659-7477-4093-8071-2a71e31ca5ac",
        "type": "message",
        "text": "I'm definitely not saying just use predicate logic (note that's not what my proposal did). Even if you do invent a totally new system, I still think existing logics are a better starting point than natural languages. AFAIK formal logic was evolved over centuries starting from natural language. Predicate logic in particular arises from similar questions to what you're asking. If you ignore all that experience, you're likely to end up tearing your hair out eventually. A logic database is already pretty close to an ideal data format anyway.\n\nYou might even want some nice computable fragment of higher order logic rather than first-order to capture the relationships between predicates/tags, though that may be overkill. I definitely think the innovation will be in the right way to cut a logic system down to fit the relatively simple problem of tagging.",
        "user": "U016VUZGUUQ",
        "ts": "1597169746.419600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lhVDm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm definitely not saying just use predicate logic (note that's not what my proposal did). Even if you do invent a totally new system, I still think existing logics are a better starting point than natural languages. AFAIK formal logic was evolved over centuries starting from natural language. Predicate logic in particular arises from similar questions to what you're asking. If you ignore all that experience, you're likely to end up tearing your hair out eventually. A logic database is already pretty close to an ideal data format anyway.\n\nYou might even want some nice computable fragment of higher order logic rather than first-order to capture the relationships between predicates/tags, though that may be overkill. I definitely think the innovation will be in the right way to cut a logic system down to fit the relatively simple problem of tagging."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597061810.364800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "f5ba9253-94e3-4272-a961-f968d6bb3814",
        "type": "message",
        "text": "I assume <@UJFN50C00> is referring to <https://www.youtube.com/playlist?list=PLm5k2NUmpIP-4ekppm6JoAqZ1BLXZOztE>\n\nVery nice internally consistent answer. Fixing error handling this way affects the entire programming model.",
        "user": "UCUSW7WVD",
        "ts": "1597170830.420200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1597170997.000000"
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "title": "Robust-first Computing",
                "title_link": "https://www.youtube.com/playlist?list=PLm5k2NUmpIP-4ekppm6JoAqZ1BLXZOztE",
                "text": "Videos introducing and exploring inherently robust computational systems.",
                "fallback": "YouTube: Robust-first Computing",
                "thumb_url": "https://i.ytimg.com/vi/7hwO8Q_TyCA/hqdefault.jpg?sqp=-oaymwEWCKgBEF5IWvKriqkDCQgBFQAAiEIYAQ==&rs=AOn4CLA3eB1jimdCcjvhzMKIMirrgdYmaw",
                "from_url": "https://www.youtube.com/playlist?list=PLm5k2NUmpIP-4ekppm6JoAqZ1BLXZOztE",
                "thumb_width": 168,
                "thumb_height": 94,
                "service_icon": "https://s.ytimg.com/yts/img/favicon-vfl8qSV2F.ico",
                "id": 1,
                "original_url": "https://www.youtube.com/playlist?list=PLm5k2NUmpIP-4ekppm6JoAqZ1BLXZOztE"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wMRr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I assume "
                            },
                            {
                                "type": "user",
                                "user_id": "UJFN50C00"
                            },
                            {
                                "type": "text",
                                "text": " is referring to "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/playlist?list=PLm5k2NUmpIP-4ekppm6JoAqZ1BLXZOztE"
                            },
                            {
                                "type": "text",
                                "text": "\n\nVery nice internally consistent answer. Fixing error handling this way affects the entire programming model."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "point_up_2",
                "users": [
                    "UJFN50C00",
                    "UBSMEUXAA"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UJFN50C00"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ed6a69f1-ee1c-4a71-adb1-a2fd6e57f25e",
        "type": "message",
        "text": "I do think <@UE6EFEPTQ> is on to something. \"Errors\" are fundamentally just another control flow path that don't necessarily deserve special treatment. From this I conclude that any shenanigans we want to do with exceptions should also be available for happy-path code as well. I'm pretty sure this means pervasive use of delimited continuations, possibly in the form of algebraic effects.",
        "user": "U016VUZGUUQ",
        "ts": "1597171054.420800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wea",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I do think "
                            },
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": " is on to something. \"Errors\" are fundamentally just another control flow path that don't necessarily deserve special treatment. From this I conclude that any shenanigans we want to do with exceptions should also be available for happy-path code as well. I'm pretty sure this means pervasive use of delimited continuations, possibly in the form of algebraic effects."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "19727706-7c15-4955-a12c-ae07959377d6",
        "type": "message",
        "text": "Or anonymous sum types that are structurally rather than nominally matched. Go's pattern but with a single result.",
        "user": "UCUSW7WVD",
        "ts": "1597171521.421000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0YCP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Or anonymous sum types that are structurally rather than nominally matched. Go's pattern but with a single result."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "d2fd460a-49e4-4959-8e1d-17e00df77fca",
        "type": "message",
        "text": "<@UCUSW7WVD> can you elaborate a bit on what you mean by \"structurally matched\"? A doc link to a language that does it would be fine. I'm assuming \"nominally matched\" is the usual ML-style pattern match...",
        "user": "U016VUZGUUQ",
        "ts": "1597173045.421200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UjOZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " can you elaborate a bit on what you mean by \"structurally matched\"? A doc link to a language that does it would be fine. I'm assuming \"nominally matched\" is the usual ML-style pattern match..."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "abcd7440-2bf3-4dbc-808d-538b790ad0f8",
        "type": "message",
        "text": "Right. The closest language is <https://ceylon-lang.org/documentation/1.3/introduction|https://ceylon-lang.org/documentation/1.3/introduction>. Search for 'union type'.\n\nBasically structural typing addresses Rich hickey's criticism of Haskell. You don't always want int to match some union type containing ints. But it's good to give programmers the choice. Particularly for errors, it's good to be able to just return an int and have it automatically convert to `int|err`.\n\nThis approach to error checking feels more parsimonious than first class delimited continuations and algebraic effects.",
        "user": "UCUSW7WVD",
        "ts": "1597173427.421400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1597199255.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pCOs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Right. The closest language is "
                            },
                            {
                                "type": "link",
                                "url": "https://ceylon-lang.org/documentation/1.3/introduction",
                                "text": "https://ceylon-lang.org/documentation/1.3/introduction"
                            },
                            {
                                "type": "text",
                                "text": ". Search for 'union type'.\n\nBasically structural typing addresses Rich hickey's criticism of Haskell. You don't always want int to match some union type containing ints. But it's good to give programmers the choice. Particularly for errors, it's good to be able to just return an int and have it automatically convert to "
                            },
                            {
                                "type": "text",
                                "text": "int|err",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nThis approach to error checking feels more parsimonious than first class delimited continuations and algebraic effects."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597151841.396200",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "317e8aec-c568-4ba6-a740-8dfb83ab2280",
        "type": "message",
        "text": "Just read that what is code article. Delightfully self-aware, thought provoking and entertaining.",
        "user": "U015902ESJC",
        "ts": "1597174039.421800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3vf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just read that what is code article. Delightfully self-aware, thought provoking and entertaining."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597103007.378400",
        "parent_user_id": "U015902ESJC"
    },
    {
        "client_msg_id": "250b4b50-88be-42a7-aa2e-5ab4f3d36677",
        "type": "message",
        "text": "<@UCGAK10LS> Your thoughts triggered a line of thinking for me. What makes a groundbreaking thing groundbreaking? I think that discovering groundbreaking new technologies is more a function of connecting a set of normally unrelated ideas together. Most breakthroughs and new technologies have been a slow iteration of new ideas based on old ones, experimentation and connecting unrelated ones. Take flying, for example. Powered flight actually arose nearly simultaneously in several places because the necessary supporting ideas were available, we just had to put them together. This is true of almost everything. I'm not sure if I agree with this, but maybe you could argue that we don't have groundbreaking technologies anymore because *everything* is groundbreaking. In the age of the internet, we iterate so fast and can so easily connect so many different ideas together that it has become utterly common place.\n\nTruly groundbreaking technologies need to seem to come from nowhere. That is, there needs to be something mysterious in the source of it and it needs to fundamentally change the course of history. By the second measure, the internet, the iPhone, reusable space program, electric vehicles, batteries, cloud computing and so much more are in a very real sense changing nearly everything, except it's all mixed up and happening so fast that nothing looks groundbreaking anymore. Further, the mystery is gone in some sense. We have a really high quality record of where the innovations are coming from, what ideas are being combined and how. The internet is insane.\n\nTake Newton for example. Newton did a lot of utterly absurdly groundbreaking work. But in large part, that is because 1) we have limited records of the thought processes and ideas that were connected to get there and 2) he had access to much of the knowledge of his time and 3) it stood out from it's contemporary work. I also think there is a component of groundbreaking work coming from a single mind where it has to be conceivable in a single mind and not a lot of minds were doing the conceiving. That is, Newton lived in an age where a single human mind could \"discover gravity\" as it were. I would argue that we have minds today that are able to conceive of, understand and \"break ground\" on vastly more complex and strange things than Newton ever did. What has changed is the environment, frequency and number of minds conceiving.\n\nI highly recommend \"How to Fly a Horse\" by Kevin Ashton: <https://en.wikipedia.org/wiki/How_to_Fly_a_Horse#:~:text=0385538596-,How%20to%20Fly%20a%20Horse%3A%20The%20Secret%20History%20of%20Creation,the%20true%20source%20of%20innovation>.",
        "user": "U015902ESJC",
        "ts": "1597176623.422200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lMo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " Your thoughts triggered a line of thinking for me. What makes a groundbreaking thing groundbreaking? I think that discovering groundbreaking new technologies is more a function of connecting a set of normally unrelated ideas together. Most breakthroughs and new technologies have been a slow iteration of new ideas based on old ones, experimentation and connecting unrelated ones. Take flying, for example. Powered flight actually arose nearly simultaneously in several places because the necessary supporting ideas were available, we just had to put them together. This is true of almost everything. I'm not sure if I agree with this, but maybe you could argue that we don't have groundbreaking technologies anymore because "
                            },
                            {
                                "type": "text",
                                "text": "everything",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is groundbreaking. In the age of the internet, we iterate so fast and can so easily connect so many different ideas together that it has become utterly common place.\n\nTruly groundbreaking technologies need to seem to come from nowhere. That is, there needs to be something mysterious in the source of it and it needs to fundamentally change the course of history. By the second measure, the internet, the iPhone, reusable space program, electric vehicles, batteries, cloud computing and so much more are in a very real sense changing nearly everything, except it's all mixed up and happening so fast that nothing looks groundbreaking anymore. Further, the mystery is gone in some sense. We have a really high quality record of where the innovations are coming from, what ideas are being combined and how. The internet is insane.\n\nTake Newton for example. Newton did a lot of utterly absurdly groundbreaking work. But in large part, that is because 1) we have limited records of the thought processes and ideas that were connected to get there and 2) he had access to much of the knowledge of his time and 3) it stood out from it's contemporary work. I also think there is a component of groundbreaking work coming from a single mind where it has to be conceivable in a single mind and not a lot of minds were doing the conceiving. That is, Newton lived in an age where a single human mind could \"discover gravity\" as it were. I would argue that we have minds today that are able to conceive of, understand and \"break ground\" on vastly more complex and strange things than Newton ever did. What has changed is the environment, frequency and number of minds conceiving.\n\nI highly recommend \"How to Fly a Horse\" by Kevin Ashton: "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/How_to_Fly_a_Horse#:~:text=0385538596-,How%20to%20Fly%20a%20Horse%3A%20The%20Secret%20History%20of%20Creation,the%20true%20source%20of%20innovation"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597061810.364800",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UKP3B2J5D"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "53b513e2-1336-445b-875e-880e7035bb88",
        "type": "message",
        "text": "Also keep in mind the timescales here. Peter Thiel's \"extended technological stagnation\" is honestly laughable to me. It's been a sensational idea for a long time to figure out how to get the \"world of tomorrow, today\". His \"extended\" time period is a blip compared to the time scales things have taken historically. \"We were promised flying cars and got 140 characters\" is a straw man argument. Things are moving so fast right now that we literally can't keep up with the ground breaking consequences of it. We are swimming in so much ground breaking that we have forgotten it's the air we breath.\n\nAlso, who said 140 characters wasn't groundbreaking? Social media has fundamentally changed the world in so many ways for good or ill. Also, we have flying cars. Whether they are useful or just a novelty remains to be seen.",
        "user": "U015902ESJC",
        "ts": "1597177639.422400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=OheZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also keep in mind the timescales here. Peter Thiel's \"extended technological stagnation\" is honestly laughable to me. It's been a sensational idea for a long time to figure out how to get the \"world of tomorrow, today\". His \"extended\" time period is a blip compared to the time scales things have taken historically. \"We were promised flying cars and got 140 characters\" is a straw man argument. Things are moving so fast right now that we literally can't keep up with the ground breaking consequences of it. We are swimming in so much ground breaking that we have forgotten it's the air we breath.\n\nAlso, who said 140 characters wasn't groundbreaking? Social media has fundamentally changed the world in so many ways for good or ill. Also, we have flying cars. Whether they are useful or just a novelty remains to be seen."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597061810.364800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "45fe480b-76d8-40ad-a5cf-76aceb758705",
        "type": "message",
        "text": "Also the productivity discussion around Thiel's ideas is not specifically technology related. Productivity is an economic output, which is basically based on how much energy you can tap into. Jeremy Rifkin has done a lot of writing about that, and if he is right we are about to tap into the next jump in productivity as we start to unlock solar energy.",
        "user": "U015902ESJC",
        "ts": "1597179329.422700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y=mm0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also the productivity discussion around Thiel's ideas is not specifically technology related. Productivity is an economic output, which is basically based on how much energy you can tap into. Jeremy Rifkin has done a lot of writing about that, and if he is right we are about to tap into the next jump in productivity as we start to unlock solar energy."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597061810.364800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "fa0fa5b3-58c8-4ecd-9e62-2dcdce1cfa07",
        "type": "message",
        "text": "So... in summary, what I'm trying to say <@UCGAK10LS> is that you should definitely avoid a fixed mindset and keep pushing through to see what you can uncover while shooting for your ideal programming language. I believe it's a worthwhile endeavor regardless of whether I can see past my RDF and graph work. I've definitely long believed there is something there, but experience taught me that you end up getting too caught up in formal language as a substitute for logical formalism and it becomes awkward.\n\nThat said, it doesn't mean that you won't be able to crack it or at least discover something new and interesting. Keep an open mind to look at what you might think are completely unrelated fields or areas of thought. Often they hold the keys to innovation.",
        "user": "U015902ESJC",
        "ts": "1597179718.423000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U015902ESJC",
            "ts": "1597179786.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SORf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So... in summary, what I'm trying to say "
                            },
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " is that you should definitely avoid a fixed mindset and keep pushing through to see what you can uncover while shooting for your ideal programming language. I believe it's a worthwhile endeavor regardless of whether I can see past my RDF and graph work. I've definitely long believed there is something there, but experience taught me that you end up getting too caught up in formal language as a substitute for logical formalism and it becomes awkward.\n\nThat said, it doesn't mean that you won't be able to crack it or at least discover something new and interesting. Keep an open mind to look at what you might think are completely unrelated fields or areas of thought. Often they hold the keys to innovation."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597061810.364800",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "2f2f5003-e5c7-4a52-8a75-224a4d1efdce",
        "type": "message",
        "text": "Also, maybe there isn't a single \"ideal programming language\". There is probably an ideal one for what you are trying to do. That might be helpful to focus on exactly what you want to do with it.",
        "user": "U015902ESJC",
        "ts": "1597179860.423300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ttz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, maybe there isn't a single \"ideal programming language\". There is probably an ideal one for what you are trying to do. That might be helpful to focus on exactly what you want to do with it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597061810.364800",
        "parent_user_id": "UCGAK10LS"
    }
]