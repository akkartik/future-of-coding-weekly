[
    {
        "client_msg_id": "d886ad8f-2baf-441f-bc15-b9af2725ded2",
        "type": "message",
        "text": "Hi\u00a0<#C01932BJGE8|present-company> \u00a0! Could someone explain or give links to resources that compare MVVM and the react Approach? How do they compare and relate? Thanks!",
        "user": "UJFN50C00",
        "ts": "1598339271.015400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "59di0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi\u00a0"
                            },
                            {
                                "type": "channel",
                                "channel_id": "C01932BJGE8"
                            },
                            {
                                "type": "text",
                                "text": " \u00a0! Could someone explain or give links to resources that compare MVVM and the react Approach? How do they compare and relate? Thanks!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598339271.015400",
        "reply_count": 14,
        "reply_users_count": 4,
        "latest_reply": "1598543964.027400",
        "reply_users": [
            "UN9SCH5RD",
            "UJFN50C00",
            "ULK0Z4MPV",
            "UJ6LDMMN0"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "e7a4b69f-af45-4475-b09e-22a6d535a4ca",
        "type": "message",
        "text": "I don't know about a direct comparison but from the top of my head one of the pioneers of mvvm on the web was <https://knockoutjs.com/> One possible way to learn about MVVM is to go ahead and build a simple app with it. I suspect you probably already did some react already? The gist of mvvm is to manually build a graph of dependencies, and when you change the data from code, it should directly modify the DOM attached to some end of the graph you are creating. Changes are \"bidirectional\": when you change the data, it changes the DOM, and when you change the DOM, it changes the (JS) data.",
        "user": "UN9SCH5RD",
        "ts": "1598340306.015600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jL/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't know about a direct comparison but from the top of my head one of the pioneers of mvvm on the web was "
                            },
                            {
                                "type": "link",
                                "url": "https://knockoutjs.com/"
                            },
                            {
                                "type": "text",
                                "text": " One possible way to learn about MVVM is to go ahead and build a simple app with it. I suspect you probably already did some react already? The gist of mvvm is to manually build a graph of dependencies, and when you change the data from code, it should directly modify the DOM attached to some end of the graph you are creating. Changes are \"bidirectional\": when you change the data, it changes the DOM, and when you change the DOM, it changes the (JS) data."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598339271.015400",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "81a2032c-7e5c-4b81-9574-86e2aedd0a74",
        "type": "message",
        "text": "my experience with MVVM (and KJS) was that the graphs ended up being a bit hairy and it was easy to accidentally create loops, but it was hard to track exactly where the loop was",
        "user": "UN9SCH5RD",
        "ts": "1598340363.015800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tM92",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "my experience with MVVM (and KJS) was that the graphs ended up being a bit hairy and it was easy to accidentally create loops, but it was hard to track exactly where the loop was"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598339271.015400",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "b9a8c4f2-7bfd-4b6e-b505-1e0adfc1234d",
        "type": "message",
        "text": "the graphs were not reified, you couldn't. say, generate a png with graphviz of what your dependencies looked like",
        "user": "UN9SCH5RD",
        "ts": "1598340420.016000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H7oxB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the graphs were not reified, you couldn't. say, generate a png with graphviz of what your dependencies looked like"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598339271.015400",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "5694b3e7-d5f9-4774-9c26-dd5c0de72d5a",
        "type": "message",
        "text": "react does away from that by making the data always \"flow\" a single direction, from your POV the DOM is kind of a side effect, always destroyed and recreated from the data  each time the data changes (and the framework does the diff and patch \"trick\" to make the process efficient)",
        "user": "UN9SCH5RD",
        "ts": "1598340524.016200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zxa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "react does away from that by making the data always \"flow\" a single direction, from your POV the DOM is kind of a side effect, always destroyed and recreated from the data  each time the data changes (and the framework does the diff and patch \"trick\" to make the process efficient)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598339271.015400",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "f9706ead-6c4d-4aa4-b9f8-9ab24fb46146",
        "type": "message",
        "text": "Thanks <@UN9SCH5RD> for sharing your experience",
        "user": "UJFN50C00",
        "ts": "1598354804.016400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r7P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UN9SCH5RD"
                            },
                            {
                                "type": "text",
                                "text": " for sharing your experience"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598339271.015400",
        "parent_user_id": "UJFN50C00",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UN9SCH5RD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7be95e5c-083e-40ca-8436-ee21303dfe86",
        "type": "message",
        "text": "The way I understand things is React is just the view, and the view is defined as a function of state. The state, however, can be implemented however you choose.\n\nYou could totally implement MVVM using React as the view layer. My personal setup involves some observable models in which React components listen for changes and re-render in such event - which doesn't seem too far removed from MVVM in my head at least.",
        "user": "ULK0Z4MPV",
        "ts": "1598370504.016600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0eK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The way I understand things is React is just the view, and the view is defined as a function of state. The state, however, can be implemented however you choose.\n\nYou could totally implement MVVM using React as the view layer. My personal setup involves some observable models in which React components listen for changes and re-render in such event - which doesn't seem too far removed from MVVM in my head at least."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598339271.015400",
        "parent_user_id": "UJFN50C00",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "73ab10d0-a3e8-4a2a-813d-57d0b78d5cad",
        "type": "message",
        "text": "Vue.js is a good example of current MVVM for the web. The View is the Vue.js template, and the ViewModel is the Vue.js data.\n\nReact is not MVVM by default but I guess you can do MVVM with it, as Ryan said.",
        "user": "UJ6LDMMN0",
        "ts": "1598376578.016900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rfB3I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Vue.js is a good example of current MVVM for the web. The View is the Vue.js template, and the ViewModel is the Vue.js data.\n\nReact is not MVVM by default but I guess you can do MVVM with it, as Ryan said."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598339271.015400",
        "parent_user_id": "UJFN50C00"
    }
]