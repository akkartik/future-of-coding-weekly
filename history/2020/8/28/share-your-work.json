[
    {
        "client_msg_id": "4c75ca0c-8c76-43ff-a4c1-32b52491b23b",
        "type": "message",
        "text": "<@UBSMEUXAA> what do you think of Neos VR?  It seems to have a delightfully, awkwardly, awesomely weird, hm, flexibility to it.",
        "user": "UA14TGLTC",
        "ts": "1598600825.115500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dOJpu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBSMEUXAA"
                            },
                            {
                                "type": "text",
                                "text": " what do you think of Neos VR?  It seems to have a delightfully, awkwardly, awesomely weird, hm, flexibility to it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598552082.107500",
        "parent_user_id": "UBSMEUXAA"
    },
    {
        "client_msg_id": "3d71ba4b-e6bd-4687-9c5c-7f6e9edbfb6b",
        "type": "message",
        "text": "In case the two minute summary was too much in too little time, here are longer versions I just did: <https://www.youtube.com/watch?v=TFQsNCm5AMM> and <https://www.youtube.com/watch?v=b2lZ2Zjbr_k>",
        "user": "UBN9AFS0N",
        "ts": "1598626720.116500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Create and Share Interactive Visualizations from SpaceX's JSON API",
                "title_link": "https://www.youtube.com/watch?v=TFQsNCm5AMM",
                "author_name": "Instadeq",
                "author_link": "https://www.youtube.com/channel/UCz4zYu_PV7OjCNrNZyYiXzg",
                "thumb_url": "https://i.ytimg.com/vi/TFQsNCm5AMM/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Create and Share Interactive Visualizations from SpaceX's JSON API",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/TFQsNCm5AMM?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=TFQsNCm5AMM",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=TFQsNCm5AMM"
            },
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Create and Share Visualizations of Premier League Matches from a CSV",
                "title_link": "https://www.youtube.com/watch?v=b2lZ2Zjbr_k",
                "author_name": "Instadeq",
                "author_link": "https://www.youtube.com/channel/UCz4zYu_PV7OjCNrNZyYiXzg",
                "thumb_url": "https://i.ytimg.com/vi/b2lZ2Zjbr_k/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Create and Share Visualizations of Premier League Matches from a CSV",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/b2lZ2Zjbr_k?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=b2lZ2Zjbr_k",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 2,
                "original_url": "https://www.youtube.com/watch?v=b2lZ2Zjbr_k"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SG7Wp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In case the two minute summary was too much in too little time, here are longer versions I just did: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=TFQsNCm5AMM"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=b2lZ2Zjbr_k"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "ecc22753-b15b-428d-a064-24c2da3d1ead",
        "type": "message",
        "text": "Curious to hear people's thoughts about how different this is from using nesting content. Seems very similar to me except that children are inlined when visible. When nesting, for example:\n```- 1\n  - 2\n    - 3\n\n- 1\n  - 2\n    - 3\n      - 4```\nthe user would need a shortcut or UI to choose a global depth _(level)_ which would open all nodes until a certain depth (1,2 or 3, 4).\nI think either approach (flat &amp; nested) possible in roam today by using tags &amp; filters. So the user would have to tag a block like `#ideas` and the apply the appropriate filter.",
        "user": "U019W8A1884",
        "ts": "1598633994.116900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hHdq1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Curious to hear people's thoughts about how different this is from using nesting content. Seems very similar to me except that children are inlined when visible. When nesting, for example:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "- 1\n  - 2\n    - 3\n\n- 1\n  - 2\n    - 3\n      - 4"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the user would need a shortcut or UI to choose a global depth "
                            },
                            {
                                "type": "text",
                                "text": "(level)",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " which would open all nodes until a certain depth (1,2 or 3, 4).\nI think either approach (flat & nested) possible in roam today by using tags & filters. So the user would have to tag a block like "
                            },
                            {
                                "type": "text",
                                "text": "#ideas",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and the apply the appropriate filter."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598502207.080100",
        "parent_user_id": "UG0EL18H3"
    },
    {
        "client_msg_id": "5a6d5bcc-cfc9-40eb-bf28-1a9ebd2e7260",
        "type": "message",
        "text": "What started with me reverse engineering notion became a data-first recursive UI resolver I called *<https://github.com/den1k/root|root>*.\n\nHere's how it differs from most common technologies today:\n\u2022 Approaches to UI development like react.js + graphQL require UI components to\u00a0request\u00a0data in a shape that satisfies the UI tree. This means the shape of the data is determined by the UI tree. Root takes an inverse approach where the UI tree is determined by the shape of the data.\n\u2022 A major benefit of this approach is that the UI layout is thus entirely determined by data, data that can be traversed, transformed and stored in arbitrary ways and by arbitrary means.\n\u2022 This is powerful for unstructured, user-determined, block-based UI's like rich documents (think Roam Research, Notion etc.) enabling queries and functions that, based on users' demands,\u00a0derive\u00a0the optimal presentation of a document.\nIt packs a few more punches. The best example is probably this <https://den1k.github.io/root/rich-document.html|notion-like demo> in about 200 LoC (<https://github.com/den1k/root/blob/master/dev/examples/rich_document/views.cljs|source>). Github repo <https://github.com/den1k/root|here>.",
        "user": "U019W8A1884",
        "ts": "1598634636.121900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U019W8A1884",
            "ts": "1598634646.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ldpzA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What started with me reverse engineering notion became a data-first recursive UI resolver I called "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/den1k/root",
                                "text": "root",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nHere's how it differs from most common technologies today:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Approaches to UI development like react.js + graphQL require UI components to\u00a0request\u00a0data in a shape that satisfies the UI tree. This means the shape of the data is determined by the UI tree. Root takes an inverse approach where the UI tree is determined by the shape of the data."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A major benefit of this approach is that the UI layout is thus entirely determined by data, data that can be traversed, transformed and stored in arbitrary ways and by arbitrary means."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "This is powerful for unstructured, user-determined, block-based UI's like rich documents (think Roam Research, Notion etc.) enabling queries and functions that, based on users' demands,\u00a0derive\u00a0the optimal presentation of a document."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIt packs a few more punches. The best example is probably this "
                            },
                            {
                                "type": "link",
                                "url": "https://den1k.github.io/root/rich-document.html",
                                "text": "notion-like demo"
                            },
                            {
                                "type": "text",
                                "text": " in about 200 LoC ("
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/den1k/root/blob/master/dev/examples/rich_document/views.cljs",
                                "text": "source"
                            },
                            {
                                "type": "text",
                                "text": "). Github repo "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/den1k/root",
                                "text": "here"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598634636.121900",
        "reply_count": 12,
        "reply_users_count": 4,
        "latest_reply": "1598804243.145700",
        "reply_users": [
            "UC21F8Q48",
            "U019W8A1884",
            "UCUSW7WVD",
            "UHWC9PXBL"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL"
                ],
                "count": 2
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "UJ6LDMMN0"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "4809cda9-a6af-4e41-bd94-236926a02181",
        "type": "message",
        "text": "nice. see also Chorus, where data = UI <http://www.chorus-home.org/>",
        "user": "UC21F8Q48",
        "ts": "1598635556.122400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kMN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "nice. see also Chorus, where data = UI "
                            },
                            {
                                "type": "link",
                                "url": "http://www.chorus-home.org/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598634636.121900",
        "parent_user_id": "U019W8A1884",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "60892283-b555-4825-b026-c97e51fe02b0",
        "type": "message",
        "text": "Also this JSON-&gt;app workflow from <@UMWF81HTP> <https://twitter.com/yoshikischmitz/status/1176642448077967362>",
        "user": "UC21F8Q48",
        "ts": "1598635657.122600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/yoshikischmitz|@yoshikischmitz>: I've been jamming on this concept for making data-driven designs. Given some JSON, this app will provide you with an interface to describe how you want each entry styled, allowing you to gradually create a more complicated design. Here I create an airbnb-ish app. <https://pbs.twimg.com/ext_tw_video_thumb/1176641726049476608/pu/img/xFjMsTzYNj0_4XQ6.jpg>",
                "ts": 1569368395,
                "author_name": "yoshiki",
                "author_link": "https://twitter.com/yoshikischmitz/status/1176642448077967362",
                "author_icon": "https://pbs.twimg.com/profile_images/1098933170265718786/9f2wc9jn_normal.jpg",
                "author_subname": "@yoshikischmitz",
                "text": "I've been jamming on this concept for making data-driven designs. Given some JSON, this app will provide you with an interface to describe how you want each entry styled, allowing you to gradually create a more complicated design. Here I create an airbnb-ish app.",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/yoshikischmitz/status/1176642448077967362",
                "thumb_url": "https://pbs.twimg.com/ext_tw_video_thumb/1176641726049476608/pu/img/xFjMsTzYNj0_4XQ6.jpg",
                "thumb_width": 1200,
                "thumb_height": 675,
                "video_html_width": 1200,
                "video_html_height": 675,
                "video_html": "<video controls poster=\"https://pbs.twimg.com/ext_tw_video_thumb/1176641726049476608/pu/img/xFjMsTzYNj0_4XQ6.jpg\" width=\"1200\" height=\"675\"><source type=\"video/mp4\" src=\"https://video.twimg.com/ext_tw_video/1176641726049476608/pu/vid/1280x720/ldIOmEL7L9B3bWmv.mp4?tag=10\"></video>",
                "id": 1,
                "original_url": "https://twitter.com/yoshikischmitz/status/1176642448077967362",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S0dx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also this JSON->app workflow from "
                            },
                            {
                                "type": "user",
                                "user_id": "UMWF81HTP"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/yoshikischmitz/status/1176642448077967362"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598634636.121900",
        "parent_user_id": "U019W8A1884",
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U019W8A1884"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "313d8019-0aa9-460c-8708-745d07b0b359",
        "type": "message",
        "text": "<@UC21F8Q48> thanks for the pointers. these are great!",
        "user": "U019W8A1884",
        "ts": "1598636421.123000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1xim",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC21F8Q48"
                            },
                            {
                                "type": "text",
                                "text": " thanks for the pointers. these are great!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598634636.121900",
        "parent_user_id": "U019W8A1884"
    },
    {
        "client_msg_id": "ec92ba48-f0e9-45cd-a2a6-08f760f48b46",
        "type": "message",
        "text": "side note, the biggest project I wrote with root is <http://theshopgrid.com|theshopgrid.com> (unfortunately not OSS yet). As with any approach data-first comes with its own set of tradeoffs. Happy to elaborate if anyone is curious.",
        "user": "U019W8A1884",
        "ts": "1598636506.123200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pvkC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "side note, the biggest project I wrote with root is "
                            },
                            {
                                "type": "link",
                                "url": "http://theshopgrid.com",
                                "text": "theshopgrid.com"
                            },
                            {
                                "type": "text",
                                "text": " (unfortunately not OSS yet). As with any approach data-first comes with its own set of tradeoffs. Happy to elaborate if anyone is curious."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598634636.121900",
        "parent_user_id": "U019W8A1884",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e17c0adc-5c74-4ee9-b789-af3b20e0dd63",
        "type": "message",
        "text": "I love how root renders all data by default. This helps with the 'dataphobia' being discussed over at <https://futureofcoding.slack.com/archives/C5T9GPWFL/p1598534303161500>",
        "user": "UCUSW7WVD",
        "ts": "1598637571.123500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1598637650.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EJw3g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I love how root renders all data by default. This helps with the 'dataphobia' being discussed over at "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1598534303161500"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598634636.121900",
        "parent_user_id": "U019W8A1884"
    },
    {
        "client_msg_id": "72878f0f-5e24-41d0-9db6-fdfecdd82ced",
        "type": "message",
        "text": "You could implement one in terms of the other, as long as you allowed arbitrary showing/hiding, rather than needing to open nested levels strictly in order. Beyond that, the difference is entirely in the UI. Nesting mixes content and presentation, layers (as imagined in this thread) don't. What seems nice about nesting is that it's easy to move things between layers \u2014 just indent/outdent to the level you want.",
        "user": "UC2A2ARPT",
        "ts": "1598638638.123900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1598638853.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "81G6h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You could implement one in terms of the other, as long as you allowed arbitrary showing/hiding, rather than needing to open nested levels strictly in order. Beyond that, the difference is entirely in the UI. Nesting mixes content and presentation, layers (as imagined in this thread) don't. What seems nice about nesting is that it's easy to move things between layers \u2014 just indent/outdent to the level you want."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598502207.080100",
        "parent_user_id": "UG0EL18H3",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U019W8A1884"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "dcbdb28a-b5d8-4940-9b8b-37c785c16c10",
        "type": "message",
        "text": "thank you! I commented on that thread. Yes, it\u2019s like a data browser incrementally becoming a UI. Lots can be done there to improve DX, for example analyzing strings for urls/images that can be embedded automatically. All kinds of remembered hiding and showing of state and so forth.",
        "user": "U019W8A1884",
        "ts": "1598641303.124900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mbbmD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "thank you! I commented on that thread. Yes, it\u2019s like a data browser incrementally becoming a UI. Lots can be done there to improve DX, for example analyzing strings for urls/images that can be embedded automatically. All kinds of remembered hiding and showing of state and so forth."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598634636.121900",
        "parent_user_id": "U019W8A1884"
    },
    {
        "client_msg_id": "19903657-1cfc-4007-bc77-b59f1bc8933f",
        "type": "message",
        "text": "I used it as a counter example",
        "user": "UBSMEUXAA",
        "ts": "1598641552.125100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gzaw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I used it as a counter example"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598552082.107500",
        "parent_user_id": "UBSMEUXAA"
    },
    {
        "client_msg_id": "f8876678-ce0f-4bcf-a5c1-10581cce8043",
        "type": "message",
        "text": "Some members of the Horizon team were really pushing a node and wire UI",
        "user": "UBSMEUXAA",
        "ts": "1598641570.125300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SKoUa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some members of the Horizon team were really pushing a node and wire UI"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598552082.107500",
        "parent_user_id": "UBSMEUXAA"
    },
    {
        "client_msg_id": "4582a740-9a77-4092-938d-627c249ee83b",
        "type": "message",
        "text": "and we had a working version of it at one point, and Horizon can still use wires for object references",
        "user": "UBSMEUXAA",
        "ts": "1598641624.125500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Imt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and we had a working version of it at one point, and Horizon can still use wires for object references"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598552082.107500",
        "parent_user_id": "UBSMEUXAA"
    },
    {
        "client_msg_id": "42dddc46-e7de-4081-8b1c-f507011e9bfe",
        "type": "message",
        "text": "In two dimensions managing node and wire complexity can be hard, but with zooming and organization it can be ok... I guess",
        "user": "UBSMEUXAA",
        "ts": "1598641658.125700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HBbg2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In two dimensions managing node and wire complexity can be hard, but with zooming and organization it can be ok... I guess"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598552082.107500",
        "parent_user_id": "UBSMEUXAA"
    },
    {
        "client_msg_id": "6d0f050f-4b66-49d8-a68c-00e255d22c67",
        "type": "message",
        "text": "in three dimensions it's a much harder problem",
        "user": "UBSMEUXAA",
        "ts": "1598641667.125900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eMekM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in three dimensions it's a much harder problem"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598552082.107500",
        "parent_user_id": "UBSMEUXAA"
    },
    {
        "client_msg_id": "90ae9413-d824-4465-af22-19a6a29685f9",
        "type": "message",
        "text": "The other project this reminds me of is PANE..",
        "user": "UCUSW7WVD",
        "ts": "1598642431.126100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oLOZQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The other project this reminds me of is PANE.."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598634636.121900",
        "parent_user_id": "U019W8A1884"
    },
    {
        "client_msg_id": "4ea99cda-3fb2-4d89-a84e-cabe80fc1b93",
        "type": "message",
        "text": "Dreams uses node and wire and solves it by making it a zoomable 2D UI constrained to a plane and clipped (basically nested floating 2D windows in 3D space)",
        "user": "UBSMEUXAA",
        "ts": "1598642490.126300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "foeAp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Dreams uses node and wire and solves it by making it a zoomable 2D UI constrained to a plane and clipped (basically nested floating 2D windows in 3D space)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598552082.107500",
        "parent_user_id": "UBSMEUXAA"
    },
    {
        "client_msg_id": "FE7C0C92-BF88-4B73-B8B2-C7B9EF9E5BA0",
        "type": "message",
        "text": "Yeah, the 2d-in-3d seems to be the best of both worlds, for my money.",
        "user": "UC2A2ARPT",
        "ts": "1598642812.127300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WZndm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, the 2d-in-3d seems to be the best of both worlds, for my money."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598552082.107500",
        "parent_user_id": "UBSMEUXAA",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d6277c03-1a22-4b13-b8b8-0824705ebf88",
        "type": "message",
        "text": "The way I understood it, this sort of layering is very different from hierarchical nesting. The individually showable/hideable segments in an org-mode style outline are confined to mutually exclusive regions (wrt their \"level\"), whereas layers can freely intermingle through the full extent of the document. To recover layers from an outline, you would need to not only have an operation that hides/shows everything at, say, level 2 *without* changing the parent's visibility, but you would need to have other \"levels\" under level 1 that actually sort of compare the same as 2, in the sense that they are always siblings, but distinct for the purposes of the global show/hide command. I'm not sure that would be enough, actually. Once you add the idea of arbitrary visibility, it's hard for me to think of it as hierarchical at all.\n\nLooked at another way, nesting induces a total order on the \"layers\" that may not be desirable.\n\nSo, I would argue layers are more general than nesting. Nesting is easily implemented in terms of layers (one per node), but nesting is not enough to implement layering without at least using weird hacks.",
        "user": "U016VUZGUUQ",
        "ts": "1598649095.127500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/Za",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The way I understood it, this sort of layering is very different from hierarchical nesting. The individually showable/hideable segments in an org-mode style outline are confined to mutually exclusive regions (wrt their \"level\"), whereas layers can freely intermingle through the full extent of the document. To recover layers from an outline, you would need to not only have an operation that hides/shows everything at, say, level 2 "
                            },
                            {
                                "type": "text",
                                "text": "without",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " changing the parent's visibility, but you would need to have other \"levels\" under level 1 that actually sort of compare the same as 2, in the sense that they are always siblings, but distinct for the purposes of the global show/hide command. I'm not sure that would be enough, actually. Once you add the idea of arbitrary visibility, it's hard for me to think of it as hierarchical at all.\n\nLooked at another way, nesting induces a total order on the \"layers\" that may not be desirable.\n\nSo, I would argue layers are more general than nesting. Nesting is easily implemented in terms of layers (one per node), but nesting is not enough to implement layering without at least using weird hacks."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1598502207.080100",
        "parent_user_id": "UG0EL18H3",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UG0EL18H3"
                ],
                "count": 1
            }
        ]
    }
]