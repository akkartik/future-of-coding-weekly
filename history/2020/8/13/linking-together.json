[
    {
        "client_msg_id": "C294616A-FA8D-4AA3-8067-54BCA5FB2878",
        "type": "message",
        "text": "in my continued quest to sin myself directly into hell with my side project, i realized that i wanted to have a member of an array replace itself as the result of a method call, and the natural way to do that seemed to be something like having the last line of the method be `this = newObject`. that\u2019s impossible in javascript\u2014`this` is immutable and i\u2019m not even sure how you\u2019d update all the references in a coherent way (although i\u2019m pretty sure it would make sense if you were doing enough pointer indirection). does anyone know of any cursed programming systems that let you do that kind of thing? i think there\u2019s kind of an analogy in terms of replacing a server at a certain domain\u2014all the hyperlinks stay pointing right at your new object",
        "user": "UHWC9PXBL",
        "ts": "1597350856.012300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1597366770.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DLr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in my continued quest to sin myself directly into hell with my side project, i realized that i wanted to have a member of an array replace itself as the result of a method call, and the natural way to do that seemed to be something like having the last line of the method be "
                            },
                            {
                                "type": "text",
                                "text": "this = newObject",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". that\u2019s impossible in javascript\u2014"
                            },
                            {
                                "type": "text",
                                "text": "this",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is immutable and i\u2019m not even sure how you\u2019d update all the references in a coherent way (although i\u2019m pretty sure it would make sense if you were doing enough pointer indirection). does anyone know of any cursed programming systems that let you do that kind of thing? i think there\u2019s kind of an analogy in terms of replacing a server at a certain domain\u2014all the hyperlinks stay pointing right at your new object"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597350856.012300",
        "reply_count": 8,
        "reply_users_count": 7,
        "latest_reply": "1597375958.025000",
        "reply_users": [
            "UEBG0NPDK",
            "UJN1TAYEQ",
            "U016VUZGUUQ",
            "UBN9AFS0N",
            "UC2A2ARPT",
            "UHWC9PXBL",
            "UA14TGLTC"
        ],
        "subscribed": true,
        "last_read": "1597375958.025000"
    },
    {
        "client_msg_id": "f9d17d8a-55cd-4452-bb37-af007c8b5eae",
        "type": "message",
        "text": "You want pointers rather than references. You\u2019d then change what\u2019s at the pointer\u2019s location, while leaving the pointer as is.",
        "user": "UEBG0NPDK",
        "ts": "1597351206.012500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vw8LK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You want pointers rather than references. You\u2019d then change what\u2019s at the pointer\u2019s location, while leaving the pointer as is."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597350856.012300",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "e4979d4f-0932-42d2-82cf-eacd041d3695",
        "type": "message",
        "text": "In C++ you write `*this = newObject;`.",
        "user": "UJN1TAYEQ",
        "ts": "1597352156.012700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "crA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In C++ you write "
                            },
                            {
                                "type": "text",
                                "text": "*this = newObject;",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597350856.012300",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "d7900213-8d47-4dab-ba45-371e6d4f8cf0",
        "type": "message",
        "text": "In JS, can you just delete all existing fields on this and update with your new object? It's probably possible to do similar things in Python, as long as your remember to update the prototype, class, etc.",
        "user": "U016VUZGUUQ",
        "ts": "1597352235.012900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H4T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In JS, can you just delete all existing fields on this and update with your new object? It's probably possible to do similar things in Python, as long as your remember to update the prototype, class, etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597350856.012300",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "597c8005-b72d-42b7-bfca-48c035d74151",
        "type": "message",
        "text": "<https://gbracha.blogspot.com/2009/07/miracle-of-become.html>",
        "user": "UBN9AFS0N",
        "ts": "1597352819.013100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "The Miracle of become:",
                "title_link": "https://gbracha.blogspot.com/2009/07/miracle-of-become.html",
                "text": "One of Smalltalk\u2019s most unique and powerful features is also one of the least known outside the Smalltalk community. It\u2019s a little method ca...",
                "fallback": "The Miracle of become:",
                "from_url": "https://gbracha.blogspot.com/2009/07/miracle-of-become.html",
                "service_icon": "https://gbracha.blogspot.com/favicon.ico",
                "service_name": "gbracha.blogspot.com",
                "id": 1,
                "original_url": "https://gbracha.blogspot.com/2009/07/miracle-of-become.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zvxM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://gbracha.blogspot.com/2009/07/miracle-of-become.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597350856.012300",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL",
                    "UML4ZEKDK",
                    "UA14TGLTC"
                ],
                "count": 4
            },
            {
                "name": "bangbang",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "421deaf3-3ee2-40c2-8f42-ab3920753e9d",
        "type": "message",
        "text": "You thinking something like `Array.prototype.map` but that mutates the array rather than returning a new array?\n\nOr are you thinking something like... `arr[x] = fn(arr[x])`, but where the function somehow knows about the array so that you can just call it like `fn(arr[x])` and it takes care of updating the array?\n\nOr are you basically asking for `become:`? Your domain / hyperlink example makes it seem like that's what you're after, and in this case the fact that arrays are involved is irrelevant.\n\nLet me know what you want the calling context to look like, and I'll see if I have anything in one of my dustier tomes.",
        "user": "UC2A2ARPT",
        "ts": "1597354031.013700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1597354603.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y57K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You thinking something like "
                            },
                            {
                                "type": "text",
                                "text": "Array.prototype.map",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " but that mutates the array rather than returning a new array?\n\nOr are you thinking something like... "
                            },
                            {
                                "type": "text",
                                "text": "arr[x] = fn(arr[x])",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but where the function somehow knows about the array so that you can just call it like "
                            },
                            {
                                "type": "text",
                                "text": "fn(arr[x])",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and it takes care of updating the array?\n\nOr are you basically asking for "
                            },
                            {
                                "type": "text",
                                "text": "become:",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "? Your domain / hyperlink example makes it seem like that's what you're after, and in this case the fact that arrays are involved is irrelevant.\n\nLet me know what you want the calling context to look like, and I'll see if I have anything in one of my dustier tomes."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597350856.012300",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "C7E958DE-6B3B-4355-B149-7F00BE42376B",
        "type": "message",
        "text": "<@UC2A2ARPT> it\u2019s more like `become` , i think.\n\nspecifically i\u2019m experimenting with going all out on the idea of message networks (making up this vocab as i go along)\u2014so instead of `map` or `cata`, i\u2019m seeing if i can do stuff like have arrays \u201cbroadcast\u201d messages to their children recursively. something like:\n\n`Array.prototype.broadcast = function(message) {\nthis.map(i =&gt; i.broadcast? i.broadcast(message) : i[message]())\n}`\n\nso ideally the objects in an array would update themselves in-place without having to reassign at the array-level/parent-level abstraction, if that makes sense\n\nturns out my mental model of references as \u201cpointers with extras\u201d was wrong lmao\u2014thank you <@UEBG0NPDK> \n\n<@UBN9AFS0N> this is gold i had never heard of `become` before thank you",
        "user": "UHWC9PXBL",
        "ts": "1597355212.023600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1597357941.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sgw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " it\u2019s more like "
                            },
                            {
                                "type": "text",
                                "text": "become",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " , i think.\n\nspecifically i\u2019m experimenting with going all out on the idea of message networks (making up this vocab as i go along)\u2014so instead of "
                            },
                            {
                                "type": "text",
                                "text": "map",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "cata",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", i\u2019m seeing if i can do stuff like have arrays \u201cbroadcast\u201d messages to their children recursively. something like:\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Array.prototype.broadcast = function(message) {\nthis.map(i => i.broadcast? i.broadcast(message) : i[message]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ")\n}",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\nso ideally the objects in an array would update themselves in-place without having to reassign at the array-level/parent-level abstraction, if that makes sense\n\nturns out my mental model of references as \u201cpointers with extras\u201d was wrong lmao\u2014thank you "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " \n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " this is gold i had never heard of "
                            },
                            {
                                "type": "text",
                                "text": "become",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " before thank you"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597350856.012300",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "2E1D831A-C72E-4719-A5FC-045708B9799F",
        "type": "message",
        "text": "sorry the formatting is screwy i\u2019m on my phone",
        "user": "UHWC9PXBL",
        "ts": "1597355224.024100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D7IS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "sorry the formatting is screwy i\u2019m on my phone"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1597350856.012300",
        "parent_user_id": "UHWC9PXBL"
    }
]