[
    {
        "client_msg_id": "D4833DFA-254A-4655-979B-C336175D9C10",
        "type": "message",
        "text": "i suspect that documentation is kind of like a wiki\u2014locally linear pages but globally a graph, with individual narratives referencing the same fragments more than once",
        "user": "UHWC9PXBL",
        "ts": "1604272639.132500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/pd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i suspect that documentation is kind of like a wiki\u2014locally linear pages but globally a graph, with individual narratives referencing the same fragments more than once"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU"
    },
    {
        "client_msg_id": "5374e27b-d520-45b8-a16f-9f2bb2f6ed36",
        "type": "message",
        "text": "First para: that's right.\n\nSecond para: if we spill `out` to the stack, then the assignment to it is kinda misleading. It looks like we're writing to a register but we're really writing to the stack. The only reason to expose registers is that many instructions have constraints on how many writes to memory they can perform. Memory variables that look like registers defeat the purpose.\n\nPerhaps I should just use a calling convention where outputs go to the stack rather than registers. I'll keep that in mind.\n\nPara 3: yes it's supposed to be checked. But it isn't currently. Having strong checks is the purpose of this issue.\n\nPara 4: I may well have to do that. It would be dashed inconvenient, though, to not be able to assign an output from nested blocks.\n\nMany thanks for all these comments! As always, follow-up questions appreciated.",
        "user": "UCUSW7WVD",
        "ts": "1604273716.132700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dJew",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "First para: that's right.\n\nSecond para: if we spill "
                            },
                            {
                                "type": "text",
                                "text": "out",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to the stack, then the assignment to it is kinda misleading. It looks like we're writing to a register but we're really writing to the stack. The only reason to expose registers is that many instructions have constraints on how many writes to memory they can perform. Memory variables that look like registers defeat the purpose.\n\nPerhaps I should just use a calling convention where outputs go to the stack rather than registers. I'll keep that in mind.\n\nPara 3: yes it's supposed to be checked. But it isn't currently. Having strong checks is the purpose of this issue.\n\nPara 4: I may well have to do that. It would be dashed inconvenient, though, to not be able to assign an output from nested blocks.\n\nMany thanks for all these comments! As always, follow-up questions appreciated."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604180931.125900",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "0684b6c1-ed5f-447c-a25e-41ef157eafc0",
        "type": "message",
        "text": "<@UEBG0NPDK>\n\n&gt; though when we tested it internally, people didn\u2019t like it for writing\nI'd be curious to learn more here! I'm especially curious if this something that could be _fixed_ if we worked towards interactions that feel good in that sort of medium, or if there's some underlying thing we can't jump over?\n\n<@U013ZLJARC7>\n\n&gt; I'd like to see tiled window manager-style auto layout\nInteresting, I'd love to hear more - currently I have a \"got to source in a new split\" set up in vim which sounds similar to what you're proposing (when exploring new codebases I usually have a lot of panes opened this way, ultrawide monitor really helps then) - feels like we could improve on this a lot if I wasn't limited by what vim can do.",
        "user": "UF6RLAL7J",
        "ts": "1604309593.133900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PXrn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "though when we tested it internally, people didn\u2019t like it for writing"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI'd be curious to learn more here! I'm especially curious if this something that could be "
                            },
                            {
                                "type": "text",
                                "text": "fixed",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " if we worked towards interactions that feel good in that sort of medium, or if there's some underlying thing we can't jump over?\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd like to see tiled window manager-style auto layout"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nInteresting, I'd love to hear more - currently I have a \"got to source in a new split\" set up in vim which sounds similar to what you're proposing (when exploring new codebases I usually have a lot of panes opened this way, ultrawide monitor really helps then) - feels like we could improve on this a lot if I wasn't limited by what vim can do."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU"
    },
    {
        "client_msg_id": "5aa484e6-754d-4519-baff-d414e47de6ae",
        "type": "message",
        "text": "I went on the Handmade Network podcast last week to talk about WhiteBox, the importance of rapid feedback, design guided by an understanding of both human &amp; computer capabilities, and the future of software dev tools. I brought up the Future of Coding community, Brett Victor/Dynamicland and hopefully a few other things of interest to people here.\nLet me know what you think :grin:\n\n&lt;<https://handmade.network/podcast/ep/6dc1dd60-3462-4ae6-b488-e61782ada691>&gt;\n&gt; Andrew Reece, creator of Handmade Network project WhiteBox (<https://whitebox.handmade.network>), a real-time debugging tool, joins us to discuss WhiteBox, low-level programming, improving the cycle of human-computer interaction both in the physical and software spaces, instant feedback, providing insight into the multiple dimensions that define a program and its effects, and the future of computing.",
        "user": "UEDDR6L5Q",
        "ts": "1604333763.136900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEDDR6L5Q",
            "ts": "1604333786.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "S9V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I went on the Handmade Network podcast last week to talk about WhiteBox, the importance of rapid feedback, design guided by an understanding of both human & computer capabilities, and the future of software dev tools. I brought up the Future of Coding community, Brett Victor/Dynamicland and hopefully a few other things of interest to people here.\nLet me know what you think "
                            },
                            {
                                "type": "emoji",
                                "name": "grin"
                            },
                            {
                                "type": "text",
                                "text": "\n\n<"
                            },
                            {
                                "type": "link",
                                "url": "https://handmade.network/podcast/ep/6dc1dd60-3462-4ae6-b488-e61782ada691"
                            },
                            {
                                "type": "text",
                                "text": ">\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Andrew Reece, creator of Handmade Network project WhiteBox ("
                            },
                            {
                                "type": "link",
                                "url": "https://whitebox.handmade.network"
                            },
                            {
                                "type": "text",
                                "text": "), a real-time debugging tool, joins us to discuss WhiteBox, low-level programming, improving the cycle of human-computer interaction both in the physical and software spaces, instant feedback, providing insight into the multiple dimensions that define a program and its effects, and the future of computing."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604333763.136900",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1604343920.138200",
        "reply_users": [
            "UEDDR6L5Q",
            "U013HU44GLS"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "U01661S9F34"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "43db7fef-bd13-4629-9847-f8928a7b1e69",
        "type": "message",
        "text": "I'm not used to talking about programming in general, so I'd also welcome constructive criticism :)",
        "user": "UEDDR6L5Q",
        "ts": "1604333920.137200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kfT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not used to talking about programming in general, so I'd also welcome constructive criticism :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604333763.136900",
        "parent_user_id": "UEDDR6L5Q"
    },
    {
        "client_msg_id": "3432fc75-02be-4f85-a926-0d269207a910",
        "type": "message",
        "text": "I want to mention gtoolkit (comes up here often, but relevant to this thread). It provides the \"column view\" of exploring a code/system down a specific path.\n\n<@U019PRL1BNU> some more feedback: I'm not sure drawing to code line is ideal. Just scrolling will cause the line to move and most lines will still be pinned to the top or bottom (out of view). However snapping the connection to the 'scroll bar location' which is more stable and visually provides the location of the sub-window in the parent window.\n\nOne issue I had browsing around was scrolling in the canvas vs scrolling within a window. Since it's the same shortcut, often I scroll in the window when I want to pan the canvas. Would be nice if I had to click to make it active first.",
        "user": "U8A5MS6R1",
        "ts": "1604342470.137500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eV/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I want to mention gtoolkit (comes up here often, but relevant to this thread). It provides the \"column view\" of exploring a code/system down a specific path.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "U019PRL1BNU"
                            },
                            {
                                "type": "text",
                                "text": " some more feedback: I'm not sure drawing to code line is ideal. Just scrolling will cause the line to move and most lines will still be pinned to the top or bottom (out of view). However snapping the connection to the 'scroll bar location' which is more stable and visually provides the location of the sub-window in the parent window.\n\nOne issue I had browsing around was scrolling in the canvas vs scrolling within a window. Since it's the same shortcut, often I scroll in the window when I want to pan the canvas. Would be nice if I had to click to make it active first."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU"
    },
    {
        "client_msg_id": "81f13e8b-f5d7-4f43-848c-c0f1720fb86d",
        "type": "message",
        "text": "<@UF6RLAL7J> <https://twitter.com/_paulshen/status/1277048920015699968> I always go to definition in split because I don\u2019t want to lose context where I\u2019m jumping from, especially if it\u2019s within the same file. \u201cJump lists\u201d is vim\u2019s native answer for this but because it\u2019s not visible, I don\u2019t trust it and feels like there\u2019s significant cognitive load. Like you suggest, there might a tweak here without going full canvas.\n\nVSCode has \u201cpeek\u201d windows but they feel too ephemeral to me and hard to navigate with keyboard.",
        "user": "U019PRL1BNU",
        "ts": "1604342900.137700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U019PRL1BNU",
            "ts": "1604353949.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8mdS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UF6RLAL7J"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/_paulshen/status/1277048920015699968"
                            },
                            {
                                "type": "text",
                                "text": " I always go to definition in split because I don\u2019t want to lose context where I\u2019m jumping from, especially if it\u2019s within the same file. \u201cJump lists\u201d is vim\u2019s native answer for this but because it\u2019s not visible, I don\u2019t trust it and feels like there\u2019s significant cognitive load. Like you suggest, there might a tweak here without going full canvas.\n\nVSCode has \u201cpeek\u201d windows but they feel too ephemeral to me and hard to navigate with keyboard."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UF6RLAL7J"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d73f5d96-638f-4e29-bea2-d4a3a57d5fc5",
        "type": "message",
        "text": "<@U8A5MS6R1> Oh yeah I misread your initial comment. I might give that a shot\n\nre: scrolling. I was thinking of adding a delay on editor hover before activating scroll and seeing how that felt. You can also spacebar+drag and middle-click drag to pan canvas to avoid scrolling.",
        "user": "U019PRL1BNU",
        "ts": "1604343189.138000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fGUGo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " Oh yeah I misread your initial comment. I might give that a shot\n\nre: scrolling. I was thinking of adding a delay on editor hover before activating scroll and seeing how that felt. You can also spacebar+drag and middle-click drag to pan canvas to avoid scrolling."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU"
    },
    {
        "client_msg_id": "2f00a1a4-1b6c-4d35-94af-faab1bacd376",
        "type": "message",
        "text": "Totally missed the fact that they were doing a podcast! That's great! Thanks for sharing",
        "user": "U013HU44GLS",
        "ts": "1604343920.138200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xGvq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Totally missed the fact that they were doing a podcast! That's great! Thanks for sharing"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604333763.136900",
        "parent_user_id": "UEDDR6L5Q",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UEDDR6L5Q"
                ],
                "count": 1
            }
        ]
    }
]