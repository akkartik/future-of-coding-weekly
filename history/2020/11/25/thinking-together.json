[
    {
        "client_msg_id": "e1dca560-d05a-4356-98d3-ee0077ac46fc",
        "type": "message",
        "text": "Haven't read Object Thinking. Based on reviews, it's all about the OOP and Smalltalk philosophy of programming. I would instead be interested in reading a hypothetical book called Value Thinking, about a non-formalist, human-centred approach to pure functional programming. The first 30 years of FP research resulted in some lovely, simple, dynamically typed FP languages that could be summarized in a few pages of text. Then Haskell happened, and now FP has morphed into this monstrously complex subject that is all about formalism, higher order type theory and category theory. One way of looking at my research is: FP for humans. My interest in Alexander comes from this perspective. So I'm looking to see if David West has ideas I can repurpose for this.",
        "user": "UJN1TAYEQ",
        "ts": "1606263240.109700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I19",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Haven't read Object Thinking. Based on reviews, it's all about the OOP and Smalltalk philosophy of programming. I would instead be interested in reading a hypothetical book called Value Thinking, about a non-formalist, human-centred approach to pure functional programming. The first 30 years of FP research resulted in some lovely, simple, dynamically typed FP languages that could be summarized in a few pages of text. Then Haskell happened, and now FP has morphed into this monstrously complex subject that is all about formalism, higher order type theory and category theory. One way of looking at my research is: FP for humans. My interest in Alexander comes from this perspective. So I'm looking to see if David West has ideas I can repurpose for this."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1603601936.277700",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "6a65bc73-853e-404a-88a6-89e011e25749",
        "type": "message",
        "text": "David West's web site looks like a good place to start: &lt;<http://davewest.us>&gt;. He is writing a book called \"The Design of Living Systems\" which sounds very Alexander-inspired (no summary is provided, just the title). The newer book \"Design Thinking\" also looks very Alexander inspired--table of contents mentions living systems, form, fit and unfolding. This book is also not available yet. However, there are online papers and videos, including \"Conversations with Alexander\". So I'm going to dive in now.",
        "user": "UJN1TAYEQ",
        "ts": "1606263748.109900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1606263880.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lyab",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "David West's web site looks like a good place to start: <"
                            },
                            {
                                "type": "link",
                                "url": "http://davewest.us"
                            },
                            {
                                "type": "text",
                                "text": ">. He is writing a book called \"The Design of Living Systems\" which sounds very Alexander-inspired (no summary is provided, just the title). The newer book \"Design Thinking\" also looks very Alexander inspired--table of contents mentions living systems, form, fit and unfolding. This book is also not available yet. However, there are online papers and videos, including \"Conversations with Alexander\". So I'm going to dive in now."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1603601936.277700",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "slightly_smiling_face",
                "users": [
                    "URKQXRCAC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "208eccb5-a314-446b-9e40-2f95e75a910d",
        "type": "message",
        "text": "Anyone have a good algorithms for minimum 2-dimensional diff? Input is 2 trimmed and clean CSVs (files don\u2019t end in \\n; lines don\u2019t end in ,; no quotes or escaping). (one note: There often is a varying number of columns in rows)\nExample, given the 2 inputs below, write efficient diff and patch methods and a nice diff encoding.\n```rank,color\n1,blue\n2,red\n3,green \n\nrank,color\n1,blue\n2,orange\n3,purple ```\nA nice diff format would also be helpful. Can\u2019t seem to find much on this yet, but there must be some stuff out there in the Spreadsheet/Finance world.",
        "user": "UMVFWPZ36",
        "ts": "1606273035.110500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uWU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Anyone have a good algorithms for minimum 2-dimensional diff? Input is 2 trimmed and clean CSVs (files don\u2019t end in \\n; lines don\u2019t end in ,; no quotes or escaping). (one note: There often is a varying number of columns in rows)\nExample, given the 2 inputs below, write efficient diff and patch methods and a nice diff encoding.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "rank,color\n1,blue\n2,red\n3,green \n\nrank,color\n1,blue\n2,orange\n3,purple "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A nice diff format would also be helpful. Can\u2019t seem to find much on this yet, but there must be some stuff out there in the Spreadsheet/Finance world."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606273035.110500",
        "reply_count": 4,
        "reply_users_count": 2,
        "latest_reply": "1606355425.133500",
        "reply_users": [
            "UN9SCH5RD",
            "UMVFWPZ36"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8cb87e2f-54ba-4e6d-b220-ece2f60ea7ae",
        "type": "message",
        "text": "I don't know any csv diff algorithms but there are a bunch of \"CSV diff\" implementations on github, maybe one of them works for you?\n\nOther idea: here's a cool article about diffing here: <https://neil.fraser.name/writing/diff/>:\n&gt; Any difference algorithm could theoretically process any input, regardless of whether it is split by characters, words or lines *(*)*. However, some difference algorithms are much more efficient at handling small tokens such as characters, others are much more efficient at handling large tokens such as lines.\n*: or rows?\n\nSo if you treat the grid as a sequence (cells instead of characters, using row width instead of line length, and having nth element at  Y * Width + X), perhaps one of the sequence diffs algos could yields better results than the others?",
        "user": "UN9SCH5RD",
        "ts": "1606279206.119300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wXVFw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't know any csv diff algorithms but there are a bunch of \"CSV diff\" implementations on github, maybe one of them works for you?\n\nOther idea: here's a cool article about diffing here: "
                            },
                            {
                                "type": "link",
                                "url": "https://neil.fraser.name/writing/diff/"
                            },
                            {
                                "type": "text",
                                "text": ":\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Any difference algorithm could theoretically process any input, regardless of whether it is split by characters, words or lines "
                            },
                            {
                                "type": "text",
                                "text": "(*)",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". However, some difference algorithms are much more efficient at handling small tokens such as characters, others are much more efficient at handling large tokens such as lines."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "*: or rows?\n\nSo if you treat the grid as a sequence (cells instead of characters, using row width instead of line length, and having nth element at  Y * Width + X), perhaps one of the sequence diffs algos could yields better results than the others?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606273035.110500",
        "parent_user_id": "UMVFWPZ36",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMVFWPZ36"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "cd386d29-c29d-49a7-a662-215765fdb443",
        "type": "message",
        "text": "What should the right notation be for the rotate (circular shift) operation?\n\nThis seems like an important question since the operation is common in cryptography, and since the ARM instruction set goes to great lengths to allow any instruction to perform it. But apparently there's never been a good notation for it:\n\n<https://stackoverflow.com/questions/32785998/symbol-for-bitwise-circular-shifts>\n\nDesirable properties:\n* Stop thinking in terms of shift. Every rotation left can also be viewed as a rotation right. It feels most natural to think of rotate(X, n) to mean \"X rotated to start at bit n.\"\n* No distracting ambiguous usage anywhere. Luckily we've already discarded '&lt;&lt;&lt;' above. `&lt;&gt;` has distracting connotations of inequality. Maybe `&gt;&lt;`?\n* Ideally just ascii characters. Though I suppose we could use one of the circular unicode arrows at a pinch.",
        "user": "UCUSW7WVD",
        "ts": "1606289697.124500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Stack Overflow",
                "title": "Symbol for bitwise circular shifts",
                "title_link": "https://stackoverflow.com/questions/32785998/symbol-for-bitwise-circular-shifts",
                "text": "C and some other languages have bitwise shifts. They usually have at least logical shifts (actually those are arithmetic when using them to signed integers and logical when integers are unsigned)[s...",
                "fallback": "Stack Overflow: Symbol for bitwise circular shifts",
                "thumb_url": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
                "from_url": "https://stackoverflow.com/questions/32785998/symbol-for-bitwise-circular-shifts",
                "thumb_width": 316,
                "thumb_height": 316,
                "service_icon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon.png?v=c78bd457575a",
                "id": 1,
                "original_url": "https://stackoverflow.com/questions/32785998/symbol-for-bitwise-circular-shifts"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VBesv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What should the right notation be for the rotate (circular shift) operation?\n\nThis seems like an important question since the operation is common in cryptography, and since the ARM instruction set goes to great lengths to allow any instruction to perform it. But apparently there's never been a good notation for it:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://stackoverflow.com/questions/32785998/symbol-for-bitwise-circular-shifts"
                            },
                            {
                                "type": "text",
                                "text": "\n\nDesirable properties:\n* Stop thinking in terms of shift. Every rotation left can also be viewed as a rotation right. It feels most natural to think of rotate(X, n) to mean \"X rotated to start at bit n.\"\n* No distracting ambiguous usage anywhere. Luckily we've already discarded '<<<' above. "
                            },
                            {
                                "type": "text",
                                "text": "<>",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " has distracting connotations of inequality. Maybe "
                            },
                            {
                                "type": "text",
                                "text": "><",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "?\n* Ideally just ascii characters. Though I suppose we could use one of the circular unicode arrows at a pinch."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606289697.124500",
        "reply_count": 17,
        "reply_users_count": 7,
        "latest_reply": "1606364482.138400",
        "reply_users": [
            "U016VUZGUUQ",
            "UCUSW7WVD",
            "UPX3PH28N",
            "U01EKU0UM24",
            "UJN1TAYEQ",
            "U015902ESJC",
            "UN9SCH5RD"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "d7d74029-b856-484b-9674-8fb84bdf490a",
        "type": "message",
        "text": "Maybe `&gt;@&gt;` and `&lt;@&lt;`, playing on how @ looks vaguely circular. Actually those would be a huge pain to type, putting the @ on one end or another would be less aggressively unergonomic.",
        "user": "U016VUZGUUQ",
        "ts": "1606294199.130000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J2SiJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe "
                            },
                            {
                                "type": "text",
                                "text": ">@>",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "<@<",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", playing on how @ looks vaguely circular. Actually those would be a huge pain to type, putting the @ on one end or another would be less aggressively unergonomic."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "23118da1-505a-4f70-af7c-efc133f1fbff",
        "type": "message",
        "text": "Yeah. I've been thinking of `&gt;|&lt;` which is also quite terrible on the fingers.",
        "user": "UCUSW7WVD",
        "ts": "1606294268.130300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9UCd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah. I've been thinking of "
                            },
                            {
                                "type": "text",
                                "text": ">|<",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " which is also quite terrible on the fingers."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "cfcc4b2f-30e3-4861-bd1c-e661e736356a",
        "type": "message",
        "text": "Also looks even more like a face, or a dragonfly. That could be a benefit or drawback depending on your perspective. ;)",
        "user": "U016VUZGUUQ",
        "ts": "1606294626.130500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zl2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also looks even more like a face, or a dragonfly. That could be a benefit or drawback depending on your perspective. ;)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "cc54a641-d150-47a0-9a10-1bf3259addbf",
        "type": "message",
        "text": "The horizontal symmetry is indeed an irksome distraction.",
        "user": "UCUSW7WVD",
        "ts": "1606294729.130700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P+V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The horizontal symmetry is indeed an irksome distraction."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "3ad80829-ed4a-4280-84bd-3639a5dccbd1",
        "type": "message",
        "text": "Maybe `&gt;^&lt;`? Still a dragonfly or butterfly.",
        "user": "UCUSW7WVD",
        "ts": "1606294785.130900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PoZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe "
                            },
                            {
                                "type": "text",
                                "text": ">^<",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "? Still a dragonfly or butterfly."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "ed499344-de40-425c-a358-a3c5f8e2c023",
        "type": "message",
        "text": "`&gt;-&lt;` is one shift less. That seems worth the horizontal symmetry.",
        "user": "UCUSW7WVD",
        "ts": "1606294880.131100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZV9T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": ">-<",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is one shift less. That seems worth the horizontal symmetry."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "f4f558ed-8af4-4adc-9706-6d50f47a853e",
        "type": "message",
        "text": "`rotate_right`",
        "user": "UPX3PH28N",
        "ts": "1606300326.131300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MNCd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "rotate_right",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "a0bc736a-a952-4f33-a913-b3e974eb86ec",
        "type": "message",
        "text": "I understand why you propose a symmetrical operator (because you can rotate left via rotate right). But I still find the symmetrical operators confusing\u2014that's still rotate right, but the operator does not show this",
        "user": "UPX3PH28N",
        "ts": "1606300691.131500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iejKs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I understand why you propose a symmetrical operator (because you can rotate left via rotate right). But I still find the symmetrical operators confusing\u2014that's still rotate right, but the operator does not show this"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "1a481bf4-dec9-4d5f-8d0d-ae5cfefa8e6a",
        "type": "message",
        "text": "How about &gt;&gt;&lt; and &gt;&lt;&lt;, they describe in what direction each bit goes if you imagine a 3-bit integer.",
        "user": "U01EKU0UM24",
        "ts": "1606301051.131700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xfA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How about >>< and ><<, they describe in what direction each bit goes if you imagine a 3-bit integer."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "U019CPED6T1"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "c0c355da-a232-43f2-ac54-1914909ceda7",
        "type": "message",
        "text": "My recommendation is to go with full name and is what Rust uses. Rust has many intrinsics\u2014functions that have special meaning for the compiler. Many operations that have special support in some processors are exposed as intrinsics. I very much like this approach as it allows you to use processor support when you need it, and you don't have to remember special syntax\n\n<https://doc.rust-lang.org/std/intrinsics/index.html|https://doc.rust-lang.org/std/intrinsics/index.html>",
        "user": "UPX3PH28N",
        "ts": "1606301345.131900",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "std::intrinsics - Rust",
                "title_link": "https://doc.rust-lang.org/std/intrinsics/index.html",
                "text": "API documentation for the Rust `intrinsics` mod in crate `std`.",
                "fallback": "std::intrinsics - Rust",
                "from_url": "https://doc.rust-lang.org/std/intrinsics/index.html",
                "service_icon": "https://doc.rust-lang.org/favicon.ico",
                "service_name": "doc.rust-lang.org",
                "id": 1,
                "original_url": "https://doc.rust-lang.org/std/intrinsics/index.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "liE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My recommendation is to go with full name and is what Rust uses. Rust has many intrinsics\u2014functions that have special meaning for the compiler. Many operations that have special support in some processors are exposed as intrinsics. I very much like this approach as it allows you to use processor support when you need it, and you don't have to remember special syntax\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://doc.rust-lang.org/std/intrinsics/index.html",
                                "text": "https://doc.rust-lang.org/std/intrinsics/index.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "4b6a0a4a-9ca5-478b-9f8a-8b55ea5f1d31",
        "type": "message",
        "text": "<@U016UDE58CF> I was careful to ask for a _notation_. It's not really possible to make a general recommendation like this that works in all contexts. Imagine designing <https://en.wikipedia.org/wiki/Salsa20> with pen and paper. I think having to write out `rotate_left` each time would hinder thought (<https://dl.acm.org/doi/pdf/10.1145/358896.358899>)\n\nIn this case the problem I'm working on is coming up with a reasonable representation of the ARM ISA. ARM binary operators all support one immediate operand that must fit in 12 bits. However the 12 bits are used in a strange way, starting with 8 bits and then using the remaining 4 to determine how to rotate it. The recommended \"universal assembly language\" for ARM is to just provide constants and let the toolchain give you errors like:\n\n```A1510E:Immediate 0x&lt;imm&gt; cannot be represented by 0-255 and a rotation```\n(<https://developer.arm.com/documentation/100074/0612/assembler-errors-and-warnings/list-of-the-armasm-error-and-warning-messages>)\n\nThis seems pretty lousy. I'd prefer something that's more \"correct by construction\", that's not one of these:\n\n```ADD Rd, Rn, 0xff, 4\nADD Rd, Rn, rotate_left(0xff, 4)```\n(I'm focusing on immediates just to simplify exposition. Making the second operand register-based opens up a larger can of worms.)\n\nTl;dr - There is nothing \"reduced\" about this RISC intruction set.",
        "user": "UCUSW7WVD",
        "ts": "1606327592.132300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OI/sM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U016UDE58CF"
                            },
                            {
                                "type": "text",
                                "text": " I was careful to ask for a "
                            },
                            {
                                "type": "text",
                                "text": "notation",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". It's not really possible to make a general recommendation like this that works in all contexts. Imagine designing "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Salsa20"
                            },
                            {
                                "type": "text",
                                "text": " with pen and paper. I think having to write out "
                            },
                            {
                                "type": "text",
                                "text": "rotate_left",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " each time would hinder thought ("
                            },
                            {
                                "type": "link",
                                "url": "https://dl.acm.org/doi/pdf/10.1145/358896.358899"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nIn this case the problem I'm working on is coming up with a reasonable representation of the ARM ISA. ARM binary operators all support one immediate operand that must fit in 12 bits. However the 12 bits are used in a strange way, starting with 8 bits and then using the remaining 4 to determine how to rotate it. The recommended \"universal assembly language\" for ARM is to just provide constants and let the toolchain give you errors like:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A1510E:Immediate 0x<imm> cannot be represented by 0-255 and a rotation"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n("
                            },
                            {
                                "type": "link",
                                "url": "https://developer.arm.com/documentation/100074/0612/assembler-errors-and-warnings/list-of-the-armasm-error-and-warning-messages"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nThis seems pretty lousy. I'd prefer something that's more \"correct by construction\", that's not one of these:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ADD Rd, Rn, 0xff, 4\nADD Rd, Rn, rotate_left(0xff, 4)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n(I'm focusing on immediates just to simplify exposition. Making the second operand register-based opens up a larger can of worms.)\n\nTl;dr - There is nothing \"reduced\" about this RISC intruction set."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "25da73fb-75a3-4383-869e-5f380fd11b4c",
        "type": "message",
        "text": "In case anyone else ever is ever looking at this sort of problem. The good resources I was pointed to are: <https://en.wikipedia.org/wiki/Polygon_covering> ..Daff: <http://paulfitz.github.io/daff/> ... and <https://specs.frictionlessdata.io/tabular-diff/>",
        "user": "UMVFWPZ36",
        "ts": "1606340892.132600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zpIpD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In case anyone else ever is ever looking at this sort of problem. The good resources I was pointed to are: "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Polygon_covering"
                            },
                            {
                                "type": "text",
                                "text": " ..Daff: "
                            },
                            {
                                "type": "link",
                                "url": "http://paulfitz.github.io/daff/"
                            },
                            {
                                "type": "text",
                                "text": " ... and "
                            },
                            {
                                "type": "link",
                                "url": "https://specs.frictionlessdata.io/tabular-diff/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606273035.110500",
        "parent_user_id": "UMVFWPZ36",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UN9SCH5RD"
                ],
                "count": 1
            }
        ]
    }
]