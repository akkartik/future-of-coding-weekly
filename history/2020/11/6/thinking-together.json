[
    {
        "client_msg_id": "6cecb36d-67d2-4afd-9d3a-8d805de52b6c",
        "type": "message",
        "text": "I have a problem and it goes like this: I need to implement a client for a client-server interaction over a specific protocol. Now I only have a loose document ( yeah I Know..) which documents the protocol. How would you approach to implement the server? I mean can you share any experiences similar or ideas on how to test the Interaction as \"best\" as possible? How would you test client - server interactions in general? using queues and state machines? When I'm trying to google for potential solutions or advice I'm \"seeing\"  by the quality of the results that I don't use the right search terms. Any resources or advice appreciated!",
        "user": "UJFN50C00",
        "ts": "1604658427.344100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n5aR5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have a problem and it goes like this: I need to implement a client for a client-server interaction over a specific protocol. Now I only have a loose document ( yeah I Know..) which documents the protocol. How would you approach to implement the server? I mean can you share any experiences similar or ideas on how to test the Interaction as \"best\" as possible? How would you test client - server interactions in general? using queues and state machines? When I'm trying to google for potential solutions or advice I'm \"seeing\"  by the quality of the results that I don't use the right search terms. Any resources or advice appreciated!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604658427.344100",
        "reply_count": 6,
        "reply_users_count": 3,
        "latest_reply": "1604677577.345200",
        "reply_users": [
            "UBN9AFS0N",
            "UJFN50C00",
            "UCUSW7WVD"
        ],
        "subscribed": true,
        "last_read": "1604677577.345200"
    },
    {
        "client_msg_id": "a447ea74-6161-42ea-8dbf-7b27b121af93",
        "type": "message",
        "text": "if you can sniff the traffic between the client and server of another implementation it would be easy to reverse engineer",
        "user": "UBN9AFS0N",
        "ts": "1604661142.344200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hHCl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if you can sniff the traffic between the client and server of another implementation it would be easy to reverse engineer"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604658427.344100",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "8fd4be4d-6db5-4790-8d07-0a67bf22a249",
        "type": "message",
        "text": "<https://www.wireshark.org/>",
        "user": "UBN9AFS0N",
        "ts": "1604661154.344400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EtM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.wireshark.org/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604658427.344100",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "c0657799-902a-4797-925c-e9b58be4ab3a",
        "type": "message",
        "text": "Thank you for suggesting wire shark",
        "user": "UJFN50C00",
        "ts": "1604673848.344600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CA3ow",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you for suggesting wire shark"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604658427.344100",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "6ded3778-04a7-4909-b1ee-4d8f3f7ea981",
        "type": "message",
        "text": "I think I'm looking more for ways how to test the protocol without having the real server available.",
        "user": "UJFN50C00",
        "ts": "1604673908.344800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M7S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think I'm looking more for ways how to test the protocol without having the real server available."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604658427.344100",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "a89827f8-dcee-4749-81d0-f642788617a3",
        "type": "message",
        "text": "Another 'wire' might be useful: wiremock.",
        "user": "UCUSW7WVD",
        "ts": "1604677508.345000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kbGp3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another 'wire' might be useful: wiremock."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604658427.344100",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "c802f326-3630-4c27-8d64-a986a317be07",
        "type": "message",
        "text": "Sorry, scratch that. <http://wiremock.org|http://wiremock.org> assumes tcp and http.",
        "user": "UCUSW7WVD",
        "ts": "1604677577.345200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "WireMock",
                "title_link": "http://wiremock.org/",
                "text": "WireMock is a flexible API mocking tool for fast, robust and comprehensive testing.",
                "fallback": "WireMock",
                "from_url": "http://wiremock.org/",
                "service_icon": "http://wiremock.org/images/favicon3.png",
                "service_name": "wiremock.org",
                "id": 1,
                "original_url": "http://wiremock.org"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z68",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sorry, scratch that. "
                            },
                            {
                                "type": "link",
                                "url": "http://wiremock.org",
                                "text": "http://wiremock.org"
                            },
                            {
                                "type": "text",
                                "text": " assumes tcp and http."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604658427.344100",
        "parent_user_id": "UJFN50C00"
    },
    {
        "client_msg_id": "9ea8078c-4f37-44ed-add4-882a6d71044b",
        "type": "message",
        "text": "<@USUMN6XLH> extremely late to this but check out Mary Beth Kery's work like Variolite <https://marybethkery.com/projects/Verdant/variolite-supporting-exploratory-programming.pdf>",
        "user": "UFQQ3P867",
        "ts": "1604680663.345500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K41g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "USUMN6XLH"
                            },
                            {
                                "type": "text",
                                "text": " extremely late to this but check out Mary Beth Kery's work like Variolite "
                            },
                            {
                                "type": "link",
                                "url": "https://marybethkery.com/projects/Verdant/variolite-supporting-exploratory-programming.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1586957244.445200",
        "parent_user_id": "USUMN6XLH"
    },
    {
        "client_msg_id": "0fee7c7a-5a14-455c-a68d-6f7ec81e58e6",
        "type": "message",
        "text": "<@UDQBTJ211> sure, but if you follow the approach of funding a specific person or team for a certain amount of time, rather than a specific idea you'd free up a lot of people to work on potentially better ideas.  Side projects both assume a lot of free time and being willing and able to use that free time to work on the side project.  It also limits the scope of projects to things that can make reasonable progress as side projects, or decelerates the timeline for those projects",
        "user": "UBSMEUXAA",
        "ts": "1604681760.345800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "owa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDQBTJ211"
                            },
                            {
                                "type": "text",
                                "text": " sure, but if you follow the approach of funding a specific person or team for a certain amount of time, rather than a specific idea you'd free up a lot of people to work on potentially better ideas.  Side projects both assume a lot of free time and being willing and able to use that free time to work on the side project.  It also limits the scope of projects to things that can make reasonable progress as side projects, or decelerates the timeline for those projects"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604318514.326800",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UDQBTJ211"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "06dc1b1f-4033-4694-b1e2-d767a89df22f",
        "type": "message",
        "text": "There was actually some good discussion of funding the research into _tools for thought_ on the Metamuse podcast (from the Muse / Ink &amp; Switch folks), in the episode with <https://podcasts.apple.com/us/podcast/12-growing-ideas-with-andy-matuschak/id1504506097?i=1000489931276|Andy Matuschak>. Discussion on this subject starts at 46:40, but the whole episode is great.\n\nThey talk about borrowing ideas from the indie games world, self-funding via Patreon, collecting donations for the \"public goods\" part of research (papers, ideas, etc) while still working on proprietary commercial software, how PARC was funded relative to the rest of the industry at the time, how the industry has changed since and what that means for funding research, etc.",
        "user": "UC2A2ARPT",
        "ts": "1604689339.346000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1604689368.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TV0K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There was actually some good discussion of funding the research into "
                            },
                            {
                                "type": "text",
                                "text": "tools for thought",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " on the Metamuse podcast (from the Muse / Ink & Switch folks), in the episode with "
                            },
                            {
                                "type": "link",
                                "url": "https://podcasts.apple.com/us/podcast/12-growing-ideas-with-andy-matuschak/id1504506097?i=1000489931276",
                                "text": "Andy Matuschak"
                            },
                            {
                                "type": "text",
                                "text": ". Discussion on this subject starts at 46:40, but the whole episode is great.\n\nThey talk about borrowing ideas from the indie games world, self-funding via Patreon, collecting donations for the \"public goods\" part of research (papers, ideas, etc) while still working on proprietary commercial software, how PARC was funded relative to the rest of the industry at the time, how the industry has changed since and what that means for funding research, etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604318514.326800",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UDQBTJ211",
                    "UDQKHNP51"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "1fd14bc9-62a5-458f-a9b1-4bfad1f2f72a",
        "type": "message",
        "text": "I was just pair programming with one of my team members and we were trying to reason about the implementation of a particular code snippet, but we kept getting bogged down by the actual implementation details rather than the \u201chigh level\u201d process design (bad/outdated names, obtuse API calls, all the usual suspects). Out of sheer frustration, I copied the snippet (~100 loc) into a blank text document, replaced all the variable names with sentences describing what they contain, replaced all function calls with a description of what the function does and the data it operates on, and then sent it back. I left in syntax like variable declarations, return statements, array destructuring operations and array methods (map, filter, etc). Within 5 minutes we were able to have a reasonably productive conversation about the process and how we could refactor it, and it just seemed like it really \u201cclicked\u201d for both of us. It was the closest experience I\u2019ve come to in terms of having a \u201cshared mental model\u201d. So I\u2019m curious: is there anyone in this group working on tools for writing and reasoning about pseudocode?",
        "user": "UG0EL18H3",
        "ts": "1604697998.353700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UG0EL18H3",
            "ts": "1604698022.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TO/Q/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was just pair programming with one of my team members and we were trying to reason about the implementation of a particular code snippet, but we kept getting bogged down by the actual implementation details rather than the \u201chigh level\u201d process design (bad/outdated names, obtuse API calls, all the usual suspects). Out of sheer frustration, I copied the snippet (~100 loc) into a blank text document, replaced all the variable names with sentences describing what they contain, replaced all function calls with a description of what the function does and the data it operates on, and then sent it back. I left in syntax like variable declarations, return statements, array destructuring operations and array methods (map, filter, etc). Within 5 minutes we were able to have a reasonably productive conversation about the process and how we could refactor it, and it just seemed like it really \u201cclicked\u201d for both of us. It was the closest experience I\u2019ve come to in terms of having a \u201cshared mental model\u201d. So I\u2019m curious: is there anyone in this group working on tools for writing and reasoning about pseudocode?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604697998.353700",
        "reply_count": 10,
        "reply_users_count": 7,
        "latest_reply": "1604896199.379300",
        "reply_users": [
            "UEBG0NPDK",
            "USH01JEDQ",
            "UE1JQM9HQ",
            "UG0EL18H3",
            "U5STGTB3J",
            "UHWC9PXBL",
            "UKJGU23KP"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "wave",
                "users": [
                    "UEBG0NPDK"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U01E8D4TS7M",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "8f023fbe-b81e-43a1-820a-7dc8ac05edcd",
        "type": "message",
        "text": "We\u2019re working on making those pseudocode lines into the actual code :slightly_smiling_face:",
        "user": "UEBG0NPDK",
        "ts": "1604698144.354000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UVkhT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We\u2019re working on making those pseudocode lines into the actual code "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604697998.353700",
        "parent_user_id": "UG0EL18H3",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UHZUS56SV"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "bc0e6fee-d8c5-43c2-bc0f-d5508f79b085",
        "type": "message",
        "text": "I'm a big fan of: write the pseudocode bullets, leave the pseudocode bullets",
        "user": "USH01JEDQ",
        "ts": "1604698224.354200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IfdP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm a big fan of: write the pseudocode bullets, leave the pseudocode bullets"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604697998.353700",
        "parent_user_id": "UG0EL18H3"
    },
    {
        "client_msg_id": "6f2002fb-0e1f-4405-a48a-d07ff3f2d179",
        "type": "message",
        "text": "Why does it have to be pseudocode? I believe what you want is a narrative about the code.",
        "user": "UE1JQM9HQ",
        "ts": "1604699103.354400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3FkK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Why does it have to be pseudocode? I believe what you want is a narrative about the code."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604697998.353700",
        "parent_user_id": "UG0EL18H3"
    },
    {
        "client_msg_id": "d6dfa5ec-e7e1-40d1-9f68-b3f0b828df60",
        "type": "message",
        "text": "<@UEBG0NPDK> That seems like the common-sense approach: I suppose I tend to think of pseudocode less as a \u201cprogramming\u201d medium where it would eventually (either rapidly or over time) get crystallized into a working implementation, and more as an \u201crapid communication medium\u201d where you could dip in, sketch out an idea, and get others on the same page. It seems to me like the difference between using Photoshop and using a whiteboard to have a high-level design conversation: the ephemeral nature of a whiteboard conversation allow for rapid iteration and communication, but it\u2019s not like I would ever want to take that whiteboard drawing and paste it into Photoshop to try and tweak it. Similarly, I wouldn\u2019t want to stand around Photoshop talking about design ideas because the tool is simply too \u201cheavy\u201d for the task. <@USH01JEDQ> \u201ccomment-oriented programming\u201d is something I do frequently, I keep going back to this thread from a few months ago: <https://futureofcoding.slack.com/archives/C5T9GPWFL/p1586957244445200>. <@UE1JQM9HQ> I think that\u2019s a nice way to characterize it: perhaps the term \u201cpseudocode\u201d is a bit loaded in this context\u2026",
        "user": "UG0EL18H3",
        "ts": "1604699318.354600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1586957244445200",
                "fallback": "[April 15th, 2020 6:27 AM] joshchonpc: Are there any languages with explicit focus (and philosophy) around intermediary steps between ideas and working code? Modern programming languages feel like I must, in part, produce completed structures of code, rather than brainstorming and exploring. Programming inevitably alternates the code from working to not working to working to not working, etc, and we would benefit from languages that were more explicit about facilitating the \u2018not working\u2019 states. From my rough intuition, the \u2018not working\u2019 states of code outweigh \u2018working\u2019 state in terms of time and importance (e.g. compiler for code that is exploratory but does not work).\n\nREPL, for a very simple idea, is praised so much (and so widely used) perhaps for this reason \u2014 it facilitates intermediate steps. This would be a rough parallel to how Bret Victor mentions that \u201cideas are important\u201d to him. I looked at <https://medium.com/bits-and-behavior/four-years-of-studying-exploratory-programming-4656586b1d3b|Exploratory Programming>, but it doesn\u2019t seem to capture exactly what I want (i.e. goes a bit too shallow).\n\nEDIT: Also relevant, <http://tomasp.net/histogram/|Histogram> and <https://youtu.be/X36ye-1x_HQ?t=1273|Type-driven Development>",
                "ts": "1586957244.445200",
                "author_id": "USUMN6XLH",
                "author_subname": "Josh Cho",
                "channel_id": "C5T9GPWFL",
                "channel_name": "thinking-together",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "Are there any languages with explicit focus (and philosophy) around intermediary steps between ideas and working code? Modern programming languages feel like I must, in part, produce completed structures of code, rather than brainstorming and exploring. Programming inevitably alternates the code from working to not working to working to not working, etc, and we would benefit from languages that were more explicit about facilitating the \u2018not working\u2019 states. From my rough intuition, the \u2018not working\u2019 states of code outweigh \u2018working\u2019 state in terms of time and importance (e.g. compiler for code that is exploratory but does not work).\n\nREPL, for a very simple idea, is praised so much (and so widely used) perhaps for this reason \u2014 it facilitates intermediate steps. This would be a rough parallel to how Bret Victor mentions that \u201cideas are important\u201d to him. I looked at <https://medium.com/bits-and-behavior/four-years-of-studying-exploratory-programming-4656586b1d3b|Exploratory Programming>, but it doesn\u2019t seem to capture exactly what I want (i.e. goes a bit too shallow).\n\nEDIT: Also relevant, <http://tomasp.net/histogram/|Histogram> and <https://youtu.be/X36ye-1x_HQ?t=1273|Type-driven Development>",
                "author_name": "Josh Cho",
                "author_link": "https://futureofcoding.slack.com/team/USUMN6XLH",
                "author_icon": "https://avatars.slack-edge.com/2020-01-26/922460775044_8a3bc278696f955af590_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1586957244445200",
                "footer": "Thread in #thinking-together"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rX2N1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " That seems like the common-sense approach: I suppose I tend to think of pseudocode less as a \u201cprogramming\u201d medium where it would eventually (either rapidly or over time) get crystallized into a working implementation, and more as an \u201crapid communication medium\u201d where you could dip in, sketch out an idea, and get others on the same page. It seems to me like the difference between using Photoshop and using a whiteboard to have a high-level design conversation: the ephemeral nature of a whiteboard conversation allow for rapid iteration and communication, but it\u2019s not like I would ever want to take that whiteboard drawing and paste it into Photoshop to try and tweak it. Similarly, I wouldn\u2019t want to stand around Photoshop talking about design ideas because the tool is simply too \u201cheavy\u201d for the task. "
                            },
                            {
                                "type": "user",
                                "user_id": "USH01JEDQ"
                            },
                            {
                                "type": "text",
                                "text": " \u201ccomment-oriented programming\u201d is something I do frequently, I keep going back to this thread from a few months ago: "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1586957244445200"
                            },
                            {
                                "type": "text",
                                "text": ". "
                            },
                            {
                                "type": "user",
                                "user_id": "UE1JQM9HQ"
                            },
                            {
                                "type": "text",
                                "text": " I think that\u2019s a nice way to characterize it: perhaps the term \u201cpseudocode\u201d is a bit loaded in this context\u2026"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604697998.353700",
        "parent_user_id": "UG0EL18H3"
    },
    {
        "client_msg_id": "429fd501-305b-4de7-ac05-a07c08b67449",
        "type": "message",
        "text": "I think that difference largely comes from the ability to be much more implicit on a white board than in photoshop. In some sense you\u2019re painting in broad strokes and then filling in the detail later. It\u2019s possible to build a programming system that enables a similar flow. It just requires allowing for implication and ambiguity so you can layout the idea before fully realizing it. That\u2019s a research-level problem, but our approach seems to be pretty promising so far. :slightly_smiling_face:",
        "user": "UEBG0NPDK",
        "ts": "1604699712.354900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ANZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think that difference largely comes from the ability to be much more implicit on a white board than in photoshop. In some sense you\u2019re painting in broad strokes and then filling in the detail later. It\u2019s possible to build a programming system that enables a similar flow. It just requires allowing for implication and ambiguity so you can layout the idea before fully realizing it. That\u2019s a research-level problem, but our approach seems to be pretty promising so far. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604697998.353700",
        "parent_user_id": "UG0EL18H3",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UG0EL18H3",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    }
]