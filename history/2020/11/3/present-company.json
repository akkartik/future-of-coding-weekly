[
    {
        "client_msg_id": "73c96669-1095-4e1e-b5aa-4956887a6e25",
        "type": "message",
        "text": "\"C is not a Low-Level Language\"\n\n<https://queue.acm.org/detail.cfm?id=3212479|https://queue.acm.org/detail.cfm?id=3212479>\n\nThe author argues that C does not have the low-level properties that programmers argue it has, anymore.\nThe underlying hardware changed so much that the mapping to it has become increasingly complex.",
        "user": "UFZFETUH1",
        "ts": "1604393072.077100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "C Is Not a Low-level Language - ACM Queue",
                "title_link": "https://queue.acm.org/detail.cfm?id=3212479",
                "text": "In the wake of the recent Meltdown and Spectre vulnerabilities, it",
                "fallback": "C Is Not a Low-level Language - ACM Queue",
                "from_url": "https://queue.acm.org/detail.cfm?id=3212479",
                "service_icon": "https://queue.acm.org/favicon.ico",
                "service_name": "queue.acm.org",
                "id": 1,
                "original_url": "https://queue.acm.org/detail.cfm?id=3212479"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A1rx0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"C is not a Low-Level Language\"\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://queue.acm.org/detail.cfm?id=3212479",
                                "text": "https://queue.acm.org/detail.cfm?id=3212479"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe author argues that C does not have the low-level properties that programmers argue it has, anymore.\nThe underlying hardware changed so much that the mapping to it has become increasingly complex."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604393072.077100",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1604432247.078300",
        "reply_users": [
            "UKFNXF0F9",
            "U01DUNFS2N4"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UGYGY18UX",
                    "UKFNXF0F9",
                    "UBSMEUXAA",
                    "U01DUNFS2N4",
                    "UA14TGLTC"
                ],
                "count": 5
            }
        ]
    },
    {
        "client_msg_id": "fc8f80fc-e3e2-4a4c-a191-32fb726db2c4",
        "type": "message",
        "text": "the new language should have a better world view of \"storage\". There is no \"the heap\", but different kinds of storage, even includes disk and remote device.",
        "user": "UKFNXF0F9",
        "ts": "1604415116.077600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Lhh2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the new language should have a better world view of \"storage\". There is no \"the heap\", but different kinds of storage, even includes disk and remote device."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604393072.077100",
        "parent_user_id": "UFZFETUH1"
    },
    {
        "client_msg_id": "93f4dc4c-752c-4877-8a09-9696f0581e93",
        "type": "message",
        "text": "another trend is alternative call stack support other than os thread, including coroutine and spmd programming.",
        "user": "UKFNXF0F9",
        "ts": "1604415636.077800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q4Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "another trend is alternative call stack support other than os thread, including coroutine and spmd programming."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604393072.077100",
        "parent_user_id": "UFZFETUH1",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UBSMEUXAA"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d25d7ebe-1564-4414-9ac2-05526160a741",
        "type": "message",
        "text": "I've had some ideas in the back of my head for a while about pushing the abstractions that the hardware to look like the abstractions we need to make fast persistent data structures (immutable.js or clojure's data structures). I'm not a hardware designer by trade, though I've dabbled a bit. Anyone here know if that's a feasible project? I'm not asking for lisp machines btw :slightly_smiling_face:, just wondering if we could make gains by adding hardware functionality for persistent trees.",
        "user": "U01DUNFS2N4",
        "ts": "1604432247.078300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3=Uj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've had some ideas in the back of my head for a while about pushing the abstractions that the hardware to look like the abstractions we need to make fast persistent data structures (immutable.js or clojure's data structures). I'm not a hardware designer by trade, though I've dabbled a bit. Anyone here know if that's a feasible project? I'm not asking for lisp machines btw "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": ", just wondering if we could make gains by adding hardware functionality for persistent trees."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604393072.077100",
        "parent_user_id": "UFZFETUH1"
    }
]