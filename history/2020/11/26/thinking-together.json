[
    {
        "client_msg_id": "f2c957ec-8ad8-467c-a114-09c2d1db53f8",
        "type": "message",
        "text": "You want a concise notation for a function that is naturally called `rotate(X,n)`. Suggestions:\n\u2022 n`\u233d`X -- the APL rotate operator. APL was originally a mathematical notation, and was only later turned into a programming language.\n\u2022 n `&lt;|&gt;` X -- an ASCII approximation of the above.\n\u2022 n `rot` X -- yes, this is a notation, just as `sin x` is mathematical notation for the sine function.",
        "user": "UJN1TAYEQ",
        "ts": "1606348796.132800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mJ=uK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You want a concise notation for a function that is naturally called "
                            },
                            {
                                "type": "text",
                                "text": "rotate(X,n)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Suggestions:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "n"
                                    },
                                    {
                                        "type": "text",
                                        "text": "\u233d",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "X -- the APL rotate operator. APL was originally a mathematical notation, and was only later turned into a programming language."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "n "
                                    },
                                    {
                                        "type": "text",
                                        "text": "<|>",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " X -- an ASCII approximation of the above."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "n "
                                    },
                                    {
                                        "type": "text",
                                        "text": "rot",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " X -- yes, this is a notation, just as "
                                    },
                                    {
                                        "type": "text",
                                        "text": "sin x",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " is mathematical notation for the sine function."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U019CPED6T1"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "a517ff17-d4ef-4d05-ae8a-4f6f7cc8e3d8",
        "type": "message",
        "text": "How about `n -o X` or `n o- X`. Think of that as a wheel with a tail. Or possibly `n o! X` or `n !o X`.",
        "user": "U015902ESJC",
        "ts": "1606354193.133000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v6o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How about "
                            },
                            {
                                "type": "text",
                                "text": "n -o X",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "n o- X",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Think of that as a wheel with a tail. Or possibly "
                            },
                            {
                                "type": "text",
                                "text": "n o! X",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "n !o X",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "ca369745-ace0-49aa-b78b-c2b8d2d63bc6",
        "type": "message",
        "text": "interesting, how's the polygon covering related? Is it more about the presentation of the diff than the diffing itself?",
        "user": "UN9SCH5RD",
        "ts": "1606354526.133200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oah",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "interesting, how's the polygon covering related? Is it more about the presentation of the diff than the diffing itself?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606273035.110500",
        "parent_user_id": "UMVFWPZ36"
    },
    {
        "client_msg_id": "c97ffba5-c151-45ed-8516-cf766223da71",
        "type": "message",
        "text": "I wish daff had a brief description of the algorithm it uses. It seems highly concerned with \"finding alignment\" <https://github.com/paulfitz/daff/blob/master/coopy/CompareTable.hx>",
        "user": "UN9SCH5RD",
        "ts": "1606355425.133500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "paulfitz/daff",
                "title_link": "https://github.com/paulfitz/daff/blob/master/coopy/CompareTable.hx",
                "text": "align and compare tables. Contribute to paulfitz/daff development by creating an account on GitHub.",
                "fallback": "GitHub: paulfitz/daff",
                "thumb_url": "https://avatars2.githubusercontent.com/u/118367?s=400&v=4",
                "from_url": "https://github.com/paulfitz/daff/blob/master/coopy/CompareTable.hx",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/paulfitz/daff/blob/master/coopy/CompareTable.hx"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MoH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wish daff had a brief description of the algorithm it uses. It seems highly concerned with \"finding alignment\" "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/paulfitz/daff/blob/master/coopy/CompareTable.hx"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606273035.110500",
        "parent_user_id": "UMVFWPZ36"
    },
    {
        "client_msg_id": "ab3ccc48-2f4b-4667-a9e5-d0ec368b37cc",
        "type": "message",
        "text": "An old thread I wish I could link to:\n\n&gt; Consider the powerful, time-honored environment that gives us many \u201csmall programs, each doing one thing well\u201d, the Unix shell. There is a `cut` command, a `sort` command, and many more. A versatile collection of blocks that I can snap together in different ways (yay pipes!). There isn\u2019t much duplication of commands and the environment seems to have nice composition properties.\n&gt; \n&gt; But it only goes so far.\n&gt; \n&gt; If I write a program in Unix using Java or Python, can I reuse the Unix `sort` to sort an array of items inside my program? Of course not, what an improper question! The decent choice is to reimplement sorting in my program (or use the standard library where someone else has already re-implemented it).\n&gt; \n&gt; _The computer already knows how to sort things, why do I need to tell it again?_\n-- <@U8A5MS6R1> (<https://shalabh.com/programmable-systems/on-composition.html>)\n\nFrom the inventor of shells:\n\n&gt; I felt that commands should be usable as library subroutines, or vice versa. This stemmed from my practice of writing CTSS [OS] commands in MAD, a simplified Algol-like language. It was much faster and the code was more maintainable than IBM 7094 assembly code. Since I needed MAD-friendly subroutine calls to access CTSS primitives, I wrote in assembly code a battery of interface subroutines, which very often mimicked CTSS basic command functions. I felt it was an awkward duplication of effort. However, I did not go further in the context of CTSS.\n-- Louis Pouzin (<https://multicians.org/shell.html>)",
        "user": "UCUSW7WVD",
        "ts": "1606359276.136400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1606359332.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/eJD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "An old thread I wish I could link to:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Consider the powerful, time-honored environment that gives us many \u201csmall programs, each doing one thing well\u201d, the Unix shell. There is a "
                            },
                            {
                                "type": "text",
                                "text": "cut",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " command, a "
                            },
                            {
                                "type": "text",
                                "text": "sort",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " command, and many more. A versatile collection of blocks that I can snap together in different ways (yay pipes!). There isn\u2019t much duplication of commands and the environment seems to have nice composition properties.\n\nBut it only goes so far.\n\nIf I write a program in Unix using Java or Python, can I reuse the Unix "
                            },
                            {
                                "type": "text",
                                "text": "sort",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to sort an array of items inside my program? Of course not, what an improper question! The decent choice is to reimplement sorting in my program (or use the standard library where someone else has already re-implemented it).\n\n"
                            },
                            {
                                "type": "text",
                                "text": "The computer already knows how to sort things, why do I need to tell it again?",
                                "style": {
                                    "italic": true
                                }
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n-- "
                            },
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " ("
                            },
                            {
                                "type": "link",
                                "url": "https://shalabh.com/programmable-systems/on-composition.html"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nFrom the inventor of shells:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I felt that commands should be usable as library subroutines, or vice versa. This stemmed from my practice of writing CTSS [OS] commands in MAD, a simplified Algol-like language. It was much faster and the code was more maintainable than IBM 7094 assembly code. Since I needed MAD-friendly subroutine calls to access CTSS primitives, I wrote in assembly code a battery of interface subroutines, which very often mimicked CTSS basic command functions. I felt it was an awkward duplication of effort. However, I did not go further in the context of CTSS."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n-- Louis Pouzin ("
                            },
                            {
                                "type": "link",
                                "url": "https://multicians.org/shell.html"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606359276.136400",
        "reply_count": 39,
        "reply_users_count": 10,
        "latest_reply": "1606695749.168800",
        "reply_users": [
            "UN9SCH5RD",
            "U013ZLJARC7",
            "UJFN50C00",
            "USH01JEDQ",
            "U016VUZGUUQ",
            "UCUSW7WVD",
            "UA14TGLTC",
            "U8A5MS6R1",
            "UHWC9PXBL",
            "UMVFWPZ36"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U016VUZGUUQ",
                    "U8A5MS6R1",
                    "U015902ESJC",
                    "UJ6LDMMN0",
                    "UHWC9PXBL",
                    "UA14TGLTC",
                    "UMVFWPZ36"
                ],
                "count": 7
            },
            {
                "name": "+1",
                "users": [
                    "UMVFWPZ36"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "2f99aec2-d6f0-4c1e-ba4c-54469f4253f7",
        "type": "message",
        "text": "I've been thinking about this kind of plumbing a bit too. I recently wrote an HTTP service with an <https://gist.github.com/EmmanuelOga/8458a500645da511f10ad32fe8084367#sample-code-for-working-with-rdf|API expressed as mostly RPC operations>.\n\nI wanted to add a REPL so I used prompt-toolkit. But then it occurred to me I should also accept the repl commands as command line parameters. I also wanted to be able to trigger these RPC commands from VS Code.\n\nI think the answer is a machine readable spec and code generation. That would assist with:\n\u2022 Writing boilerplate server and client code\n\u2022 Generating a REPL and CLI parser\n\u2022 Calling the API from any other place (like a VS Code plugin!)\nWithout a spec, I would just have to write all these API clients by hand.\n\nsince I'm thinking RDF for this spec, it should be relatively easy to express composability: send the result of executing this command as input of this other command.\n\nMy use case is HTTP but seems like a specific case of IPC\n\nPerhaps I could bypass the REPL altogether by integrating deeply with my shell, providing completions, etc.",
        "user": "UN9SCH5RD",
        "ts": "1606360485.136900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UN9SCH5RD",
            "ts": "1606360529.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D23",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been thinking about this kind of plumbing a bit too. I recently wrote an HTTP service with an "
                            },
                            {
                                "type": "link",
                                "url": "https://gist.github.com/EmmanuelOga/8458a500645da511f10ad32fe8084367#sample-code-for-working-with-rdf",
                                "text": "API expressed as mostly RPC operations"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nI wanted to add a REPL so I used prompt-toolkit. But then it occurred to me I should also accept the repl commands as command line parameters. I also wanted to be able to trigger these RPC commands from VS Code.\n\nI think the answer is a machine readable spec and code generation. That would assist with:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Writing boilerplate server and client code"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Generating a REPL and CLI parser"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Calling the API from any other place (like a VS Code plugin!)"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWithout a spec, I would just have to write all these API clients by hand.\n\nsince I'm thinking RDF for this spec, it should be relatively easy to express composability: send the result of executing this command as input of this other command.\n\nMy use case is HTTP but seems like a specific case of IPC\n\nPerhaps I could bypass the REPL altogether by integrating deeply with my shell, providing completions, etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606359276.136400",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "fd69f8e2-ce7a-4764-a912-f6eff62c12bb",
        "type": "message",
        "text": "-- the tricky part is sharing binary data, I will probably wan to do it out of band since rdf is not great for binary, but that adds some complexity to the mix",
        "user": "UN9SCH5RD",
        "ts": "1606360847.137200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZuuR3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "-- the tricky part is sharing binary data, I will probably wan to do it out of band since rdf is not great for binary, but that adds some complexity to the mix"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606359276.136400",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "type": "message",
        "text": "those salsa diagrams look adorable :slightly_smiling_face:",
        "files": [
            {
                "id": "F01FD0Z7HKQ",
                "created": 1606361015,
                "timestamp": 1606361015,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UN9SCH5RD",
                "editable": false,
                "size": 11375,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F01FD0Z7HKQ/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F01FD0Z7HKQ/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F01FD0Z7HKQ-a5d312f6df/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F01FD0Z7HKQ-a5d312f6df/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F01FD0Z7HKQ-a5d312f6df/image_360.png",
                "thumb_360_w": 242,
                "thumb_360_h": 161,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F01FD0Z7HKQ-a5d312f6df/image_160.png",
                "original_w": 242,
                "original_h": 161,
                "thumb_tiny": "AwAfADDQw3979Ka6SHG2Tbjr8o5qSkJCjkge5oAqZ+ZRv5x6VZi/1QzTGmXzkAKlSDk7ulSB1Y8MD7A1nCCixuVx386anf6mndOv51FA5ffnAIY4wc5FaCJahuv9WPr/AEqakIBHIB9qTV1YTV1YzsNgfN9fepLbf5/BB4PWrmxf7o/KlCgHgAe4FQoWdzONOzvcglEuDuKlM9h/Oo48lxgjO7tVymoMZwO5rVPQcoXlc//Z",
                "permalink": "https://futureofcoding.slack.com/files/UN9SCH5RD/F01FD0Z7HKQ/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F01FD0Z7HKQ-828c024242",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "66MG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "those salsa diagrams look adorable "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UN9SCH5RD",
        "display_as_bot": false,
        "ts": "1606361032.137400",
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "2d9533ad-0cfd-430c-a6e9-1819a049308a",
        "type": "message",
        "text": "perhaps a more general solution would try to express subscript of any operator, say with some sort of underscore. Then you could subscript any operator. `&lt;&lt;&lt;_3` is the obvious thought",
        "user": "UN9SCH5RD",
        "ts": "1606361125.137800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ao+Kt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "perhaps a more general solution would try to express subscript of any operator, say with some sort of underscore. Then you could subscript any operator. "
                            },
                            {
                                "type": "text",
                                "text": "<<<_3",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is the obvious thought"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "a3367579-f83e-4fcf-b0f1-a355ea4cf998",
        "type": "message",
        "text": "I know you ruled `&lt;&lt;&lt;` out before but since it seems like it used in all those famous papers, perhaps worth keeping. It is also easy to write and subscript with a pencil",
        "user": "UN9SCH5RD",
        "ts": "1606361233.138000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UN9SCH5RD",
            "ts": "1606361295.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o/WCP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I know you ruled `<<<` out before but since it seems like it used in all those famous papers, perhaps worth keeping. It is also easy to write and subscript with a pencil"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "face4bfb-19b0-4d50-93e5-77c0b994db3f",
        "type": "message",
        "text": "Indeed. When I wrote OP I'd heard of the use of `&lt;&lt;&lt;` for this purpose, but also that it used to have a `rot` on top of it. Which suffers from the obvious drawbacks.\n\nTo describe why `&lt;&lt;&lt;` still doesn't work, I need to expand the context from immediates to also include registers. The ARM instruction set can be summarized lossily in the following gestalt lines:\n\n```Rd &lt;- Rn op Rm\nRd &lt;- Rn op (imm8 &lt;|&gt; k)  # rotate until LSB is at bit k from the right; k must be even and in [0, 32)\nRd &lt;- Rn op (Rm &lt;&lt; imm5)\nRd &lt;- Rn op (Rm &gt;&gt; imm5)  # ASR/signed\nRd &lt;- Rn op (Rm &gt;&gt;&gt; imm5)  # LSR/unsigned\nRd &lt;- Rn op (Rm &lt;|&gt; k)  # rotate\nRd &lt;- Rn op (Rm c&gt;&gt; 1)  # shift right and insert carry flag```\n(So far my favorite option is <@UJN1TAYEQ>'s `&lt;|&gt;`. I've come to terms with its conflicting association with alternation in Haskell.)",
        "user": "UCUSW7WVD",
        "ts": "1606364482.138400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1606364667.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fcLPQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Indeed. When I wrote OP I'd heard of the use of "
                            },
                            {
                                "type": "text",
                                "text": "<<<",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for this purpose, but also that it used to have a "
                            },
                            {
                                "type": "text",
                                "text": "rot",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " on top of it. Which suffers from the obvious drawbacks.\n\nTo describe why "
                            },
                            {
                                "type": "text",
                                "text": "<<<",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " still doesn't work, I need to expand the context from immediates to also include registers. The ARM instruction set can be summarized lossily in the following gestalt lines:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Rd <- Rn op Rm\nRd <- Rn op (imm8 <|> k)  # rotate until LSB is at bit k from the right; k must be even and in [0, 32)\nRd <- Rn op (Rm << imm5)\nRd <- Rn op (Rm >> imm5)  # ASR/signed\nRd <- Rn op (Rm >>> imm5)  # LSR/unsigned\nRd <- Rn op (Rm <|> k)  # rotate\nRd <- Rn op (Rm c>> 1)  # shift right and insert carry flag"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(So far my favorite option is "
                            },
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": "'s "
                            },
                            {
                                "type": "text",
                                "text": "<|>",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". I've come to terms with its conflicting association with alternation in Haskell.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606289697.124500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "79cb815c-f95c-48db-bcbd-c6ce2f44a2cf",
        "type": "message",
        "text": "Never knowing how much of the wisdom of the ancients has been lost, I offer this related material (if you haven't the patience to read Knuth's beautiful program, skip to page 478 to read McIlroy's review): <https://www.cs.tufts.edu/~nr/cs257/archive/don-knuth/pearls-2.pdf>",
        "user": "U013ZLJARC7",
        "ts": "1606381850.139000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rEz9p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Never knowing how much of the wisdom of the ancients has been lost, I offer this related material (if you haven't the patience to read Knuth's beautiful program, skip to page 478 to read McIlroy's review): "
                            },
                            {
                                "type": "link",
                                "url": "https://www.cs.tufts.edu/~nr/cs257/archive/don-knuth/pearls-2.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606359276.136400",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "9a7270c2-5eb7-46a2-841b-6e2038a83a9a",
        "type": "message",
        "text": "Thank you <@U013ZLJARC7> for sharing",
        "user": "UJFN50C00",
        "ts": "1606382408.139200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CBp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " for sharing"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606359276.136400",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6d7f7d5b-885f-42bb-a48d-cff8b3fd93c2",
        "type": "message",
        "text": "oh yes, the famed \"knuth v mcilroy\" :stuck_out_tongue:",
        "user": "UN9SCH5RD",
        "ts": "1606384342.139400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tuoi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "oh yes, the famed \"knuth v mcilroy\" "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606359276.136400",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "AFDCA998-E2C1-4543-BD95-B3961D786D20",
        "type": "message",
        "text": "Nice to see your interested. Object Thinking is about us humans seeing and perceiving things as belonging to a certain class of things. These things having the expected/appropriate behaviour. It happens that Smalltalk accommodates for this behavioural approach by not being strictly typed and seeing everything as an object. As long as an object responds to a message send (and performs the requested behaviour), it is behavioural complete.\nCould you explain a bit more what you mean by Value Thinking?",
        "user": "URKQXRCAC",
        "ts": "1606396420.146900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "34h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nice to see your interested. Object Thinking is about us humans seeing and perceiving things as belonging to a certain class of things. These things having the expected/appropriate behaviour. It happens that Smalltalk accommodates for this behavioural approach by not being strictly typed and seeing everything as an object. As long as an object responds to a message send (and performs the requested behaviour), it is behavioural complete.\n"
                            },
                            {
                                "type": "text",
                                "text": "Could you explain a bit more what you mean by Value Thinking?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1603601936.277700",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "6CE2BC14-8E37-4B79-ABAB-02048A719375",
        "type": "message",
        "text": "Maybe companies producing their own silicon will also one day include the language-independent, optimal \"higher-order command set\" that simply, physically can't be improved upon - just used by everything - (I imagine Apple will do this atop their Apple Silicon GPU instruction set - but also from top-down, as their OS is iterated towards maximal use of their chips - some unequivocally optimized libraries should fall out)",
        "user": "USH01JEDQ",
        "ts": "1606409837.150900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y1KjF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe companies producing their own silicon will also one day include the language-independent, optimal \"higher-order command set\" that simply, physically can't be improved upon - just used by everything - (I imagine Apple will do this atop their Apple Silicon GPU instruction set - but also from top-down, as their OS is iterated towards maximal use of their chips - some unequivocally optimized libraries should fall out)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606359276.136400",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "eaa962cd-418f-40f9-aeb1-9c04315963ca",
        "type": "message",
        "text": "<@USJD6240L> sounds a lot like protobuf as an OS interface.\n\nI strongly agree that starting with procedures and exposing them via user friendly interfaces like repls is the right direction.",
        "user": "U016VUZGUUQ",
        "ts": "1606428649.151500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D6/l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "USJD6240L"
                            },
                            {
                                "type": "text",
                                "text": " sounds a lot like protobuf as an OS interface.\n\nI strongly agree that starting with procedures and exposing them via user friendly interfaces like repls is the right direction."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1606359276.136400",
        "parent_user_id": "UCUSW7WVD"
    }
]