[
    {
        "client_msg_id": "F8ECB3B1-5FE3-4A5E-8FC7-E03177A79A4B",
        "type": "message",
        "text": "seems like the link didn\u2019t stick with my previous message: <https://youtu.be/YR4pFk0xj9w|https://youtu.be/YR4pFk0xj9w> the self programming language experimented with some of these ideas in the early 90s",
        "user": "UHWC9PXBL",
        "ts": "1604885903.154300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Self",
                "title_link": "https://youtu.be/YR4pFk0xj9w",
                "author_name": "gandysmedicineshow",
                "author_link": "https://www.youtube.com/user/gandysmedicineshow",
                "thumb_url": "https://i.ytimg.com/vi/YR4pFk0xj9w/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Self",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https://www.youtube.com/embed/YR4pFk0xj9w?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https://youtu.be/YR4pFk0xj9w",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/YR4pFk0xj9w"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z65c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "seems like the link didn\u2019t stick with my previous message: "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/YR4pFk0xj9w",
                                "text": "https://youtu.be/YR4pFk0xj9w"
                            },
                            {
                                "type": "text",
                                "text": " the self programming language experimented with some of these ideas in the early 90s"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604079401.115400",
        "parent_user_id": "U019PRL1BNU",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "text": "I also tried to reimplement tixy.land! Using my own adacraft tool (in that case nearly no special adacraft features has been used, so one can do the same with Scratch). See -> <https://adacraft.org/project/281257812260028929>\n\nNot sure it has the same spirit as tixy.land though. Because the original idea is to implement the algorithm with a simple formula as a text expression in less than 32 characters, and in my project the formula is programmed with blocks with no limit. But, hey, it was fun to do it!\n\nAnd with this project I also wanted to explore how to organize and document block programming code \u00e0 la Scratch to make it more expressive.",
        "user": "UJ6LDMMN0",
        "ts": "1604918750.154700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "[November 7th, 2020 4:26 AM] ak: <https://tixy.land|https://tixy.land>",
                "ts": "1604719581.188800",
                "author_id": "UCUSW7WVD",
                "author_subname": "Kartik Agaram",
                "channel_id": "C5U3SEW6A",
                "channel_name": "linking-together",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "<https://tixy.land|https://tixy.land>",
                "author_name": "Kartik Agaram",
                "author_link": "https://futureofcoding.slack.com/team/UCUSW7WVD",
                "author_icon": "https://avatars.slack-edge.com/2019-07-14/687915485201_6e649a383cf8f9e366e3_48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "color": "D0D0D0",
                "from_url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1604719581188800?thread_ts=1604719581188800&cid=C5U3SEW6A",
                "is_share": true,
                "footer": "Thread in #linking-together"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Zl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also tried to reimplement tixy.land! Using my own adacraft tool (in that case nearly no special adacraft features has been used, so one can do the same with Scratch). See -> "
                            },
                            {
                                "type": "link",
                                "url": "https://adacraft.org/project/281257812260028929"
                            },
                            {
                                "type": "text",
                                "text": "\n\nNot sure it has the same spirit as tixy.land though. Because the original idea is to implement the algorithm with a simple formula as a text expression in less than 32 characters, and in my project the formula is programmed with blocks with no limit. But, hey, it was fun to do it!\n\nAnd with this project I also wanted to explore how to organize and document block programming code \u00e0 la Scratch to make it more expressive."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "U0123H7JRDM",
                    "U013ZLJARC7",
                    "UC2A2ARPT",
                    "UHWC9PXBL"
                ],
                "count": 4
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "text": "To support an AI demo I'm (slowly) building, I resuscitated out some old GUI library (linux,osx) I was working on 5 years ago (built on top of <https://www.glfw.org/|glfw3> and <https://github.com/memononen/nanovg|nanovg>). While, all things considered, it's a pretty tangential effort, it's pretty fun to imagine and build GUI components from scratch :heart_eyes: It also mix well with the rest of my code base, which is a huge plus in my books.",
        "files": [
            {
                "id": "F01E4T11886",
                "created": 1604939757,
                "timestamp": 1604939757,
                "name": "Screenshot from 2020-11-05 23-35-40.png",
                "title": "Screenshot from 2020-11-05 23-35-40.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U013HU44GLS",
                "editable": false,
                "size": 137499,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F01E4T11886/screenshot_from_2020-11-05_23-35-40.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F01E4T11886/download/screenshot_from_2020-11-05_23-35-40.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F01E4T11886-03e0621c29/screenshot_from_2020-11-05_23-35-40_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F01E4T11886-03e0621c29/screenshot_from_2020-11-05_23-35-40_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F01E4T11886-03e0621c29/screenshot_from_2020-11-05_23-35-40_360.png",
                "thumb_360_w": 328,
                "thumb_360_h": 360,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F01E4T11886-03e0621c29/screenshot_from_2020-11-05_23-35-40_480.png",
                "thumb_480_w": 437,
                "thumb_480_h": 480,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F01E4T11886-03e0621c29/screenshot_from_2020-11-05_23-35-40_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F01E4T11886-03e0621c29/screenshot_from_2020-11-05_23-35-40_720.png",
                "thumb_720_w": 655,
                "thumb_720_h": 720,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F01E4T11886-03e0621c29/screenshot_from_2020-11-05_23-35-40_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 879,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F01E4T11886-03e0621c29/screenshot_from_2020-11-05_23-35-40_960.png",
                "thumb_960_w": 874,
                "thumb_960_h": 960,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F01E4T11886-03e0621c29/screenshot_from_2020-11-05_23-35-40_1024.png",
                "thumb_1024_w": 932,
                "thumb_1024_h": 1024,
                "original_w": 960,
                "original_h": 1055,
                "thumb_tiny": "AwAwACun8v8AtUlFIaogKWjtR06jFABRRRQAUZx3opKAFz70lJSigApaQdaWgANHaiigBtL2oxRj3oAB1paTFLQB/9k=",
                "permalink": "https://futureofcoding.slack.com/files/U013HU44GLS/F01E4T11886/screenshot_from_2020-11-05_23-35-40.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F01E4T11886-4ff089c555",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eBh0V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To support an AI demo I'm (slowly) building, I resuscitated out some old GUI library (linux,osx) I was working on 5 years ago (built on top of "
                            },
                            {
                                "type": "link",
                                "url": "https://www.glfw.org/",
                                "text": "glfw3"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/memononen/nanovg",
                                "text": "nanovg"
                            },
                            {
                                "type": "text",
                                "text": "). While, all things considered, it's a pretty tangential effort, it's pretty fun to imagine and build GUI components from scratch "
                            },
                            {
                                "type": "emoji",
                                "name": "heart_eyes"
                            },
                            {
                                "type": "text",
                                "text": " It also mix well with the rest of my code base, which is a huge plus in my books."
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "U013HU44GLS",
        "display_as_bot": false,
        "ts": "1604940086.159200",
        "edited": {
            "user": "U013HU44GLS",
            "ts": "1604940128.000000"
        },
        "thread_ts": "1604940086.159200",
        "reply_count": 5,
        "reply_users_count": 3,
        "latest_reply": "1604954160.161000",
        "reply_users": [
            "UUQ2EQW21",
            "U013HU44GLS",
            "UPX3PH28N"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UUQ2EQW21",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "b810f006-9eef-4b9b-9a7c-7145543dcdfd",
        "type": "message",
        "text": "I love building GUIs, my audio project uses nanovg too :slightly_smiling_face:",
        "user": "UUQ2EQW21",
        "ts": "1604940886.159800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SVvsg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I love building GUIs, my audio project uses nanovg too "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604940086.159200",
        "parent_user_id": "U013HU44GLS",
        "reactions": [
            {
                "name": "heart_eyes",
                "users": [
                    "U013HU44GLS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f50d2191-80ab-41a4-aab0-25ce9ec409cc",
        "type": "message",
        "text": "I personally think that ImGui will continue to grow and evolve and wind up being the GUI of choice for many applications (not just mostly for internal tools).  An immediate mode Gui is so much easier to work with.",
        "user": "UUQ2EQW21",
        "ts": "1604940960.160100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZPP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I personally think that ImGui will continue to grow and evolve and wind up being the GUI of choice for many applications (not just mostly for internal tools).  An immediate mode Gui is so much easier to work with."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604940086.159200",
        "parent_user_id": "U013HU44GLS"
    },
    {
        "client_msg_id": "034a07a1-41d9-4cd7-bb88-f6d60b088d48",
        "type": "message",
        "text": "I actually went for an _hybrid_ setup, where I have a concept of \"widgets\" that are implemented in immediate mode. I had some states and data to keep around between rendering so that made sense to me.",
        "user": "U013HU44GLS",
        "ts": "1604941330.160400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yC+K9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I actually went for an "
                            },
                            {
                                "type": "text",
                                "text": "hybrid",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " setup, where I have a concept of \"widgets\" that are implemented in immediate mode. I had some states and data to keep around between rendering so that made sense to me."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604940086.159200",
        "parent_user_id": "U013HU44GLS",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0f00e8f0-834b-4894-a927-5bcd5af65bce",
        "type": "message",
        "text": "I write an imgui library for my editor (<https://github.com/rasendubi/meta/tree/master/meta-rs/meta-gui|https://github.com/rasendubi/meta/tree/master/meta-rs/meta-gui>). A good source of inspiration was Go's Gio library. One idea I've stolen is that drawing operations are not immediately applied but are stored first, so you can apply transformations after the fact. In particular, this allows implementing automatic layout with constraints. Gio has a good overview at <https://gioui.org/doc/architecture|https://gioui.org/doc/architecture>",
        "user": "UPX3PH28N",
        "ts": "1604951595.160700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "GitHub",
                "title": "rasendubi/meta",
                "title_link": "https://github.com/rasendubi/meta/tree/master/meta-rs/meta-gui",
                "text": "Data pretending to be code. Contribute to rasendubi/meta development by creating an account on GitHub.",
                "fallback": "GitHub: rasendubi/meta",
                "thumb_url": "https://avatars0.githubusercontent.com/u/1366419?s=400&v=4",
                "from_url": "https://github.com/rasendubi/meta/tree/master/meta-rs/meta-gui",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/github.png",
                "id": 1,
                "original_url": "https://github.com/rasendubi/meta/tree/master/meta-rs/meta-gui"
            },
            {
                "title": "Architecture",
                "title_link": "https://gioui.org/doc/architecture",
                "text": "Gio is an open source library for creating portable, immediate mode GUI programs for Android, iOS, Linux, Windows, macOS.",
                "fallback": "Architecture",
                "from_url": "https://gioui.org/doc/architecture",
                "service_icon": "https://gioui.org/files/favicon196.png",
                "service_name": "gioui.org",
                "id": 2,
                "original_url": "https://gioui.org/doc/architecture"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aFB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I write an imgui library for my editor ("
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/rasendubi/meta/tree/master/meta-rs/meta-gui",
                                "text": "https://github.com/rasendubi/meta/tree/master/meta-rs/meta-gui"
                            },
                            {
                                "type": "text",
                                "text": "). A good source of inspiration was Go's Gio library. One idea I've stolen is that drawing operations are not immediately applied but are stored first, so you can apply transformations after the fact. In particular, this allows implementing automatic layout with constraints. Gio has a good overview at "
                            },
                            {
                                "type": "link",
                                "url": "https://gioui.org/doc/architecture",
                                "text": "https://gioui.org/doc/architecture"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604940086.159200",
        "parent_user_id": "U013HU44GLS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013HU44GLS",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "24ba4432-c72e-4291-a63a-723bec82057f",
        "type": "message",
        "text": "<@U013HU44GLS> That's not an unusual approach; I know of at least one big project that does the hybrid thing too.",
        "user": "UUQ2EQW21",
        "ts": "1604954160.161000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DHmU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013HU44GLS"
                            },
                            {
                                "type": "text",
                                "text": " That's not an unusual approach; I know of at least one big project that does the hybrid thing too."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1604940086.159200",
        "parent_user_id": "U013HU44GLS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013HU44GLS"
                ],
                "count": 1
            }
        ]
    }
]