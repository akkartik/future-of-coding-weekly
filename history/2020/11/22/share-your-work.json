[
    {
        "client_msg_id": "6bc3fd86-7735-4c54-bc06-254a7ffd90f4",
        "type": "message",
        "text": "Oh yes, <@UPX3PH28N> lazy evaluation introduces \"when\" ambiguity.  The _promise_ of \"later\" makes lazy reasoning too tricky for me.  I dread lazy evaluation \u2014 strongly touting non-strict purity.  Instead of \"later,\" commit to \"it shouldn't matter\" \u2014 with divergence/termination/performance being the subtle difference.  So then the only thing that makes sense to me is for mutable and dynamic variables to resolve to the values they have at the time the non-strict value is defined.",
        "user": "UA14TGLTC",
        "ts": "1606014102.259000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4Vgb2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh yes, "
                            },
                            {
                                "type": "user",
                                "user_id": "UPX3PH28N"
                            },
                            {
                                "type": "text",
                                "text": " lazy evaluation introduces \"when\" ambiguity.  The "
                            },
                            {
                                "type": "text",
                                "text": "promise",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of \"later\" makes lazy reasoning too tricky for me.  I dread lazy evaluation \u2014 strongly touting non-strict purity.  Instead of \"later,\" commit to \"it shouldn't matter\" \u2014 with divergence/termination/performance being the subtle difference.  So then the only thing that makes sense to me is for mutable and dynamic variables to resolve to the values they have at the time the non-strict value is defined."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "bdc5d8a9-1750-4235-a10a-6aa4d0e9d03a",
        "type": "message",
        "text": "Hey <@UDKTZSD6H>, thanks for nice words! We haven't thought about that specific problem so far, we are now more focusing on the general \"overview\" logic, gluing stuff together in the app.\nRegarding view logic, we are sticking with React, which I didn't feel much problems with so far -&gt; it composes really nicely and it is very simple. Hard part is state management, especially using server state on the client, so that is something we are focusing more on (via Queries/Actions).\n\nRegarding having a graph of visual components, I can imagine it being complicated in some apps (although I would expect it to look more or less like a tree, in most cases), but how does that manifest as a problem when writing a project? If each, let's say React component, has clearly defined responsibilities, it does not matter where it is used, right? I mean, its usage in various places should not increase complexity.",
        "user": "UUB7RA7PF",
        "ts": "1606057854.259200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UUB7RA7PF",
            "ts": "1606057874.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qCh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey "
                            },
                            {
                                "type": "user",
                                "user_id": "UDKTZSD6H"
                            },
                            {
                                "type": "text",
                                "text": ", thanks for nice words! We haven't thought about that specific problem so far, we are now more focusing on the general \"overview\" logic, gluing stuff together in the app.\nRegarding view logic, we are sticking with React, which I didn't feel much problems with so far -> it composes really nicely and it is very simple. Hard part is state management, especially using server state on the client, so that is something we are focusing more on (via Queries/Actions).\n\nRegarding having a graph of visual components, I can imagine it being complicated in some apps (although I would expect it to look more or less like a tree, in most cases), but how does that manifest as a problem when writing a project? If each, let's say React component, has clearly defined responsibilities, it does not matter where it is used, right? I mean, its usage in various places should not increase complexity."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1605630429.212300",
        "parent_user_id": "UUB7RA7PF"
    },
    {
        "client_msg_id": "d850c2a0-617e-4ddc-8cd0-5484bff7f85b",
        "type": "message",
        "text": "<@UFB8STN7K> glad to see the dynamic variable / exception connection explored a little.  Not to entirely derail the conversation having contemplated the Diamond Problem for some time, I feel, ultimately, explicit is better than any sort of CSS specificity.  Since we end up with `!important` in the end.  And that was one of the challenges of Eve: hard to get rules to match at the right time.  With <@UEBG0NPDK>\u2019s new thing, I guess the answer is to be unapologetically imperative when a step-by-step recipe is what you genuinely want.\n\nCard games make a good test case for imperative/statey constructs.  Because the primary hand/turn/round flow of game is interrupted by players simultaneously inspecting their cards and occasionally interrupting each other.  In fact, Nerts <https://playingcarddecks.com/blogs/how-to-play/nerts-game-rules> is probably the best possible example.  Start with solitaire \u2014 good old fashioned.  Now, instead of each player having their own four foundations, the foundations are shared.  Once you put out an ace of spades, I can play a two of spades on that.  There you go Chris.  Show that demo: solitaire is converted into Nerts in five minutes.  Collect Series A and a million FoC fans at once.",
        "user": "UA14TGLTC",
        "ts": "1606063190.259500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "PlayingCardDecks.com",
                "title": "Nerts Game Rules",
                "title_link": "https://playingcarddecks.com/blogs/how-to-play/nerts-game-rules",
                "text": "(Above is the traditional set up of a Nerts game for three players) Card Game Rules Nerts, or Peanuts, is a multiple person solitaire game played with a standard 52 playing card deck for each player. Each deck must have a unique design on its back as it will be easier to calculate players\u2019 points. In Nerts, Kings are high and Aces are low. The objective of the game is to win the most points and to play all of the cards in the Nerts pile. For more classic card games, check out our guides for Go Fish and War. If you are looking for cards to play Nerts with, check out a standard deck here or on of our newest arrivals here. \u00a0 Set Up Each player is given a full deck with a unique design on its back. Players must shuffle the deck first before they form the Tableau and Nerts pile. To form their Tableau, players place four cards up right in a row. To form the Nerts pile, players deal thirteen cards face down. The remaining cards form the Stock pile. \u00a0 How to Play Foundations Like regular Solitaire, players can lose cards by building up the Foundations. In Nerts, the Foundations are community piles. A Foundation pile begins when someone places an Ace in the middle of the gameplay area. Foundations can be built upon by cards of the same suit and in increasing order. When a Foundation reaches the King, the pile is turned over and placed to the side. Tableau Players may also play cards onto their own Tableau. Cards can be placed on the Tableau if the cards are in decreasing order and of alternating color. The top card of a Tableau pile may be used for a Foundation pile. Stock Pile If a player cannot move any of their cards in play, they may deal themselves cards from their Stock pile. Stock pile cards are dealt in groups of three with players only able to use the top card. When the Stock pile runs out, players may form a new Stock pile out of the dealt cards. Nerts Pile The top card of the Nerts pile is flipped up and may be played on either the Tableau or the Foundation piles. When someone plays all of their Nerts cards they shout \u201cNerts!\u201d, gameplay ends, and scores are tallied. \u00a0 Keeping Score After someone plays all of the cards in their Nerts pile, the Foundations are collected and counted. A player receives 1 point for every card they played on the Foundations and loses 2 points for every card still in their Nerts pile. The first player to 150 points wins. For more\u00a0information about Nerts, check out pagat's article here and The National Nerts Association's website here. Variations Spite and Malice Spite and Malice is a two player variation of Nerts. It is played with two decks. Nerts piles are made of 20 cards. Each player gets four\u00a0tableau piles. The players share one stock pile. After the Nerts piles are made, the top cards are flipped up. The player with the highest card goes first. Players then take turns trying to build up the communal foundation piles.\u00a0 For more information on Spite and Malice, check out Pagat's article here. \u00a0 Looking for more card games to play?\u00a0 Check out this article: 40+ Great Card Games For All Occasions About the author:\u00a0John Taylor is a content writer and freelancer through the company <http://Upwork.com|Upwork.com>. You may view his freelancing profile\u00a0here. He has a B. A. in English, with a specialty in technical writing, from Texas A&amp;M University and a M. A. in\u00a0English from the University of Glasgow. You may view his previous articles about card games\u00a0here\u00a0and his LinkedIn profile\u00a0here. Last update date: 08/30/20 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0",
                "fallback": "PlayingCardDecks.com: Nerts Game Rules",
                "from_url": "https://playingcarddecks.com/blogs/how-to-play/nerts-game-rules",
                "thumb_url": "http://cdn.shopify.com/s/files/1/1788/4029/articles/ner_1024x1024.jpg?v=1569755336",
                "thumb_width": 180,
                "thumb_height": 180,
                "service_icon": "http://cdn.shopify.com/s/files/1/1788/4029/t/22/assets/favicon.png?v=11948264278751531157",
                "id": 1,
                "original_url": "https://playingcarddecks.com/blogs/how-to-play/nerts-game-rules"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7opRb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFB8STN7K"
                            },
                            {
                                "type": "text",
                                "text": " glad to see the dynamic variable / exception connection explored a little.  Not to entirely derail the conversation having contemplated the Diamond Problem for some time, I feel, ultimately, explicit is better than any sort of CSS specificity.  Since we end up with "
                            },
                            {
                                "type": "text",
                                "text": "!important",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in the end.  And that was one of the challenges of Eve: hard to get rules to match at the right time.  With "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": "\u2019s new thing, I guess the answer is to be unapologetically imperative when a step-by-step recipe is what you genuinely want.\n\nCard games make a good test case for imperative/statey constructs.  Because the primary hand/turn/round flow of game is interrupted by players simultaneously inspecting their cards and occasionally interrupting each other.  In fact, Nerts "
                            },
                            {
                                "type": "link",
                                "url": "https://playingcarddecks.com/blogs/how-to-play/nerts-game-rules"
                            },
                            {
                                "type": "text",
                                "text": " is probably the best possible example.  Start with solitaire \u2014 good old fashioned.  Now, instead of each player having their own four foundations, the foundations are shared.  Once you put out an ace of spades, I can play a two of spades on that.  There you go Chris.  Show that demo: solitaire is converted into Nerts in five minutes.  Collect Series A and a million FoC fans at once."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "79D45B8F-99F3-4373-8948-D8F95E4EB8D2",
        "type": "message",
        "text": "Ooh that\u2019d be a fun one, particularly showing it as a conversion from one to the other. I\u2019m sure we could do something like that once the editor\u2019s a bit further along. :slightly_smiling_face: One of <@UDZRT1962>\u2019s favorite moments from Eve was when someone converted our tic-tac-toe into the super version in just a few lines of code. ",
        "user": "UEBG0NPDK",
        "ts": "1606064424.264200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kHL=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ooh that\u2019d be a fun one, particularly showing it as a conversion from one to the other. I\u2019m sure we could do something like that once the editor\u2019s a bit further along. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " One of "
                            },
                            {
                                "type": "user",
                                "user_id": "UDZRT1962"
                            },
                            {
                                "type": "text",
                                "text": "\u2019s favorite moments from Eve was when someone converted our tic-tac-toe into the super version in just a few lines of code. "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "37cb0fc2-8c2b-4cff-857f-863d70e04ccf",
        "type": "message",
        "text": "I would like to see the Celsius-Fahrenheit converter. I can't find it now but someone posted a month or so ago, a set of about 6 standard applications that can be used to compare the clarity/expressiveness of different programming languages",
        "user": "UDQBTJ211",
        "ts": "1606065090.264400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xJxS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would like to see the Celsius-Fahrenheit converter. I can't find it now but someone posted a month or so ago, a set of about 6 standard applications that can be used to compare the clarity/expressiveness of different programming languages"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "09AADB48-2F4F-4C56-BADF-550990E4F612",
        "type": "message",
        "text": "I think you\u2019re talking about 7guis? <https://eugenkiss.github.io/7guis/tasks|https://eugenkiss.github.io/7guis/tasks>",
        "user": "UEBG0NPDK",
        "ts": "1606065636.265100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YeK9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think you\u2019re talking about 7guis? "
                            },
                            {
                                "type": "link",
                                "url": "https://eugenkiss.github.io/7guis/tasks",
                                "text": "https://eugenkiss.github.io/7guis/tasks"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "25b6502e-cbe6-48f9-bae4-5c6902720e46",
        "type": "message",
        "text": "Yep that's the one :+1:",
        "user": "UDQBTJ211",
        "ts": "1606065657.265300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hzv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yep that's the one "
                            },
                            {
                                "type": "emoji",
                                "name": "+1"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK"
    }
]