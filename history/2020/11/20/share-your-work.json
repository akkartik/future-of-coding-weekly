[
    {
        "client_msg_id": "6f0360b0-a713-4b13-b991-ba69011bc675",
        "type": "message",
        "text": "Ah <@UEBG0NPDK>, what's the story with our old friend Scope?",
        "user": "UA14TGLTC",
        "ts": "1605837780.251500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nm9Nh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": ", what's the story with our old friend Scope?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "D6953C5C-B15D-4393-A00D-14D4980739F4",
        "type": "message",
        "text": "All gadgets exist in the global scope, locals use normal lexical scoping. Though we have been playing around on the tooling side to potentially make that feel like it\u2019s stack scoped. Dunno if that\u2019ll stick but it\u2019s interesting. We\u2019re explicitly shooting for a programmery crowd this time, so a little less worried about it.",
        "user": "UEBG0NPDK",
        "ts": "1605839297.255600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1605839396.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8e7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "All gadgets exist in the global scope, locals use normal lexical scoping. Though we have been playing around on the tooling side to potentially make that feel like it\u2019s stack scoped. Dunno if that\u2019ll stick but it\u2019s interesting. We\u2019re explicitly shooting for a programmery crowd this time, so a little less worried about it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "534bd851-2d1f-4606-84ad-dfcd2fcc728a",
        "type": "message",
        "text": "\"Stack scoped\" like dynamically scoped?  Because dynamic scoping is totally underused in my honest opinion.",
        "user": "UA14TGLTC",
        "ts": "1605840374.255900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xr6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Stack scoped\" like dynamically scoped?  Because dynamic scoping is totally underused in my honest opinion."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "12a0e253-a0f7-434d-ab1f-5232d23da1f3",
        "type": "message",
        "text": "Yeah, more or less. By using something outside of your scope you\u2019re implicitly saying you require one of those, it\u2019s then the job of the caller to ensure there\u2019s one hanging around for you.",
        "user": "UEBG0NPDK",
        "ts": "1605840501.256100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "91cO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, more or less. By using something outside of your scope you\u2019re implicitly saying you require one of those, it\u2019s then the job of the caller to ensure there\u2019s one hanging around for you."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "4eaf73e6-a50d-43d9-833c-32b0586aea15",
        "type": "message",
        "text": "I think you can do it through tooling though, rather than taking on the downsides you normally end up with dynamic scope. You really are \u201cpassing all the way down\u201d, you just don\u2019t have to know about it",
        "user": "UEBG0NPDK",
        "ts": "1605840613.256300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VOHig",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think you can do it through tooling though, rather than taking on the downsides you normally end up with dynamic scope. You really are \u201cpassing all the way down\u201d, you just don\u2019t have to know about it"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "4b5fa0d9-867d-4e48-9b63-9773c9766d8d",
        "type": "message",
        "text": "<@UK3LH8CF5> fwiw, this ends up being a nice mixture of declarative and imperative. Sometimes you just make statements about the world, others you describe processes that mutate it. One of the biggest learning for us was that the real magic happens in the middle, not at any of the ends.",
        "user": "UEBG0NPDK",
        "ts": "1605841660.256500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jc6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " fwiw, this ends up being a nice mixture of declarative and imperative. Sometimes you just make statements about the world, others you describe processes that mutate it. One of the biggest learning for us was that the real magic happens in the middle, not at any of the ends."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UK3LH8CF5"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9e0fb02b-6c87-4959-92e4-802a0dba98a8",
        "type": "message",
        "text": "I like an idea of treating code as data. Stared your project on github.",
        "user": "U013BB9KZV1",
        "ts": "1605865961.256700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=uix",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like an idea of treating code as data. Stared your project on github."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1605731807.247500",
        "parent_user_id": "UPX3PH28N",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "582978ff-34ba-4f64-811d-cc8340fd5064",
        "type": "message",
        "text": "I realize, suddenly, that a dynamic variable is sort of the opposite of an exception.  There are probably a few fruitful things to learn from this analogy.\n\nAs for downsides, the main one that comes to mind are those few languages in which all variables have dynamic scope, which of course easily leads to unintentional capture.",
        "user": "UA14TGLTC",
        "ts": "1605882877.256900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xd1V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I realize, suddenly, that a dynamic variable is sort of the opposite of an exception.  There are probably a few fruitful things to learn from this analogy.\n\nAs for downsides, the main one that comes to mind are those few languages in which all variables have dynamic scope, which of course easily leads to unintentional capture."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "889b106c-1cb0-416f-99f7-a84826d9d934",
        "type": "message",
        "text": "Another downside is that dynamic scoping plays badly with lazy evaluation.\n\nI've hit a bug with clojure when lazy chunks were trying to evaluate much later and from another place, so they saw the version of the variable other than one that was active when lazy chunks were created.",
        "user": "UPX3PH28N",
        "ts": "1605889324.257200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4Wtw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another downside is that dynamic scoping plays badly with lazy evaluation.\n\nI've hit a bug with clojure when lazy chunks were trying to evaluate much later and from another place, so they saw the version of the variable other than one that was active when lazy chunks were created."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK"
    },
    {
        "client_msg_id": "22b5f8f5-ed19-4bb8-add0-e2c7576d06a1",
        "type": "message",
        "text": "I like the idea of EAV data as a building block for programming languages!",
        "user": "UJ6LDMMN0",
        "ts": "1605891697.257600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YfX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like the idea of EAV data as a building block for programming languages!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1605731807.247500",
        "parent_user_id": "UPX3PH28N"
    },
    {
        "client_msg_id": "9a6aee70-2bf4-4264-a308-aa49c1c2bc06",
        "type": "message",
        "text": "You might have noticed that my model is IEAV. Each EAV tuple has a unique id, so tuples are addressable, too. You can assign attributes and do anything you do with normal entities.\n\nI use that to establish ordering of items, and I have a couple of other ideas as well. For example, you can represent diffs in IEAV by assigning added/removed attribute to tuples.",
        "user": "UPX3PH28N",
        "ts": "1605893498.257800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OUXeI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You might have noticed that my model is IEAV. Each EAV tuple has a unique id, so tuples are addressable, too. You can assign attributes and do anything you do with normal entities.\n\nI use that to establish ordering of items, and I have a couple of other ideas as well. For example, you can represent diffs in IEAV by assigning added/removed attribute to tuples."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1605731807.247500",
        "parent_user_id": "UPX3PH28N",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "2ff48095-db28-4e79-809a-49d7efd4c876",
        "type": "message",
        "text": "<@UA14TGLTC> you might be interested in my blog post about name resolution: <https://willcrichton.net/notes/specificity-programming-languages/>",
        "user": "UFB8STN7K",
        "ts": "1605893853.258000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "              \"Do What I Mean\": Name Resolution in Programming Languages | Will Crichton            ",
                "title_link": "https://willcrichton.net/notes/specificity-programming-languages/",
                "text": "Resolving names is a hard problem that permeates many aspects of programming like variable scoping, structured control flow, and method resolution. I show how a few core ideas underlie seemingly disparate parts of programming language design.",
                "fallback": "              \"Do What I Mean\": Name Resolution in Programming Languages | Will Crichton            ",
                "from_url": "https://willcrichton.net/notes/specificity-programming-languages/",
                "service_name": "willcrichton.net",
                "id": 1,
                "original_url": "https://willcrichton.net/notes/specificity-programming-languages/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q+i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " you might be interested in my blog post about name resolution: "
                            },
                            {
                                "type": "link",
                                "url": "https://willcrichton.net/notes/specificity-programming-languages/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1605645239.224300",
        "parent_user_id": "UEBG0NPDK"
    }
]