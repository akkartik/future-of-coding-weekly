[
    {
        "client_msg_id": "5610b0e3-959f-4fdb-8144-ef60e272c183",
        "type": "message",
        "text": "In the immortal words of Fred Brooks, \"plan to throw one away\". However, they must have burned some capital working for the last 2 years on this project. Doing it in Poland instead of SV means probably only 1/3rd the cost, but 5 people at 40k/year for 2 years is an estimated $400K USD. Red/Rebol is to my knowledge the best funded project on the FoC project list, they are concentrating on Crypto smart contract programming as their \"home\" domain.\n\nEnso is now going down a tunnel where their system requires them to build the entire stack including editor, debugger, etc. That means more work and an even bigger project. I have some concerns about projects which don't build programs and projects and then work backwards from a project to figure out the best tool to make that project. Trying to design in a single direction is fraught with peril IMHO. All ladders connect two points in space, and one is typically looking for least complex connection between A and B, so one must go back and forth between A and B to optimize the path. This shuttling approach is very expensive in time and effort, but I think product design always works this way. I just saw the Ford F150 announcement, and they had a team of people going camping with their customers, and visiting jobsites, so that they could add in the features that were wanted and needed. The new F150 announcement underwhelmed people, because it was incremental, but in terms of ergonomics they really moved forward solidly towards a product that was more useful to their customers. They even considered the issue of the controls surfaces being usable by people with gloves on. So the knobs and controls are huge. I am helping a friend who is designing a hearing assistive device that is both hardware and software, and you have to make the controls extra big for seniors. I have always made my controls extra big and occasionally gotten hate mail from young punks who ridiculed the jumbo size. That's one thing i am a bit concerned about in the node and wire visual programming world is that they often expect high acuity in order to distinguish the tiny spatial differences between output #1 and output #2.",
        "user": "UEQ6M68H0",
        "ts": "1593221097.494800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1593222603.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NUL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In the immortal words of Fred Brooks, \"plan to throw one away\". However, they must have burned some capital working for the last 2 years on this project. Doing it in Poland instead of SV means probably only 1/3rd the cost, but 5 people at 40k/year for 2 years is an estimated $400K USD. Red/Rebol is to my knowledge the best funded project on the FoC project list, they are concentrating on Crypto smart contract programming as their \"home\" domain.\n\nEnso is now going down a tunnel where their system requires them to build the entire stack including editor, debugger, etc. That means more work and an even bigger project. I have some concerns about projects which don't build programs and projects and then work backwards from a project to figure out the best tool to make that project. Trying to design in a single direction is fraught with peril IMHO. All ladders connect two points in space, and one is typically looking for least complex connection between A and B, so one must go back and forth between A and B to optimize the path. This shuttling approach is very expensive in time and effort, but I think product design always works this way. I just saw the Ford F150 announcement, and they had a team of people going camping with their customers, and visiting jobsites, so that they could add in the features that were wanted and needed. The new F150 announcement underwhelmed people, because it was incremental, but in terms of ergonomics they really moved forward solidly towards a product that was more useful to their customers. They even considered the issue of the controls surfaces being usable by people with gloves on. So the knobs and controls are huge. I am helping a friend who is designing a hearing assistive device that is both hardware and software, and you have to make the controls extra big for seniors. I have always made my controls extra big and occasionally gotten hate mail from young punks who ridiculed the jumbo size. That's one thing i am a bit concerned about in the node and wire visual programming world is that they often expect high acuity in order to distinguish the tiny spatial differences between output #1 and output #2."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593176908.480100",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "389648d9-8c59-4c28-8231-f690d082b582",
        "type": "message",
        "text": "any suggestions on a good front-end library/framework for making drag and drop interactive OOP UIs? for example, <http://e.ga|a> workspace of objects, and clicking a method inside an object then clicking on other objects to pass them as arguments. lots of these exist for specific languages, I'm sure, but if I wanted to make one for my own language, what would I use?",
        "user": "UK500AGQ4",
        "ts": "1593225852.497700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fx+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "any suggestions on a good front-end library/framework for making drag and drop interactive OOP UIs? for example, "
                            },
                            {
                                "type": "link",
                                "url": "http://e.ga",
                                "text": "a"
                            },
                            {
                                "type": "text",
                                "text": " workspace of objects, and clicking a method inside an object then clicking on other objects to pass them as arguments. lots of these exist for specific languages, I'm sure, but if I wanted to make one for my own language, what would I use?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593225852.497700",
        "reply_count": 20,
        "reply_users_count": 7,
        "latest_reply": "1593323351.017900",
        "reply_users": [
            "UCUSW7WVD",
            "UK500AGQ4",
            "UFLN9JFRT",
            "UEQ6M68H0",
            "UHWC9PXBL",
            "UC2A2ARPT",
            "U0123H7JRDM"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "8e98ee71-a0bf-40da-a8d7-91e74e756ea9",
        "type": "message",
        "text": "Wouldn't it depend on what language you built your own language in?\n\nWould a general GUI library help?",
        "user": "UCUSW7WVD",
        "ts": "1593227832.497800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6ZoJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wouldn't it depend on what language you built your own language in?\n\nWould a general GUI library help?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4"
    },
    {
        "client_msg_id": "8e99b7a8-e7c8-4f8f-bb26-b69dfcbe8482",
        "type": "message",
        "text": "It would depend, but I assume most of the suggestions would be web libraries/frameworks, which could probably be made to work with any language",
        "user": "UK500AGQ4",
        "ts": "1593228175.498000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5uP+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It would depend, but I assume most of the suggestions would be web libraries/frameworks, which could probably be made to work with any language"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4"
    },
    {
        "client_msg_id": "e22293dd-9bdf-4df5-bceb-be74640bf99a",
        "type": "message",
        "text": "GUI libraries are typically still native, due to performance concerns. Maybe that will change in future.",
        "user": "UCUSW7WVD",
        "ts": "1593229056.498200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UcZM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "GUI libraries are typically still native, due to performance concerns. Maybe that will change in future."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4"
    },
    {
        "client_msg_id": "56891628-2B3F-419C-AD76-2AD3C83546C5",
        "type": "message",
        "text": "Agreed GUI libraries are native.",
        "user": "UFLN9JFRT",
        "ts": "1593237352.498800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BAk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Agreed GUI libraries are native."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4"
    },
    {
        "client_msg_id": "0D30CCA0-1291-478E-9ACE-4B5DA7AB9712",
        "type": "message",
        "text": "But it sounds like you are trying to describe a polyglot Visual Basic ?",
        "user": "UFLN9JFRT",
        "ts": "1593237408.499600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GW6c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But it sounds like you are trying to describe a polyglot Visual Basic ?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4"
    },
    {
        "client_msg_id": "8B29F834-5C79-49DB-B310-7CB692940409",
        "type": "message",
        "text": "Which language are you using Spencer?",
        "user": "UFLN9JFRT",
        "ts": "1593237490.000100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DS=m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Which language are you using Spencer?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4"
    },
    {
        "client_msg_id": "78302d52-7cee-4064-8e3a-950966dd5146",
        "type": "message",
        "text": "well, my implementation is in Python right now, but really I'm just looking for a good implementation technology for such a UI - nothing about being polyglot",
        "user": "UK500AGQ4",
        "ts": "1593261738.000800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3Wlr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "well, my implementation is in Python right now, but really I'm just looking for a good implementation technology for such a UI - nothing about being polyglot"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4"
    },
    {
        "client_msg_id": "a219ae15-32cd-4f6a-bfb7-21b34953fe1c",
        "type": "message",
        "text": "like, I can define some serializable protocol for discovering methods and objects and introspecting to find out the possible arguments, and implement that on my implementation side - but I don't know what would be a good way to implement the front-end of that",
        "user": "UK500AGQ4",
        "ts": "1593270370.001000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Lwc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "like, I can define some serializable protocol for discovering methods and objects and introspecting to find out the possible arguments, and implement that on my implementation side - but I don't know what would be a good way to implement the front-end of that"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4"
    },
    {
        "client_msg_id": "74dabb58-8b54-4f99-8110-867742144018",
        "type": "message",
        "text": "(And of course it would probably be nicer if I didn't have to send that data through a serializable protocol at all, but instead the front-end just got it as structured data through function calls, but that seems unlikely, so I can just bite that bullet)",
        "user": "UK500AGQ4",
        "ts": "1593270461.001200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D+bGL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(And of course it would probably be nicer if I didn't have to send that data through a serializable protocol at all, but instead the front-end just got it as structured data through function calls, but that seems unlikely, so I can just bite that bullet)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4"
    },
    {
        "client_msg_id": "253952DF-0D5F-4A35-AD12-F6F4FA4E0592",
        "type": "message",
        "text": "<@UK500AGQ4> whenever you\u2019re talking about User interface libraries, Inevitably you will ask for a text entry field. The text entry field is the most complicated part of every operating system. To render text in a box and handle text entry, that is over 1 million lines of code more than your typical project. There are not even 100 people alive in the world who know the truetype language that underlies text rendering. The text editing library code is therefore deeply tied to either the operating system vendor or one of the few companies that has spent millions of dollars to understand it. So Google, Adobe, Apple, Microsoft, and a few Japanese companies and Samsung, Are among the few places where this technology has been mastered. Text entry is incredibly complicated when you get to Asian languages or right to left languages like Hebrew and Arabic. Haven\u2019t you ever wondered why the PDF file format took over as the World standard for documents? It\u2019s because it was the only file format that allowed font embedding, and had missing font fail over technology. Nowadays with soft keyboards on mobile devices the world has gotten very concentrated into just two operating systems. iOS and android, and the market is split between those two about 80/20 Although the economic value of the Apple platform is about 50% due to their more well heeled customer base.\n\na Console based Product in python can be very platform independent, but the minute you ask for Graphics and the black box of a text entry field you are now tied to an operating system or a platform technology like Adobe Air which offers platform independent text entry fields and font rendering. I am pretty sure that Unity has a cross platform input field technology as well, but I have not used it. The Google Flutter library is an attempt to make a cross platform technology which is powerful, and there is also QT which has been around long enough to cover all sorts of stuff. There are very few Python libraries which delve into font rendering and text entry fields in their full glory. In Photoshop, when you are putting in text, you have the ability to select 5 different rendering styles (\"soft\", \"hard\", \"sharp\", etc.), and you can massage the font rendering process very finely. MS went though a big effort to render fonts on LCD screens more beautifully by doing sub-pixel rendering, i think they called it \"Clear Type\". This is a very deep area and affects output quality very noticeably. Apple has always had terrific rendering, why artists overwhelmingly prefer OSX over Windows. Human languages are really complicated and supporting them is a huge task. English with its lack of accented letters and very simple structure is pretty much the easiest language on earth. Japanese is actually the most difficult language on earth to handle properly. So the benchmark for most technologies, is how well does it handle Japanese? Korean and Chinese are tough but more uniform than Japanese. calligraphic Arabic is basically impossible. But all the right to left languages present very tricky rendering problems because people intermix left to right and right to left sections in the same sentence.\n\nIf you can avoid having a text entry field Like most game machines have a grade of alphabetic characters you type with, then it becomes a great deal easier and now you\u2019re back to simple polygons and bezier splines and there are dozens of libraries that do those.  Python  has a huge library set.\n\nSo the decision point in your library selection process will revolve around, are you going to be doing text entry? And will you have user added fonts in your universe? A lot of GPU graphics libraries start to fizzle out when you get into text entry and fonts. Many a game has been built using bitmaps  of letters, Arranged in spritesheets  so that the GPU you can draw text quickly. The game machine companies spend big money in their OS to handle the intricacies of text so the game programmers don't duplicate a lot of effort.\n\nanyway you have touched on a deep subject that does not permit a simple answer. I spent much of my career making Japanese software and so this area was of great interest to me",
        "user": "UEQ6M68H0",
        "ts": "1593274446.009800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1593287002.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "t9lHl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UK500AGQ4"
                            },
                            {
                                "type": "text",
                                "text": " whenever you\u2019re talking about User interface libraries, Inevitably you will ask for a text entry field. The text entry field is the most complicated part of every operating system. To render text in a box and handle text entry, that is over 1 million lines of code more than your typical project. There are not even 100 people alive in the world who know the truetype language that underlies text rendering. The text editing library code is therefore deeply tied to either the operating system vendor or one of the few companies that has spent millions of dollars to understand it. So Google, Adobe, Apple, Microsoft, and a few Japanese companies and Samsung, Are among the few places where this technology has been mastered. Text entry is incredibly complicated when you get to Asian languages or right to left languages like Hebrew and Arabic. Haven\u2019t you ever wondered why the PDF file format took over as the World standard for documents? It\u2019s because it was the only file format that allowed font embedding, and had missing font fail over technology. Nowadays with soft keyboards on mobile devices the world has gotten very concentrated into just two operating systems. iOS and android, and the market is split between those two about 80/20 Although the economic value of the Apple platform is about 50% due to their more well heeled customer base.\n\na Console based Product in python can be very platform independent, but the minute you ask for Graphics and the black box of a text entry field you are now tied to an operating system or a platform technology like Adobe Air which offers platform independent text entry fields and font rendering. I am pretty sure that Unity has a cross platform input field technology as well, but I have not used it. The Google Flutter library is an attempt to make a cross platform technology which is powerful, and there is also QT which has been around long enough to cover all sorts of stuff. There are very few Python libraries which delve into font rendering and text entry fields in their full glory. In Photoshop, when you are putting in text, you have the ability to select 5 different rendering styles (\"soft\", \"hard\", \"sharp\", etc.), and you can massage the font rendering process very finely. MS went though a big effort to render fonts on LCD screens more beautifully by doing sub-pixel rendering, i think they called it \"Clear Type\". This is a very deep area and affects output quality very noticeably. Apple has always had terrific rendering, why artists overwhelmingly prefer OSX over Windows. Human languages are really complicated and supporting them is a huge task. English with its lack of accented letters and very simple structure is pretty much the easiest language on earth. Japanese is actually the most difficult language on earth to handle properly. So the benchmark for most technologies, is how well does it handle Japanese? Korean and Chinese are tough but more uniform than Japanese. calligraphic Arabic is basically impossible. But all the right to left languages present very tricky rendering problems because people intermix left to right and right to left sections in the same sentence.\n\nIf you can avoid having a text entry field Like most game machines have a grade of alphabetic characters you type with, then it becomes a great deal easier and now you\u2019re back to simple polygons and bezier splines and there are dozens of libraries that do those.  Python  has a huge library set.\n\nSo the decision point in your library selection process will revolve around, are you going to be doing text entry? And will you have user added fonts in your universe? A lot of GPU graphics libraries start to fizzle out when you get into text entry and fonts. Many a game has been built using bitmaps  of letters, Arranged in spritesheets  so that the GPU you can draw text quickly. The game machine companies spend big money in their OS to handle the intricacies of text so the game programmers don't duplicate a lot of effort.\n\nanyway you have touched on a deep subject that does not permit a simple answer. I spent much of my career making Japanese software and so this area was of great interest to me"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "B28AD8FE-615B-430B-9184-334E1D0D8FA2",
        "type": "message",
        "text": "Ok so it is python. Does this mean python on the server and HTML /JavaScript on the client ?",
        "user": "UFLN9JFRT",
        "ts": "1593277064.010900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eSfQ3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok so it is python. Does this mean python on the server and HTML /JavaScript on the client ?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4"
    },
    {
        "client_msg_id": "bdf7185b-dc85-4141-80c8-fc832865dc90",
        "type": "message",
        "text": "<https://wiki.python.org/moin/GuiProgramming> might be a starting point.\n\nvia google: 'cross-platform python gui'",
        "user": "UCUSW7WVD",
        "ts": "1593277722.011100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1593281074.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H7xM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://wiki.python.org/moin/GuiProgramming"
                            },
                            {
                                "type": "text",
                                "text": " might be a starting point.\n\nvia google: 'cross-platform python gui'"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4"
    },
    {
        "client_msg_id": "1dc7ffd2-0616-421e-917e-26c08619b67b",
        "type": "message",
        "text": "<https://python-gtk-3-tutorial.readthedocs.io/en/latest/drag_and_drop.html>",
        "user": "UCUSW7WVD",
        "ts": "1593281212.011400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6RC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://python-gtk-3-tutorial.readthedocs.io/en/latest/drag_and_drop.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4"
    },
    {
        "client_msg_id": "7753805e-fa24-4825-8577-a48abff1e88a",
        "type": "message",
        "text": "enlightening thread",
        "user": "UES04SML7",
        "ts": "1593282993.011600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J0V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "enlightening thread"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593119706.472200",
        "parent_user_id": "UES04SML7"
    },
    {
        "client_msg_id": "f0edd004-723e-43e0-bb65-083c5af5877c",
        "type": "message",
        "text": "Sorry I think I was misleading in my question - I'm talking about good libraries that one could use to make a visual/interactive programming environments. The \"OOP\" in my question was about the user experience, not about the implementation. I'm indifferent to implementation language, like I said.\n\nOf course any UI toolkit or library is capable of doing that (such as GTK), I'm just wondering if anyone has thoughts on ones which are particularly good at it",
        "user": "UK500AGQ4",
        "ts": "1593283091.011800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UK500AGQ4",
            "ts": "1593283101.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tBX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sorry I think I was misleading in my question - I'm talking about good libraries that one could use to make a visual/interactive programming environments. The \"OOP\" in my question was about the user experience, not about the implementation. I'm indifferent to implementation language, like I said.\n\nOf course any UI toolkit or library is capable of doing that (such as GTK), I'm just wondering if anyone has thoughts on ones which are particularly good at it"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4"
    },
    {
        "client_msg_id": "97ed58d9-cb71-4f70-948d-62933db81977",
        "type": "message",
        "text": "Not to my knowledge. Just the low-level GUI has a lot of trade-offs (some discussed above), and language developers unfortunately don't seem to be a large enough market for a yacc-style GUI tool.",
        "user": "UCUSW7WVD",
        "ts": "1593286245.012200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "If9X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not to my knowledge. Just the low-level GUI has a lot of trade-offs (some discussed above), and language developers unfortunately don't seem to be a large enough market for a yacc-style GUI tool."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4"
    },
    {
        "client_msg_id": "8d752896-d41a-4b88-8cdb-409e54ec05cd",
        "type": "message",
        "text": "I suggest you look into <https://www.qt.io/qt-for-python>, at least they support Python. Unity favors C++ or JS. Adobe AIR requires Haxe or AS3, OSX requires Swift or ObjectiveC and Android is primarily programmed in Java. Python being interpreted is not typically used to build graphical interactive software. Python has weak module support, so not well suited for large projects. If the reason you like Python is because you prefer indentation significant languages, you can always try my Beads language which is very similar to Python.",
        "user": "UEQ6M68H0",
        "ts": "1593287298.012500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1593287619.000000"
        },
        "attachments": [
            {
                "title": "Qt for Python | The official Python bindings for Qt",
                "title_link": "https://www.qt.io/qt-for-python",
                "text": "Qt for Python is the official set of Python bindings for Qt that enable the use of Qt APIs in Python applications. It lets Python developers utilize the full potential of Qt, with the support of The Qt Company.",
                "fallback": "Qt for Python | The official Python bindings for Qt",
                "thumb_url": "https://www.qt.io/hubfs/Q4P.png#keepProtocol",
                "from_url": "https://www.qt.io/qt-for-python",
                "thumb_width": 360,
                "thumb_height": 94,
                "service_icon": "https://www.qt.io/hubfs/2016_Qt_Logo/qt_logo_green_rgb_16x16.png",
                "service_name": "qt.io",
                "id": 1,
                "original_url": "https://www.qt.io/qt-for-python"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZbLyh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I suggest you look into "
                            },
                            {
                                "type": "link",
                                "url": "https://www.qt.io/qt-for-python"
                            },
                            {
                                "type": "text",
                                "text": ", at least they support Python. Unity favors C++ or JS. Adobe AIR requires Haxe or AS3, OSX requires Swift or ObjectiveC and Android is primarily programmed in Java. Python being interpreted is not typically used to build graphical interactive software. Python has weak module support, so not well suited for large projects. If the reason you like Python is because you prefer indentation significant languages, you can always try my Beads language which is very similar to Python."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "1a3d9907-7186-4fa7-bcde-65df6bff5279",
        "type": "message",
        "text": "you might want to look at game engines\u2014a lot of UI libraries for HTML/etc are directed at basically form input\u2014if you want to do something more adventurous game engines are usually more amenable without a lot of custom work",
        "user": "UHWC9PXBL",
        "ts": "1593292147.012900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M0OO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you might want to look at game engines\u2014a lot of UI libraries for HTML/etc are directed at basically form input\u2014if you want to do something more adventurous game engines are usually more amenable without a lot of custom work"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1593225852.497700",
        "parent_user_id": "UK500AGQ4",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UFLN9JFRT"
                ],
                "count": 2
            }
        ]
    }
]