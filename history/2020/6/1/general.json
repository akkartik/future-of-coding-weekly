[
    {
        "client_msg_id": "ff9c3041-28cc-4beb-abe2-a1cad565a26b",
        "type": "message",
        "text": "thanks for all the pointers\nafter reading up some more, and trying out some of the proposals, I'm back to just regular S-expressions, though I must admit the infix rule <@UJBAJNFLK> mentioned is very elegant and is something I will remember. I suppose there's still always room for macros that change the syntax (I like LOOP, please no flames), and going even further, stuff like racket's #lang.\n\nMy main issue with syntactic extensions and changes, is that they usually break tooling support\u2014usually macros don't provide too useful error messages, and static analysis tools don't work on the files anymore. Even basic stuff like syntax highlighting. Does anyone know of work in this area? I know of racket's syntax objects and still need to dive deeper into how they're used, but I'm not aware of much else.",
        "user": "UT60XSVCN",
        "ts": "1590968897.285700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UT60XSVCN",
            "ts": "1590968940.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WqjZm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "thanks for all the pointers\nafter reading up some more, and trying out some of the proposals, I'm back to just regular S-expressions, though I must admit the infix rule "
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " mentioned is very elegant and is something I will remember. I suppose there's still always room for macros that change the syntax (I like LOOP, please no flames), and going even further, stuff like racket's #lang.\n\nMy main issue with syntactic extensions and changes, is that they usually break tooling support\u2014usually macros don't provide too useful error messages, and static analysis tools don't work on the files anymore. Even basic stuff like syntax highlighting. Does anyone know of work in this area? I know of racket's syntax objects and still need to dive deeper into how they're used, but I'm not aware of much else."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590712683.260000",
        "parent_user_id": "UT60XSVCN"
    },
    {
        "client_msg_id": "aa7387da-60d2-44c2-be78-325b792f81d2",
        "type": "message",
        "text": "Has anyone thought about, implemented, or encountered higher-level abstractions of *ALUs*? a.k.a. the part of hardware where actual computations are performed (as opposed to the miles of hardware dedicated to control flow management). Almost every programming language has an ALU abstraction based upon fixed-width chunks of binary digits (32 or 64-wide), arithmetic operations (interpreting the chunks as integers or IEEE floats), and bitwise and bitshift operations. Those fixed-width chunks are grouped into \"allocations\", which are either larger fixed-width containers (structs etc) or dynamically-sized arrays.\n\nRecently I've been thinking about a \"clean slate\" abstraction that still exposes the basic operations that ALUs are good at (integer arithmetic and bit manipulations) but without the fixed-width chunk limitations. Fixed-width chunks are purely a hardware design limitation and have no inherent value to a programmer's mental model; they just add complexity to data modelling. What DOES have value is the notion of a dynamically-sized bit sequence that can be manipulated via splicing operations (take, drop, insert, replace) that generalize bit shifts, bitwise operations (the same old &amp;,|,^ operations), and the familiar arithmetic operations (add, sub, mul, div...). This is a natural foundation for arbitrary-size integers and sequences, but also for general computations that want an efficient mapping to hardware capabilities. I want to take an ALU abstraction like this and build my way-out-there logic programming environment on top of it, so that you still have a conceptual bridge to hardware, and thus you can still reason about the efficiency of basic operations and use them to create efficient user-defined data types.",
        "user": "UCGAK10LS",
        "ts": "1590977348.305600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "laVrc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has anyone thought about, implemented, or encountered higher-level abstractions of "
                            },
                            {
                                "type": "text",
                                "text": "ALUs",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "? a.k.a. the part of hardware where actual computations are performed (as opposed to the miles of hardware dedicated to control flow management). Almost every programming language has an ALU abstraction based upon fixed-width chunks of binary digits (32 or 64-wide), arithmetic operations (interpreting the chunks as integers or IEEE floats), and bitwise and bitshift operations. Those fixed-width chunks are grouped into \"allocations\", which are either larger fixed-width containers (structs etc) or dynamically-sized arrays.\n\nRecently I've been thinking about a \"clean slate\" abstraction that still exposes the basic operations that ALUs are good at (integer arithmetic and bit manipulations) but without the fixed-width chunk limitations. Fixed-width chunks are purely a hardware design limitation and have no inherent value to a programmer's mental model; they just add complexity to data modelling. What DOES have value is the notion of a dynamically-sized bit sequence that can be manipulated via splicing operations (take, drop, insert, replace) that generalize bit shifts, bitwise operations (the same old &,|,^ operations), and the familiar arithmetic operations (add, sub, mul, div...). This is a natural foundation for arbitrary-size integers and sequences, but also for general computations that want an efficient mapping to hardware capabilities. I want to take an ALU abstraction like this and build my way-out-there logic programming environment on top of it, so that you still have a conceptual bridge to hardware, and thus you can still reason about the efficiency of basic operations and use them to create efficient user-defined data types."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590977348.305600",
        "reply_count": 18,
        "reply_users_count": 4,
        "latest_reply": "1591240308.420300",
        "reply_users": [
            "UCGAK10LS",
            "UEQ6M68H0",
            "U015902ESJC",
            "UJN1TAYEQ"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UMWF81HTP",
                    "UBSMEUXAA"
                ],
                "count": 3
            },
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b82b7eed-151a-4eab-b39c-42e7109639e5",
        "type": "message",
        "text": "And yes, arbitrary-sized bit sequences have overhead, because you have to perform length checks before every operation. But I'm not too worried about this constant-factor overhead. I'm not competing with C. Also, many of those checks should be able to be removed with the help of some static analysis. I want to make this a language implementation problem, not a user's problem (and my users aren't compute-bound).",
        "user": "UCGAK10LS",
        "ts": "1590977463.305700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1590977634.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BCZV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And yes, arbitrary-sized bit sequences have overhead, because you have to perform length checks before every operation. But I'm not too worried about this constant-factor overhead. I'm not competing with C. Also, many of those checks should be able to be removed with the help of some static analysis. I want to make this a language implementation problem, not a user's problem (and my users aren't compute-bound)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "89e44578-6863-491d-a4dc-78526af5785a",
        "type": "message",
        "text": "In Beads i have a variable length bit string type (bits), and a variable length byte type (bytes), which are very useful for packing binary things, or for doing byte manipulation, both common low-level operations. Some CPU's such as the Motorola 68000 had variable length bit and byte strings. Intel has kinda sorta byte manipulation with the REP MOVSB instruction, but the Motorola had extremely handy arbitrary bit string stuff.\n\nAs for arithmetic, IEEE floating point is downright stupid, causes all sorts of problems. Some propose using DEC64 a superior methodology, but some languages support BCD with specified decimal digits which can be helpful in financial applications.\n\nNo question that thinking about 32 vs 64 is mostly a waste of time unless you have an ungodly amount of data to process, which is why AS3, JS, and many other languages have a single numeric type based on 64 bit floating point.",
        "user": "UEQ6M68H0",
        "ts": "1590982910.306200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kzLp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In Beads i have a variable length bit string type (bits), and a variable length byte type (bytes), which are very useful for packing binary things, or for doing byte manipulation, both common low-level operations. Some CPU's such as the Motorola 68000 had variable length bit and byte strings. Intel has kinda sorta byte manipulation with the REP MOVSB instruction, but the Motorola had extremely handy arbitrary bit string stuff.\n\nAs for arithmetic, IEEE floating point is downright stupid, causes all sorts of problems. Some propose using DEC64 a superior methodology, but some languages support BCD with specified decimal digits which can be helpful in financial applications.\n\nNo question that thinking about 32 vs 64 is mostly a waste of time unless you have an ungodly amount of data to process, which is why AS3, JS, and many other languages have a single numeric type based on 64 bit floating point."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "ce3c8ebf-2145-42b2-bfc2-61a36b5c6b79",
        "type": "message",
        "text": "Yes I'm planning to see how I go banning IEEE floats and instead exposing an opaque rational number type in my environment. As far as bit manipulation hardware goes, Intel's <https://en.wikipedia.org/wiki/Bit_Manipulation_Instruction_Sets|parallel bit deposit and extract> for x86 seems really cool, but unfortunately isn't efficient on an AMD Zen, since they've inexplicably implemented it in microcode rather than as a native capability. I'm also saddened by the absence of a bit reversal instruction in x86... it seems to exist on every other major hardware platform!",
        "user": "UCGAK10LS",
        "ts": "1590996067.306900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1590996668.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Njaoe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes I'm planning to see how I go banning IEEE floats and instead exposing an opaque rational number type in my environment. As far as bit manipulation hardware goes, Intel's "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Bit_Manipulation_Instruction_Sets",
                                "text": "parallel bit deposit and extract"
                            },
                            {
                                "type": "text",
                                "text": " for x86 seems really cool, but unfortunately isn't efficient on an AMD Zen, since they've inexplicably implemented it in microcode rather than as a native capability. I'm also saddened by the absence of a bit reversal instruction in x86... it seems to exist on every other major hardware platform!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "5b4039cf-6e66-45bf-844d-65964881128e",
        "type": "message",
        "text": "<@UT60XSVCN> Racket is where all the action happens right now on this topic. The PLT group is seriously thinking about a non-s-expression-based language for their ecosystem (codename \"Rhombus\": <https://github.com/racket/rhombus-brainstorming>).\n\nRacket's syntax objects are extensions of Scheme syntax objects, which are lists plus metadata for tracing the provenance of transformed code back to the source code files. This metadata is required for implementing correct lexical scoping for identifiers, something that Common Lisp (and others) don't care about. It's a double-edged word: correct scoping is certainly necessary to scale up macro processing to the point of supporting complex language implenentations, but it also increases the learning curve significantly. Common Lisp macros are much simpler, and much easier to understand, but not at all easy to use for complex transformations.",
        "user": "UJBAJNFLK",
        "ts": "1590998268.307300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "racket/rhombus-brainstorming",
                "text": "Brainstorming and draft proposals for Rhombus",
                "title": "racket/rhombus-brainstorming",
                "footer": "<https://github.com/racket/rhombus-brainstorming|racket/rhombus-brainstorming>",
                "id": 1,
                "footer_icon": "https://github.githubassets.com/favicon.ico",
                "ts": 1563121663,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Stars",
                        "value": "87",
                        "short": true
                    },
                    {
                        "title": "Last updated",
                        "value": "5 days ago",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https://github.com/racket/rhombus-brainstorming",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kLw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UT60XSVCN"
                            },
                            {
                                "type": "text",
                                "text": " Racket is where all the action happens right now on this topic. The PLT group is seriously thinking about a non-s-expression-based language for their ecosystem (codename \"Rhombus\": "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/racket/rhombus-brainstorming"
                            },
                            {
                                "type": "text",
                                "text": ").\n\nRacket's syntax objects are extensions of Scheme syntax objects, which are lists plus metadata for tracing the provenance of transformed code back to the source code files. This metadata is required for implementing correct lexical scoping for identifiers, something that Common Lisp (and others) don't care about. It's a double-edged word: correct scoping is certainly necessary to scale up macro processing to the point of supporting complex language implenentations, but it also increases the learning curve significantly. Common Lisp macros are much simpler, and much easier to understand, but not at all easy to use for complex transformations."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590712683.260000",
        "parent_user_id": "UT60XSVCN",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c8225232-c8e7-4b27-9c75-8cc7b657a63c",
        "type": "message",
        "text": "<@UJBAJNFLK> interesting. I will have to spend some time learning about them. Is Beautiful Racket still the recommended resource?\n\nOn another note, <http://github.com/mflatt/rhombus-brainstorming/blob/shrubbery/shrubbery/0000-shrubbery.md|github.com/mflatt/rhombus-brainstorming/blob/shrubbery/shrubbery/0000-shrubbery.md> is quite relevant to the earlier discussion.",
        "user": "UT60XSVCN",
        "ts": "1591005647.307700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UT60XSVCN",
            "ts": "1591039640.000000"
        },
        "attachments": [
            {
                "fallback": "[mflatt/rhombus-brainstorming] shrubbery/0000-shrubbery.md",
                "text": "```\n- Feature Name: Shrubbery notation\n- Start Date: 2019-10-01\n- RFC PR: [racket/racket2-rfcs#122](<https://github.com/racket/racket2-rfcs/pull/122>)\n\n# Summary\n[summary]: #summary\n\nShrubbery notation is similar to S-expression notation, but instead of\ngenerating fully formed trees, it is intended to partially group input\nfor further enforestation by another parser (e.g., as in Honu). The\nnotation is line- and indentation-sensitive, and the parsed form of a\nshrubbery imposes grouping to ensure that further parsing is\nconsistent with the shrubbery's lines and indentation.\n\n# Motivation\n[motivation]: #motivation\n\nS-expression notation imposes a grouping at the lexeme level that is\nall but guaranteed to be respected by further parsing via macro\nexpansion. One consequence of this lexeme-based grouping is that\nprograms can be pretty-printed and textually traversed in standard\nways.\n\nA traditional use of S-expression notation, however, insists that\n*all* grouping is reflected in the S-expression. Reifying all grouping\nat the lexeme level is so onerous that many practical deployments of\nS-expressions include deviations from the rule, such as keyword-based\narguments or implicit grouping by position (as in various Clojure\nforms).\n\nAnother disadvantage of S-expressions is that many of the parentheses\nare redundant after the expression is pretty-printed, because\nindentation provides the same grouping information in a more\nhuman-readable way. That observation suggests instead relying on line\nbreaks and indentation to impart grouping information, as in Python.\n\nShrubbery notation explores a point in the design space where the\nnotation is\n\n - line- and indentation-sensitive, and\n - intended to constrain grouping but not reflect every detail of grouping.\n\nDeferring complete grouping to another parser relieves a burden on\nreader-level notation. At the same time, line- and\nindentation-sensitive rules constrain parsing to ensure that line\nbreaks and indentation in the source are not misleading.\n\n# Guide-level explanation\n[guide-level-explanation]: #guide-level-explanation\n\nHere are some example shrubberies. A `:` in the middle of a line is the\nsame as starting a new line with indentation for the part after the\n`:`. (Extra `:`s are allowed, but they are non-standard, and we don't\nuse any extra `:`s here.)\n\n```\ndefine identity(x): x\n\ndefine fib(n):\n  cond\n   | n == 0: 0\n   | n == 1: 1\n   | else: fib(n-1) + fib(n-2)\n\ndefine print_sexp(v):\n  match v\n   | empty: display(\"()\")\n   | cons(a, d):\n       if is_list(d)\n        | display(\"(\")\n          print_sexp(a)\n          for (v = in_list(d)):\n            display(\" \")\n            print_sexp(v)\n          display(\")\")\n        | display(\"(\")\n          print_sexp(a)\n          display(\". \")\n          print_sexp(d)\n          display(\")\")\n   | v: print_atom(v)\n```\n\nForms like `define`, `cond`, and `match` are not specified by\nshrubbery notation, since specifying those forms is up to a language\nthat is built on top of shrubbery notation. Still, shrubbery notation\nis meant to accommodate a particular kind of syntax for nested blocks\n(via indentation or `:`) and conditional branches (via `|`).\n\nIdentifiers are C-style with alphanumerics and underscores. Operators\nare sequences of symbolic characters in the sense of `char-symbolic?`,\nroughly. Numbers are written in some reasonable way distinct from\nidentifiers. No spaces are needed between operators and non-operators,\nso `1+2` and `1 + 2` mean the same thing. Comments are C-style.\n\nThe following tokens are used for grouping, in addition to line breaks\nand indentation:\n\n```\n( ) [ ] { }   ; ,   : |   \\\n```\n\nParentheses, square brackets, and curly braces are used to form groups\nin the obvious way. A `;` or `,` acts as a group separator, even\nwithin a single line. A `:` or `|` treats remaining item on the same\nline like a new indented line, which forms a subgroup. A `\\` continues a\ngroup across a line break.\n\n## Grouping by lines\n\nThe main grouping rule is that sequences on different lines with the\nsame indentation create separate groups, one for each line.\n\n```\nthis is the first group\nthis is the second group\n```\n\nComments and lines with only whitespace are ignored. They don't count\nwhen this document says \u201cthe previous line\u201d or \u201cthe next line.\u201d\n\n## Grouping by _opener_-_closer_, including blocks\n\nAn _opener_-_closer_ pair `(` and `)`, `[` and `]`, or `{` and `}`\nforms a nested group that can span lines. Within the _opener_-_closer_\npair, separate lines at the same indentation form separate groups.\nWithin `()` or `[]`, groups on separate lines must also be separated\nby `,`.\n\n```\ngroup 1\n[group 2 - subgroup one,\n group 2 - subgroup two,\n (group 2 - subgroup three - subsubgroup A,\n  group 2 - subgroup three - subsubgroup B)]\ngroup 3\ngroup 4 {has a subgroup\n         and another subgroup}\n```\n\nParsing retains whether a subgroup is formed by `()`, `[]`, or `{}`. A\nsubgroup formed by `{` and `}` is also known as a _block_. In the\nabove example, the fourth group has three elements: the identifier\n`group`, the number `4`, and a block that has two groups (each with\nthree identifiers).\n\nAs a special rule, when a group is immediately within a `()` or `[]`\ngroup sequence, the group continues to the next line when that next\nline starts with an operator. This rule allows long expressions with\ninfix operators to be broken across lines more naturally and readably\nthan using `\\`.\n\n```\n(my_favorite_number\n + your_favorite_number\n + their_favorite_numbers)\n```\n\n## Group separators `;` and `,`\n\nA `;` or a `,` separates two groups on the same line. A `;` is allowed\nin any context except between groups immediately within `()` or `[]`.\nA `,` is allowed only to separate groups of an immediate sequence\nwithin `()` or `[]`, and `,` is also required to separate groups\nwitin `()` and `[]`.\n\nThe following two groups are the same:\n\n```\n[(subgroup one, subgroup two,\n  subgroup three),\n {subgroup X; subgroup Y}]\n\n[(subgroup one,\n  subgroup two,\n  subgroup three),\n {subgroup X\n  subgroup Y}]\n```\n\nThese following forms are disllowed, because they use the wrong\nseparator or because a required separator is missing.\n\n\n```\n// Not allowed\n(1; 2)\n[1; 2]\n{1, 2}\n\n// Not allowed\n(1\n 2)\n[1\n 2]\n```\n\nThe `;` and `,` separators interact differently with subgroups formed\nby indentation, `:`, and `|`. A `,` closes subgroups as necessary to\nreach an enclosing `()` or `[]`, while a `;` separate groups within a\nnested group sequence. A `;` will never create an empty group. A `,`\nis disallowed if it would create an empty group, except that a traiing\n`,` is allowed.\n\n```\n// Not allowed\n(, 1)\n(1,, 2)\n\n// Allowed, but not standard\n(1, 2,)\n```\n\nA trailing `,` is only standard style when the _closer_ that follows is\non its own line.\n\n```\nlist(\n  red,\n  green,\n  blue,\n  orange,\n)\n```\n\n## Grouping by indentation\n\nA sequence of groups has a particular indentation that is determined\nby the first group in the sequence. Subsequent groups in a sequence\nmust start with the same indentation as the first group.\n\nIndentation relative to the current group is equivalent to wrapping\nthe indented lines with `{` and `}`. That is, indentation creates a\nblock. The inserted `{` is placed on the line just before the indented\ngroup, and the `}` is placed just before the line where indentation\nbecomes shallower again. All four of the following groups are the\nsame, each with one block that has two nested groups:\n\n```\nhello:\n  world\n  universe\n\nhello:\n       world\n       universe\n\nhello { world\n        universe }\n\nhello { world ; universe }\n```\n\nAs illustrated in those examples, there is no constraint on how much\nindentation a nested group sequence must use, as long as the indentation\nis more than the enclosing group. Within an _opener_-_closer_ pair, a\nnested group sequence can start at any indentation; it doesn't have to be\nindented to the right of the _opener_.\n\n```\nhello {\n  world\n  universe\n}\n```\n\nIdentation is allowed only on a line where the previous line ends\u2026",
                "title": "shrubbery/0000-shrubbery.md",
                "footer": "<https://github.com/mflatt/rhombus-brainstorming|mflatt/rhombus-brainstorming>",
                "id": 1,
                "title_link": "https://github.com/mflatt/rhombus-brainstorming/blob/shrubbery/shrubbery/0000-shrubbery.md",
                "footer_icon": "https://github.githubassets.com/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https://github.com/mflatt/rhombus-brainstorming/blob/shrubbery/shrubbery/0000-shrubbery.md",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8uX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " interesting. I will have to spend some time learning about them. Is Beautiful Racket still the recommended resource?\n\nOn another note, "
                            },
                            {
                                "type": "link",
                                "url": "http://github.com/mflatt/rhombus-brainstorming/blob/shrubbery/shrubbery/0000-shrubbery.md",
                                "text": "github.com/mflatt/rhombus-brainstorming/blob/shrubbery/shrubbery/0000-shrubbery.md"
                            },
                            {
                                "type": "text",
                                "text": " is quite relevant to the earlier discussion."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590712683.260000",
        "parent_user_id": "UT60XSVCN",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c2788138-02e9-4af6-aed6-09d022a37d2f",
        "type": "message",
        "text": "(How do I make slack not ecpand the whole thing?)",
        "user": "UT60XSVCN",
        "ts": "1591005709.308200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hNKf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(How do I make slack not ecpand the whole thing?)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590712683.260000",
        "parent_user_id": "UT60XSVCN"
    },
    {
        "client_msg_id": "fe9d983c-aa47-4e3a-9082-068efae98b2d",
        "type": "message",
        "text": "Thinking about it, aren't coloured spaces basically what you get with org-mode outlines? I mean, they aren't literally spaces, but presentation-wise.",
        "user": "UT60XSVCN",
        "ts": "1591006713.308400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2daM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thinking about it, aren't coloured spaces basically what you get with org-mode outlines? I mean, they aren't literally spaces, but presentation-wise."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1588700944.049400",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "2e2ba76d-d925-4d41-8c8f-df72e56192e9",
        "type": "message",
        "text": "I just delete the attachment in these situations. There should be a 'x' for you up top on the web interface.",
        "user": "UCUSW7WVD",
        "ts": "1591022363.308700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1591022396.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Pi1f",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I just delete the attachment in these situations. There should be a 'x' for you up top on the web interface."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590712683.260000",
        "parent_user_id": "UT60XSVCN"
    },
    {
        "client_msg_id": "f0591ace-ea54-4222-aee7-10ec4a9469a3",
        "type": "message",
        "text": "Our Future of Coding project is taking shape :star-struck:\n*We are building Machine Learning Model that can learn how to code*\n\n:trophy: With <@UPVBV34EL> we are excited to release *codeBERT.*  It's a Masked Language Model trained over Python source code thanks to Hugging Face.\n\n:joystick: You can easily load the model and its weights (code below)\n```from transformers import *\ntokenizer = AutoTokenizer.from_pretrained(\"codistai/codeBERT-small-v2\")model = AutoModelWithLMHead.from_pretrained(\"codistai/codeBERT-small-v2\")```\n:chart_with_upwards_trend:  Example of the results are in the thread below\n\n:books: Full tutorial on how to load and fine-tune the model for downstream tasks is coming!",
        "user": "UPU0YJ1CM",
        "ts": "1591023770.311300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UPU0YJ1CM",
            "ts": "1591023985.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6Fwkj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Our Future of Coding project is taking shape "
                            },
                            {
                                "type": "emoji",
                                "name": "star-struck"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "We are building Machine Learning Model that can learn how to code",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "emoji",
                                "name": "trophy"
                            },
                            {
                                "type": "text",
                                "text": " With "
                            },
                            {
                                "type": "user",
                                "user_id": "UPVBV34EL"
                            },
                            {
                                "type": "text",
                                "text": " we are excited to release "
                            },
                            {
                                "type": "text",
                                "text": "codeBERT. ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " It's a Masked Language Model trained over Python source code thanks to Hugging Face.\n\n"
                            },
                            {
                                "type": "emoji",
                                "name": "joystick"
                            },
                            {
                                "type": "text",
                                "text": " You can easily load the model and its weights (code below)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "from transformers import *\ntokenizer = AutoTokenizer.from_pretrained(\"codistai/codeBERT-small-v2\")model = AutoModelWithLMHead.from_pretrained(\"codistai/codeBERT-small-v2\")"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "emoji",
                                "name": "chart_with_upwards_trend"
                            },
                            {
                                "type": "text",
                                "text": "  Example of the results are in the thread below\n\n"
                            },
                            {
                                "type": "emoji",
                                "name": "books"
                            },
                            {
                                "type": "text",
                                "text": " Full tutorial on how to load and fine-tune the model for downstream tasks is coming!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591023770.311300",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1591023947.311800",
        "reply_users": [
            "UPU0YJ1CM"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "tada",
                "users": [
                    "UC2A2ARPT",
                    "UQPHR6Y3S",
                    "U8A5MS6R1",
                    "UA14TGLTC",
                    "UPVBV34EL",
                    "UBSMEUXAA",
                    "UCXR52MU2"
                ],
                "count": 7
            }
        ]
    },
    {
        "type": "message",
        "text": "codeBERT results over Python code",
        "files": [
            {
                "id": "F01468KT44X",
                "created": 1591023931,
                "timestamp": 1591023931,
                "name": "codeBERT-small-results.png",
                "title": "codeBERT-small-results.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UPU0YJ1CM",
                "editable": false,
                "size": 362208,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F01468KT44X/codebert-small-results.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F01468KT44X/download/codebert-small-results.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F01468KT44X-e0df865b17/codebert-small-results_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F01468KT44X-e0df865b17/codebert-small-results_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F01468KT44X-e0df865b17/codebert-small-results_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 270,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F01468KT44X-e0df865b17/codebert-small-results_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 360,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F01468KT44X-e0df865b17/codebert-small-results_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F01468KT44X-e0df865b17/codebert-small-results_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 540,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F01468KT44X-e0df865b17/codebert-small-results_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 600,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F01468KT44X-e0df865b17/codebert-small-results_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 720,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F01468KT44X-e0df865b17/codebert-small-results_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 768,
                "original_w": 1198,
                "original_h": 898,
                "thumb_tiny": "AwAjADCUafAVBw3PuaX+zrf0b8zTVa9wMeV075pd19/0x/WgA/s639G/M0f2db+jfnRuv/SKjdf+kVAC/wBm2/o350f2bb+jfnSbr/0iozf+kVAFhPur9BTvypqfdX6CnflQAv40fjR+NH40AA+tB6UD60HpQA1B8i/QU7A9KSP7i/QUtAC0UUUAFIelLSHpQB//2Q==",
                "permalink": "https://futureofcoding.slack.com/files/UPU0YJ1CM/F01468KT44X/codebert-small-results.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F01468KT44X-76d32f0320",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": true,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hkn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "codeBERT results over Python code"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UPU0YJ1CM",
        "display_as_bot": false,
        "ts": "1591023947.311800",
        "client_msg_id": "f7f41801-6df2-498f-8427-cc997ddf2018",
        "thread_ts": "1591023770.311300",
        "parent_user_id": "UPU0YJ1CM"
    },
    {
        "client_msg_id": "e5ffd86f-91a1-454d-8c9f-d4bb608504ab",
        "type": "message",
        "text": "A few thoughts from my instruction set design.\n1. My uCISC instructions have an increment flag in them (see <https://github.com/grokthis/ucisc/blob/master/docs/07_ALU.md#arguments>). This allows you to chain arbitrarily long ALU functions back to back in increments of 16-bits since that is my word size. This works for addition, shifts and similar operations, for example. The increment points it to the next address and the carry flags tell the ALU how to adjust the next op.\n2. You can generalize this by adding a repeater flag to repeat the same operation N times (see the repetition factor here <https://github.com/grokthis/ucisc/blob/master/docs/05_Instruction_Behaviors.md#flags-register>)\n3. I banned floating point math from my ALU. You can always attach custom hardware to speed up these cases if needed. The problem is that these operations tend to be highly bit width dependent and also orders of magnitude slower in software.\n4. However, repetition does NOT work for ALU operations where the first bit and the last bit affect each other. For example, in multiplication, each bit is effectively multiplied against every other bit. So, for arbitrarily sized numbers you'll need to make multiple passes. Using something like the Karatsuba algorithm (<https://en.wikipedia.org/wiki/Karatsuba_algorithm>) you could arbitrarily decompose larger operations into multiple sub operations but it's non-linearly scaling. I haven't done the math, but it gets out of control computation very quickly.\n5. Verilog has ALU operations built in with semantics controlling bit width and signed-ness and the effects on the operation. I have found I need to be ultra careful with the results. Adding 8 bit numbers results in a 9th bit. Multiplying to n-bit numbers results in a 2n-bit number. You also have to be careful with what happens when you operate on unequal bit lengths. Verilog's handling of these things might provide some inspiration on how to do what you want.",
        "user": "U015902ESJC",
        "ts": "1591031496.312300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/0/03/Karatsuba_multiplication.svg/1200px-Karatsuba_multiplication.svg.png",
                "image_width": 1200,
                "image_height": 1200,
                "image_bytes": 187003,
                "title": "Karatsuba algorithm",
                "title_link": "https://en.wikipedia.org/wiki/Karatsuba_algorithm",
                "from_url": "https://en.wikipedia.org/wiki/Karatsuba_algorithm",
                "author_name": "Wikipedia",
                "author_link": "https://en.wikipedia.org/",
                "text": "The Karatsuba algorithm is a fast multiplication algorithm. It was discovered by Anatoly Karatsuba in 1960 and published in 1962. It reduces the multiplication of two n-digit numbers to at most \n  \n    \n      \n        \n          n\n          \n            \n              log\n              \n                2\n              \n            \n            \u2061\n            3\n          \n        \n        \u2248\n        \n          n\n          \n            1.58\n          \n        \n      \n    \n    {\\displaystyle n^{\\log _{2}3}\\approx n^{1.58}}\n   single-digit multiplications in general (and exactly \n  \n    \n      \n        \n          n\n          \n            \n              log\n              \n                2\n              \n            \n            \u2061\n            3\n          \n        \n      \n    \n    {\\displaystyle n^{\\log _{2}3}}\n   when n is a power of 2). It is therefore faster than the traditional algorithm, which requires \n  \n    \n      \n        \n          n\n          \n            2\n          \n        \n      \n    \n    {\\displaystyle n^{2}}\n   single-digit products. For example, the Karatsuba algorithm requires 310 = 59,049 single-digit multiplications to multiply two 1024-digit numbers (n = 1024 = 210), whereas the traditional algorithm requires (210)2 = 1,048,576 (a speedup of 17.75 times).\nThe Karatsuba algorithm was the first multiplication algorithm asymptotically faster than the quadratic \"grade school\" algorithm.\nThe Toom\u2013Cook algorithm (1963) is a faster generalization of Karatsuba's method, and the Sch\u00f6nhage\u2013Strassen algorithm (1971) is even faster, for sufficiently large n.",
                "fallback": "wikipedia: Karatsuba algorithm",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png",
                "id": 1,
                "original_url": "https://en.wikipedia.org/wiki/Karatsuba_algorithm"
            },
            {
                "fallback": "[grokthis/ucisc] docs/07_ALU.md",
                "title": "docs/07_ALU.md",
                "footer": "<https://github.com/grokthis/ucisc|grokthis/ucisc>",
                "id": 2,
                "title_link": "https://github.com/grokthis/ucisc/blob/master/docs/07_ALU.md",
                "footer_icon": "https://github.githubassets.com/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https://github.com/grokthis/ucisc/blob/master/docs/07_ALU.md#arguments",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XesLB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A few thoughts from my instruction set design.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "My uCISC instructions have an increment flag in them (see "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://github.com/grokthis/ucisc/blob/master/docs/07_ALU.md#arguments"
                                    },
                                    {
                                        "type": "text",
                                        "text": "). This allows you to chain arbitrarily long ALU functions back to back in increments of 16-bits since that is my word size. This works for addition, shifts and similar operations, for example. The increment points it to the next address and the carry flags tell the ALU how to adjust the next op."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "You can generalize this by adding a repeater flag to repeat the same operation N times (see the repetition factor here "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://github.com/grokthis/ucisc/blob/master/docs/05_Instruction_Behaviors.md#flags-register"
                                    },
                                    {
                                        "type": "text",
                                        "text": ")"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "I banned floating point math from my ALU. You can always attach custom hardware to speed up these cases if needed. The problem is that these operations tend to be highly bit width dependent and also orders of magnitude slower in software."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "However, repetition does NOT work for ALU operations where the first bit and the last bit affect each other. For example, in multiplication, each bit is effectively multiplied against every other bit. So, for arbitrarily sized numbers you'll need to make multiple passes. Using something like the Karatsuba algorithm ("
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://en.wikipedia.org/wiki/Karatsuba_algorithm"
                                    },
                                    {
                                        "type": "text",
                                        "text": ") you could arbitrarily decompose larger operations into multiple sub operations but it's non-linearly scaling. I haven't done the math, but it gets out of control computation very quickly."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Verilog has ALU operations built in with semantics controlling bit width and signed-ness and the effects on the operation. I have found I need to be ultra careful with the results. Adding 8 bit numbers results in a 9th bit. Multiplying to n-bit numbers results in a 2n-bit number. You also have to be careful with what happens when you operate on unequal bit lengths. Verilog's handling of these things might provide some inspiration on how to do what you want."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ebb4fe73-ff84-4251-ad36-f2fba768b330",
        "type": "message",
        "text": "LLVM supports this: <http://blog.llvm.org/2020/04/the-new-clang-extint-feature-provides.html>",
        "user": "UJN1TAYEQ",
        "ts": "1591041211.313400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "The New Clang _ExtInt Feature Provides Exact Bitwidth Integer Types",
                "title_link": "http://blog.llvm.org/2020/04/the-new-clang-extint-feature-provides.html",
                "text": "Author : Erich Keane , Compiler Frontend Engineer, Intel Corporation Earlier this month I finally committed a patch to implement the exten...",
                "fallback": "The New Clang _ExtInt Feature Provides Exact Bitwidth Integer Types",
                "from_url": "http://blog.llvm.org/2020/04/the-new-clang-extint-feature-provides.html",
                "service_icon": "http://blog.llvm.org/favicon.ico",
                "service_name": "blog.llvm.org",
                "id": 1,
                "original_url": "http://blog.llvm.org/2020/04/the-new-clang-extint-feature-provides.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0qMM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "LLVM supports this: "
                            },
                            {
                                "type": "link",
                                "url": "http://blog.llvm.org/2020/04/the-new-clang-extint-feature-provides.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "0183194f-6d37-4110-89f2-8754aaabc2d7",
        "type": "message",
        "text": "There's a proposal to put this into the C language: <http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2472.pdf>",
        "user": "UJN1TAYEQ",
        "ts": "1591041290.313700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PKfkB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's a proposal to put this into the C language: "
                            },
                            {
                                "type": "link",
                                "url": "http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2472.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "a67ac80f-4f87-4c7d-9a34-97ac39772392",
        "type": "message",
        "text": "If you feel (as I\u2019m guessing most of us here do) that software development hasn\u2019t progressed very much in the last several decades, can you share any thoughts/theories you might have on why that has happened?",
        "user": "ULM3U6275",
        "ts": "1591041589.315800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1591041634.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TE4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you feel (as I\u2019m guessing most of us here do) that software development hasn\u2019t progressed very much in the last several decades, can you share any thoughts/theories you might have on why that has happened?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591041589.315800",
        "reply_count": 16,
        "reply_users_count": 7,
        "latest_reply": "1591113927.373800",
        "reply_users": [
            "UC2A2ARPT",
            "U6FKVSVCK",
            "USH01JEDQ",
            "U014BMRB170",
            "UJBAJNFLK",
            "UA14TGLTC",
            "U71PMQ1V0"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "popcorn",
                "users": [
                    "USH01JEDQ",
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "32ec4f31-3f45-4617-883f-e8fca44aebb0",
        "type": "message",
        "text": "Because I think it's going to devolve\u2026 if you instead want to share thoughts about how software dev _has_ made good progress in the past few decades, join my thread.",
        "user": "UC2A2ARPT",
        "ts": "1591042038.317200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Roha3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Because I think it's going to devolve\u2026 if you instead want to share thoughts about how software dev "
                            },
                            {
                                "type": "text",
                                "text": "has",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " made good progress in the past few decades, join my thread."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591042038.317200",
        "reply_count": 18,
        "reply_users_count": 6,
        "latest_reply": "1591122250.379900",
        "reply_users": [
            "UC2A2ARPT",
            "U6FKVSVCK",
            "UT9TWSZB5",
            "U71PMQ1V0",
            "U0123H7JRDM",
            "UHWC9PXBL"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "slightly_smiling_face",
                "users": [
                    "UT9TWSZB5"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9df1cd27-8659-4c6c-9b14-6ea2be9bb2e8",
        "type": "message",
        "text": ":cricket: :cricket: :cricket:",
        "user": "UC2A2ARPT",
        "ts": "1591042061.317300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Edd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "cricket"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "cricket"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "cricket"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591042038.317200",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "fd22a81a-2563-4d88-a108-bea03a7d52c4",
        "type": "message",
        "text": "In my personal experience, Macromedia Flash was a remarkable tool that took a lot of brilliance with it when it died. It was a _good enough_ programming environment (arguably on par with modern JS, or Lua), but that programming environment was embedded within and subservient to a powerful graphics program. People could (and would) use it just to draw pictures or make animations, never touching the programming features.\n\nSo the absence of a modern equivalent is, I think, one way in which we've actually lost progress. We have Unity and Unreal, but while they do have basic 3d modelling features, they are by no means 3d art tools themselves \u2014\u00a0you still need to bring your own Blender, so to speak.\n\nThis is why I see potential for visual programming \u2014\u00a0it's not just a way to make the programming experience more _live_, it's actually a way to make the programming experience embedded within and subservient to the arts. Like Flash, but more so.\n\nI think this sort of \"embed the programming within the domain\" is a useful, subtle inversion of the idea of a DSL. Spreadsheets are this. So I think some of the stagnation has been the relative lack of new initiatives of this type.",
        "user": "UC2A2ARPT",
        "ts": "1591042419.317500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1591042602.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rrQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In my personal experience, Macromedia Flash was a remarkable tool that took a lot of brilliance with it when it died. It was a "
                            },
                            {
                                "type": "text",
                                "text": "good enough",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " programming environment (arguably on par with modern JS, or Lua), but that programming environment was embedded within and subservient to a powerful graphics program. People could (and would) use it just to draw pictures or make animations, never touching the programming features.\n\nSo the absence of a modern equivalent is, I think, one way in which we've actually lost progress. We have Unity and Unreal, but while they do have basic 3d modelling features, they are by no means 3d art tools themselves \u2014\u00a0you still need to bring your own Blender, so to speak.\n\nThis is why I see potential for visual programming \u2014\u00a0it's not just a way to make the programming experience more "
                            },
                            {
                                "type": "text",
                                "text": "live",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", it's actually a way to make the programming experience embedded within and subservient to the arts. Like Flash, but more so.\n\nI think this sort of \"embed the programming within the domain\" is a useful, subtle inversion of the idea of a DSL. Spreadsheets are this. So I think some of the stagnation has been the relative lack of new initiatives of this type."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591041589.315800",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJBAJNFLK",
                    "ULM3U6275",
                    "UA14TGLTC",
                    "UML4ZEKDK",
                    "U013RRN6Y6N"
                ],
                "count": 5
            }
        ]
    },
    {
        "client_msg_id": "87d816d9-3ffd-40ab-a22b-a4ae716d435a",
        "type": "message",
        "text": "Short answer: We're at a local maximum. There is a distinct valley of utility between where we are (text programming) and where we could be (fully interactive computing systems) which is deep and difficult to cross, because there isn't really a good incremental way to turn text programming into a fully interactive visual language. Any in-between would be too constrained and clumsy for a fluent programmer working with mature text-based systems, and too difficult to use for a non-programmer who needs programming.\n\nThere's not a lot of need or market in that valley between the peaks. The mountain has to be climbed from the bottom, and it's counterintuitive to make a \"programming language\" that \"isn't for programmers\" (at first).",
        "user": "U6FKVSVCK",
        "ts": "1591042571.317700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eNdBx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Short answer: We're at a local maximum. There is a distinct valley of utility between where we are (text programming) and where we could be (fully interactive computing systems) which is deep and difficult to cross, because there isn't really a good incremental way to turn text programming into a fully interactive visual language. Any in-between would be too constrained and clumsy for a fluent programmer working with mature text-based systems, and too difficult to use for a non-programmer who needs programming.\n\nThere's not a lot of need or market in that valley between the peaks. The mountain has to be climbed from the bottom, and it's counterintuitive to make a \"programming language\" that \"isn't for programmers\" (at first)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591041589.315800",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "UA14TGLTC",
                    "UML4ZEKDK"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "e5c10ae2-c6e7-4976-ac57-0ef1633d31ee",
        "type": "message",
        "text": "I could see an alternate universe where Engelbart's demo happened a handful of years later (when it would have been more possible for others to emulate), when many of its ideas could take off immediately, and programming evolved directly from SketchPad, completely leaving text programming in the dust of the 1970s",
        "user": "U6FKVSVCK",
        "ts": "1591042796.318100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KAtB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I could see an alternate universe where Engelbart's demo happened a handful of years later (when it would have been more possible for others to emulate), when many of its ideas could take off immediately, and programming evolved directly from SketchPad, completely leaving text programming in the dust of the 1970s"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591041589.315800",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "fc55f799-6205-406d-8c83-bc08769f8b56",
        "type": "message",
        "text": "There could have been a world where we chose the trail to the Interactive Programming peak from the very beginning.",
        "user": "U6FKVSVCK",
        "ts": "1591042952.318300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Qbi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There could have been a world where we chose the trail to the Interactive Programming peak from the very beginning."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591041589.315800",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "f4cbc091-a8f8-420d-8648-ca9a273387d4",
        "type": "message",
        "text": "You gotta give it more than 15 minutes, <@UC2A2ARPT> :smile:",
        "user": "U6FKVSVCK",
        "ts": "1591043180.318500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n/u2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You gotta give it more than 15 minutes, "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591042038.317200",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "hatching_chick",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "upside_down_face",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6e4d598d-9d3a-4992-9e18-12b8d01c6ad7",
        "type": "message",
        "text": "I think notebooks, the in-browser dev tools, and compiler-connected text editors are notable leaps in interactivity",
        "user": "U6FKVSVCK",
        "ts": "1591043208.318700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MMkLn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think notebooks, the in-browser dev tools, and compiler-connected text editors are notable leaps in interactivity"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591042038.317200",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "bef7c2ca-232f-4ea9-ad92-302217eca52e",
        "type": "message",
        "text": "Also, the ability to imbue passive real-world objects with computational \"magic\" at Dynamicland fairly well blew my mind. There's definitely something revolutionary there.",
        "user": "U6FKVSVCK",
        "ts": "1591043264.319300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vg8Yk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, the ability to imbue passive real-world objects with computational \"magic\" at Dynamicland fairly well blew my mind. There's definitely something revolutionary there."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591042038.317200",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UC2A2ARPT",
                    "UBSMEUXAA"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "184a4acf-6a4c-42c7-b2f1-2df98023bca5",
        "type": "message",
        "text": "There are a number of tools we've built to do jobs that used to require bespoke from-scratch programming. I'm thinking of things like Rails-style web frameworks, Unity-style game engines, Maya-style 3d software. These are all amazing to me. They show that programming can be a good way to bootstrap from \"requires bespoke code per project\" to \"can use a substrate that covers up to the 99th percentile before bespoke solutions make more sense\". Having those things now might make programming progress look slower. In a number of important areas \u2014 and, perhaps, _all_ the low-hanging fruit areas \u2014 we've already used programming to obviate the need for programming.",
        "user": "UC2A2ARPT",
        "ts": "1591043349.319500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1591043561.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "suX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are a number of tools we've built to do jobs that used to require bespoke from-scratch programming. I'm thinking of things like Rails-style web frameworks, Unity-style game engines, Maya-style 3d software. These are all amazing to me. They show that programming can be a good way to bootstrap from \"requires bespoke code per project\" to \"can use a substrate that covers up to the 99th percentile before bespoke solutions make more sense\". Having those things now might make programming progress look slower. In a number of important areas \u2014 and, perhaps, "
                            },
                            {
                                "type": "text",
                                "text": "all",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the low-hanging fruit areas \u2014 we've already used programming to obviate the need for programming."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591042038.317200",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "78bd9cac-cdb1-40e8-aba3-6d797a14bdab",
        "type": "message",
        "text": "Obviously I'm very bullish on node graphs :grinning:\u2014 the best examples of which we owe to VFX and audio \"DSLs\"",
        "user": "U6FKVSVCK",
        "ts": "1591043577.320000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7Z0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Obviously I'm very bullish on node graphs "
                            },
                            {
                                "type": "emoji",
                                "name": "grinning"
                            },
                            {
                                "type": "text",
                                "text": "\u2014 the best examples of which we owe to VFX and audio \"DSLs\""
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591042038.317200",
        "parent_user_id": "UC2A2ARPT"
    }
]