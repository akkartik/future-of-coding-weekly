[
    {
        "client_msg_id": "e0109108-368b-4841-98ea-d898b8b901a8",
        "type": "message",
        "text": "<@UFEQUBNNT> Yeah, I know about Rust. But I'm using C++, and I have large C++ library dependencies. I would only expect Rust to be better if I am compiling pure Rust code. Which isn't an option: those C++ libraries are written by specialists, and some have no Rust equivalents. Compiling a mix of C++ and Rust to WASM is not going to be easier than compiling pure C++ to WASM, I'm pretty sure. It would be an easier choice if the Rust library ecosystem were more mature.",
        "user": "UJN1TAYEQ",
        "ts": "1592087323.257800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LxT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFEQUBNNT"
                            },
                            {
                                "type": "text",
                                "text": " Yeah, I know about Rust. But I'm using C++, and I have large C++ library dependencies. I would only expect Rust to be better if I am compiling pure Rust code. Which isn't an option: those C++ libraries are written by specialists, and some have no Rust equivalents. Compiling a mix of C++ and Rust to WASM is not going to be easier than compiling pure C++ to WASM, I'm pretty sure. It would be an easier choice if the Rust library ecosystem were more mature."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "18cb8e9e-87aa-4006-a966-d4f867ca8db5",
        "type": "message",
        "text": "<@UFEQUBNNT> if you want to embed and are interested in the security properties of WASM especially, I *highly* recommend Lucet",
        "user": "U014Y19RYA3",
        "ts": "1592094120.258600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y3XCm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFEQUBNNT"
                            },
                            {
                                "type": "text",
                                "text": " if you want to embed and are interested in the security properties of WASM especially, I "
                            },
                            {
                                "type": "text",
                                "text": "highly",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " recommend Lucet"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "63747d64-f8bd-4a21-b9fa-2d11a5e1c1b5",
        "type": "message",
        "text": "<@UJN1TAYEQ> If you have all the source code and it's all in C++ (no inline assembly, etc) then emscripten should be able to handle compiling to WASM+JS shim for web or nodejs or deno",
        "user": "U014Y19RYA3",
        "ts": "1592094179.258800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U014Y19RYA3",
            "ts": "1592094363.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z+Kh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " If you have all the source code and it's all in C++ (no inline assembly, etc) then emscripten should be able to handle compiling to WASM+JS shim for web or nodejs or deno"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "E1A1CCC5-A2AB-4A75-AF55-A95612B469E3",
        "type": "message",
        "text": "I wish I could, but that\u2019s what Vector uses and that RFC says it\u2019s Linux-only. I honestly don\u2019t care if it\u2019s built out of Fisher Price blocks if it works, I\u2019m just prototyping. :laughing: Have you used Lucet?",
        "user": "UFEQUBNNT",
        "ts": "1592094508.261000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KJn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wish I could, but that\u2019s what Vector uses and that RFC says it\u2019s Linux-only. I honestly don\u2019t care if it\u2019s built out of Fisher Price blocks if it works, I\u2019m just prototyping. "
                            },
                            {
                                "type": "emoji",
                                "name": "laughing"
                            },
                            {
                                "type": "text",
                                "text": " Have you used Lucet?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "6fb0bb27-62bb-488b-b38e-819de58d0cc0",
        "type": "message",
        "text": "Yes. Lucet is great.  It runs on MacOS also, though their MacOS support is beta/best effort so not for production use",
        "user": "U014Y19RYA3",
        "ts": "1592094650.261200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IPo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes. Lucet is great.  It runs on MacOS also, though their MacOS support is beta/best effort so not for production use"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "0A17EA7D-FFE8-47AB-AE7A-ECA877F2CCAA",
        "type": "message",
        "text": "Interesting! Worth a look for me, then, thanks!",
        "user": "UFEQUBNNT",
        "ts": "1592094744.261800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+j4I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting! Worth a look for me, then, thanks!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "0915fca9-1f35-495d-afcb-f42e0f984dd4",
        "type": "message",
        "text": "I was on the team building a Lucet-based WASM serverless system at $DAYJOB",
        "user": "U014Y19RYA3",
        "ts": "1592094758.262000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wlk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was on the team building a Lucet-based WASM serverless system at $DAYJOB"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "483f1f3e-1999-4e84-b56a-00fefba1d855",
        "type": "message",
        "text": "it's not live yet, but very promising generally, especially if security features interest you",
        "user": "U014Y19RYA3",
        "ts": "1592094774.262200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ne+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it's not live yet, but very promising generally, especially if security features interest you"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "61344B77-DEEB-4831-A36F-63BABD80A2A9",
        "type": "message",
        "text": "They do long term, if I get there. :)",
        "user": "UFEQUBNNT",
        "ts": "1592095420.262600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "emY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "They do long term, if I get there. :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "4c64a82e-5404-4bf0-b992-3e56ee2046eb",
        "type": "message",
        "text": "web assembly is intentionally brain damaged. At present, it is limited to running in a separate thread, and cannot access the DOM directly.  All of us JS-haters were hoping for a clean virtual machine with direct API access to the BIOS which would be the DOM. If they had done that it would have created a virtual OS that would have permitted all the languages to easily move to that new universal OS. Instead, JS still rules, and WebAsm is for async heavy computation. Sure you can implement some complex back-and-forth system, but that defeats the whole purpose of getting closer to the metal. If Google &amp; co. let other languages in, it could well lessen their control of the ecosystem. At present the V8 engine reigns supreme; it is an exceptional performing piece of code, but also super complex.",
        "user": "UEQ6M68H0",
        "ts": "1592108457.262800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Q4+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "web assembly is intentionally brain damaged. At present, it is limited to running in a separate thread, and cannot access the DOM directly.  All of us JS-haters were hoping for a clean virtual machine with direct API access to the BIOS which would be the DOM. If they had done that it would have created a virtual OS that would have permitted all the languages to easily move to that new universal OS. Instead, JS still rules, and WebAsm is for async heavy computation. Sure you can implement some complex back-and-forth system, but that defeats the whole purpose of getting closer to the metal. If Google & co. let other languages in, it could well lessen their control of the ecosystem. At present the V8 engine reigns supreme; it is an exceptional performing piece of code, but also super complex."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "1FCF9569-63DD-48DE-B8C1-D5B3AA53461C",
        "type": "message",
        "text": "I write Go that accesses the DOM all the time and haven\u2019t noticed any indirection. What do you mean?",
        "user": "UFEQUBNNT",
        "ts": "1592108692.263900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+fOK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I write Go that accesses the DOM all the time and haven\u2019t noticed any indirection. What do you mean?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "b26e34d6-8a9a-4008-952f-a4abfea6b81f",
        "type": "message",
        "text": "I come a bit late (!) too this conversation, but I agree with <@UC2A2ARPT> when he says:\n&gt; This is why I see potential for visual programming \u2014\u00a0it's not just a way to make the programming experience more\u00a0_live_, it's actually a way to make the programming experience embedded within and subservient to the arts. Like Flash, but more so.\nAnd Scratch offer something like that: you program the sprites and even the scene. You have a simple sound editor and a drawing tool built in, and I see lots of children spending more time drawing than programming, some doesn't even feel like to program at all. In the end you might feel that programming is only one mean among others in your creation process.",
        "user": "UJ6LDMMN0",
        "ts": "1592151355.265000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0Qn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I come a bit late (!) too this conversation, but I agree with "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " when he says:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is why I see potential for visual programming \u2014\u00a0it's not just a way to make the programming experience more\u00a0"
                            },
                            {
                                "type": "text",
                                "text": "live",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", it's actually a way to make the programming experience embedded within and subservient to the arts. Like Flash, but more so."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And Scratch offer something like that: you program the sprites and even the scene. You have a simple sound editor and a drawing tool built in, and I see lots of children spending more time drawing than programming, some doesn't even feel like to program at all. In the end you might feel that programming is only one mean among others in your creation process."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591041589.315800",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "aea1dcf6-39e3-4aca-b6ee-a901a605b524",
        "type": "message",
        "text": "I also like the local maxima point from <@U6FKVSVCK>. I feel the same that it is difficult to make an incremental move from one maximum (now/text programming only for experts) to an other (future/programming that end user can do).\n&gt; There's not a lot of need or market in that valley between the peaks. The mountain has to be climbed from the bottom, and it's counterintuitive to make a \"programming language\" that \"isn't for programmers\" (at first).\nThat is why I guess that a good approach can be to make something that is targeted at end-user programmers. Maybe with a secondary focus to make some expert programmers happy, but not try to convince or make them move all at once.",
        "user": "UJ6LDMMN0",
        "ts": "1592151775.265200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MRHF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also like the local maxima point from "
                            },
                            {
                                "type": "user",
                                "user_id": "U6FKVSVCK"
                            },
                            {
                                "type": "text",
                                "text": ". I feel the same that it is difficult to make an incremental move from one maximum (now/text programming only for experts) to an other (future/programming that end user can do).\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's not a lot of need or market in that valley between the peaks. The mountain has to be climbed from the bottom, and it's counterintuitive to make a \"programming language\" that \"isn't for programmers\" (at first)."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That is why I guess that a good approach can be to make something that is targeted at end-user programmers. Maybe with a secondary focus to make some expert programmers happy, but not try to convince or make them move all at once."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591041589.315800",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "635a2a9e-0d23-45fa-9f18-67a887125a37",
        "type": "message",
        "text": "Very interesting discussion! Especially the Pixar anecdote (thanks <@U6FKVSVCK> for sharing it :slightly_smiling_face: ). I guess that any \"advanced\" are the tools, you will always be able to use it in a messing way. And there will be always cases where it is reasonable to program messy things (as for the Pixar example). For me this is inherent to the act of programming: you are always making compromise between \"perfect\" (at least perceived perfection, but that is another subject) and \"useful/actually used\". And I guess it is important to have this central aspect of programming in mind when creating programming tool.",
        "user": "UJ6LDMMN0",
        "ts": "1592154031.266000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cl4ML",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Very interesting discussion! Especially the Pixar anecdote (thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "U6FKVSVCK"
                            },
                            {
                                "type": "text",
                                "text": " for sharing it "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " ). I guess that any \"advanced\" are the tools, you will always be able to use it in a messing way. And there will be always cases where it is reasonable to program messy things (as for the Pixar example). For me this is inherent to the act of programming: you are always making compromise between \"perfect\" (at least perceived perfection, but that is another subject) and \"useful/actually used\". And I guess it is important to have this central aspect of programming in mind when creating programming tool."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591058338.327500",
        "parent_user_id": "U01176YGU4W"
    },
    {
        "client_msg_id": "3658f3a1-c53c-46c7-9bca-8623c6af4061",
        "type": "message",
        "text": "My understanding is that all WASM modules are running in a separate thread and are not able to directly call the \"operating system\" which includes the event and screen model. And you have to used shared memory blocks to communicate between these two processes. That is not what i call a full opening to other languages in the browser universe.  On a  mac or pc, or mobile device you can write in any language, and as long as you package it as an executable for the OS, the OS doesn't care a bit which source languages you used.",
        "user": "UEQ6M68H0",
        "ts": "1592158721.266200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PU6S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My understanding is that all WASM modules are running in a separate thread and are not able to directly call the \"operating system\" which includes the event and screen model. And you have to used shared memory blocks to communicate between these two processes. That is not what i call a full opening to other languages in the browser universe.  On a  mac or pc, or mobile device you can write in any language, and as long as you package it as an executable for the OS, the OS doesn't care a bit which source languages you used."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "1FF0E9EC-FE00-4948-A450-7C84AF47C26C",
        "type": "message",
        "text": "It depends on what\u2019s in the shim. In one sense, you\u2019re right that Go can\u2019t directly call the OS because it only has access to thunks and data that the VM owner puts in its environment, but on the other hand, the OS is accessed in JavaScript entirely through the global object so the \u201copening\u201d doesn\u2019t need to be very wide at all for access to the OS to be about even in JS and wasm in practice.\n\nThere must be synchronization overhead if the wasm executes in another thread (I didn\u2019t know it did, that\u2019s good to know!), but I haven\u2019t noticed it. Wasm must be implemented in a more efficient way than Web Workers, because worker isolation is so strict that you can\u2019t call one synchronously from, say, an event handler that needs to finish in one JS event loop tick, but you can call wasm in an event handler.\n\nThe people working on WASI are trying to create a shim that encompasses every functionality that you\u2019d typically get from an OS, so that every compiler can just target that one shim instead of inventing a new one for their language. That\u2019ll provide some of the language-independence you\u2019re talking about, especially since if it becomes standard, browsers can implement DOM access directly instead of relying on memory sharing with JS.\n\nIf you\u2019re curious, the Go shim is here, just a few hundred lines: <https://github.com/golang/go/blob/master/misc/wasm/wasm_exec.js|https://github.com/golang/go/blob/master/misc/wasm/wasm_exec.js> The system calls it exports to wasm binaries are in importObject (syscall/js.valueGet, syscall/js.valueSet, etc).",
        "user": "UFEQUBNNT",
        "ts": "1592161232.292200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFEQUBNNT",
            "ts": "1592161532.000000"
        },
        "attachments": [
            {
                "fallback": "[golang/go] misc/wasm/wasm_exec.js",
                "text": "```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n(() =&gt; {\n\t// Map multiple JavaScript environments to a single common API,\n\t// preferring web standards over Node.js API.\n\t//\n\t// Environments considered:\n\t// - Browsers\n\t// - Node.js\n\t// - Electron\n\t// - Parcel\n\n\tif (typeof global !== \"undefined\") {\n\t\t// global already exists\n\t} else if (typeof window !== \"undefined\") {\n\t\twindow.global = window;\n\t} else if (typeof self !== \"undefined\") {\n\t\tself.global = self;\n\t} else {\n\t\tthrow new Error(\"cannot export Go (neither global, window nor self is defined)\");\n\t}\n\n\tif (!global.require &amp;&amp; typeof require !== \"undefined\") {\n\t\tglobal.require = require;\n\t}\n\n\tif (!global.fs &amp;&amp; global.require) {\n\t\tconst fs = require(\"fs\");\n\t\tif (Object.keys(fs) !== 0) {\n\t\t\tglobal.fs = fs;\n\t\t}\n\t}\n\n\tconst enosys = () =&gt; {\n\t\tconst err = new Error(\"not implemented\");\n\t\terr.code = \"ENOSYS\";\n\t\treturn err;\n\t};\n\n\tif (!global.fs) {\n\t\tlet outputBuf = \"\";\n\t\tglobal.fs = {\n\t\t\tconstants: { O_WRONLY: -1, O_RDWR: -1, O_CREAT: -1, O_TRUNC: -1, O_APPEND: -1, O_EXCL: -1 }, // unused\n\t\t\twriteSync(fd, buf) {\n\t\t\t\toutputBuf += decoder.decode(buf);\n\t\t\t\tconst nl = outputBuf.lastIndexOf(\"\\n\");\n\t\t\t\tif (nl != -1) {\n\t\t\t\t\tconsole.log(outputBuf.substr(0, nl));\n\t\t\t\t\toutputBuf = outputBuf.substr(nl + 1);\n\t\t\t\t}\n\t\t\t\treturn buf.length;\n\t\t\t},\n\t\t\twrite(fd, buf, offset, length, position, callback) {\n\t\t\t\tif (offset !== 0 || length !== buf.length || position !== null) {\n\t\t\t\t\tcallback(enosys());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst n = this.writeSync(fd, buf);\n\t\t\t\tcallback(null, n);\n\t\t\t},\n\t\t\tchmod(path, mode, callback) { callback(enosys()); },\n\t\t\tchown(path, uid, gid, callback) { callback(enosys()); },\n\t\t\tclose(fd, callback) { callback(enosys()); },\n\t\t\tfchmod(fd, mode, callback) { callback(enosys()); },\n\t\t\tfchown(fd, uid, gid, callback) { callback(enosys()); },\n\t\t\tfstat(fd, callback) { callback(enosys()); },\n\t\t\tfsync(fd, callback) { callback(null); },\n\t\t\tftruncate(fd, length, callback) { callback(enosys()); },\n\t\t\tlchown(path, uid, gid, callback) { callback(enosys()); },\n\t\t\tlink(path, link, callback) { callback(enosys()); },\n\t\t\tlstat(path, callback) { callback(enosys()); },\n\t\t\tmkdir(path, perm, callback) { callback(enosys()); },\n\t\t\topen(path, flags, mode, callback) { callback(enosys()); },\n\t\t\tread(fd, buffer, offset, length, position, callback) { callback(enosys()); },\n\t\t\treaddir(path, callback) { callback(enosys()); },\n\t\t\treadlink(path, callback) { callback(enosys()); },\n\t\t\trename(from, to, callback) { callback(enosys()); },\n\t\t\trmdir(path, callback) { callback(enosys()); },\n\t\t\tstat(path, callback) { callback(enosys()); },\n\t\t\tsymlink(path, link, callback) { callback(enosys()); },\n\t\t\ttruncate(path, length, callback) { callback(enosys()); },\n\t\t\tunlink(path, callback) { callback(enosys()); },\n\t\t\tutimes(path, atime, mtime, callback) { callback(enosys()); },\n\t\t};\n\t}\n\n\tif (!global.process) {\n\t\tglobal.process = {\n\t\t\tgetuid() { return -1; },\n\t\t\tgetgid() { return -1; },\n\t\t\tgeteuid() { return -1; },\n\t\t\tgetegid() { return -1; },\n\t\t\tgetgroups() { throw enosys(); },\n\t\t\tpid: -1,\n\t\t\tppid: -1,\n\t\t\tumask() { throw enosys(); },\n\t\t\tcwd() { throw enosys(); },\n\t\t\tchdir() { throw enosys(); },\n\t\t}\n\t}\n\n\tif (!global.crypto) {\n\t\tconst nodeCrypto = require(\"crypto\");\n\t\tglobal.crypto = {\n\t\t\tgetRandomValues(b) {\n\t\t\t\tnodeCrypto.randomFillSync(b);\n\t\t\t},\n\t\t};\n\t}\n\n\tif (!global.performance) {\n\t\tglobal.performance = {\n\t\t\tnow() {\n\t\t\t\tconst [sec, nsec] = process.hrtime();\n\t\t\t\treturn sec * 1000 + nsec / 1000000;\n\t\t\t},\n\t\t};\n\t}\n\n\tif (!global.TextEncoder) {\n\t\tglobal.TextEncoder = require(\"util\").TextEncoder;\n\t}\n\n\tif (!global.TextDecoder) {\n\t\tglobal.TextDecoder = require(\"util\").TextDecoder;\n\t}\n\n\t// End of polyfills for common API.\n\n\tconst encoder = new TextEncoder(\"utf-8\");\n\tconst decoder = new TextDecoder(\"utf-8\");\n\n\tglobal.Go = class {\n\t\tconstructor() {\n\t\t\tthis.argv = [\"js\"];\n\t\t\tthis.env = {};\n\t\t\tthis.exit = (code) =&gt; {\n\t\t\t\tif (code !== 0) {\n\t\t\t\t\tconsole.warn(\"exit code:\", code);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._exitPromise = new Promise((resolve) =&gt; {\n\t\t\t\tthis._resolveExitPromise = resolve;\n\t\t\t});\n\t\t\tthis._pendingEvent = null;\n\t\t\tthis._scheduledTimeouts = new Map();\n\t\t\tthis._nextCallbackTimeoutID = 1;\n\n\t\t\tconst setInt64 = (addr, v) =&gt; {\n\t\t\t\tthis.mem.setUint32(addr + 0, v, true);\n\t\t\t\tthis.mem.setUint32(addr + 4, Math.floor(v / 4294967296), true);\n\t\t\t}\n\n\t\t\tconst getInt64 = (addr) =&gt; {\n\t\t\t\tconst low = this.mem.getUint32(addr + 0, true);\n\t\t\t\tconst high = this.mem.getInt32(addr + 4, true);\n\t\t\t\treturn low + high * 4294967296;\n\t\t\t}\n\n\t\t\tconst loadValue = (addr) =&gt; {\n\t\t\t\tconst f = this.mem.getFloat64(addr, true);\n\t\t\t\tif (f === 0) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif (!isNaN(f)) {\n\t\t\t\t\treturn f;\n\t\t\t\t}\n\n\t\t\t\tconst id = this.mem.getUint32(addr, true);\n\t\t\t\treturn this._values[id];\n\t\t\t}\n\n\t\t\tconst storeValue = (addr, v) =&gt; {\n\t\t\t\tconst nanHead = 0x7FF80000;\n\n\t\t\t\tif (typeof v === \"number\" &amp;&amp; v !== 0) {\n\t\t\t\t\tif (isNaN(v)) {\n\t\t\t\t\t\tthis.mem.setUint32(addr + 4, nanHead, true);\n\t\t\t\t\t\tthis.mem.setUint32(addr, 0, true);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.mem.setFloat64(addr, v, true);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (v === undefined) {\n\t\t\t\t\tthis.mem.setFloat64(addr, 0, true);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet id = this._ids.get(v);\n\t\t\t\tif (id === undefined) {\n\t\t\t\t\tid = this._idPool.pop();\n\t\t\t\t\tif (id === undefined) {\n\t\t\t\t\t\tid = this._values.length;\n\t\t\t\t\t}\n\t\t\t\t\tthis._values[id] = v;\n\t\t\t\t\tthis._goRefCounts[id] = 0;\n\t\t\t\t\tthis._ids.set(v, id);\n\t\t\t\t}\n\t\t\t\tthis._goRefCounts[id]++;\n\t\t\t\tlet typeFlag = 0;\n\t\t\t\tswitch (typeof v) {\n\t\t\t\t\tcase \"object\":\n\t\t\t\t\t\tif (v !== null) {\n\t\t\t\t\t\t\ttypeFlag = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"string\":\n\t\t\t\t\t\ttypeFlag = 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"symbol\":\n\t\t\t\t\t\ttypeFlag = 3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"function\":\n\t\t\t\t\t\ttypeFlag = 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis.mem.setUint32(addr + 4, nanHead | typeFlag, true);\n\t\t\t\tthis.mem.setUint32(addr, id, true);\n\t\t\t}\n\n\t\t\tconst loadSlice = (addr) =&gt; {\n\t\t\t\tconst array = getInt64(addr + 0);\n\t\t\t\tconst len = getInt64(addr + 8);\n\t\t\t\treturn new Uint8Array(this._inst.exports.mem.buffer, array, len);\n\t\t\t}\n\n\t\t\tconst loadSliceOfValues = (addr) =&gt; {\n\t\t\t\tconst array = getInt64(addr + 0);\n\t\t\t\tconst len = getInt64(addr + 8);\n\t\t\t\tconst a = new Array(len);\n\t\t\t\tfor (let i = 0; i &lt; len; i++) {\n\t\t\t\t\ta[i] = loadValue(array + i * 8);\n\t\t\t\t}\n\t\t\t\treturn a;\n\t\t\t}\n\n\t\t\tconst loadString = (addr) =&gt; {\n\t\t\t\tconst saddr = getInt64(addr + 0);\n\t\t\t\tconst len = getInt64(addr + 8);\n\t\t\t\treturn decoder.decode(new DataView(this._inst.exports.mem.buffer, saddr, len));\n\t\t\t}\n\n\t\t\tconst timeOrigin = Date.now() - performance.now();\n\t\t\tthis.importObject = {\n\t\t\t\tgo: {\n\t\t\t\t\t// Go's SP does not change as long as no Go code is running. Some operations (e.g. calls, getters and setters)\n\t\t\t\t\t// may synchronously trigger a Go event handler. This makes Go code get executed in the middle of the imported\n\t\t\t\t\t// function. A goroutine can switch to a new stack if the current stack is too small (see morestack function).\n\t\t\t\t\t// This changes the SP, thus we have to update the SP used by the imported function.\n\n\t\t\t\t\t// func wasmExit(code int32)\n\t\t\t\t\t\"runtime.wasmExit\": (sp) =&gt; {\n\t\t\t\t\t\tconst code = this.mem.getInt32(sp + 8, true);\n\t\t\t\t\t\tthis.exited = true;\n\t\t\t\t\t\tdelete this._inst;\n\t\t\t\t\t\tdelete this._values;\n\t\t\t\t\t\tdelete this._goRefCounts;\n\t\t\t\t\t\tdelete this._ids;\n\t\t\t\t\t\tdelete this._idPool;\n\t\t\t\t\t\tthis.exit(code);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func wasmWrite(fd uintptr, p unsafe.Pointer, n int32)\n\t\t\t\t\t\"runtime.wasmWrite\": (sp) =&gt; {\n\t\t\t\t\t\tconst fd = getInt64(sp + 8);\n\t\t\t\t\t\tconst p = getInt64(sp + 16);\n\t\t\t\t\t\tconst n = this.mem.getInt32(sp + 24, true);\n\t\t\t\t\t\tfs.writeSync(fd, new Uint8Array(this._inst.exports.mem.buffer, p, n));\n\t\t\t\t\t},\n\n\t\t\t\t\t// func resetMemoryDataView()\n\t\t\t\t\t\"runtime.resetMemoryDataView\": (sp) =&gt; {\n\t\t\t\t\t\tthis.mem = new DataView(this._inst.exports.mem.buffer);\n\t\t\t\t\t},\n\n\t\t\t\t\t// func nanotime1() int64\n\t\t\t\t\t\"runtime.nanotime1\": (sp) =&gt; {\n\t\t\t\t\t\tsetInt64\u2026",
                "title": "misc/wasm/wasm_exec.js",
                "footer": "<https://github.com/golang/go|golang/go>",
                "id": 1,
                "title_link": "https://github.com/golang/go/blob/master/misc/wasm/wasm_exec.js",
                "footer_icon": "https://github.githubassets.com/favicon.ico",
                "color": "24292f",
                "mrkdwn_in": [
                    "text"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https://github.com/golang/go/blob/master/misc/wasm/wasm_exec.js",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l6h/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It depends on what\u2019s in the shim. In one sense, you\u2019re right that Go can\u2019t directly call the OS because it only has access to thunks and data that the VM owner puts in its environment, but on the other hand, the OS is accessed in JavaScript entirely through the global object so the \u201copening\u201d doesn\u2019t need to be very wide at all for access to the OS to be about even in JS and wasm in practice.\n\nThere must be synchronization overhead if the wasm executes in another thread (I didn\u2019t know it did, that\u2019s good to know!), but I haven\u2019t noticed it. Wasm must be implemented in a more efficient way than Web Workers, because worker isolation is so strict that you can\u2019t call one synchronously from, say, an event handler that needs to finish in one JS event loop tick, but you can call wasm in an event handler.\n\nThe people working on WASI are trying to create a shim that encompasses every functionality that you\u2019d typically get from an OS, so that every compiler can just target that one shim instead of inventing a new one for their language. That\u2019ll provide some of the language-independence you\u2019re talking about, especially since if it becomes standard, browsers can implement DOM access directly instead of relying on memory sharing with JS.\n\nIf you\u2019re curious, the Go shim is here, just a few hundred lines: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/golang/go/blob/master/misc/wasm/wasm_exec.js",
                                "text": "https://github.com/golang/go/blob/master/misc/wasm/wasm_exec.js"
                            },
                            {
                                "type": "text",
                                "text": " The system calls it exports to wasm binaries are in importObject (syscall/js.valueGet, syscall/js.valueSet, etc)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "b213a0e8-edba-42de-968c-a4a6c917948e",
        "type": "message",
        "text": "A paper on the history of Objective-C and (relevant to this group) it\u2019s motivation of enabling a \u201csoftware IC\u201d marketplace. <https://dl.acm.org/doi/pdf/10.1145/3386332>",
        "user": "ULM3U6275",
        "ts": "1592162624.294200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "W8a",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A paper on the history of Objective-C and (relevant to this group) it\u2019s motivation of enabling a \u201csoftware IC\u201d marketplace. "
                            },
                            {
                                "type": "link",
                                "url": "https://dl.acm.org/doi/pdf/10.1145/3386332"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592162624.294200",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1592164688.294700",
        "reply_users": [
            "U013HU44GLS"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heart_eyes",
                "users": [
                    "U013HU44GLS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d35f9835-e12d-4e0f-8530-0cf24253cbc0",
        "type": "message",
        "text": "I know it's not exactly the most popular language, but it's my favorite",
        "user": "U013HU44GLS",
        "ts": "1592164688.294700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OBgC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I know it's not exactly the most popular language, but it's my favorite"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592162624.294200",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "UFLN9JFRT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "2dbe5438-508d-4634-b0be-262aedd6f045",
        "type": "message",
        "text": "<@UFEQUBNNT> I'm currently prototyping a desktop program written in Rust in which I'm using wasm-compiled Rust code as sandboxed plugins. My impression is that wasm is still under heavy development and important proposals like wasm interface types aren't there yet. For my pretty simple use case, I was able to use wasmtime [1]. Due to the lack of interface types, the interaction between VM and wasm code is painfully low-level, but it can be done. What's your use case and which PL would you like to embed the Wasm VM into?\n[1] <https://github.com/bytecodealliance/wasmtime>",
        "user": "UAL7940NM",
        "ts": "1592166684.295000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "bytecodealliance/wasmtime",
                "text": "Standalone JIT-style runtime for WebAssembly, using Cranelift",
                "title": "bytecodealliance/wasmtime",
                "footer": "<https://github.com/bytecodealliance/wasmtime|bytecodealliance/wasmtime>",
                "id": 1,
                "footer_icon": "https://github.githubassets.com/favicon.ico",
                "ts": 1504015315,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Website",
                        "value": "<https://wasmtime.dev/>",
                        "short": true
                    },
                    {
                        "title": "Stars",
                        "value": "3240",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https://github.com/bytecodealliance/wasmtime",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7+YOQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFEQUBNNT"
                            },
                            {
                                "type": "text",
                                "text": " I'm currently prototyping a desktop program written in Rust in which I'm using wasm-compiled Rust code as sandboxed plugins. My impression is that wasm is still under heavy development and important proposals like wasm interface types aren't there yet. For my pretty simple use case, I was able to use wasmtime [1]. Due to the lack of interface types, the interaction between VM and wasm code is painfully low-level, but it can be done. What's your use case and which PL would you like to embed the Wasm VM into?\n[1] "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/bytecodealliance/wasmtime"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "eac54eac-9af3-4563-9e0d-b27b8bc15518",
        "type": "message",
        "text": ":lower_left_paintbrush: <https://futureofcoding.org/episodes/048|Episode 48 \u2022\u00a0Jennifer Jacobs \u2022 Para &amp; Dynamic Brushes> :art:\n\nThere\u2019s a small handful of people that I\u2019ve been requested again and again to interview on the Future of Coding podcast.\u00a0<http://jenniferjacobs.mat.ucsb.edu/|Jennifer Jacobs>\u00a0is one of those people. Her work on\u00a0<http://jenniferjacobs.mat.ucsb.edu/#db|Dynamic Brushes>\u00a0in particular, and parametric drawing in general, occupies a major intersection between disciplines and provides insights that we can all apply to our own work. This interview touches on childhood education, programming tools for both non-programmers and expert programmers, tangible interfaces, wearable and embodied computation, aesthetics, the relationship between academia and industry, means of evaluating the efficacy of projects, geometric encodings of first-order logic, symbolic representations, whether\u00a0<https://en.wikipedia.org/wiki/Scratch_(programming_language)|Scratch>\u00a0could exist outside MIT, and more. Jennifer does a wonderful job articulating the nature her own work, but also the works of her collaborators, peers, and influences, so that we come away with a great understanding for the broader spaces in which her research fits. Jennifer is already am important figure in our Future of Coding field, and I am very excited to follow her career and see all the places the impacts of her work will be felt.\n\nYou\u2019ll notice right away that\u00a0<@U5TCAFTD3> is sitting in the interviewer chair this time. This is the first of a handful of episodes that Steve recorded in 2019 but didn\u2019t release. I\u2019m planning to edit and release them throughout 2020, so you\u2019ll hear a bit more of Steve yet.\n\n<https://futureofcoding.org/episodes/048>",
        "user": "UC2A2ARPT",
        "ts": "1592169728.296900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1592169798.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LhEFI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "lower_left_paintbrush"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.org/episodes/048",
                                "text": "Episode 48 \u2022\u00a0Jennifer Jacobs \u2022 Para & Dynamic Brushes"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "art"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThere\u2019s a small handful of people that I\u2019ve been requested again and again to interview on the Future of Coding podcast.\u00a0"
                            },
                            {
                                "type": "link",
                                "url": "http://jenniferjacobs.mat.ucsb.edu/",
                                "text": "Jennifer Jacobs"
                            },
                            {
                                "type": "text",
                                "text": "\u00a0is one of those people. Her work on\u00a0"
                            },
                            {
                                "type": "link",
                                "url": "http://jenniferjacobs.mat.ucsb.edu/#db",
                                "text": "Dynamic Brushes"
                            },
                            {
                                "type": "text",
                                "text": "\u00a0in particular, and parametric drawing in general, occupies a major intersection between disciplines and provides insights that we can all apply to our own work. This interview touches on childhood education, programming tools for both non-programmers and expert programmers, tangible interfaces, wearable and embodied computation, aesthetics, the relationship between academia and industry, means of evaluating the efficacy of projects, geometric encodings of first-order logic, symbolic representations, whether\u00a0"
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Scratch_(programming_language)",
                                "text": "Scratch"
                            },
                            {
                                "type": "text",
                                "text": "\u00a0could exist outside MIT, and more. Jennifer does a wonderful job articulating the nature her own work, but also the works of her collaborators, peers, and influences, so that we come away with a great understanding for the broader spaces in which her research fits. Jennifer is already am important figure in our Future of Coding field, and I am very excited to follow her career and see all the places the impacts of her work will be felt.\n\nYou\u2019ll notice right away that\u00a0"
                            },
                            {
                                "type": "user",
                                "user_id": "U5TCAFTD3"
                            },
                            {
                                "type": "text",
                                "text": " is sitting in the interviewer chair this time. This is the first of a handful of episodes that Steve recorded in 2019 but didn\u2019t release. I\u2019m planning to edit and release them throughout 2020, so you\u2019ll hear a bit more of Steve yet.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.org/episodes/048"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592169728.296900",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1592193278.298000",
        "reply_users": [
            "UCUSW7WVD"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013HU44GLS",
                    "UF6RLAL7J",
                    "UA14TGLTC"
                ],
                "count": 3
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UFB8STN7K",
                    "UJRDRMWQN"
                ],
                "count": 3
            }
        ]
    }
]