[
    {
        "client_msg_id": "7a707f90-4e9f-4443-ae22-e82a301c7a0c",
        "type": "message",
        "text": "Reminds me of the discussion in this great thread: <https://twitter.com/geoffreylitt/status/1177607448682582016>",
        "user": "UMWF81HTP",
        "ts": "1591166007.383300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/geoffreylitt|@geoffreylitt>: 1/ I used to think specialized software to replace messy spreadsheets was unequivocal progress. Now I'm more conflicted.\n\nFeels a bit like saying \"Find the people who are still cooking at home, and sell them more restaurant food\"\n\n<https://twitter.com/jasoncrawford/status/1177403618816749568>",
                "ts": 1569598469,
                "author_name": "Geoffrey Litt",
                "author_link": "https://twitter.com/geoffreylitt/status/1177607448682582016",
                "author_icon": "https://pbs.twimg.com/profile_images/722626068293763072/4erM-SPN_normal.jpg",
                "author_subname": "@geoffreylitt",
                "text": "1/ I used to think specialized software to replace messy spreadsheets was unequivocal progress. Now I'm more conflicted.\n\nFeels a bit like saying \"Find the people who are still cooking at home, and sell them more restaurant food\"\n\n<https://twitter.com/jasoncrawford/status/1177403618816749568>",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/geoffreylitt/status/1177607448682582016",
                "id": 1,
                "original_url": "https://twitter.com/geoffreylitt/status/1177607448682582016",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            },
            {
                "fallback": "<https://twitter.com/jasoncrawford|@jasoncrawford>: Good startup pattern today: Find an industry that is still run manually by people emailing PDFs and spreadsheets around; build a real data model &amp; workflow.\n\nDoing this in\u2026\n\nFreight: <https://twitter.com/flexport|@flexport> \nInsurance: <https://twitter.com/NewfrontHQ|@NewfrontHQ> \nLending: <https://twitter.com/blendlabsinc|@blendlabsinc>",
                "ts": 1569549872,
                "author_name": "Jason Crawford",
                "author_link": "https://twitter.com/jasoncrawford/status/1177403618816749568",
                "author_icon": "https://pbs.twimg.com/profile_images/1227771761078362113/AaFoJ0VI_normal.jpg",
                "author_subname": "@jasoncrawford",
                "text": "Good startup pattern today: Find an industry that is still run manually by people emailing PDFs and spreadsheets around; build a real data model &amp; workflow.\n\nDoing this in\u2026\n\nFreight: <https://twitter.com/flexport|@flexport> \nInsurance: <https://twitter.com/NewfrontHQ|@NewfrontHQ> \nLending: <https://twitter.com/blendlabsinc|@blendlabsinc>",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/jasoncrawford/status/1177403618816749568",
                "indent": true,
                "color": "32BBF3",
                "id": 2,
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9Qha",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reminds me of the discussion in this great thread: "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/geoffreylitt/status/1177607448682582016"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591058338.327500",
        "parent_user_id": "U01176YGU4W"
    },
    {
        "client_msg_id": "7dbc053d-ddcc-427f-b54e-6f1fcfbe6a14",
        "type": "message",
        "text": "I agree that for most people, technology that \"just works\" is what they want. As <@U6FKVSVCK> said, that shouldn't exclude the possibility of people building their own stuff. I'd take that one step further: it shouldn't exclude the possibility of people _modifying_ industrial products they use, nor the possibility of _delegating_ such modifications to a competent expert of their choice. The \"enemy\" is not industrial product, but lock-in and dependencies on a single supplier.\n\nWith cars, this enemy has just been arriving over the last decade, in the form of computerization. Every modern car has parts that even an independent professional mechanic can no longer fix. You need special equipment available only under strict licensing conditions.\n\nIn computing, that's already the norm rather than the exeception. It's dependencies everywhere. Whatever technical progress may be in Airtable or Notion, the real problem with them is that they are silos that make you dependent on the companies running them. We have almost completely lost interoperability except for the lowest common denominator, which is text files.",
        "user": "UJBAJNFLK",
        "ts": "1591172344.383800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+5Ra",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree that for most people, technology that \"just works\" is what they want. As "
                            },
                            {
                                "type": "user",
                                "user_id": "U6FKVSVCK"
                            },
                            {
                                "type": "text",
                                "text": " said, that shouldn't exclude the possibility of people building their own stuff. I'd take that one step further: it shouldn't exclude the possibility of people "
                            },
                            {
                                "type": "text",
                                "text": "modifying",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " industrial products they use, nor the possibility of "
                            },
                            {
                                "type": "text",
                                "text": "delegating",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " such modifications to a competent expert of their choice. The \"enemy\" is not industrial product, but lock-in and dependencies on a single supplier.\n\nWith cars, this enemy has just been arriving over the last decade, in the form of computerization. Every modern car has parts that even an independent professional mechanic can no longer fix. You need special equipment available only under strict licensing conditions.\n\nIn computing, that's already the norm rather than the exeception. It's dependencies everywhere. Whatever technical progress may be in Airtable or Notion, the real problem with them is that they are silos that make you dependent on the companies running them. We have almost completely lost interoperability except for the lowest common denominator, which is text files."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591122061.379800",
        "parent_user_id": "U71PMQ1V0",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U71PMQ1V0",
                    "UFLN9JFRT"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "UML4ZEKDK",
                    "UMYKGHYBA"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "8D1EF77E-7C3F-422C-9A20-CE0FCA09644C",
        "type": "message",
        "text": "Integer wrapping is almost always a bug, and it\u2019s one that can occur years or decades after a program is written. On the other hand, reduced performance is at best a mild nuisance and at worst a bug (if drastic). But (drastically) reduced performance will only occur in situations where wrapping would have occurred anyway. So the question really comes down to: when overflow DOES occur (if it ever does), do you want to produce a correct result (a bigint) or crash/produce garbage numbers? That\u2019s the choice I\u2019m making. And I\u2019m sure that 99.9% of integer overflows in most programs would not cause any noticeable performance drop, and thus are an \u201cobviously correct\u201d choice rather than a tradeoff.",
        "user": "UCGAK10LS",
        "ts": "1591189348.390000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1591189522.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dEy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Integer wrapping is almost always a bug, and it\u2019s one that can occur years or decades after a program is written. On the other hand, reduced performance is at best a mild nuisance and at worst a bug (if drastic). But (drastically) reduced performance will only occur in situations where wrapping would have occurred anyway. So the question really comes down to: when overflow DOES occur (if it ever does), do you want to produce a correct result (a bigint) or crash/produce garbage numbers? That\u2019s the choice I\u2019m making. And I\u2019m sure that 99.9% of integer overflows in most programs would not cause any noticeable performance drop, and thus are an \u201cobviously correct\u201d choice rather than a tradeoff."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "67B83BD5-1043-4A69-8620-02CC052C7D37",
        "type": "message",
        "text": "I did mention in my original post that the target audience is not people expecting uncompromised C-like performance. My primary goal is to extend the accessibility of developing nontrivial apps to those who cannot create them today.",
        "user": "UCGAK10LS",
        "ts": "1591189417.391800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3ismW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I did mention in my original post that the target audience is not people expecting uncompromised C-like performance. My primary goal is to extend the accessibility of developing nontrivial apps to those who cannot create them today."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "2408218e-1b93-4482-b755-de7d2f241bd5",
        "type": "message",
        "text": "Nick, you started talking about an ALU abstraction (bit strings with low level ALU-like operations), but then you say that integer wrapping is almost always a bug, so now the abstraction we are talking about is integers, not bit strings. From my perspective, the confusion between bit strings and integers began in C (where it was appropriate) but has infected many modern high level languages (where it is not appropriate). The two ideas should be kept separate, because the operations are distinct and the concepts are distinct. In my language (Curv), I started with a \"number\" abstraction, which only supports numeric operations, not bit string operations. Later, I found a need for bit strings (to write hash functions), so I added a separate bit string abstraction, which is actually an array of booleans. So bitwise `and`, `or`, `xor`, and `not` are just those boolean operations extended to work on boolean arrays. For hash functions, I also needed operations to convert between numbers and bit strings, and I needed a bitwise version of integer addition that wraps around (ie, it has ALU semantics). Unlike C, Python or Javascript, my \"bit add\" operation, which only works on bit strings, is distinct from the \"+\" operator that only works on numbers, and they have different semantics.",
        "user": "UJN1TAYEQ",
        "ts": "1591200558.392500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M6cL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Nick, you started talking about an ALU abstraction (bit strings with low level ALU-like operations), but then you say that integer wrapping is almost always a bug, so now the abstraction we are talking about is integers, not bit strings. From my perspective, the confusion between bit strings and integers began in C (where it was appropriate) but has infected many modern high level languages (where it is not appropriate). The two ideas should be kept separate, because the operations are distinct and the concepts are distinct. In my language (Curv), I started with a \"number\" abstraction, which only supports numeric operations, not bit string operations. Later, I found a need for bit strings (to write hash functions), so I added a separate bit string abstraction, which is actually an array of booleans. So bitwise "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "or",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "xor",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and "
                            },
                            {
                                "type": "text",
                                "text": "not",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are just those boolean operations extended to work on boolean arrays. For hash functions, I also needed operations to convert between numbers and bit strings, and I needed a bitwise version of integer addition that wraps around (ie, it has ALU semantics). Unlike C, Python or Javascript, my \"bit add\" operation, which only works on bit strings, is distinct from the \"+\" operator that only works on numbers, and they have different semantics."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "3522004c-8914-481d-9ebf-0db53d94b77f",
        "type": "message",
        "text": "What are people's thoughts on the future of no-code platforms with regards to open source? These days as a developer I see that languages where the only compiler is proprietary are increasingly niche, while widely adopted languages have an open source stack. Will the same thing happen with no-code platforms, or are the dynamics different?",
        "user": "UR482RFPY",
        "ts": "1591214873.399000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UR482RFPY",
            "ts": "1591214936.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OiRT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What are people's thoughts on the future of no-code platforms with regards to open source? These days as a developer I see that languages where the only compiler is proprietary are increasingly niche, while widely adopted languages have an open source stack. Will the same thing happen with no-code platforms, or are the dynamics different?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591214873.399000",
        "reply_count": 47,
        "reply_users_count": 12,
        "latest_reply": "1591512924.038000",
        "reply_users": [
            "UDQBTJ211",
            "UC2A2ARPT",
            "UR482RFPY",
            "UETFVV24Q",
            "U71PMQ1V0",
            "UJKKBAMLL",
            "U014BMRB170",
            "UFLN9JFRT",
            "UL5AX4G2H",
            "UJBAJNFLK",
            "U5STGTB3J",
            "U013RRN6Y6N"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "ed0fafe3-0bd5-4854-b56f-9094209b3aca",
        "type": "message",
        "text": "I think the closer you are to the end user probably the more you can get away with that type of lock in",
        "user": "UDQBTJ211",
        "ts": "1591215945.399300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z+=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the closer you are to the end user probably the more you can get away with that type of lock in"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591214873.399000",
        "parent_user_id": "UR482RFPY"
    },
    {
        "client_msg_id": "dbc7894e-4bb6-4f3e-97fc-d478eba6a8e0",
        "type": "message",
        "text": "My hunch is that the model of Unity and Unreal \u2014 where the runtime is a closed source tool but the code and data you're working with are open and portable \u2014 strikes a better balance than what no-code is now where everything, code and data, are locked up inside the silo.",
        "user": "UC2A2ARPT",
        "ts": "1591216151.399500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1591216187.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "njCmn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My hunch is that the model of Unity and Unreal \u2014 where the runtime is a closed source tool but the code and data you're working with are open and portable \u2014 strikes a better balance than what no-code is now where everything, code and data, are locked up inside the silo."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591214873.399000",
        "parent_user_id": "UR482RFPY",
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U6FKVSVCK",
                    "UHWC9PXBL",
                    "U014BMRB170"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "792d4b67-d330-4251-93ef-7349d7e0e09c",
        "type": "message",
        "text": "Interesting, <@UC2A2ARPT> when you say code is portable do you envision competing runtimes that can run the same (no-code) code?",
        "user": "UR482RFPY",
        "ts": "1591216985.399900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Lef",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting, "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " when you say code is portable do you envision competing runtimes that can run the same (no-code) code?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591214873.399000",
        "parent_user_id": "UR482RFPY"
    },
    {
        "client_msg_id": "3774a98c-fa90-4f94-be59-b0544c3e93ad",
        "type": "message",
        "text": "I could definitely imagine a world where the IDEs are proprietary and the runtimes public, which is approximately where most (proprietary) code IDEs are now",
        "user": "UR482RFPY",
        "ts": "1591217068.400100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UR482RFPY",
            "ts": "1591217089.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7tus",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I could definitely imagine a world where the IDEs are proprietary and the runtimes public, which is approximately where most (proprietary) code IDEs are now"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591214873.399000",
        "parent_user_id": "UR482RFPY"
    },
    {
        "client_msg_id": "3c3c9aee-649f-4e63-bfca-3e663d3bc2f3",
        "type": "message",
        "text": "it definitely seems like a concern, most no-code products are SaaS products where the business model is to encourage lock-in.",
        "user": "UETFVV24Q",
        "ts": "1591217234.400400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k1/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it definitely seems like a concern, most no-code products are SaaS products where the business model is to encourage lock-in."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591214873.399000",
        "parent_user_id": "UR482RFPY"
    },
    {
        "client_msg_id": "43043bc1-d6b8-46ed-966c-f53b959d3586",
        "type": "message",
        "text": "This is my main reason for not using tools like airtable and notion. I can imagine a sourcehut-like model where the code is open source but most people pay for hosting anyway because it's convenient and there is no lock in.",
        "user": "U71PMQ1V0",
        "ts": "1591217451.400600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8qWCP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is my main reason for not using tools like airtable and notion. I can imagine a sourcehut-like model where the code is open source but most people pay for hosting anyway because it's convenient and there is no lock in."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591214873.399000",
        "parent_user_id": "UR482RFPY"
    },
    {
        "client_msg_id": "c5bcc377-93d4-4036-ae66-68586f2177ea",
        "type": "message",
        "text": "Microsoft, Google, GitHub, Amazon, Salesforce, Heroku, Apple, \u2026. See a trend? Open source has it\u2019s place in any business, some more than others, but it has zero effect on your business and customers of the product do not care, generally speaking. Don\u2019t get me wrong, I love open source and promote it, however business-wise it posses little to no value. IMO most, if not all, no-code and low-code will have little to no open source software.",
        "user": "UJKKBAMLL",
        "ts": "1591219902.400800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJKKBAMLL",
            "ts": "1591219961.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BE=B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Microsoft, Google, GitHub, Amazon, Salesforce, Heroku, Apple, \u2026. See a trend? Open source has it\u2019s place in any business, some more than others, but it has zero effect on your business and customers of the product do not care, generally speaking. Don\u2019t get me wrong, I love open source and promote it, however business-wise it posses little to no value. IMO most, if not all, no-code and low-code will have little to no open source software."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591214873.399000",
        "parent_user_id": "UR482RFPY"
    },
    {
        "client_msg_id": "91a0e891-5693-41e0-b624-0878a1075fee",
        "type": "message",
        "text": "<@UETFVV24Q> I\u2019m sure those companies you speak of are not advertising or internally encouraging lock-in\u2026 they are more likely encouraging empowerment of their user base. The feature to add portability to the source of truth comes at a cost. Many tools in no/low-code provide a level of abstraction that have significant depth. Exporting that depth would result in wildly unusable serializations of data which is useless outside the system. That is the point: the more you abstract away the more tighter the \u201clock-in\u201d becomes, which in all fairness to (I believe) 99% of people are more than comfortable with because they do not have the ability or desire to create things outside of that environment. It\u2019s all about value in the end of the day.",
        "user": "UJKKBAMLL",
        "ts": "1591220579.401100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Pbr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UETFVV24Q"
                            },
                            {
                                "type": "text",
                                "text": " I\u2019m sure those companies you speak of are not advertising or internally encouraging lock-in\u2026 they are more likely encouraging empowerment of their user base. The feature to add portability to the source of truth comes at a cost. Many tools in no/low-code provide a level of abstraction that have significant depth. Exporting that depth would result in wildly unusable serializations of data which is useless outside the system. That is the point: the more you abstract away the more tighter the \u201clock-in\u201d becomes, which in all fairness to (I believe) 99% of people are more than comfortable with because they do not have the ability or desire to create things outside of that environment. It\u2019s all about value in the end of the day."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591214873.399000",
        "parent_user_id": "UR482RFPY"
    }
]