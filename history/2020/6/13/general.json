[
    {
        "client_msg_id": "f105c524-0565-482b-8ef3-36d0ec2763fa",
        "type": "message",
        "text": "<@UJN1TAYEQ> Ah, I couldn't find anything like this when I looked, thank you! Yes, it does seem that an implementation won't be too challenging, so I'm probably going to write my own from scratch. Truncated division (to custom precision) might be tricky. I guess I'll find out!",
        "user": "UCGAK10LS",
        "ts": "1592005065.204400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1592005095.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pbYZZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " Ah, I couldn't find anything like this when I looked, thank you! Yes, it does seem that an implementation won't be too challenging, so I'm probably going to write my own from scratch. Truncated division (to custom precision) might be tricky. I guess I'll find out!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "54878fa0-adca-4042-aadc-06a4f9f201c1",
        "type": "message",
        "text": "<@UJBAJNFLK> \"Scaled integers\" is a legacy term, right? Most of the sources seem to be referring to older systems and hardware design (or conflate them with fixed-point numbers). I can't seem to find anything interesting.",
        "user": "UCGAK10LS",
        "ts": "1592005378.204700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VKh7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " \"Scaled integers\" is a legacy term, right? Most of the sources seem to be referring to older systems and hardware design (or conflate them with fixed-point numbers). I can't seem to find anything interesting."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "9e20b966-9fe9-4100-952b-4ab034e866e8",
        "type": "message",
        "text": "<@UA14TGLTC> Basically all the operations you can do on floats today, except those that consume/produce non-arithmetic values like -0, NaN, and infinities. So yeah, I'd want rounded roots and transcendental functions. But I will probably have to implement those myself, which is acceptable, because I don't need them in my initial prototyping.",
        "user": "UCGAK10LS",
        "ts": "1592005563.204900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1592005619.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oCG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " Basically all the operations you can do on floats today, except those that consume/produce non-arithmetic values like -0, NaN, and infinities. So yeah, I'd want rounded roots and transcendental functions. But I will probably have to implement those myself, which is acceptable, because I don't need them in my initial prototyping."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "70308149-eabf-4e41-8fe3-ed260fb66d1c",
        "type": "message",
        "text": "Kudos to <@U6KQ2S410> for bringing this to my attention via tweet, here is a blistering article from the British Journal for the Philosophy of Science article <https://doi.org/10.1093/bjps/axz029> entitled \"Is peer review a good idea?\".  As an outsider to computer science academia, I found that the small group of gatekeepers was an incestuous bunch which only publishes each other, and represents a small clique who thrives on exclusivity, and blocked me the one time I tried to publish about Beads for vague reasons. A working product is better proof than a paper without proof, so it wasn't going to stop me, but it would have been nicer had i been able to publish the major features in an article so that I could get credit for the novel things. It is one of the forms of alternative payment currencies, to get credit for an invention or improvement. It is one of the reasons people publish, in addition to the communist ideal of increasing the public wealth.",
        "user": "UEQ6M68H0",
        "ts": "1592007162.213400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1592008154.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JGwcV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Kudos to "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " for bringing this to my attention via tweet, here is a blistering article from the British Journal for the Philosophy of Science article "
                            },
                            {
                                "type": "link",
                                "url": "https://doi.org/10.1093/bjps/axz029"
                            },
                            {
                                "type": "text",
                                "text": " entitled \"Is peer review a good idea?\".  As an outsider to computer science academia, I found that the small group of gatekeepers was an incestuous bunch which only publishes each other, and represents a small clique who thrives on exclusivity, and blocked me the one time I tried to publish about Beads for vague reasons. A working product is better proof than a paper without proof, so it wasn't going to stop me, but it would have been nicer had i been able to publish the major features in an article so that I could get credit for the novel things. It is one of the forms of alternative payment currencies, to get credit for an invention or improvement. It is one of the reasons people publish, in addition to the communist ideal of increasing the public wealth."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592007162.213400",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1592247347.314500",
        "reply_users": [
            "U6KQ2S410",
            "UEQ6M68H0"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "3B4C0372-E99D-4BE0-923D-E7B1FD5687E2",
        "type": "message",
        "text": "Have you used Visual Basic? I used to drag and drop components into windows for fun, just to see what they did. Click around the property windows, type stuff, check boxes. Sometimes I\u2019d have installed software that automatically added bits of their functionality to the list of controls I could drop in.\n\nThese days it\u2019s like, \u201cI hope someone\u2019s wrapped this feature in a React component and put it on NPM with an example of how to initialize it.\u201d",
        "user": "UFEQUBNNT",
        "ts": "1592020881.220500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFEQUBNNT",
            "ts": "1592020965.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RcM8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Have you used Visual Basic? I used to drag and drop components into windows for fun, just to see what they did. Click around the property windows, type stuff, check boxes. Sometimes I\u2019d have installed software that automatically added bits of their functionality to the list of controls I could drop in.\n\nThese days it\u2019s like, \u201cI hope someone\u2019s wrapped this feature in a React component and put it on NPM with an example of how to initialize it.\u201d"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590522102.229200",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "69F0C91F-58EE-408B-991A-C6091BDFA728",
        "type": "message",
        "text": "Thanks for making it available!\n\nIt looks like it\u2019s a pure language/BERT model\u2026 Is there a clear path toward integrating with external sources of information like the Python runtime? I\u2019m noticing in your example that some likelihood is assigned to sequences that refer to variables that don\u2019t appear to be in scope.\n\nIs there a natural language model embedded inside it? Like, if I feed it \u201c# &lt;mask&gt;\u201d how likely am I to get a comment that documents the next line of code?",
        "user": "UFEQUBNNT",
        "ts": "1592021907.226600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFEQUBNNT",
            "ts": "1592021921.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cB3Ve",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for making it available!\n\nIt looks like it\u2019s a pure language/BERT model\u2026 Is there a clear path toward integrating with external sources of information like the Python runtime? I\u2019m noticing in your example that some likelihood is assigned to sequences that refer to variables that don\u2019t appear to be in scope.\n\nIs there a natural language model embedded inside it? Like, if I feed it \u201c# <mask>\u201d how likely am I to get a comment that documents the next line of code?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591023770.311300",
        "parent_user_id": "UPU0YJ1CM",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UPU0YJ1CM"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "C08E8733-9738-4803-8EF4-B9F5827B58FF",
        "type": "message",
        "text": "FWIW, when I wrote a browser-based projectional editor for a blocks language, I found it easiest to write it just like I would any other form on the web.\n\nI had one UI component per type of AST node. The components rendered text fields and drop targets and other standard web UI affordances to support editability.\n\nVariable bindings, types, etc, are derivative information that I could cache when necessary, or just recompute from the AST as-needed. I mostly did the latter.\n\nBecause I designed the AST for projectional editing, there were comment slots on any node that would benefit from special rendering of comments, and I had a comment block node that you could wrap any other block of code in to describe what that block did. If you\u2019re using someone else\u2019s AST, you may not have that luxury, but you may be able to write your own AST for editing and a translation layer between yours and the executable AST. I have parsed JavaScript ASTs to guess which comments document which other nodes and with some heuristics you can guess pretty well.\n\nHope this helps!",
        "user": "UFEQUBNNT",
        "ts": "1592023174.240100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zYc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "FWIW, when I wrote a browser-based projectional editor for a blocks language, I found it easiest to write it just like I would any other form on the web.\n"
                            },
                            {
                                "type": "text",
                                "text": "\nI had one UI component per type of AST node. The components rendered text fields and drop targets and other standard web UI affordances to support editability.\n\nVariable bindings, types, etc, are derivative information that I could cache when necessary, or just recompute from the AST as-needed. I mostly did the latter.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Because I designed the AST for projectional editing, there were comment slots on any node that would benefit from special rendering of comments, and I had a comment block node that you could wrap any other block of code in to describe what that block did. If you\u2019re using someone else\u2019s AST, you may not have that luxury, but you may be able to write your own AST for editing and a translation layer between yours and the executable AST. I have parsed JavaScript ASTs to guess which comments document which other nodes and with some heuristics you can guess pretty well.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Hope this helps!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591623666.059200",
        "parent_user_id": "UJN1TAYEQ",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8CA2F278-FDB5-44F4-9BCD-C705DD413F15",
        "type": "message",
        "text": "Does anyone here have experience embedding WebAssembly VMs? I\u2019d like to talk about where there\u2019s any firm ground from which to start on a FoC idea. I can only find half-finished projects and systems that _used_ to work.",
        "user": "UFEQUBNNT",
        "ts": "1592023914.244600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tn+SU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does anyone here have experience embedding WebAssembly VMs? I\u2019d like to talk about where there\u2019s any firm ground from which to start on a FoC idea. I can only find half-finished projects and systems that "
                            },
                            {
                                "type": "text",
                                "text": "used",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to work."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "reply_count": 42,
        "reply_users_count": 7,
        "latest_reply": "1593796642.273800",
        "reply_users": [
            "UBN9AFS0N",
            "UJN1TAYEQ",
            "UFEQUBNNT",
            "U014Y19RYA3",
            "UEQ6M68H0",
            "UAL7940NM",
            "UHDQ62M4P"
        ],
        "subscribed": true,
        "last_read": "1593796642.273800"
    },
    {
        "client_msg_id": "7755051F-91CB-4398-B8DC-22703FA6C716",
        "type": "message",
        "text": "Interesting. Do you regard Deno as a FoC type project? I seem to but wonder if I am missing why we don\u2019t cover it more here ",
        "user": "UFLN9JFRT",
        "ts": "1592036049.245900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jRq9L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting. Do you regard Deno as a FoC type project? I seem to but wonder if I am missing why we don\u2019t cover it more here "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590787615.273300",
        "parent_user_id": "UFLN9JFRT"
    },
    {
        "client_msg_id": "d3ace27c-c141-4967-9696-cdd5683d9d4a",
        "type": "message",
        "text": "this is quite new: <https://github.com/timberio/vector/pull/2341>",
        "user": "UBN9AFS0N",
        "ts": "1592041627.246200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1592041637.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iV+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this is quite new: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/timberio/vector/pull/2341"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "c7e8cbfd-36ee-433b-81ae-cc73f43207b5",
        "type": "message",
        "text": "<https://github.com/Hoverbear/vector/blob/41d90b7df1995429d179c89a4f1c176d72a263f1/rfcs/2020-04-15-wasm-plugins.md>",
        "user": "UBN9AFS0N",
        "ts": "1592041668.246500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1592041684.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LWY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://github.com/Hoverbear/vector/blob/41d90b7df1995429d179c89a4f1c176d72a263f1/rfcs/2020-04-15-wasm-plugins.md"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "6a351f20-364e-44ef-a522-78cd94934939",
        "type": "message",
        "text": "have you seen wasmer? <https://wasmer.io/>",
        "user": "UBN9AFS0N",
        "ts": "1592041679.246800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Wasmer - The Universal WebAssembly Runtime",
                "title_link": "https://wasmer.io/",
                "text": "Wasmer - The Universal WebAssembly Runtime",
                "fallback": "Wasmer - The Universal WebAssembly Runtime",
                "image_url": "https://wasmer.io/static/icons/social-icon.png",
                "from_url": "https://wasmer.io/",
                "image_width": 250,
                "image_height": 250,
                "image_bytes": 17230,
                "service_icon": "https://wasmer.io/static/icons/apple-icon-57x57.png",
                "service_name": "wasmer.io",
                "id": 1,
                "original_url": "https://wasmer.io/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/Bx+W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "have you seen wasmer? "
                            },
                            {
                                "type": "link",
                                "url": "https://wasmer.io/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "D8FE8A69-2757-4FAF-94A2-0AC734388421",
        "type": "message",
        "text": "<@UCGAK10LS> Well possible that it\u2019s an old-fashioned term. I learned about this 25 years ago.",
        "user": "UJBAJNFLK",
        "ts": "1592047355.248300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HgA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " Well possible that it\u2019s an old-fashioned term. I learned about this 25 years ago."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "4a48135a-6913-40e3-8dc5-29bb693ae4b7",
        "type": "message",
        "text": "Hey FoC community, here we are back with the first notebook in a series which shows how to use our `codeBERT` model for Python.\n\n<https://colab.research.google.com/drive/17QNGQOsQOUBPlblqc7maiOKPbT4hDZfv?usp=sharing>\n\nComments and suggestions welcome :slightly_smiling_face:",
        "user": "UPVBV34EL",
        "ts": "1592051627.250000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UPVBV34EL",
            "ts": "1592169103.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cSA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey FoC community, here we are back with the first notebook in a series which shows how to use our "
                            },
                            {
                                "type": "text",
                                "text": "codeBERT",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " model for Python.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://colab.research.google.com/drive/17QNGQOsQOUBPlblqc7maiOKPbT4hDZfv?usp=sharing"
                            },
                            {
                                "type": "text",
                                "text": "\n\nComments and suggestions welcome "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "5b19f306-b553-42b0-a8ae-67a43c3f601a",
        "type": "message",
        "text": "I want to create a web assembly compiler and runtime for my language (so I can embed an entire IDE in a web page). Last time I looked, it seemed that WASM was a half-completed work in progress, and the tooling wasn't complete. So the longer you wait, the easier it will be. I figured the sweet spot will be 2021 for my purposes, otherwise I'd be working around limitations and constantly running to catch up. WASM seems to be progressing quickly, so for projects with fewer requirements than mine, it may be ready right now. Issues I noticed, last time I checked, included lack of support for C++ exceptions, threads, vectorized instructions, GPU access, and difficulty of using the C++ build tools. Rust appeared to have the best tooling.",
        "user": "UJN1TAYEQ",
        "ts": "1592051828.250200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NXD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I want to create a web assembly compiler and runtime for my language (so I can embed an entire IDE in a web page). Last time I looked, it seemed that WASM was a half-completed work in progress, and the tooling wasn't complete. So the longer you wait, the easier it will be. I figured the sweet spot will be 2021 for my purposes, otherwise I'd be working around limitations and constantly running to catch up. WASM seems to be progressing quickly, so for projects with fewer requirements than mine, it may be ready right now. Issues I noticed, last time I checked, included lack of support for C++ exceptions, threads, vectorized instructions, GPU access, and difficulty of using the C++ build tools. Rust appeared to have the best tooling."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "8b8765f1-1474-4157-91c9-c4c9a6944802",
        "type": "message",
        "text": "Hello <@UFEQUBNNT> Thanks for the comments. At the moment this model is a pure Masked Language Model (a version of RoBERTa) which has 10 layers, and 12 attention head per layer.(With a max position embedding of 1024) And it was trained on about 6M lines of code. So this is just a start. Context Awareness in code means something slightly different than what it means for Natural Language. We have big plans for future. We plan to try out mix modal models (one where we mix graph based and text based information together) to bring more code centric awareness in it. Also, we plan to run some kind of Rule Engine on top of the prediction to cut some noise (Here we can hook into the actual Python runtime/interpreter to gain more insights). Also we are planning to train longformer or refomrer type model to calculate local attention based on a large body of code.\n\nAt the moment the `&lt;mask&gt;` token is only for a single token. However, we have plans to fine-tune this model for many downstream tasks.\n\nWe started a series of notebooks showing different applications of this model and will release more powerful and hybird models in future. You can checkout our first notebook (Colab) here - <https://colab.research.google.com/drive/17QNGQOsQOUBPlblqc7maiOKPbT4hDZfv?usp=sharing>",
        "user": "UPVBV34EL",
        "ts": "1592052167.250400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UPVBV34EL",
            "ts": "1592052444.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KFP3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hello "
                            },
                            {
                                "type": "user",
                                "user_id": "UFEQUBNNT"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for the comments. At the moment this model is a pure Masked Language Model (a version of RoBERTa) which has 10 layers, and 12 attention head per layer.(With a max position embedding of 1024) And it was trained on about 6M lines of code. So this is just a start. Context Awareness in code means something slightly different than what it means for Natural Language. We have big plans for future. We plan to try out mix modal models (one where we mix graph based and text based information together) to bring more code centric awareness in it. Also, we plan to run some kind of Rule Engine on top of the prediction to cut some noise (Here we can hook into the actual Python runtime/interpreter to gain more insights). Also we are planning to train longformer or refomrer type model to calculate local attention based on a large body of code.\n\nAt the moment the "
                            },
                            {
                                "type": "text",
                                "text": "<mask>",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " token is only for a single token. However, we have plans to fine-tune this model for many downstream tasks.\n\nWe started a series of notebooks showing different applications of this model and will release more powerful and hybird models in future. You can checkout our first notebook (Colab) here - "
                            },
                            {
                                "type": "link",
                                "url": "https://colab.research.google.com/drive/17QNGQOsQOUBPlblqc7maiOKPbT4hDZfv?usp=sharing"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591023770.311300",
        "parent_user_id": "UPU0YJ1CM",
        "reactions": [
            {
                "name": "star-struck",
                "users": [
                    "UPU0YJ1CM"
                ],
                "count": 1
            },
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "DF5EECBB-BCF3-4A8A-8FFE-0747A9DDF3AC",
        "type": "message",
        "text": "<https://youtu.be/Ox5P7QyL774|https://youtu.be/Ox5P7QyL774> i will never get tired of posting the self language video in this slack. no one can stop me",
        "user": "UHWC9PXBL",
        "ts": "1592052924.251600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Self: The Movie;",
                "title_link": "https://youtu.be/Ox5P7QyL774",
                "author_name": "Jecel Assump\u00e7\u00e3o Jr",
                "author_link": "https://www.youtube.com/channel/UCrGUwjwhuvI_xpRMkR1zw8Q",
                "thumb_url": "https://i.ytimg.com/vi/Ox5P7QyL774/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Self: The Movie;",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https://www.youtube.com/embed/Ox5P7QyL774?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https://youtu.be/Ox5P7QyL774",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/Ox5P7QyL774"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NlM+k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://youtu.be/Ox5P7QyL774",
                                "text": "https://youtu.be/Ox5P7QyL774"
                            },
                            {
                                "type": "text",
                                "text": " i will never get tired of posting the self language video in this slack. no one can stop me"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591889749.164700",
        "parent_user_id": "UK500AGQ4",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "BC8B2925-62E6-4CD6-BC7A-DB2552529658",
        "type": "message",
        "text": "It looks like the Vector\u2019s WASM support is still only a proposal(?), and they don\u2019t intend to support my primary OS :-/",
        "user": "UFEQUBNNT",
        "ts": "1592084415.253900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qDfxB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It looks like the Vector\u2019s WASM support is still only a proposal(?), and they don\u2019t intend to support my primary OS :-/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "1E0DF444-D420-4777-BD56-60247E9E445B",
        "type": "message",
        "text": "Wasmer looks very promising! Thank you!",
        "user": "UFEQUBNNT",
        "ts": "1592084471.254500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7DvK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wasmer looks very promising! Thank you!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "DCEDCEC6-6108-4AED-AE6D-52D63167D1D1",
        "type": "message",
        "text": "<@UJN1TAYEQ> If you\u2019re targeting browsers, Rust and Go have decent preliminary support. I\u2019m doing the opposite, wanting to run WebAssembly outside the browser. It looks like Wasmer does that. I\u2019ll dig deeper when I\u2019m at my laptop.",
        "user": "UFEQUBNNT",
        "ts": "1592084756.257600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QWI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " If you\u2019re targeting browsers, Rust and Go have decent preliminary support. I\u2019m doing the opposite, wanting to run WebAssembly outside the browser. It looks like Wasmer does that. I\u2019ll dig deeper when I\u2019m at my laptop."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1592023914.244600",
        "parent_user_id": "UFEQUBNNT"
    }
]