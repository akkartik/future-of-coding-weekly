[
    {
        "client_msg_id": "780a7daf-345f-4d34-895a-68ac8c80fad5",
        "type": "message",
        "text": "<@UFPPABQ7P> this blows my mind, basically exactly what I'm hoping my NN system can do, but applied to code",
        "user": "UQPHR6Y3S",
        "ts": "1591913315.175800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JZUWw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFPPABQ7P"
                            },
                            {
                                "type": "text",
                                "text": " this blows my mind, basically exactly what I'm hoping my NN system can do, but applied to code"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591362068.469500",
        "parent_user_id": "UD69XQ9J8"
    },
    {
        "client_msg_id": "d20d7af6-e588-49e0-859c-f8a4a4303852",
        "type": "message",
        "text": "awesome to see this because I didn't really have a mental model of what it would look like",
        "user": "UQPHR6Y3S",
        "ts": "1591913399.176000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oPG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "awesome to see this because I didn't really have a mental model of what it would look like"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591362068.469500",
        "parent_user_id": "UD69XQ9J8"
    },
    {
        "client_msg_id": "93dcdb5d-d974-4ef7-a679-fcb1750eb4e0",
        "type": "message",
        "text": "I also like that some symbols are somewhat logographic. a NN definitely wouldn't learn this unless I started with a huge model pretrained on language and images... haha :sweat_smile:",
        "user": "UQPHR6Y3S",
        "ts": "1591913965.176200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=47i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also like that some symbols are somewhat logographic. a NN definitely wouldn't learn this unless I started with a huge model pretrained on language and images... haha "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591362068.469500",
        "parent_user_id": "UD69XQ9J8",
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "UFPPABQ7P"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "48b21361-8a30-46b4-ae60-e31c41698ce5",
        "type": "message",
        "text": "Konrad is right that this is generally impossible. As soon as you compute 1/3, it's impossible to represent that exactly in either binary or decimal floating point. However, if you use decimal notation for your floating point inputs, use decimal floating point representation, and restrict your operations to add, subtract and multiply (no division, no exponentials or trigonometry), then I think it could be done. If you extend this system of exact arithmetic to support division, then you need to store a denominator, which means you are using rationals.",
        "user": "UJN1TAYEQ",
        "ts": "1591915744.176500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dPke",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Konrad is right that this is generally impossible. As soon as you compute 1/3, it's impossible to represent that exactly in either binary or decimal floating point. However, if you use decimal notation for your floating point inputs, use decimal floating point representation, and restrict your operations to add, subtract and multiply (no division, no exponentials or trigonometry), then I think it could be done. If you extend this system of exact arithmetic to support division, then you need to store a denominator, which means you are using rationals."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "22601ffb-6a04-4a0f-a776-0885d8e56169",
        "type": "message",
        "text": "Just to address everyone at once: *I'm sure that I do NOT want a rational number type.* I don't really care about exact division, I just want exact addition and multiplication. For those talking about 0.1 (1/10) and 1/3, those are both division operations, and I do not want them to be exact. I probably wasn't clear enough about my stance on division.",
        "user": "UCGAK10LS",
        "ts": "1591928271.176800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5UU6z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Just to address everyone at once: "
                            },
                            {
                                "type": "text",
                                "text": "I'm sure that I do NOT want a rational number type. ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "I don't really care about exact division, I just want exact addition and multiplication. For those talking about 0.1 (1/10) and 1/3, those are both division operations, and I do not want them to be exact. I probably wasn't clear enough about my stance on division."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UA14TGLTC",
                    "UHWC9PXBL"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "ba65314d-7505-4324-a9b5-a4f16972b599",
        "type": "message",
        "text": "And a decimal number type doesn't help me out at all, because all it gives you is exact division by 10.",
        "user": "UCGAK10LS",
        "ts": "1591928338.177000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KVHN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And a decimal number type doesn't help me out at all, because all it gives you is exact division by 10."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "43728f13-8e0f-4173-b1d9-e8eaacab7ae6",
        "type": "message",
        "text": "<@UJBAJNFLK> I'm not sure what the agreement is on the definition of \"floating-point\", but constant storage size isn't one of my constraints. You can define a broader subset of rationals than IEEE floats: any integer multiplied by any power of two, they're called the dyadic rationals and I guess that's what I'm talking about. I want to see a library for dyadic rational arithmetic.",
        "user": "UCGAK10LS",
        "ts": "1591928626.177200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1591929032.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "55MVr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " I'm not sure what the agreement is on the definition of \"floating-point\", but constant storage size isn't one of my constraints. You can define a broader subset of rationals than IEEE floats: any integer multiplied by any power of two, they're called the dyadic rationals and I guess that's what I'm talking about. I want to see a library for dyadic rational arithmetic."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "55eba50a-489b-4ade-ab55-2adfdcf5bc88",
        "type": "message",
        "text": "The reason I don't care about exact division is that division is relatively uncommon compared to addition and multiplication, and if you start trying to address the uncommon cases you end up going down a rabbit hole where you want exact roots, exponentials, logarithms, and trigonometry. In other words, you want Mathematica. I'm not going that far. I'm happy for division and transcendental functions to be rounded. The key thing I want is *associativity* of addition and multiplication, because my programming language avoids inessential ordering of values (it has no \"default ordering\"). Division isn't associative, so it's fine for it to be inexact.",
        "user": "UCGAK10LS",
        "ts": "1591929752.177700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1591929909.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hZmx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The reason I don't care about exact division is that division is relatively uncommon compared to addition and multiplication, and if you start trying to address the uncommon cases you end up going down a rabbit hole where you want exact roots, exponentials, logarithms, and trigonometry. In other words, you want Mathematica. I'm not going that far. I'm happy for division and transcendental functions to be rounded. The key thing I want is "
                            },
                            {
                                "type": "text",
                                "text": "associativity",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of addition and multiplication, because my programming language avoids inessential ordering of values (it has no \"default ordering\"). Division isn't associative, so it's fine for it to be inexact."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "dbbd8c3f-a660-4dce-8bdc-d8b32832d38b",
        "type": "message",
        "text": "Reading from stdin is a \"gotcha\" that isn't going to occur too often in the middle of a large program (e.g. a large GUI app, not a small command line utility). Often the numbers you'll be working with will be pieces of program state, or derivatives thereof. Either way, imagine number_x and number_y are used in a lot of different expressions (they're some key value like the position of a particle). Then we might be able to deduce the following: if number_x and number_y are &lt;= 32 bits, then the calculations they are used within will not overflow a 64-bit register (in the above example they simply need to be &lt;= 63 bits). That's the static analysis. What can we do then? Create a *fast* code path (no size checks, no BigInts, no DRAM access) for the small number case, and a *slow* code path for the big number case. Branch into the correct path based on an initial test of number_x and number_y.",
        "user": "UCGAK10LS",
        "ts": "1591934749.178900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TkCX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Reading from stdin is a \"gotcha\" that isn't going to occur too often in the middle of a large program (e.g. a large GUI app, not a small command line utility). Often the numbers you'll be working with will be pieces of program state, or derivatives thereof. Either way, imagine number_x and number_y are used in a lot of different expressions (they're some key value like the position of a particle). Then we might be able to deduce the following: if number_x and number_y are <= 32 bits, then the calculations they are used within will not overflow a 64-bit register (in the above example they simply need to be <= 63 bits). That's the static analysis. What can we do then? Create a "
                            },
                            {
                                "type": "text",
                                "text": "fast",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " code path (no size checks, no BigInts, no DRAM access) for the small number case, and a "
                            },
                            {
                                "type": "text",
                                "text": "slow",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " code path for the big number case. Branch into the correct path based on an initial test of number_x and number_y."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "79e817b2-3fa8-4a0e-bbb3-d43d4b469326",
        "type": "message",
        "text": "I'm not saying this static analysis is going to be super effective, but I can't see any major problems with the idea yet. I'll figure it out when I try to implement it! That will be the distant future, because I'm far more focused on UX in the coming year. A good ALU abstraction is key to a good UX.",
        "user": "UCGAK10LS",
        "ts": "1591934830.179100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1591935010.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hVt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not saying this static analysis is going to be super effective, but I can't see any major problems with the idea yet. I'll figure it out when I try to implement it! That will be the distant future, because I'm far more focused on UX in the coming year. A good ALU abstraction is key to a good UX."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "f60eaad4-c739-4147-8f3f-9303bfaf504f",
        "type": "message",
        "text": "The minute you throw a few IF statements into the mix, static analysis becomes impossible. I don't believe that static analysis could ever work. If you have a mysterious function for which you don't know the result range, then  mystery(3) * 2 becomes unknowable in terms of required bit size.  For a vast number of applications, double precision floating point has proven adequate, which is why it is the main numeric type used in JS and AS3.   A long time ago FLOAT64 was so slow (100x slower than integer) one would go to great lengths to avoid it, but IBM and Intel cracked the code on fast floating point, and now you don't even think about it. I think Motorola's inability to build a fast floating point unit may have been a factor in Apple ditching Motorola for PowerPC.",
        "user": "UEQ6M68H0",
        "ts": "1591940682.179400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1591940990.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iU9S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The minute you throw a few IF statements into the mix, static analysis becomes impossible. I don't believe that static analysis could ever work. If you have a mysterious function for which you don't know the result range, then  mystery(3) * 2 becomes unknowable in terms of required bit size.  For a vast number of applications, double precision floating point has proven adequate, which is why it is the main numeric type used in JS and AS3.   A long time ago FLOAT64 was so slow (100x slower than integer) one would go to great lengths to avoid it, but IBM and Intel cracked the code on fast floating point, and now you don't even think about it. I think Motorola's inability to build a fast floating point unit may have been a factor in Apple ditching Motorola for PowerPC."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "11add7bf-5c15-4050-a2b5-afc39a821a7a",
        "type": "message",
        "text": "I'm only envisioning the analysis working locally. The goal is to avoid checks on every single arithmetic operation. What is this \"mystery\" function you're thinking of? It's going to consist of primitive operations like add and multiply.",
        "user": "UCGAK10LS",
        "ts": "1591940889.179600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1591940950.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "27o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm only envisioning the analysis working locally. The goal is to avoid checks on every single arithmetic operation. What is this \"mystery\" function you're thinking of? It's going to consist of primitive operations like add and multiply."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "52e0837c-72fd-4ab5-928c-52cd30afd214",
        "type": "message",
        "text": "The topic of symbolic computation makes me miss my TI-89",
        "user": "UAVCC2X70",
        "ts": "1591941255.180000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NIqeh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The topic of symbolic computation makes me miss my TI-89"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "8d0569a7-6356-42a2-93e9-37fb70ce1c6d",
        "type": "message",
        "text": "Even local branches will create a combinatorial nightmare for your analysis. And if it is inside a while() loop, how do you know how many times it will execute? Every one who has ever done this has done runtime checks.",
        "user": "UEQ6M68H0",
        "ts": "1591941261.180200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xCg43",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Even local branches will create a combinatorial nightmare for your analysis. And if it is inside a while() loop, how do you know how many times it will execute? Every one who has ever done this has done runtime checks."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "1b69afee-a408-4efe-9afa-f44a1067fdc9",
        "type": "message",
        "text": "Well, it won't be inside a while-loop because my language doesn't have those! Nor does it have general recursion. I'm introducing repetition capabilities VERY carefully. My theoretical foundation is Datalog, which is far more amenable to static analysis.",
        "user": "UCGAK10LS",
        "ts": "1591941429.180400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D2L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well, it won't be inside a while-loop because my language doesn't have those! Nor does it have general recursion. I'm introducing repetition capabilities VERY carefully. My theoretical foundation is Datalog, which is far more amenable to static analysis."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "231fb24b-a22b-438f-8066-f8b4eb4d0db6",
        "type": "message",
        "text": "I'll probably be including escape hatches where \"anything goes\", but I'm yet to see how prevalent those will need to be. I think they'll be limited to low-level libraries.",
        "user": "UCGAK10LS",
        "ts": "1591941507.180600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SbyG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'll probably be including escape hatches where \"anything goes\", but I'm yet to see how prevalent those will need to be. I think they'll be limited to low-level libraries."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "814ae09b-a1e2-42ab-beec-b9525f73e39c",
        "type": "message",
        "text": "And coincidentally, Datalog is itself a good language for implementing a static analyzer, so I'll probably have high-quality static analysis at my fingertips.",
        "user": "UCGAK10LS",
        "ts": "1591941581.180800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mb12",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And coincidentally, Datalog is itself a good language for implementing a static analyzer, so I'll probably have high-quality static analysis at my fingertips."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "63f49028-dd77-405e-985b-504333d549ff",
        "type": "message",
        "text": "Mathematica lets you request a desired precision for the results. Also, the Intel 8087 subunit  which is inside every Intel compatible chip for over 20 years has operations that do everything in 80 bits precision, and is then downconverting to 64 bits after you run a long sequence of operations and store the result into a double precision result. In this way they avoid rounding errors from creeping in. It is extremely clever and although not amenable to parallel operation, is still the preferred way to do floating point in the intel world because it doesn't accumulate error like everyone else's 64 bit arithmetic operations, which accumulate error rather quickly. 80 bits is 10 bytes, and there are even BCD instructions in the 8087 unit which i have occasionally used. They are nearly forgotten nowadays as no higher level language i know of lets you access them, you have to write in Assembler. A tiny bit of assembler can ofttimes do some very clever things.",
        "user": "UEQ6M68H0",
        "ts": "1591941620.181000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1591941666.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hFt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Mathematica lets you request a desired precision for the results. Also, the Intel 8087 subunit  which is inside every Intel compatible chip for over 20 years has operations that do everything in 80 bits precision, and is then downconverting to 64 bits after you run a long sequence of operations and store the result into a double precision result. In this way they avoid rounding errors from creeping in. It is extremely clever and although not amenable to parallel operation, is still the preferred way to do floating point in the intel world because it doesn't accumulate error like everyone else's 64 bit arithmetic operations, which accumulate error rather quickly. 80 bits is 10 bytes, and there are even BCD instructions in the 8087 unit which i have occasionally used. They are nearly forgotten nowadays as no higher level language i know of lets you access them, you have to write in Assembler. A tiny bit of assembler can ofttimes do some very clever things."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "003a4035-05ba-4896-b303-8bc579b4a007",
        "type": "message",
        "text": "But that still doesn't enable associative addition and multiplication :confused: I'm looking for conceptual simplicity. Users of my programming environment should have addition and multiplication that \"just work\", no strings attached, no land mines, no cognitive overhead.",
        "user": "UCGAK10LS",
        "ts": "1591941728.181300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QbxrN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But that still doesn't enable associative addition and multiplication "
                            },
                            {
                                "type": "emoji",
                                "name": "confused"
                            },
                            {
                                "type": "text",
                                "text": " I'm looking for conceptual simplicity. Users of my programming environment should have addition and multiplication that \"just work\", no strings attached, no land mines, no cognitive overhead."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "7ac08b12-c11e-40ee-bc0c-806722026f6f",
        "type": "message",
        "text": "That's also an accurate description of my project:\n\n<https://github.com/d-cook/Interact|https://github.com/d-cook/Interact>\n\nI also intend for this system to expose its own code through its own UI (including the code for the UI, etc.). This way the whole thing is 100% moldable at any level.\n\nThe description is out of date (but not far off). I've also used the \"Issues\" as a dump of all the different approaches I might take with it. I've not had time to work on it in ages, but still plan on finishing it someday.",
        "user": "UAVCC2X70",
        "ts": "1591941950.181500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "d-cook/Interact",
                "text": "A tool for programming by interaction instead by coding",
                "title": "d-cook/Interact",
                "footer": "<https://github.com/d-cook/Interact|d-cook/Interact>",
                "id": 1,
                "footer_icon": "https://github.githubassets.com/favicon.ico",
                "ts": 1533619469,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Stars",
                        "value": "10",
                        "short": true
                    },
                    {
                        "title": "Language",
                        "value": "JavaScript",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https://github.com/d-cook/Interact",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l/wNT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's also an accurate description of my project:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/d-cook/Interact",
                                "text": "https://github.com/d-cook/Interact"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI also intend for this system to expose its own code through its own UI (including the code for the UI, etc.). This way the whole thing is 100% moldable at any level.\n\nThe description is out of date (but not far off). I've also used the \"Issues\" as a dump of all the different approaches I might take with it. I've not had time to work on it in ages, but still plan on finishing it someday."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591889749.164700",
        "parent_user_id": "UK500AGQ4"
    },
    {
        "client_msg_id": "105F93E6-3BE8-4EB8-896D-46B8D82342F7",
        "type": "message",
        "text": "<@UCGAK10LS> It seems that what you want is scaled integers, right? Maybe <http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0828r1.html|this proposal> would work for you. There even seems to be <https://github.com/johnmcfarlane/cnl|an implementation> (in C++).",
        "user": "UJBAJNFLK",
        "ts": "1591948865.183700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "johnmcfarlane/cnl",
                "text": "A Compositional Numeric Library for C++",
                "title": "johnmcfarlane/cnl",
                "footer": "<https://github.com/johnmcfarlane/cnl|johnmcfarlane/cnl>",
                "id": 1,
                "footer_icon": "https://github.githubassets.com/favicon.ico",
                "ts": 1500525957,
                "color": "24292f",
                "fields": [
                    {
                        "title": "Stars",
                        "value": "337",
                        "short": true
                    },
                    {
                        "title": "Language",
                        "value": "C++",
                        "short": true
                    }
                ],
                "mrkdwn_in": [
                    "text",
                    "fields"
                ],
                "bot_id": "B011KHY4N3Y",
                "app_unfurl_url": "https://github.com/johnmcfarlane/cnl",
                "is_app_unfurl": true
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "04J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " It seems that what you want is scaled integers, right? Maybe "
                            },
                            {
                                "type": "link",
                                "url": "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0828r1.html",
                                "text": "this proposal"
                            },
                            {
                                "type": "text",
                                "text": " would work for you. There even seems to be "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/johnmcfarlane/cnl",
                                "text": "an implementation"
                            },
                            {
                                "type": "text",
                                "text": " (in C++)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "15E3BDD8-4816-4E24-9CBA-D6960C699467",
        "type": "message",
        "text": "<@UEQ6M68H0> DEC64 follows different priorities than IEEE 754. If your needs are closer to DEC64, that\u2019s fine, but not a reason to call IEEE754 stupid.",
        "user": "UJBAJNFLK",
        "ts": "1591949060.185900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qEI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " DEC64 follows different priorities than IEEE 754. If your needs are closer to DEC64, that\u2019s fine, but not a reason to call IEEE754 stupid."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "7277C9AA-232F-4B85-9008-F51B1F92ED50",
        "type": "message",
        "text": "<@UJBAJNFLK> I want fractional numbers like 1.5, and dynamic range (compact representations of 2^100 and 2^-100) and I don\u2019t think that proposal addresses that.",
        "user": "UCGAK10LS",
        "ts": "1591953177.188100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1HxOv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " I want fractional numbers like 1.5, and dynamic range (compact representations of 2^100 and 2^-100) and I don\u2019t think that proposal addresses that."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "90C30CE4-C398-47CC-B780-59E5782C6E0F",
        "type": "message",
        "text": "(Though I appreciate the suggestions)",
        "user": "UCGAK10LS",
        "ts": "1591953212.188700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5UHl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(Though I appreciate the suggestions)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "59209c7d-12da-4cd5-bd5d-285b878db6f3",
        "type": "message",
        "text": "Weekly update from CodeFaster. This week's topic is how to write a printf debug statement. It's a simple but important suggestion that's often overlooked. The post does the main job of making it clear how to use it from the examples. Some of the subtlties of the advantages were obscured in the writing. So I'll lean more on code examples and less on english prose\n\n<https://codefaster.substack.com/p/printf-debugging|https://codefaster.substack.com/p/printf-debugging>",
        "user": "UL5AX4G2H",
        "ts": "1591955819.200400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Printf Debugging",
                "title_link": "https://codefaster.substack.com/p/printf-debugging",
                "text": "Printf debugging is essential, so since we\u2019re going to do it anyways, let\u2019s do it fast. In this post we\u2019ll focus specifically on how to write printf debugging log lines to make them fast to read and write programs against. There\u2019s two important features: a machine parsable format like json or DSV and explicitly labeled fields.",
                "fallback": "Printf Debugging",
                "thumb_url": "https://cdn.substack.com/image/fetch/w_256,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2Fc21d3e2d-bc9d-401f-bbe8-225d0d0643d9_256x256.png",
                "from_url": "https://codefaster.substack.com/p/printf-debugging",
                "thumb_width": 256,
                "thumb_height": 256,
                "service_icon": "https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/d8afe861-b0e8-49ce-b80e-2d642b648703/apple-touch-icon-57x57.png",
                "service_name": "codefaster.substack.com",
                "id": 1,
                "original_url": "https://codefaster.substack.com/p/printf-debugging"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mpuJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Weekly update from CodeFaster. This week's topic is how to write a printf debug statement. It's a simple but important suggestion that's often overlooked. The post does the main job of making it clear how to use it from the examples. Some of the subtlties of the advantages were obscured in the writing. So I'll lean more on code examples and less on english prose\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://codefaster.substack.com/p/printf-debugging",
                                "text": "https://codefaster.substack.com/p/printf-debugging"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591955819.200400",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1591955863.200700",
        "reply_users": [
            "UL5AX4G2H"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "75da0a4d-d5f8-4b79-a11e-c5084d061d4f",
        "type": "message",
        "text": "Im posting this here as was suggested in <#C0120A3L30R|two-minute-week> if I wanted a public forum for a weekly update.",
        "user": "UL5AX4G2H",
        "ts": "1591955863.200700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N9b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Im posting this here as was suggested in "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C0120A3L30R"
                            },
                            {
                                "type": "text",
                                "text": " if I wanted a public forum for a weekly update."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591955819.200400",
        "parent_user_id": "UL5AX4G2H"
    },
    {
        "client_msg_id": "424f64b3-ceee-410f-89ef-09e96bc32cbb",
        "type": "message",
        "text": "&gt; I want to see a library for dyadic rational arithmetic.\nI googled that, and got:\n\u2022 <https://github.com/SRI-CSL/libpoly/tree/master/src/number>\nThe code for exact dyadic rational addition and multiplication is actually quite simple.",
        "user": "UJN1TAYEQ",
        "ts": "1591965671.200900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s7a",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I want to see a library for dyadic rational arithmetic."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I googled that, and got:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https://github.com/SRI-CSL/libpoly/tree/master/src/number"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The code for exact dyadic rational addition and multiplication is actually quite simple."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "1179dd50-e17e-4461-b6b9-94d2c00d145f",
        "type": "message",
        "text": "<@UCGAK10LS> please remind us what operations you want to do.  You've mentioned addition and multiplication, sometimes division.  What else?  Roots?  Trig?  What?",
        "user": "UA14TGLTC",
        "ts": "1591968862.201100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XmaG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " please remind us what operations you want to do.  You've mentioned addition and multiplication, sometimes division.  What else?  Roots?  Trig?  What?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "967ED511-0E9A-4435-A434-BBC9E9F2490A",
        "type": "message",
        "text": "As we have several fans of Christopher Alexander here, I don\u2018t want you to miss out on this gem of a talk I just came across: <https://twitter.com/stefanlesser/status/1271442252078989315?s=21|https://twitter.com/stefanlesser/status/1271442252078989315?s=21>",
        "user": "U5STGTB3J",
        "ts": "1591975277.202600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/stefanlesser|@stefanlesser>: \u201eDesigning with Forces\u201c, a presentation by <https://twitter.com/rjs|@rjs> about how to apply some of Christopher Alexander\u2018s ideas to software design, is well worth watching. \nAlexander came up with so much more than just design patterns which can be applied to software. \n<https://youtu.be/vjWJBy_9DO0>",
                "ts": 1591970429,
                "author_name": "Stefan Lesser",
                "author_link": "https://twitter.com/stefanlesser/status/1271442252078989315",
                "author_icon": "https://pbs.twimg.com/profile_images/378800000350383902/ea834338bc94043c1d14c94538e39eda_normal.jpeg",
                "author_subname": "@stefanlesser",
                "text": "\u201eDesigning with Forces\u201c, a presentation by <https://twitter.com/rjs|@rjs> about how to apply some of Christopher Alexander\u2018s ideas to software design, is well worth watching. \nAlexander came up with so much more than just design patterns which can be applied to software. \n<https://youtu.be/vjWJBy_9DO0>",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/stefanlesser/status/1271442252078989315?s=21",
                "id": 1,
                "original_url": "https://twitter.com/stefanlesser/status/1271442252078989315?s=21",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wu3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As we have several fans of Christopher Alexander here, I don\u2018t want you to miss out on this gem of a talk I just came across: "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/stefanlesser/status/1271442252078989315?s=21",
                                "text": "https://twitter.com/stefanlesser/status/1271442252078989315?s=21"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591975277.202600",
        "reply_count": 4,
        "reply_users_count": 3,
        "latest_reply": "1592287188.325900",
        "reply_users": [
            "UC2A2ARPT",
            "UAVCC2X70",
            "U5STGTB3J"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UMWF81HTP",
                    "UEZQXJK9V",
                    "UDQKHNP51",
                    "UAVCC2X70"
                ],
                "count": 5
            },
            {
                "name": "heart",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3805ba8f-95c5-429c-8bb2-ee055409f656",
        "type": "message",
        "text": "<@UCGAK10LS> Oops, right, I have filed that library under the wrong heading in my notes. Which leaves... no library I know about for scaled integers. Which have nevertheless been widely used, as they are very simple to implement in many situations. Addition, subtraction, and multiplications are nearly trivial.",
        "user": "UJBAJNFLK",
        "ts": "1591979080.202900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cRB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " Oops, right, I have filed that library under the wrong heading in my notes. Which leaves... no library I know about for scaled integers. Which have nevertheless been widely used, as they are very simple to implement in many situations. Addition, subtraction, and multiplications are nearly trivial."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591869278.153800",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "26aa5dd0-575f-4ef7-979a-1ac61aee718e",
        "type": "message",
        "text": "Well, there is no doubt a body of comp-sci research on this sort of thing that would be worth looking at. \"value range analysis\" is a term I've heard...",
        "user": "UD6EXQVM0",
        "ts": "1591980421.203100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nrw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well, there is no doubt a body of comp-sci research on this sort of thing that would be worth looking at. \"value range analysis\" is a term I've heard..."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590977348.305600",
        "parent_user_id": "UCGAK10LS",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ec35fbbb-5bf7-4603-ae59-42a10cda6146",
        "type": "message",
        "text": "<@UAVCC2X70> that's an interesting project, have you thought of the analogy to application macros, e.g. in vim or emacs? interestingly, in Emacs, you can record a macro by performing actions, and then store it as Elisp code which calls the functions those actions invoked",
        "user": "UK500AGQ4",
        "ts": "1591986407.203300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UK500AGQ4",
            "ts": "1591986570.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TbC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " that's an interesting project, have you thought of the analogy to application macros, e.g. in vim or emacs? interestingly, in Emacs, you can record a macro by performing actions, and then store it as Elisp code which calls the functions those actions invoked"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591889749.164700",
        "parent_user_id": "UK500AGQ4"
    },
    {
        "client_msg_id": "5b5d1db8-b03c-40ae-a2a8-9709783a454b",
        "type": "message",
        "text": "I too can vouch for this being good talk.\n\nHere's a higher quality version: <https://vimeo.com/10875362>",
        "user": "UC2A2ARPT",
        "ts": "1591991977.203800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Vimeo",
                "service_url": "https://vimeo.com/",
                "title": "Ryan Singer, \u201cDesigning with Forces: How to Apply Christopher Alexander in Everyday Work \u201d",
                "title_link": "https://vimeo.com/10875362",
                "author_name": "MFA Interaction Design",
                "author_link": "https://vimeo.com/svaixd",
                "thumb_url": "https://i.vimeocdn.com/video/174883917_295x166.jpg",
                "thumb_width": 295,
                "thumb_height": 166,
                "fallback": "Vimeo Video: Ryan Singer, \u201cDesigning with Forces: How to Apply Christopher Alexander in Everyday Work \u201d",
                "video_html": "<iframe src=\"https://player.vimeo.com/video/10875362?autoplay=1&amp;app_id=122963\" width=\"400\" height=\"225\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen title=\"Ryan Singer, &amp;ldquo;Designing with Forces: How to Apply Christopher Alexander in Everyday Work &amp;rdquo;\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://vimeo.com/10875362",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/vimeo.png",
                "id": 1,
                "original_url": "https://vimeo.com/10875362"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DOfI1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I too can vouch for this being good talk.\n\nHere's a higher quality version: "
                            },
                            {
                                "type": "link",
                                "url": "https://vimeo.com/10875362"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591975277.202600",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5STGTB3J"
                ],
                "count": 1
            }
        ]
    }
]