[
    {
        "client_msg_id": "27d353f2-1ff8-4160-ad51-003358e10646",
        "type": "message",
        "text": "Do it.",
        "user": "UJN1TAYEQ",
        "ts": "1591394727.480500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a=CTx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591362068.469500",
        "parent_user_id": "UD69XQ9J8"
    },
    {
        "client_msg_id": "4ea4e1e4-7c1c-47ad-916d-00498da28d0c",
        "type": "message",
        "text": "One example would be a video game, full of subsystems that all operate with different notions of time \u2014\u00a0networking code working in terms of packets with variable ping, physics locked at 60hz, gameplay logic happening at various rates (some stuff is every frame, some stuff is once every few frames, some stuff goes into a low-priority queue, some stuff happens at specific moments), rendering synced to the display refresh interval, audio happening both in sync with the gameplay logic but also at the audio sampling rate, and on and on. These subsystems are _kinda_ isolated, but they're also _kinda_ interdependent. There could be a lot of shared state, or a lot of dynamism in how these subsystems affect one another, or a lot of design decisions that prioritize performance at all costs. Ultimately, the code needs to be quite deterministic and very well understood in order to ensure that the game runs quickly and correctly, and you don't (can't?) have automated tests or static verification, so you generally have to work on it by loading it all into your head.\n\n(I hope I'm understanding your question correctly. Sorry if this is not what you had in mind.)",
        "user": "UC2A2ARPT",
        "ts": "1591414255.480800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1591414981.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kVv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One example would be a video game, full of subsystems that all operate with different notions of time \u2014\u00a0networking code working in terms of packets with variable ping, physics locked at 60hz, gameplay logic happening at various rates (some stuff is every frame, some stuff is once every few frames, some stuff goes into a low-priority queue, some stuff happens at specific moments), rendering synced to the display refresh interval, audio happening both in sync with the gameplay logic but also at the audio sampling rate, and on and on. These subsystems are "
                            },
                            {
                                "type": "text",
                                "text": "kinda",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " isolated, but they're also "
                            },
                            {
                                "type": "text",
                                "text": "kinda",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " interdependent. There could be a lot of shared state, or a lot of dynamism in how these subsystems affect one another, or a lot of design decisions that prioritize performance at all costs. Ultimately, the code needs to be quite deterministic and very well understood in order to ensure that the game runs quickly and correctly, and you don't (can't?) have automated tests or static verification, so you generally have to work on it by loading it all into your head.\n\n(I hope I'm understanding your question correctly. Sorry if this is not what you had in mind.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591313174.458700",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "4959838e-ff34-4801-beba-d2df60720518",
        "type": "message",
        "text": "There's intentional lock-in, creeping lock-in, and explicit design to prevent lock-in, which involves in particular well-documented data models, storage formats, and APIs. It's much like code complexity: you have to fight it actively to prevent it from sneaking in.",
        "user": "UJBAJNFLK",
        "ts": "1591418291.489000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N+d4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's intentional lock-in, creeping lock-in, and explicit design to prevent lock-in, which involves in particular well-documented data models, storage formats, and APIs. It's much like code complexity: you have to fight it actively to prevent it from sneaking in."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591214873.399000",
        "parent_user_id": "UR482RFPY"
    },
    {
        "client_msg_id": "e69fd1b0-3b60-4f44-9942-494a5190e184",
        "type": "message",
        "text": "This might not be quite the same thing, but here's an idea I had:\n\nA diagram consisting of data (and/or labeled placeholders for data), some is which can be visually nested (lists, key-value maps), and connections (e.g. arrows) that show operations between them.\n\nCopy/assign A to B is an arrow from A to B\n\nConditionals connect a condition to an operation(s). Either a bubble around the operations, or an indicator next to the line representing the operation (and all other operations that stem from it).\n\nA map/select operation where one end is a collection, and the other represents each element. Either some other connector \"down the line\" that \"collects\" it all, or a bubble around the whole map. In either case, the output is the new collection.\n\nSimilar symbols for filter, reduce/aggregate, sort, etc.\n\nSome sort of haskell pattern match. For example, an arrow from A to some (partially specified) nested structure, and then connectors from parts of that nested structure to further operations (which only happen IFF the match succeeded in the first place).\n\nThere's no inherent order to anything, other than by dependency. It's a DAG that you can trace forward or back.",
        "user": "UAVCC2X70",
        "ts": "1591422007.489300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1591423165.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nxE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This might not be quite the same thing, but here's an idea I had:\n\nA diagram consisting of data (and/or labeled placeholders for data), some is which can be visually nested (lists, key-value maps), and connections (e.g. arrows) that show operations between them.\n\nCopy/assign A to B is an arrow from A to B\n\nConditionals connect a condition to an operation(s). Either a bubble around the operations, or an indicator next to the line representing the operation (and all other operations that stem from it).\n\nA map/select operation where one end is a collection, and the other represents each element. Either some other connector \"down the line\" that \"collects\" it all, or a bubble around the whole map. In either case, the output is the new collection.\n\nSimilar symbols for filter, reduce/aggregate, sort, etc.\n\nSome sort of haskell pattern match. For example, an arrow from A to some (partially specified) nested structure, and then connectors from parts of that nested structure to further operations (which only happen IFF the match succeeded in the first place).\n\nThere's no inherent order to anything, other than by dependency. It's a DAG that you can trace forward or back."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591362068.469500",
        "parent_user_id": "UD69XQ9J8"
    },
    {
        "client_msg_id": "3AE27CA1-7C93-47E8-AC45-610F5E825431",
        "type": "message",
        "text": "Lock-in \u201ccreeps in\u201d, because a lot of technology is commercially driven these days, and building on open standards just doesn\u2019t make economic sense in a world where you need to own a platform to make money, or at least make it look like you will at some point in the future.\n\nThe groundbreaking technologies we still have as foundations, the internet, TCP/IP, HTTP, email, etc. have all been invented without business models in mind. What\u2019s locking us in, and what\u2019s keeping us back in inventing the future are the incentives set by business models and what is considered being successful today.",
        "user": "U5STGTB3J",
        "ts": "1591449674.001000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4aNX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lock-in \u201ccreeps in\u201d, because a lot of technology is commercially driven these days, and building on open standards just doesn\u2019t make economic sense in a world where you need to own a platform to make money, or at least make it look like you will at some point in the future.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "The groundbreaking technologies we still have as foundations, the internet, TCP/IP, HTTP, email, etc. have all been invented without business models in mind. What\u2019s locking us in, and what\u2019s keeping us back in inventing the future are the incentives set by business models and what is considered being successful today."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591214873.399000",
        "parent_user_id": "UR482RFPY",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT",
                    "UA14TGLTC",
                    "UR482RFPY"
                ],
                "count": 3
            },
            {
                "name": "100",
                "users": [
                    "U71PMQ1V0",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "fe1271e8-f941-4811-8a5a-e5953d065e12",
        "type": "message",
        "text": "Frege mentioned right up front: at least knows to reference.  Will look further.  Might have a fun idea or three.  Of course, also has a feel of \"watched Arrival, let's do this!\"",
        "user": "UA14TGLTC",
        "ts": "1591457932.001600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wgEP4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Frege mentioned right up front: at least knows to reference.  Will look further.  Might have a fun idea or three.  Of course, also has a feel of \"watched Arrival, let's do this!\""
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591362068.469500",
        "parent_user_id": "UD69XQ9J8"
    },
    {
        "client_msg_id": "fae67f9e-ec0f-4988-87bb-6c97aec723fe",
        "type": "message",
        "text": "<@UAVCC2X70> Similar to how mechanisms can perform calculations (think of a coin sorting machine). I've been playing for while with how to represent interesting data transformations (map, select, order, group, flatten, etc., etc.) non-symbolically in the sense that the geometry of the representation corresponds directly to the semantics without the use arbitrary symbols.  Since symbols make certain things so easy that there's a gravitational design pull unto familiar programming constructs, this charades game yields some interesting ideas.",
        "user": "UA14TGLTC",
        "ts": "1591458539.001800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Yzc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " Similar to how mechanisms can perform calculations (think of a coin sorting machine). I've been playing for while with how to represent interesting data transformations (map, select, order, group, flatten, etc., etc.) non-symbolically in the sense that the geometry of the representation corresponds directly to the semantics without the use arbitrary symbols.  Since symbols make certain things so easy that there's a gravitational design pull unto familiar programming constructs, this charades game yields some interesting ideas."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591362068.469500",
        "parent_user_id": "UD69XQ9J8"
    },
    {
        "client_msg_id": "f781bebd-79da-4657-a55f-0bea93896638",
        "type": "message",
        "text": "So review time: cute.  Makes for nice swirly pictograms, which seems to be the real goal.  These people need to be introduced to string diagrams.  Would benefit from a type-system or, more linguistically, agreement features.  :wink:",
        "user": "UA14TGLTC",
        "ts": "1591459363.002100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l6E2A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So review time: cute.  Makes for nice swirly pictograms, which seems to be the real goal.  These people need to be introduced to string diagrams.  Would benefit from a type-system or, more linguistically, agreement features.  "
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591362068.469500",
        "parent_user_id": "UD69XQ9J8"
    },
    {
        "client_msg_id": "bff9eae4-1d6d-4a87-8413-ade86a22e593",
        "type": "message",
        "text": "And using Pac-Man for \"to eat\" \u2014 fun times.",
        "user": "UA14TGLTC",
        "ts": "1591459501.002300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "79MA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And using Pac-Man for \"to eat\" \u2014 fun times."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591362068.469500",
        "parent_user_id": "UD69XQ9J8",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d12d8db8-1673-43a4-9031-ab39d02bd9a3",
        "type": "message",
        "text": "I think it\u2019s easier than ever actually \u2014 ever used netlify drag and drop?",
        "user": "U013RRN6Y6N",
        "ts": "1591463106.002500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vlru",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think it\u2019s easier than ever actually \u2014 ever used netlify drag and drop?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590522102.229200",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "a8f65ca6-a468-4086-afb2-82cd7c801fd8",
        "type": "message",
        "text": "`create-react-app` -&gt; Netlify stack with no web server feels like being on a rocketship.\n\nYou can deploy a functional web app in less than an hour if you know what you want!",
        "user": "U013RRN6Y6N",
        "ts": "1591463152.002700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A2H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "create-react-app",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " -> Netlify stack with no web server feels like being on a rocketship.\n\nYou can deploy a functional web app in less than an hour if you know what you want!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1590522102.229200",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "8514da20-ed21-4dfb-8792-81674a2834ea",
        "type": "message",
        "text": "<https://futureofcoding.slack.com/archives/C5T9GPWFL/p1591449674001000?thread_ts=1591214873.399000&amp;cid=C5T9GPWFL>\n\nWhat are people's thoughts on funding?",
        "user": "U71PMQ1V0",
        "ts": "1591463789.003800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1591449674001000?thread_ts=1591214873.399000&amp;cid=C5T9GPWFL",
                "fallback": "[June 6th, 2020 6:21 AM] stefanlesser: Lock-in \u201ccreeps in\u201d, because a lot of technology is commercially driven these days, and building on open standards just doesn\u2019t make economic sense in a world where you need to own a platform to make money, or at least make it look like you will at some point in the future.\n\nThe groundbreaking technologies we still have as foundations, the internet, TCP/IP, HTTP, email, etc. have all been invented without business models in mind. What\u2019s locking us in, and what\u2019s keeping us back in inventing the future are the incentives set by business models and what is considered being successful today.",
                "ts": "1591449674.001000",
                "author_id": "U5STGTB3J",
                "author_subname": "Stefan Lesser",
                "channel_id": "C5T9GPWFL",
                "channel_name": "general",
                "is_msg_unfurl": true,
                "is_reply_unfurl": true,
                "text": "Lock-in \u201ccreeps in\u201d, because a lot of technology is commercially driven these days, and building on open standards just doesn\u2019t make economic sense in a world where you need to own a platform to make money, or at least make it look like you will at some point in the future.\n\nThe groundbreaking technologies we still have as foundations, the internet, TCP/IP, HTTP, email, etc. have all been invented without business models in mind. What\u2019s locking us in, and what\u2019s keeping us back in inventing the future are the incentives set by business models and what is considered being successful today.",
                "author_name": "Stefan Lesser",
                "author_link": "https://futureofcoding.slack.com/team/U5STGTB3J",
                "author_icon": "https://avatars.slack-edge.com/2017-08-20/228447816352_649181907e06ec450c64_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1591449674001000?thread_ts=1591214873.399000&amp;cid=C5T9GPWFL",
                "footer": "From a thread in #general"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jdO8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1591449674001000?thread_ts=1591214873.399000&cid=C5T9GPWFL"
                            },
                            {
                                "type": "text",
                                "text": "\n\nWhat are people's thoughts on funding?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591463789.003800",
        "reply_count": 21,
        "reply_users_count": 8,
        "latest_reply": "1592491004.371400",
        "reply_users": [
            "U71PMQ1V0",
            "UE6EFEPTQ",
            "U014BMRB170",
            "U6KQ2S410",
            "U5STGTB3J",
            "UA14TGLTC",
            "UJ6LDMMN0",
            "UJBAJNFLK"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "4d1ea631-7b15-4bae-97a3-b9e76d5fbda1",
        "type": "message",
        "text": "My naive impression is that any tool that gives someone leverage is a good tool.\n\nIf you did theoretically have to migrate from Notion to a more performant RDBMS, then you ran out of rope. But that\u2019s fine, it\u2019s what engineers are for.\n\nThe question is just \u201cdoes migrating notion data cost _more_ than the total leverage you get by using notion\u201d.\n\nSince the person using notion is probably not technical, I imagine they get a ton of leverage by having an easy to use DB system that \u201cjust works\u201d.\n\nIt looks pretty, it\u2019s easy to edit, easy to add metadata, easy to change schema, and best of all integrated directly with your entire wiki, and all the institutional knowledge therein.",
        "user": "U013RRN6Y6N",
        "ts": "1591464766.004100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MiH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My naive impression is that any tool that gives someone leverage is a good tool.\n\nIf you did theoretically have to migrate from Notion to a more performant RDBMS, then you ran out of rope. But that\u2019s fine, it\u2019s what engineers are for.\n\nThe question is just \u201cdoes migrating notion data cost "
                            },
                            {
                                "type": "text",
                                "text": "more",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " than the total leverage you get by using notion\u201d.\n\nSince the person using notion is probably not technical, I imagine they get a ton of leverage by having an easy to use DB system that \u201cjust works\u201d.\n\nIt looks pretty, it\u2019s easy to edit, easy to add metadata, easy to change schema, and best of all integrated directly with your entire wiki, and all the institutional knowledge therein."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591058338.327500",
        "parent_user_id": "U01176YGU4W"
    },
    {
        "client_msg_id": "b3283afa-68bd-478a-bfee-d2d74a651ba6",
        "type": "message",
        "text": "On the bright side, the desire to own your data is a very real one.\n\nWhich means there\u2019s economic incentives to helping people own or duplicate their data from \u201clocked in\u201d services.\n\nCompanies like <https://fivetran.com/> help.",
        "user": "U013RRN6Y6N",
        "ts": "1591465271.004300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Fivetran | Data to Snowflake, Redshift, BigQuery, Azure",
                "title_link": "https://fivetran.com/",
                "text": "Stream data into your warehouse for advanced analytics. Fivetran was built for analysts to access to all their business data. Sign up today for a free trial.",
                "fallback": "Fivetran | Data to Snowflake, Redshift, BigQuery, Azure",
                "from_url": "https://fivetran.com/",
                "service_icon": "https://fivetran.com/apple-touch-icon.png",
                "service_name": "fivetran.com",
                "id": 1,
                "original_url": "https://fivetran.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4wW9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On the bright side, the desire to own your data is a very real one.\n\nWhich means there\u2019s economic incentives to helping people own or duplicate their data from \u201clocked in\u201d services.\n\nCompanies like "
                            },
                            {
                                "type": "link",
                                "url": "https://fivetran.com/"
                            },
                            {
                                "type": "text",
                                "text": " help."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591214873.399000",
        "parent_user_id": "UR482RFPY"
    },
    {
        "client_msg_id": "04bfc08f-7872-47ac-8a3f-7fd9c48b1828",
        "type": "message",
        "text": "I'm mostly in agreement with Stefan that typical business models tend to lead to worse outcomes overall. I can think of a few reasons:\n\n* Much of the power of computing comes from the composition of different technologies but there are active disincentives to making your tools compose with the competition. Creating standards takes time and effort, reduces lockin and enables competitors, but it's also the basis for most of our fundamental improvements in technology.\n* For whatever reasons, businesses in the last few decades have a strong tendency towards short-term thinking whereas really fundamental improvements take a long time. Eg many languages in use today took 5-10 years to reach usability whereas a typical startup funding cycle wants to see serious attention in the first 2 years.\n* Complexity has a tragedy-of-the-commons effect where increasing the complexity of your own offering can help outshine the competition and win you customers, but when everyone increases the complexity of their tools the overall result is impossible to manage.\n* For startups in particular, there is a strong risk that they'll get acquired or shut down and their technology will disappear from the world.\n\nMy own approach at the moment is to take advantage of how ridiculously overpaid programming is, where 1-2 months of unrelated consulting is enough to fund a year of working on my own projects. But it's also worth looking at how existing projects manage:\n\n* Zig is entirely funded by github sponsors and explicitly chose that option to retain the freedom to work on whatever they think is important.\n* Julia used to be funded mainly by public research grants but has also been working on enterprise support accompanied by a few proprietary tools. I haven't looked into how successful the latter is.\n* Clojure was funded mostly by consulting - not for work on the language itself but on the premise that the language made them better at other tasks. That's an interesting model because it forces you to very directly face any shortcomings in the language.\n* Rust, I think, doesn't have any central funding but several people are employed by companies that use it to work on the language full-time.\n* Sqlite sells paid support and also some proprietary tests/extensions that are mostly useful for high assurance domains eg putting sqlite on a plane.\n\nI particularly like this little note on the sqlite page:\n\n&gt; Hwaci is a small company but it is also closely held and debt-free and has low fixed costs, which means that it is largely immune to buy-outs, take-overs, and market down-turns. Hwaci intends to continue operating in its current form, and at roughly its current size until at least the year 2050. We expect to be here when you need us, even if that need is many years in the future.\nIt's a reminder that these problems aren't inherent to businesses in general, but just to a particular set of ideas about how business should be run that seems to be in the water these days. It seems like small businesses that intend to stay small are better at resisting them. A more recent example is Sourcehut, which is funded by paid subscriptions but still releases all the code under AGPL and exposes simple apis and data exports for each individual service.",
        "user": "U71PMQ1V0",
        "ts": "1591466080.004600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U71PMQ1V0",
            "ts": "1591466111.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ps8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm mostly in agreement with Stefan that typical business models tend to lead to worse outcomes overall. I can think of a few reasons:\n\n* Much of the power of computing comes from the composition of different technologies but there are active disincentives to making your tools compose with the competition. Creating standards takes time and effort, reduces lockin and enables competitors, but it's also the basis for most of our fundamental improvements in technology.\n* For whatever reasons, businesses in the last few decades have a strong tendency towards short-term thinking whereas really fundamental improvements take a long time. Eg many languages in use today took 5-10 years to reach usability whereas a typical startup funding cycle wants to see serious attention in the first 2 years.\n* Complexity has a tragedy-of-the-commons effect where increasing the complexity of your own offering can help outshine the competition and win you customers, but when everyone increases the complexity of their tools the overall result is impossible to manage.\n* For startups in particular, there is a strong risk that they'll get acquired or shut down and their technology will disappear from the world.\n\nMy own approach at the moment is to take advantage of how ridiculously overpaid programming is, where 1-2 months of unrelated consulting is enough to fund a year of working on my own projects. But it's also worth looking at how existing projects manage:\n\n* Zig is entirely funded by github sponsors and explicitly chose that option to retain the freedom to work on whatever they think is important.\n* Julia used to be funded mainly by public research grants but has also been working on enterprise support accompanied by a few proprietary tools. I haven't looked into how successful the latter is.\n* Clojure was funded mostly by consulting - not for work on the language itself but on the premise that the language made them better at other tasks. That's an interesting model because it forces you to very directly face any shortcomings in the language.\n* Rust, I think, doesn't have any central funding but several people are employed by companies that use it to work on the language full-time.\n* Sqlite sells paid support and also some proprietary tests/extensions that are mostly useful for high assurance domains eg putting sqlite on a plane.\n\nI particularly like this little note on the sqlite page:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hwaci is a small company but it is also closely held and debt-free and has low fixed costs, which means that it is largely immune to buy-outs, take-overs, and market down-turns. Hwaci intends to continue operating in its current form, and at roughly its current size until at least the year 2050. We expect to be here when you need us, even if that need is many years in the future."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIt's a reminder that these problems aren't inherent to businesses in general, but just to a particular set of ideas about how business should be run that seems to be in the water these days. It seems like small businesses that intend to stay small are better at resisting them. A more recent example is Sourcehut, which is funded by paid subscriptions but still releases all the code under AGPL and exposes simple apis and data exports for each individual service."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591463789.003800",
        "parent_user_id": "U71PMQ1V0"
    },
    {
        "client_msg_id": "24b4a671-2c36-4636-94ba-decfc6a972eb",
        "type": "message",
        "text": "My plan is a mix of:\n\u2022 overpaid contract work followed by periods of working on Onex (I'm currently in one of those full-time Onex phases)\n\u2022 drawing on my pension pot :open_mouth: \n\u2022 doing a Kickstarter to sell cheap OnexOS smartwatches - like Espruino, make money on hardware not software.\nThis is an age-old problem: just think what progress the human race could make if there was a source of funding for innovations that didn't rely on (a) a business model or (b) an academic publishing model, just (c) a value-for-humanity model.",
        "user": "UE6EFEPTQ",
        "ts": "1591469548.005100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1591469612.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fPaup",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My plan is a mix of:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "overpaid contract work followed by periods of working on Onex (I'm currently in one of those full-time Onex phases)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "drawing on my pension pot "
                                    },
                                    {
                                        "type": "emoji",
                                        "name": "open_mouth"
                                    },
                                    {
                                        "type": "text",
                                        "text": " "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "doing a Kickstarter to sell cheap OnexOS smartwatches - like Espruino, make money on hardware not software."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is an age-old problem: just think what progress the human race could make if there was a source of funding for innovations that didn't rely on (a) a business model or (b) an academic publishing model, just (c) a value-for-humanity model."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591463789.003800",
        "parent_user_id": "U71PMQ1V0"
    },
    {
        "client_msg_id": "30cb6d2c-c7f2-4e82-aaba-d56492d7d7b0",
        "type": "message",
        "text": "<@U5STGTB3J> All true, but as I try to explain in my blog post, creeping lock-in can also happen in an Open Source project such as Python, with no business model. It is sufficient that the developers have some interest in increasing their user base, even if it's for glory rather than money.\n\nUltimately the issue is competitive development, rather than collaborative.",
        "user": "UJBAJNFLK",
        "ts": "1591470030.005500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJBAJNFLK",
            "ts": "1591470330.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g5br",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " All true, but as I try to explain in my blog post, creeping lock-in can also happen in an Open Source project such as Python, with no business model. It is sufficient that the developers have some interest in increasing their user base, even if it's for glory rather than money.\n\nUltimately the issue is competitive development, rather than collaborative."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591214873.399000",
        "parent_user_id": "UR482RFPY"
    },
    {
        "client_msg_id": "a81f38e1-773a-4806-b133-d3edcf9a78d5",
        "type": "message",
        "text": "I'm not sure how comparable most 'future of programming' projects are to programming language projects. Like definitely, it's 5-10 years till languages are generally applicable but Rust, Zig, and Clojure were useful for basic experiments within the 1-2 year timeline (as far as I can grok from the informal histories)",
        "user": "U014BMRB170",
        "ts": "1591475304.016800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+mg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not sure how comparable most 'future of programming' projects are to programming language projects. Like definitely, it's 5-10 years till languages are generally applicable but Rust, Zig, and Clojure were useful for basic experiments within the 1-2 year timeline (as far as I can grok from the informal histories)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591463789.003800",
        "parent_user_id": "U71PMQ1V0"
    },
    {
        "client_msg_id": "e97ab076-537d-445f-9659-871d0d837d6f",
        "type": "message",
        "text": "The sort of future-of-programming vision quest things like dynamicland or, sort of, ink &amp; switch, are longer bets and more likely to produce prototypes with no practical use before they potentially invent the future",
        "user": "U014BMRB170",
        "ts": "1591475414.017000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v8S8H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The sort of future-of-programming vision quest things like dynamicland or, sort of, ink & switch, are longer bets and more likely to produce prototypes with no practical use before they potentially invent the future"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591463789.003800",
        "parent_user_id": "U71PMQ1V0"
    },
    {
        "client_msg_id": "64281150-133C-480F-AE39-318C2588EA44",
        "type": "message",
        "text": "<@UJBAJNFLK> Sure, strong communities have strong opinions, and it starts to look a lot like a cult, religion, or whatever we want to call it. I would think that this is almost necessary to create a successful community.\n\nOverall, I think the aspect of a project being open source is perceived as more important than it really is. Many successful open source projects are practically driven by commercial organizations and their values and economic incentives reflect on the direction these projects take. \n\nAt the end of the day the real issue seems to be about trust \u2014 do I trust the organization to not screw me over, go out of business, and stay aligned with my values? At least with the current commercial landscape you can look at the business model and get a good grasp on what you can expect.",
        "user": "U5STGTB3J",
        "ts": "1591476803.030500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1591477025.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7LI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " Sure, strong communities have strong opinions, and it starts to look a lot like a cult, religion, or whatever we want to call it. I would think that this is almost necessary to create a successful community.\n\nOverall, I think the aspect of a project being open source is perceived as more important than it really is. Many successful open source projects are practically driven by commercial organizations and their values and economic incentives reflect on the direction these projects take. \n\nAt the end of the day the real issue seems to be about trust \u2014 do I trust the organization to not screw me over, go out of business, and stay aligned with my values? At least with the current commercial landscape you can look at the business model and get a good grasp on what you can expect."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1591214873.399000",
        "parent_user_id": "UR482RFPY",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    }
]