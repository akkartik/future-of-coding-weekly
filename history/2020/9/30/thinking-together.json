[
    {
        "client_msg_id": "535ef79d-3e27-4997-8c32-8d394817089f",
        "type": "message",
        "text": "I understand it better now. It has the possibility of being a game changer in the field of using machine learning on code. Great initiative. What kind of involvement are you expecting from people? I would be happy to help out and in be involved in this from an early stage.",
        "user": "UPVBV34EL",
        "ts": "1601466678.069900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UPVBV34EL",
            "ts": "1601466745.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TyS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I understand it better now. It has the possibility of being a game changer in the field of using machine learning on code. Great initiative. What kind of involvement are you expecting from people? I would be happy to help out and in be involved in this from an early stage."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601330319.057300",
        "parent_user_id": "U01AD80KMLK"
    },
    {
        "client_msg_id": "ff5fa546-1ba8-4671-87c7-2db1e43e39b4",
        "type": "message",
        "text": "What's the future of side effects?",
        "user": "UBN9AFS0N",
        "ts": "1601468992.070500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "16E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What's the future of side effects?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "reply_count": 28,
        "reply_users_count": 13,
        "latest_reply": "1601593895.135000",
        "reply_users": [
            "UNCP67JSK",
            "UE6EFEPTQ",
            "UBN9AFS0N",
            "UE1JQM9HQ",
            "UN06QADNV",
            "UDQBTJ211",
            "UFZFETUH1",
            "UN57U8V53",
            "UN9SCH5RD",
            "U016VUZGUUQ",
            "UHWC9PXBL",
            "UJN1TAYEQ",
            "UCGAK10LS"
        ],
        "subscribed": true,
        "last_read": "1601646031.135800"
    },
    {
        "client_msg_id": "FAF2BBA1-C666-4162-879A-441125908943",
        "type": "message",
        "text": "modeled as a \"possibly affecting\" graph, and thus possible to reason about, while limiting the spread of model-precision-degradation.",
        "user": "UNCP67JSK",
        "ts": "1601469297.073000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UNCP67JSK",
            "ts": "1601469462.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "38c",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "modeled as a \"possibly affecting\" graph, and thus possible to reason about, while limiting the spread of model-precision-degradation."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UDQBTJ211"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "09cf5882-271e-4db1-a0da-ee89e5e0b104",
        "type": "message",
        "text": "Define side effects. Ta :smile:",
        "user": "UE6EFEPTQ",
        "ts": "1601469321.073200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5U1e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Define side effects. Ta "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "4ff09939-f440-471c-b682-29efd58a82fa",
        "type": "message",
        "text": "anything that make a function not pure, interacting with the \"outside\", examples: write to disk, network request, read from a socket",
        "user": "UBN9AFS0N",
        "ts": "1601469375.073400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1601469385.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g4V2V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "anything that make a function not pure, interacting with the \"outside\", examples: write to disk, network request, read from a socket"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "467900df-bc88-455f-bcb2-0ada18427781",
        "type": "message",
        "text": "I won't mess with this thread with my heresies, so don't answer this: suffice to stay, \"start with side effects\"!",
        "user": "UE6EFEPTQ",
        "ts": "1601469505.073900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SR0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I won't mess with this thread with my heresies, so don't answer this: suffice to stay, \"start with side effects\"!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UDKTZSD6H"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "82bc135d-936c-456c-b2b5-ae336614e6f0",
        "type": "message",
        "text": "<@UE6EFEPTQ> now I really want to hear more :slightly_smiling_face:. In what way \u201cstart with\u201d?",
        "user": "UE1JQM9HQ",
        "ts": "1601472292.074100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wBZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": " now I really want to hear more "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": ". In what way \u201cstart with\u201d?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "de35c0ee-39ac-4be0-9296-176491ce89e2",
        "type": "message",
        "text": "I said don't answer! This is a functional programming thread! :hugging_face:",
        "user": "UE6EFEPTQ",
        "ts": "1601472517.074300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FwA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I said don't answer! This is a functional programming thread! "
                            },
                            {
                                "type": "emoji",
                                "name": "hugging_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "842bdd97-c034-4c07-9f27-f1605412c5a7",
        "type": "message",
        "text": "The OP's question was posed with a hidden presumption that respondents have already agreed to tie their hands and feet with pure FP :blush:",
        "user": "UE6EFEPTQ",
        "ts": "1601472646.074500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SKH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The OP's question was posed with a hidden presumption that respondents have already agreed to tie their hands and feet with pure FP "
                            },
                            {
                                "type": "emoji",
                                "name": "blush"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UE1JQM9HQ",
                    "U01A1C2K8MP"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "cbe4d2d4-891c-4d47-a6d9-62435ba86b91",
        "type": "message",
        "text": "nope, I'm not an FP fundamentalist, I don't even use types that much (python, js, erlang and elixir are the languages I use the most)",
        "user": "UBN9AFS0N",
        "ts": "1601472903.074700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1601473079.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "209",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "nope, I'm not an FP fundamentalist, I don't even use types that much (python, js, erlang and elixir are the languages I use the most)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "e0c3b720-9e77-4e67-95a6-1c01e7aaa3ff",
        "type": "message",
        "text": "but I don't like to write code full of side effects, hard to test, hard to reason about, hard to know all the edge cases",
        "user": "UBN9AFS0N",
        "ts": "1601472937.074900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nICw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "but I don't like to write code full of side effects, hard to test, hard to reason about, hard to know all the edge cases"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "6b4d83d8-2849-4b0f-9e12-fb3a7b2f985b",
        "type": "message",
        "text": "I also don't like mocks and doing dependency injection everywhere to be able to switch the side effect parts is a lot of work",
        "user": "UBN9AFS0N",
        "ts": "1601472997.075100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+cm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I also don't like mocks and doing dependency injection everywhere to be able to switch the side effect parts is a lot of work"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "6b9ac24c-4da3-40a5-9635-36df4c990995",
        "type": "message",
        "text": "ooh oooh; good news everyone; I've actually totally solved this!!!!\nOK so.... that was a lie; just to put you in the correct mindset of TRUST NOTHING THAT FOLLOWs.\n\nI would be interested in exploring how \"developer tooling\" could get better at addressing this. I use that term rather broadly; so would put \"type systems\" and \"interpreters that support dynamic languages\" into the bucket of developer tooling.\n\nDesign of these tools is the hard part. I'm currently of the hypothesis that highly opinionated tools are great; as long as they restrict users in \"the right way\"\n\nSo one day in fantasy land our tools will tell us where our impure code is. And let us chose our poison in a boilerplate friendly way of how we wish to address testing; probably using different trade offs at different stages of various test cycles.\n\nThe \"lessons learned\" in building type systems is likely a fertile learning ground\n\nThe last 15 years in API design lessons relating to \"high performance IO\" must have some critical insights.\n\nIf we can put all those take aways in one box; that might be the starting point for having enough info to build the end-game of effect management.\n\n(I clearly need to work on refining my thinking &amp; communication thereof in this space)",
        "user": "UN06QADNV",
        "ts": "1601474836.075500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wz+vK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ooh oooh; good news everyone; I've actually totally solved this!!!!\nOK so.... that was a lie; just to put you in the correct mindset of TRUST NOTHING THAT FOLLOWs.\n\nI would be interested in exploring how \"developer tooling\" could get better at addressing this. I use that term rather broadly; so would put \"type systems\" and \"interpreters that support dynamic languages\" into the bucket of developer tooling.\n\nDesign of these tools is the hard part. I'm currently of the hypothesis that highly opinionated tools are great; as long as they restrict users in \"the right way\"\n\nSo one day in fantasy land our tools will tell us where our impure code is. And let us chose our poison in a boilerplate friendly way of how we wish to address testing; probably using different trade offs at different stages of various test cycles.\n\nThe \"lessons learned\" in building type systems is likely a fertile learning ground\n\nThe last 15 years in API design lessons relating to \"high performance IO\" must have some critical insights.\n\nIf we can put all those take aways in one box; that might be the starting point for having enough info to build the end-game of effect management.\n\n(I clearly need to work on refining my thinking & communication thereof in this space)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "2bd368a6-a23a-45b4-a10e-81b9ca0493e2",
        "type": "message",
        "text": "If the choice is between \"no side effects\" (e.g. Haskell) and \"no guarantees\" (e.g. Python) then I think Python is better, because your assumptions about side effects are usually right.\n\nThe claims such as \"a + b could format your HD\" are basically nonsense, whereas the impractically of a pure FP language are actually real (for me at least).\n\nIt does annoy me that I can't actively mark something as pure and have it enforced.",
        "user": "UDQBTJ211",
        "ts": "1601477895.075800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hEt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If the choice is between \"no side effects\" (e.g. Haskell) and \"no guarantees\" (e.g. Python) then I think Python is better, because your assumptions about side effects are usually right.\n\nThe claims such as \"a + b could format your HD\" are basically nonsense, whereas the impractically of a pure FP language are actually real (for me at least).\n\nIt does annoy me that I can't actively mark something as pure and have it enforced."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "U01A1C2K8MP"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "877640c9-310e-4115-b8ba-be681db67ab3",
        "type": "message",
        "text": "who/what claims that \"a + b could format your HD\"?",
        "user": "UBN9AFS0N",
        "ts": "1601479448.076000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sddS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "who/what claims that \"a + b could format your HD\"?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "cb87febc-afbd-4a42-8329-90a49dd1e19c",
        "type": "message",
        "text": "Ok huh. We're not in <#C0133ED5811|of-functional-programming> , but I'd like to propose a recent functional programming innovation: Algebraic Effects.\n\nI wouldn't bother too much in understanding the name (I don't quite get why it's named that), but the essence is this:\n\n1. Annotate your function types with the effects they can have. Haskell kind of has this with IO, for example. but IO is this behemoth that can do anything. And you can't get rid of it, once something in your call stack uses it, you have to be IO as well. In contrast, if you use e.g. the `State` monad, you can resolve it at a higher level by running it, and you'll get back a pure value.\n2. All the annotated side-effects your functions can generate are accumulated. So a function that needs an effect like `readFile : FilePath -&gt; String` will be composable with a function that needs an effect like `openSocket : () -&gt; SocketId` . The resulting expression will contain both effects.\n3. Finally, all the effects don't actually refer to actual implementations, but rather, they refer to something like datatypes. At any point you can do something similar to what try-catch does to exceptions: You can handle effects. Thus, you can e.g. always return the same (mocked) string for `readFile : FilePath -&gt; String`. Or you can accumulate all files written with the `writeFile : FilePath -&gt; String -&gt; ()` effect.\nIf you want to learn more about algebraic effects, I recommend looking at <http://unisonweb.org|unisonweb.org>. Other than that, there's the typescript-like language koka (microsoft research) and the paper for \"Frank\", horribly named \"Do be do be do\".",
        "user": "UFZFETUH1",
        "ts": "1601480966.076200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFZFETUH1",
            "ts": "1601481508.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "==9MF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok huh. We're not in "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C0133ED5811"
                            },
                            {
                                "type": "text",
                                "text": " , but I'd like to propose a recent functional programming innovation: Algebraic Effects.\n\nI wouldn't bother too much in understanding the name (I don't quite get why it's named that), but the essence is this:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Annotate your function types with the effects they can have. Haskell kind of has this with IO, for example. but IO is this behemoth that can do anything. And you can't get rid of it, once something in your call stack uses it, you have to be IO as well. In contrast, if you use e.g. the "
                                    },
                                    {
                                        "type": "text",
                                        "text": "State",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " monad, you can resolve it at a higher level by running it, and you'll get back a pure value."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "All the annotated side-effects your functions can generate are accumulated. So a function that needs an effect like "
                                    },
                                    {
                                        "type": "text",
                                        "text": "readFile : FilePath -> String",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " will be composable with a function that needs an effect like "
                                    },
                                    {
                                        "type": "text",
                                        "text": "openSocket : () -> SocketId",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " . The resulting expression will contain both effects."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Finally, all the effects don't actually refer to actual implementations, but rather, they refer to something like datatypes. At any point you can do something similar to what try-catch does to exceptions: You can handle effects. Thus, you can e.g. always return the same (mocked) string for "
                                    },
                                    {
                                        "type": "text",
                                        "text": "readFile : FilePath -> String",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ". Or you can accumulate all files written with the "
                                    },
                                    {
                                        "type": "text",
                                        "text": "writeFile : FilePath -> String -> ()",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " effect."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIf you want to learn more about algebraic effects, I recommend looking at "
                            },
                            {
                                "type": "link",
                                "url": "http://unisonweb.org",
                                "text": "unisonweb.org"
                            },
                            {
                                "type": "text",
                                "text": ". Other than that, there's the typescript-like language koka (microsoft research) and the paper for \"Frank\", horribly named \"Do be do be do\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "f2d8dcbf-6e66-4bf8-9c90-473d2a35a3fb",
        "type": "message",
        "text": "<@UDQBTJ211> I know some people say 'Haskell doesn't have side effects', and I know why they do: From the perspective of haskell's type system, haskell doesn't have side effects.\n\nHowever, in reality, you can write and read files in haskell, thus, it has side effects.\n\n&gt; It does annoy me that I can't actively mark something as pure and have it enforced.\nThis is what motivated me to answer you: In haskell, if a function is annotated with `IO`, including this computation in the `main :: IO ()` computation will run its side effects. If not, it's pure.\n\nI feel like this is exactly fulfills your wish.\n\nHowever, writing IO functions is not very common in haskell. In fact, you try to write as much pure logic as possible, before your call stack approaches the outermost layer of your application, which is written in IO. I feel like this is one big difference between haskell and python, and it's not about functionality, it's about conventions.\n\nIn terms of functionality, there's one big difference between haskell and python: Types. However, if your goal is annotating pure-ness and statically enforcing this, you'll probably need some form of type system (even if only two types exist \"has side effect\" and \"doesn't have side effect\").\n\nSo... yay types, yay haskell? :slightly_smiling_face:",
        "user": "UFZFETUH1",
        "ts": "1601482120.076500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "72wSB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDQBTJ211"
                            },
                            {
                                "type": "text",
                                "text": " I know some people say 'Haskell doesn't have side effects', and I know why they do: From the perspective of haskell's type system, haskell doesn't have side effects.\n\nHowever, in reality, you can write and read files in haskell, thus, it has side effects.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It does annoy me that I can't actively mark something as pure and have it enforced."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is what motivated me to answer you: In haskell, if a function is annotated with "
                            },
                            {
                                "type": "text",
                                "text": "IO",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", including this computation in the "
                            },
                            {
                                "type": "text",
                                "text": "main :: IO ()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " computation will run its side effects. If not, it's pure.\n\nI feel like this is exactly fulfills your wish.\n\nHowever, writing IO functions is not very common in haskell. In fact, you try to write as much pure logic as possible, before your call stack approaches the outermost layer of your application, which is written in IO. I feel like this is one big difference between haskell and python, and it's not about functionality, it's about conventions.\n\nIn terms of functionality, there's one big difference between haskell and python: Types. However, if your goal is annotating pure-ness and statically enforcing this, you'll probably need some form of type system (even if only two types exist \"has side effect\" and \"doesn't have side effect\").\n\nSo... yay types, yay haskell? "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UDQBTJ211"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7b3cae78-e251-4820-8fb7-ad19e10e0d63",
        "type": "message",
        "text": "<@UBN9AFS0N> in many languages + can have arbitrary side effects, e.g. in c++ the operator might be overloaded, in Python it might have ___add___() set, and therefore it could do anything. (People use \"format your HD\" as a deliberately exaggerated example of a side effect)",
        "user": "UDQBTJ211",
        "ts": "1601482655.076700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NFsN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " in many languages + can have arbitrary side effects, e.g. in c++ the operator might be overloaded, in Python it might have __"
                            },
                            {
                                "type": "text",
                                "text": "add",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "__() set, and therefore it could do anything. (People use \"format your HD\" as a deliberately exaggerated example of a side effect)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "a74cb023-5f58-4cfb-bb78-bc1e7ce3ba55",
        "type": "message",
        "text": "You can join the mailing list to join in discussions, or discuss on-wiki for now, or help us writing code. Once we launch the wiki itself there will be more opportunities, that is planned for next year.",
        "user": "U01AD80KMLK",
        "ts": "1601483794.076900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tGN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You can join the mailing list to join in discussions, or discuss on-wiki for now, or help us writing code. Once we launch the wiki itself there will be more opportunities, that is planned for next year."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601330319.057300",
        "parent_user_id": "U01AD80KMLK",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UPVBV34EL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ADC78466-10DA-4706-9975-7A3CBDD4DB24",
        "type": "message",
        "text": "Right now, the FP community is messing with row types and algebraic effects.\nThere is also this fun document on coeffects: <http://tomasp.net/coeffects/|http://tomasp.net/coeffects/>",
        "user": "UN57U8V53",
        "ts": "1601484008.078200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Coeffects: Context-aware programming languages",
                "title_link": "http://tomasp.net/coeffects/",
                "text": "Interactive essay that explains theory of coeffects and lets you type-check and run sample programs.",
                "fallback": "Coeffects: Context-aware programming languages",
                "thumb_url": "http://tomasp.net/coeffects/favicon-194x194.png",
                "from_url": "http://tomasp.net/coeffects/",
                "thumb_width": 194,
                "thumb_height": 194,
                "service_icon": "http://tomasp.net/coeffects/favicon.ico",
                "service_name": "tomasp.net",
                "id": 1,
                "original_url": "http://tomasp.net/coeffects/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ECe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Right now, the FP community is messing with row types and algebraic effects.\nThere is also this fun document on coeffects: "
                            },
                            {
                                "type": "link",
                                "url": "http://tomasp.net/coeffects/",
                                "text": "http://tomasp.net/coeffects/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "90087a4c-5881-4759-9e07-bb04d7da9f06",
        "type": "message",
        "text": "I want to see a good open source implementation of state charts (note: state charts, not state machines). I think all the robust implementations are commercial, hence harder to gain wider acceptance. I still have to keep up to Harel's new work, he's still working on this area (ex: recent paper <https://arxiv.org/abs/1911.10691>). I don't know what scenario-based programming is but I bet there's something good in there :slightly_smiling_face:",
        "user": "UN9SCH5RD",
        "ts": "1601484717.079600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "arXiv.org",
                "title": "Integrating Inter-Object Scenarios with Intra-object Statecharts...",
                "title_link": "https://arxiv.org/abs/1911.10691",
                "text": "In all software development projects, engineers face the challenge of translating the requirements layer into a design layer, then into an implementation-code layer, and then validating the...",
                "fallback": "arXiv.org: Integrating Inter-Object Scenarios with Intra-object Statecharts...",
                "from_url": "https://arxiv.org/abs/1911.10691",
                "service_icon": "https://static.arxiv.org/static/browse/0.3.3/images/icons/favicon.ico",
                "id": 1,
                "original_url": "https://arxiv.org/abs/1911.10691"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AuwI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I want to see a good open source implementation of state charts (note: state charts, not state machines). I think all the robust implementations are commercial, hence harder to gain wider acceptance. I still have to keep up to Harel's new work, he's still working on this area (ex: recent paper "
                            },
                            {
                                "type": "link",
                                "url": "https://arxiv.org/abs/1911.10691"
                            },
                            {
                                "type": "text",
                                "text": "). I don't know what scenario-based programming is but I bet there's something good in there "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "0ba7e100-8bb6-4093-9353-e8e4635bc229",
        "type": "message",
        "text": "I was literally just thinking yesterday, \"dang, algebraic effects are the future\". This paper from MS Research is a nice intro, especially section 2. <https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming/|https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming/>",
        "user": "U016VUZGUUQ",
        "ts": "1601485703.079900",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Microsoft Research",
                "title": "Algebraic Effects for Functional Programming - Microsoft Research",
                "title_link": "https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming/",
                "text": "Algebraic effect handlers, are recently gaining in popularity as a purely functional approach to modeling effects. In this article, we give an end-to-end overview of practical algebraic effects in the context of a compiled implementation in the Koka language. In particular, we show how algebraic effects generalize over common constructs like exception handling, state, iterators [\u2026]",
                "fallback": "Microsoft Research: Algebraic Effects for Functional Programming - Microsoft Research",
                "from_url": "https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming/",
                "service_icon": "https://www.microsoft.com/favicon.ico",
                "id": 1,
                "original_url": "https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p8Ig",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I was literally just thinking yesterday, \"dang, algebraic effects are the future\". This paper from MS Research is a nice intro, especially section 2. "
                            },
                            {
                                "type": "link",
                                "url": "https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming/",
                                "text": "https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "91F94BA2-9A73-4961-98BD-2811F7E6109E",
        "type": "message",
        "text": "i don\u2019t understand why we can\u2019t treat all effects as continuation capturing points, use parsing and interpreting to order those continuations hierarchically, and also provide a \u201cscript\u201d which is basically a list or tree of dummy inputs and outputs. but i like barely understand continuations :woman-shrugging:",
        "user": "UHWC9PXBL",
        "ts": "1601491457.082600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j9j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i don\u2019t understand why we can\u2019t treat all effects as continuation capturing points, use parsing and interpreting to order those continuations hierarchically, and also provide a \u201cscript\u201d which is basically a list or tree of dummy inputs and outputs. but i like barely understand continuations "
                            },
                            {
                                "type": "emoji",
                                "name": "woman-shrugging"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "75fc60cc-7745-407f-86c4-41f5c2680d40",
        "type": "message",
        "text": "Um, we can't? You can definitely think of effects as captures (at least in the form presented in the article I linked), but I'm not sure what you mean by ordering them hierarchically. Do you mean for the purpose of providing isolated simulations?",
        "user": "U016VUZGUUQ",
        "ts": "1601498651.082900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZkY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Um, we can't? You can definitely think of effects as captures (at least in the form presented in the article I linked), but I'm not sure what you mean by ordering them hierarchically. Do you mean for the purpose of providing isolated simulations?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601468992.070500",
        "parent_user_id": "UBN9AFS0N"
    }
]