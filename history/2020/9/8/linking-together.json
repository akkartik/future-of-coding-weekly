[
    {
        "client_msg_id": "5e20402b-8bc7-4326-8c4b-865fc40b555d",
        "type": "message",
        "text": "Lots of people I know use evil mode. Usually they use it with  <https://www.spacemacs.org/|https://www.spacemacs.org/> Shouldn't be hard to adapt the tutorial I linked but start with spacemacs. \n\n\nI don't know anyone with a decent vim setup. People do it, but they never have the workflow I show above. (And are typically very proud of that fact). \n\nFor vs code I've heard good things about <https://calva.io/|https://calva.io/>",
        "user": "UK3LH8CF5",
        "ts": "1599516996.093300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Spacemacs: Emacs advanced Kit focused on Evil",
                "title_link": "https://www.spacemacs.org/",
                "text": "Emacs advanced Kit focused on Evil",
                "fallback": "Spacemacs: Emacs advanced Kit focused on Evil",
                "from_url": "https://www.spacemacs.org/",
                "service_icon": "https://www.spacemacs.org/favicons/apple-touch-icon-57x57.png",
                "service_name": "spacemacs.org",
                "id": 1,
                "original_url": "https://www.spacemacs.org/"
            },
            {
                "title": "Calva User Guide",
                "title_link": "https://calva.io/",
                "text": "Learn how to use Calva to boost your Clojure and ClojureScript coding in VS Code.",
                "fallback": "Calva User Guide",
                "from_url": "https://calva.io/",
                "service_icon": "https://calva.io/img/favicon.ico",
                "service_name": "calva.io",
                "id": 2,
                "original_url": "https://calva.io/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pv+sV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Lots of people I know use evil mode. Usually they use it with  "
                            },
                            {
                                "type": "link",
                                "url": "https://www.spacemacs.org/",
                                "text": "https://www.spacemacs.org/"
                            },
                            {
                                "type": "text",
                                "text": " Shouldn't be hard to adapt the tutorial I linked but start with spacemacs. \n\n\nI don't know anyone with a decent vim setup. People do it, but they never have the workflow I show above. (And are typically very proud of that fact). \n\nFor vs code I've heard good things about "
                            },
                            {
                                "type": "link",
                                "url": "https://calva.io/",
                                "text": "https://calva.io/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599496562.080600",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "115dcd6b-164f-4448-a2b7-efb24e853637",
        "type": "message",
        "text": "Maybe the focus on the REPL is not the best way to approach the topic of this thread. It's a technicality, a detail of implementation. The more fundamental distinction is that between a programming language and a programming system.\nIn a programming system, there is a system state that includes code and data, and events that update the system state. A particular important type of event is a code update event, but it's just a special case of an instruction sent to the system for updating its internal state. There is no notion of a \"program\" that you could write, compile, and run. A REPL is a tool to send events to the system, but there can be others, and much better ones, as discussed above. Emacs is such a programming system by itself, and it also become a popular user interface to other Lisp-bases systems such as Common Lisp or Clojure. The other well-known family of programming systems is Smalltalk, which pioneered better-than-REPL interfaces to programming systems.\nIn contrast, a programming language is designed to write a program, representing a process that runs inside a larger computing system that is considered outside. The process is seen as primarily self-contained, and interaction with the rest of the system is considered exceptional and must be made explicit using relatively cumbersome techniques (I/O, shared memory, etc.).\nBoth points of view have good and bad points, and what I'd really like to see is a hybrid: a programming system that permits the creation of well-defined subsystems with well-defined interfaces that can be the subject of contracts, type-checking, sandboxing, etc.",
        "user": "UJBAJNFLK",
        "ts": "1599550576.093700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B6a",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe the focus on the REPL is not the best way to approach the topic of this thread. It's a technicality, a detail of implementation. The more fundamental distinction is that between a programming language and a programming system.\nIn a programming system, there is a system state that includes code and data, and events that update the system state. A particular important type of event is a code update event, but it's just a special case of an instruction sent to the system for updating its internal state. There is no notion of a \"program\" that you could write, compile, and run. A REPL is a tool to send events to the system, but there can be others, and much better ones, as discussed above. Emacs is such a programming system by itself, and it also become a popular user interface to other Lisp-bases systems such as Common Lisp or Clojure. The other well-known family of programming systems is Smalltalk, which pioneered better-than-REPL interfaces to programming systems.\nIn contrast, a programming language is designed to write a program, representing a process that runs inside a larger computing system that is considered outside. The process is seen as primarily self-contained, and interaction with the rest of the system is considered exceptional and must be made explicit using relatively cumbersome techniques (I/O, shared memory, etc.).\nBoth points of view have good and bad points, and what I'd really like to see is a hybrid: a programming system that permits the creation of well-defined subsystems with well-defined interfaces that can be the subject of contracts, type-checking, sandboxing, etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599496562.080600",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U013ZLJARC7",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "7b3204da-e99a-430f-a9e9-27dcb4f29ce3",
        "type": "message",
        "text": "<@U5STGTB3J> From my above-linked workflow writeup: \"the keybindings I use to perform these operations are the same for every dynamic language I use, so my process is similar from Clojure to Racket to OCaml to Ruby to Python\". That said, I strongly prefer using a language whose syntax facilitates easy structural operations. An example of this in the case of Lisp-family languages is that with syntax like `(foo (bar 1) (baz 2))` it's trivial to position the cursor after the sub-expression `(bar 1)` and evaluate just that, allowing one to tease apart a larger piece of code in order to test/understand it. In languages with more complicated syntax that lack clear scope delimiters it's much harder to make a good UX for this.",
        "user": "U013ZLJARC7",
        "ts": "1599551607.094000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1Lf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " From my above-linked workflow writeup: \"the keybindings I use to perform these operations are the same for every dynamic language I use, so my process is similar from Clojure to Racket to OCaml to Ruby to Python\". That said, I strongly prefer using a language whose syntax facilitates easy structural operations. An example of this in the case of Lisp-family languages is that with syntax like "
                            },
                            {
                                "type": "text",
                                "text": "(foo (bar 1) (baz 2))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " it's trivial to position the cursor after the sub-expression "
                            },
                            {
                                "type": "text",
                                "text": "(bar 1)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and evaluate just that, allowing one to tease apart a larger piece of code in order to test/understand it. In languages with more complicated syntax that lack clear scope delimiters it's much harder to make a good UX for this."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599496562.080600",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U5STGTB3J",
                    "UJBAJNFLK",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "fe644c4a-4243-4b03-a37f-b5e832f50d80",
        "type": "message",
        "text": "<@UHWC9PXBL> Also, for a very lightweight introduction to this kind of in-place evaluation, you can take a pass through: <https://www.maria.cloud/intro>",
        "user": "U013ZLJARC7",
        "ts": "1599551711.094200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U013ZLJARC7",
            "ts": "1599551747.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q=LfI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " Also, for a very lightweight introduction to this kind of in-place evaluation, you can take a pass through: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.maria.cloud/intro"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599496562.080600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "8a924f56-28ba-45f0-826f-1dc31a842208",
        "type": "message",
        "text": "Back in my day the Lisp image was a source of truth.  When you're done for the day, commit whatever image you're working on back into CSV.  Source files were there to reset parts of the image.  This worked only slightly better than you might expect what with no clean way to merge images.",
        "user": "UA14TGLTC",
        "ts": "1599555082.094800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XQI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Back in my day the Lisp image was a source of truth.  When you're done for the day, commit whatever image you're working on back into CSV.  Source files were there to reset parts of the image.  This worked only slightly better than you might expect what with no clean way to merge images."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599496562.080600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "6362134F-9700-4E1E-A314-755AE4777BBC",
        "type": "message",
        "text": "<@U013ZLJARC7> i did the maria cloud tutorial a little while ago\u2014it\u2019s one of the things that makes me want to be directly interacting with that kind of system in my development work\n\n<@UA14TGLTC> this is pretty much what i want lol",
        "user": "UHWC9PXBL",
        "ts": "1599572976.099300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lW1/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " i did the maria cloud tutorial a little while ago\u2014it\u2019s one of the things that makes me want to be directly interacting with that kind of system in my development work\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " this is pretty much what i want lol"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599496562.080600",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "4202101d-0ae1-4cb4-a705-aa7c867a4d0d",
        "type": "message",
        "text": "<@UHWC9PXBL> though we don't keep whole images around these days, we do store whole runs for debugging/testing/auditing.  Could work a more smoothly, but there is a direct line from bug report to getting to the same screen on your own development environment.",
        "user": "UA14TGLTC",
        "ts": "1599580256.099800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vUDv4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " though we don't keep whole images around these days, we do store whole runs for debugging/testing/auditing.  Could work a more smoothly, but there is a direct line from bug report to getting to the same screen on your own development environment."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599496562.080600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "a2672729-baeb-4c9f-b044-80d3afe044cf",
        "type": "message",
        "text": "This from <@U013ZLJARC7>'s nitty-gritty details description is great:\n\n&gt; I resist anything that involves a context change (changing windows/buffers, copy/pasting more than absolutely needed, etc) \u2013 flow states are sacred.\n(<https://clojureverse.org/t/share-the-nitty-gritty-details-of-your-clojure-workflow/1208/8>)\n\nCompare <https://futureofcoding.slack.com/archives/C5U3SEW6A/p1598741044000700?thread_ts=1598713285.112800&amp;cid=C5U3SEW6A>. It almost sounds like the world that CA and his acolytes were trying to bring to pass may already exist?!",
        "user": "UCUSW7WVD",
        "ts": "1599582417.100000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1599582427.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CCEz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This from "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": "'s nitty-gritty details description is great:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I resist anything that involves a context change (changing windows/buffers, copy/pasting more than absolutely needed, etc) \u2013 flow states are sacred."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n("
                            },
                            {
                                "type": "link",
                                "url": "https://clojureverse.org/t/share-the-nitty-gritty-details-of-your-clojure-workflow/1208/8"
                            },
                            {
                                "type": "text",
                                "text": ")\n\nCompare "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1598741044000700?thread_ts=1598713285.112800&cid=C5U3SEW6A"
                            },
                            {
                                "type": "text",
                                "text": ". It almost sounds like the world that CA and his acolytes were trying to bring to pass may already exist?!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599496562.080600",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL",
                    "U013ZLJARC7"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "26A3F99F-B65A-4605-82F2-68CDE81C4384",
        "type": "message",
        "text": "<https://youtu.be/mjVtXfdTZIQ|https://youtu.be/mjVtXfdTZIQ> the rebol community is wild. i like this prototype way of building webpages",
        "user": "UHWC9PXBL",
        "ts": "1599582832.101400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Building Rebol Web Apps",
                "title_link": "https://youtu.be/mjVtXfdTZIQ",
                "author_name": "Hostile Fork",
                "author_link": "https://www.youtube.com/user/hostilefork",
                "thumb_url": "https://i.ytimg.com/vi/mjVtXfdTZIQ/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Building Rebol Web Apps",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/mjVtXfdTZIQ?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/mjVtXfdTZIQ",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/mjVtXfdTZIQ"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3x8e",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://youtu.be/mjVtXfdTZIQ",
                                "text": "https://youtu.be/mjVtXfdTZIQ"
                            },
                            {
                                "type": "text",
                                "text": " the rebol community is wild. i like this prototype way of building webpages"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "ULK0Z4MPV",
                    "USH01JEDQ",
                    "U018LAH5QCT",
                    "U01A1C2K8MP"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "5E5F3076-9965-4BB6-9B6B-BC8FC031E159",
        "type": "message",
        "text": "Roc: a new Elm-derived language for servers, CLIs, desktop UIs, built in Rust, compiles to binary, very alpha rn - talk starts ~1:19:00\nSharing this section of the talk that talks about aspirations for a BVictor-inspired editor that will ship with the language <https://youtu.be/ZnYa99QoznE?t=5870|https://youtu.be/ZnYa99QoznE?t=5870>",
        "user": "USH01JEDQ",
        "ts": "1599590101.104700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "FP Forum Online",
                "title_link": "https://youtu.be/ZnYa99QoznE?t=5870",
                "author_name": "Berlin Functional Programming Group",
                "author_link": "https://www.youtube.com/channel/UCNp-DVb8cQRIOo32sZhWgNg",
                "thumb_url": "https://i.ytimg.com/vi/ZnYa99QoznE/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: FP Forum Online",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/ZnYa99QoznE?start=5870&feature=oembed&start=5870&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/ZnYa99QoznE?t=5870",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/ZnYa99QoznE?t=5870"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JvKaA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Roc: a new Elm-derived language for servers, CLIs, desktop UIs, built in Rust, compiles to binary, very alpha rn - talk starts ~1:19:00\nSharing this section of the talk that talks about aspirations for a BVictor-inspired editor that will ship with the language "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/ZnYa99QoznE?t=5870",
                                "text": "https://youtu.be/ZnYa99QoznE?t=5870"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599590101.104700",
        "reply_count": 6,
        "reply_users_count": 4,
        "latest_reply": "1599642790.120900",
        "reply_users": [
            "USH01JEDQ",
            "UEBG0NPDK",
            "UHWC9PXBL",
            "UJ6LDMMN0"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "cool",
                "users": [
                    "UUB7RA7PF",
                    "UUQ2EQW21",
                    "UHWC9PXBL",
                    "UBSMEUXAA",
                    "U013ZLJARC7",
                    "UJ6LDMMN0",
                    "U019CPED6T1"
                ],
                "count": 7
            },
            {
                "name": "+1",
                "users": [
                    "UUQ2EQW21",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    },
    {
        "type": "message",
        "text": "",
        "files": [
            {
                "id": "F01ANS5T325",
                "created": 1599590916,
                "timestamp": 1599590916,
                "name": "Image from iOS.jpg",
                "title": "Image from iOS",
                "mimetype": "image/jpeg",
                "filetype": "jpg",
                "pretty_type": "JPEG",
                "user": "USH01JEDQ",
                "editable": false,
                "size": 74051,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F01ANS5T325/image_from_ios.jpg",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F01ANS5T325/download/image_from_ios.jpg",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F01ANS5T325-c5d7727126/image_from_ios_64.jpg",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F01ANS5T325-c5d7727126/image_from_ios_80.jpg",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F01ANS5T325-c5d7727126/image_from_ios_360.jpg",
                "thumb_360_w": 360,
                "thumb_360_h": 196,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F01ANS5T325-c5d7727126/image_from_ios_480.jpg",
                "thumb_480_w": 480,
                "thumb_480_h": 261,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F01ANS5T325-c5d7727126/image_from_ios_160.jpg",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F01ANS5T325-c5d7727126/image_from_ios_720.jpg",
                "thumb_720_w": 720,
                "thumb_720_h": 392,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F01ANS5T325-c5d7727126/image_from_ios_800.jpg",
                "thumb_800_w": 800,
                "thumb_800_h": 435,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F01ANS5T325-c5d7727126/image_from_ios_960.jpg",
                "thumb_960_w": 960,
                "thumb_960_h": 523,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F01ANS5T325-c5d7727126/image_from_ios_1024.jpg",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 557,
                "original_w": 2190,
                "original_h": 1192,
                "thumb_tiny": "AwAaADDQPmZONuPej97/ALH60pOP4v0oAOPvfpQAn73PG3FDKxkUqcDv707Df3v0pMP/AHh+VADqjeCN2JZeT15NOAfuw/KlwfX9KAEJ9yPwpM/7R/Kn0UAN3AdSfypwIPSiigAooooA/9k=",
                "permalink": "https://futureofcoding.slack.com/files/USH01JEDQ/F01ANS5T325/image_from_ios.jpg",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F01ANS5T325-9b3843d0ff",
                "is_starred": false,
                "has_rich_preview": false
            },
            {
                "id": "F01AADTD6JX",
                "created": 1599590916,
                "timestamp": 1599590916,
                "name": "Image from iOS.jpg",
                "title": "Image from iOS",
                "mimetype": "image/jpeg",
                "filetype": "jpg",
                "pretty_type": "JPEG",
                "user": "USH01JEDQ",
                "editable": false,
                "size": 78891,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F01AADTD6JX/image_from_ios.jpg",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F01AADTD6JX/download/image_from_ios.jpg",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F01AADTD6JX-36e4f65b74/image_from_ios_64.jpg",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F01AADTD6JX-36e4f65b74/image_from_ios_80.jpg",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F01AADTD6JX-36e4f65b74/image_from_ios_360.jpg",
                "thumb_360_w": 360,
                "thumb_360_h": 208,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F01AADTD6JX-36e4f65b74/image_from_ios_480.jpg",
                "thumb_480_w": 480,
                "thumb_480_h": 277,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F01AADTD6JX-36e4f65b74/image_from_ios_160.jpg",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F01AADTD6JX-36e4f65b74/image_from_ios_720.jpg",
                "thumb_720_w": 720,
                "thumb_720_h": 416,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F01AADTD6JX-36e4f65b74/image_from_ios_800.jpg",
                "thumb_800_w": 800,
                "thumb_800_h": 462,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F01AADTD6JX-36e4f65b74/image_from_ios_960.jpg",
                "thumb_960_w": 960,
                "thumb_960_h": 555,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F01AADTD6JX-36e4f65b74/image_from_ios_1024.jpg",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 592,
                "original_w": 2149,
                "original_h": 1242,
                "thumb_tiny": "AwAbADDOIHYUnFPU8HO38aQ4B6igC1puPtYx/dPetfHu1ZGmjF4CCPumtg5I4IzQAnQ4+Y0xoI3JLIcnryafhvWnc0AczmjNFFAFzS/+Pwf7prarF0v/AI/B/umtqgBAMUtFFAH/2Q==",
                "permalink": "https://futureofcoding.slack.com/files/USH01JEDQ/F01AADTD6JX/image_from_ios.jpg",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F01AADTD6JX-47e0b90265",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": true,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7l5",
                "elements": []
            }
        ],
        "user": "USH01JEDQ",
        "ts": "1599590920.105300",
        "client_msg_id": "E0BEBFBA-0F52-4EF0-8568-60EB28AF996D",
        "thread_ts": "1599590101.104700",
        "parent_user_id": "USH01JEDQ",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "A577976A-2CBD-43A1-A97C-84AFC8C95863",
        "type": "message",
        "text": "<https://youtu.be/R3MNcA2dpts|https://youtu.be/R3MNcA2dpts> i really, really like the ux model from this demo of a concatenative programming environment\u2014in particular, how the cursor gives you a live update of the stack and the definition of new words at ~2:40. anyone know of any similar projects?",
        "user": "UHWC9PXBL",
        "ts": "1599592790.107800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "\"Brief\" Concatenative Programming Language Demo",
                "title_link": "https://youtu.be/R3MNcA2dpts",
                "author_name": "Ashley Feniello",
                "author_link": "https://www.youtube.com/user/AshLeaFen",
                "thumb_url": "https://i.ytimg.com/vi/R3MNcA2dpts/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: \"Brief\" Concatenative Programming Language Demo",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https://www.youtube.com/embed/R3MNcA2dpts?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https://youtu.be/R3MNcA2dpts",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/R3MNcA2dpts"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c2MN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://youtu.be/R3MNcA2dpts",
                                "text": "https://youtu.be/R3MNcA2dpts"
                            },
                            {
                                "type": "text",
                                "text": " i really, really like the ux model from this demo of a concatenative programming environment\u2014in particular, how the cursor gives you a live update of the stack and the definition of new words at ~2:40. anyone know of any similar projects?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599592790.107800",
        "reply_count": 18,
        "reply_users_count": 7,
        "latest_reply": "1599984599.150800",
        "reply_users": [
            "U019CPED6T1",
            "UHWC9PXBL",
            "UCUSW7WVD",
            "U013ZLJARC7",
            "UJBAJNFLK",
            "UJ6LDMMN0",
            "UDQBTJ211"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UEBG0NPDK"
                ],
                "count": 1
            },
            {
                "name": "heart_eyes",
                "users": [
                    "ULK0Z4MPV",
                    "UCUSW7WVD",
                    "UJ6LDMMN0"
                ],
                "count": 3
            },
            {
                "name": "+1",
                "users": [
                    "U016VUZGUUQ",
                    "U013ZLJARC7"
                ],
                "count": 2
            },
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UDQBTJ211"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "75eff38a-187e-44ee-8006-4e445aaab7b6",
        "type": "message",
        "text": "Once upon a time ago, we talked about that for Light Table as well! <https://www.chris-granger.com/2012/05/21/the-future-is-specific/>",
        "user": "UEBG0NPDK",
        "ts": "1599593761.108000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GGD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Once upon a time ago, we talked about that for Light Table as well! "
                            },
                            {
                                "type": "link",
                                "url": "https://www.chris-granger.com/2012/05/21/the-future-is-specific/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599590101.104700",
        "parent_user_id": "USH01JEDQ"
    },
    {
        "client_msg_id": "53d94fef-1f87-4e6b-bc83-134307793f30",
        "type": "message",
        "text": "In case the video embed doesn\u2019t work, here\u2019s the video: <https://vimeo.com/42595773>",
        "user": "UEBG0NPDK",
        "ts": "1599593802.108200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Vimeo",
                "service_url": "https://vimeo.com/",
                "title": "Light Table - The future is specific",
                "title_link": "https://vimeo.com/42595773",
                "author_name": "Chris Granger",
                "author_link": "https://vimeo.com/user11261775",
                "thumb_url": "https://i.vimeocdn.com/video/295561911_295x166.jpg",
                "thumb_width": 295,
                "thumb_height": 166,
                "text": "The second demo for Light Table, read more here: ",
                "fallback": "Vimeo Video: Light Table - The future is specific",
                "video_html": "<iframe src=\"https://player.vimeo.com/video/42595773?autoplay=1&amp;app_id=122963\" width=\"400\" height=\"225\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen title=\"Light Table - The future is specific\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://vimeo.com/42595773",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/vimeo.png",
                "id": 1,
                "original_url": "https://vimeo.com/42595773"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WLf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In case the video embed doesn\u2019t work, here\u2019s the video: "
                            },
                            {
                                "type": "link",
                                "url": "https://vimeo.com/42595773"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599590101.104700",
        "parent_user_id": "USH01JEDQ"
    },
    {
        "client_msg_id": "64ace320-73b9-422b-a4d8-9d7929421fcd",
        "type": "message",
        "text": "This feels like the same family as loglo which is a stack based spreadsheet programming env\n\n<https://loglo.app/2020-06-16/|https://loglo.app/2020-06-16/>",
        "user": "U019CPED6T1",
        "ts": "1599594230.108500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eq3/S",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This feels like the same family as loglo which is a stack based spreadsheet programming env\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://loglo.app/2020-06-16/",
                                "text": "https://loglo.app/2020-06-16/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599592790.107800",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "791AAC8E-6290-43CD-80EC-7C482964B610",
        "type": "message",
        "text": "talk starts at 1:20:00 if you want more context",
        "user": "UHWC9PXBL",
        "ts": "1599594336.109100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D9I3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "talk starts at 1:20:00 if you want more context"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599590101.104700",
        "parent_user_id": "USH01JEDQ"
    },
    {
        "client_msg_id": "FACC51A0-DA0B-4100-885E-3DE8D0F13F08",
        "type": "message",
        "text": "definitely the same family with a wildly different interface",
        "user": "UHWC9PXBL",
        "ts": "1599594460.109800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qq5mn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "definitely the same family with a wildly different interface"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599592790.107800",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U019CPED6T1"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "47cd0c3a-b779-4d0c-b1ee-1500ebaf0805",
        "type": "message",
        "text": "This looks like any implementation of time-travel debugging?",
        "user": "UCUSW7WVD",
        "ts": "1599596122.110100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EuF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This looks like any implementation of time-travel debugging?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599592790.107800",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "6E99E6A0-BAF1-4196-8C57-CD9535BA6567",
        "type": "message",
        "text": "it\u2019s the coding interface, not the debugging interface",
        "user": "UHWC9PXBL",
        "ts": "1599597190.110700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8aCY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it\u2019s the coding interface, not the debugging interface"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599592790.107800",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "7B09A828-BDB7-4C2F-BD08-85546FB32AF0",
        "type": "message",
        "text": "like. direct manipulation of source tokens, and definition of new functions is done by selecting the tokens that you\u2019d like to be the definition and then giving a name",
        "user": "UHWC9PXBL",
        "ts": "1599597246.112000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jDO+8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "like. direct manipulation of source tokens, and definition of new functions is done by selecting the tokens that you\u2019d like to be the definition and then giving a name"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599592790.107800",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "E78C90B2-AA0E-42C5-9851-F2CC6A46808F",
        "type": "message",
        "text": "there\u2019s live feedback throughout ",
        "user": "UHWC9PXBL",
        "ts": "1599597260.112500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jvLd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "there\u2019s live feedback throughout "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599592790.107800",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "6f2f7765-1734-4eaa-840f-77b9296b1f65",
        "type": "message",
        "text": "Sorry, my question was just about the first of the two features that you pointed out.",
        "user": "UCUSW7WVD",
        "ts": "1599600619.113300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JKzOb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sorry, my question was just about the first of the two features that you pointed out."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599592790.107800",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "1963D72C-6375-446C-8D76-450DAA7619D1",
        "type": "message",
        "text": "oh\u2014i guess time-travel debuggers let you \u201cstep through\u201d code and place your cursor at it, but i\u2019d say that this is different because the emphasis is on like... editing that timestream directly ",
        "user": "UHWC9PXBL",
        "ts": "1599601611.115500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xX4s6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "oh\u2014i guess time-travel debuggers let you \u201cstep through\u201d code and place your cursor at it, but i\u2019d say that this is different because the emphasis is on like... editing that timestream directly "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599592790.107800",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]