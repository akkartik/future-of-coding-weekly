[
    {
        "client_msg_id": "4BF8D108-4994-4358-A356-D80AE45100D7",
        "type": "message",
        "text": "<https://futureofcoding.slack.com/archives/C5T9GPWFL/p1597811295101400|https://futureofcoding.slack.com/archives/C5T9GPWFL/p1597811295101400>",
        "user": "UCGAK10LS",
        "ts": "1600036827.387400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1597811295101400",
                "fallback": "[August 18th, 2020 9:28 PM] nmsmith65: I'm slowly convincing myself that the future of programming includes *verbalizability* (and thus, natural language).\n\nThe *ubiquity* and *utility* of natural language is well known: almost all of the information we read, write/type, speak and hear every day is communicated via a natural language, not a specially-crafted one. Natural language is our primary means of understanding the world and interacting with other humans, especially in the absence of supplementary tools such as pen-and-paper (e.g. in face-to-face conversation). When was the last time you described a cause-and-effect phenomenon (a story, event, or task instructions) to someone without extensive use of natural language? At best, we use other artifacts (diagrams, formal models) as aids.\n\nDespite the ubiquity and utility of natural language, if one person tries to \"speak\" a Java/C/JS/Rust program to another person, they have to go through an extremely complicated and lossy translation process from *code* to *words*. Based on some of my recent design work (not shared yet), I'm beginning to believe we could actually design programming languages whose \"source code\" consists *solely* of *terse* natural language sentences/structures with *very specific* syntax restrictions (to deny multiple interpretations / ambiguities). The language would not be accompanied by any supplementary symbols (!@#$%^&amp;]/-&gt;) with domain-specific meaning, since those would inhibit verbalization. Writing code in this language still requires careful deliberation (to develop the logic), but _reading_ and _discussing_ code with full verbalization becomes trivial: no translation is required at all!\n\nYes, I'm not the first person to think about putting natural language in PLs. Someone might bring up COBOL, HyperTalk, SQL, or similar. I'm not saying verbalizability is \"the solution\" to programming alone, but along with a well-crafted semantics (information model etc.), it could lead to something extraordinary.\n\nIf anyone wants to think further about this, Felienne Hermans <https://youtu.be/CgR5mSAGxtA?t=2663|discusses verbalization/vocalization of PLs as part of a larger talk> (video is timestamped to that bit). Quote: \"how does code sound?\"\n\nI searched this Slack's <http://history.futureofcoding.org/|archives>, and I was surprised to discover the word \"verbalization\" has never been used.",
                "ts": "1597811295.101400",
                "author_id": "UCGAK10LS",
                "author_subname": "Nick Smith",
                "channel_id": "C5T9GPWFL",
                "channel_name": "thinking-together",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "I'm slowly convincing myself that the future of programming includes *verbalizability* (and thus, natural language).\n\nThe *ubiquity* and *utility* of natural language is well known: almost all of the information we read, write/type, speak and hear every day is communicated via a natural language, not a specially-crafted one. Natural language is our primary means of understanding the world and interacting with other humans, especially in the absence of supplementary tools such as pen-and-paper (e.g. in face-to-face conversation). When was the last time you described a cause-and-effect phenomenon (a story, event, or task instructions) to someone without extensive use of natural language? At best, we use other artifacts (diagrams, formal models) as aids.\n\nDespite the ubiquity and utility of natural language, if one person tries to \"speak\" a Java/C/JS/Rust program to another person, they have to go through an extremely complicated and lossy translation process from *code* to *words*. Based on some of my recent design work (not shared yet), I'm beginning to believe we could actually design programming languages whose \"source code\" consists *solely* of *terse* natural language sentences/structures with *very specific* syntax restrictions (to deny multiple interpretations / ambiguities). The language would not be accompanied by any supplementary symbols (!@#$%^&amp;]/-&gt;) with domain-specific meaning, since those would inhibit verbalization. Writing code in this language still requires careful deliberation (to develop the logic), but _reading_ and _discussing_ code with full verbalization becomes trivial: no translation is required at all!\n\nYes, I'm not the first person to think about putting natural language in PLs. Someone might bring up COBOL, HyperTalk, SQL, or similar. I'm not saying verbalizability is \"the solution\" to programming alone, but along with a well-crafted semantics (information model etc.), it could lead to something extraordinary.\n\nIf anyone wants to think further about this, Felienne Hermans <https://youtu.be/CgR5mSAGxtA?t=2663|discusses verbalization/vocalization of PLs as part of a larger talk> (video is timestamped to that bit). Quote: \"how does code sound?\"\n\nI searched this Slack's <http://history.futureofcoding.org/|archives>, and I was surprised to discover the word \"verbalization\" has never been used.",
                "author_name": "Nick Smith",
                "author_link": "https://futureofcoding.slack.com/team/UCGAK10LS",
                "author_icon": "https://avatars.slack-edge.com/2020-04-17/1092364753072_770c193fd379ebbced3f_48.jpg",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1597811295101400",
                "footer": "Thread in #thinking-together"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Lxo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1597811295101400",
                                "text": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1597811295101400"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599962216.338400",
        "parent_user_id": "UJNJQD2AC"
    },
    {
        "client_msg_id": "e64901aa-4549-4a8e-a9a0-4a75cf5df18e",
        "type": "message",
        "text": "A \"general\" channel with a sense of \"start conversations to be continued in threads.\"",
        "user": "UA14TGLTC",
        "ts": "1600059245.388100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fTE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A \"general\" channel with a sense of \"start conversations to be continued in threads.\""
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1600031168.386700",
        "parent_user_id": "U01ASF5K29J",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UKP3B2J5D"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "5cd6bcd9-c030-4302-98df-4194b2ceef9e",
        "type": "message",
        "text": "To learn more about the purpose of each channel, please see our <https://futureofcoding.org/member-handbook|Member Handbook> (...work-in-progress, I'm-finishing-it-in-the-cracks-of-my-spare-time-wah).",
        "user": "UC2A2ARPT",
        "ts": "1600093272.388600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QAd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To learn more about the purpose of each channel, please see our "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.org/member-handbook",
                                "text": "Member Handbook"
                            },
                            {
                                "type": "text",
                                "text": " (...work-in-progress, I'm-finishing-it-in-the-cracks-of-my-spare-time-wah)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1600031168.386700",
        "parent_user_id": "U01ASF5K29J"
    },
    {
        "client_msg_id": "a8d4562b-fb47-45af-a4f2-6336c5c02689",
        "type": "message",
        "text": "Ah, thanks all",
        "user": "U01ASF5K29J",
        "ts": "1600094539.389000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mujG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, thanks all"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1600031168.386700",
        "parent_user_id": "U01ASF5K29J"
    },
    {
        "client_msg_id": "b08170f8-3f71-4b7b-827c-11114047172e",
        "type": "message",
        "text": "<@U5STGTB3J>\n&gt; Then read this whole blog in chronological order (it\u2019s not as much content as it seems): <https://chomskyalexander.blogspot.com/?m=1>\nI went through all of the blogposts and it was pretty intriguing to see him combine Chomsky\u2019s and Christopher Alexander\u2019s work. I have only read Notes on the Synthesis of Form by him and the bibliography of it have sent me inquiring in a lot of directions. I would love to read up APL and NoC sometime.\n\nI loved the idea of how he thought of unfolding as in a morphogenesis of a biological organism can be brought into computer programming. This would be a really fertile area and I want to check out what he has done on <https://www.corememory.org/> I already love the diagramming he has done for it. Pretty intriguing stuff. I will dig into these a bit more and report back. Thanks for the share!",
        "user": "UDKTZSD6H",
        "ts": "1600118053.389200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UDKTZSD6H",
            "ts": "1600180106.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zNhd4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Then read this whole blog in chronological order (it\u2019s not as much content as it seems): "
                            },
                            {
                                "type": "link",
                                "url": "https://chomskyalexander.blogspot.com/?m=1"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I went through all of the blogposts and it was pretty intriguing to see him combine Chomsky\u2019s and Christopher Alexander\u2019s work. I have only read Notes on the Synthesis of Form by him and the bibliography of it have sent me inquiring in a lot of directions. I would love to read up APL and NoC sometime.\n\nI loved the idea of how he thought of unfolding as in a morphogenesis of a biological organism can be brought into computer programming. This would be a really fertile area and I want to check out what he has done on "
                            },
                            {
                                "type": "link",
                                "url": "https://www.corememory.org/"
                            },
                            {
                                "type": "text",
                                "text": " I already love the diagramming he has done for it. Pretty intriguing stuff. I will dig into these a bit more and report back. Thanks for the share!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599906350.292600",
        "parent_user_id": "UDKTZSD6H"
    },
    {
        "client_msg_id": "33d0c240-982b-4cda-bc02-81b03332e23f",
        "type": "message",
        "text": "<@UHWC9PXBL> Out of the ones listed there I am unfamiliar of:\n\u2022 kernel/vau/f-expressions: No idea what these are.\n\u2022 programming should eat itself (Is this the work by Nada Amin?)\nBeen out of touch with Clojure community for a while. Would love to know where these things are headed:\n\u2022 the work going on at red planet labs\n\u2022 meander, another clojure library\n\u2022  stuff rich hickey has started saying about functions having some knowledge about what they require to work properly (instead of specifying requirements on data structures directly)\n\u2022 towers of interpreters: Is this related to Nada Amin\u2019s work on the color languages? Black, Pink, Purple et al.?\n\u2022 f-algebras: Would love to know how F-Algebras fit into this scheme. I have been looking at initial and final algebras, though they seem squarely situated in the algebraic tradition of semantics now. Is there a more accessible work done for programmers here?\n\u2022 recursion schemes: Would love to know more about this one\n\u2022 defunctionalization and refunctionalization: I am familiar of work done on this by James Koppel. Would you know of other good resources?\n",
        "user": "UDKTZSD6H",
        "ts": "1600118540.395300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GuI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " Out of the ones listed there I am unfamiliar of:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "kernel/vau/f-expressions: No idea what these are."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "programming should eat itself (Is this the work by Nada Amin?)"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Been out of touch with Clojure community for a while. Would love to know where these things are headed:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the work going on at red planet labs"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "meander, another clojure library"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": " stuff rich hickey has started saying about functions having some knowledge about what they require to work properly (instead of specifying requirements on data structures directly)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "towers of interpreters: Is this related to Nada Amin\u2019s work on the color languages? Black, Pink, Purple et al.?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "f-algebras: Would love to know how F-Algebras fit into this scheme. I have been looking at initial and final algebras, though they seem squarely situated in the algebraic tradition of semantics now. Is there a more accessible work done for programmers here?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "recursion schemes: Would love to know more about this one"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "defunctionalization and refunctionalization: I am familiar of work done on this by James Koppel. Would you know of other good resources?"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ],
        "thread_ts": "1599906350.292600",
        "parent_user_id": "UDKTZSD6H"
    },
    {
        "client_msg_id": "3B6D996E-B87F-4798-A37C-8C3435AFA5D7",
        "type": "message",
        "text": "Tip: skip APL and read _A Timeless Way of Building_ instead, before moving on to _Nature of Order_. APL is actually not that relevant. ATWoB explains the idea behind pattern languages much better and is more of a philosophy book. Some more thoughts here: <https://twitter.com/stefanlesser/status/1298305359824789509?s=21|https://twitter.com/stefanlesser/status/1298305359824789509?s=21>\n\n(I\u2019ve been reading on, almost done with it, but stopped tweeting about it.)",
        "user": "U5STGTB3J",
        "ts": "1600118574.396000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/stefanlesser|@stefanlesser>: Coincidentally, I was just skimming through somebody else\u2019s bookshelf and found this. I guess I\u2019ll take that as a sign and will finally read it. A good opportunity to try this \u201cbook reading live tweets\u201d thing. <https://pbs.twimg.com/media/EgSB1NwX0AAhAyN.jpg>",
                "ts": 1598375093,
                "author_name": "Stefan Lesser",
                "author_link": "https://twitter.com/stefanlesser/status/1298305359824789509",
                "author_icon": "https://pbs.twimg.com/profile_images/378800000350383902/ea834338bc94043c1d14c94538e39eda_normal.jpeg",
                "author_subname": "@stefanlesser",
                "text": "Coincidentally, I was just skimming through somebody else\u2019s bookshelf and found this. I guess I\u2019ll take that as a sign and will finally read it. A good opportunity to try this \u201cbook reading live tweets\u201d thing. <https://pbs.twimg.com/media/EgSB1NwX0AAhAyN.jpg>",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/stefanlesser/status/1298305359824789509?s=21",
                "image_url": "https://pbs.twimg.com/media/EgSB1NwX0AAhAyN.jpg",
                "image_width": 1200,
                "image_height": 1200,
                "image_bytes": 349689,
                "id": 1,
                "original_url": "https://twitter.com/stefanlesser/status/1298305359824789509?s=21",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QL8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tip: skip APL and read "
                            },
                            {
                                "type": "text",
                                "text": "A Timeless Way of Building",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " instead, before moving on to "
                            },
                            {
                                "type": "text",
                                "text": "Nature of Order",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". APL is actually not that relevant. ATWoB explains the idea behind pattern languages much better and is more of a philosophy book. Some more thoughts here: "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/stefanlesser/status/1298305359824789509?s=21",
                                "text": "https://twitter.com/stefanlesser/status/1298305359824789509?s=21"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "(I\u2019ve been reading on, almost done with it, but stopped tweeting about it.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599906350.292600",
        "parent_user_id": "UDKTZSD6H",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UDKTZSD6H",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "26f5f6c5-d2a2-47fa-b9df-2f4f50825ff3",
        "type": "message",
        "text": "<@U5STGTB3J>\n&gt; Here\u2019s something I\u2019ve been looking into for a while that I didn\u2019t see you mention specifically: the connection between\n&gt; (embedded) domain specific languages\n&gt; parser combinators\n&gt; abstract algebra\n&gt; transducers (you kind of mention that with generators/iterators, I think)\n&gt; transformation passes (towers of interpreters?)\nI will definitely go through these and attempt to catalogue them on the page. I have renamed it to morphisms of computational structures to capture more of these morphisms. I think it would also help me bring in work like that of Hoare/Milner and talk about them if I go a bit more general than control constructs.\n&gt; \n&gt; They all involve (or at least can facilitate) transformations from a sequential to hierarchical structure. \n&gt; They\n&gt;  all represent a set of well-defined composable entities that together \n&gt; form something like a grammar (some more directly than others). \n&gt; They\n&gt;  all in a sense resemble words of a language, which can be combined to \n&gt; describe a lower level thing in more detail (-&gt; Alexander\u2019s Pattern \n&gt; Language). \n&gt; They all enable and/or are based on a fundamentally \n&gt; recursive pattern which allows them to be used on various levels of \n&gt; abstraction at the same time; they\u2019re something like an abstraction of \n&gt; an abstraction, if that makes sense?",
        "user": "UDKTZSD6H",
        "ts": "1600119732.398400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UDKTZSD6H",
            "ts": "1600119794.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DvZlW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here\u2019s something I\u2019ve been looking into for a while that I didn\u2019t see you mention specifically: the connection between\n(embedded) domain specific languages\nparser combinators\nabstract algebra\ntransducers (you kind of mention that with generators/iterators, I think)\ntransformation passes (towers of interpreters?)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI will definitely go through these and attempt to catalogue them on the page. I have renamed it to morphisms of computational structures to capture more of these morphisms. I think it would also help me bring in work like that of Hoare/Milner and talk about them if I go a bit more general than control constructs.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThey all involve (or at least can facilitate) transformations from a sequential to hierarchical structure. \nThey\n all represent a set of well-defined composable entities that together \nform something like a grammar (some more directly than others). \nThey\n all in a sense resemble words of a language, which can be combined to \ndescribe a lower level thing in more detail (-> Alexander\u2019s Pattern \nLanguage). \nThey all enable and/or are based on a fundamentally \nrecursive pattern which allows them to be used on various levels of \nabstraction at the same time; they\u2019re something like an abstraction of \nan abstraction, if that makes sense?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599906350.292600",
        "parent_user_id": "UDKTZSD6H"
    },
    {
        "client_msg_id": "26f5f6c5-d2a2-47fa-b9df-2f4f50825ff3",
        "type": "message",
        "text": "You are pretty much resonant with the intuitions that I have had on it. May I invite your attention to 3 resources which I think are aligned with these descriptions?\n\n1/ Universal Algebra is the study of these algebraic structures in a general setting. There\u2019s a really rigorous way in which a unit becomes a list becomes a tree becomes a lattice becomes a (a)cyclic graph. These incidence structures I feel form a rigorous hierarchy by the nature of properties they gain/lose (reflexivity, symmetry, transitivity). This alternating (ir)regularity I think continue in other structures like magma, monoid, (quasi/semi)groups, rings, fields. All these take in operators as their signatures and spawn hierarchical (and heterarchical) structures which then gets projected/lifted for various computational purposes. What I find to be severely missing in this field is a visualization of how these abstract algebra structures really look like and this is one of the central things that I\u2019m working towards.\n\n2/ The ideas I summed up above leads us to topology being a general setting in which these ideas can be given form. I came across this crazy good blogpost a while ago, that extends Harper\u2019s computational trinitarianism to quadritarianism and beyond: <http://comonad.com/reader/2018/computational-quadrinitarianism-curious-correspondences-go-cubical/>\n\nIn essence, its a summary of the mathematical correspondences that have been getting unearthed with regards to computational structures. I think the author should turn that into a book with some amazing diagrams and it would really change the game of how programming world sees its connection with algebra/higher mathematics.\n\n3/ Your idea of abstractions of abstractions and recursion as the fundamental idea and tying it up with Chomksy is pretty striking. I\u2019m out of my depth to exactly point out how, but each level in Chomsky hierarchy I think is realized by reflexive recursion that gives it more degrees of freedom to explore distinct structures. This was my first jibe at it: <https://twitter.com/prathyvsh/status/1304667510101295105>\n\nBut there\u2019s also this aspect of mirroring / symmetry that comes out which ties it up with graphs and abstract algebra. This is one place I want to develop my intuitions and Ershov Hierarchy / Turing Jumps are a key part of the puzzle: <https://en.wikipedia.org/wiki/Turing_jump> This is one place where I think recursion on recursion is grounded in a mathematical setting on arithmetic hierarchy. It also ties it up to complexity studies. I would also like to add something about Kant\u2019s philosophy with respect to all of this, but suffice to say that his philosophy helped influence the development of topology and category theory.\n\nYeah, so bottomline is, if we develop sufficient rune reading powers into mathematics at the moment, I think there\u2019s a tonne of wealth of knowledge hiding behind all of these. But there\u2019s also another way to realize these if we start with good fundamentals, explore and reflect. Because all that is being studied there will reflect as problems/leverage points in our own systems of making. Which is why I love and look forward to see how some of the people solve problems here.",
        "user": "UDKTZSD6H",
        "ts": "1600119732.398600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UDKTZSD6H",
            "ts": "1600120053.000000"
        },
        "attachments": [
            {
                "fallback": "<https://twitter.com/prathyvsh|@prathyvsh>: A way to think about Chomsky Hierarchy:\n\nType 3: Regular \u2014 You play by a set of rules\nType 2: Context Free \u2014 You play by the same set of rules in contexts you choose\nType 1: Context Sensitive \u2014 You choose the rules and contexts by inferring from how you played so far.",
                "ts": 1599891948,
                "author_name": "Prathyush",
                "author_link": "https://twitter.com/prathyvsh/status/1304667510101295105",
                "author_icon": "https://pbs.twimg.com/profile_images/1157092207075061760/v_xB---l_normal.jpg",
                "author_subname": "@prathyvsh",
                "text": "A way to think about Chomsky Hierarchy:\n\nType 3: Regular \u2014 You play by a set of rules\nType 2: Context Free \u2014 You play by the same set of rules in contexts you choose\nType 1: Context Sensitive \u2014 You choose the rules and contexts by inferring from how you played so far.",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/prathyvsh/status/1304667510101295105",
                "id": 1,
                "original_url": "https://twitter.com/prathyvsh/status/1304667510101295105",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Uz5oe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You are pretty much resonant with the intuitions that I have had on it. May I invite your attention to 3 resources which I think are aligned with these descriptions?\n\n1/ Universal Algebra is the study of these algebraic structures in a general setting. There\u2019s a really rigorous way in which a unit becomes a list becomes a tree becomes a lattice becomes a (a)cyclic graph. These incidence structures I feel form a rigorous hierarchy by the nature of properties they gain/lose (reflexivity, symmetry, transitivity). This alternating (ir)regularity I think continue in other structures like magma, monoid, (quasi/semi)groups, rings, fields. All these take in operators as their signatures and spawn hierarchical (and heterarchical) structures which then gets projected/lifted for various computational purposes. What I find to be severely missing in this field is a visualization of how these abstract algebra structures really look like and this is one of the central things that I\u2019m working towards.\n\n2/ The ideas I summed up above leads us to topology being a general setting in which these ideas can be given form. I came across this crazy good blogpost a while ago, that extends Harper\u2019s computational trinitarianism to quadritarianism and beyond: "
                            },
                            {
                                "type": "link",
                                "url": "http://comonad.com/reader/2018/computational-quadrinitarianism-curious-correspondences-go-cubical/"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIn essence, its a summary of the mathematical correspondences that have been getting unearthed with regards to computational structures. I think the author should turn that into a book with some amazing diagrams and it would really change the game of how programming world sees its connection with algebra/higher mathematics.\n\n3/ Your idea of abstractions of abstractions and recursion as the fundamental idea and tying it up with Chomksy is pretty striking. I\u2019m out of my depth to exactly point out how, but each level in Chomsky hierarchy I think is realized by reflexive recursion that gives it more degrees of freedom to explore distinct structures. This was my first jibe at it: "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/prathyvsh/status/1304667510101295105"
                            },
                            {
                                "type": "text",
                                "text": "\n\nBut there\u2019s also this aspect of mirroring / symmetry that comes out which ties it up with graphs and abstract algebra. This is one place I want to develop my intuitions and Ershov Hierarchy / Turing Jumps are a key part of the puzzle: "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Turing_jump"
                            },
                            {
                                "type": "text",
                                "text": " This is one place where I think recursion on recursion is grounded in a mathematical setting on arithmetic hierarchy. It also ties it up to complexity studies. I would also like to add something about Kant\u2019s philosophy with respect to all of this, but suffice to say that his philosophy helped influence the development of topology and category theory.\n\nYeah, so bottomline is, if we develop sufficient rune reading powers into mathematics at the moment, I think there\u2019s a tonne of wealth of knowledge hiding behind all of these. But there\u2019s also another way to realize these if we start with good fundamentals, explore and reflect. Because all that is being studied there will reflect as problems/leverage points in our own systems of making. Which is why I love and look forward to see how some of the people solve problems here."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599906350.292600",
        "parent_user_id": "UDKTZSD6H",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U5STGTB3J",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    }
]