[
    {
        "client_msg_id": "7f831f2d-7760-4740-bb54-fcaa4671e31f",
        "type": "message",
        "text": "I independently had some related thoughts about REPLs. I'm using this opportunity to rant. Maybe this should go under that original thread on REPL's, or maybe it's own post, but I'll post it here to start. Apologies in advance :stuck_out_tongue: .\n\nFor some context, I am not a \"lisp person.\" That's not to say I dislike lisp. I greatly admire lisp....from afar. But, my career and personal interests always end up taking me in a different direction, but I digress...\n\nMy day job consists of optimized C++ and Python infrastructure used in the banking industry. It's very \"traditional\" in many ways. Recently, I \"jury-rigged\" a series of exploratory \"REPL like\" programs to test various subsystems. These \"REPLs\" can be infuriating to set up. No part of the environment is optimized for that kind of workflow.\n\nBut I have found that once set up, I was able to be enormously more productive and confident in my code. Compared to any lisp REPL, or even a python REPL, these programs are stone age primitive. Still, this made me want to explore expanding it to more parts of the system, but further I looked, the more difficult it is to setup. I have to make a cost/benefit trade-off against \"getting real work done,\" and unfortunately, I often have to choose to stick with the status quo.\n\nBefore I shifted into lower level systems programming, I spent years doing to Javascript and PHP. I burned out on web programming, but this experience made me realize that one thing I miss is the exploratory coding and rapid feedback experience.\n\nAnd that leads me to the crux of my lament. Why can't I have a systems level programming environment that allows for this kind of rapid feedback?\n\nObviously there are limits the closer you get to the hardware, but even then, Forth has been used in embedded for decades (with a REPL), and people have put a Python REPL on an ESP8266, so I know it's possible to go fairly far with this idea...\n\nAgain, I am not a lisp evangelical, In fact, I generally prefer static types and fine grained control over my memory management. I'm also not saying REPLs are a panacea. I'm a practical person. It's frustrating for me to see the potential for a particular tool, and yet, to be unable to use it. /rant",
        "user": "U01661S9F34",
        "ts": "1601169121.028800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/Y5G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I independently had some related thoughts about REPLs. I'm using this opportunity to rant. Maybe this should go under that original thread on REPL's, or maybe it's own post, but I'll post it here to start. Apologies in advance "
                            },
                            {
                                "type": "emoji",
                                "name": "stuck_out_tongue"
                            },
                            {
                                "type": "text",
                                "text": " .\n\nFor some context, I am not a \"lisp person.\" That's not to say I dislike lisp. I greatly admire lisp....from afar. But, my career and personal interests always end up taking me in a different direction, but I digress...\n\nMy day job consists of optimized C++ and Python infrastructure used in the banking industry. It's very \"traditional\" in many ways. Recently, I \"jury-rigged\" a series of exploratory \"REPL like\" programs to test various subsystems. These \"REPLs\" can be infuriating to set up. No part of the environment is optimized for that kind of workflow.\n\nBut I have found that once set up, I was able to be enormously more productive and confident in my code. Compared to any lisp REPL, or even a python REPL, these programs are stone age primitive. Still, this made me want to explore expanding it to more parts of the system, but further I looked, the more difficult it is to setup. I have to make a cost/benefit trade-off against \"getting real work done,\" and unfortunately, I often have to choose to stick with the status quo.\n\nBefore I shifted into lower level systems programming, I spent years doing to Javascript and PHP. I burned out on web programming, but this experience made me realize that one thing I miss is the exploratory coding and rapid feedback experience.\n\nAnd that leads me to the crux of my lament. Why can't I have a systems level programming environment that allows for this kind of rapid feedback?\n\nObviously there are limits the closer you get to the hardware, but even then, Forth has been used in embedded for decades (with a REPL), and people have put a Python REPL on an ESP8266, so I know it's possible to go fairly far with this idea...\n\nAgain, I am not a lisp evangelical, In fact, I generally prefer static types and fine grained control over my memory management. I'm also not saying REPLs are a panacea. I'm a practical person. It's frustrating for me to see the potential for a particular tool, and yet, to be unable to use it. /rant"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601061047.010400",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "c812b53c-7945-49bc-8964-a7e3ddb63e8f",
        "type": "message",
        "text": "There is also <https://www.zettlr.com/>\nHaven't tried it (and won't) but it's sitting in my bookmarks for a while.",
        "user": "UPX3PH28N",
        "ts": "1601185570.029200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Zettlr",
                "title": "A Markdown Editor for the 21st Century - Zettlr",
                "title_link": "https://www.zettlr.com/",
                "text": "A powerful Markdown editor for researchers and journalists.",
                "fallback": "Zettlr: A Markdown Editor for the 21st Century - Zettlr",
                "thumb_url": "https://zettlr.com/storage/app/media/img/social_media_img.png",
                "from_url": "https://www.zettlr.com/",
                "thumb_width": 1920,
                "thumb_height": 1080,
                "service_icon": "https://www.zettlr.com/themes/zettlr/assets/img/256x256.png",
                "id": 1,
                "original_url": "https://www.zettlr.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oSpjq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There is also "
                            },
                            {
                                "type": "link",
                                "url": "https://www.zettlr.com/"
                            },
                            {
                                "type": "text",
                                "text": "\nHaven't tried it (and won't) but it's sitting in my bookmarks for a while."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601034603.006400",
        "parent_user_id": "UUQ2EQW21"
    },
    {
        "client_msg_id": "6bf97a52-4004-4132-8656-6567cbf84431",
        "type": "message",
        "text": "I'm not really following what you're suggesting. There are plenty of plugins for VS code that show a live webpage in one pane.\n\nThere are multiple reasons to use a simple webserver (which like 3 lines of code in node). If they used the files system then any 3rd party script loaded over the net would have access to their hard drive. Loading from the filesystem in a browser is just not something you should do. Further, many browser features are restricted to https only. And finally, often you want to run via some staging server because the simple case where everything can run from local files would be an exception for most actual usage.\n\nAs for bundling debugging tools into your own code, how does that have anything to do with VSC? If you want debugging tools compiled into your code you add them to your code no? For example if you want [spector.js](<https://spector.babylonjs.com/>) added to your code then you add it to your code. (yes, it's presented as an extension on that page but if you read the docs you can just as easily use it as a library in your code without having an extension)",
        "user": "UC6997THT",
        "ts": "1601188045.029500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Spector.js",
                "title": "Spector.js demos &amp; documentation",
                "title_link": "https://spector.babylonjs.com/",
                "text": "SpectorJS is an Open source toolking helping to Explore and Troubleshoot your WebGL scenes with ease.",
                "fallback": "Spector.js: Spector.js demos &amp; documentation",
                "thumb_url": "http://spector.babylonjs.com/assets/spectorjs-512.png",
                "from_url": "https://spector.babylonjs.com/",
                "thumb_width": 512,
                "thumb_height": 179,
                "service_icon": "https://spector.babylonjs.com/img/favicon/apple-icon-57x57.png",
                "id": 1,
                "original_url": "https://spector.babylonjs.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zuG1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not really following what you're suggesting. There are plenty of plugins for VS code that show a live webpage in one pane.\n\nThere are multiple reasons to use a simple webserver (which like 3 lines of code in node). If they used the files system then any 3rd party script loaded over the net would have access to their hard drive. Loading from the filesystem in a browser is just not something you should do. Further, many browser features are restricted to https only. And finally, often you want to run via some staging server because the simple case where everything can run from local files would be an exception for most actual usage.\n\nAs for bundling debugging tools into your own code, how does that have anything to do with VSC? If you want debugging tools compiled into your code you add them to your code no? For example if you want [spector.js]("
                            },
                            {
                                "type": "link",
                                "url": "https://spector.babylonjs.com/"
                            },
                            {
                                "type": "text",
                                "text": ") added to your code then you add it to your code. (yes, it's presented as an extension on that page but if you read the docs you can just as easily use it as a library in your code without having an extension)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1600866849.001600",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "f0b98816-d3f7-403c-866f-d5e343b21847",
        "type": "message",
        "text": "Saw this today. Not sure it's \"future\" of coding but I was still impressed.\n\n<https://wallabyjs.com/>",
        "user": "UC6997THT",
        "ts": "1601188256.030300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Wallaby - Immediate JavaScript test feedback in your IDE as-you-type",
                "title_link": "https://wallabyjs.com/",
                "text": "Wallaby runs your JavaScript and TypeScript tests immediately as you type in VS Code, WebStorm and other editors, highlighting results next to your code.",
                "fallback": "Wallaby - Immediate JavaScript test feedback in your IDE as-you-type",
                "from_url": "https://wallabyjs.com/",
                "service_icon": "https://wallabyjs.com/assets/img/favicon.ico?v=2",
                "service_name": "wallabyjs.com",
                "id": 1,
                "original_url": "https://wallabyjs.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "73J=F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Saw this today. Not sure it's \"future\" of coding but I was still impressed.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://wallabyjs.com/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601188256.030300",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1601201013.032000",
        "reply_users": [
            "UDQBTJ211"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UDQBTJ211"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3ec946b8-9794-4127-9caa-f2309c43e647",
        "type": "message",
        "text": "&gt; There are plenty of plugins for VS code that show a live webpage in one pane.\nNot sure what you're talking about here? I'd love to see examples? I only know of one (<https://marketplace.visualstudio.com/items?itemName=auchenberg.vscode-browser-preview>), and it uses Chrome's video sharing API to stream PNG images and that's why it has the performance issues documented here (<https://github.com/auchenberg/vscode-browser-preview/issues/21>).\n\n&gt; If they used the files system then any 3rd party script loaded over the net would have access to their hard drive. Loading from the filesystem in a browser is just not something you should do.\nThis is a restriction that's there because consumers are mainly accessing arbitrary (and potentially dangerous) websites over the internet, whereas the integrated browser would mainly be used to access local web development projects, which have a different risk profile. (Plus I'm not saying that the websites you access should have access to the file system, I'm saying that the developer tools should.)\n\n&gt; As for bundling debugging tools into your own code, how does that have anything to do with VSC?\nWhen I said bundled with the source code, what I meant was, right now the Chrome DevTools (<https://developers.google.com/web/tools/chrome-devtools/>) are in the browser, which doesn't have access to your source files. I'm saying these tools could be more useful if there were in the IDE instead.",
        "user": "UE0ETTCG7",
        "ts": "1601198890.030600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE0ETTCG7",
            "ts": "1601199016.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9bf",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are plenty of plugins for VS code that show a live webpage in one pane."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure what you're talking about here? I'd love to see examples? I only know of one ("
                            },
                            {
                                "type": "link",
                                "url": "https://marketplace.visualstudio.com/items?itemName=auchenberg.vscode-browser-preview"
                            },
                            {
                                "type": "text",
                                "text": "), and it uses Chrome's video sharing API to stream PNG images and that's why it has the performance issues documented here ("
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/auchenberg/vscode-browser-preview/issues/21"
                            },
                            {
                                "type": "text",
                                "text": ").\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If they used the files system then any 3rd party script loaded over the net would have access to their hard drive. Loading from the filesystem in a browser is just not something you should do."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is a restriction that's there because consumers are mainly accessing arbitrary (and potentially dangerous) websites over the internet, whereas the integrated browser would mainly be used to access local web development projects, which have a different risk profile. (Plus I'm not saying that the websites you access should have access to the file system, I'm saying that the developer tools should.)\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As for bundling debugging tools into your own code, how does that have anything to do with VSC?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When I said bundled with the source code, what I meant was, right now the Chrome DevTools ("
                            },
                            {
                                "type": "link",
                                "url": "https://developers.google.com/web/tools/chrome-devtools/"
                            },
                            {
                                "type": "text",
                                "text": ") are in the browser, which doesn't have access to your source files. I'm saying these tools could be more useful if there were in the IDE instead."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1600866849.001600",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "16fa18ef-6f1e-4c3b-a3b4-2a853adb0b35",
        "type": "message",
        "text": "(The easiest way to explain what I'm saying is that I think the browser developer tools should be an IDE feature, not a browser feature. The whole sandboxing question is a bit of red herring because integrated browsers are everywhere--just not in VS Code itself. The sandbox is only really relevant because since today the DevTools are a browser feature, the DevTools are subject to the browser's sandbox. Theoretically you could just not sandbox the dev tools, but that doesn't give enough value to be worth it alone.)",
        "user": "UE0ETTCG7",
        "ts": "1601199683.031500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b+hcu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(The easiest way to explain what I'm saying is that I think the browser developer tools should be an IDE feature, not a browser feature. The whole sandboxing question is a bit of red herring because integrated browsers are everywhere--just not in VS Code itself. The sandbox is only really relevant because since today the DevTools are a browser feature, the DevTools are subject to the browser's sandbox. Theoretically you could just not sandbox the dev tools, but that doesn't give enough value to be worth it alone.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1600866849.001600",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "7b1c6f5c-904c-42ea-a5fa-0bd63cf1949b",
        "type": "message",
        "text": "(I tend to talk about the browser sandbox because I think applying the risk profile of a consumer browser, used to browser arbitrary websites online, to a developer browser used to browse primarily local development projects is silly. But, strictly speaking, almost all of the most important browser developer tool features I'd like to see could be done without any sandbox changes, not even to the dev tools themselves.)",
        "user": "UE0ETTCG7",
        "ts": "1601200494.031700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "X7sn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(I tend to talk about the browser sandbox because I think applying the risk profile of a consumer browser, used to browser arbitrary websites online, to a developer browser used to browse primarily local development projects is silly. But, strictly speaking, almost all of the most important browser developer tool features I'd like to see could be done without any sandbox changes, not even to the dev tools themselves.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1600866849.001600",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "aae0525d-1b8f-44b2-9603-a2a9ecc2c502",
        "type": "message",
        "text": "Seems to work great - reminds me of Light Table.",
        "user": "UDQBTJ211",
        "ts": "1601201013.032000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QGI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Seems to work great - reminds me of Light Table."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1601188256.030300",
        "parent_user_id": "UC6997THT"
    },
    {
        "client_msg_id": "4c569656-0178-48c4-865b-f09c46460d2d",
        "type": "message",
        "text": "Finally, just to keep the conversation on track, there are a few points about loading local files and running dev servers that are confusing to me. Like this:\n\n&gt; And finally, often you want to run via some staging server because the simple case where everything can run from local files would be an exception for most actual usage.\nI'm not sure what that's responding to, but I think the answer is source maps (<https://developers.google.com/web/tools/chrome-devtools/javascript/source-maps>) and Workspaces (<https://developers.google.com/web/tools/chrome-devtools/workspaces>). I.e., accessing local files and running a dev server are not mutually exclusive? Really I'm not talking about anything that doesn't already exist today, about half of what I want already exists, just with a atrocious UX because dev tools are essentially trying to stuff  a second IDE into the browser.",
        "user": "UE0ETTCG7",
        "ts": "1601201831.032200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE0ETTCG7",
            "ts": "1601202064.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sqG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Finally, just to keep the conversation on track, there are a few points about loading local files and running dev servers that are confusing to me. Like this:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And finally, often you want to run via some staging server because the simple case where everything can run from local files would be an exception for most actual usage."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not sure what that's responding to, but I think the answer is source maps ("
                            },
                            {
                                "type": "link",
                                "url": "https://developers.google.com/web/tools/chrome-devtools/javascript/source-maps"
                            },
                            {
                                "type": "text",
                                "text": ") and Workspaces ("
                            },
                            {
                                "type": "link",
                                "url": "https://developers.google.com/web/tools/chrome-devtools/workspaces"
                            },
                            {
                                "type": "text",
                                "text": "). I.e., accessing local files and running a dev server are not mutually exclusive? Really I'm not talking about anything that doesn't already exist today, about half of what I want already exists, just with a atrocious UX because dev tools are essentially trying to stuff  a second IDE into the browser."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1600866849.001600",
        "parent_user_id": "UE0ETTCG7"
    }
]