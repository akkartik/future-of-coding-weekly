[
    {
        "client_msg_id": "9FB88A79-4BCA-4A02-8565-757F8AC9DDB5",
        "type": "message",
        "text": "i\u2019m going to have to give this sincere focused time, but i wanted to reply before my initial reaction before i lost the references\u2014i\u2019ll come by and fill these out with hyperlinks later. i too feel like all of this programming language research is swimming in a dark cave, and in our hunting around i\u2019ve got this suspicion that there\u2019s a light switch not too far away. and that it has a lot to do with reifying the process of evaluation and letting users interact with it directly. in particular,  \n\n&gt; ...there is something fundamental about computational structures (in a topology like sense) that we are all groping at in our daily lives...\n&gt; \n&gt; I am trying to see if those things can be made first class in a visual fashion and PLT semantics looked to me like the place where I can dig in as I have some idea of PLs and a bit of logic knowledge. Also, there are a great community of people studying this deeply and communicating about it in this field. But it is filled up with waaaay too much jargon to repel most programming practitioners as the notations are dense and require an understanding of mathematics before approaching it.\n&gt; \n\nand\n\n&gt; All these things are very different disciplines but somehow I started to see strong parallels and connections which I totally believe can be expressed mathematically. And very likely we have already identified all the structures we need, we just need to make the connections explicit. Unfortunately, I often find it hard to describe and it makes total sense in my head, but then I\u2019m struggling explaining it to others.\n&gt; \nresonate really strongly with me\u2014better-worded versions of stuff i\u2019d tried to explain to other people in the past\n\nthe aforementioned references im working with off the top of my head:\n\n\u2022 call by push value\n\u2022 ohm/ometa \n\u2022 kernel/vau/f-expressions\n\u2022 partial evaluation\n\u2022 programming should eat itself\n\u2022 the work going on at red planet labs, alluded to by a few talks on the specter library for clojure\n\u2022 meander, another clojure library\n\u2022 the stuff rich hickey has started saying about functions having some knowledge about what they require to work properly (instead of specifying requirements on data structures directly)\n\u2022 towers of interpreters\n\u2022 f-algebras, recursion schemes\n\u2022 scoping and binding in the rebol programming language, APL\n\u2022 defunctionalization and refunctionalization\n\u2022 concatenative languages, because: the current continuation for them is always the state of the stack plus the rest of the tokens in the source, so you can always split a program at any point, pause it and restart it, and composition instead of application is the default action of putting two words next to each other. another way of looking at it is that every concatenative program always carries with it the context it\u2019s operating in/on. plus there\u2019s this cool video i shared before: <https://youtu.be/R3MNcA2dpts|https://youtu.be/R3MNcA2dpts>",
        "user": "UHWC9PXBL",
        "ts": "1599948595.335800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1599949099.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s7j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i\u2019m going to have to give this sincere focused time, but i wanted to reply before my initial reaction before i lost the references\u2014i\u2019ll come by and fill these out with hyperlinks later. i too feel like all of this programming language research is swimming in a dark cave, and in our hunting around i\u2019ve got this suspicion that there\u2019s a light switch not too far away. and that it has a lot to do with reifying the process of evaluation and letting users interact with it directly. in particular,  \n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "...there is something fundamental about computational structures (in a topology like sense) that we are all groping at in our daily lives...\n\nI am trying to see if those things can be made first class in a visual fashion and PLT semantics looked to me like the place where I can dig in as I have some idea of PLs and a bit of logic knowledge. Also, there are a great community of people studying this deeply and communicating about it in this field. But it is filled up with waaaay too much jargon to repel most programming practitioners as the notations are dense and require an understanding of mathematics before approaching it.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nand\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "All these things are very different disciplines but somehow I started to see strong parallels and connections which I totally believe can be expressed mathematically. And very likely we have already identified all the structures we need, we just need to make the connections explicit. Unfortunately, I often find it hard to describe and it makes total sense in my head, but then I\u2019m struggling explaining it to others.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nresonate really strongly with me\u2014better-worded versions of stuff i\u2019d tried to explain to other people in the past\n\nthe aforementioned references im working with off the top of my head:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "call by push value"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "ohm/ometa "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "kernel/vau/f-expressions"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "partial evaluation"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "programming should eat itself"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the work going on at red planet labs, alluded to by a few talks on the specter library for clojure"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "meander, another clojure library"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "the stuff rich hickey has started saying about functions having some knowledge about what they require to work properly (instead of specifying requirements on data structures directly)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "towers of interpreters"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "f-algebras, recursion schemes"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "scoping and binding in the rebol programming language, APL"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "defunctionalization and refunctionalization"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "concatenative languages, because: the current continuation for them is always the state of the stack plus the rest of the tokens in the source, so you can always split a program at any point, pause it and restart it, and composition instead of application is the default action of putting two words next to each other. another way of looking at it is that every concatenative program always carries with it the context it\u2019s operating in/on. plus there\u2019s this cool video i shared before: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://youtu.be/R3MNcA2dpts",
                                        "text": "https://youtu.be/R3MNcA2dpts"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    }
                ]
            }
        ],
        "thread_ts": "1599906350.292600",
        "parent_user_id": "UDKTZSD6H",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5STGTB3J",
                    "UDKTZSD6H"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "01ec29b8-9967-433e-bd72-5ce281bbbc87",
        "type": "message",
        "text": "What if it's important, for comprehension, that we be able to speak programming languages not just write them.",
        "user": "UJNJQD2AC",
        "ts": "1599962216.338400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJNJQD2AC",
            "ts": "1599962496.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BfD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What if it's important, for comprehension, that we be able to speak programming languages not just write them."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599962216.338400",
        "reply_count": 11,
        "reply_users_count": 6,
        "latest_reply": "1600015025.380600",
        "reply_users": [
            "UJNJQD2AC",
            "UFPPABQ7P",
            "UA14TGLTC",
            "UN57U8V53",
            "U018AQ13VF1",
            "UHWC9PXBL"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UN57U8V53"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b10f14de-b52a-46fb-bc40-7039bc418445",
        "type": "message",
        "text": "Semi relevant article <https://medium.com/@old_sound/programming-languages-are-not-languages-c6f161a78c44|https://medium.com/@old_sound/programming-languages-are-not-languages-c6f161a78c44>",
        "user": "UJNJQD2AC",
        "ts": "1599963553.338700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Medium",
                "title": "Programming Languages are not Languages",
                "title_link": "https://medium.com/@old_sound/programming-languages-are-not-languages-c6f161a78c44",
                "text": "In my previous article I talked about how the metaphors used to present a problem, set the stage for how we are going to talk about the\u2026",
                "fallback": "Medium: Programming Languages are not Languages",
                "image_url": "https://miro.medium.com/max/1200/1*8x1xzfTcE-2WfgL3iEs7bA.png",
                "fields": [
                    {
                        "title": "Reading time",
                        "value": "7 min read",
                        "short": true
                    }
                ],
                "ts": 1535908358,
                "from_url": "https://medium.com/@old_sound/programming-languages-are-not-languages-c6f161a78c44",
                "image_width": 405,
                "image_height": 250,
                "image_bytes": 1018768,
                "service_icon": "https://cdn-images-1.medium.com/fit/c/152/152/1*8I-HPL0bfoIzGied-dzOvA.png",
                "id": 1,
                "original_url": "https://medium.com/@old_sound/programming-languages-are-not-languages-c6f161a78c44"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TykDF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Semi relevant article "
                            },
                            {
                                "type": "link",
                                "url": "https://medium.com/@old_sound/programming-languages-are-not-languages-c6f161a78c44",
                                "text": "https://medium.com/@old_sound/programming-languages-are-not-languages-c6f161a78c44"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599962216.338400",
        "parent_user_id": "UJNJQD2AC"
    },
    {
        "client_msg_id": "a517689d-a258-483d-a4c3-a6683b886d30",
        "type": "message",
        "text": "Don't you also see experienced developers being more resigned to their tools? In fact, that's one way to diagnose all of us pushing back on you in this thread: we've been living with our chains so long that we've forgotten about them. That would certainly explain why we don't customize more.\n\nI had more customizations in 2001-2005, then I moved and changed a lot of stuff and just restarted my text editor settings from scratch. And they've never grown back to the sort of multi-megabyte state they were in then.\n\nBacking up to your previous comment to me (I wrote a response yesterday that the Slack app ate):\n\n&gt; I think you're misunderstanding me here, I'm specifically saying I don't always think automation is a good idea, I'm saying that it's the way I prefer to solve problems. It's an inclination that has more to do with me, than it does the problem.\nI don't understand the distinction you're making here. At least, what you're saying sounds like it answers your earlier question, \"how can doing things manually still be better than automating them in 2020?\"\n\nFunny thing is, I do a _lot_ to automate testing. In fact, one way to view my Mu project is as making the UI layer easy to test.\n\n&gt; I would love to hear more about this \"love of doing things manually\" though.\nWhen I do something manually I sleep soundly at night that I haven't created new tech debt for myself. I don't have something new I have to maintain, or try to read later to try to understand _just what_ I was thinking. Manual labor can be therapeutic, like gardening. All these things have nothing to do with the state of the underlying system. They're just about the mess _I_ make, and about taking care of my own state of mind.\n\nSometimes I do things manually for a few days even when I'm _sure_ I have to automate them eventually. Manual work keeps me close to the data and might give me some new insight. \"Being the computer\" helps me understand the problem before I try to solve it.",
        "user": "UCUSW7WVD",
        "ts": "1599968875.339300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1599968904.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qOz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Don't you also see experienced developers being more resigned to their tools? In fact, that's one way to diagnose all of us pushing back on you in this thread: we've been living with our chains so long that we've forgotten about them. That would certainly explain why we don't customize more.\n\nI had more customizations in 2001-2005, then I moved and changed a lot of stuff and just restarted my text editor settings from scratch. And they've never grown back to the sort of multi-megabyte state they were in then.\n\nBacking up to your previous comment to me (I wrote a response yesterday that the Slack app ate):\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think you're misunderstanding me here, I'm specifically saying I don't always think automation is a good idea, I'm saying that it's the way I prefer to solve problems. It's an inclination that has more to do with me, than it does the problem."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't understand the distinction you're making here. At least, what you're saying sounds like it answers your earlier question, \"how can doing things manually still be better than automating them in 2020?\"\n\nFunny thing is, I do a "
                            },
                            {
                                "type": "text",
                                "text": "lot",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to automate testing. In fact, one way to view my Mu project is as making the UI layer easy to test.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would love to hear more about this \"love of doing things manually\" though."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When I do something manually I sleep soundly at night that I haven't created new tech debt for myself. I don't have something new I have to maintain, or try to read later to try to understand "
                            },
                            {
                                "type": "text",
                                "text": "just what",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " I was thinking. Manual labor can be therapeutic, like gardening. All these things have nothing to do with the state of the underlying system. They're just about the mess "
                            },
                            {
                                "type": "text",
                                "text": "I",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " make, and about taking care of my own state of mind.\n\nSometimes I do things manually for a few days even when I'm "
                            },
                            {
                                "type": "text",
                                "text": "sure",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " I have to automate them eventually. Manual work keeps me close to the data and might give me some new insight. \"Being the computer\" helps me understand the problem before I try to solve it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599588394.135900",
        "parent_user_id": "UE0ETTCG7",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UP00ZLX6G",
                    "UHWC9PXBL"
                ],
                "count": 2
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ac4deb19-7682-48d2-8482-c8e97e45d353",
        "type": "message",
        "text": "&gt; what a cool idea, a social networking platform based around sharing little interactive bits of code. Twitter x CodePen\nYou mean like <http://www.bashoneliners.com>?",
        "user": "UCUSW7WVD",
        "ts": "1599969120.339600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "bashoneliners.com | Bash One-Liners",
                "title_link": "http://www.bashoneliners.com/",
                "text": "A collection of practical and well-explained Bash one-liners and shell script tips, tricks, snippets for GNU Linux, UNIX or BSD systems. Post your clever one-liners, search, login using SSO or Open ID. Open-source project, using Django, Python, jQuery, Git, GitHub, HTML5, Bootstrap from Twitter.",
                "fallback": "bashoneliners.com | Bash One-Liners",
                "from_url": "http://www.bashoneliners.com/",
                "service_name": "bashoneliners.com",
                "id": 1,
                "original_url": "http://www.bashoneliners.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7fHCV",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "what a cool idea, a social networking platform based around sharing little interactive bits of code. Twitter x CodePen"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nYou mean like "
                            },
                            {
                                "type": "link",
                                "url": "http://www.bashoneliners.com"
                            },
                            {
                                "type": "text",
                                "text": "?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599719973.216100",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UE0ETTCG7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "cd82452a-d40e-4703-9cf2-7845d72b6c85",
        "type": "message",
        "text": "&gt;  E.g., my observation is that developers tend to be frustrated with their tools (especially more experienced ones). Do you not find this to be the case?\nI see pockets of people feeling frustrated and other pockets of people who aren't. It's difficult to summarize since I think the landscape is complex(like you said, experience plays a part). I agree though that not everyone is satisfied. I'll have to revisit this later when I have more to say.",
        "user": "UMWF81HTP",
        "ts": "1599973383.340000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UMWF81HTP",
            "ts": "1599973970.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+iet",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " E.g., my observation is that developers tend to be frustrated with their tools (especially more experienced ones). Do you not find this to be the case?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see pockets of people feeling frustrated and other pockets of people who aren't. It's difficult to summarize since I think the landscape is complex(like you said, experience plays a part). I agree though that not everyone is satisfied. I'll have to revisit this later when I have more to say."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599588394.135900",
        "parent_user_id": "UE0ETTCG7",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD",
                    "UE0ETTCG7"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "6CEB0CF1-2724-4EB7-956A-565D662A0D41",
        "type": "message",
        "text": "Here\u2019s something I\u2019ve been looking into for a while that I didn\u2019t see you mention specifically: the connection between\n\u2022 (embedded) domain specific languages\n\u2022 parser combinators\n\u2022 abstract algebra\n\u2022 transducers (you kind of mention that with generators/iterators, I think)\n\u2022 transformation passes (towers of interpreters?)\n\u2022 \u2026it appears I\u2019m going to list all of computer science if I keep going, but there are certainly some more items that belong in that list\n\nThere are quite obvious connections between some of them, for instance parser combinators are more or less directly applied abstract algebra. But there seems to be a more fundamental pattern that is reflected in all of them (and here we get to the part where I\u2019m usually failing at describing it well enough \u2014 probably due to my lack of depth in mathematical understanding):\n\n\u2022 They all involve (or at least can facilitate) transformations from a sequential to hierarchical structure. \n\u2022 They all represent a set of well-defined composable entities that together form something like a grammar (some more directly than others). \n\u2022 They all in a sense resemble words of a language, which can be combined to describe a lower level thing in more detail (-&gt; Alexander\u2019s Pattern Language). \n\u2022 They all enable and/or are based on a fundamentally recursive pattern which allows them to be used on various levels of abstraction at the same time; they\u2019re something like an abstraction of an abstraction, if that makes sense?\n\nI mean, maybe I\u2019m just looking at lambda calculus shining through in all of them (and in all of computing), and that\u2019s that \u2014 and there\u2019s nothing more to see here. But I don\u2019t think that\u2019s it.\n\nI know, this is kind of weird, but maybe to some of you what I just wrote makes somewhat sense and you will have some comments that help me on the path to computational enlightenment\u2026 ;-)",
        "user": "U5STGTB3J",
        "ts": "1599991924.362600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oad",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here\u2019s something I\u2019ve been looking into for a while that I didn\u2019t see you mention specifically: the connection between\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "(embedded) domain specific languages"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "parser combinators"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "abstract algebra"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "transducers (you kind of mention that with generators/iterators, I think)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "transformation passes (towers of interpreters?)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "\u2026it appears I\u2019m going to list all of computer science if I keep going, but there are certainly some more items that belong in that list"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "There are quite obvious connections between some of them, for instance parser combinators are more or less directly applied abstract algebra. But there seems to be a more fundamental pattern that is reflected in all of them (and here we get to the part where I\u2019m usually failing at describing it well enough \u2014 probably due to my lack of depth in mathematical understanding):\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "They all involve (or at least can facilitate) transformations from a sequential to hierarchical structure. "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "They all represent a set of well-defined composable entities that together form something like a grammar (some more directly than others). "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "They all in a sense resemble words of a language, which can be combined to describe a lower level thing in more detail (-> Alexander\u2019s Pattern Language). "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "They all enable and/or are based on a fundamentally recursive pattern which allows them to be used on various levels of abstraction at the same time; they\u2019re something like an abstraction of an abstraction, if that makes sense?"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "I mean, maybe I\u2019m just looking at lambda calculus shining through in all of them (and in all of computing), and that\u2019s that \u2014 and there\u2019s nothing more to see here. But I don\u2019t think that\u2019s it.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "I know, this is kind of weird, but maybe to some of you what I just wrote makes somewhat sense and you will have some comments that help me on the path to computational enlightenment\u2026 ;-)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599906350.292600",
        "parent_user_id": "UDKTZSD6H",
        "reactions": [
            {
                "name": "space_invader",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3f098951-35bc-4ea3-9acc-9fdb273d4fce",
        "type": "message",
        "text": "<@U71PMQ1V0> It's funny I was actually talking about this with a few friends and we sort of all had the opposite experience. Not sure if we're part of the same generation. We found that the generation of our parents (born in the 50s early 60s) didn't have a DIY culture at all.\n\nFrom real experience:\n\u2022 If you're bike is broken :\nParents =&gt; bring it to the bike shop\nUs =&gt; Watch a youtube tutorial\n\u2022 You want to organize a trip:\nParent =&gt; Contact a local travel agent\nUs =&gt; Do some research, go on Sky Scanner, try to find local guides, <http://booking.com|booking.com>...\n\nI was also talking to my step dad about it, who was also leaning to the same conclusion, He was amazed that kids of our generation all seem to cook. He is a city guy from Italy, he never cooked for himself. Being a bit counter-cultural he associated cooking yourself with the older more repressive generation (he was a bit of a hippy).  And maybe we are doing the same things he did, we cook because our parents didn't.\n\nI think there might be some vertical and also horizontal cultural differences. Most of my friends come from cities/big towns and we are Europeans. There might be different shift depending on your generation/location.",
        "user": "U01A57MG2HM",
        "ts": "1599993679.362900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U01A57MG2HM",
            "ts": "1599994023.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o=Sac",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U71PMQ1V0"
                            },
                            {
                                "type": "text",
                                "text": " It's funny I was actually talking about this with a few friends and we sort of all had the opposite experience. Not sure if we're part of the same generation. We found that the generation of our parents (born in the 50s early 60s) didn't have a DIY culture at all.\n\nFrom real experience:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "If you're bike is broken :"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Parents => bring it to the bike shop\nUs => Watch a youtube tutorial\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "You want to organize a trip:"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Parent => Contact a local travel agent\nUs => Do some research, go on Sky Scanner, try to find local guides, "
                            },
                            {
                                "type": "link",
                                "url": "http://booking.com",
                                "text": "booking.com"
                            },
                            {
                                "type": "text",
                                "text": "...\n\nI was also talking to my step dad about it, who was also leaning to the same conclusion, He was amazed that kids of our generation all seem to cook. He is a city guy from Italy, he never cooked for himself. Being a bit counter-cultural he associated cooking yourself with the older more repressive generation (he was a bit of a hippy).  And maybe we are doing the same things he did, we cook because our parents didn't.\n\nI think there might be some vertical and also horizontal cultural differences. Most of my friends come from cities/big towns and we are Europeans. There might be different shift depending on your generation/location."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599719973.216100",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UJ6LDMMN0",
                    "UE0ETTCG7"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "62e4b7ca-c72f-4d9f-9d4e-c740fc269c0e",
        "type": "message",
        "text": "I suppose I'd it's important for comprehension, then the programming language environment might need to be more tolerant to potential error, right? For example if someone says \"with each user online in slack, I want to ask them when their birthday is\" I'd love for the computer to be able to help incrementally qualify that for us even if there are subtle \"grammar fixes\" that need to be applied. Then, programming with correct syntax would be a bit more similar to writing correct English with Grammarly.",
        "user": "UFPPABQ7P",
        "ts": "1599994299.363200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFPPABQ7P",
            "ts": "1599994305.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OIZJz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I suppose I'd it's important for comprehension, then the programming language environment might need to be more tolerant to potential error, right? For example if someone says \"with each user online in slack, I want to ask them when their birthday is\" I'd love for the computer to be able to help incrementally qualify that for us even if there are subtle \"grammar fixes\" that need to be applied. Then, programming with correct syntax would be a bit more similar to writing correct English with Grammarly."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599962216.338400",
        "parent_user_id": "UJNJQD2AC",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f88c6d2c-5fea-4402-9afc-d33092fe8d1c",
        "type": "message",
        "text": "I would say observability is equally important. It's nice and all if the code is readable, but many times the code goes slightly out of date with it's names. And, the way it works makes a lot more sense when you have good tools for inspection into what's going on or what happened.",
        "user": "UFPPABQ7P",
        "ts": "1599994580.363500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v75ln",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I would say observability is equally important. It's nice and all if the code is readable, but many times the code goes slightly out of date with it's names. And, the way it works makes a lot more sense when you have good tools for inspection into what's going on or what happened."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599848967.277900",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "U01661S9F34"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "72239560-f5ef-4603-ae0f-8cbbc7549708",
        "type": "message",
        "text": "Even for the professional programmer, a system that comes up with \"but have you considered\" questions could prove fairly useful.  How many bugs are caused by odd interactions from otherwise fairly independent subsystems?",
        "user": "UA14TGLTC",
        "ts": "1599999332.364200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MfmT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Even for the professional programmer, a system that comes up with \"but have you considered\" questions could prove fairly useful.  How many bugs are caused by odd interactions from otherwise fairly independent subsystems?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599962216.338400",
        "parent_user_id": "UJNJQD2AC"
    },
    {
        "client_msg_id": "cae7667b-37c7-4de1-81cd-57f3bc239f6c",
        "type": "message",
        "text": "Though it would be interesting to consider talking to the computer and having it translate. I was thinking more about just a way to converse with other developers. The lack of humanity in the development process seems to lead to a lot of stress. People enjoy interacting with other people.",
        "user": "UJNJQD2AC",
        "ts": "1600000164.364400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJNJQD2AC",
            "ts": "1600000188.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MpAv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Though it would be interesting to consider talking to the computer and having it translate. I was thinking more about just a way to converse with other developers. The lack of humanity in the development process seems to lead to a lot of stress. People enjoy interacting with other people."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599962216.338400",
        "parent_user_id": "UJNJQD2AC"
    },
    {
        "client_msg_id": "55f8995f-d473-4c6d-9a3c-ec685de98099",
        "type": "message",
        "text": "I do this now in clojure, but I'm curious if we developed shared rules around the speaking patterns.",
        "user": "UJNJQD2AC",
        "ts": "1600000317.364700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LRelU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I do this now in clojure, but I'm curious if we developed shared rules around the speaking patterns."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599962216.338400",
        "parent_user_id": "UJNJQD2AC"
    },
    {
        "client_msg_id": "c992632b-1cc8-4421-9afd-c6a7f210977e",
        "type": "message",
        "text": "This comes up a lot in mob programming. I'd love research in what gets named and if there are patterns for it. The GoF book also stresses the reason for naming the patterns and the follow up refactoring books use the new vocab with some additional verbs.",
        "user": "UN57U8V53",
        "ts": "1600001298.365000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D43h",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This comes up a lot in mob programming. I'd love research in what gets named and if there are patterns for it. The GoF book also stresses the reason for naming the patterns and the follow up refactoring books use the new vocab with some additional verbs."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599962216.338400",
        "parent_user_id": "UJNJQD2AC"
    },
    {
        "client_msg_id": "2aa74065-a99c-4c04-8915-7c54147e5d27",
        "type": "message",
        "text": "Also, programming languages hit the same areas in the brain as everyday languages... But the ambiguity restriction is very different (due to shared context)",
        "user": "UN57U8V53",
        "ts": "1600001456.365200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wh/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also, programming languages hit the same areas in the brain as everyday languages... But the ambiguity restriction is very different (due to shared context)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599962216.338400",
        "parent_user_id": "UJNJQD2AC"
    },
    {
        "client_msg_id": "9651d47f-4f0a-4a38-b0de-5196c6465535",
        "type": "message",
        "text": "On automation: it has two very different costs that need to be weighed against the benefits. One has already been cited: the initial effort to put automation in place. The other one is less obvious: a fading understanding of what is really happening. It's much more pronounced if you run someone else's automation, but also happens when you run your own code for a long time without studying it from time to time. And if then you have to change something, it can be difficult.\n\nSo automation is an obvious win only if the two costs are low. Stuff like renaming hundreds of files: shallow but lengthy. The loop with a few-line body.",
        "user": "UJBAJNFLK",
        "ts": "1600002387.365400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wm8gx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On automation: it has two very different costs that need to be weighed against the benefits. One has already been cited: the initial effort to put automation in place. The other one is less obvious: a fading understanding of what is really happening. It's much more pronounced if you run someone else's automation, but also happens when you run your own code for a long time without studying it from time to time. And if then you have to change something, it can be difficult.\n\nSo automation is an obvious win only if the two costs are low. Stuff like renaming hundreds of files: shallow but lengthy. The loop with a few-line body."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599588394.135900",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "d5320078-d9c1-4aa4-acc5-e0e068fa6444",
        "type": "message",
        "text": "Aha, indeed, I misunderstood the original idea.\n\nIt's tough to be able to verbally communicate anything involving multiple actors (DB, Load balancer, Http endpoints; Text buffer, RegExp, validation messages; etc.) That's why when we can't communicate it by writing the code, I tend to try drawing it out and annotating with different levels of annotation. So, if we were communicating how notifications work, I would start by writing out the high level actors involved in sequence of a notification being sent. Then, I'd incrementally add notes for where our business requirements are applied. Then, I might show where the data is stored, etc.\n\nIn this situation it is incredibly difficult to share knowledge only orally. It is far easier to write it out in a shared code editor, or through sending back and forth snippets, than it is to try to hold all the info in your brain as the conversation moves forward.\n\nIn some of the most complex topics, my peers and I will actually write out the questions we're asking in comments in the shared editor, so we can encode each other's thoughts carefully to save time from having to repeat ourselves and losing context.",
        "user": "UFPPABQ7P",
        "ts": "1600006941.365600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFPPABQ7P",
            "ts": "1600006988.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H78Y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Aha, indeed, I misunderstood the original idea.\n\nIt's tough to be able to verbally communicate anything involving multiple actors (DB, Load balancer, Http endpoints; Text buffer, RegExp, validation messages; etc.) That's why when we can't communicate it by writing the code, I tend to try drawing it out and annotating with different levels of annotation. So, if we were communicating how notifications work, I would start by writing out the high level actors involved in sequence of a notification being sent. Then, I'd incrementally add notes for where our business requirements are applied. Then, I might show where the data is stored, etc.\n\nIn this situation it is incredibly difficult to share knowledge only orally. It is far easier to write it out in a shared code editor, or through sending back and forth snippets, than it is to try to hold all the info in your brain as the conversation moves forward.\n\nIn some of the most complex topics, my peers and I will actually write out the questions we're asking in comments in the shared editor, so we can encode each other's thoughts carefully to save time from having to repeat ourselves and losing context."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599962216.338400",
        "parent_user_id": "UJNJQD2AC"
    },
    {
        "client_msg_id": "45acb45e-e3fe-4448-be39-220e74714237",
        "type": "message",
        "text": "It kinda sounds like as if a math teacher quizzed students orally without writing out the problem on the board. It would lead to too much repetition and clarifications, just so the student is able to write out the problem the teacher is asking...",
        "user": "UFPPABQ7P",
        "ts": "1600007110.366000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFPPABQ7P",
            "ts": "1600007160.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jSoz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It kinda sounds like as if a math teacher quizzed students orally without writing out the problem on the board. It would lead to too much repetition and clarifications, just so the student is able to write out the problem the teacher is asking..."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599962216.338400",
        "parent_user_id": "UJNJQD2AC"
    },
    {
        "client_msg_id": "842465ab-074c-4088-a32f-53dea9edcc74",
        "type": "message",
        "text": "<@UHWC9PXBL> pointed this out to me in a recent conversation: continuations could be seen as the same as monads. I dug up this little discussion with more discussion around this idea <https://stackoverflow.com/questions/4525919/continuation-passing-style-vs-monads|https://stackoverflow.com/questions/4525919/continuation-passing-style-vs-monads>",
        "user": "UFPPABQ7P",
        "ts": "1600008006.370000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Stack Overflow",
                "title": "continuation passing style vs monads",
                "title_link": "https://stackoverflow.com/questions/4525919/continuation-passing-style-vs-monads",
                "text": "What are the differences between continuation passing style (cps) and monads.",
                "fallback": "Stack Overflow: continuation passing style vs monads",
                "thumb_url": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded",
                "from_url": "https://stackoverflow.com/questions/4525919/continuation-passing-style-vs-monads",
                "thumb_width": 316,
                "thumb_height": 316,
                "service_icon": "https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon.png?v=c78bd457575a",
                "id": 1,
                "original_url": "https://stackoverflow.com/questions/4525919/continuation-passing-style-vs-monads"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/LFO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHWC9PXBL"
                            },
                            {
                                "type": "text",
                                "text": " pointed this out to me in a recent conversation: continuations could be seen as the same as monads. I dug up this little discussion with more discussion around this idea "
                            },
                            {
                                "type": "link",
                                "url": "https://stackoverflow.com/questions/4525919/continuation-passing-style-vs-monads",
                                "text": "https://stackoverflow.com/questions/4525919/continuation-passing-style-vs-monads"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599906350.292600",
        "parent_user_id": "UDKTZSD6H"
    },
    {
        "client_msg_id": "6D2F38DD-B6F9-4C36-9DEE-9E0C10ECA972",
        "type": "message",
        "text": "<@UCUSW7WVD> I really appreciate these comments, some responses below:\n\n&gt; Don't you also see experienced developers being more resigned to their tools? In fact, that's one way to diagnose all of us pushing back on you in this thread: we've been living with our chains so long that we've forgotten about them. That would certainly explain why we don't customize more.\n\nThis seems to be saying the same thing I am, experienced programmers are unhappy with their tools, but accept them (that's the way I'm interpreting \"resigned\" at least?) The question is just why. You've given some great reasons, but I'm not entirely convinced (not saying I disagree either, just not sure either way), but I think the best response would be to give some concrete examples. That's also something a couple of others have requested too, and I also think it's a good idea, so I'm going to start a new thread soon with examples.\n\n&gt; I had more customizations in 2001-2005, then I moved and changed a lot of stuff and just restarted my text editor settings from scratch. And they've never grown back to the sort of multi-megabyte state they were in then.\n\nI used off-the-shelf software for the first half of my career (2002-2010), mainly with the defaults, then started customizing after that. I realized it solved a really really big problem for me: I used to keep changing software because an alternative would solve some problem I have, but after using the new software I'd realize the old software did some other things better. So my total number of problems would always stay the same.\n\nNow that I customize, my total number of problems goes down. Now I think of applications like as a shell that I can customize to make it do the things that are important to me very quickly. And I'm so much happier as a computer user this way, because I'm not in a constant state of frustration because nothing works the way I want it to like I was before (this is is probably a core trait of customizers/automators, as well as contrarians in general).\n\n&gt; &gt; I think you're misunderstanding me here, I'm specifically saying I don't always think automation is a good idea, I'm saying that it's the way I prefer to solve problems. It's an inclination that has more to do with me, than it does the problem.\n&gt; I don't understand the distinction you're making here. At least, what you're saying sounds like it answers your earlier question, \"how can doing things manually still be better than automating them in 2020?\"\n\nTo me these are two separate thoughts: In the first, I'd guesstimate automators are about 1/10 of programmers, I'm just saying I'm in that 1/10. The second part is just surprise that using a computer programmatically is still so difficult in 2020, given it's a problem so many people have worked on. Not sure there's a contradiction here? I think you're saying #2 leads to the 1/10 in #1, which I agree with. But I don't see why that would change my personal preference?\n\n&gt; When I do something manually I sleep soundly at night that I haven't created new tech debt for myself. I don't have something new I have to maintain, or try to read later to try to understand just what I was thinking. Manual labor can be therapeutic, like gardening. All these things have nothing to do with the state of the underlying system. They're just about the mess I make, and about taking care of my own state of mind.\n\nI understand this in theory, but I just don't experience using computers this way. This reminds me of how I feel when I watch Gray Bernhardt type, I find him amazing to watch, but he has an affinity for the mechanical act of typing that I just do not share. I find just imagining doing what he does myself exhausting. (Also, doing that many small mechanical motions relative to his output seems like a recipe for RSI to me.) There is just no way I'm ever going to use a computer by typing everything out the way he does, the \"cost of a key stroke\" is just higher for me than it is for him.",
        "user": "UE0ETTCG7",
        "ts": "1600012250.372400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KnZn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " I really appreciate these comments, some responses below:\n\n> Don't you also see experienced developers being more resigned to their tools? In fact, that's one way to diagnose all of us pushing back on you in this thread: we've been living with our chains so long that we've forgotten about them. That would certainly explain why we don't customize more.\n\nThis seems to be saying the same thing I am, experienced programmers are unhappy with their tools, but accept them (that's the way I'm interpreting \"resigned\" at least?) The question is just why. You've given some great reasons, but I'm not entirely convinced (not saying I disagree either, just not sure either way), but I think the best response would be to give some concrete examples. That's also something a couple of others have requested too, and I also think it's a good idea, so I'm going to start a new thread soon with examples.\n\n> I had more customizations in 2001-2005, then I moved and changed a lot of stuff and just restarted my text editor settings from scratch. And they've never grown back to the sort of multi-megabyte state they were in then.\n\nI used off-the-shelf software for the first half of my career (2002-2010), mainly with the defaults, then started customizing after that. I realized it solved a really really big problem for me: I used to keep changing software because an alternative would solve some problem I have, but after using the new software I'd realize the old software did some other things better. So my total number of problems would always stay the same.\n\nNow that I customize, my total number of problems goes down. Now I think of applications like as a shell that I can customize to make it do the things that are important to me very quickly. And I'm so much happier as a computer user this way, because I'm not in a constant state of frustration because nothing works the way I want it to like I was before (this is is probably a core trait of customizers/automators, as well as contrarians in general).\n\n> > I think you're misunderstanding me here, I'm specifically saying I don't always think automation is a good idea, I'm saying that it's the way I prefer to solve problems. It's an inclination that has more to do with me, than it does the problem.\n> I don't understand the distinction you're making here. At least, what you're saying sounds like it answers your earlier question, \"how can doing things manually still be better than automating them in 2020?\"\n\nTo me these are two separate thoughts: In the first, I'd guesstimate automators are about 1/10 of programmers, I'm just saying I'm in that 1/10. The second part is just surprise that using a computer programmatically is still so difficult in 2020, given it's a problem so many people have worked on. Not sure there's a contradiction here? I think you're saying #2 leads to the 1/10 in #1, which I agree with. But I don't see why that would change my personal preference?\n\n> When I do something manually I sleep soundly at night that I haven't created new tech debt for myself. I don't have something new I have to maintain, or try to read later to try to understand just what I was thinking. Manual labor can be therapeutic, like gardening. All these things have nothing to do with the state of the underlying system. They're just about the mess I make, and about taking care of my own state of mind.\n\nI understand this in theory, but I just don't experience using computers this way. This reminds me of how I feel when I watch Gray Bernhardt type, I find him amazing to watch, but he has an affinity for the mechanical act of typing that I just do not share. I find just imagining doing what he does myself exhausting. (Also, doing that many small mechanical motions relative to his output seems like a recipe for RSI to me.) There is just no way I'm ever going to use a computer by typing everything out the way he does, the \"cost of a key stroke\" is just higher for me than it is for him."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599588394.135900",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "283154d8-ce00-473c-b7d4-124e47154b9c",
        "type": "message",
        "text": "would be really interested to know if there is any MRI research looking at how much overlap there is in which parts of the brain \"light up\" when speaking/writing/read code vs natural language",
        "user": "U018AQ13VF1",
        "ts": "1600013608.372600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pceK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "would be really interested to know if there is any MRI research looking at how much overlap there is in which parts of the brain \"light up\" when speaking/writing/read code vs natural language"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599962216.338400",
        "parent_user_id": "UJNJQD2AC"
    },
    {
        "client_msg_id": "1C14056F-A757-4007-BC08-B17ACCC77BD1",
        "type": "message",
        "text": "<https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/the-mother-of-all-monads|https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/the-mother-of-all-monads> here\u2019s the article i was referencing in that conversation ",
        "user": "UHWC9PXBL",
        "ts": "1600014389.373300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GyNX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/the-mother-of-all-monads",
                                "text": "https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/the-mother-of-all-monads"
                            },
                            {
                                "type": "text",
                                "text": " here\u2019s the article i was referencing in that conversation "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599906350.292600",
        "parent_user_id": "UDKTZSD6H",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFPPABQ7P"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "146b431d-318d-4552-8a7d-b44bab45f0b7",
        "type": "message",
        "text": "<@UE0ETTCG7> That really helps clarify things. I certainly agree that computers today fit better for people with a certain profile (who find certain things like typing cheaper to do), and that there are huge barriers to customizing them for other profiles. I think it analogous to the direction of a vector rather than its magnitude. The things you want are not that far from the current defaults, it's just that there's huge impassable mountains in the direction you want to take computers, whereas I[1] and Gary Bernhardt have the advantage of living in the direction of the flat plains. (And the poor laypeople are out in outer space with no service.)\n\n[1] Though I see myself moving closer to you over time, what with my recent RSI troubles.",
        "user": "UCUSW7WVD",
        "ts": "1600014802.376000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1600015130.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EkH0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE0ETTCG7"
                            },
                            {
                                "type": "text",
                                "text": " That really helps clarify things. I certainly agree that computers today fit better for people with a certain profile (who find certain things like typing cheaper to do), and that there are huge barriers to customizing them for other profiles. I think it analogous to the direction of a vector rather than its magnitude. The things you want are not that far from the current defaults, it's just that there's huge impassable mountains in the direction you want to take computers, whereas I[1] and Gary Bernhardt have the advantage of living in the direction of the flat plains. (And the poor laypeople are out in outer space with no service.)\n\n[1] Though I see myself moving closer to you over time, what with my recent RSI troubles."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599588394.135900",
        "parent_user_id": "UE0ETTCG7",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UE0ETTCG7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "D2FC9ECE-91DD-44B5-9641-BEEFE76B7890",
        "type": "message",
        "text": "i think <@UFPPABQ7P> is pointing at something important here, which is that the main affordance given by non-spoken language is asynchrony\u2014being able to look at things in different orders, return to old topics, and read without listening or speaking. i think the idea of spoken language (and an interactive conversation) also probably have unexpected side benefits, but i\u2019m struggling to think of them at the moment (probably because i don\u2019t  use spoken interfaces very often). the only one that comes to mind is that spoken interactions imply an awareness of context\u2014think of how much more often you get to say things like \u201cwhat\u2019s this?\u201d out loud rather than when you\u2019re writing",
        "user": "UHWC9PXBL",
        "ts": "1600015025.380600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9oxX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i think "
                            },
                            {
                                "type": "user",
                                "user_id": "UFPPABQ7P"
                            },
                            {
                                "type": "text",
                                "text": " is pointing at something important here, which is that the main affordance given by non-spoken language is asynchrony\u2014being able to look at things in different orders, return to old topics, and read without listening or speaking. i think the idea of spoken language (and an interactive conversation) also probably have unexpected side benefits, but i\u2019m struggling to think of them at the moment (probably because i don\u2019t  use spoken interfaces very often). the only one that comes to mind is that spoken interactions imply an awareness of context\u2014think of how much more often you get to say things like \u201cwhat\u2019s this?\u201d out loud rather than when you\u2019re writing"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599962216.338400",
        "parent_user_id": "UJNJQD2AC"
    },
    {
        "client_msg_id": "03AE201D-7BB2-45F1-A822-1C45FDDA822C",
        "type": "message",
        "text": "I\u2019ll just add that I think both approaches work, John Carmack seems like a use the defaults type (<https://twitter.com/id_aa_carmack/status/1302651878065475584?s=21|https://twitter.com/id_aa_carmack/status/1302651878065475584?s=21>). Linus seems like a customizer (maintaining his own Emacs, and `git` seems like explosion of Bash scripts, at least when I\u2019ve looked at it under the hood).",
        "user": "UE0ETTCG7",
        "ts": "1600016128.385300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/ID_AA_Carmack|@ID_AA_Carmack>: I have never been a power editor user; typing just never felt like a bottleneck worth fighting over (unlike exploration).  It is interesting watching my kids get excited as they discover various Sublime Text features that I never use.",
                "ts": 1599411384,
                "author_name": "John Carmack",
                "author_link": "https://twitter.com/ID_AA_Carmack/status/1302651878065475584",
                "author_icon": "https://pbs.twimg.com/profile_images/1106497789/aa_icon_option_2_normal.jpg",
                "author_subname": "@ID_AA_Carmack",
                "text": "I have never been a power editor user; typing just never felt like a bottleneck worth fighting over (unlike exploration).  It is interesting watching my kids get excited as they discover various Sublime Text features that I never use.",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/id_aa_carmack/status/1302651878065475584?s=21",
                "id": 1,
                "original_url": "https://twitter.com/id_aa_carmack/status/1302651878065475584?s=21",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qVAy/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019ll just add that I think both approaches work, John Carmack seems like a use the defaults type ("
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/id_aa_carmack/status/1302651878065475584?s=21",
                                "text": "https://twitter.com/id_aa_carmack/status/1302651878065475584?s=21"
                            },
                            {
                                "type": "text",
                                "text": "). Linus seems like a customizer (maintaining his own Emacs, and "
                            },
                            {
                                "type": "text",
                                "text": "git",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " seems like explosion of Bash scripts, at least when I\u2019ve looked at it under the hood)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599588394.135900",
        "parent_user_id": "UE0ETTCG7"
    },
    {
        "client_msg_id": "47df9259-dbab-4aaa-9783-fc0edb45a29b",
        "type": "message",
        "text": "I'm noticing an analogy here with lifestyle design. A few years ago there was a movement towards minimalism until people realized that not everyone is rich enough to afford minimalism[1]. Similarly, I think when you see someone who says they just use the defaults, you're really seeing someone privileged to be better suited to their environment.\n\n[1] Arguably this pandemic has made us all poorer by forcing us to run less lean and maintain more inventory of more types.",
        "user": "UCUSW7WVD",
        "ts": "1600016978.385600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1600019278.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qGz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm noticing an analogy here with lifestyle design. A few years ago there was a movement towards minimalism until people realized that not everyone is rich enough to afford minimalism[1]. Similarly, I think when you see someone who says they just use the defaults, you're really seeing someone privileged to be better suited to their environment.\n\n[1] Arguably this pandemic has made us all poorer by forcing us to run less lean and maintain more inventory of more types."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1599588394.135900",
        "parent_user_id": "UE0ETTCG7",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UE0ETTCG7"
                ],
                "count": 1
            }
        ]
    }
]