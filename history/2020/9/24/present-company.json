[
    {
        "client_msg_id": "BE0393E9-082C-404C-9E82-BEEAACFF3495",
        "type": "message",
        "text": "i think this is an excellent talk, even if it deals primarily with c++ (a language i\u2019ve sworn never to work in): <https://youtu.be/W2tWOdzgXHA|https://youtu.be/W2tWOdzgXHA> \ni know a common and solid, (or to talk like <@UCUSW7WVD>, steelman) criticism of a language like APL is that it\u2019s great as long as your problem can be elegantly posed as array manipulation. this talk (to be glib) is about how an enormous amount of production c++ code can be reduced to a few library functions (primarily rotate lol). it\u2019s making me think we shouldn\u2019t necessarily evaluate programming languages or libraries by how flexibly they admit extremely divergent domain languages on the immediate syntax level\u2014maybe there\u2019s a test for a language or library\u2019 whose *semantics* are comfortable with abstracting (with very precise slices or joinery) domain-specific stuff back into the language\u2019s native functions and data types with minimal effort. \n\nfeels like an old timey hacker news take but i mean it in a new light, where rather than insisting that everyone\u2019s framework should actually be written in lisp, or c, there may be some abstractions that you can build a language around that map to most of the stuff that people do in the 21st century. something appealingly physical about rotate to me. maybe that\u2019s why i\u2019ve been so into apl (for collections) rebol (for scoping) and forth (for ordering) lately. sorry if basically a diary entry isn\u2019t appropriate for slack. i don\u2019t really know how i\u2019d turn this thought into a blog post lmao",
        "user": "UHWC9PXBL",
        "ts": "1600907616.041000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1600907687.000000"
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "GoingNative 2013 C++ Seasoning",
                "title_link": "https://youtu.be/W2tWOdzgXHA",
                "author_name": "25msr",
                "author_link": "https://www.youtube.com/user/25msr",
                "thumb_url": "https://i.ytimg.com/vi/W2tWOdzgXHA/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: GoingNative 2013 C++ Seasoning",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/W2tWOdzgXHA?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/W2tWOdzgXHA",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/W2tWOdzgXHA"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZE3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i think this is an excellent talk, even if it deals primarily with c++ (a language i\u2019ve sworn never to work in): "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/W2tWOdzgXHA",
                                "text": "https://youtu.be/W2tWOdzgXHA"
                            },
                            {
                                "type": "text",
                                "text": " \ni know a common and solid, (or to talk like "
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": ", steelman) criticism of a language like APL is that it\u2019s great as long as your problem can be elegantly posed as array manipulation. this talk (to be glib) is about how an enormous amount of production c++ code can be reduced to a few library functions (primarily rotate lol). it\u2019s making me think we shouldn\u2019t necessarily evaluate programming languages or libraries by how flexibly they admit extremely divergent domain languages on the immediate syntax level\u2014maybe there\u2019s a test for a language or library\u2019 whose "
                            },
                            {
                                "type": "text",
                                "text": "semantics",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are comfortable with abstracting (with very precise slices or joinery) domain-specific stuff back into the language\u2019s native functions and data types with minimal effort. \n\nfeels like an old timey hacker news take but i mean it in a new light, where rather than insisting that everyone\u2019s framework should actually be written in lisp, or c, there may be some abstractions that you can build a language around that map to most of the stuff that people do in the 21st century. something appealingly physical about rotate to me. maybe that\u2019s why i\u2019ve been so into apl (for collections) rebol (for scoping) and forth (for ordering) lately. sorry if basically a diary entry isn\u2019t appropriate for slack. i don\u2019t really know how i\u2019d turn this thought into a blog post lmao"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1600907616.041000",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1600909322.041300",
        "reply_users": [
            "UFB8STN7K"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U012RSHGTFY"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7309c422-4f32-4650-9cae-8fd52549afca",
        "type": "message",
        "text": "Higher-order functions are imo the best example of a critical-yet-general language feature for concisely expressing domain-specific abstractions. \u201cNo raw loops\u201d is another way of saying \u201d have a proper higher-order API for your collections\u201d.",
        "user": "UFB8STN7K",
        "ts": "1600909322.041300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f=b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Higher-order functions are imo the best example of a critical-yet-general language feature for concisely expressing domain-specific abstractions. \u201cNo raw loops\u201d is another way of saying \u201d have a proper higher-order API for your collections\u201d."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1600907616.041000",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0d83ec6f-66c4-4795-8728-d8aa001442d3",
        "type": "message",
        "text": "Thanks <@U013ZLJARC7>, I'll have a look. I've also since found this paper which gets into the practice of using lisp interactively <http://www.softwarepreservation.org/projects/interactive_c/bib/Sandewall-1978.pdf>",
        "user": "UPMFG2571",
        "ts": "1600947824.000400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UkNJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": ", I'll have a look. I've also since found this paper which gets into the practice of using lisp interactively "
                            },
                            {
                                "type": "link",
                                "url": "http://www.softwarepreservation.org/projects/interactive_c/bib/Sandewall-1978.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1600365145.039700",
        "parent_user_id": "UPMFG2571",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "UJBAJNFLK"
                ],
                "count": 2
            }
        ]
    }
]