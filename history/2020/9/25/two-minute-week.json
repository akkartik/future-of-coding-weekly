[
    {
        "client_msg_id": "7bb61b97-ac26-4207-a9ce-53ac9b3520ce",
        "type": "message",
        "text": "Hi <@UBN9AFS0N>, the text editor is my own thing; I talk about it in some of my updates.  You can see the project here: <https://github.com/Rezonality/zep>.  There is a video overview too.",
        "user": "UUQ2EQW21",
        "ts": "1601015648.004500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UUQ2EQW21",
            "ts": "1601015653.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oOpRh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi "
                            },
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": ", the text editor is my own thing; I talk about it in some of my updates.  You can see the project here: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/Rezonality/zep"
                            },
                            {
                                "type": "text",
                                "text": ".  There is a video overview too."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1600684757.048400",
        "parent_user_id": "UUQ2EQW21"
    },
    {
        "client_msg_id": "4478707d-2498-493a-a89b-2692c87e242b",
        "type": "message",
        "text": "I built the editor to solve some of the problems you see here; since it needs embedded widgets, adornments, etc.",
        "user": "UUQ2EQW21",
        "ts": "1601015675.004900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nhvJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I built the editor to solve some of the problems you see here; since it needs embedded widgets, adornments, etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1600684757.048400",
        "parent_user_id": "UUQ2EQW21"
    },
    {
        "client_msg_id": "3fed0420-aad6-4c3c-971e-9e1028a6cf9b",
        "type": "message",
        "text": "(1) I think the curve the lines tell you more about the shape of data dependencies than a more regular reduction tree might.  (2) I like to imagine non-strict evaluation of concatenative languages: start wherever (or everwhere) and reduce from there.  Imagine a rewrite process per word.  A literal `5` reduces to itself.  An operator `+` looks to the left two words.  If they are reduced, you can reduce; otherwise, wait for them.",
        "user": "UA14TGLTC",
        "ts": "1601017256.005200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=gMt8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(1) I think the curve the lines tell you more about the shape of data dependencies than a more regular reduction tree might.  (2) I like to imagine non-strict evaluation of concatenative languages: start wherever (or everwhere) and reduce from there.  Imagine a rewrite process per word.  A literal "
                            },
                            {
                                "type": "text",
                                "text": "5",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " reduces to itself.  An operator "
                            },
                            {
                                "type": "text",
                                "text": "+",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " looks to the left two words.  If they are reduced, you can reduce; otherwise, wait for them."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1600587602.007800",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            },
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "799199e6-5579-4d94-b148-de046a8aaac6",
        "type": "message",
        "text": "The basket feature reminds me the backpack in Scratch. Very useful, I like it!",
        "user": "UJ6LDMMN0",
        "ts": "1601019030.005700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tFJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The basket feature reminds me the backpack in Scratch. Very useful, I like it!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1600979526.002500",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "FA73B0B7-CD0A-45F7-B6CB-F689975E8A03",
        "type": "message",
        "text": "this is interesting because i suspect that implementing that would look almost like taking the derivative of existing concatenative languages using rewrite rules, eg Cat/metaCat: <https://web.archive.org/web/20140729145537/http://www.cat-language.com/intro.html|https://web.archive.org/web/20140729145537/http://www.cat-language.com/intro.html>",
        "user": "UHWC9PXBL",
        "ts": "1601032554.007700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ld=g+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this is interesting because i suspect that implementing that would look almost like taking the derivative of existing concatenative languages using rewrite rules, eg Cat/metaCat: "
                            },
                            {
                                "type": "link",
                                "url": "https://web.archive.org/web/20140729145537/http://www.cat-language.com/intro.html",
                                "text": "https://web.archive.org/web/20140729145537/http://www.cat-language.com/intro.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1600587602.007800",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "50D2F73B-D706-4D60-A71F-1450F3A4253D",
        "type": "message",
        "text": "also: <http://nsl.com/papers/rewritejoy.html|http://nsl.com/papers/rewritejoy.html>",
        "user": "UHWC9PXBL",
        "ts": "1601032728.008000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GXG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "also: "
                            },
                            {
                                "type": "link",
                                "url": "http://nsl.com/papers/rewritejoy.html",
                                "text": "http://nsl.com/papers/rewritejoy.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1600587602.007800",
        "parent_user_id": "UCUSW7WVD"
    }
]