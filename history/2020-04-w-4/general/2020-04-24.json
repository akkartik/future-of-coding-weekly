[
    {
        "client_msg_id": "e858b70c-c5f8-4f26-8b4d-ecdb68fb3e7b",
        "type": "message",
        "text": "i've come around to this idea now. It's a good idea.",
        "user": "U0119RRB1MK",
        "ts": "1587692682.153000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YD6tT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i've come around to this idea now. It's a good idea."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7"
    },
    {
        "client_msg_id": "8a4390d1-2509-4fc5-8814-d49638bc3fd5",
        "type": "message",
        "text": "A question I've been wondering about recently is why aren't programming languages more... modular? Like, why isn't there a system for using X interpreter/compiler with Y syntax? Every language is bound to a specific runtime environment and syntax, but would it be possible to mix and match these somehow?",
        "user": "UQPHR6Y3S",
        "ts": "1587704819.155400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zTQPc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A question I've been wondering about recently is why aren't programming languages more... modular? Like, why isn't there a system for using X interpreter/compiler with Y syntax? Every language is bound to a specific runtime environment and syntax, but would it be possible to mix and match these somehow?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "reply_count": 21,
        "reply_users_count": 10,
        "latest_reply": "1587768725.177800",
        "reply_users": [
            "UT9TWSZB5",
            "UQPHR6Y3S",
            "UEQ6M68H0",
            "UBN9AFS0N",
            "UPMFG2571",
            "UCKRZS3DZ",
            "UKJGU23KP",
            "UFEQUBNNT",
            "UD6EXQVM0",
            "UAVCC2X70"
        ],
        "subscribed": true,
        "last_read": "1587798301.113000"
    },
    {
        "client_msg_id": "f410f08c-37d6-4f10-8309-67a9ccb2c358",
        "type": "message",
        "text": "Well theres LLVM and WASM which is kind of like that",
        "user": "UT9TWSZB5",
        "ts": "1587704856.155500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "65NJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well theres LLVM and WASM which is kind of like that"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S",
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "aa4de6a3-1f8b-47ce-8ff7-32d4a01f1492",
        "type": "message",
        "text": "this question is partially inspired by seeing that, interestingly, Python and JavaScript are much faster than Java and C# for AWS Lambda (serverless computing.) So I'm curious to what degree you can swap out the runtime with the same code",
        "user": "UQPHR6Y3S",
        "ts": "1587704916.155700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tuz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "this question is partially inspired by seeing that, interestingly, Python and JavaScript are much faster than Java and C# for AWS Lambda (serverless computing.) So I'm curious to what degree you can swap out the runtime with the same code"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S"
    },
    {
        "client_msg_id": "99b245c0-8442-49a5-94d7-a50595a1eabf",
        "type": "message",
        "text": "<@UT9TWSZB5> LLVM is a good example. But I'm curious if there's something like that for interpreted langs? A common backend for multiple syntaxes/standard libs",
        "user": "UQPHR6Y3S",
        "ts": "1587704995.155900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Cqev",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UT9TWSZB5"
                            },
                            {
                                "type": "text",
                                "text": " LLVM is a good example. But I'm curious if there's something like that for interpreted langs? A common backend for multiple syntaxes/standard libs"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S"
    },
    {
        "client_msg_id": "77c93f9d-012b-4be8-9f60-3e22d6548441",
        "type": "message",
        "text": "Yeah, interesting. WASM is actually even better in some ways -- its an intermediate representation. Languages compile to WASM, and WASM can run on various runtimes...",
        "user": "UT9TWSZB5",
        "ts": "1587705193.156100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OuTA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, interesting. WASM is actually even better in some ways -- its an intermediate representation. Languages compile to WASM, and WASM can run on various runtimes..."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UQPHR6Y3S"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "a396a753-ad7e-4508-a7d1-ac3fb94519f1",
        "type": "message",
        "text": "For what its worth, I'm not too familiar with WASM but I know there's a lot of coolaid over there.",
        "user": "UT9TWSZB5",
        "ts": "1587705221.156300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ol=K+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For what its worth, I'm not too familiar with WASM but I know there's a lot of coolaid over there."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S"
    },
    {
        "client_msg_id": "a84d598a-ea3a-4f8a-91fe-48798cc3a434",
        "type": "message",
        "text": "I'm reminded of this talk I saw a while ago: <https://vimeo.com/341873497>",
        "user": "UT9TWSZB5",
        "ts": "1587705331.156500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Vimeo",
                "service_url": "https://vimeo.com/",
                "title": "the-birth-and-death-of-javascript",
                "title_link": "https://vimeo.com/341873497",
                "author_name": "Valen Cheung",
                "author_link": "https://vimeo.com/user99652662",
                "thumb_url": "https://i.vimeocdn.com/video/790602833_295x166.jpg",
                "thumb_width": 295,
                "thumb_height": 166,
                "fallback": "Vimeo Video: the-birth-and-death-of-javascript",
                "video_html": "<iframe src=\"https://player.vimeo.com/video/341873497?autoplay=1&amp;app_id=122963\" width=\"400\" height=\"225\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen title=\"the-birth-and-death-of-javascript\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://vimeo.com/341873497",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/vimeo.png",
                "id": 1,
                "original_url": "https://vimeo.com/341873497"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WiMXv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm reminded of this talk I saw a while ago: "
                            },
                            {
                                "type": "link",
                                "url": "https://vimeo.com/341873497"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S"
    },
    {
        "client_msg_id": "a41ede54-068b-4f5a-800f-3f53ff7215f4",
        "type": "message",
        "text": "Languages today are inextricably linked with very complex runtimes. You can't even consider running Elixir or Erlang without the special virtual machine. That runtime has a very clever heap-per-thread architecture, unique among languages, and if you have a task to do that requires 300,000 simultaneous threads, you are going to get pounded with memory management problems in any conventional runtime. Languages also don't agree on data types. C has a 2 value boolean. JS has a 3-value boolean (undefined, true, false), and Beads has  a 4-value boolean (undefined, error, true, false) in order to have a uniform top and bottom value for all data types. These types of minute details make data interchange basically impractical between languages, so the idea of a universal runtime is unrealistic in this universe.",
        "user": "UEQ6M68H0",
        "ts": "1587712188.156900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H9bJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Languages today are inextricably linked with very complex runtimes. You can't even consider running Elixir or Erlang without the special virtual machine. That runtime has a very clever heap-per-thread architecture, unique among languages, and if you have a task to do that requires 300,000 simultaneous threads, you are going to get pounded with memory management problems in any conventional runtime. Languages also don't agree on data types. C has a 2 value boolean. JS has a 3-value boolean (undefined, true, false), and Beads has  a 4-value boolean (undefined, error, true, false) in order to have a uniform top and bottom value for all data types. These types of minute details make data interchange basically impractical between languages, so the idea of a universal runtime is unrealistic in this universe."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UQPHR6Y3S"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "068ba136-08a0-4055-bd5a-72c6ae6f1e5b",
        "type": "message",
        "text": "there was an attempt a (long?) time ago called parrot to provide a vm for multiple dynamic languages: <https://en.wikipedia.org/wiki/Parrot_virtual_machine>",
        "user": "UBN9AFS0N",
        "ts": "1587714548.157200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Parrot virtual machine",
                "title_link": "https://en.wikipedia.org/wiki/Parrot_virtual_machine",
                "from_url": "https://en.wikipedia.org/wiki/Parrot_virtual_machine",
                "author_name": "Wikipedia",
                "author_link": "https://en.wikipedia.org/",
                "text": "Parrot is a register-based process virtual machine designed to run dynamic languages efficiently. It is possible to compile Parrot assembly language and Parrot intermediate representation (PIR, an intermediate language) to Parrot bytecode and execute it. Parrot is free and open source software.Parrot was started by the Perl community and is developed with help from the open source and free software communities. As a result, it is focused on license compatibility with Perl (Artistic License 2.0), platform compatibility across a broad array of systems, processor architecture compatibility across most modern processors, speed of execution, small size (around 700k depending on platform), and the flexibility to handle the varying demands made by Raku and other modern dynamic languages.\nVersion 1.0, with a stable Application programming interface (API) for development, was released on March 17, 2009. The current version is release 8.1.0 \"Andean Parakeet\"",
                "fallback": "wikipedia: Parrot virtual machine",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png",
                "id": 1,
                "original_url": "https://en.wikipedia.org/wiki/Parrot_virtual_machine"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5s4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "there was an attempt a (long?) time ago called parrot to provide a vm for multiple dynamic languages: "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Parrot_virtual_machine"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S"
    },
    {
        "client_msg_id": "f0bb99b3-d395-49f3-9ae9-db35e08bb352",
        "type": "message",
        "text": "and graalvm in the jvm: <https://www.graalvm.org/docs/reference-manual/polyglot/>",
        "user": "UBN9AFS0N",
        "ts": "1587714820.157500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "            Reference for Polyglot Applications        ",
                "title_link": "https://www.graalvm.org/docs/reference-manual/polyglot/",
                "fallback": "            Reference for Polyglot Applications        ",
                "image_url": "https://www.graalvm.org/resources/img/graalvm.png",
                "from_url": "https://www.graalvm.org/docs/reference-manual/polyglot/",
                "image_width": 557,
                "image_height": 250,
                "image_bytes": 7026,
                "service_icon": "https://www.graalvm.org/resources/img/favicon/apple-touch-icon.png",
                "service_name": "graalvm.org",
                "id": 1,
                "original_url": "https://www.graalvm.org/docs/reference-manual/polyglot/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O0O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and graalvm in the jvm: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.graalvm.org/docs/reference-manual/polyglot/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "cdd650b7-36f5-4a7d-9c17-79428447df83",
        "type": "message",
        "text": "This is also relevant: <https://tratt.net/laurie/blog/entries/fine_grained_language_composition.html>",
        "user": "UPMFG2571",
        "ts": "1587729022.157800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6Dy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is also relevant: "
                            },
                            {
                                "type": "link",
                                "url": "https://tratt.net/laurie/blog/entries/fine_grained_language_composition.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S",
        "reactions": [
            {
                "name": "open_mouth",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "aab91455-1a16-4fa3-b98f-51d378a20369",
        "type": "message",
        "text": "People help each other, share each other's code. It would be very inconvenient if people used many different syntaxes for same language",
        "user": "UCKRZS3DZ",
        "ts": "1587730075.158000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b6sq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "People help each other, share each other's code. It would be very inconvenient if people used many different syntaxes for same language"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UQPHR6Y3S"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "729d62c6-daaf-4bfc-99b7-7599f02b033e",
        "type": "message",
        "text": "One thing that would make that hard is translating the standard library/built in types. You not only would have to translate the code you\u2019re working with, but everything it depends on. At that point, what\u2019s the benefit?",
        "user": "UKJGU23KP",
        "ts": "1587733981.158200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "soO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One thing that would make that hard is translating the standard library/built in types. You not only would have to translate the code you\u2019re working with, but everything it depends on. At that point, what\u2019s the benefit?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S"
    },
    {
        "client_msg_id": "5b847432-cbf7-4413-8f0d-9df754ccb9ae",
        "type": "message",
        "text": "Important to note that GraalVM works based off of hand-written interpreters for other languages. They had to go and write an interpreter for Ruby that can be run inside that VM and interoperate with an interpreter for JS/Python, etc.",
        "user": "UKJGU23KP",
        "ts": "1587734039.158400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J2G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Important to note that GraalVM works based off of hand-written interpreters for other languages. They had to go and write an interpreter for Ruby that can be run inside that VM and interoperate with an interpreter for JS/Python, etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S"
    },
    {
        "client_msg_id": "643892ae-1012-478b-94d6-2fa5c9fd4bbc",
        "type": "message",
        "text": "GraalVM works because of a lot of manual effort, and because it\u2019s built on tremendous compiler technology that lets those interpreters run efficiently without as much hand-optimization.",
        "user": "UKJGU23KP",
        "ts": "1587734080.158600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vw+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "GraalVM works because of a lot of manual effort, and because it\u2019s built on tremendous compiler technology that lets those interpreters run efficiently without as much hand-optimization."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S"
    },
    {
        "client_msg_id": "00d7fd64-d5d2-4120-805c-d32ad4e7374e",
        "type": "message",
        "text": "Java has poor startup time. But it\u2019s not really because the runtime is bad per se. It\u2019s more that the language spec requires behaviors that are very hard to implement with a system that starts up quickly.\n\nGraalVM offers an alternative that avoids a lot of that, but I believe its AOT compilation isn\u2019t 100% compatible with other JVMs, and it\u2019s a huge engineering effort.",
        "user": "UKJGU23KP",
        "ts": "1587734401.158800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UKJGU23KP",
            "ts": "1587734422.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "InQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Java has poor startup time. But it\u2019s not really because the runtime is bad per se. It\u2019s more that the language spec requires behaviors that are very hard to implement with a system that starts up quickly.\n\nGraalVM offers an alternative that avoids a lot of that, but I believe its AOT compilation isn\u2019t 100% compatible with other JVMs, and it\u2019s a huge engineering effort."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S"
    },
    {
        "client_msg_id": "a878facf-8028-44d6-8a2d-81bbf5aae697",
        "type": "message",
        "text": "*Call for Workshop Proposals: \"Hybrid Live Coding Interfaces: performance and craft\"*\n\n\u2022 *Permanent link to the call:* <https://hybrid-livecode.pubpub.org/pub/nimecfp>\n\u2022 *Shareable Tweet*: <https://twitter.com/jdkarmitage/status/1253625078899761152>\n\u2022 Venue: <https://nime2020.bcu.ac.uk/|New Interfaces for Musical Expression (NIME) 2020>, 21-25 July, Royal Birmingham Conservatoire, United Kingdom (<https://nime2020.bcu.ac.uk/#nime2020update|hosted virtually>).\n\u2022 Format: Research workshop with short \u2018lightning\u2019 presentations followed by moderated discussion.\n\u2022 Time and place: Online, three hour workshop, 21st July 2020 BST. _(hours to be decided in response to participant survey)._\n\u2022 Proposal deadline: 24th May 2020 AoE.\n\u2022 Participation fee: Free for all participants and presenters.\n\u2022 Outcome: Exchange and generation of ideas, new contacts and potential new collaborations.\n\u2022 Workshop chairs: \n\u2022 <https://shellyknotts.wordpress.com/|Shelly Knotts> (University of Durham).\n\u2022 <http://www.jackarmitage.com/|Jack Armitage> (Centre for Digital Music, Queen Mary University of London).\n\u2022 <https://slab.org/|Alex McLean> (Deutsches Museum Research Institute / FoAM Kernow).\n\u2022 Contact: <mailto:hybridlive_@jarm.is|hybridlive_@jarm.is>.\nThe live coding field has grown over the past 20 years from <http://art.runme.org/1107861145-2780-0/livecoding.pdf|a community of artists and researchers> interested in \u201cchanging rules while they are followed\u201d -- that is, the creative practice of using a computer programming language as a live interface, mainly in the performing arts. This field has since grown into the international \u201c<https://toplap.org/|TOPLAP>\u201d community, with <https://toplap.org/nodes/|dozens of local nodes> and offshoots such as <http://algorave.com/|Algorave> algorithmic dance music events, with events taking place in over a hundred cities with <https://www.theguardian.com/music/2017/nov/30/is-algorave-the-future-of-dance-music-sheffield-algomech-festival|growing> <https://cdm.link/2018/05/inside-the-livecoding-algorave-movement-and-what-it-says-about-music/|media> <https://mixmag.net/feature/algorave/4|interest>.\n\nLive coders have worked collectively to make their technology and culture accessible, with <https://github.com/toplap/awesome-livecoding#languages|almost all systems shared as free/open source software>, and attempts to instill <https://github.com/Algorave/guidelines|inclusivity, diversity> and <https://github.com/Algorave/algoraveconduct|safety> across organisations and lineups. On this foundation, <https://iclc.toplap.org/|current research> in the field is increasingly looking outward, beyond now well-established practices such as <https://algorave.com/|algorave>, livecode <https://networkmusicfestival.org/|network music> and <http://www.ludions.com/texts/2007a/|slow coding>. This includes new interfaces based on old practices including the <https://github.com/jarmitage/Stenophone/|Stenophone> made from a court transcription device, a <https://penelope.hypotheses.org/1780|live-codable loom> based on ancient weaving technology, and experiments in punk genres such as riot grrrl remixed with live codeable machine listening tools.\n\nThis workshop aims to bring together current thinking on how live coding techniques can be combined with other algorithmic practices, and augmented and hybridised with gestural and physical interfaces. A feature of this research is humility, as researchers realise that relatively young computer science innovations have everything to learn from physical interface designs, which have developed through practice over hundreds and perhaps thousands of years. This online workshop explores these themes through discussion and exploration of interfaces and practices.\n\nThis is a call for proposals for short demos, talks and other interventions exploring hybrid live coding interfaces in performance and craft. Proposals could present:",
        "user": "UEGFXUK3M",
        "ts": "1587743826.160900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEGFXUK3M",
            "ts": "1587744047.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WlgD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Call for Workshop Proposals: \"Hybrid Live Coding Interfaces: performance and craft\"",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Permanent link to the call: ",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://hybrid-livecode.pubpub.org/pub/nimecfp"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Shareable Tweet",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": ": "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://twitter.com/jdkarmitage/status/1253625078899761152"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Venue: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://nime2020.bcu.ac.uk/",
                                        "text": "New Interfaces for Musical Expression (NIME) 2020"
                                    },
                                    {
                                        "type": "text",
                                        "text": ", 21-25 July, Royal Birmingham Conservatoire, United Kingdom ("
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://nime2020.bcu.ac.uk/#nime2020update",
                                        "text": "hosted virtually"
                                    },
                                    {
                                        "type": "text",
                                        "text": ")."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Format: Research workshop with short \u2018lightning\u2019 presentations followed by moderated discussion."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Time and place: Online, three hour workshop, 21st July 2020 BST. "
                                    },
                                    {
                                        "type": "text",
                                        "text": "(hours to be decided in response to participant survey).",
                                        "style": {
                                            "italic": true
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Proposal deadline: 24th May 2020 AoE."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Participation fee: Free for all participants and presenters."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Outcome: Exchange and generation of ideas, new contacts and potential new collaborations."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Workshop chairs: "
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https://shellyknotts.wordpress.com/",
                                        "text": "Shelly Knotts"
                                    },
                                    {
                                        "type": "text",
                                        "text": " (University of Durham)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "http://www.jackarmitage.com/",
                                        "text": "Jack Armitage"
                                    },
                                    {
                                        "type": "text",
                                        "text": " (Centre for Digital Music, Queen Mary University of London)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https://slab.org/",
                                        "text": "Alex McLean"
                                    },
                                    {
                                        "type": "text",
                                        "text": " (Deutsches Museum Research Institute / FoAM Kernow)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Contact: "
                                    },
                                    {
                                        "type": "link",
                                        "url": "mailto:hybridlive_@jarm.is",
                                        "text": "hybridlive_@jarm.is"
                                    },
                                    {
                                        "type": "text",
                                        "text": "."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe live coding field has grown over the past 20 years from "
                            },
                            {
                                "type": "link",
                                "url": "http://art.runme.org/1107861145-2780-0/livecoding.pdf",
                                "text": "a community of artists and researchers"
                            },
                            {
                                "type": "text",
                                "text": " interested in \u201cchanging rules while they are followed\u201d -- that is, the creative practice of using a computer programming language as a live interface, mainly in the performing arts. This field has since grown into the international \u201c"
                            },
                            {
                                "type": "link",
                                "url": "https://toplap.org/",
                                "text": "TOPLAP"
                            },
                            {
                                "type": "text",
                                "text": "\u201d community, with "
                            },
                            {
                                "type": "link",
                                "url": "https://toplap.org/nodes/",
                                "text": "dozens of local nodes"
                            },
                            {
                                "type": "text",
                                "text": " and offshoots such as "
                            },
                            {
                                "type": "link",
                                "url": "http://algorave.com/",
                                "text": "Algorave"
                            },
                            {
                                "type": "text",
                                "text": " algorithmic dance music events, with events taking place in over a hundred cities with "
                            },
                            {
                                "type": "link",
                                "url": "https://www.theguardian.com/music/2017/nov/30/is-algorave-the-future-of-dance-music-sheffield-algomech-festival",
                                "text": "growing"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https://cdm.link/2018/05/inside-the-livecoding-algorave-movement-and-what-it-says-about-music/",
                                "text": "media"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https://mixmag.net/feature/algorave/4",
                                "text": "interest"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nLive coders have worked collectively to make their technology and culture accessible, with "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/toplap/awesome-livecoding#languages",
                                "text": "almost all systems shared as free/open source software"
                            },
                            {
                                "type": "text",
                                "text": ", and attempts to instill "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/Algorave/guidelines",
                                "text": "inclusivity, diversity"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/Algorave/algoraveconduct",
                                "text": "safety"
                            },
                            {
                                "type": "text",
                                "text": " across organisations and lineups. On this foundation, "
                            },
                            {
                                "type": "link",
                                "url": "https://iclc.toplap.org/",
                                "text": "current research"
                            },
                            {
                                "type": "text",
                                "text": " in the field is increasingly looking outward, beyond now well-established practices such as "
                            },
                            {
                                "type": "link",
                                "url": "https://algorave.com/",
                                "text": "algorave"
                            },
                            {
                                "type": "text",
                                "text": ", livecode "
                            },
                            {
                                "type": "link",
                                "url": "https://networkmusicfestival.org/",
                                "text": "network music"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "http://www.ludions.com/texts/2007a/",
                                "text": "slow coding"
                            },
                            {
                                "type": "text",
                                "text": ". This includes new interfaces based on old practices including the "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/jarmitage/Stenophone/",
                                "text": "Stenophone"
                            },
                            {
                                "type": "text",
                                "text": " made from a court transcription device, a "
                            },
                            {
                                "type": "link",
                                "url": "https://penelope.hypotheses.org/1780",
                                "text": "live-codable loom"
                            },
                            {
                                "type": "text",
                                "text": " based on ancient weaving technology, and experiments in punk genres such as riot grrrl remixed with live codeable machine listening tools.\n\nThis workshop aims to bring together current thinking on how live coding techniques can be combined with other algorithmic practices, and augmented and hybridised with gestural and physical interfaces. A feature of this research is humility, as researchers realise that relatively young computer science innovations have everything to learn from physical interface designs, which have developed through practice over hundreds and perhaps thousands of years. This online workshop explores these themes through discussion and exploration of interfaces and practices.\n\nThis is a call for proposals for short demos, talks and other interventions exploring hybrid live coding interfaces in performance and craft. Proposals could present:"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "a878facf-8028-44d6-8a2d-81bbf5aae697",
        "type": "message",
        "text": "\u2022 Examples of algorithmic practices from ancient history.\n\u2022 Recent outcomes of research and/or practice.\n\u2022 Speculative design fictions about not yet invented or impossible live coding interfaces.\n\u2022 Examples of craft culture informed community building and events relevant to live coding.\n\u2022 <https://mitpress.mit.edu/books/remediation|Remediations> of traditional craft tools, materials and processes.\n\u2022 Craft practice inspired algorithmic pattern interfaces and novel computational media.\n\u2022 Tactile, tangible, gestural and bodily interfaces that write, run and edit live programs.\n\u2022 Augmented, hybridised and AI-based live coding systems.\n\u2022 Deconstructions and recompositions of 20th century computer interfaces.\n*Submissions Deadline: 24th May 2020* \n\nNotification of acceptance will follow three weeks after the deadline.\n\nSubmissions form: `<https://forms.gle/FN2mGPZNmHr3u6Pu8>`\n\n_We recognise that many are very short on time and energy during lockdown conditions. We have therefore made the submission process as light as possible. Armed with an idea, it should only take you 5-10 minutes to write and submit a proposal. If you have any further questions please contact <mailto:hybridlive_@jarm.is|hybridlive_@jarm.is>._",
        "user": "UEGFXUK3M",
        "ts": "1587743826.161000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEGFXUK3M",
            "ts": "1587743947.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nXS",
                "elements": [
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Examples of algorithmic practices from ancient history."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Recent outcomes of research and/or practice."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Speculative design fictions about not yet invented or impossible live coding interfaces."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Examples of craft culture informed community building and events relevant to live coding."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https://mitpress.mit.edu/books/remediation",
                                        "text": "Remediations"
                                    },
                                    {
                                        "type": "text",
                                        "text": " of traditional craft tools, materials and processes."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Craft practice inspired algorithmic pattern interfaces and novel computational media."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Tactile, tangible, gestural and bodily interfaces that write, run and edit live programs."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Augmented, hybridised and AI-based live coding systems."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Deconstructions and recompositions of 20th century computer interfaces."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Submissions Deadline: 24th May 2020 ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nNotification of acceptance will follow three weeks after the deadline.\n\nSubmissions form: "
                            },
                            {
                                "type": "link",
                                "url": "https://forms.gle/FN2mGPZNmHr3u6Pu8",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "We recognise that many are very short on time and energy during lockdown conditions. We have therefore made the submission process as light as possible. Armed with an idea, it should only take you 5-10 minutes to write and submit a proposal. If you have any further questions please contact ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "mailto:hybridlive_@jarm.is",
                                "text": "hybridlive_@jarm.is",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".",
                                "style": {
                                    "italic": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "ba390768-3ddc-4c2c-9ea9-96f69777a475",
        "type": "message",
        "text": "Hey all, excited about this online workshop. Hope everyone is doing well here!\n\nBonus: happy Avril 14th if you missed it :grimacing: <https://twitter.com/lildata/status/1250158507367817216>",
        "user": "UEGFXUK3M",
        "ts": "1587744192.162600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/lildata|@lildata>: happy avril 14th <https://pbs.twimg.com/ext_tw_video_thumb/1250158372571230210/pu/img/JdDM49hhYg8GgEHH.jpg>",
                "ts": 1586895989,
                "author_name": "Lil Data",
                "author_link": "https://twitter.com/lildata/status/1250158507367817216",
                "author_icon": "https://pbs.twimg.com/profile_images/1142229600740753414/RUpTWanm_normal.png",
                "author_subname": "@lildata",
                "text": "happy avril 14th",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/lildata/status/1250158507367817216",
                "thumb_url": "https://pbs.twimg.com/ext_tw_video_thumb/1250158372571230210/pu/img/JdDM49hhYg8GgEHH.jpg",
                "thumb_width": 1080,
                "thumb_height": 1080,
                "video_html_width": 1080,
                "video_html_height": 1080,
                "video_html": "<video controls poster=\"https://pbs.twimg.com/ext_tw_video_thumb/1250158372571230210/pu/img/JdDM49hhYg8GgEHH.jpg\" width=\"1080\" height=\"1080\"><source type=\"video/mp4\" src=\"https://video.twimg.com/ext_tw_video/1250158372571230210/pu/vid/720x720/TL3yX6roOUQywibK.mp4?tag=10\"></video>",
                "id": 1,
                "original_url": "https://twitter.com/lildata/status/1250158507367817216",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WCac",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hey all, excited about this online workshop. Hope everyone is doing well here!\n\nBonus: happy Avril 14th if you missed it "
                            },
                            {
                                "type": "emoji",
                                "name": "grimacing"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/lildata/status/1250158507367817216"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "2cf66292-5574-485a-9c3d-63543e44a1c7",
        "type": "message",
        "text": "I'm working my way through Bob Nystrom's _Crafting Interpreters_ (recommended \u2014 extremely approachable guide to creating your own programming language) and <http://craftinginterpreters.com/classes.html#design-note|this part in chapter 12> just felt super relevant:\n\n&gt; We language nerds have a tendency to fetishize minimalism. Personally, I think simplicity is only part of the equation. What we really want to give the user is\u00a0_power_, which I define as:\n&gt; \n&gt; `power = breadth \u00d7 ease \u00f7 complexity`\n&gt; \n&gt; None of these are precise numeric measures. I\u2019m using math as analogy here, not actual quantification.\n&gt; \n&gt; *Breadth*\u00a0is the range of different things the language lets you express. C has a lot of breadth\u2014it\u2019s been used for everything from operating systems to user applications to games. Domain-specific languages like AppleScript and Matlab have less breadth.\n&gt; \n&gt; *Ease*\u00a0is how little effort it takes to make the language do what you want. \u201cUsability\u201d might be another term, though it carries more baggage than I want to bring in. \u201cHigher-level\u201d languages tend to have more ease than lower-level ones. Most languages have a \u201cgrain\u201d to them where some things feel easier to express than others.\n&gt; \n&gt; *Complexity*\u00a0is how big the language is (and its runtime, core libraries, tools, ecosystem, etc.). People talk about how many pages are in a language\u2019s spec, or how many keywords it has. It\u2019s how much the user has to load into their wetware before they can be productive in the system. It is the antonym of simplicity.\n&gt; \n&gt; Reducing complexity\u00a0_does_\u00a0increase power. The smaller the denominator, the larger the resulting value, so our intuition that simplicity is good is valid. However, when reducing complexity, we must take care not to sacrifice breadth or ease in the process, or the total power may go down. Java would be a strictly\u00a0_simpler_\u00a0language if it removed strings, but it probably wouldn\u2019t handle text manipulation tasks well, nor would it be as easy to get things done.\n&gt; \n&gt; The art, then is finding\u00a0_accidental_\u00a0complexity that can be omitted. Language features and interactions that don\u2019t carry their weight by increasing the breadth or ease of using the language.",
        "user": "U5STGTB3J",
        "ts": "1587746877.165500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lIV8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm working my way through Bob Nystrom's "
                            },
                            {
                                "type": "text",
                                "text": "Crafting Interpreters",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (recommended \u2014 extremely approachable guide to creating your own programming language) and "
                            },
                            {
                                "type": "link",
                                "url": "http://craftinginterpreters.com/classes.html#design-note",
                                "text": "this part in chapter 12"
                            },
                            {
                                "type": "text",
                                "text": " just felt super relevant:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We language nerds have a tendency to fetishize minimalism. Personally, I think simplicity is only part of the equation. What we really want to give the user is\u00a0"
                            },
                            {
                                "type": "text",
                                "text": "power",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", which I define as:\n\n"
                            },
                            {
                                "type": "text",
                                "text": "power = breadth \u00d7 ease \u00f7 complexity",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nNone of these are precise numeric measures. I\u2019m using math as analogy here, not actual quantification.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Breadth",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u00a0is the range of different things the language lets you express. C has a lot of breadth\u2014it\u2019s been used for everything from operating systems to user applications to games. Domain-specific languages like AppleScript and Matlab have less breadth.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Ease",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u00a0is how little effort it takes to make the language do what you want. \u201cUsability\u201d might be another term, though it carries more baggage than I want to bring in. \u201cHigher-level\u201d languages tend to have more ease than lower-level ones. Most languages have a \u201cgrain\u201d to them where some things feel easier to express than others.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Complexity",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u00a0is how big the language is (and its runtime, core libraries, tools, ecosystem, etc.). People talk about how many pages are in a language\u2019s spec, or how many keywords it has. It\u2019s how much the user has to load into their wetware before they can be productive in the system. It is the antonym of simplicity.\n\nReducing complexity\u00a0"
                            },
                            {
                                "type": "text",
                                "text": "does",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u00a0increase power. The smaller the denominator, the larger the resulting value, so our intuition that simplicity is good is valid. However, when reducing complexity, we must take care not to sacrifice breadth or ease in the process, or the total power may go down. Java would be a strictly\u00a0"
                            },
                            {
                                "type": "text",
                                "text": "simpler",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u00a0language if it removed strings, but it probably wouldn\u2019t handle text manipulation tasks well, nor would it be as easy to get things done.\n\nThe art, then is finding\u00a0"
                            },
                            {
                                "type": "text",
                                "text": "accidental",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u00a0complexity that can be omitted. Language features and interactions that don\u2019t carry their weight by increasing the breadth or ease of using the language."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587746877.165500",
        "reply_count": 9,
        "reply_users_count": 5,
        "latest_reply": "1587831372.214600",
        "reply_users": [
            "UFEQUBNNT",
            "UJN1TAYEQ",
            "U5STGTB3J",
            "UGLSY9X3J",
            "UC2A2ARPT"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "URDRJEWS0",
                    "UUQ2EQW21",
                    "UA14TGLTC",
                    "UJBAJNFLK",
                    "UML4ZEKDK"
                ],
                "count": 5
            }
        ]
    },
    {
        "client_msg_id": "f533ff45-f6b6-4f09-88d9-a1e5e2cdd222",
        "type": "message",
        "text": "Counterpoint to <@UCKRZS3DZ>\u2019s comment: \"We can make machines do it any way we like, and we can have policies that can allow you to do both. Remember, a real engineer doesn't want just a religion about how to solve a problem, like\u00a0_object-oriented_, or\u00a0_functional_, or\u00a0_imperative_, or\u00a0_logic programming_. This piece of the problem wants to be a functional program. This piece of the program wants to be imperative. This piece wants to be object-oriented. And guess what, this piece wants to be logic-based. And they all want to work together usefully. And that's because of the way the problem is structured, whatever it is. And I don't wanna think that there's any correct answer to any of those questions. It would be awful bad writing a device driver in a functional language. It would be awful bad writing anything like a symbolic manipulator in a thing with complicated syntax. It's awful bad to write a numerical program in anything but Fortran.\" \u2014Gerald Sussman <https://www.youtube.com/watch?v=O3tVctB_VSU>",
        "user": "UFEQUBNNT",
        "ts": "1587748178.165700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Gerry Sussman - We Really Don't Know How to Compute!",
                "title_link": "https://www.youtube.com/watch?v=O3tVctB_VSU",
                "author_name": "Colin Reckons",
                "author_link": "https://www.youtube.com/user/colinmcd94",
                "thumb_url": "https://i.ytimg.com/vi/O3tVctB_VSU/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Gerry Sussman - We Really Don't Know How to Compute!",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https://www.youtube.com/embed/O3tVctB_VSU?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https://www.youtube.com/watch?v=O3tVctB_VSU",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=O3tVctB_VSU"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fm=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Counterpoint to "
                            },
                            {
                                "type": "user",
                                "user_id": "UCKRZS3DZ"
                            },
                            {
                                "type": "text",
                                "text": "\u2019s comment: \"We can make machines do it any way we like, and we can have policies that can allow you to do both. Remember, a real engineer doesn't want just a religion about how to solve a problem, like\u00a0"
                            },
                            {
                                "type": "text",
                                "text": "object-oriented",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", or\u00a0"
                            },
                            {
                                "type": "text",
                                "text": "functional",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", or\u00a0"
                            },
                            {
                                "type": "text",
                                "text": "imperative",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", or\u00a0"
                            },
                            {
                                "type": "text",
                                "text": "logic programming",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". This piece of the problem wants to be a functional program. This piece of the program wants to be imperative. This piece wants to be object-oriented. And guess what, this piece wants to be logic-based. And they all want to work together usefully. And that's because of the way the problem is structured, whatever it is. And I don't wanna think that there's any correct answer to any of those questions. It would be awful bad writing a device driver in a functional language. It would be awful bad writing anything like a symbolic manipulator in a thing with complicated syntax. It's awful bad to write a numerical program in anything but Fortran.\" \u2014Gerald Sussman "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=O3tVctB_VSU"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S"
    },
    {
        "client_msg_id": "b8576cca-1cff-42b4-9823-e0c9e1eb0eaf",
        "type": "message",
        "text": "Really dig that final summarizing sentence",
        "user": "UFEQUBNNT",
        "ts": "1587748348.166000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TF=N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Really dig that final summarizing sentence"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587746877.165500",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "df4f676f-48d6-4bed-85f2-60f5e1ef82fe",
        "type": "message",
        "text": "<@UQPHR6Y3S> My work at <http://loyc.net> is specifically aimed at solving bits of that problem. I'd like to build a system that will have syntax modules, semantic modules, and a multi-language standard library.",
        "user": "UD6EXQVM0",
        "ts": "1587754382.166400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "59z8M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UQPHR6Y3S"
                            },
                            {
                                "type": "text",
                                "text": " My work at "
                            },
                            {
                                "type": "link",
                                "url": "http://loyc.net"
                            },
                            {
                                "type": "text",
                                "text": " is specifically aimed at solving bits of that problem. I'd like to build a system that will have syntax modules, semantic modules, and a multi-language standard library."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S",
        "reactions": [
            {
                "name": "open_mouth",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8595624d-6f2a-4850-942d-5b72952b8b0e",
        "type": "message",
        "text": "So far I've made the most progress on the syntax side. I haven't made a lot of progress in recent years, but I'm hoping to find someone around here with whom to partner up and design more of this. In contrast to projects mentioned above that are focused on dynamic languages, I want to focus mainly on static typing with dynamic typing as (1) a special case (like C#'s `dynamic`) and (2) an code generation target (JaveScript).",
        "user": "UD6EXQVM0",
        "ts": "1587754485.166600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1587754617.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5Xxa6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So far I've made the most progress on the syntax side. I haven't made a lot of progress in recent years, but I'm hoping to find someone around here with whom to partner up and design more of this. In contrast to projects mentioned above that are focused on dynamic languages, I want to focus mainly on static typing with dynamic typing as (1) a special case (like C#'s "
                            },
                            {
                                "type": "text",
                                "text": "dynamic",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ") and (2) an code generation target (JaveScript)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S"
    },
    {
        "client_msg_id": "f0174a1b-937e-43f5-bbd0-45fe670113f0",
        "type": "message",
        "text": "The final paragraph about removing accidental complexity from a programming language is good, but there is a whole lot of detail about *how* you do this that remains unsaid.",
        "user": "UJN1TAYEQ",
        "ts": "1587756412.167100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BJ4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The final paragraph about removing accidental complexity from a programming language is good, but there is a whole lot of detail about "
                            },
                            {
                                "type": "text",
                                "text": "how",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " you do this that remains unsaid."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587746877.165500",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "4a7dc5c1-6244-4d82-8630-1f9551376b5f",
        "type": "message",
        "text": "However, the idea that a single number, \"power\", characterizes the fitness of a language, and that the language designer's goal is to maximize this \"power\", is I think a fallacy. The reality is that you have to make compromises based on engineering tradeoffs and on the goals of your language. Maximizing breadth results in a swiss army knife; it doesn't result in the best possible tool for all possible situations. That's why we have DSLs. The power equation also asks you to increase ease and reduce complexity. In reality, you can only increase ease and decrease complexity relative to some context, and a DSL provides this context. So what I'm saying\nis that there is a tradeoff between breadth and the other desired qualities.",
        "user": "UJN1TAYEQ",
        "ts": "1587756944.167400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1587758275.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BlB5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "However, the idea that a single number, \"power\", characterizes the fitness of a language, and that the language designer's goal is to maximize this \"power\", is I think a fallacy. The reality is that you have to make compromises based on engineering tradeoffs and on the goals of your language. Maximizing breadth results in a swiss army knife; it doesn't result in the best possible tool for all possible situations. That's why we have DSLs. The power equation also asks you to increase ease and reduce complexity. In reality, you can only increase ease and decrease complexity relative to some context, and a DSL provides this context. So what I'm saying\nis that there is a tradeoff between breadth and the other desired qualities."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587746877.165500",
        "parent_user_id": "U5STGTB3J",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "ULM3U6275",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "C467FDC1-9A17-4FFC-89EE-7244CF31A5DA",
        "type": "message",
        "text": "I don\u2019t think it\u2019s the authors intention to boil it down to one variable power. He\u2019s just trying to explain some\ndesign choices he made in that chapter. I have taken this out of context just because I hoped it would make some of you interested in the other stuff he has to say around that tiny paragraph, but I can see how it\u2019s a little misleading. \n\nThe goal of the book is teaching people how to craft a programming language and not to create the best possible language. A lot of the choices he makes are to keep it simple and illustrate important concepts. I think he\u2019s doing an excellent job throughout the book making people aware of all the big and small trade offs that go into the design of a language and I hope you don\u2019t get the wrong impression from that tiny piece that I chose to present here.\n\nThat said, I do agree with your comment, <@UJN1TAYEQ>, what I'm basically trying to say is don\u2019t blame the author because there\u2019s a lot of context missing and blame me instead. :-)",
        "user": "U5STGTB3J",
        "ts": "1587758359.176600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n=qx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don\u2019t think it\u2019s the authors intention to boil it down to one variable power. He\u2019s just trying to explain some\ndesign choices he made in that chapter. I have taken this out of context just because I hoped it would make some of you interested in the other stuff he has to say around that tiny paragraph, but I can see how it\u2019s a little misleading. \n\nThe goal of the book is teaching people how to craft a programming language and not to create the best possible language. A lot of the choices he makes are to keep it simple and illustrate important concepts. I think he\u2019s doing an excellent job throughout the book making people aware of all the big and small trade offs that go into the design of a language and I hope you don\u2019t get the wrong impression from that tiny piece that I chose to present here.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "That said, I do agree with your comment, "
                            },
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": ", what I'm basically trying to say is don\u2019t blame the author because there\u2019s a lot of context missing and blame me instead. :-)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587746877.165500",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "f5b77d12-0de3-4eee-988c-18f10bb25798",
        "type": "message",
        "text": "<@U5STGTB3J> Your quotation hit a nerve, because I used to believe in that power equation. My university thesis took the power equation as its starting point, and tried to show how to design the \"one true programming language\" (not in those exact words) that had maximum expressive power. I no longer believe in this idea, so it was kind of exciting to see what I now consider to be a fundamental fallacy of language design expressed so bluntly and directly, as a simple equation.",
        "user": "UJN1TAYEQ",
        "ts": "1587759641.176800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JXn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " Your quotation hit a nerve, because I used to believe in that power equation. My university thesis took the power equation as its starting point, and tried to show how to design the \"one true programming language\" (not in those exact words) that had maximum expressive power. I no longer believe in this idea, so it was kind of exciting to see what I now consider to be a fundamental fallacy of language design expressed so bluntly and directly, as a simple equation."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587746877.165500",
        "parent_user_id": "U5STGTB3J"
    },
    {
        "client_msg_id": "0a2eb51c-9389-47a8-8d8b-99068e5997ed",
        "type": "message",
        "text": "re: hard to share across inconsistent languages\n\nMaybe that would look different if there was one common representation, and other languages were just (or could be added as) projections to/from it.\n\nI think that would fit in with what David is doing with LOYC?",
        "user": "UAVCC2X70",
        "ts": "1587768128.177300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zfde",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "re: hard to share across inconsistent languages\n\nMaybe that would look different if there was one common representation, and other languages were just (or could be added as) projections to/from it.\n\nI think that would fit in with what David is doing with LOYC?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S"
    },
    {
        "client_msg_id": "8befd61d-985a-4770-ae1b-8362e3cb266b",
        "type": "message",
        "text": "re: JavaScript faster than Java on AWS lambda\n\nMaybe that's a matter of which is faster to parse and interpret, if that's how it works (note: I'm only vaguely aware of what AWS lambda is). For example, compare:\n\n(a, b) =&gt; a+b\n\nVersus:\n\nclass X { public static int plus(int a, int b) { return a+b; } }",
        "user": "UAVCC2X70",
        "ts": "1587768314.177500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1587768379.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/w7iu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "re: JavaScript faster than Java on AWS lambda\n\nMaybe that's a matter of which is faster to parse and interpret, if that's how it works (note: I'm only vaguely aware of what AWS lambda is). For example, compare:\n\n(a, b) => a+b\n\nVersus:\n\nclass X { public static int plus(int a, int b) { return a+b; } }"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S"
    },
    {
        "client_msg_id": "5041feba-a821-4144-ae9d-2d6832eb3a46",
        "type": "message",
        "text": "<@UQPHR6Y3S> \n\nI have my own ideas about replacing a compiler (and programming language), with composing regular old programming paraphernalia that generate the code you want, from whatever data / syntax you want. The main difference is that it's not something separate from the code that's \"written in it\", and it replaces programming language as a (metaphorical) framework, with language as a (literal!) code library.\n\nI'll DM you",
        "user": "UAVCC2X70",
        "ts": "1587768725.177800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1587768778.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NVJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UQPHR6Y3S"
                            },
                            {
                                "type": "text",
                                "text": " \n\nI have my own ideas about replacing a compiler (and programming language), with composing regular old programming paraphernalia that generate the code you want, from whatever data / syntax you want. The main difference is that it's not something separate from the code that's \"written in it\", and it replaces programming language as a (metaphorical) framework, with language as a (literal!) code library.\n\nI'll DM you"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587704819.155400",
        "parent_user_id": "UQPHR6Y3S"
    },
    {
        "client_msg_id": "D0BCF9BA-0594-4898-8C7E-BA0303647654",
        "type": "message",
        "text": "We need this guy in this slack! <@UC2A2ARPT> ",
        "user": "UGLSY9X3J",
        "ts": "1587769888.178300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jT8y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We need this guy in this slack! "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587746877.165500",
        "parent_user_id": "U5STGTB3J"
    }
]