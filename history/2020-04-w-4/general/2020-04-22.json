[
    {
        "client_msg_id": "CDFABB73-E302-4CA9-9379-6699A70A5760",
        "type": "message",
        "text": "i had no idea that object spreadsheets was still being worked on\u2014it\u2019s great to see how much progress they\u2019ve made!",
        "user": "UHWC9PXBL",
        "ts": "1587532626.109900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/jlS3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "i had no idea that object spreadsheets was still being worked on\u2014it\u2019s great to see how much progress they\u2019ve made!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587409068.093400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "E0C08A4B-FE73-4B1E-8402-32B94456E8E2",
        "type": "message",
        "text": "<@UFEQUBNNT> which view are you referencing? not sure i saw it in the screen cap on the website or in the new ui video",
        "user": "UHWC9PXBL",
        "ts": "1587532850.111000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nNa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFEQUBNNT"
                            },
                            {
                                "type": "text",
                                "text": " which view are you referencing? not sure i saw it in the screen cap on the website or in the new ui video"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587409068.093400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "b28e195a-3aa2-4714-9c10-f8526f9459b4",
        "type": "message",
        "text": "<@UD6EXQVM0> Hey! I've seen your project when I was searching for existing solutions, it is indeed interesting. It is great that you are here also.\n\nThere are some things that I didn't like in loyc trees. Specifically use of literals.\n\nI wanted this tree data structure to be used by as many parties as possible. I expected it to be easily stored as JSON in text file, stored as file tree in Git or tree in IPFS. Use of literals like uint64 goes against that, since Git files are not typed and JSON numbers are expected to be numbers of JavaScript, which are doubles internally and cannot denote max value of uint64.\n\nThus, allowing different kinds of literals might create a lot of friction, many little hacks how to denote this of that kind of literals in this or that storage.\n\nMy solution to that is to have only one kind of literal: binary blob. Other kinds of values can be denoted with a wrap that will be represented equally on all storage systems: `{\"uint32\": \"\\0x00000001\"}`",
        "user": "UCKRZS3DZ",
        "ts": "1587536691.111400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCKRZS3DZ",
            "ts": "1587536876.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Et6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UD6EXQVM0"
                            },
                            {
                                "type": "text",
                                "text": " Hey! I've seen your project when I was searching for existing solutions, it is indeed interesting. It is great that you are here also.\n\nThere are some things that I didn't like in loyc trees. Specifically use of literals.\n\nI wanted this tree data structure to be used by as many parties as possible. I expected it to be easily stored as JSON in text file, stored as file tree in Git or tree in IPFS. Use of literals like uint64 goes against that, since Git files are not typed and JSON numbers are expected to be numbers of JavaScript, which are doubles internally and cannot denote max value of uint64.\n\nThus, allowing different kinds of literals might create a lot of friction, many little hacks how to denote this of that kind of literals in this or that storage.\n\nMy solution to that is to have only one kind of literal: binary blob. Other kinds of values can be denoted with a wrap that will be represented equally on all storage systems: "
                            },
                            {
                                "type": "text",
                                "text": "{\"uint32\": \"\\0x00000001\"}",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1585588913.032700",
        "parent_user_id": "UCKRZS3DZ"
    },
    {
        "client_msg_id": "aaba6eb1-ed71-42e3-be66-ab01580e8ffb",
        "type": "message",
        "text": "How to interpret it, what is number what is not, what is annotation and what is not -- all of this is decided on level higher, in the tree editor",
        "user": "UCKRZS3DZ",
        "ts": "1587536940.111800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "drf/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How to interpret it, what is number what is not, what is annotation and what is not -- all of this is decided on level higher, in the tree editor"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1585588913.032700",
        "parent_user_id": "UCKRZS3DZ"
    },
    {
        "client_msg_id": "a650163a-b6d3-4c43-a3c4-56516dc99c00",
        "type": "message",
        "text": "A blog is what you want to make of it. You can write frequent short posts, or rare long and thoughtful ones. So blogs don't imply oversharing.",
        "user": "UJBAJNFLK",
        "ts": "1587542596.112000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nrkc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A blog is what you want to make of it. You can write frequent short posts, or rare long and thoughtful ones. So blogs don't imply oversharing."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587179790.047300",
        "parent_user_id": "UCGAK10LS"
    },
    {
        "client_msg_id": "8f73bc62-6e82-4f7e-a57f-52a4fe63f8d8",
        "type": "message",
        "text": "Vladimir, LES2 is intended to be used instead of JSON and is backward-compatible with it, although I guess a JSON encoding would be... possible. Now, for LES3 I decided that in order to achieve better cross-language compatibility, it was necessary to not require all implementations to support data types like int64, so I introduced Custom Literals. I think I'll be changing the implementation of this at some point, but conceptually my new approach is that everything is a string, but could, incidentally, also be a number, a Regex, a boolean, or whatever. For example, a literal like `1234f` (single-precision float 1234) would be equivalent to `_f\"1234\"` in LES3 which is a character sequence `['1','2','3','4']` and a type marker `_f`  in which the leading underscore means \"formatted as a number literal, if possible\". So you can treat all literals as pairs of two strings. Related comment on my repo: <https://github.com/qwertie/ecsharp/issues/52#issuecomment-331034896>",
        "user": "UD6EXQVM0",
        "ts": "1587557619.112200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1587558511.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z1n65",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Vladimir, LES2 is intended to be used instead of JSON and is backward-compatible with it, although I guess a JSON encoding would be... possible. Now, for LES3 I decided that in order to achieve better cross-language compatibility, it was necessary to not require all implementations to support data types like int64, so I introduced Custom Literals. I think I'll be changing the implementation of this at some point, but conceptually my new approach is that everything is a string, but could, incidentally, also be a number, a Regex, a boolean, or whatever. For example, a literal like "
                            },
                            {
                                "type": "text",
                                "text": "1234f",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (single-precision float 1234) would be equivalent to "
                            },
                            {
                                "type": "text",
                                "text": "_f\"1234\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in LES3 which is a character sequence "
                            },
                            {
                                "type": "text",
                                "text": "['1','2','3','4']",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and a type marker "
                            },
                            {
                                "type": "text",
                                "text": "_f",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  in which the leading underscore means \"formatted as a number literal, if possible\". So you can treat all literals as pairs of two strings. Related comment on my repo: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/qwertie/ecsharp/issues/52#issuecomment-331034896"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1585588913.032700",
        "parent_user_id": "UCKRZS3DZ"
    },
    {
        "client_msg_id": "3e2aaded-1bc0-4220-b41b-e6fccef7ebde",
        "type": "message",
        "text": "Fun fact, I invented an encoding for binary blobs in JSON, which I called BAIS: <https://stackoverflow.com/a/56712198/22820>",
        "user": "UD6EXQVM0",
        "ts": "1587558195.112900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1587558200.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BrH0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fun fact, I invented an encoding for binary blobs in JSON, which I called BAIS: "
                            },
                            {
                                "type": "link",
                                "url": "https://stackoverflow.com/a/56712198/22820"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1585588913.032700",
        "parent_user_id": "UCKRZS3DZ"
    },
    {
        "client_msg_id": "3f5de551-f665-4213-8d7c-7bdc38e954c2",
        "type": "message",
        "text": "Zoom links will be posted to the sheet",
        "user": "U6KQ2S410",
        "ts": "1587562228.113400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L+m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Zoom links will be posted to the sheet"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587478348.097300",
        "parent_user_id": "U6KQ2S410"
    },
    {
        "client_msg_id": "891eeab1-c4ae-4cfd-ac28-c511fca550ca",
        "type": "message",
        "text": "Well, I just got laid off, so I hope the current situation will let me pair up with someone here on FoC and do a project!",
        "user": "UD6EXQVM0",
        "ts": "1587570854.113900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tT+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well, I just got laid off, so I hope the current situation will let me pair up with someone here on FoC and do a project!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1585583686.028900",
        "parent_user_id": "USEQV4KCH"
    },
    {
        "client_msg_id": "8c2bc666-6fc6-404a-8e13-10b6c251e28d",
        "type": "message",
        "text": "There is also BSON created by MongoDB team. There is also CBOR, which is kinda similar",
        "user": "UCKRZS3DZ",
        "ts": "1587571384.114100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SgibT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There is also BSON created by MongoDB team. There is also CBOR, which is kinda similar"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1585588913.032700",
        "parent_user_id": "UCKRZS3DZ",
        "reactions": [
            {
                "name": "confused",
                "users": [
                    "UD6EXQVM0"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "text": "This guy, where just enough extra cells exist for you to add stuff in any direction",
        "files": [
            {
                "id": "F01316M5Y56",
                "created": 1587572259,
                "timestamp": 1587572259,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UFEQUBNNT",
                "editable": false,
                "size": 87507,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F01316M5Y56/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F01316M5Y56/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F01316M5Y56-1cf76243ca/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F01316M5Y56-1cf76243ca/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F01316M5Y56-1cf76243ca/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 310,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F01316M5Y56-1cf76243ca/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 413,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F01316M5Y56-1cf76243ca/image_160.png",
                "original_w": 538,
                "original_h": 463,
                "thumb_tiny": "AwApADDRA4pcUhOBR/KgBcUYopaAExSEcU6kPSgBMZoxQDxS5oAWikzRmgBaQ9KM0hPFAEYal3VHRQBJuo3VHRQBJupC3FMooA//2Q==",
                "permalink": "https://futureofcoding.slack.com/files/UFEQUBNNT/F01316M5Y56/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F01316M5Y56-ac6fb09cdb",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": true,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nci0b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This guy, where just enough extra cells exist for you to add stuff in any direction"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UFEQUBNNT",
        "display_as_bot": false,
        "ts": "1587572261.114300",
        "client_msg_id": "1c9edb6f-0b0b-4e5f-bd3c-17360263b0d4",
        "thread_ts": "1587409068.093400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "005fb128-0ff9-4030-9065-3433c89fc7fd",
        "type": "message",
        "text": "The analogue of implementing an interface for a struct in Go in order to call a function like sort.Sort would be to project/join your way to having the right fields for applying another, first class relation. Like a SQL statement with parameters, such as `SELECT a FROM $tbl` .",
        "user": "UFEQUBNNT",
        "ts": "1587572583.114700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GmBG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The analogue of implementing an interface for a struct in Go in order to call a function like sort.Sort would be to project/join your way to having the right fields for applying another, first class relation. Like a SQL statement with parameters, such as "
                            },
                            {
                                "type": "text",
                                "text": "SELECT a FROM $tbl",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587276251.075500",
        "parent_user_id": "U012FRV0EV7"
    },
    {
        "client_msg_id": "2BEB55BE-934D-471F-9632-E13761670EB6",
        "type": "message",
        "text": "ahh i thought you meant something way more literal by fisheye lol",
        "user": "UHWC9PXBL",
        "ts": "1587578741.115700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QVPu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ahh i thought you meant something way more literal by fisheye lol"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587409068.093400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "D138A942-BE04-47C1-B759-7794DD98AA2C",
        "type": "message",
        "text": "yeah i like their cell structure a lot",
        "user": "UHWC9PXBL",
        "ts": "1587578753.116200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Oie",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah i like their cell structure a lot"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587409068.093400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "4D30C164-B7AC-432A-9B1F-0C31646FF045",
        "type": "message",
        "text": "The Googler book on how different engineering is with tens of thousands of developers is apparently out! <https://twitter.com/gergelyorosz/status/1253051516228952067|https://twitter.com/gergelyorosz/status/1253051516228952067>",
        "user": "UFEQUBNNT",
        "ts": "1587586029.117700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/GergelyOrosz|@GergelyOrosz>: I'm reading the #flamingoBook, \"Software Engineering at Google\". A good read to see how the dev process evolves with *lots* of devs.\n\nGoogle: 30K devs. 60K+ commits/day. All languages have strict style guides. Before merging a \"language style guide expert\" also needs to review. <https://pbs.twimg.com/media/EWO7s5CWkAM0CMb.jpg>",
                "ts": 1587585736,
                "author_name": "Gergely Orosz",
                "author_link": "https://twitter.com/GergelyOrosz/status/1253051516228952067",
                "author_icon": "https://pbs.twimg.com/profile_images/673095429748350976/ei5eeouV_normal.png",
                "author_subname": "@GergelyOrosz",
                "text": "I'm reading the #flamingoBook, \"Software Engineering at Google\". A good read to see how the dev process evolves with *lots* of devs.\n\nGoogle: 30K devs. 60K+ commits/day. All languages have strict style guides. Before merging a \"language style guide expert\" also needs to review. <https://pbs.twimg.com/media/EWO7s5CWkAM0CMb.jpg>",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/gergelyorosz/status/1253051516228952067",
                "image_url": "https://pbs.twimg.com/media/EWO7s5CWkAM0CMb.jpg",
                "image_width": 1200,
                "image_height": 671,
                "image_bytes": 58607,
                "id": 1,
                "original_url": "https://twitter.com/gergelyorosz/status/1253051516228952067",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n9R3D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The Googler book on how different engineering is with tens of thousands of developers is apparently out! "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/gergelyorosz/status/1253051516228952067",
                                "text": "https://twitter.com/gergelyorosz/status/1253051516228952067"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587586029.117700",
        "reply_count": 31,
        "reply_users_count": 9,
        "latest_reply": "1587680564.152600",
        "reply_users": [
            "UFEQUBNNT",
            "UC2A2ARPT",
            "UE0ETTCG7",
            "UEQ6M68H0",
            "UCUSW7WVD",
            "UKJGU23KP",
            "U79HM6726",
            "UJBAJNFLK",
            "UBSMEUXAA"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "4F4909FC-00E9-4FBE-92CE-2E66AE23BF3A",
        "type": "message",
        "text": "(I work at Google but I don\u2019t have anything to do with the book.)",
        "user": "UFEQUBNNT",
        "ts": "1587586063.118500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vrwQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(I work at Google but I don\u2019t have anything to do with the book.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587586029.117700",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "C4AF722D-5205-4779-A02F-3CAB0FEB396C",
        "type": "message",
        "text": "Yeah, I guess that was a little too non-literal :sweat_smile:",
        "user": "UFEQUBNNT",
        "ts": "1587586131.119200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LWc5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, I guess that was a little too non-literal "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587409068.093400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "de996a18-94ec-4299-a490-0c760fd90b18",
        "type": "message",
        "text": "Is Google's code still all stored in a giant monorepo?",
        "user": "UC2A2ARPT",
        "ts": "1587588789.119700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+NX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is Google's code still all stored in a giant monorepo?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587586029.117700",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "68DD837E-01FA-48B6-A2DE-1FB10000C2A9",
        "type": "message",
        "text": "Almost al of it. The open source projects sometimes find other arrangements to better support outside collaboration.",
        "user": "UFEQUBNNT",
        "ts": "1587588887.121700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q+E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Almost al of it. The open source projects sometimes find other arrangements to better support outside collaboration."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587586029.117700",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "8f33e153-5544-418f-83d0-7ddb6b02aa5a",
        "type": "message",
        "text": "<@UFB8STN7K> I missed your message. We are still documenting GT. Our current focus is to make the environment itself be the description. To this end, we have documents and interactive slideshows inside the environment.",
        "user": "UE1JQM9HQ",
        "ts": "1587588958.121900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rvDR1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFB8STN7K"
                            },
                            {
                                "type": "text",
                                "text": " I missed your message. We are still documenting GT. Our current focus is to make the environment itself be the description. To this end, we have documents and interactive slideshows inside the environment."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1585860839.083000",
        "parent_user_id": "UFB8STN7K",
        "reactions": [
            {
                "name": "heart_eyes",
                "users": [
                    "UFPPABQ7P"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "958c1a19-606e-41f7-bc67-4c25b635d0ce",
        "type": "message",
        "text": "I came here to ask the same monorepo question. The question I'm always so curious about with monorepos is what you do about your CI? In my personal repos, one of my biggest annoyances is waiting for CI to run, and the main way I keep the CI time as short as possible is modularizing my code into different repos.",
        "user": "UE0ETTCG7",
        "ts": "1587592959.122300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VS1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I came here to ask the same monorepo question. The question I'm always so curious about with monorepos is what you do about your CI? In my personal repos, one of my biggest annoyances is waiting for CI to run, and the main way I keep the CI time as short as possible is modularizing my code into different repos."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587586029.117700",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "7802c940-70de-4669-97cb-e5bdc8afbbef",
        "type": "message",
        "text": "I'm guessing they probably use heuristics to determine which parts have to be rebuilt? But I'm surprised there's not more discussion of how that technique works. In my opinion *no one* should be using a monorepo without a solution to that problem.",
        "user": "UE0ETTCG7",
        "ts": "1587593045.122500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sDG/n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm guessing they probably use heuristics to determine which parts have to be rebuilt? But I'm surprised there's not more discussion of how that technique works. In my opinion "
                            },
                            {
                                "type": "text",
                                "text": "no one",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " should be using a monorepo without a solution to that problem."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587586029.117700",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "9705466F-031D-40A7-8EBD-AD46136F8BDB",
        "type": "message",
        "text": "I\u2019m not too eager to go on the Permanent Record about corp internals, so I will just point at the book again and hope it answers that question. :sweat_smile:",
        "user": "UFEQUBNNT",
        "ts": "1587593198.124100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WJa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019m not too eager to go on the Permanent Record about corp internals, so I will just point at the book again and hope it answers that question. "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587586029.117700",
        "parent_user_id": "UFEQUBNNT",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UE0ETTCG7",
                    "UCKRZS3DZ",
                    "UBSMEUXAA",
                    "UA14TGLTC"
                ],
                "count": 5
            }
        ]
    },
    {
        "client_msg_id": "df608a43-88e4-4279-86de-1dddbc6588b4",
        "type": "message",
        "text": "Fair :slightly_smiling_face:",
        "user": "UE0ETTCG7",
        "ts": "1587593644.124500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HaZU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fair "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587586029.117700",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "d9e8960b-5c4b-4485-8c8c-334432ab2a4a",
        "type": "message",
        "text": "There is no better evidence for the \"system is broken\" assertion, than the gigantosaur that is the google central code base, which is so large they don't even want to admit how big it is, because it shows that massive code duplication is going on.  It was 2 billion lines in 2015, and probably over 10 billion lines now. Clearly it is easier for the engineers to reinvent the wheel than search through the giant pile of stuff they have. We have yet to enter the era of interchangeable parts, and that will be a revolution.",
        "user": "UEQ6M68H0",
        "ts": "1587594076.124700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1587594086.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s87y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There is no better evidence for the \"system is broken\" assertion, than the gigantosaur that is the google central code base, which is so large they don't even want to admit how big it is, because it shows that massive code duplication is going on.  It was 2 billion lines in 2015, and probably over 10 billion lines now. Clearly it is easier for the engineers to reinvent the wheel than search through the giant pile of stuff they have. We have yet to enter the era of interchangeable parts, and that will be a revolution."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587586029.117700",
        "parent_user_id": "UFEQUBNNT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U79HM6726"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "F54E9F26-7AAD-4929-9013-22C6CCC79D5C",
        "type": "message",
        "text": "I think it\u2019d be more accurate to say it\u2019s easier to reinvent and/or copy a wheel than to repurpose one.",
        "user": "UFEQUBNNT",
        "ts": "1587595417.127200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFEQUBNNT",
            "ts": "1587595477.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Lrvt3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think it\u2019d be more accurate to say it\u2019s easier to reinvent and/or copy a wheel than to repurpose one."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587586029.117700",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "d6cab1db-0192-4a00-8ecd-9f1419f03c91",
        "type": "message",
        "text": "<@UE0ETTCG7> your CI question should be answered by <https://bazel.build|https://bazel.build>. The unit of integration doesn't really have to be a repo.",
        "user": "UCUSW7WVD",
        "ts": "1587596734.127500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Bazel - a fast, scalable, multi-language and extensible build system",
                "title_link": "https://bazel.build/",
                "fallback": "Bazel - a fast, scalable, multi-language and extensible build system",
                "image_url": "https://bazel.build/images/bazel-og-image.png",
                "from_url": "https://bazel.build/",
                "image_width": 250,
                "image_height": 250,
                "image_bytes": 15253,
                "service_icon": "https://bazel.build/images/favicon-32x32.png",
                "service_name": "bazel.build",
                "id": 1,
                "original_url": "https://bazel.build"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "37QV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE0ETTCG7"
                            },
                            {
                                "type": "text",
                                "text": " your CI question should be answered by "
                            },
                            {
                                "type": "link",
                                "url": "https://bazel.build",
                                "text": "https://bazel.build"
                            },
                            {
                                "type": "text",
                                "text": ". The unit of integration doesn't really have to be a repo."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587586029.117700",
        "parent_user_id": "UFEQUBNNT",
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UE0ETTCG7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "2af83e2f-356e-499f-9264-dea9f6a01258",
        "type": "message",
        "text": "<@UFEQUBNNT> you bet, i would wager there is tons of copy/paste going on inside that monstrous pile of code. Contrast that with a set of well tested, documented components that do one small thing well. Lego vs. the library of congress.",
        "user": "UEQ6M68H0",
        "ts": "1587599984.128000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JWi7=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UFEQUBNNT"
                            },
                            {
                                "type": "text",
                                "text": " you bet, i would wager there is tons of copy/paste going on inside that monstrous pile of code. Contrast that with a set of well tested, documented components that do one small thing well. Lego vs. the library of congress."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1587586029.117700",
        "parent_user_id": "UFEQUBNNT"
    }
]