[
    {
        "client_msg_id": "6ec962cb-c9b9-408f-867d-7fe44f68ba83",
        "type": "message",
        "text": "<https://croquet.io/>\n\n&gt; We're still in pre-Alpha, but our website has gone live!\n\n&gt; Croquet is a new distributed synchronization tool for games and apps. There are no servers. Instead clients are kept in sync using a public network of shared reflectors.",
        "user": "U8A5MS6R1",
        "ts": "1572480548.381300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1572480604.000000"
        },
        "thread_ts": "1572480548.381300",
        "reply_count": 16,
        "reply_users_count": 6,
        "latest_reply": "1573026738.143100",
        "reply_users": [
            "U8A5MS6R1",
            "UEQ6M68H0",
            "UHDQ62M4P",
            "UE6EFEPTQ",
            "UJ6LDMMN0",
            "UMWF81HTP"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UHZUS56SV",
                    "ULM3U6275",
                    "UF6RLAL7J",
                    "UA14TGLTC",
                    "UJ6LDMMN0",
                    "U5TCAFTD3",
                    "UMWF81HTP"
                ],
                "count": 7
            }
        ]
    },
    {
        "client_msg_id": "682241d4-853a-439b-bbfb-4f77424d00d5",
        "type": "message",
        "text": "Is this the same or spin-off from the other croquet? <https://en.wikipedia.org/wiki/Croquet_Project>",
        "user": "U8A5MS6R1",
        "ts": "1572480651.381600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "image_url": "https://upload.wikimedia.org/wikipedia/en/0/0f/Adding_Notes_To_3D_objects_and_places.jpg",
                "image_width": 424,
                "image_height": 320,
                "image_bytes": 14827,
                "title": "Croquet Project",
                "title_link": "https://en.wikipedia.org/wiki/Croquet_Project",
                "from_url": "https://en.wikipedia.org/wiki/Croquet_Project",
                "author_name": "Wikipedia",
                "author_link": "https://en.wikipedia.org/",
                "text": "The Croquet Project was a software project intended to promote the continued development of the Croquet open-source software development kit to create and deliver collaborative multi-user online applications.\nImplemented in Squeak Smalltalk, Croquet supports communication, collaboration, resource sharing, and synchronous computation among multiple users. Applications created with the Croquet software development kit (SDK) can be used to support highly scalable collaborative data visualization, virtual learning and problem solving environments, 3D wikis, online gaming environments (massively multiplayer online role-playing games (MMORPGs)), and privately maintained or interconnected multiuser virtual environments.\nSince release of the Croquet SDK in 2007, the SDK has not been under active development. All further development of the technology has occurred under the Open Cobalt effort.",
                "fallback": "wikipedia: Croquet Project",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png",
                "id": 1,
                "original_url": "https://en.wikipedia.org/wiki/Croquet_Project"
            }
        ],
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "1c461e0f-d91a-4c86-aa4f-39dc18f291e3",
        "type": "message",
        "text": "Got an answer. Same model, different implementation: <https://twitter.com/yoshikiohshima/status/1189699781636919296>",
        "user": "U8A5MS6R1",
        "ts": "1572481914.382000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/yoshikiohshima|@yoshikiohshima>: <https://twitter.com/chatur_shalabh|@chatur_shalabh> <https://twitter.com/bbupton|@bbupton> It is actually based on the same model, and in fact David Smith is leading this version of Croquet, too. This time around, it is based on JavaScript so that people can just run a collaborative application on a website (and you can write one without writing any server code.)",
                "ts": 1572481506,
                "author_name": "\u3088\u3057\u304d",
                "author_link": "https://twitter.com/yoshikiohshima/status/1189699781636919296",
                "author_icon": "https://pbs.twimg.com/profile_images/1851460934/matrix_normal.jpg",
                "author_subname": "@yoshikiohshima",
                "text": "<https://twitter.com/chatur_shalabh|@chatur_shalabh> <https://twitter.com/bbupton|@bbupton> It is actually based on the same model, and in fact David Smith is leading this version of Croquet, too. This time around, it is based on JavaScript so that people can just run a collaborative application on a website (and you can write one without writing any server code.)",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/yoshikiohshima/status/1189699781636919296",
                "id": 1,
                "original_url": "https://twitter.com/yoshikiohshima/status/1189699781636919296",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "2a522ae7-f394-476e-8768-45e325bcb746",
        "type": "message",
        "text": "Companies like Autodesk which uses Autolisp as the core language of their system (the only  large company i am aware of basing their technology on LISP) doesn't care if their language is popular. It is their secret weapon and makes AutoCad infinitely programmable. My question remains, what were the technical factors behind the decision to ban Erlang? Plenty of companies use a custom-made secret sauce to generate their products (Facebook uses Hack for front end if i am not mistaken, a derivative of PHP). When you dominate a sector using your tools, why would you ban the tool? Ericsson was kicking butt back in 1998, and still is a top-3 player in Telecom infrastructure equipment. So little information leaks out of companies about why things did or did not pan out. We usually have to wait 20 years or more to find out the true story.",
        "user": "UEQ6M68H0",
        "ts": "1572482335.382300",
        "team": "T5TCAFTA9",
        "thread_ts": "1572414362.359200",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "2dc78432-14d8-44e6-88a9-cd3a3f38eb6b",
        "type": "message",
        "text": "croquet is very fast, and simple. However, if the relay server has no state whatsoever, this means that you can have conflicts between shared resources. Most multiplayer games i am aware of, have a server which is stateful, and enforces various rules, and dishes out exclusive resources, and arbitrates between the clients. Handling latency effects gracefully is an art form, and there are surprisingly few programmers who have built the networking stacks for various games. It is a super-narrow specialty of the programming industry, those people who know the networking aspects very well. Making sure that lower latency doesn't give you too much of an advantage is a very subtle area for which i have the highest admiration. I sure hope they have good debugging tools; it is no easy thing to debug multiple computers running in parallel at a distance, with lag times, and retransmissions causing random fluctuations in arrival time of correct packets.",
        "user": "UEQ6M68H0",
        "ts": "1572483156.382700",
        "team": "T5TCAFTA9",
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "UFLN9JFRT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "F9F6EAF0-B929-4FEA-A79B-11D0A20FE52D",
        "type": "message",
        "text": "i think you\u2019re exactly right: like with partial evaluation, each stage has a different amount of information/invariants available from the host and user",
        "user": "UHWC9PXBL",
        "ts": "1572491707.384200",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "E8A70730-9CD2-4DC4-BCFF-0D1DB6B5B788",
        "type": "message",
        "text": "haha that\u2019s ok",
        "user": "UHWC9PXBL",
        "ts": "1572491735.384500",
        "team": "T5TCAFTA9",
        "thread_ts": "1572270935.312600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "f22ad97c-17d8-4c1e-9fd6-eccc276eb26a",
        "type": "message",
        "text": "Yes, if the server blindly passes on packets (merely orders them), then that means the client is authorative (determines the truth of what it sends), which is prone to cheating. It can say, \"I did damage to player X\", and there will be no way to resolve if that is true or not.",
        "user": "UHDQ62M4P",
        "ts": "1572497076.384800",
        "team": "T5TCAFTA9",
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "4b6f21cb-c547-4cd2-b321-42a9c42bc4e2",
        "type": "message",
        "text": "Some of you guys give me a hard time about how long my responses are. Sorry i don't have the time to make them shorter. The reason i dumped a bucket of icewater on Leandro's lecture, is that he hasn't done his homework. Unlike 99% of the people on this forum, i was programming when the InMos Transputer came out, and i downloaded the user manual for Occam and tried to learn it (impossible). And remember the Connection Machine that was going to revolutionize the world? Only a genius like Danny Hillis could get that thing to say \"hello world\". Or how about the recent disaster, the Adapteva Parallela machine? The hardware was great; you have thousands of independent processors, with an orders of magnitude improvement in CPU power vs. energy consumption. It failed miserably even though the hardware worked, because nobody could debug their programs!",
        "user": "UEQ6M68H0",
        "ts": "1572506344.385200",
        "team": "T5TCAFTA9",
        "thread_ts": "1572414362.359200",
        "parent_user_id": "UEQ6M68H0",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "bfe46b27-d186-4f17-881e-b4d10ff0749e",
        "type": "message",
        "text": "It was not mainly technical, it was a strategic decision, Jane was at Ericsson and helped open source it, I think she explain it a little more in some   other talks you can find in youtube, I've spoken with Joe and Robert about it and they tell similar things",
        "user": "UBN9AFS0N",
        "ts": "1572511945.385500",
        "team": "T5TCAFTA9",
        "thread_ts": "1572414362.359200",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "ee004825-3085-4822-bfc3-4d7ea9488aa4",
        "type": "message",
        "text": "<https://arstechnica.com/gaming/2019/10/explaining-how-fighting-games-use-delay-based-and-rollback-netcode/>",
        "user": "UE6EFEPTQ",
        "ts": "1572512990.385700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Ars Technica",
                "title": "Explaining how fighting games use delay-based and rollback netcode",
                "title_link": "https://arstechnica.com/gaming/2019/10/explaining-how-fighting-games-use-delay-based-and-rollback-netcode/",
                "text": "How to design your game for optimal play over a network.",
                "fallback": "Ars Technica: Explaining how fighting games use delay-based and rollback netcode",
                "image_url": "https://cdn.arstechnica.net/wp-content/uploads/2019/10/netcode-galaxy-brain-760x380.jpg",
                "image_width": 500,
                "image_height": 250,
                "from_url": "https://arstechnica.com/gaming/2019/10/explaining-how-fighting-games-use-delay-based-and-rollback-netcode/",
                "image_bytes": 109352,
                "service_icon": "https://cdn.arstechnica.net/wp-content/themes/ars/assets/img/ars-ios-icon-d9a45f558c.png",
                "id": 1,
                "original_url": "https://arstechnica.com/gaming/2019/10/explaining-how-fighting-games-use-delay-based-and-rollback-netcode/"
            }
        ],
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "866f331d-2fd6-4ece-91bb-3f873f71037c",
        "type": "message",
        "text": "\u2191 the only article you'll need to read on that subject :smile:",
        "user": "UE6EFEPTQ",
        "ts": "1572513051.386000",
        "team": "T5TCAFTA9",
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "809b357d-dcde-4c1c-a898-5f7969468708",
        "type": "message",
        "text": "TL;DR: delay local client, guess remote client, if you were wrong, roll back and replay all the input events",
        "user": "UE6EFEPTQ",
        "ts": "1572513126.386200",
        "team": "T5TCAFTA9",
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "853d6e56-0ed6-4a7e-88d6-9118d3bb7126",
        "type": "message",
        "text": "<http://croquet.io|croquet.io> uses \"Reflectors\", which doesn't look like the Teatime 2-phase commit approach to me: <https://en.wikipedia.org/wiki/Croquet_Project#Synchronization_architecture>",
        "user": "UE6EFEPTQ",
        "ts": "1572514225.386400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1572514292.000000"
        },
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "24f0c87f-2c27-4b4a-a2ff-4d32b570186b",
        "type": "message",
        "text": "The new <http://croquet.io|croquet.io> (\"Croquet V\") is by David Smith, Alan Kay's original collaborator on Croquet",
        "user": "UE6EFEPTQ",
        "ts": "1572514499.387300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1572515237.000000"
        },
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "7deb64e0-dbcd-40f3-a311-8cd539c1fa32",
        "type": "message",
        "text": "<https://croquet.io/sdk/docs/tutorial-2_1_model_view_reflector.html>\n\u2191 how reflectors work",
        "user": "UE6EFEPTQ",
        "ts": "1572515148.387600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1572515158.000000"
        },
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "26548262-52e0-4647-9a80-007fc26c798d",
        "type": "message",
        "text": "<http://www.croquet.zone/>",
        "user": "UE6EFEPTQ",
        "ts": "1572515340.388100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1572516626.000000"
        },
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "de778ef8-67bf-4371-ac0e-9bcc7a9adc8e",
        "type": "message",
        "text": "<http://archagon.net/blog/2018/03/24/data-laced-with-history/> neat post!",
        "user": "UGLSY9X3J",
        "ts": "1572537422.388700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Archagon Was Here",
                "title": "Data Laced with History: Causal Trees &amp; Operational CRDTs",
                "title_link": "http://archagon.net/blog/2018/03/24/data-laced-with-history/",
                "text": "An in-depth exploration of a new class of expressive, performant, and intuitive CRDTs, together with macOS and iOS sample code.",
                "fallback": "Archagon Was Here: Data Laced with History: Causal Trees &amp; Operational CRDTs",
                "thumb_url": "http://archagon.net/images/blog/causal-trees/header.jpg",
                "from_url": "http://archagon.net/blog/2018/03/24/data-laced-with-history/",
                "thumb_width": 1800,
                "thumb_height": 772,
                "service_icon": "http://archagon.net/images/favicon/favicon-96x96.png",
                "id": 1,
                "original_url": "http://archagon.net/blog/2018/03/24/data-laced-with-history/"
            }
        ],
        "thread_ts": "1572537422.388700",
        "reply_count": 4,
        "reply_users_count": 4,
        "latest_reply": "1572614275.442800",
        "reply_users": [
            "UHWC9PXBL",
            "UD3AK9JRF",
            "UBM0S2AN4",
            "UJ6LDMMN0"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UPX3PH28N"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "FFEE0995-33A1-44DB-B6DF-34102327B76C",
        "type": "message",
        "text": "this post rules",
        "user": "UHWC9PXBL",
        "ts": "1572541226.389200",
        "team": "T5TCAFTA9",
        "thread_ts": "1572537422.388700",
        "parent_user_id": "UGLSY9X3J"
    },
    {
        "client_msg_id": "58105f7a-9aa0-4a11-b8be-7dd4f9dc2b49",
        "type": "message",
        "text": "Ah interesting thanks <@UE6EFEPTQ>. Maybe I read too much into the name. I like the ideas in David Reed's original psuedo time thesis (<https://dspace.mit.edu/handle/1721.1/16279>) and related ideas of virtual time (David Jefferson). The new croquet seems to share some ideas at least because models live entirely in 'simulation time': <https://croquet.io/sdk/docs/tutorial-2_5_sim_time_and_future.html>. So models live in simulated time and advance only as they receive messages. I assume all messages must have a simulated time timestamp. So messages can be auto-ordered but I wonder how they handle lost messages. Wish they had more info on the internals.",
        "user": "U8A5MS6R1",
        "ts": "1572543087.389400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1572543106.000000"
        },
        "attachments": [
            {
                "title": "Tutorial: :bulb: Simulation Time and Future Sends - Croquet SDK 0.2.5",
                "title_link": "https://croquet.io/sdk/docs/tutorial-2_5_sim_time_and_future.html",
                "text": "Documentation for the Croquet SDK",
                "fallback": "Tutorial: \ud83d\udca1 Simulation Time and Future Sends - Croquet SDK 0.2.5",
                "from_url": "https://croquet.io/sdk/docs/tutorial-2_5_sim_time_and_future.html",
                "service_name": "croquet.io",
                "id": 1,
                "original_url": "https://croquet.io/sdk/docs/tutorial-2_5_sim_time_and_future.html"
            }
        ],
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "UMWF81HTP"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "4DD9CEC8-D5C6-45A8-9E2A-C80D03F37551",
        "type": "message",
        "text": "This post was hugely helpful for me in understanding CRDTs practically. The sample code was too disorganized, undocumented, and broken to be of much use. But it was proof to me that you could build interesting things out of *RDTs. Most things I read on them feel like monad explainers. ",
        "user": "UD3AK9JRF",
        "ts": "1572544055.394400",
        "team": "T5TCAFTA9",
        "thread_ts": "1572537422.388700",
        "parent_user_id": "UGLSY9X3J",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "C96C727D-8D12-457A-9066-09AA4A9DA660",
        "type": "message",
        "text": "For people building systems based on term rewriting, how important has knowledge of the literature been to you? Are you just motivated by the idea of TW, or have you gotten deeper into it?",
        "user": "UD3AK9JRF",
        "ts": "1572544321.396900",
        "team": "T5TCAFTA9",
        "thread_ts": "1572217129.305100",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "6b146f83-9b78-48a1-a857-c6230ebe8adf",
        "type": "message",
        "text": "Maybe link that post to <#C5T9GPWFL|general> ?",
        "user": "UE6EFEPTQ",
        "ts": "1572546039.405800",
        "team": "T5TCAFTA9",
        "thread_ts": "1572217129.305100",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "6CD54EC4-093C-4B5E-88EF-F7515BF2AA8D",
        "type": "message",
        "text": "<@UEQ6M68H0> I agree programmability is important, but historically it seems to get trumped by economic concerns. For example, I programmed a CM2 and Fortran90 was actually easier than Fortan to use. The problem was you had to wait in a queue with other users to run your program, which was often slower than using your workstation (if your program could fit on your workstation). What killed traditional supercomputers were compute clusters, which were actually harder to program but cheaper and therefore more accessible. Likewise, GPUs are harder to program but are far cheaper for the compute power.\n\nI suspect Smalltalk would be ubiquitous today had they made the core free and sold libraries and consulting services. Instead they chose to price it well outside of what typical users could afford, thinking that programmability justified the high cost.",
        "user": "ULM3U6275",
        "ts": "1572546653.412700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1572547733.000000"
        },
        "thread_ts": "1572414362.359200",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "e70e6d0d-31da-4b54-bb5f-a7abc75ba142",
        "type": "message",
        "text": "<@ULM3U6275> The traditional supercomputers were effectively a DOD sponsored product, and succeeded/failed based on the funding of that group. The average firm can't even use a supercomputer. But the Inmos transputer was cheap, and so was the Adapteva Parallela. So it wasn't about cost, but tooling. One thing often overlooked is that our entire mathematics tradition starting from Greek proof, is based on a single line of reasoning, applied sequentially, and we humans do not yet possess the mathematical knowledge that permits easy parallel thinking. The minute you have more than 100 processes operating at once, you can't even fit the threads on the screen, so visualizing and tracking it becomes extremely cumbersome and confusing. I suspect that once we have screens that are 100 million pixels - and we are getting there, it should be easier to handle. For comparison purposes the upcoming Apple 6K monitor has 20 million pixels. There are some types of projects that just demand a lot of pixels to do properly.",
        "user": "UEQ6M68H0",
        "ts": "1572548856.414300",
        "team": "T5TCAFTA9",
        "thread_ts": "1572414362.359200",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "110C2AB5-284E-47D3-9029-857B6D5F0BE5",
        "type": "message",
        "text": "<@UD3AK9JRF> I started by looking at specification languages, and found several that are based on term rewriting, in particular the OBJ family. Then I remembered that rewriting is also heavily used in computer algebra, a technology related to my intended application domains in computational science. ai ended up reading quite a bit of the literature, and found it useful.",
        "user": "UJBAJNFLK",
        "ts": "1572549001.418300",
        "team": "T5TCAFTA9",
        "thread_ts": "1572217129.305100",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD3AK9JRF"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "Still hoping to hear what these folk think about this thread:\n- Kayia/Kaya <@UJCHWTMH6> <@U8A87T2NQ>\n- Infusion <@UEH6T3RJB>\n- Maraca <@UJDQKSSJ0>\n- Mech <@UCGR73CAY>",
        "user": "UE6EFEPTQ",
        "ts": "1572551532.429200",
        "thread_ts": "1572217129.305100",
        "root": {
            "client_msg_id": "468B09D9-9447-48F2-B94F-A18397CF57A9",
            "type": "message",
            "text": "<https://youtu.be/9fhnJpCgtUw> really thought provoking talk on using pattern matching for better data transforms, and then for better debugging, and then for better core generation ",
            "user": "UHWC9PXBL",
            "ts": "1572217129.305100",
            "team": "T5TCAFTA9",
            "attachments": [
                {
                    "service_name": "YouTube",
                    "service_url": "https://www.youtube.com/",
                    "title": "\"Meander: Declarative Explorations at the Limits of FP\" by Jimmy Miller",
                    "title_link": "https://youtu.be/9fhnJpCgtUw",
                    "author_name": "Strange Loop",
                    "author_link": "https://www.youtube.com/channel/UC_QIfHvN9auy2CoOdSfMWDw",
                    "thumb_url": "https://i.ytimg.com/vi/9fhnJpCgtUw/hqdefault.jpg",
                    "thumb_width": 480,
                    "thumb_height": 360,
                    "fallback": "YouTube Video: \"Meander: Declarative Explorations at the Limits of FP\" by Jimmy Miller",
                    "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/9fhnJpCgtUw?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                    "video_html_width": 400,
                    "video_html_height": 225,
                    "from_url": "https://youtu.be/9fhnJpCgtUw",
                    "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                    "id": 1,
                    "original_url": "https://youtu.be/9fhnJpCgtUw"
                }
            ],
            "thread_ts": "1572217129.305100",
            "reply_count": 33,
            "reply_users_count": 8,
            "latest_reply": "1572713549.488300",
            "reply_users": [
                "UEBG0NPDK",
                "UHWC9PXBL",
                "UE6EFEPTQ",
                "UEP7RL0HX",
                "UN7K3UT4G",
                "UJBAJNFLK",
                "UD3AK9JRF",
                "UCUSW7WVD"
            ],
            "subscribed": false
        },
        "client_msg_id": "2eb8322d-1bf6-4b93-9e47-a1c3fe5867c0"
    },
    {
        "client_msg_id": "0ace3aa4-54bc-4887-a3bc-8440b0b06619",
        "type": "message",
        "text": "That's a Slack thread link, even though it may look like a YouTube link! \u2191",
        "user": "UE6EFEPTQ",
        "ts": "1572551587.429900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1572551609.000000"
        }
    },
    {
        "client_msg_id": "6fea49bb-6b18-4454-b94b-ec6779002a87",
        "type": "message",
        "text": "<@UD3AK9JRF> What I'm doing probably doesn't fit the academic definition of term rewriting. Could you post some links to top pages on the subject?",
        "user": "UE6EFEPTQ",
        "ts": "1572551745.430200",
        "team": "T5TCAFTA9",
        "thread_ts": "1572217129.305100",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "61a102da-a030-4a4e-9041-28c082216de9",
        "type": "message",
        "text": "I settled on a .. let's say \"structure rewriting\" programming model very early on - in the 80s. I had a brief detour to using unification instead of one-sided matching in the 90s, but went back to simpler rewrites since.",
        "user": "UE6EFEPTQ",
        "ts": "1572551933.430400",
        "team": "T5TCAFTA9",
        "thread_ts": "1572217129.305100",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "fda98dc8-a3ec-4d3e-b7ce-0745dcd65e2f",
        "type": "message",
        "text": "<@UEQ6M68H0> \u201cThe traditional supercomputers were effectively a DOD sponsored product,\u201d Yes, and the lab I worked at was DOD funded too but it was still moving everything to workstation compute clusters by the mid 1990s because they wanted to make the best use of their funding.",
        "user": "ULM3U6275",
        "ts": "1572552878.430600",
        "team": "T5TCAFTA9",
        "thread_ts": "1572414362.359200",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "ce7a2e36-f97c-42df-8651-9264146d87de",
        "type": "message",
        "text": "<@UEQ6M68H0> \u201cThe minute you have more than 100 processes operating at once, you can\u2019t even fit the threads on the screen\u201d That\u2019s true, though IME the problem is more the model used. I think the Lua authors put it well:\n\n\u201c\u2026we did not (and still do not) believe in the standard multithreading model, which is preemptive concurrency with shared memory: we still think that no one can write correct programs in a language where \u2018a=a+1\u2019 is not deterministic.\u201d (from The Evolution of Lua)\n\nEliminating either shared memory (with actors) or preemptive concurrency (with coroutines) goes a long way towards solving these problems, yet these solutions are strongly resisted in the mainstream programming culture.",
        "user": "ULM3U6275",
        "ts": "1572553145.430800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1572559810.000000"
        },
        "thread_ts": "1572414362.359200",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "7620ff7f-66f0-4f6d-ad5b-0e6c12e9cf23",
        "type": "message",
        "text": "BTW the interesting idea (to me) here isn't just a distributed library for games, but the idea that you have replicated objects with some consistency guarantees. All software needs this most of the time we're just implementing consistency and replication via custom RPCs and APIs (even though we don't call it that) and thinking of our data as half here, half there. Pushing replication and synchrony to the lower layer, solves some of these issues. As-is corquet is not a full solution, but the core idea of having timestamps in messages and multi-versions of objects on each host represents the distributed out-of-sync reality pretty well.",
        "user": "U8A5MS6R1",
        "ts": "1572560656.431300",
        "team": "T5TCAFTA9",
        "thread_ts": "1572480548.381300",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UE6EFEPTQ",
                    "UMWF81HTP"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "8652b197-7cd6-4ebf-a3aa-12b8ab0f16df",
        "type": "message",
        "text": "I just watched OP. I kept waiting for the speaker to mention SQL, but he never did. He mentioned joins several times, but not SQL. Lots of people know SQL, and while I often complain about it it does show the input and output pretty well. Why not start from SQL syntax? Original:\n\n```\n(m/search game-info\n  {:player (m/scan  {name ?name class ?class})\n   :weapons (m/scan {:name ?weapon :allowed-classes #{?class} :standard-upgrade !upgrades})\n   :stats (?weapon {:attack-power ?attack-power :upgrades [!upgrades ...]})\n   :third-party (m/not #{?weapon})}\n  {:name ?name\n   :weapon ?weapon\n   :class ?class\n   :attack-power ?attack-power\n   :upgrades !upgrades})\n```\n\nSQL on steroids:\n\n```\nselect {:name         player.name\n        :weapon       weapons.name\n        :class        player.class\n        :attack-power stats.attack-power \n        :upgrades     weapons.standard-upgrade ++ stats.upgrades}\n  from player, weapons, stats\n  where weapons.class = player.class\n    and weapon not in third-party\n```\n\nNot homoiconic, tho :smile:",
        "user": "UCUSW7WVD",
        "ts": "1572562515.431600",
        "team": "T5TCAFTA9",
        "thread_ts": "1572217129.305100",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UE6EFEPTQ"
                ],
                "count": 1
            }
        ]
    }
]