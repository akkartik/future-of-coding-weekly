[
    {
        "client_msg_id": "fb130530-9226-4d44-a494-ba49ab466a20",
        "type": "message",
        "text": "Ah, sorry, I couldn\u2019t tell if you were him, since your profile didn\u2019t say. I guess I just assumed.",
        "user": "UNLS33M61",
        "ts": "1571723168.069200",
        "team": "T5TCAFTA9",
        "thread_ts": "1570717115.019800",
        "parent_user_id": "UNGNT3BKR"
    },
    {
        "client_msg_id": "D69762EE-E463-4969-84F1-89380549A4D1",
        "type": "message",
        "text": "Hey <@UCUSW7WVD>, I finally got to read your two published blog posts about mu. They were very useful to learn about what you are working on and also to understand your values. I like your focus on simplicity. Or maybe it's minimalism?\n\nI couldn\u2019t help but think of MLIR (<https://github.com/tensorflow/mlir#mlir-talks>), which seems strangely similar and different at the same time. You have very specific ideas about each of the three layers you propose. MLIR is obviously much more complex because its goals are different (e.g. optimization), but it is also fundamentally about layers between the machine and a high-level language. And it\u2019s about multiple layers (which is how it differs from LLVM).\n\nMu also reminds me of <http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf>. Again layers, here much more granular than what you\u2019re up to.\n\nI have also been fascinated by the idea of \u201ccleaning up\u201d the stack, remove all the cruft we don\u2019t really need anymore, and design a more sleek and minimal base system that a single individual can comprehend completely. Much like in the spirit of Alan Kay's VPRI STEPS project.\n\nA friend of mine is working on an interesting project that is also in a way related, however focusing on the past to remove complexity: <https://www.pagetable.com/?p=1373>\n\nIt's tough for a single individual to build the whole stack, especially for today's hardware, even if you figure out an infrastructure that will save you so much time and effort to build things on \u2014 the figuring out part is what takes so long.\n\nBut if you can\u2019t build the whole thing, then it's difficult to decide on which side of the spectrum to start. You (as many others) chose the low-level, bare metal side, and build it up from there. For sure that has potential to make these lower levels so much more effective. But it's a long way to get to a level that application programmers or even \u201cend-users\u201d will want to touch at all.\n\nIf you start on the other end, you can build pretty much anything on any hardware and focus on interaction, but you buy that flexibility with dependencies. And I haven\u2019t seen many projects starting on that side tackling the dependency issue by methodically working on removing or replacing such dependencies. That could be a sign that figuring out the interaction is hard enough to never get to the cleaning up dependencies part, but frankly I think many developers are fine with the dependencies and probably don\u2019t think about it too much. The web is often a good platform choice where you can make yourself feel better about dependencies \u201cbecause they are (based on) open standards\u201d. This never really worked for me (and clearly that's my problem, not the web's), but I doubt we get to a great place by piling onto a massive stack that gets more and more difficult to understand and maintain.\n\nAh, well, not sure where I was going with this\u2026 I enjoyed reading your blog posts and they made me think about this. So here you go. Not sure if that\u2019s really useful feedback.",
        "user": "U5STGTB3J",
        "ts": "1571758378.103600",
        "team": "T5TCAFTA9",
        "thread_ts": "1570949673.034500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "63b5156d-3b80-4599-8df0-301088e67c69",
        "type": "message",
        "text": "Thanks <@U5STGTB3J>!\n\nThe way I see it, there's only one place to start if you want to disentangle the whole thing, since upper layers depend on lower ones but not _vice versa_. If the project takes longer than one lifetime, then it does.\n\nThe challenge of starting with an existing system and removing dependencies is that you have to already know the existing system well. And if the existing system is hard to get up to speed on, that's harder. My whole goal is to get to a comprehensible system, and that runs hard into a chicken-and-egg loop.\n\nThere _is_ one project that tries to remove dependencies: <http://landley.net/aboriginal> (and descendants)\n\nSomeone inspired by Mu may one day port its ideas back to Linux. That would make me happy.\n\nRe X16, I had another person get in touch after my posts with plans to build an 8-bit processor. So this seems like a very fertile connection to explore indeed.",
        "user": "UCUSW7WVD",
        "ts": "1571758944.103800",
        "team": "T5TCAFTA9",
        "thread_ts": "1570949673.034500",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "d46474c8-0a22-4408-8ba8-55d3ee0cfff4",
        "type": "message",
        "text": "ah, no worries. you'll have to find the real one to answer your questions :wink:\nWith \"this is similar\" did you mean libfive or my video?",
        "user": "UNGNT3BKR",
        "ts": "1571762766.104000",
        "team": "T5TCAFTA9",
        "thread_ts": "1570717115.019800",
        "parent_user_id": "UNGNT3BKR"
    }
]