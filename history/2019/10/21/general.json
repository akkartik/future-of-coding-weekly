[
    {
        "client_msg_id": "f28afde1-c3e2-4fcf-aa4d-e6438b68cf64",
        "type": "message",
        "text": "You could try LuaLaTeX, which is LaTeX extended with the Lua scripting language.",
        "user": "UJN1TAYEQ",
        "ts": "1571613969.099000",
        "team": "T5TCAFTA9",
        "thread_ts": "1571522910.064800",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "96a4c809-c447-4452-8cfc-6548570e1632",
        "type": "message",
        "text": "What is the use case for this?\n\nNot sure if this helps you at all, there is a spreadsheet with a bit more power here: <https://github.com/audreyt/ethercalc>\nIt is opensource, multiuser, has most of the main formulas , even things like dget. I added GUI functions to it, such as buttons and input boxes, so you can build a UI.\n\nAnyway... am interested in use cases. If you know of good use cases, I would like to know.",
        "user": "UP6G25H35",
        "ts": "1571617516.099200",
        "team": "T5TCAFTA9",
        "thread_ts": "1561063200.049600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "e4558c8a-60ee-4afa-8f30-051813c2b3e1",
        "type": "message",
        "text": "So I did try it, this video was maybe best <https://www.youtube.com/watch?v=x32tBLGrLAQ&amp;list=PLf1PDMa3qVP27-oVMEdCX6FR1Ok972cpI&amp;index=2> as could not figure out much from the git hub page. ... the git hub pages wants more example sheets. e.g. how you do a sum would be good.",
        "user": "UP6G25H35",
        "ts": "1571617630.099400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Mesh Spreadsheet - alpha demo 2019-10-11 (part 2: tables)",
                "title_link": "https://www.youtube.com/watch?v=x32tBLGrLAQ&amp;index=2",
                "author_name": "Chris Pearson",
                "author_link": "https://www.youtube.com/user/chrispysd",
                "thumb_url": "https://i.ytimg.com/vi/x32tBLGrLAQ/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Mesh Spreadsheet - alpha demo 2019-10-11 (part 2: tables)",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/x32tBLGrLAQ?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=x32tBLGrLAQ&amp;index=2",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=x32tBLGrLAQ&amp;list=PLf1PDMa3qVP27-oVMEdCX6FR1Ok972cpI&amp;index=2"
            }
        ],
        "thread_ts": "1561063200.049600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "44a6cea1-f4e5-40ff-84b2-862608bfd7ad",
        "type": "message",
        "text": "<@UCUSW7WVD> Or there's CollapseOS, for an alternative vision of post civilization collapse computing (<http://collapseos.org|collapseos.org>). But the Long Now Foundation is my go-to for this sort of long term thinking. Kragen considers an artifact that is durable and reliable enough to stay in working order for an extremely long time, without maintenance. Consider instead a very long lived institution that preserves and maintains the technology. Like the European monasteries that preserved knowledge during the dark ages, the Church that ran 200 year cathedral building programs, or the Ise Shrine in Japan, which has been rebuilt every 20 years in adjacent sites for over 1,400 years.  <https://blog.longnow.org/02019/09/11/long-term-building-in-japan/>",
        "user": "UJN1TAYEQ",
        "ts": "1571620575.099700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Blog of the Long Now",
                "title": "Long-term Building in Japan",
                "title_link": "https://blog.longnow.org/02019/09/11/long-term-building-in-japan/",
                "text": "When I started working with Stewart Brand over two decades ago, he told me about the ideas behind Long Now, and how we might build the seed for a very long-lived institution. . . Read More",
                "fallback": "Blog of the Long Now: Long-term Building in Japan",
                "image_url": "https://cdn-images-1.medium.com/max/2560/1*JsFe3-EsJEK5pi_gQCYNvA.jpeg",
                "ts": 1568194988,
                "from_url": "https://blog.longnow.org/02019/09/11/long-term-building-in-japan/",
                "image_width": 375,
                "image_height": 250,
                "image_bytes": 1037399,
                "service_icon": "https://blog-cdn.longnow.org/wp-content/themes/bristle-redux/img/favicon.png",
                "id": 1,
                "original_url": "https://blog.longnow.org/02019/09/11/long-term-building-in-japan/"
            }
        ],
        "thread_ts": "1570632039.005300",
        "parent_user_id": "U5TCAFTD3",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJFN50C00"
                ],
                "count": 1
            },
            {
                "name": "slightly_smiling_face",
                "users": [
                    "UJFN50C00"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "A51D5498-90B7-4A14-993D-A2A66FAA0BFD",
        "type": "message",
        "text": "Good point <@UMXUZ97LJ> how the undo command often groups multiple actions together.  Text editors are also complicated by per file undo stacks coupled with cross file operations like find and replace.",
        "user": "UA14TGLTC",
        "ts": "1571627838.103600",
        "team": "T5TCAFTA9",
        "thread_ts": "1571417532.010400",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "7A44F8E7-0E93-4C54-916C-5BDA2A91D9AF",
        "type": "message",
        "text": "great to see that you\u2019re still working on this <@UBRKVHMCL> will play with it more tomorrow",
        "user": "UHWC9PXBL",
        "ts": "1571632280.105300",
        "team": "T5TCAFTA9",
        "thread_ts": "1561063200.049600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "8acfaeaa-ffd9-4c89-aa97-209262e09af7",
        "type": "message",
        "text": "There are many aspects to computing over longer time scales. One is preserving a full system, as in the link given by <@UCUSW7WVD>. A similar idea but for software only is proposed in <https://doi.org/10.1145/2814228.2814250>. Keeping archived apps or Web pages usable (as referred to by <@ULM3U6275>) is a much more widely shared concern. What I referred to is yet something else: continued development over many years. Archived tools are not sufficient for that. As development goes on, you want to add new developers, new dependencies, perhaps new development tools. This requires a whole ecosystem and a whole community that values stability. Real-life example are Java/JVM, Emacs, or Common Lisp. In either one you can pick up code that was last modified five years ago and continue to work on it without feeling like you are doing archeology.",
        "user": "UJBAJNFLK",
        "ts": "1571636768.105500",
        "team": "T5TCAFTA9",
        "thread_ts": "1570632039.005300",
        "parent_user_id": "U5TCAFTD3"
    },
    {
        "client_msg_id": "f7f0cfc5-6a61-46c2-aefd-32eccd35850f",
        "type": "message",
        "text": "Lout (<https://savannah.nongnu.org/projects/lout/>) looks promising but also a bit abandoned.",
        "user": "UJBAJNFLK",
        "ts": "1571637178.105700",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Lout - Summary [Savannah]",
                "title_link": "https://savannah.nongnu.org/projects/lout/",
                "text": "Savannah is a central point for development, distribution and maintenance of free software, both GNU and non-GNU.",
                "fallback": "Lout - Summary [Savannah]",
                "from_url": "https://savannah.nongnu.org/projects/lout/",
                "service_icon": "https://savannah.nongnu.org/images/Savannah.theme/icon.png",
                "service_name": "savannah.nongnu.org",
                "id": 1,
                "original_url": "https://savannah.nongnu.org/projects/lout/"
            }
        ],
        "thread_ts": "1571522910.064800",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "20ac613c-c323-4602-b7aa-bef8bc0ab475",
        "type": "message",
        "text": "<http://phantomos.org/>\nPhantom is, basically, a virtual machine (VM) working in a huge persistent virtual memory. Part of the VM classes (some classes, called 'internal') are implemented in kernel, giving VM code access to low level kernel services. Persistent virtual memory is completely orthogonal to object space and VM (no relation between, for example, object boundary and virtual memory page, etc.) and is implemented so that abrupt computer failure or loss of power leaves system in coherent state.",
        "user": "U8A5MS6R1",
        "ts": "1571637850.106000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1571639140.000000"
        },
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UJBAJNFLK",
                    "ULM3U6275"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "733534eb-66c6-4020-a3fc-92c648d56fa5",
        "type": "message",
        "text": "<@UP6G25H35> thanks for trying it out!\n\nI just wanted the power of traditional programming with a spreadsheet interface. In practice, from a programmer's perspective it's best for writing backend \u201cfunctional core\u201d logic with a separate wrapper to take care of the IO \u201cimperative shell\u201d layer. Examples are (a) web server backends in a spreadsheet (URL routing to views, template generation, etc); (b) supercharged calculators (eg payment schedules with arbitrary length). The files are 'just JavaScript' so they can be uploaded as a backend for a website and a frontend can easily be created using HTML/CSS/JS.\n\nMesh had to:\n\n(a) be powerful enough to write its backend as a Mesh sheet. in particular Mesh specialises in processing and generating data of arbitrary length as arrays and tables, as shown in the GIF on the front page; it also allows functions to live in spreadsheet cells as first-class data\n\n(b) have sheets that are stored as text files for easy version control via git and other diff tools\n\n(c) have minimal installation requirements (no need to have admin rights to run locally - can run in a web browser without an internet connection and without needing to run a local server). Otherwise it'd be a dead duck in most enterprise environments where people don't have control over their computers.\n\nI am probably going to replace the formula language with something else that's easier to parse, and the project has stalled a bit while I figure that out (there's a lot of work happening behind the scenes!). This post has more on the current status: <https://news.ycombinator.com/item?id=21114010>",
        "user": "UBRKVHMCL",
        "ts": "1571642404.106500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UBRKVHMCL",
            "ts": "1571658258.000000"
        },
        "thread_ts": "1561063200.049600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "82d7b980-ece0-493b-a7e3-fcde2e6d5063",
        "type": "message",
        "text": "A great lecture by Richard Feldman, on the Elm team, entitled \"Why isn't functional programming the norm\", explores why some languages are popular.  <https://www.youtube.com/watch?v=QyJZzq0v7Z4>",
        "user": "UEQ6M68H0",
        "ts": "1571645656.107500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1571903888.000000"
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Why Isn't Functional Programming the Norm? \u2013 Richard Feldman",
                "title_link": "https://www.youtube.com/watch?v=QyJZzq0v7Z4",
                "author_name": "Metosin",
                "author_link": "https://www.youtube.com/channel/UC1lFJanm5Wp6IpNk-2C1Sxw",
                "thumb_url": "https://i.ytimg.com/vi/QyJZzq0v7Z4/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Why Isn't Functional Programming the Norm? \u2013 Richard Feldman",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/QyJZzq0v7Z4?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=QyJZzq0v7Z4",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=QyJZzq0v7Z4"
            }
        ],
        "thread_ts": "1571645656.107500",
        "reply_count": 29,
        "reply_users_count": 6,
        "latest_reply": "1571870990.167800",
        "reply_users": [
            "UJ6LDMMN0",
            "UP448V1PB",
            "UJN1TAYEQ",
            "UAVCC2X70",
            "ULM3U6275",
            "UEQ6M68H0"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "UJVEPCVT6",
                    "UL3CJ7YKC",
                    "UBSMEUXAA",
                    "UP3FH4CLU",
                    "UE0ETTCG7"
                ],
                "count": 5
            }
        ]
    },
    {
        "client_msg_id": "98b974e3-4075-467c-b4d6-0acd51d1bd0c",
        "type": "message",
        "text": "Is there a TL;DW (too long; don't watch) somewhere? :wink:",
        "user": "UJ6LDMMN0",
        "ts": "1571650425.107700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJ6LDMMN0",
            "ts": "1571650431.000000"
        },
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0",
        "reactions": [
            {
                "name": "grin",
                "users": [
                    "UL3CJ7YKC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "1FEE2AF1-3755-4B8F-83BA-DA9DE555D067",
        "type": "message",
        "text": "I really like Audrey Tang\u2019s work btw, especially on the spreadsheet in 99 lines. It challenges me to reduce the size of the code base without compromising functionality <https://www.aosabook.org/en/500L/web-spreadsheet.html>",
        "user": "UBRKVHMCL",
        "ts": "1571652060.109800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UBRKVHMCL",
            "ts": "1571652142.000000"
        },
        "thread_ts": "1561063200.049600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "59dcbbfb-d61e-4cbc-9e8f-1ff6a3dcd9c7",
        "type": "message",
        "text": "It's interesting that he doesn't consider Swift or Kotlin to be functional languages.",
        "user": "UP448V1PB",
        "ts": "1571671871.110700",
        "team": "T5TCAFTA9",
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "20616892-12ba-4053-a18d-8058935f06aa",
        "type": "message",
        "text": "I'd say anything that has functions as first class objects qualifies :wink:",
        "user": "UP448V1PB",
        "ts": "1571671916.110900",
        "team": "T5TCAFTA9",
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "16e121f5-f268-4b01-8d9b-43ddb6b2172a",
        "type": "message",
        "text": "<@U8A5MS6R1> Exactly: this happens across the whole system. I mentioned this a \u201cprogram level\u201d only because its simpler and because of this there is a higher chance its solved which I am interested in :slightly_smiling_face:.\n\nChecking Unison! Thanks everyone who mentioned.",
        "user": "UL3CJ7YKC",
        "ts": "1571673186.121000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1571673212.000000"
        },
        "thread_ts": "1571489526.050200",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "3fe26afb-5202-427f-96cb-fd8734253c1e",
        "type": "message",
        "text": "<@U8A5MS6R1>\nAs you mentioned:\nUnless we go a bit further and instead of attaching string metadata to the id, define multiple pieces of metadata to link to the entities `set` and `A`.\n\nThe main requirement is you want only one place where the string `A` exists and it is referenced everywhere else by its id.\n-------\nYes exactly! I want this! And it is really interesting because it gets to a weird place, where every name must be unique across the system! And if we are working with multiple systems which merge (have interaction) any time in future (like web) we might need global unique names!\n\nWhich seems is totally opposite of the standard view of \u201cavoid global things\u201d. (Okay, sure, it\u2019s mainly against vars, not consts.)\nHowever, if we are able to rename things easily I am totally ok with using globally unique names.",
        "user": "UL3CJ7YKC",
        "ts": "1571673624.121500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1571673685.000000"
        },
        "thread_ts": "1571489526.050200",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "717264e7-59c3-4669-aa59-8368c63a6b9c",
        "type": "message",
        "text": "I don't consider a language to be completely functional unless it allows me to write an entire program in functional style, with no side effects. Virtually all modern languages have first class functions, but most of those require the use of side effects to write any realistic program. So, in addition to function values, I'm also looking for functional data structures (that can be efficiently mutated without using side effects) and functional i/o.",
        "user": "UJN1TAYEQ",
        "ts": "1571679074.122700",
        "team": "T5TCAFTA9",
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "f8c50af6-5ced-46c1-897f-2f6f52412b89",
        "type": "message",
        "text": "Yeah I was being slightly facetious, but I do think Swift and Kotlin are as functional as something like Scala, and it seems weird to classify them as OO first.",
        "user": "UP448V1PB",
        "ts": "1571680354.122900",
        "team": "T5TCAFTA9",
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "7701c26b-bd65-4625-a6aa-f9a4f596768a",
        "type": "message",
        "text": "I don't know that much about Clojure, but I assume that too exposes all of the OO concepts in Java, for interop if nothing else.",
        "user": "UP448V1PB",
        "ts": "1571680455.123100",
        "team": "T5TCAFTA9",
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "5ead1d5e-cd2f-423a-bf08-db39d49d674a",
        "type": "message",
        "text": "In what way are Swift and Kotlin functional languages, rather than OO first? I just don't see it. Smalltalk is surely an OO first language, and it has always had first class functions and higher order functions as a core feature, only the terminology is different. Functions are called \"blocks\", the \"reduce\" or \"fold\" higher order function is called \"inject:into:\", and so on. Kotlin and Swift support both mutable and immutable objects. Immutable objects are an OO technique for controlling and limiting side effects on data structure objects, and are not the same as functional data structures.",
        "user": "UJN1TAYEQ",
        "ts": "1571681397.124100",
        "team": "T5TCAFTA9",
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "37054c46-6b65-482d-9593-48d407873ea0",
        "type": "message",
        "text": "Clojure has functional data structures. So that's a big difference, and an important step towards full support for functional programming.",
        "user": "UJN1TAYEQ",
        "ts": "1571681706.124300",
        "team": "T5TCAFTA9",
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "602cf812-43e3-4600-8de6-cd761aaeda0a",
        "type": "message",
        "text": "Maybe functional programming isn't the norm because there are so few examples of real functional programming languages, and because there is perhaps widespread confusion about what functional programming actually is.",
        "user": "UJN1TAYEQ",
        "ts": "1571682062.124500",
        "team": "T5TCAFTA9",
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "a40d2871-fdc1-4ef3-8aa6-e089641d07a6",
        "type": "message",
        "text": "Anyone here attending LIVE tomorrow, or Splash this week?",
        "user": "UCGR73CAY",
        "ts": "1571682392.124900",
        "team": "T5TCAFTA9",
        "thread_ts": "1571682392.124900",
        "reply_count": 7,
        "reply_users_count": 4,
        "latest_reply": "1571919168.202000",
        "reply_users": [
            "UF5PAGQQ4",
            "UCGR73CAY",
            "UGS8TUVK6",
            "UML4ZEKDK"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "351ACA0D-6109-4EAE-B4A7-1491CC0A0292",
        "type": "message",
        "text": "Hey I'll be at LIVE tomorrow!",
        "user": "UF5PAGQQ4",
        "ts": "1571682720.125500",
        "team": "T5TCAFTA9",
        "thread_ts": "1571682392.124900",
        "parent_user_id": "UCGR73CAY"
    },
    {
        "client_msg_id": "6d448574-3d21-442e-bfbe-616e6db5e3d6",
        "type": "message",
        "text": "yeah, if your definition is that narrow, I'm guessing Haskell is it, for languages that have *some* use outside of academia?",
        "user": "UP448V1PB",
        "ts": "1571682934.125700",
        "team": "T5TCAFTA9",
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "025259b1-32bb-453e-8bd7-b9bdc340f87d",
        "type": "message",
        "text": "I don't know of any other language that doesn't provide mutable data structures.",
        "user": "UP448V1PB",
        "ts": "1571682978.125900",
        "team": "T5TCAFTA9",
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "e2865774-062c-427b-9d51-f0c866072cbe",
        "type": "message",
        "text": "Kotlin and Swift were both designed with a very deliberate functional mindset, but also under the constraints that they had to support an existing ecosystem. (much like Clojure and Scala)",
        "user": "UP448V1PB",
        "ts": "1571683039.126100",
        "team": "T5TCAFTA9",
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "647e0fb9-1528-4edb-984b-5b72cd6b60c6",
        "type": "message",
        "text": "they are multi-paradigm, of course, but then so is pretty much every other language",
        "user": "UP448V1PB",
        "ts": "1571683100.126300",
        "team": "T5TCAFTA9",
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "7d76c22f-d577-4d2b-bb54-db65c8e5378a",
        "type": "message",
        "text": "I think the speaker is totally right that none of the popular languages are where they are because of OO, but that's also kind of a straw man argument, because I'm not sure I've heard anyone claim that.",
        "user": "UP448V1PB",
        "ts": "1571683272.126500",
        "team": "T5TCAFTA9",
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "bcd235d3-9738-472e-ba64-c8f009a1ada5",
        "type": "message",
        "text": "OO was fashionable in the 90s and 00s, so most new languages supported that paradigm. The pendulum has swung back into FP, so new languages support that paradigm better, (and existing languages, even Java, start to as well.)",
        "user": "UP448V1PB",
        "ts": "1571683345.126700",
        "team": "T5TCAFTA9",
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "d4a8a170-8687-4aeb-b479-300c3f75926c",
        "type": "message",
        "text": "Great, see you then!",
        "user": "UCGR73CAY",
        "ts": "1571683418.126900",
        "team": "T5TCAFTA9",
        "thread_ts": "1571682392.124900",
        "parent_user_id": "UCGR73CAY",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UF5PAGQQ4"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "efc6894f-168d-4266-9f69-d62c1b33912b",
        "type": "message",
        "text": "languages get popular because of how easy it is to get things done in them, and that's a function of a lot of things, like tooling support, number of available libraries, etc.",
        "user": "UP448V1PB",
        "ts": "1571683442.127100",
        "team": "T5TCAFTA9",
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "b9eea4aa-0c0f-4722-a16b-65bc7bc9b4c3",
        "type": "message",
        "text": "The video lists Elm, Closure and ReasonML as functional languages. This is accurate. Elm is a pure functional language. Clojure and ReasonML are imperative/OO as well as functional, but they both support functional data structures: so you can efficiently mutate data structures from inside a pure function, without side effects.",
        "user": "UJN1TAYEQ",
        "ts": "1571684078.127300",
        "team": "T5TCAFTA9",
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "e993b3ba-43a3-4bff-a085-8691afbf9824",
        "type": "message",
        "text": "Definition: functional programming is where you write code in terms of pure mathematical functions, which do not have side effects, and where the result returned by a function is determined only by the argument values.",
        "user": "UJN1TAYEQ",
        "ts": "1571684139.127500",
        "team": "T5TCAFTA9",
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "0c860b33-f88d-4ed9-95ee-a2bab6ad6b9f",
        "type": "message",
        "text": "Cargo cult functional programming is where you reuse syntax from functional languages, and sprinkle the word \"functional\" around your language documentation, without actually providing meaningful support for functional programming.",
        "user": "UJN1TAYEQ",
        "ts": "1571684311.127700",
        "team": "T5TCAFTA9",
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "761a5fb1-3733-40c3-b68f-ad57f926e19c",
        "type": "message",
        "text": "OCaml and Microsoft's F# are also functional languages, based on the fact that they support functional data structures.",
        "user": "UJN1TAYEQ",
        "ts": "1571686013.127900",
        "team": "T5TCAFTA9",
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0"
    },
    {
        "client_msg_id": "AE799953-ABE3-4322-8510-05FB5FBE90B8",
        "type": "message",
        "text": "(It is my project.) Shallow tables can represent trees of data, so that won\u2019t be an issue for Mesh. See, eg: <http://archive.vector.org.uk/art10500340> <https://m.youtube.com/watch?v=hzPd3umu78g>",
        "user": "UBRKVHMCL",
        "ts": "1571686285.130000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UBRKVHMCL",
            "ts": "1571688039.000000"
        },
        "attachments": [
            {
                "text": "The Journal of the British APL Association. The BAA promotes the APLs, terse programming languages derived from Iverson\u2019s mathematical notation.",
                "fallback": "The Journal of the British APL Association. The BAA promotes the APLs, terse programming languages derived from Iverson\u2019s mathematical notation.",
                "from_url": "http://archive.vector.org.uk/art10500340",
                "service_icon": "http://archive.vector.org.uk/favicon.ico",
                "service_name": "archive.vector.org.uk",
                "id": 1,
                "original_url": "http://archive.vector.org.uk/art10500340"
            },
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Dyalog '18: High-performance Tree Wrangling, the APL Way",
                "title_link": "https://m.youtube.com/watch?v=hzPd3umu78g",
                "author_name": "Dyalog Usermeeting",
                "author_link": "https://www.youtube.com/user/DyalogConference",
                "thumb_url": "https://i.ytimg.com/vi/hzPd3umu78g/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Dyalog '18: High-performance Tree Wrangling, the APL Way",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/hzPd3umu78g?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://m.youtube.com/watch?v=hzPd3umu78g",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 2,
                "original_url": "https://m.youtube.com/watch?v=hzPd3umu78g"
            }
        ],
        "thread_ts": "1569855917.108100",
        "parent_user_id": "UF5PAGQQ4"
    },
    {
        "client_msg_id": "4e8e4c08-8e86-4ca4-94e2-12d3ac7cf8b3",
        "type": "message",
        "text": "I think \"functional\" and \"pure functional\" are getting confused",
        "user": "UAVCC2X70",
        "ts": "1571687299.130700",
        "team": "T5TCAFTA9",
        "thread_ts": "1571645656.107500",
        "parent_user_id": "UEQ6M68H0"
    }
]