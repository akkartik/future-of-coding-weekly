[
    {
        "client_msg_id": "2bbad525-a7b1-4f8b-93d4-687dc7f439ca",
        "type": "message",
        "text": "Ha, I've seen a number of \"Rust is the new Javascript\" blog posts. Here's one: <https://blog.usejournal.com/moving-from-nodejs-to-rust-in-2019-62c0b85d2fa7>",
        "user": "UJN1TAYEQ",
        "ts": "1571012929.268000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Medium",
                "title": "Moving from NodeJS to Rust in 2019",
                "title_link": "https://blog.usejournal.com/moving-from-nodejs-to-rust-in-2019-62c0b85d2fa7",
                "text": "For a more nuanced introduction and in-depth introduction to web programming in Rut, read part 1 of X in my series.",
                "fallback": "Medium: Moving from NodeJS to Rust in 2019",
                "image_url": "https://miro.medium.com/max/1125/1*QcibeYRbU1wZcwlKTplarg@2x.jpeg",
                "fields": [
                    {
                        "title": "Reading time",
                        "value": "4 min read",
                        "short": true
                    }
                ],
                "ts": 1552334414,
                "from_url": "https://blog.usejournal.com/moving-from-nodejs-to-rust-in-2019-62c0b85d2fa7",
                "image_width": 248,
                "image_height": 250,
                "image_bytes": 167243,
                "service_icon": "https://cdn-images-1.medium.com/fit/c/152/152/1*8I-HPL0bfoIzGied-dzOvA.png",
                "id": 1,
                "original_url": "https://blog.usejournal.com/moving-from-nodejs-to-rust-in-2019-62c0b85d2fa7"
            }
        ],
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "e83dfc88-6766-43e4-ac02-e8a61cb011ab",
        "type": "message",
        "text": "Clojure is a Lisp (a really nice one IMO), and it is definitely competing with Javascript on the server (compiles to JVM) and in the web browser (compiles to Javascript).",
        "user": "UJN1TAYEQ",
        "ts": "1571013059.268300",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "UC2A2ARPT",
                    "UF5PAGQQ4"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "4600e91c-d143-4e4b-80ab-024f6f2db79b",
        "type": "message",
        "text": "Clojure seems to be a counter-example earlier on in this thread, showing that parens are not a big deal.",
        "user": "UCUSW7WVD",
        "ts": "1571013138.268500",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "83479276-eb2d-421b-9c7a-2c3a1da8425b",
        "type": "message",
        "text": "As for Bel, it doesn't even have support for numbers, so why are we comparing it to production ready programming languages? I interpret it as an exercise in programming language design, and I believe that useful insights can come out of such an exercise. Programming language design is an important field of study.",
        "user": "UJN1TAYEQ",
        "ts": "1571013409.268700",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC",
                    "UC2A2ARPT"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "4b6af653-5ea8-4137-b9ad-0eac78d51c1d",
        "type": "message",
        "text": "<https://scattered-thoughts.net/writing/imp-types/>",
        "user": "U71PMQ1V0",
        "ts": "1571014872.269000",
        "team": "T5TCAFTA9",
        "thread_ts": "1569866970.116800",
        "parent_user_id": "U71PMQ1V0"
    },
    {
        "client_msg_id": "d8e37500-beae-44cf-a5fa-ee5fadb9a514",
        "type": "message",
        "text": "There's also some teaser ToC at <https://scattered-thoughts.net/writing/imp-intro/>",
        "user": "U71PMQ1V0",
        "ts": "1571014886.269200",
        "team": "T5TCAFTA9",
        "thread_ts": "1569866970.116800",
        "parent_user_id": "U71PMQ1V0"
    },
    {
        "client_msg_id": "9cca67fa-9dd1-4b73-b231-85dba609a5a7",
        "type": "message",
        "text": "But, but apples to oranges comparisons are the best comparisons!",
        "user": "UA14TGLTC",
        "ts": "1571018953.269900",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "apple",
                "users": [
                    "UP6RJV9KP"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "C64706C4-EB96-463F-985B-9E0B0AE038E0",
        "type": "message",
        "text": "I\u2019ve never heard of Rust referred to as a high level language. I thought it was more like C++ than Smalltalk.",
        "user": "ULM3U6275",
        "ts": "1571021756.271900",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "d2a0c3c2-e21d-4997-b498-835ec08b497c",
        "type": "message",
        "text": "I think C++ is high level :smile: Rust is higher.",
        "user": "UCUSW7WVD",
        "ts": "1571022527.272100",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "face_with_head_bandage",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "C7B273FE-4C21-4C47-9662-114C011AFAC5",
        "type": "message",
        "text": "Part of what makes Clojure parens \"not a big deal\" is that Clojure (somehow) fosters projects like Parinfer (<https://shaunlebron.github.io/parinfer/>), which makes writing lisp feel like writing a whitespace language. When I write clojure, I set my parens to a very faint color. It's nice!... and totally not as karmically risky as standing on a mountaintop in the rain wearing copper armour shouting \"all gods are bastards\".",
        "user": "UC2A2ARPT",
        "ts": "1571025619.277100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Parinfer - simpler Lisp editing",
                "title_link": "https://shaunlebron.github.io/parinfer/",
                "text": "Parinfer - simpler Lisp editing",
                "fallback": "Parinfer - simpler Lisp editing",
                "from_url": "https://shaunlebron.github.io/parinfer/",
                "service_name": "shaunlebron.github.io",
                "id": 1,
                "original_url": "https://shaunlebron.github.io/parinfer/"
            }
        ],
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "c37b3b3c-6030-44f8-9b5c-5f1579d98c23",
        "type": "message",
        "text": "Notice that Parinfer supports non-Clojure Lisps.\n\nIt's not the only such tool. Lisp programmers often use tooling to deal with parens.",
        "user": "UCUSW7WVD",
        "ts": "1571025842.277400",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "218cbbdb-d273-46c1-b42f-efb58feb35c5",
        "type": "message",
        "text": "I'm totally reading this in his voice",
        "user": "UNV27TUKA",
        "ts": "1571064511.280600",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "509db0a8-7823-4e1c-9e4e-7d0262142f2c",
        "type": "message",
        "text": "<@UJBAJNFLK> Thanks for the clarification. I guess that the definition of a language primitive is: if you implement a primitive in the source language itself, you induce a meta-circular dependency on the language implementation. Non-primitives can be implemented in terms of primitives without creating this kind of circularity. Meta-circular definitions of language primitives are not just a party trick. They are necessary if you want to implement an operating system that runs on top of the bare metal, and if you also want to use that same language &amp; operating system to develop newer versions of itself. The C compiler is written in C. <@ULM3U6275> I agree with your sentiment. Implementing a language in itself, all the way down to the bare metal, is possible, but then you take on the job of supporting all modern hardware, which is a huge commitment.",
        "user": "UJN1TAYEQ",
        "ts": "1571066056.280800",
        "team": "T5TCAFTA9",
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61"
    },
    {
        "client_msg_id": "46b72c46-3539-4bbc-8b30-d3a8f658d2f1",
        "type": "message",
        "text": "Nada Amin's \"collapsing towers of meta-circular interpreters\" might be of interest- <https://www.cs.purdue.edu/homes/rompf/papers/amin-popl18.pdf>",
        "user": "U71PMQ1V0",
        "ts": "1571067844.281000",
        "team": "T5TCAFTA9",
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61"
    },
    {
        "client_msg_id": "392bd37b-f88f-463c-8ebf-833a91f15199",
        "type": "message",
        "text": "<@U71PMQ1V0> Thanks for the link, it's quite relevant to my project.",
        "user": "UJN1TAYEQ",
        "ts": "1571080124.283300",
        "team": "T5TCAFTA9",
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61"
    },
    {
        "client_msg_id": "98caa1a4-00a8-4ad9-ac48-5b3ca4e6f024",
        "type": "message",
        "text": "Can anyone explain the appeal of saying things like numbers are just a certain type of list? (Btw: I\u2019ve done set theory and such, so the idea of such an encoding is very familiar, it just leaves me cold, in both mathematical and programming contexts).",
        "user": "UKJGU23KP",
        "ts": "1571081059.283500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UKJGU23KP",
            "ts": "1571081149.000000"
        },
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61"
    },
    {
        "client_msg_id": "f4f6d8fc-5490-45f3-b66e-904210e712e4",
        "type": "message",
        "text": "I couldn't write any Lisp code (mostly Scheme and Emacs Lisp these days) without paredit in Emacs, And like <@UC2A2ARPT>, I set parens to a faint color so they don't dominate visually. I am much more efficient writing this than e.g. Python, although I have probably written 10x more Python code than all Lisps taken together.\n(Achievement unlocked: I used \"10x\" to describe myself.)",
        "user": "UJBAJNFLK",
        "ts": "1571081940.283800",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "658dfb8d-3d4a-4ee7-a4b0-d71f64208f3f",
        "type": "message",
        "text": "From a quick look at Bel, it looks a bit like a specification rather than programming language. Except that I don't see the utility of writing specifications at such a low level. So... maybe I'll have another look in a year or two, but I am not holding my breath.",
        "user": "UJBAJNFLK",
        "ts": "1571082006.284000",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "ae7b2efd-ca7b-41cc-9100-c018f986f079",
        "type": "message",
        "text": "This entertaining presentation of the paper \"What about the natural numbers?\" makes a case for treating natural numbers more like lists, in a programming context. It even provides a practical motivation for \"lazy natural numbers\". <https://www.youtube.com/watch?v=jFk1qpr1ytk>",
        "user": "UJN1TAYEQ",
        "ts": "1571084651.284200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "What About the Natural Numbers? by Jos\u00e9 Manuel Calder\u00f3n Trilla [PWLConf 2019]",
                "title_link": "https://www.youtube.com/watch?v=jFk1qpr1ytk",
                "author_name": "PapersWeLove",
                "author_link": "https://www.youtube.com/user/PapersWeLove",
                "thumb_url": "https://i.ytimg.com/vi/jFk1qpr1ytk/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: What About the Natural Numbers? by Jos\u00e9 Manuel Calder\u00f3n Trilla [PWLConf 2019]",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/jFk1qpr1ytk?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=jFk1qpr1ytk",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=jFk1qpr1ytk"
            }
        ],
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61"
    },
    {
        "client_msg_id": "aeaa1c6f-67cc-42d7-a5f7-1819bdee56f6",
        "type": "message",
        "text": "Thanks, I can\u2019t watch a video right now, but I\u2019ll try to have a look when I can.",
        "user": "UKJGU23KP",
        "ts": "1571084967.284500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UKJGU23KP",
            "ts": "1571084972.000000"
        },
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61"
    },
    {
        "client_msg_id": "61dccb74-2381-429a-811b-7298ddc271db",
        "type": "message",
        "text": "<@UKJGU23KP> Here's the original paper, it's quite readable: <https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.56.3442&amp;rep=rep1&amp;type=pdf>",
        "user": "UJN1TAYEQ",
        "ts": "1571085451.284800",
        "team": "T5TCAFTA9",
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61"
    },
    {
        "client_msg_id": "93d2097d-59c8-4cba-97b3-abfc99bc106c",
        "type": "message",
        "text": "Also, the Idris language works this way. The natural numbers are defined in the standard library as `data Nat = Z | S Nat`. <https://www.idris-lang.org/example/>",
        "user": "UJN1TAYEQ",
        "ts": "1571086489.285000",
        "team": "T5TCAFTA9",
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61"
    },
    {
        "client_msg_id": "fd0f442e-952c-4b23-8d7d-3730e3c1594f",
        "type": "message",
        "text": "<@UJBAJNFLK> Why are you much more efficient writing Lisp than Python? Inquiring language designers need to know!",
        "user": "UJN1TAYEQ",
        "ts": "1571088883.285400",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT"
    }
]