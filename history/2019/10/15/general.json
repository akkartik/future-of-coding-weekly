[
    {
        "client_msg_id": "1d430b5c-346e-42c7-a776-84ef8bcf225d",
        "type": "message",
        "text": "<@UJN1TAYEQ> I'd say really getting a concrete syntax down cold takes a while.",
        "user": "UA14TGLTC",
        "ts": "1571116481.285700",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "2b448f36-ad41-44e8-b1a3-f32b276ee2bb",
        "type": "message",
        "text": "Mathematica being the only commonly used symbolic system, has arbitrary precision available. Excel, the most commonly used programming tool offers protected arithmetic. COBOL, the most derided tool still in use, offers BCD arithmetic, where 0.1 + 0.2 does equal 0.3, (which it does not in IEEE floating point). There are a lot of choices for arithmetic, and it is a very interesting, and fundamentally very important design decision for any language. In my Beads language i offer physical units of measurement which stores the exponents of the fundamental units along with the magnitude of a number, so that when you multiply  kg times meters you have a quantity with mass^1 \u2022 length^1, and this is maintained at runtime, so as to support catching mistakes in units both at compile time and more importantly at runtime, which per Van Snyder of JPL is the 3rd most common error in engineering and scientific software. I recently announced this feature to the scientist subgroup of Reddit and got heaps of abuse from scientists who claimed that they never make units mistakes, and couldn't possibly tolerate the additional overhead of storing such things. I was quite surprised by the negative reaction to this very clever implementation of a desired feature from the 70's, and it has taught me that violent opposition to any fundamental change is going to happen. Offering too many kinds of numbers in languages (like INT8 INT16, INT32, INT64) is a hangover from the 70's when you spent a lot of time figuring out how many bytes each field should take, and carefully trimmed field sizes so as to take minimum space. Those days are long gone, and in the JS world, you only have FLOAT64. Too bad IEEE floating point is so stupid, as pointed out in the wonderful talks by Douglas Crockford on its many intrinsic flaws.  It is very hard to fix this nasty problem because of interchange issues, where really we need to change all at once to a better format. That might not happen for another 20 years at the rate we are going.",
        "user": "UEQ6M68H0",
        "ts": "1571121111.285900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1571121243.000000"
        },
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61"
    },
    {
        "client_msg_id": "1534783a-9573-4c8d-8089-c22cd23a5fd0",
        "type": "message",
        "text": "Here's a scientist who openly admits having had to deal with unit problems many times, in my own code and in the code of others. In fact, the problem mostly comes from different people tacitly assuming different conventions, so people who use only code they wrote themselves are perhaps in a better situation.\nCalling IEEE FP stupid is a sign of... stupidity. A lot of careful thought has gone into that specification, which is a good fit for what it was designed for (scientific computing). People who barely understand it and use it for accounting get the punishment they deserve. The real problem with IEEE FP is that it is commonly presented (in programming tutorials) as \"real numbers\" making people believe in properties that IEEE FP doesn't have.",
        "user": "UJBAJNFLK",
        "ts": "1571122053.286200",
        "team": "T5TCAFTA9",
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61"
    },
    {
        "client_msg_id": "fd1f0b37-1330-4123-a269-8c5d8a4b9a03",
        "type": "message",
        "text": "<@UJN1TAYEQ> Uniformity of syntax is one aspect. In Python you have parentheses, indentation, and square brackets being used in different concepts for the same purpose: establishing a tree structure.  The other aspect is tool support. WIth paredit in Emacs, I almost think in terms of paredit operations rather than in terms of characters. It goes a long way towards structural editing from my point of view.",
        "user": "UJBAJNFLK",
        "ts": "1571122241.286400",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "dde6ca29-2ec3-4d67-8fb3-e5524b98a11f",
        "type": "message",
        "text": "Without adding anything new, I\u2019d like to add myself as someone with long Lisp exposure (about 8 years of Clojure) who also feels much more efficient/at ease with the uniformity of Lisp syntax + paredit\u2019s structural editing",
        "user": "UF5PAGQQ4",
        "ts": "1571125553.286600",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "03d06e3c-510e-4034-b3da-cc6945f9dfe1",
        "type": "message",
        "text": "an interesting phenomena that should be of interest for people on foc: there's python which is used a lot, and then there's pypy, which is almost 100% compatible with python and  &gt; 4x faster, and almost nobody uses it. The non adoption of it should be a warning for people developing new and better technologies and expecting them to be adopted just because they are better.",
        "user": "UBN9AFS0N",
        "ts": "1571126554.289200",
        "team": "T5TCAFTA9",
        "reactions": [
            {
                "name": "disappointed",
                "users": [
                    "UHDQ62M4P"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "5aa37870-d120-46e7-910b-1fbc7a184fcb",
        "type": "message",
        "text": "Because it doesn\u2019t really address pain points large swat of python devs have or offers something way different -  if someone needs a performance improvement, then they will look around and find it.",
        "user": "UNBPP291C",
        "ts": "1571129934.292000",
        "team": "T5TCAFTA9",
        "reactions": [
            {
                "name": "+1::skin-tone-6",
                "users": [
                    "UCKRZS3DZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0b90773e-1d93-4091-a8a9-f7f4aa867a15",
        "type": "message",
        "text": "can it be generalized to \"if someone needs an improvement on dimension X, then they will look around and find it [on their current tool]\"?",
        "user": "UBN9AFS0N",
        "ts": "1571132079.296400",
        "team": "T5TCAFTA9",
        "thread_ts": "1571132079.296400",
        "reply_count": 11,
        "reply_users_count": 4,
        "latest_reply": "1571194305.374900",
        "reply_users": [
            "UM1HH60GN",
            "UBN9AFS0N",
            "UHWC9PXBL",
            "UEQ6M68H0"
        ],
        "subscribed": true,
        "last_read": "1571194305.374900"
    },
    {
        "client_msg_id": "d28427e6-65d6-4610-8254-5323217276be",
        "type": "message",
        "text": "there's a cost to not be on the mainstream.\nif you're willing to run pypy, you might also be willing to rewrite in Rust or something that has less to do with python (edited)\nif the core team wanted to replace cpython with pypy, that could work, but it's probably incomplete.",
        "user": "UM1HH60GN",
        "ts": "1571141026.302400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UM1HH60GN",
            "ts": "1571141043.000000"
        },
        "thread_ts": "1571132079.296400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "c76f54e6-7a21-42db-ac84-97275c57f5b6",
        "type": "message",
        "text": "changing an interpreter and maybe fixing/reporting a compatibility issue is not on the same ballpark as rewriting your project in a different programming language.",
        "user": "UBN9AFS0N",
        "ts": "1571141121.303000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1571141157.000000"
        },
        "thread_ts": "1571132079.296400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "39180bfa-e736-41a5-9579-82e8963d7db7",
        "type": "message",
        "text": "Another comparison might be jruby.  It's faster, but people only switch to it when they have to target a JVM, I think.",
        "user": "UM1HH60GN",
        "ts": "1571141159.303300",
        "team": "T5TCAFTA9",
        "thread_ts": "1571132079.296400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "d04fab66-da91-48f1-a661-5d0c93acf3b6",
        "type": "message",
        "text": "I agree with you on the cost of not being on the mainstream, that's my comment, if people are not taking minor inconveniences for big improvements on efficiency, then asking them to take major inconveniences for the same or slightly more should be at least as hard",
        "user": "UBN9AFS0N",
        "ts": "1571141262.303500",
        "team": "T5TCAFTA9",
        "thread_ts": "1571132079.296400",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "2ac58cd6-6d55-4a44-91ac-c87021f0a707",
        "type": "message",
        "text": "I think the risk assessment of a change is like an n^2 algorithm.  If it's sufficiently like stuff you have done before, it's pretty easy to assess.   If not, then, you're going to need to put in a ton of effort.  If you're rewriting to a new language, and one is 2x as hard as another, it doesn't seem to affect the decision.",
        "user": "UM1HH60GN",
        "ts": "1571141560.303700",
        "team": "T5TCAFTA9",
        "thread_ts": "1571132079.296400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "fb6497a7-3c6f-437d-979c-81598edd8d82",
        "type": "message",
        "text": "In that case, it's best to have someone experienced with the alternatives.",
        "user": "UM1HH60GN",
        "ts": "1571141588.303900",
        "team": "T5TCAFTA9",
        "thread_ts": "1571132079.296400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "abffe0bd-8be8-4925-be30-48f1436d3b59",
        "type": "message",
        "text": "another way to look at this might be, people have many problems, and they have to prioritize them.",
        "user": "UM1HH60GN",
        "ts": "1571145584.306000",
        "team": "T5TCAFTA9",
        "thread_ts": "1571132079.296400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "aea151a3-4680-4614-9abd-371c076d43af",
        "type": "message",
        "text": "not just competition at the supply level (solutions) but at the demand level (problems)",
        "user": "UM1HH60GN",
        "ts": "1571145613.306800",
        "team": "T5TCAFTA9",
        "thread_ts": "1571132079.296400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "1a9fd01a-c6ff-44df-a3fc-7c4e1458e4c2",
        "type": "message",
        "text": "Pypy is a drop-in replacement only for a pure Python codebase. Add C modules (which most big Python codebases use at some point), and the transition to pypy becomes a lot harder\nAnother issue, at least for me, is complexity. I have way more trust in the CPython codebase, written and inspected by hundreds of competent programmers over time, than in the complex code generation machinery behind pypy. I have found and fixed bugs in CPython, but if anything goes wrong when using pypy, I wouldn't even know how to start debugging it.",
        "user": "UJBAJNFLK",
        "ts": "1571145712.308500",
        "team": "T5TCAFTA9",
        "thread_ts": "1571145712.308500",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1571150070.330500",
        "reply_users": [
            "UCUSW7WVD"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "1be87df2-df9e-412b-a946-9ad6545c299d",
        "type": "message",
        "text": "can that be generalized to \"I ignore improvements if it means switching to a technology that is more niche/less used/less mature/more magical/I understand less\"? I agree with your observation and my generalization, in that case as I discussed earlier with some people we should focus on adoption as much as we focus on the technology side if we want any foc solution to succeed.",
        "user": "UBN9AFS0N",
        "ts": "1571146682.311800",
        "team": "T5TCAFTA9"
    },
    {
        "client_msg_id": "9c7764a8-7c97-40e5-a8a6-147b1ce1799a",
        "type": "message",
        "text": "we talked about creating a new channel, the name was #adoption I think, but maybe #users/#humans ? is a more general and fitting name? :smile:",
        "user": "UBN9AFS0N",
        "ts": "1571146742.312700",
        "team": "T5TCAFTA9"
    },
    {
        "client_msg_id": "B9BE2D31-191E-4ED0-99D4-77B3E9914618",
        "type": "message",
        "text": "i wouldn\u2019t be surprised if the situation was like jruby, where c extensions (and occasionally better concurrency support) can cause really weird and annoying issues",
        "user": "UHWC9PXBL",
        "ts": "1571147977.317000",
        "team": "T5TCAFTA9",
        "thread_ts": "1571132079.296400",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "5698cfc3-0cdf-475e-97c3-071d1322b574",
        "type": "message",
        "text": "My lesson from examples like this is that there's no point chasing compatibility. I was telling <@UL3CJ7YKC> this the other day. I'm not familiar with Pypy, but I've seen several OSs chase POSIX-compatibility, starting with OpenBSD. Nobody cares. Inevitably they aren't 100% compatible on the axes people care about, and 99.9% compatibility yields 0.1% adoption. (OpenBSD usage is all by people who live exclusively in OpenBSD.)\n\nAnd people are right. They're being rational. They're following the design rule that similar things should look similar and different things should look different. If it looks similar but is different under the hood it's in an uncanny valley. It takes a _lot_ to build trust in it.\n\nIf you're building something new today, stop trying to support existing software. It's a long, thankless death-march, and will never get you the adoption you want. Take the leap and let it be its own unique thing, without constraining it with the past.\n\nNew projects take 10 years (full time) to gain adoption. Stop trying to find shortcuts.",
        "user": "UCUSW7WVD",
        "ts": "1571149857.330400",
        "team": "T5TCAFTA9",
        "thread_ts": "1571149857.330400",
        "reply_count": 4,
        "reply_users_count": 4,
        "latest_reply": "1571211574.386400",
        "reply_users": [
            "UG0EL18H3",
            "ULM3U6275",
            "UJBAJNFLK",
            "UCUSW7WVD"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UNBPP291C",
                    "UAVCC2X70",
                    "ULM3U6275",
                    "UHWC9PXBL",
                    "UA14TGLTC"
                ],
                "count": 5
            }
        ]
    },
    {
        "client_msg_id": "2fad8530-6a69-42c5-a453-00ec9ded1cfb",
        "type": "message",
        "text": "And even if your project has no C today, every `pip install` becomes a gamble. \"Is this new package indirectly depending on C? Well f#$%.\"",
        "user": "UCUSW7WVD",
        "ts": "1571150070.330500",
        "team": "T5TCAFTA9",
        "thread_ts": "1571145712.308500",
        "parent_user_id": "UJBAJNFLK"
    },
    {
        "client_msg_id": "6e017bc9-9804-4385-bb7c-de5798b7b2ab",
        "type": "message",
        "text": "It\u2019s more of transition inertia vs gain\n\nWhat would it take me to move? What are the improvements I gain? Do they address my painpoints/increase productivity?\n\nIf gain is larger than inertia of using current product, you get adoption.\nLike illustrator vs sketch -&gt; Sketch solved a lot of painpoints and increased productivity with transition inertia being low since a lot of concepts are the same.",
        "user": "UNBPP291C",
        "ts": "1571150597.330900",
        "team": "T5TCAFTA9"
    },
    {
        "client_msg_id": "4a03427d-e11a-4b6c-abe1-3600c9e42589",
        "type": "message",
        "text": "Also in software, you gotta add the \u201ccoolness\u201d factor",
        "user": "UNBPP291C",
        "ts": "1571150668.331300",
        "team": "T5TCAFTA9"
    },
    {
        "client_msg_id": "6d685f5b-e903-40ea-928e-9d2a9e597fff",
        "type": "message",
        "text": "time invested in a thing adds mass over time which increases inertia, if you have a team of python developers that have 200k loc on python, moving away is not just learning the new thing and rewriting the code.",
        "user": "UBN9AFS0N",
        "ts": "1571150932.332700",
        "team": "T5TCAFTA9"
    },
    {
        "client_msg_id": "9d9676cb-ae9d-4efb-bd91-e479b0b0bdd3",
        "type": "message",
        "text": "exactly!",
        "user": "UNBPP291C",
        "ts": "1571151013.333000",
        "team": "T5TCAFTA9"
    },
    {
        "client_msg_id": "4292586d-bc9f-4fc0-ab9d-6eed18d1ee07",
        "type": "message",
        "text": "I forget who it was, maybe Derek Sivers or Seth Godin who has a quote that something either needs to be 10x better or 10x cheaper to convince anyone to switch",
        "user": "UN89MTTML",
        "ts": "1571151291.333800",
        "team": "T5TCAFTA9",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "304b31f7-75be-4e8b-8c44-be560d207f5c",
        "type": "message",
        "text": "YES! I've been saying this for a long time: there are obviously use cases for OSes that do this, and POSIX exists for a reason, but POSIX-compliance shouldn't be considered the first step of building a new OS. If it eventually becomes something you NEED to have, build it as an extension, like Plan9 did. You might not be able to support the entire spec, but it will get you 90% of the way there which is good enough for most applications. Why should exploration of the OS space be constrained by \"compatibility\" dogma?",
        "user": "UG0EL18H3",
        "ts": "1571152486.333900",
        "team": "T5TCAFTA9",
        "thread_ts": "1571149857.330400",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "ad725040-d179-499b-acba-c26dc648ebf0",
        "type": "message",
        "text": "Douglas Crockford's issue is that you can't safely use binary floating point for financial calculations, you should use decimal FP instead. See &lt;http://dec64.com/&gt;. Crockford claims that his DEC64 format is more efficient than IEEE Decimal floating point. He also proposes that DEC64 should be \"the only number type in the next generation of application programming languages\". That makes sense for spreadsheets, and languages used for financial calculations, but not for everything. No need to wait 20 years, DEC64 is available now on github.\n\nDEC64 is a terrible idea for things like Machine Learning, and 3D graphics (both of which use GPUs). DEC64 would be a bad choice for my project, Curv, which is an end-user programming language for 3D graphics. For these applications, you need efficient binary floating point. IEEE binary floating point is an improvement over the non-IEEE floats found in some older GPU hardware: it has better numerical properties. What might be even better than IEEE FP, for ML and 3D, is \"posit\" floating point. For a given number of bits, it uses those bits more efficiently and represents a larger range of numbers which are distributed in a more effective way along the number line. Also, IMO, posit arithmetic has better numeric properties than IEEE. &lt;https://posithub.org/docs/BeatingFloatingPoint.pdf&gt;. Posits are *not* a drop in replacement for IEEE float (your code may need to change), and they aren't competitive unless implemented in hardware (unlike DEC64), so we may be waiting a while. They make the most sense for new ML hardware being built.\n\nFor a language like Idris, where you use dependent types to prove programs correct, you need a natural number type, Nat, which implements the Peano axioms directly. You need this so that you can perform inductive proofs over the natural numbers. You need other numeric types as well (Nat doesn't include negative numbers or fractions).\n\nIn systems languages like C, C++ and Rust, you need multiple numeric types like int8, int16, int32 and int64, so that you can write high performance code that optimizes memory consumption and memory access patterns and uses the L1 cache efficiently. Systems programming is not \"a hangover from the 70's\".\n\nIf you want to design a programming language that has only a single numeric type, and is competitive in all of these niches, then I have bad news for you.",
        "user": "UJN1TAYEQ",
        "ts": "1571155697.334300",
        "team": "T5TCAFTA9",
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d21c2faa-3bc0-4cd0-afb6-0f0285d2738e",
        "type": "message",
        "text": "I remember in the early days of google, there was a big internal debate on whether they should standardize on Linux or BSD and internal support for each at the time was close to 50/50. I don\u2019t recall what made them choose Linux, but I doubt it was POSIX compatibility.",
        "user": "ULM3U6275",
        "ts": "1571157759.334600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1571308837.000000"
        },
        "thread_ts": "1571149857.330400",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "b2605e43-7b1d-43d6-8d74-62898088a8e8",
        "type": "message",
        "text": "I agree that people generally WAY underestimate the inertia people will have to switch to their shiny new tech.. especially in programming languages. But Python is a bit of an extreme case, in part because almost any real world Python project involves some C library that touches a ton of CPython internals. Also interesting because Python users stand the most to gain from new implementations, given that it is so sloooow. I feel other language communities are more eager to embrace new tech, or at least are better set up for it",
        "user": "UHDQ62M4P",
        "ts": "1571159195.337700",
        "team": "T5TCAFTA9"
    },
    {
        "client_msg_id": "ca29b46c-e8df-4bf8-ac33-89b2fe96af58",
        "type": "message",
        "text": "Folks for whom execution speed is critical are likely not using Python to begin with, or are served well by numpy or use Cython for the critical path, which does not force them to switch to a new ecosystem. Pypy seems to have found its niche in larger organizations that can afford to employ experts on maintaining it and its dependencies. I think it's been a valuable experiment, but like IronPython and Jython (not to mention a slew of less successful abandoned attempts), it runs up against a standard implementation that is good enough, and will always be a version or two ahead, and have the most batteries included.",
        "user": "UP448V1PB",
        "ts": "1571160782.341500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UP448V1PB",
            "ts": "1571160849.000000"
        }
    },
    {
        "client_msg_id": "840042d9-b295-46b8-be2f-3d655887b5ef",
        "type": "message",
        "text": "It's also been a pretty amazing accomplishment, technically. I remember one of the early progress reports at a EuroPython conference where they proudly announced that Pypy was now only 2000x slower than CPython. :slightly_smiling_face:",
        "user": "UP448V1PB",
        "ts": "1571160996.343000",
        "team": "T5TCAFTA9"
    },
    {
        "client_msg_id": "b8e912ea-a764-436c-bbe4-e76274903809",
        "type": "message",
        "text": "jruby somehow stuck but jython didn't, I think it was a timing issue.",
        "user": "UM1HH60GN",
        "ts": "1571161349.344700",
        "team": "T5TCAFTA9",
        "thread_ts": "1571161349.344700",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1571161628.345400",
        "reply_users": [
            "UP448V1PB"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "d0853a3b-22d9-4703-a95e-e889291a629f",
        "type": "message",
        "text": "Also don\u2019t forget many people use python as their first language (eg. for stats/data science), I am quite sure many of them don\u2019t even know about the different implementations. They just default to the use case shown in the lab/tutorials/school.",
        "user": "UL3CJ7YKC",
        "ts": "1571161384.345300",
        "team": "T5TCAFTA9"
    },
    {
        "client_msg_id": "bb797d3a-30eb-4524-9adb-9813afbe8ac8",
        "type": "message",
        "text": "I think it's again a question of CPython offering so much more free high quality libraries that switching often felt like handicapping yourself.",
        "user": "UP448V1PB",
        "ts": "1571161628.345400",
        "team": "T5TCAFTA9",
        "thread_ts": "1571161349.344700",
        "parent_user_id": "UM1HH60GN"
    },
    {
        "client_msg_id": "736af335-24d9-4856-9f9d-6a2534090564",
        "type": "message",
        "text": "I feel a little lost in this community. There are so many ways the \u201cfuture of coding\u201d will shape up. There is already many companies jumping in which have drastic different opinions on this future with different target users groups. Some are cloud backend focused, some are lambda languages, some are for gamers, some for data scientists, etc\u2026 I\u2019m just curious where we can find \u201cour people\u201d and \u201cour interests\u201d. A gaming language is very different than a cloud-backend language, yet we seen to all jam ideas in a single thread.",
        "user": "UJKKBAMLL",
        "ts": "1571162513.349300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJKKBAMLL",
            "ts": "1571163894.000000"
        },
        "thread_ts": "1571162513.349300",
        "reply_count": 29,
        "reply_users_count": 6,
        "latest_reply": "1571510000.057900",
        "reply_users": [
            "UJKKBAMLL",
            "UJN1TAYEQ",
            "UCUSW7WVD",
            "UE6EFEPTQ",
            "UEQ6M68H0",
            "UAVCC2X70"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "U6KQ2S410",
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 3
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "bf93812f-5c4f-4452-a2cb-fc51b45d5eeb",
        "type": "message",
        "text": "Secondly, it\u2019s not clear who is responsible, what is the code of conduct, who are moderators, how to get involved, who is involved, etc... I can only deduce this by looking at who is most active? I don\u2019t mean this to sound brass or rude, just asking serious questions about what\u2019s going on in this adhoc Slack channel. I would be honored to help bring structure, or at the least suggest some. If <@U5TCAFTD3> is indeed raising $20M than these principles and policies should be well documented and visible, you agree?",
        "user": "UJKKBAMLL",
        "ts": "1571162883.353300",
        "team": "T5TCAFTA9",
        "thread_ts": "1571162883.353300",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1571167198.357700",
        "reply_users": [
            "U6FKVSVCK",
            "UP448V1PB"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "5ccbebec-60ea-45d0-919b-13303b139f18",
        "type": "message",
        "text": "TL;DR there is *not only one* future of programming there are many. Yet\u2026there is only <#C5T9GPWFL|general>\u2026.",
        "user": "UJKKBAMLL",
        "ts": "1571163076.353500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJKKBAMLL",
            "ts": "1571163085.000000"
        },
        "thread_ts": "1571162513.349300",
        "parent_user_id": "UJKKBAMLL",
        "reactions": [
            {
                "name": "+1::skin-tone-6",
                "users": [
                    "UCKRZS3DZ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "5e952184-ce96-44b3-8fc7-bb0755c7820e",
        "type": "message",
        "text": "Or is the general consensus that the (next) future of coding is a single all-encompassing language that works in every single domain imaginable? IMO this is not the future I\u2019ll experience in my life time.",
        "user": "UJKKBAMLL",
        "ts": "1571163990.354100",
        "team": "T5TCAFTA9",
        "thread_ts": "1571162513.349300",
        "parent_user_id": "UJKKBAMLL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "a10831fc-52a2-4b99-9627-fb88d8fb46e9",
        "type": "message",
        "text": "It\u2019s a community, people discussing topics they like. If you like a topic, open a  channel and tell everyone about it :shrug:",
        "user": "UNBPP291C",
        "ts": "1571164400.356000",
        "team": "T5TCAFTA9",
        "thread_ts": "1571164400.356000",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1571166476.357500",
        "reply_users": [
            "UJKKBAMLL",
            "U6FKVSVCK",
            "UJN1TAYEQ"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U5TCAFTD3",
                    "UCKRZS3DZ"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "82ef0ff4-da1b-46f2-83ee-2a3b9294af16",
        "type": "message",
        "text": "So the *Channels* in Slack is it?",
        "user": "UJKKBAMLL",
        "ts": "1571164699.356200",
        "team": "T5TCAFTA9",
        "thread_ts": "1571164400.356000",
        "parent_user_id": "UNBPP291C"
    },
    {
        "client_msg_id": "21d4c7b0-59aa-419b-8665-b099b261b98c",
        "type": "message",
        "text": "I just posted a note elsewhere explaining why a single all-encompassing language, for all domains, is unlikely. The future is DSLs. So is the past, to be frank. Interoperability between DSLs is a fascinating topic.",
        "user": "UJN1TAYEQ",
        "ts": "1571165024.356400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1571166067.000000"
        },
        "thread_ts": "1571162513.349300",
        "parent_user_id": "UJKKBAMLL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UMVFWPZ36"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "96279976-f899-4d39-a17e-422fe944a2e4",
        "type": "message",
        "text": "Yeah, I certainly don't desire some totalizing worldview.\n\nI visualize the future of programming as the picture of the ant at the bottom of <http://worrydream.com/#!/Links2013>. The present of programming has the ants all living in the one/first branch they happened to climb up. The future requires backing up and exploring many other branches. Use the whole tree.",
        "user": "UCUSW7WVD",
        "ts": "1571165731.356600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Bret Victor, beast of burden",
                "title_link": "http://worrydream.com/#!/Links2013",
                "text": "Bret Victor has been provided by the management for your protection.",
                "fallback": "Bret Victor, beast of burden",
                "from_url": "http://worrydream.com/#!/Links2013",
                "service_icon": "http://worrydream.com/favicon.ico",
                "service_name": "worrydream.com",
                "id": 1,
                "original_url": "http://worrydream.com/#!/Links2013"
            }
        ],
        "thread_ts": "1571162513.349300",
        "parent_user_id": "UJKKBAMLL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UML4ZEKDK",
                    "U8A5MS6R1"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "6795742e-d074-4927-8381-a622802f9838",
        "type": "message",
        "text": "Not much structure; it's an open forum. If you have a question, ask; if you have something to say, jump in!\n\nNo need for moderators. So far everyone seems to implicitly understand \"don't be a jerk\".\n\nAgree that the funding will need structure. It seems at this point that structure is not at all decided yet\u2014 all that's been announced is Steve's intent to seek funding. What form that takes will probably be up to Steve and the investors/donors.",
        "user": "U6FKVSVCK",
        "ts": "1571166153.357100",
        "team": "T5TCAFTA9",
        "thread_ts": "1571162883.353300",
        "parent_user_id": "UJKKBAMLL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UCKRZS3DZ"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "7cb597dc-cd3c-439c-a640-35aaa7117df0",
        "type": "message",
        "text": "You can find existing channels by clicking on \"Channels\". You can create a new channel by clicking the \"+\" next to it.",
        "user": "U6FKVSVCK",
        "ts": "1571166283.357300",
        "team": "T5TCAFTA9",
        "thread_ts": "1571164400.356000",
        "parent_user_id": "UNBPP291C"
    },
    {
        "client_msg_id": "ea0ff185-cae5-409c-bb1f-222906c8f004",
        "type": "message",
        "text": "The <#CEXED56UR|meta> channel is where we talk about adding new channels. This whole subthread belongs there.",
        "user": "UJN1TAYEQ",
        "ts": "1571166476.357500",
        "team": "T5TCAFTA9",
        "thread_ts": "1571164400.356000",
        "parent_user_id": "UNBPP291C",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "daf80e47-92b1-4984-a61f-beb6420cb8f1",
        "type": "message",
        "text": "I will say that an implicit policy of \"don't be a jerk\" can work well with an initial small similar minded group, but fails to scale really quickly. That can be figured out when we get there, or we could proactively adopt one of the many great code of conduct examples out there.",
        "user": "UP448V1PB",
        "ts": "1571167198.357700",
        "team": "T5TCAFTA9",
        "thread_ts": "1571162883.353300",
        "parent_user_id": "UJKKBAMLL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UCKRZS3DZ",
                    "UML4ZEKDK",
                    "U8A5MS6R1",
                    "UNH2D8U6P"
                ],
                "count": 5
            }
        ]
    },
    {
        "client_msg_id": "371924c2-2d58-4db8-a92b-294c12b8b346",
        "type": "message",
        "text": "I\u2019m glad you both agree. Perhaps my feeling/concerns are not well addressed in this threads origin. I\u2019ll try to think of another way to present this idea.",
        "user": "UJKKBAMLL",
        "ts": "1571168557.357900",
        "team": "T5TCAFTA9",
        "thread_ts": "1571162513.349300",
        "parent_user_id": "UJKKBAMLL",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "aa4535d1-0060-4bcf-89c2-ca34010a2597",
        "type": "message",
        "text": "We all have projects we like to talk about (_mea culpa_!) and so it's easy to fall into the trap of a one-track mind. But I don't mean to make it seem like my way is the One True Way or something like that. As someone posting more frequently than most I'll try to be more careful not to give that impression in future. And I could probably also be more quiet and give others space to talk :slightly_smiling_face: Everybody feel free to tell me to shut up anytime!",
        "user": "UCUSW7WVD",
        "ts": "1571168962.358200",
        "team": "T5TCAFTA9",
        "thread_ts": "1571162513.349300",
        "parent_user_id": "UJKKBAMLL",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "49b1731c-4a1f-4bab-baf8-c0d24bf7b50a",
        "type": "message",
        "text": "Thank you <@UCUSW7WVD>. I agree too with what you said, especially in the engineering world: there is good reason to do thing many different ways. I\u2019ll DM you to continue.",
        "user": "UJKKBAMLL",
        "ts": "1571169701.358400",
        "team": "T5TCAFTA9",
        "thread_ts": "1571162513.349300",
        "parent_user_id": "UJKKBAMLL"
    },
    {
        "client_msg_id": "f7cce31f-6460-4ed8-a82b-52a333e315a7",
        "type": "message",
        "text": "<@UJKKBAMLL> the documentation for this Slack is here: <https://futureofcoding.org/community.html>. Let me know if you (or anyone else) has suggestions on improving it. I set up an automated Slack bot to message all new users with this link but maybe it's broken",
        "user": "U5TCAFTD3",
        "ts": "1571170191.360800",
        "team": "T5TCAFTA9",
        "thread_ts": "1571170191.360800",
        "reply_count": 7,
        "reply_users_count": 3,
        "latest_reply": "1571214312.387400",
        "reply_users": [
            "U5TCAFTD3",
            "UH85W1ML1",
            "UJKKBAMLL"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "9d023e8f-6d46-4114-a226-f9bf2bf81c08",
        "type": "message",
        "text": "<@UCUSW7WVD> \u201cYou mean any new high level language _that cares about adoption_. But not everyone cares about adoption.\u201d I don\u2019t just mean compete for user adaption. I also mean compete for usefulness in achieving your goal. For example, let\u2019s say your end goal isn\u2019t primarily testing an experimental language design, but rather to build a FoC development environment. Then you have to ask if your custom language is really the best base to build it on. If JS supports enough of the high level features you feel you need to build your development environment in, then you have to ask how your own language would compete for accomplishing the goal of building your development environment (regardless of whether or not you care about your development environment\u2019s adoption).",
        "user": "ULM3U6275",
        "ts": "1571170213.360900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1571170272.000000"
        },
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "0764de19-3ff2-47e7-8c6b-24b95d548530",
        "type": "message",
        "text": "The proposed $20M is very much still a proposal and work in progress. It could be a non profit, VC fund, startup company, another setup, or some mixed thing. I probably shouldn't have said anything this early but I do bias towards oversharing because I prefer transparency where possible. Whenever I know more, I'll post about it! In short, I see that a big blocker for many of us is funding and I am determined to do something about it. What that is exactly still needs to be figured out...",
        "user": "U5TCAFTD3",
        "ts": "1571170407.361200",
        "team": "T5TCAFTA9",
        "thread_ts": "1571170191.360800",
        "parent_user_id": "U5TCAFTD3"
    },
    {
        "client_msg_id": "4977e25a-0aab-4dbb-b83c-b3fd691d43f4",
        "type": "message",
        "text": "<@UJN1TAYEQ> \n&gt; I just posted a note elsewhere explaining why a single all-encompassing language, for all domains, is unlikely. The future is DSLs. So is the past, to be frank. Interoperability between DSLs is a fascinating topic.\nCan't find where you said that.. can you link to it?",
        "user": "UE6EFEPTQ",
        "ts": "1571170486.361500",
        "team": "T5TCAFTA9",
        "thread_ts": "1571162513.349300",
        "parent_user_id": "UJKKBAMLL",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "U6FKVSVCK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "4ffd2259-7672-4078-88d3-2c9ed3f1e9ce",
        "type": "message",
        "text": "Cos I feel a rumble coming on, and want to be in the right place! :smile:",
        "user": "UE6EFEPTQ",
        "ts": "1571170546.361700",
        "team": "T5TCAFTA9",
        "thread_ts": "1571162513.349300",
        "parent_user_id": "UJKKBAMLL"
    },
    {
        "type": "message",
        "subtype": "channel_topic",
        "ts": "1571171034.361900",
        "user": "UL3EE9WR1",
        "text": "<@UL3EE9WR1> set the channel topic: <https://futureofcoding.org/community.html>",
        "topic": "<https://futureofcoding.org/community.html>",
        "reactions": [
            {
                "name": "boom",
                "users": [
                    "UL3EE9WR1",
                    "U5TCAFTD3",
                    "UC2A2ARPT",
                    "UHWC9PXBL",
                    "UJKKBAMLL"
                ],
                "count": 5
            },
            {
                "name": "man-bowing",
                "users": [
                    "UJKKBAMLL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7c26e38a-413f-4707-a79f-88af4f9f3cf1",
        "type": "message",
        "text": "<@U5TCAFTD3> DMs are included in the 10k message limit so greetbot's message is eventually lost",
        "user": "UH85W1ML1",
        "ts": "1571171055.362100",
        "team": "T5TCAFTA9",
        "thread_ts": "1571170191.360800",
        "parent_user_id": "U5TCAFTD3"
    },
    {
        "client_msg_id": "388d3d61-0cad-48eb-b5a5-6c96f9720403",
        "type": "message",
        "text": "Ah interesting... When you first join you see it but a couple weeks later it's gone?",
        "user": "U5TCAFTD3",
        "ts": "1571171090.362300",
        "team": "T5TCAFTA9",
        "thread_ts": "1571170191.360800",
        "parent_user_id": "U5TCAFTD3"
    },
    {
        "client_msg_id": "60fc364b-5c92-40d1-b114-7ecc7dcbf7a5",
        "type": "message",
        "text": "yeah",
        "user": "UH85W1ML1",
        "ts": "1571171096.362500",
        "team": "T5TCAFTA9",
        "thread_ts": "1571170191.360800",
        "parent_user_id": "U5TCAFTD3"
    },
    {
        "client_msg_id": "92051285-96fa-491b-91eb-6af49435b4e3",
        "type": "message",
        "text": "You'd have to message monthly or something to keep people aware (and then of course those contribute to the channel messages and other DMs getting lost!)",
        "user": "UH85W1ML1",
        "ts": "1571171123.362700",
        "team": "T5TCAFTA9",
        "thread_ts": "1571170191.360800",
        "parent_user_id": "U5TCAFTD3"
    },
    {
        "client_msg_id": "7dc2241b-0099-47cd-b8cb-d6b8318d4fc4",
        "type": "message",
        "text": "Haha yeah it seems like an easier problem to solve than it is, spreading around a Slack's readme doc",
        "user": "U5TCAFTD3",
        "ts": "1571171189.362900",
        "team": "T5TCAFTA9",
        "thread_ts": "1571170191.360800",
        "parent_user_id": "U5TCAFTD3"
    },
    {
        "client_msg_id": "96e6080c-6703-4084-b34a-c43cd5e2a67c",
        "type": "message",
        "text": "A single all-encompassing FoC language, for all domains, is unlikely. The future is DSLs. Some arguments for this. Also, how can we improve interoperability between DSLs? Requested by <@UE6EFEPTQ>",
        "user": "UJN1TAYEQ",
        "ts": "1571172258.364800",
        "team": "T5TCAFTA9",
        "thread_ts": "1571172258.364800",
        "reply_count": 13,
        "reply_users_count": 7,
        "latest_reply": "1573499356.339900",
        "reply_users": [
            "UJN1TAYEQ",
            "U6FKVSVCK",
            "UHWC9PXBL",
            "UJBAJNFLK",
            "UE6EFEPTQ",
            "UEQ6M68H0",
            "U8A5MS6R1"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "UHDQ62M4P",
                    "UKP3B2J5D",
                    "UJKKBAMLL"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "e2049c6c-a503-4bd2-b8e2-5d018d4e31cf",
        "type": "message",
        "text": "What numeric types should your wide-spectrum, all-domain FoC language support?\n\nDouglas Crockford &lt;http://dec64.com/&gt; claims that decimal floating point (his DEC64 data type) should be \"the only number type in the next generation of application programming languages\". Binary floating point is unsafe for financial calculations, so DEC64 is a good choice for spreadsheets or any language that does financial calculations. But Crockford also says DEC64 is \"well suited to most scientific applications\", and that's less clear.\n\nI do agree that for an end-user programming language focused on a specific domain, the simplicity of a single numeric type is valuable. And DEC64 is a good choice *if* the domain involves finance. For my language Curv, a DSL for 3D graphics, the best choice is IEEE binary floating point as the single numeric type.\n\nFor scientific computation, the popular choice is a batteries-included language with all the features needed by experts. Experts also need speed, because some scientific computations take a long time to run. That means you need vectorized IEEE binary floating point. Nobody will ever port BLAS and LAPACK to DEC64. Ditto for Machine Learning and 3D Graphics (which run on a GPU): you need vectorized binary floating point, because that's what the hardware supports.\n\nFor a functional language like Idris, where you use dependent types to prove programs correct, you need a natural number type, Nat, which implements the Peano axioms directly. In the Idris standard library, `data Nat = Z | S Nat`. You need this so that you can perform inductive proofs over the natural numbers. You need other numeric types as well (Nat doesn't include negative numbers or fractions).\n\nIn systems languages like C, C++ and Rust, you need the full set of numeric types supported by the hardware, including int8, int16, int32 and int64, so that you can write high performance code that optimizes memory consumption and memory access patterns and uses the L1 cache efficiently.\n\nA true wide spectrum language would presumably need to support all of these different kinds of numeric computation, and in each case, do as good a job as more specialized languages designed by domain experts. And that would make the language much more complicated than a domain specific language. For any given task, a DSL is probably a better choice.",
        "user": "UJN1TAYEQ",
        "ts": "1571175351.365700",
        "team": "T5TCAFTA9",
        "thread_ts": "1571172258.364800",
        "parent_user_id": "UJN1TAYEQ",
        "reactions": [
            {
                "name": "the_horns::skin-tone-3",
                "users": [
                    "UFEQUBNNT"
                ],
                "count": 1
            }
        ]
    }
]