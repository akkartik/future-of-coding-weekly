[
    {
        "client_msg_id": "0f3f6f59-f1ee-4d4f-b26f-99739fe33e39",
        "type": "message",
        "text": "<@UJN1TAYEQ> I see, you're right. It may be worth distinguishing between \"built in Smalltalk\" and \"could be modified using Smalltalk\". The latter property is indeed universal, and that's pretty rare. Maybe Self and Io share it, besides Smalltalk? My Wart had it as well. What I learned from it was that while it's cool to be able to modify plumbing all the way down, there are extremely subtle implications for correctness and performance that the environment as a whole isn't equipped to support debugging. And arguably _couldn't possibly_ support. So it doesn't seem worth chasing or bragging about. Just stick to 5% or 1% that isn't introspectable. To do otherwise is status signalling at best.",
        "user": "UCUSW7WVD",
        "ts": "1570917721.252800",
        "team": "T5TCAFTA9",
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61"
    },
    {
        "client_msg_id": "74b81755-3159-4fec-a7ea-79a9c3b3606d",
        "type": "message",
        "text": "Common Lisp supports replacing `if` with your own version. You have to crack open a package lock and whatnot, but you _can_ do it. But trust me, you don't want to. The package lock is there for a reason.",
        "user": "UCUSW7WVD",
        "ts": "1570917864.253000",
        "team": "T5TCAFTA9",
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61"
    },
    {
        "client_msg_id": "cf629e21-12b3-47c1-a141-4ade03e9ec5e",
        "type": "message",
        "text": "<@UCUSW7WVD> There are primitive values, lists, key-value objects, and native functions. The base operations are native, and other \"functions\" are just objects with \"code\", \"args\", and \"context\" properties.\n\nWhen an object-function is invoked, a new context (i.e. a lexical scope object) is created with the function's context as its parent, the arguments are set into that context, and then that context and the function's \"code\" are fed into the evaluator.\n\nHowever, when a function-object does not contain any \"context\" property, then the context of the caller is used as the parent context (aka dynamic scope). The practice is to embed such functions in calls to things like \"if\" -- which is very much like how SmallTalk blocks work.\n\n[\"if\", condition, {code:[...]}]\n\nSo instead of macros, functions are used for code that might or might not be invoked.\n\nIt's interesting to note that arrow-functions in JavaScript work similarly (i.e. they don't override \"this\" or \"arguments\", like other functions do)",
        "user": "UAVCC2X70",
        "ts": "1570918261.253200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1570921754.000000"
        },
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61"
    },
    {
        "client_msg_id": "412c53bb-9b94-4f63-88f4-acdf56293358",
        "type": "message",
        "text": "<@UCUSW7WVD> Io didn\u2019t support rewriting the interpreter from within itself, but as it had no keywords and has code-as-data with a single AST node type, you can easily do a lot of dynamic things that may be difficult even in languages written in themselves (such as control structures).",
        "user": "ULM3U6275",
        "ts": "1570920327.253500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1570920818.000000"
        },
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c33bd5f0-009b-46a6-8c03-7582400e11bb",
        "type": "message",
        "text": "Taking on the responsibility of dealing with varied current and future machine architectures and OS conventions (calling, dynamic libraries, etc) seems like a lot of (never ending) effort that may not have much to do with what makes a language useful/interesting unless it\u2019s goal is to be a systems language.",
        "user": "ULM3U6275",
        "ts": "1570920799.253700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1570921003.000000"
        },
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61"
    },
    {
        "client_msg_id": "acdc3fe4-6139-4d81-8eb2-fdbc122f2600",
        "type": "message",
        "text": "<@UCUSW7WVD> I think we can separate the problematic \"self brain surgery\" method of changing the internals of a Smalltalk image, from the benefits of a language and environment that is able to fully self-represent and self-introspect itself. I think that your \"status signalling\" criticism applies only to the former. Here's a paper, \"Bootstrapping Reflective Systems: The Case of Pharo\", describing how Pharo solves the \"self brain surgery\" problem in Smalltalk while retaining the ability to fully describe itself and evolve itself. <https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.452.6952&amp;rep=rep1&amp;type=pdf>",
        "user": "UJN1TAYEQ",
        "ts": "1570921230.254200",
        "team": "T5TCAFTA9",
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U8A5MS6R1",
                    "UC2A2ARPT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "b4eac961-faed-4148-95d6-4c81573aeef7",
        "type": "message",
        "text": "<@UJN1TAYEQ> I don't understand the distinction you're making. How can you change the lowest-level internals of a system without it being like brain surgery, whether self- or otherwise? There seems to be some border around what you mean by \"fully self-represent\" and \"entire system is written\", but I can't see where it is. But maybe this needs a separate thread in  <#C5U3SEW6A|random>. It's not a huge disagreement that I feel a need to explore.",
        "user": "UCUSW7WVD",
        "ts": "1570922910.255200",
        "team": "T5TCAFTA9",
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61"
    },
    {
        "client_msg_id": "f4fcecc7-8b89-430b-81be-e3c9b285bbb7",
        "type": "message",
        "text": "... Sorry that took forever and is long-winded, but those are my main projects in ... something larger than a nutshell :P\n\nI also have a \"Renderer\" for rendering basic graphics in a declarative way (which I'm using for my other projects, but it's also generally useful).\n\nAnd a \"Circuit\" simulator I'm making PURELY just to demonstrate blurring the lines between code and interaction, etc., as I've described in my previous reply above",
        "user": "UAVCC2X70",
        "ts": "1570924824.255800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1570927493.000000"
        },
        "thread_ts": "1570641258.055700",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "291783bc-7787-45e7-a9dc-bdcf8651a4c6",
        "type": "message",
        "text": "In Smalltalk, if you try to refactor critical low-level parts of the system, you can easily crash the system, because the code you are refactoring is running while you are performing the refactor. In Pharo, you accomplish this by making a copy of the system, and modifying the copy. It's described in the 2014 paper I linked. This paper mentions some limitations (eg, on making changes to how SmallInteger and the boolean values work), due to the original system and the copy sharing the same VM data structures and byte code format, but there's been a lot of new work on the Pharo bootstrapping system since then that I haven't read about yet. Maybe some of these limitations have been removed. It seems plausible that there is some boundary, but I don't know where the theoretical limits are.",
        "user": "UJN1TAYEQ",
        "ts": "1570925495.256100",
        "team": "T5TCAFTA9",
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "874df664-8a6d-45a9-8639-150bf673be16",
        "type": "message",
        "text": "I now see that one of the problems being researched here is how to upgrade a running software system without rebooting it. The 2014 \"hazelnut\" bootstrapping system for Pharo that I cited above has been replaced by the \"espell\" system, which is described as \"a language runtime virtualization infrastructure\".",
        "user": "UJN1TAYEQ",
        "ts": "1570926777.256800",
        "team": "T5TCAFTA9",
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61"
    },
    {
        "client_msg_id": "250E7391-790E-46CE-8673-6AF8B90A876B",
        "type": "message",
        "text": "Jonathan Blow showed up in the comments on the HN Bel post with some excellent thought-clarifying questions: <https://news.ycombinator.com/item?id=21237636>",
        "user": "UC2A2ARPT",
        "ts": "1570947400.258800",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "reply_count": 29,
        "reply_users_count": 9,
        "latest_reply": "1571272163.411500",
        "reply_users": [
            "UCUSW7WVD",
            "UEQ6M68H0",
            "UA14TGLTC",
            "UC2A2ARPT",
            "ULM3U6275",
            "UJN1TAYEQ",
            "UNV27TUKA",
            "UJBAJNFLK",
            "UF5PAGQQ4"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "2009a02b-371e-4e10-adb9-0cf6926a6fed",
        "type": "message",
        "text": "Seems like a classic case of software conservative meeting a software liberal (<https://gist.github.com/cornchz/3313150>). Or a big-team programmer meeting a small-team programmer. Or a shipping-software programmer meeting a sketching-prototypes programmer.",
        "user": "UCUSW7WVD",
        "ts": "1570949506.259100",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UE0ETTCG7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "70cb5e32-6536-4783-95a2-bac8a45d619d",
        "type": "message",
        "text": "I threw my 2 cents in. Anyone pursuing Lisp in this day and age is frankly mad. Its insidious parenthetical notation, and archaic nature make it an eternally fascinating, but ultimately useless exercise.",
        "user": "UEQ6M68H0",
        "ts": "1570955801.259400",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "3bbb8541-a10f-45e5-a583-a544f32f1f2e",
        "type": "message",
        "text": "I think it will clarify it more for me if you compare it with similar existing solutions, how does it compare to lisp (in a lisp machine)/smalltalk (pharo)/self",
        "user": "UBN9AFS0N",
        "ts": "1570966135.259600",
        "team": "T5TCAFTA9",
        "thread_ts": "1570641258.055700",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "a3377dc1-61ea-434c-8ce2-15a9ea652a39",
        "type": "message",
        "text": "\"I don't even see the parenthesis.\"  :face_with_hand_over_mouth:  Seriously though one of my basic macros is to have `(with x = 5 x2 = (* x x) (+ x2 x 1))` map to `(let* ((x 5) (x2 (* x x)) (+ x2 x 1))`.",
        "user": "UA14TGLTC",
        "ts": "1570967065.259800",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "E7BB8EA1-E96B-41A2-BB24-BA5570006B59",
        "type": "message",
        "text": "<@UCUSW7WVD> wait.. who's who in those analogies? I feel like they're both conservative, small-team.",
        "user": "UC2A2ARPT",
        "ts": "1570979236.261400",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "e3e004a9-177b-4f2d-a16a-d2e68e456037",
        "type": "message",
        "text": "Bel seems liberal. Mostly extrapolating from past history. You're right that it's not obvious just from this prose. But I'm curious why it seems conservative.",
        "user": "UCUSW7WVD",
        "ts": "1570980002.261600",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "06e2e875-9700-44ef-8368-bc424e6cc0d7",
        "type": "message",
        "text": "I've built a (the best, IMO) whitespace-sensitive Lisp before, so I have some empathy for paren concerns. If they turn invisible with experience, why not make them invisible to the inexperienced as well?\n\n<http://akkartik.name/post/wart>",
        "user": "UCUSW7WVD",
        "ts": "1570980593.261800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1570980696.000000"
        },
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70",
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "0DE75B68-C09A-4402-B47B-697EE0F4B83A",
        "type": "message",
        "text": "The question any new high level language needs to answer today is \u201cHow are you going to compete with JavaScript?\u201d",
        "user": "ULM3U6275",
        "ts": "1570981184.263800",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "d966f575-8f25-4e09-9549-eeee18221c4d",
        "type": "message",
        "text": "You mean any new high level language _that cares about adoption_. But not everyone cares about adoption.\n\nBel seems like a <https://en.wikipedia.org/wiki/Gedankenexperiment>",
        "user": "UCUSW7WVD",
        "ts": "1570981533.264000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Schrodingers_cat.svg/1200px-Schrodingers_cat.svg.png",
                "image_width": 1200,
                "image_height": 638,
                "image_bytes": 131205,
                "title": "Thought experiment",
                "title_link": "https://en.wikipedia.org/wiki/Gedankenexperiment",
                "from_url": "https://en.wikipedia.org/wiki/Gedankenexperiment",
                "author_name": "Wikipedia",
                "author_link": "https://en.wikipedia.org/",
                "text": "A thought experiment (German: Gedankenexperiment,Gedanken-Experiment, or Gedankenerfahrung) considers a hypothesis, theory, or principle for the purpose of thinking through its consequences. \nJohann Witt-Hansen established that Hans Christian \u00d8rsted was the first to use the German term Gedankenexperiment (lit. thought experiment) circa 1812. \u00d8rsted was also the first to use the equivalent term Gedankenversuch in 1820. \nMuch later, Ernst Mach used the term Gedankenexperiment in a different way, to denote exclusively the imaginary conduct of a real experiment that would be subsequently performed as a real physical experiment by his students. Physical and mental experimentation could then be contrasted: Mach asked his students to provide him with explanations whenever the results from their subsequent, real, physical experiment differed from those of their prior, imaginary experiment.\nThe English term thought experiment was coined (as a calque) from Mach's Gedankenexperiment, and it first appeared in the 1897 English translation of one of Mach\u2019s papers. Prior to its emergence, the activity of posing hypothetical questions that employed subjunctive reasoning had existed for a very long time (for both scientists and philosophers). However, people had no way of categorizing it or speaking about it. This helps to explain the extremely wide and diverse range of the application of the term \"thought experiment\" once it had been introduced into English.\nThe common goal of a thought experiment is to explore the potential consequences of the principle in question:\n\n\"A thought experiment is a device with which one performs an intentional, structured process of intellectual deliberation in order to speculate, within a specifiable problem domain, about potential consequents (or antecedents) for a designated antecedent (or consequent)\" (Yeates, 2004, p. 150).Given the structure of the experiment, it may not be possible to perform it, and even if it could be performed, there need not be an intention to perform it.\nExamples of thought experiments include Schr\u00f6dinger's cat, illustrating quantum indeterminacy through the manipulation of a perfectly sealed environment and a tiny bit of radioactive substance, and Maxwell's demon, which attempts to demonstrate the ability of a hypothetical finite being to violate the 2nd law of thermodynamics.",
                "fallback": "wikipedia: Thought experiment",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/wikipedia.png",
                "id": 1,
                "original_url": "https://en.wikipedia.org/wiki/Gedankenexperiment"
            }
        ],
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "7a85f4d8-a6a2-4c66-b965-ef477d1738dd",
        "type": "message",
        "text": "I mean, do we really need Rust to compete with JavaScript? Or has some magical rubicon been crossed since Rust came into being?",
        "user": "UCUSW7WVD",
        "ts": "1570982842.264300",
        "team": "T5TCAFTA9",
        "thread_ts": "1570947400.258800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "a0f77c80-88a7-4bc5-a83f-35eaca9e27cd",
        "type": "message",
        "text": "<@UHWC9PXBL> re your original post - I've thought about this as well. I think of this pattern as the following metaphor: a person working through a math problem by writing it step by step on paper. The 'paper' is the external medium that's static and 'just data'. The human is the processor creating the new data from the old data at every step and storing it back on the paper. We recreate this pattern over and over in the computer as well, whether it's database/appserver or the local data structure and code inside a procedure.",
        "user": "U8A5MS6R1",
        "ts": "1570982971.264500",
        "team": "T5TCAFTA9",
        "thread_ts": "1570641258.055700",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3ce24c71-365f-4c23-864e-180588516979",
        "type": "message",
        "text": "Smalltalk definitely has a virtual machine, so it's not Smalltalk all the way down. That virtual machine was initially implemented manually for each machine. Squeak introduced a virtual machine written mostly in Smalltalk and generating C code. But in all cases, the VM is not part of the image and the running VM cannot be modified on the fly, unlike the Smalltalk classes built on top of it.",
        "user": "UJBAJNFLK",
        "ts": "1570983127.264700",
        "team": "T5TCAFTA9",
        "thread_ts": "1570892929.240300",
        "parent_user_id": "UNLS33M61",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "35E75FF0-7664-4069-B91C-25E73761E8C0",
        "type": "message",
        "text": "Interesting in general but also regarding self contained: <https://collapseos.org/>",
        "user": "UJFN50C00",
        "ts": "1570993977.266400",
        "team": "T5TCAFTA9",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "C93CA35E-D439-4C31-BF38-091175740DC9",
        "type": "message",
        "text": "<@UCUSW7WVD> your mu is on HN frontpage :crossed_fingers::skin-tone-2:",
        "user": "UL3CJ7YKC",
        "ts": "1570999067.267500",
        "team": "T5TCAFTA9",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "U8A5MS6R1",
                    "ULM3U6275",
                    "UAVCC2X70",
                    "UC2A2ARPT",
                    "UD3AK9JRF",
                    "U5TCAFTD3"
                ],
                "count": 7
            }
        ]
    }
]