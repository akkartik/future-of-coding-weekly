[
    {
        "client_msg_id": "559d281b-e6f6-4b77-80ee-27ac561d6a34",
        "type": "message",
        "text": "<@UE3KC0VK6> Congrats! What are you working on there? (Assuming that isn't too confidential a topic.)",
        "user": "UFV8P4472",
        "ts": "1571956698.211900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFV8P4472",
            "ts": "1571956718.000000"
        },
        "thread_ts": "1570647636.073400",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "5A82AD13-FA1A-4686-98AF-B157B9413F41",
        "type": "message",
        "text": "this might be too much for a text-based medium, but can anyone explain to me why macros (eg in a lisp) can\u2019t just be implemented as functions that read data (a parsed file) and return data (another parsed file, transformed) and pass it to the interpreter by overriding its import references/module dependencies to replace the file on disk with the file post-transformation? like isn\u2019t it just middleware for the interpretation process? checking my mental models here",
        "user": "UHWC9PXBL",
        "ts": "1571972846.216600",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "reply_count": 75,
        "reply_users_count": 10,
        "latest_reply": "1572841533.100400",
        "reply_users": [
            "UCUSW7WVD",
            "UHWC9PXBL",
            "U8A5MS6R1",
            "UAVCC2X70",
            "UGS8TUVK6",
            "UEQ6M68H0",
            "UJBAJNFLK",
            "U5STGTB3J",
            "UJN1TAYEQ",
            "UC6997THT"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "932f0c17-67ea-44c5-abc9-13576aa9e1d8",
        "type": "message",
        "text": "Mostly learning JavaScript and Postgres atm :slightly_smiling_face:",
        "user": "UE3KC0VK6",
        "ts": "1571973624.216700",
        "team": "T5TCAFTA9",
        "thread_ts": "1570647636.073400",
        "parent_user_id": "UAL7940NM"
    },
    {
        "client_msg_id": "5e2c9d57-2325-4a6f-9739-6cc754376f73",
        "type": "message",
        "text": "Certainly. Macros are just glorified search and replace. Whether the process happens entirely in memory or via a stage on disk doesn't seem important. What's important is that the search and replace is specified with -- all its generality -- in the same language.\n\nThere are also a couple of mechanical details to get right:\n\n* Macros are defined in the same files that define functions. The ordering constraints need to make sense.\n* The expansion of macros needs to itself be expanded.",
        "user": "UCUSW7WVD",
        "ts": "1571973869.216900",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "0B0EF739-1DF9-43C9-906D-E5531D476FE0",
        "type": "message",
        "text": "do you think it\u2019s necessary to define them in the same files? i have this crackpot intuition that you can kind of invert the \u2018infinite towers of interpreters\u2019 idea from racket (cf. <https://youtu.be/Ywy_eSzCLi8> ) or like invert the idea of fexprs from kernel and just have data describe the transformations you\u2019d like to make to other files containing data, provided that you get the execution order right (maybe this is too abstract)",
        "user": "UHWC9PXBL",
        "ts": "1571974134.221400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1571974162.000000"
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Nada Amin - Collapsing Towers of Interpreters - Code Mesh 2017",
                "title_link": "https://youtu.be/Ywy_eSzCLi8",
                "author_name": "Erlang Solutions",
                "author_link": "https://www.youtube.com/user/ErlangSolutions",
                "thumb_url": "https://i.ytimg.com/vi/Ywy_eSzCLi8/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Nada Amin - Collapsing Towers of Interpreters - Code Mesh 2017",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/Ywy_eSzCLi8?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/Ywy_eSzCLi8",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/Ywy_eSzCLi8"
            }
        ],
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "ae32ec70-dc17-4c51-ae58-eb817b25ce03",
        "type": "message",
        "text": "Yeah I've come to believe that a macro is just a function that is applied on the AST and applied early (compile time). Other features are just convenience. E.g. they could have a special syntax for AST pattern matching, and being built-in will apply them at the right time. In fact Nim macros are even described as 'functions' (<https://nim-lang.github.io/Nim/manual.html#macros>). In systems without an explicit 'program compilation' phase, the macro idea doesn't exist.",
        "user": "U8A5MS6R1",
        "ts": "1571974628.221800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1571974640.000000"
        },
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "01af3028-9b34-40f0-862b-99c34387f7ff",
        "type": "message",
        "text": "Exactly! Honestly there's not even a real need for \"the compiler\" to be anything more than \"just a function\", either. So your program would be functions applied to code, and then fed into a compile function.\n\nSoftware makes software, and really it's all just functions and data all the way down. So the boundaries between macro &amp; function, code and compiler, etc, is entirely artificial",
        "user": "UAVCC2X70",
        "ts": "1571974965.222200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1571975307.000000"
        },
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UKP3B2J5D",
                    "UAL7940NM"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "31b50c63-4b42-4e11-b0d7-80c2e51a741f",
        "type": "message",
        "text": "You can certainly define macros in a separate place. But you give up some power by not being able to call regular functions when defining macros.\n\nOh, I am also reminded that f-exprs are an extra level of power and expressiveness, letting you pass macros like functions to higher-order functions.",
        "user": "UCUSW7WVD",
        "ts": "1571975150.222600",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "032da5f8-0d4f-4d18-8f01-51626a02defe",
        "type": "message",
        "text": "So like, mapping a macro over all the elements in a list?",
        "user": "UAVCC2X70",
        "ts": "1571975370.223000",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "ec216294-a01b-4e30-a223-624bdc067892",
        "type": "message",
        "text": "Yup! My lisp used to do this, so kinda shocking that I forgot.",
        "user": "UCUSW7WVD",
        "ts": "1571975412.223200",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "2b2bc9af-7650-4f50-bf9a-a4dc592cb69c",
        "type": "message",
        "text": "It's a nice abstraction because you're never saying convert this code and then call it.",
        "user": "UCUSW7WVD",
        "ts": "1571975444.223400",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "5455ddac-aa43-4ced-aed3-62d455a6059e",
        "type": "message",
        "text": "A bit of a tangent: if the interpreter is tiny, couldn't the \"compiler\" just create a program that contains the compiled interpreter, ended the rest of the program as actual LISP lists, and then feeds some initial code into the interpreter?",
        "user": "UAVCC2X70",
        "ts": "1571976511.223600",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "dda03359-2094-4681-9b39-84f444f6f2ba",
        "type": "message",
        "text": "That is in fact present in Lisp compilers like SBCL.",
        "user": "UCUSW7WVD",
        "ts": "1571976577.223800",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "43fda165-16d2-4da7-ad87-a8480bf7b5f7",
        "type": "message",
        "text": "The final binary includes the entire compiler.",
        "user": "UCUSW7WVD",
        "ts": "1571976610.224000",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "4e6a1f6d-1a04-447a-8978-199463c3756d",
        "type": "message",
        "text": "Ha :)\n\nI'll bet if one could write such a compiler in LISP, then one could write a LISP program that creates code from code, and feeds the result into a \"compile\" function, and then there'd be no more distinction whatsoever between macros and functions",
        "user": "UAVCC2X70",
        "ts": "1571976712.224200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1571976727.000000"
        },
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "4d029ff2-3a32-4125-b1bd-c3a94e57e63b",
        "type": "message",
        "text": "Except speed/performance..",
        "user": "UCUSW7WVD",
        "ts": "1571976767.224500",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "376583cf-5b92-4dea-a2ff-240d9e656870",
        "type": "message",
        "text": "... of compilation? Maybe that's a fair trade for power ... (and I don't imagine that it would be much faster to edit live lists from a running program, because LISP is simple to parse)",
        "user": "UAVCC2X70",
        "ts": "1571976809.224700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1571979259.000000"
        },
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "a5fdcdf1-91b7-4a13-872b-92776cfc17dc",
        "type": "message",
        "text": "Sure. But if you don't care about performance you could just stick with an interpreter.",
        "user": "UCUSW7WVD",
        "ts": "1571976908.225200",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "9bdb8a4f-dfd3-414d-b4e0-911761be1df5",
        "type": "message",
        "text": "Bundling the entire compiler can certainly be worse than a raw interpreter for certain programs.",
        "user": "UCUSW7WVD",
        "ts": "1571976947.225400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1571976957.000000"
        },
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "64ffa8e0-97a5-4314-ade2-12aaa0832753",
        "type": "message",
        "text": "I'm curious why this community isn't over on discord. It's free, whereas slack is not, and its emojis are tons better than slack's.",
        "user": "UPS6G7VRS",
        "ts": "1571977103.227300",
        "team": "T5TCAFTA9",
        "thread_ts": "1571977103.227300",
        "reply_count": 5,
        "reply_users_count": 5,
        "latest_reply": "1572020211.267200",
        "reply_users": [
            "UCUSW7WVD",
            "UJ6LDMMN0",
            "UMU2RLPR8",
            "UNH2D8U6P",
            "UC2A2ARPT"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "2cf1d20b-5bef-4fa0-9530-d454a0b2e364",
        "type": "message",
        "text": "... unless the point is to replace textual \"source code\" (and macros) with a living breathing thing that is its own interface for editing itself and ultimately generates (via a compile function) some end product :)\n\nIn this case, instead of macros, it could provide ... anything else, perhaps something you wouldn't recognize as \"code\", and programmatically generate code *from* it",
        "user": "UAVCC2X70",
        "ts": "1571979749.227700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1571979878.000000"
        },
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "2e556dc8-9c4b-4afa-b0ef-9306f2167671",
        "type": "message",
        "text": "If it's its own interface, why does it need a compile function? Doesn't that disqualify it from living and breathing?",
        "user": "UCUSW7WVD",
        "ts": "1571979901.228100",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "1fb79815-22f4-4050-ab21-6837c1999a87",
        "type": "message",
        "text": "I don't really follow your statements in the last couple of days. I had questions on the <#CC2JRGVLK|introductions> thread, but wanted to give the guest of honor some space first..",
        "user": "UCUSW7WVD",
        "ts": "1571979941.228300",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "c4442da1-de65-4aca-a5e1-a222006595cd",
        "type": "message",
        "text": "Tying it back to the original topic, my point is that even the compiler &amp; language is non-essential middleware, because it's all just code generating code from other code, so why not just bring it all in to a single program where you have full control?\n\nIn that light, a macro really is just a function. The only distinction is whether a function is embedded in the \"output\" program, or used to generate it. Any function can be both (e.g. mapping over code, but the same map function is also used post-compile)",
        "user": "UAVCC2X70",
        "ts": "1571980330.228900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1571980701.000000"
        },
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "6acb1faf-4008-41df-8a05-cd474dd029ac",
        "type": "message",
        "text": "The big disqualifier for Discord IMO is the lack of URLs for comments. That makes it just a chat client and less suitable for asynchronous consumption. Here I'm constantly exercising the ability to refer back to old threads and create cross-links between ideas.\n\nI don't particularly like Slack, but I _do_ like permalinks.",
        "user": "UCUSW7WVD",
        "ts": "1571980396.229200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1571980432.000000"
        },
        "thread_ts": "1571977103.227300",
        "parent_user_id": "UPS6G7VRS"
    },
    {
        "client_msg_id": "691b2ae7-23c9-4d23-81f8-2b3b0efd9303",
        "type": "message",
        "text": "What constitutes \"single program\" for you? A single process with a unified address space? Something else?\n\nWhy not go the other direction like Smalltalk and have lots of tiny processes/objects/tiles cooperating?",
        "user": "UCUSW7WVD",
        "ts": "1571980840.229700",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "7b108c66-9409-43dd-b93c-e14faeba95da",
        "type": "message",
        "text": "I mean \"single program\" just like it sounds. Like a SmallTalk environment made just for a single product or product suite, all embedded in a single executable program or script.\n\nEverything in it exists solely to support one specific thing being made: The code for the thing, and for compiling it, and for editing &amp; visualizing it, etc. Again, \"thing\" could be a set of related things, like a suite of products, or different layers of a tiered application (similar to how Dark erases those boundaries)\n\nThe general idea is that there'd be something minimal that you clone per use, rather than something like an \"operating system\".",
        "user": "UAVCC2X70",
        "ts": "1571984176.230300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1572014883.000000"
        },
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "f5898bf5-9566-458b-9c1a-437d56e96de6",
        "type": "message",
        "text": "And, is use of emojis a primary feature we need to discuss the future of programming? Before emojis, I would prefer a good way to handle threads (slack is porr at that). And, I guess this discussion actually should be in <#CEXED56UR|meta> channel. :wink:",
        "user": "UJ6LDMMN0",
        "ts": "1571986233.230800",
        "team": "T5TCAFTA9",
        "thread_ts": "1571977103.227300",
        "parent_user_id": "UPS6G7VRS"
    },
    {
        "client_msg_id": "ccaedf10-4a9f-4010-8322-72bdc72db741",
        "type": "message",
        "text": "in ClojureScript, macros are commonly defined in a different file, self-hosted ClojureScript being the exception, see <https://clojurescript.org/about/differences#_macros>",
        "user": "UGS8TUVK6",
        "ts": "1571986235.231000",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "f40c15af-c63a-41e1-871a-441c75c53b23",
        "type": "message",
        "text": "Macros are used extensively in Assembler, and one of the key tools is to see a printout of the expanded code ,because complex macros can do unpredictable things. This is the reason why macros which were present 50 years ago in great abundance have gradually withered. There is little interest now in seeing printouts of your code, and people are working more directly with their source code, thus Macros are inconvenient because they force a user to expand the macro in their head. This is really about a super powerful feature that is being disused today, because we don't print code out like in olden days.",
        "user": "UEQ6M68H0",
        "ts": "1571989043.231300",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "d74b23b4-7b06-40c2-84a3-2dc26b9f1fda",
        "type": "message",
        "text": "also iirc emoji are only available on discord if a certain number of your members pay for it anyway right?",
        "user": "UMU2RLPR8",
        "ts": "1571989793.231500",
        "team": "T5TCAFTA9",
        "thread_ts": "1571977103.227300",
        "parent_user_id": "UPS6G7VRS"
    },
    {
        "client_msg_id": "1a84adf5-c63b-4af9-ae3c-6f65e8ad38d1",
        "type": "message",
        "text": "Probably the most principled approach to macros is the one taken by Racket, which introduces the concept of \"phase levels\" (<https://docs.racket-lang.org/guide/phases.html>) which is a generalization of the traditional distinction between \"compile time\" and \"run time\". You have a multi-step computation in which each step takes the output of the preceding one as one of its inputs. This point of view also covers related approaches such as code generation.",
        "user": "UJBAJNFLK",
        "ts": "1571996685.231700",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "CD9937BF-D8D7-4504-87C6-80451668386C",
        "type": "message",
        "text": "This classic distinction between compile and run time made me wonder if there are other \u201ctimes\u201d, and I like the idea of generalizing it. If you think about it a little differently than what Racket generalizes it for, say for a program lifecycle: \n\n1. You design it (think, write code), where the development environment can support you, \n2. Then it gets compiled, where a compiler supports you with error detection and optimization (this can be further divided into smaller, more specific steps, which is what Racket does and what you were discussing above in terms of macros), \n3. Then there's configuration time, when you start a process with parameters that are not hard coded into the binary but also guaranteed not to change over the process' lifetime, \n4. And then there's runtime, which of course could also consist of several distinct phases if you designed it that way.\n\nThat reminds me a lot of currying in a functional language, where each curried parameter is the current lifecycle stage\u2019s \u201cstate\u201d in a chain from hard coded design time invariances until you get to the runtime parameter for user input in that moment. Ha, game programmers could probably think of each frame as a stage within the broader runtime phase.\n\nOr if you don\u2019t like the functional perspective think of a dynamic program that goes deeper into a stack of scopes, where each scope holds the environment for that particular stage and can access all the environments up the chain.\n\nDoes that sound familiar to anyone? Do you know any papers or talks that think of it in this way?",
        "user": "U5STGTB3J",
        "ts": "1572001335.248400",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UPD5QQW81"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "896c2fbc-eedd-40cd-bd59-22ff5debe151",
        "type": "message",
        "text": "<@UJBAJNFLK> I was aware of Racket's notion of phases but hadn't connected it up with code generation. Can you elaborate on that aspect, or give some examples of projects that have used phase separation for code generation?\n\nMacros are to code generation as interpreters are to compilers? That feels like a fertile analogy, though I can't seem to do much with it at 4am.",
        "user": "UCUSW7WVD",
        "ts": "1572003120.248900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1572003395.000000"
        },
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "aaa7ec9d-c3fe-4c10-842c-fec26797c3dd",
        "type": "message",
        "text": "<https://futureofcoding.slack.com/archives/CLYCGTCPL/p1572002424061800> feels extremely relevant to this (great!) thread in particular.\n\nPerhaps it's romanticists and classicists all the way down. Perhaps my preference for keeping it all in one phase is a lack of architecture that's going to bite me over time.",
        "user": "UCUSW7WVD",
        "ts": "1572003719.249300",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/CLYCGTCPL/p1572002424061800",
                "fallback": "[October 25th, 2019 4:20 AM] ak: An outline of two extreme viewpoints that turns into a dramatic but subtly stated endorsement of end-user programming. Or am I just predisposed to interpret it that way?\n\n<https://www.sicpers.info/2019/10/zen-and-the-art-of-software-maintenance>\n\nThere's an analogy here with typing. It used to be common to want to have secretaries who typed out things for us. That doesn't seem an aspirational goal anymore for most people. What are the reasons for this shift? Could they apply also to programming?",
                "ts": "1572002424.061800",
                "author_id": "UCUSW7WVD",
                "author_subname": "Kartik Agaram",
                "channel_id": "CLYCGTCPL",
                "channel_name": "end-user-programming",
                "is_msg_unfurl": true,
                "text": "An outline of two extreme viewpoints that turns into a dramatic but subtly stated endorsement of end-user programming. Or am I just predisposed to interpret it that way?\n\n<https://www.sicpers.info/2019/10/zen-and-the-art-of-software-maintenance>\n\nThere's an analogy here with typing. It used to be common to want to have secretaries who typed out things for us. That doesn't seem an aspirational goal anymore for most people. What are the reasons for this shift? Could they apply also to programming?",
                "author_name": "Kartik Agaram",
                "author_link": "https://futureofcoding.slack.com/team/UCUSW7WVD",
                "author_icon": "https://avatars.slack-edge.com/2019-07-14/687915485201_6e649a383cf8f9e366e3_48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/CLYCGTCPL/p1572002424061800",
                "footer": "Posted in #end-user-programming"
            }
        ],
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "34a68e65-f41c-4eba-8e7e-ad2b5e34b87c",
        "type": "message",
        "text": "*Show FoC:* <https://twitter.com/mpjme/status/1187701259974905857?s=19>",
        "user": "U5TCAFTD3",
        "ts": "1572005137.250400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/mpjme|@mpjme>: On Monday morning, future of programming wizard <https://twitter.com/stevekrouse|@stevekrouse> is guesting the live stream. We'll be geeking out on functional reactive programming, and all your questions are welcome.\n\nDon't miss it on Monday 07:00AM PT! \nTimezone converter: <http://bit.ly/2BTSAId> <https://pbs.twimg.com/media/EHuP_NvXYAEFpC6.jpg>",
                "ts": 1572005021,
                "author_name": "mpj \ud83d\udc9b",
                "author_link": "https://twitter.com/mpjme/status/1187701259974905857",
                "author_icon": "https://pbs.twimg.com/profile_images/1088680680547143680/nAsnhhcy_normal.jpg",
                "author_subname": "@mpjme",
                "text": "On Monday morning, future of programming wizard <https://twitter.com/stevekrouse|@stevekrouse> is guesting the live stream. We'll be geeking out on functional reactive programming, and all your questions are welcome.\n\nDon't miss it on Monday 07:00AM PT! \nTimezone converter: <http://bit.ly/2BTSAId> <https://pbs.twimg.com/media/EHuP_NvXYAEFpC6.jpg>",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/mpjme/status/1187701259974905857?s=19",
                "image_url": "https://pbs.twimg.com/media/EHuP_NvXYAEFpC6.jpg",
                "image_width": 1200,
                "image_height": 675,
                "image_bytes": 130849,
                "id": 1,
                "original_url": "https://twitter.com/mpjme/status/1187701259974905857?s=19",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UF2GNRUTV",
                    "UHYC3BA4X",
                    "UL3CJ7YKC",
                    "UNLS33M61",
                    "UBSMEUXAA",
                    "UA14TGLTC",
                    "U7C7B75R6"
                ],
                "count": 7
            },
            {
                "name": "male_mage",
                "users": [
                    "UE0ETTCG7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "564d0d37-7a7a-4007-bdbd-0f240d409b19",
        "type": "message",
        "text": "In other news, one of my podcasts is on the front page of HN now if anyone wants to join the discussion! :grin:",
        "user": "U5TCAFTD3",
        "ts": "1572005223.251400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U5TCAFTD3",
            "ts": "1572005231.000000"
        },
        "thread_ts": "1572005223.251400",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1572015806.263100",
        "reply_users": [
            "UCUSW7WVD"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UE0ETTCG7",
                    "UHWC9PXBL",
                    "UNLS33M61",
                    "UN7BQ1VQU",
                    "UNC19UWLC",
                    "UCXR52MU2"
                ],
                "count": 6
            }
        ]
    },
    {
        "client_msg_id": "e96734c4-d832-44ad-a93a-1c272d8982d5",
        "type": "message",
        "text": "<@UCUSW7WVD> Macros are in-memory code generators. They generate Lisp code from DSLs written in S-expression syntax. Compilers are code generators as well, of course, as are preprocessors and other variants on the same idea. And many compilers have multiple internal phases. So every program is processed by a multi-stage pipeline in which each step is a code generator, and the final output is code for some interpreter (which may be implemented in hardware, called a processor).",
        "user": "UJBAJNFLK",
        "ts": "1572010164.252200",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "c7a60ecd-41d9-43fc-b409-e27a81ad8764",
        "type": "message",
        "text": "<@U5STGTB3J> I see a big difference between the first step, done by humans, and all the others, which are automatized.",
        "user": "UJBAJNFLK",
        "ts": "1572010230.252400",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "28C71601-0620-46BF-BD0C-1C24E7A03086",
        "type": "message",
        "text": "<@UJBAJNFLK> I can see where you\u2019re coming from and I agree that if you come from a perspective of automation, the design step feels different.\n\nI was looking at it more from a perspective of augmentation and interactivity. All steps offer various degrees of tinkering, even a tool chain has different settings, so the programmer can be involved in every step.\n\nEspecially the first step, design, benefits from a toolset which augments that experience. And that is where IDEs could shine much more than they do today. Thinking in the direction of \u201cmoldable tools\u201d. On further reflection, that is where this lifecycle becomes an actual cycle I guess\u2026",
        "user": "U5STGTB3J",
        "ts": "1572010897.260400",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "22FD5F2A-7D97-48C5-884F-B9CE62BA3B8E",
        "type": "message",
        "text": "Well, I do realize that I went quite off-topic, sorry. Still happy to hear about any pointers to related material. I can\u2019t possibly be the first person with that view.",
        "user": "U5STGTB3J",
        "ts": "1572011025.262300",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "28515628-29fc-4f06-aad9-b8695a41b413",
        "type": "message",
        "text": "I don't really see emoji as a selling point for a chat program, but slack has unlimited custom emoji anyway - which discord does not",
        "user": "UNH2D8U6P",
        "ts": "1572012077.262700",
        "team": "T5TCAFTA9",
        "thread_ts": "1571977103.227300",
        "parent_user_id": "UPS6G7VRS"
    },
    {
        "client_msg_id": "b2cfcc6e-4aed-4a86-a985-8948a20145a3",
        "type": "message",
        "text": "I noticed! Pairs extremely well with <https://futureofcoding.slack.com/archives/CLYCGTCPL/p1572002424061800>",
        "user": "UCUSW7WVD",
        "ts": "1572015806.263100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/CLYCGTCPL/p1572002424061800",
                "fallback": "[October 25th, 2019 4:20 AM] ak: An outline of two extreme viewpoints that turns into a dramatic but subtly stated endorsement of end-user programming. Or am I just predisposed to interpret it that way?\n\n<https://www.sicpers.info/2019/10/zen-and-the-art-of-software-maintenance>\n\nThere's an analogy here with typing. It used to be common to want to have secretaries who typed out things for us. That doesn't seem an aspirational goal anymore for most people. What are the reasons for this shift? Could they apply also to programming?",
                "ts": "1572002424.061800",
                "author_id": "UCUSW7WVD",
                "author_subname": "Kartik Agaram",
                "channel_id": "CLYCGTCPL",
                "channel_name": "end-user-programming",
                "is_msg_unfurl": true,
                "text": "An outline of two extreme viewpoints that turns into a dramatic but subtly stated endorsement of end-user programming. Or am I just predisposed to interpret it that way?\n\n<https://www.sicpers.info/2019/10/zen-and-the-art-of-software-maintenance>\n\nThere's an analogy here with typing. It used to be common to want to have secretaries who typed out things for us. That doesn't seem an aspirational goal anymore for most people. What are the reasons for this shift? Could they apply also to programming?",
                "author_name": "Kartik Agaram",
                "author_link": "https://futureofcoding.slack.com/team/UCUSW7WVD",
                "author_icon": "https://avatars.slack-edge.com/2019-07-14/687915485201_6e649a383cf8f9e366e3_48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/CLYCGTCPL/p1572002424061800",
                "footer": "Posted in #end-user-programming"
            }
        ],
        "thread_ts": "1572005223.251400",
        "parent_user_id": "U5TCAFTD3"
    },
    {
        "client_msg_id": "0bf76715-f9ac-4300-9922-cad9522aad97",
        "type": "message",
        "text": "<@U5TCAFTD3> Amazing! That\u2019s (s)exactly what I hoped for when mentioned YouTube! :slightly_smiling_face: Mpjme is one on my favourite. Did you know him before?",
        "user": "UL3CJ7YKC",
        "ts": "1572018243.263500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1572018261.000000"
        },
        "thread_ts": "1571918223.199700",
        "parent_user_id": "U5TCAFTD3"
    },
    {
        "client_msg_id": "6198f9f4-a490-432b-a4f2-1cd6e0f50418",
        "type": "message",
        "text": "Curv has 4 phases, rather than 2. There is the conventional compile phase (macro expansion happens at this time, but macros are only used internally, they aren't user defined). Then conventional run time. Most Curv programs evaluate to produce a shape value. A shape contains a signed distance function and a colour function. In the third phase, these functions are compiled into GLSL shader code, which is run on the GPU in the fourth phase. During 3rd phase compilation, many compile time constants were actually computed during 2nd phase evaluation. So 2nd phase evaluation could be viewed as a kind of partial evaluation.",
        "user": "UJN1TAYEQ",
        "ts": "1572019952.264000",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "C1454CBC-F441-4114-A1DF-FC24EDA4845D",
        "type": "message",
        "text": "The reason this community is on Slack is that it predates Discord crossing over into mainstream popularity. At the time the community was founded, it was common for programmers to be on slack, and uncommon for anyone but gamers to be on discord. We've talked a lot about moving the community in <#CEXED56UR|meta>, but we haven't found a new home that solves specific problems with slack without introducing a raft of new shortcomings. The search continues, please offer suggestions in that channel!",
        "user": "UC2A2ARPT",
        "ts": "1572020211.267200",
        "team": "T5TCAFTA9",
        "thread_ts": "1571977103.227300",
        "parent_user_id": "UPS6G7VRS"
    },
    {
        "client_msg_id": "22949be8-3679-4e42-b099-1e97868bb2ea",
        "type": "message",
        "text": "Collapsing macro and function call evaluation into a single phase is possible, but there is a huge performance penalty. It means that all arguments are passed to functions as uninterpreted syntax trees. A lexical environment is also passed in every function call. Most functions will just evaluate their arguments using the parent lexical environment, but some functions will do weird stuff. For example, `lambda` is just a function in this system, since macros and functions are the same. `lambda(x,x+1)` is a lambda expression which binds the first argument, an identifier, as a local variable in the environment of the second argument, an expression, and then returns an ordinary function.",
        "user": "UJN1TAYEQ",
        "ts": "1572020512.267400",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "4b402efa-9161-4eaf-9298-0f2ecb51147d",
        "type": "message",
        "text": "Collapsing macros and functions into the same concept also imposes an abstraction penalty: it makes it exponentially more difficult to figure out what a program is doing. You can't assume that `f(4)` and `f(2+2)` are equivalent expressions. Brian Cantwell Smith explored these issues thoroughly in his thesis on \"3-Lisp\", and it is recommended reading for people reading this thread.",
        "user": "UJN1TAYEQ",
        "ts": "1572020730.267600",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "d82cc81a-f26a-4449-97c3-d4b9b5416025",
        "type": "message",
        "text": "Just met him",
        "user": "U5TCAFTD3",
        "ts": "1572020741.267800",
        "team": "T5TCAFTA9",
        "thread_ts": "1571918223.199700",
        "parent_user_id": "U5TCAFTD3",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "656e085a-dbce-4880-a813-67fa732c4d49",
        "type": "message",
        "text": "The \"reflective tower of interpreters\" concept, and the general concept of \"reflection\", comes from Brian Smith's thesis.",
        "user": "UJN1TAYEQ",
        "ts": "1572020853.268000",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "F2888838-74A8-4648-8E95-9FBD6BADFBD4",
        "type": "message",
        "text": "<@UJN1TAYEQ> Is it this one: <https://www-master.ufr-info-p6.jussieu.fr/2006/Ajouts/Master_esj_2006_2007/IMG/pdf/Smit84.pdf>",
        "user": "U5STGTB3J",
        "ts": "1572020960.268600",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "c0d65dcd-cb17-44a8-97bf-f6758401b730",
        "type": "message",
        "text": "That's not the paper I read, but it covers the same ground. I remember a more detailed analysis of why it is impossible to understand and debug 3-Lisp programs, this paper only briefly mentions the issue.",
        "user": "UJN1TAYEQ",
        "ts": "1572021342.268800",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "72572183-758d-4321-8f24-eea9d5c51dd0",
        "type": "message",
        "text": "I read his 1982 PHd thesis. Definitely a mind-expanding experience. Note it is &gt; 750 pages. <https://dspace.mit.edu/handle/1721.1/15961>",
        "user": "UJN1TAYEQ",
        "ts": "1572022184.269000",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U5STGTB3J"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9F328950-94B8-45BD-89BF-0F7441075BEC",
        "type": "message",
        "text": "<@U5STGTB3J> Your point of view is definitely interesting to me as well. Macros are a rather opaque way to do program transformations and I have often wondered if a tool-based human-supervised approach could lead to better understandable code.",
        "user": "UJBAJNFLK",
        "ts": "1572028660.273800",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "95d0e6fb-5831-4d3d-8796-dd03b0ef73ad",
        "type": "message",
        "text": "as long as we\u2019re citing epic papers: <https://web.cs.wpi.edu/~jshutt/kernel.html> kernel goes into this a lot and the way the red/rebol parser works is very similar",
        "user": "UHWC9PXBL",
        "ts": "1572036160.274400",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "138e03a7-8f4d-4ca4-9fb1-530a18ad3c59",
        "type": "message",
        "text": "i think if we actually lift the notion of evaluation into like user-land (or even IDE-land), plus work like <https://www.youtube.com/watch?v=Ywy_eSzCLi8> we could maintain different levels of interpretation/compilation and move through them during dev, while only shipping a binary during prod",
        "user": "UHWC9PXBL",
        "ts": "1572036219.274600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Nada Amin - Collapsing Towers of Interpreters - Code Mesh 2017",
                "title_link": "https://www.youtube.com/watch?v=Ywy_eSzCLi8",
                "author_name": "Erlang Solutions",
                "author_link": "https://www.youtube.com/user/ErlangSolutions",
                "thumb_url": "https://i.ytimg.com/vi/Ywy_eSzCLi8/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Nada Amin - Collapsing Towers of Interpreters - Code Mesh 2017",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/Ywy_eSzCLi8?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=Ywy_eSzCLi8",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=Ywy_eSzCLi8"
            }
        ],
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "CB2D9C64-86C1-42DB-A835-477C795F3219",
        "type": "message",
        "text": "And by \u201cepic\u201d you clearly mean epic proportions\u2026 jeez\u2026 another 190 pages.",
        "user": "U5STGTB3J",
        "ts": "1572036935.276200",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "5f1a6409-78e1-4f39-9772-49e983c0dfe1",
        "type": "message",
        "text": "yes that was exactly what i meant lol",
        "user": "UHWC9PXBL",
        "ts": "1572037679.276400",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "c01f69af-18e6-43ca-bd03-11dbcfdbe649",
        "type": "message",
        "text": "guess i wasnt too clear",
        "user": "UHWC9PXBL",
        "ts": "1572037681.276800",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "9222dc1a-ff27-41bc-b211-8995922baa62",
        "type": "message",
        "text": "just realized i shared the same video link twice\u2014sorry everyone. it IS very cool though",
        "user": "UHWC9PXBL",
        "ts": "1572037713.277000",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    }
]