[
    {
        "client_msg_id": "5245b9cb-5156-40d9-9b28-b3fe5330bb32",
        "type": "message",
        "text": "<@ULM3U6275> Unquestionably Excel is a programming language with a visual shell. The language has many innovative properties, such as a closed, protected arithmetic, where undefined quantities ripple through the system without crashing (unlike programs in almost every other language), etc. The environment has an automatic variable naming system using A5, B3, etc., which has the further property that when you insert a new column, all of the labels are automatically fixed up. This is the semantic implication of a column insert on the underlying code. The end user is not particularly aware of the underlying language until they write a formula or create a VBA function which exposes the naked underbelly of the language that drives the system. Since a range of cells has a visual representation, it is possible to create simple sheets with some SUM functions without typing a single character. So one could say they have perfected the visual aids because they have minimized textual interactions.\n\nThe supposed dichotomy between text and graphical forms is an illusion that constantly comes up in this discussion group. If you look back at the history of mathematics, and most particularly to the time when Newton and Leibniz were inventing calculus, you will see that Newton, in order to prove that his calculus worked, had to write all these letters and demonstrate geometrical proofs of his work, because that's what people could understand. Subsequently, some famous mathematician proved that all of geometry can be represented in algebra.  I don't care which node and wire product you show me, i can remap the geometry of that product into algebra (which is textual) and textual transformations of that algebra. In fact, since a computer is a one-dimensional stream of opcodes, if your software runs on a computer it had to be mapped at some point to the symbolic algebra of the Intel or ARM instruction set.\n I have seen multi-million dollar budget projects flounder in the FoC space caused in part by the team focusing on the graphical interface before they defined their backend algebra. When you click and drag an object you are performing an algebraic operation that can be represented in text. If you haven't figured out the grammar, verbs, nouns, and semantics of your back-end language first, you will thrash around, because the limits of your underlying algebra will inevitably push back up into the higher layers.\n\nIf you want to build a sturdy house, you gotta build from the bottom up; laying the foundation first. Putting in the windows before the concrete is poured is frankly crazy. That being said, one has to design from both ends, and have a vision of the final product. This is what makes creating a new language so tricky, especially when you want to have a graphical front end.",
        "user": "UEQ6M68H0",
        "ts": "1577412417.209800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEQ6M68H0",
            "ts": "1577498830.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MAlw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": " Unquestionably Excel is a programming language with a visual shell. The language has many innovative properties, such as a closed, protected arithmetic, where undefined quantities ripple through the system without crashing (unlike programs in almost every other language), etc. The environment has an automatic variable naming system using A5, B3, etc., which has the further property that when you insert a new column, all of the labels are automatically fixed up. This is the semantic implication of a column insert on the underlying code. The end user is not particularly aware of the underlying language until they write a formula or create a VBA function which exposes the naked underbelly of the language that drives the system. Since a range of cells has a visual representation, it is possible to create simple sheets with some SUM functions without typing a single character. So one could say they have perfected the visual aids because they have minimized textual interactions.\n\nThe supposed dichotomy between text and graphical forms is an illusion that constantly comes up in this discussion group. If you look back at the history of mathematics, and most particularly to the time when Newton and Leibniz were inventing calculus, you will see that Newton, in order to prove that his calculus worked, had to write all these letters and demonstrate geometrical proofs of his work, because that's what people could understand. Subsequently, some famous mathematician proved that all of geometry can be represented in algebra.  I don't care which node and wire product you show me, i can remap the geometry of that product into algebra (which is textual) and textual transformations of that algebra. In fact, since a computer is a one-dimensional stream of opcodes, if your software runs on a computer it had to be mapped at some point to the symbolic algebra of the Intel or ARM instruction set.\n I have seen multi-million dollar budget projects flounder in the FoC space caused in part by the team focusing on the graphical interface before they defined their backend algebra. When you click and drag an object you are performing an algebraic operation that can be represented in text. If you haven't figured out the grammar, verbs, nouns, and semantics of your back-end language first, you will thrash around, because the limits of your underlying algebra will inevitably push back up into the higher layers.\n\nIf you want to build a sturdy house, you gotta build from the bottom up; laying the foundation first. Putting in the windows before the concrete is poured is frankly crazy. That being said, one has to design from both ends, and have a vision of the final product. This is what makes creating a new language so tricky, especially when you want to have a graphical front end."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577254484.117800",
        "parent_user_id": "UEQ6M68H0",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT",
                    "UMVFWPZ36"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "0CBDA06B-6E8A-4F33-8688-229A30CAF44C",
        "type": "message",
        "text": "Agreed that you have to build the foundations first of the language but with the end goal in site. I think one of the big things I see in designing languages is that a lot of research is experimentation without a known end goal. How many projects here have a clear end goal?",
        "user": "UFLN9JFRT",
        "ts": "1577417254.214000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1/+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Agreed that you have to build the foundations first of the language but with the end goal in site. I think one of the big things I see in designing languages is that a lot of research is experimentation without a known end goal. How many projects here have a clear end goal?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577254484.117800",
        "parent_user_id": "UEQ6M68H0",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "76ECFA24-1125-4262-A0F9-DE29903E28C7",
        "type": "message",
        "text": "Fantastic write up. I guess containers are also another composition model. With http as the bridge?",
        "user": "UFLN9JFRT",
        "ts": "1577417645.215800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eCP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fantastic write up. I guess containers are also another composition model. With http as the bridge?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "D3B1D593-9530-4383-9478-6868F77328C0",
        "type": "message",
        "text": "I\u2019ll read it too ",
        "user": "UFLN9JFRT",
        "ts": "1577418984.216900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZTtv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019ll read it too "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577307438.157000",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "36528172-3ea6-40c3-89d6-9d1876ac335f",
        "type": "message",
        "text": "Yes I see containers as a composition model. In fact beyond a certain scale, the common model is you have some stateful processes as peers and they send messages to each other. Some focus on the naming aspect (e.g. services) while others focus on the reproducibility aspect.",
        "user": "U8A5MS6R1",
        "ts": "1577430251.218100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1577430349.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EzTp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes I see containers as a composition model. In fact beyond a certain scale, the common model is you have some stateful processes as peers and they send messages to each other. Some focus on the naming aspect (e.g. services) while others focus on the reproducibility aspect."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f9bc63d9-d965-4260-a4b1-9176b34f7a18",
        "type": "message",
        "text": "Ok, makes sense. I guess this is where userland can be used to glue different connection models together?",
        "user": "UFLN9JFRT",
        "ts": "1577444051.223900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I4wwY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok, makes sense. I guess this is where userland can be used to glue different connection models together?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "188EA23E-0834-45F0-B8D5-4EB4FA0D88CF",
        "type": "message",
        "text": "Me too!",
        "user": "UJBAJNFLK",
        "ts": "1577444913.224300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IyEZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Me too!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577307438.157000",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c98d8fe5-7c19-4a54-866e-2ad184b06d50",
        "type": "message",
        "text": "<@UEQ6M68H0> \u201cThe supposed dichotomy between text and graphical is an illusion...\u201d\n\nSure, but text *is* graphical with respect to bits, and involves a lot of computation and memory spent transforming the underlying bits into something more digestible to our limited minds. Theoretically, a computer only needs a single output bit (say, a light that can be on or off) and single input bit (say, a keyboard with 0 and 1 buttons) and everything else is a practical accommodation for our cognitive and physical limitations, but it\u2019s in those accommodations that computers become useful.\n\nWould Photoshop be as useful if users had to type code to create images - entering the coordinates of each operation as numbers instead of using direct manipulation? Technically, they\u2019re equivalent, but one moves more memory and computational load off the user and into the computer (depending on the type of operation).\n\nI know you\u2019re not disagreeing with the above, and are instead criticizing the visual programming approach that has forgotten this. Node &amp; line is often assumed to decrease cognitive load, even in cases where it doesn\u2019t - which is almost all. Photoshop wouldn\u2019t be improved if one had to input the coordinates of the paint operations with nodes &amp; lines (vs a direct manipulation paintbrush) though it might be useful for defining simple filters, in the limited cases where they more closely resemble our mental models of those filters.",
        "user": "ULM3U6275",
        "ts": "1577463712.254300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1577466240.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lvU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " \u201cThe supposed dichotomy between text and graphical is an illusion...\u201d\n\nSure, but text "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " graphical with respect to bits, and involves a lot of computation and memory spent transforming the underlying bits into something more digestible to our limited minds. Theoretically, a computer only needs a single output bit (say, a light that can be on or off) and single input bit (say, a keyboard with 0 and 1 buttons) and everything else is a practical accommodation for our cognitive and physical limitations, but it\u2019s in those accommodations that computers become useful.\n\nWould Photoshop be as useful if users had to type code to create images - entering the coordinates of each operation as numbers instead of using direct manipulation? Technically, they\u2019re equivalent, but one moves more memory and computational load off the user and into the computer (depending on the type of operation).\n\nI know you\u2019re not disagreeing with the above, and are instead criticizing the visual programming approach that has forgotten this. Node & line is often assumed to decrease cognitive load, even in cases where it doesn\u2019t - which is almost all. Photoshop wouldn\u2019t be improved if one had to input the coordinates of the paint operations with nodes & lines (vs a direct manipulation paintbrush) though it might be useful for defining simple filters, in the limited cases where they more closely resemble our mental models of those filters."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577254484.117800",
        "parent_user_id": "UEQ6M68H0",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "C9C73C8A-86EC-4D6D-BAC0-E6381AAE714C",
        "type": "message",
        "text": "&gt; I wonder if someone has worked on a taxonomy of composition models in computing - that would be interesting to read.\n&gt; \nI\u2019d like to read that too. It would also be a good way to figure out what composition really means to us \u2014 like _abstraction_ I feel it\u2019s a term thrown around a lot, but I don\u2019t think it means the same to all of us.",
        "user": "U5STGTB3J",
        "ts": "1577483500.258000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1577483552.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f85A",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wonder if someone has worked on a taxonomy of composition models in computing - that would be interesting to read.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI\u2019d like to read that too. It would also be a good way to figure out what composition really means to us \u2014 like "
                            },
                            {
                                "type": "text",
                                "text": "abstraction",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " I feel it\u2019s a term thrown around a lot, but I don\u2019t think it means the same to all of us."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "1787FBC4-DE8E-4DBC-8017-39C1AAC9817F",
        "type": "message",
        "text": "Unix pipes, Lisp, Smalltalk \u2014 what\u2019s the connection?\n\nOne connection I see is that they all offer a composition model that is based on just one type of component (text stream, S-Expression, Object) but these components can represent a vast variety of different things. However, because the composition is defined on the abstract type, all these different things can be composed in the same way. \n\nThat\u2019s what I mean by monoidal composition \u2014 you stay in the same category / it\u2019s all the same type, but it can represent many different values. Although a monoid might already be more specific (restrictive) than needed\u2026?\n\nUsually, we tend to categorize everything quite quickly into incompatible categories that do not relate to each other, or in less generic and more restrictive ways than a monoid structure. Then we need transformations, and interfaces, and spend a lot of time converting one thing into another.",
        "user": "U5STGTB3J",
        "ts": "1577484660.271700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XXAw3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Unix pipes, Lisp, Smalltalk \u2014 what\u2019s the connection?"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "One connection I see is that they all offer a composition model that is based on just one type of component (text stream, S-Expression, Object) but these components can represent a vast variety of different things. However, because the composition is defined on the abstract type, all these different things can be composed in the same way. "
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "That\u2019s what I mean by monoidal composition \u2014 you stay in the same category / it\u2019s all the same type, but it can represent many different values. Although a monoid might already be more specific (restrictive) than needed\u2026?"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Usually, we tend to categorize everything quite quickly into incompatible categories that do not relate to each other, or in less generic and more restrictive ways than a monoid structure. Then we need transformations, and interfaces, and spend a lot of time converting one thing into another."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "D382735D-9316-409D-B10B-C2BC501A028C",
        "type": "message",
        "text": "When we write \u201cglue code\u201d to make different things work together, we work around the problem that composition of these things hasn\u2019t been baked into the system. If it had been, glue code wouldn\u2019t be necessary.\n\nThe way we cut systems into smaller manageable pieces today \u2014 often using taxonomies in the form of class or type hierarchies \u2014 is directly connected to this. This is why I\u2019m super interested in how we categorize things, not just in programming, but in thinking.\n\nAlluding to what <@U8A5MS6R1> writes in _Systems, not Programs_, we need to look at other ways to slice these systems into manageable parts.",
        "user": "U5STGTB3J",
        "ts": "1577485572.282400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8MHFz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When we write \u201cglue code\u201d to make different things work together, we work around the problem that composition of these things hasn\u2019t been baked into the system. If it had been, glue code wouldn\u2019t be necessary."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "The way we cut systems into smaller manageable pieces today \u2014 often using taxonomies in the form of class or type hierarchies \u2014 is directly connected to this. This is why I\u2019m super interested in how we categorize things, not just in programming, but in thinking."
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Alluding to what "
                            },
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " writes in "
                            },
                            {
                                "type": "text",
                                "text": "Systems, not Programs",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", we need to look at other ways to slice these systems into manageable parts."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1"
    }
]