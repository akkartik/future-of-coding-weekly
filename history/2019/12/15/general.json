[
    {
        "client_msg_id": "4ca8629f-3993-4689-8ff1-b5a0db648f6d",
        "type": "message",
        "text": "PROLOG to my knowledge is not a temporal solver, but is decision tree explorer, where you can ask hypotheses and it will do a backtracking search through this decision tree to find a winning match. It could also follow predicate chains; so you could say a dog is a mammal, all mammals nurse their young, and it could make the conclusion that dogs nurse their young. But as the 5th generation project found out to their dismay it is not a good general purpose language, and if you ask someone to make a payroll system in PROLOG they are in deep s**t. Even in areas where PROLOG would be expected to be great, like making a chess program, the winning chess programs use heuristics, and very careful pruning algorithms which PROLOG did not facilitate. I think PROLOG reflects the intrinsic problem of making something too closely tied to logic, and not enough practical aspects. Coq, Agda, and other languages exist which can prove programs correct, but making something useful in those languages is quite difficult. This has created a rather serious gulf between academic logicians and those striving to make a useful tool.",
        "user": "UEQ6M68H0",
        "ts": "1576383926.011700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U58r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "PROLOG to my knowledge is not a temporal solver, but is decision tree explorer, where you can ask hypotheses and it will do a backtracking search through this decision tree to find a winning match. It could also follow predicate chains; so you could say a dog is a mammal, all mammals nurse their young, and it could make the conclusion that dogs nurse their young. But as the 5th generation project found out to their dismay it is not a good general purpose language, and if you ask someone to make a payroll system in PROLOG they are in deep s**t. Even in areas where PROLOG would be expected to be great, like making a chess program, the winning chess programs use heuristics, and very careful pruning algorithms which PROLOG did not facilitate. I think PROLOG reflects the intrinsic problem of making something too closely tied to logic, and not enough practical aspects. Coq, Agda, and other languages exist which can prove programs correct, but making something useful in those languages is quite difficult. This has created a rather serious gulf between academic logicians and those striving to make a useful tool."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575999812.302200",
        "parent_user_id": "UL3CJ7YKC",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UL3CJ7YKC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "6c2f4b3a-0c67-40fb-8d6f-5dfa6d2f6647",
        "type": "message",
        "text": "If I recall, part of the difference engine's cycle specifically tries to recenter digit gears so that they drift out of place.",
        "user": "UA14TGLTC",
        "ts": "1576404688.012000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UFw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If I recall, part of the difference engine's cycle specifically tries to recenter digit gears so that they drift out of place."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576262057.005600",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "a6c4c3db-b000-4f44-be7c-a8a63cced920",
        "type": "message",
        "text": "<@UEQ6M68H0> This is why I am really excited about Idris. It wants to be a verifiable general purpose language with dependent types.\n\nProgramming hard in prolog: I think it reflects on the mostly procedural (temporal?) nature of the useful algorithms. Even in a declarative environment/language like prolog the procedural parts must be written procedurally (embedded in declarative abstractions) - and I think what turns out is that most of the code is procedural(/temporal?) so that\u2019s why it\u2019s not a huge gain itself.",
        "user": "UL3CJ7YKC",
        "ts": "1576419341.012400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1576419352.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zGG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEQ6M68H0"
                            },
                            {
                                "type": "text",
                                "text": " This is why I am really excited about Idris. It wants to be a verifiable general purpose language with dependent types.\n\nProgramming hard in prolog: I think it reflects on the mostly procedural (temporal?) nature of the useful algorithms. Even in a declarative environment/language like prolog the procedural parts must be written procedurally (embedded in declarative abstractions) - and I think what turns out is that most of the code is procedural(/temporal?) so that\u2019s why it\u2019s not a huge gain itself."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575999812.302200",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "f0a86a59-429c-4547-8aec-b434b0742ed8",
        "type": "message",
        "text": "Here's a well-written analysis of the state of Open Source software. Probably of interest to many in this group. <http://marktarver.com/thecathedralandthebizarre.html>",
        "user": "UJBAJNFLK",
        "ts": "1576427532.013900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJBAJNFLK",
            "ts": "1576427542.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0HBq8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's a well-written analysis of the state of Open Source software. Probably of interest to many in this group. "
                            },
                            {
                                "type": "link",
                                "url": "http://marktarver.com/thecathedralandthebizarre.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576427532.013900",
        "reply_count": 9,
        "reply_users_count": 4,
        "latest_reply": "1576604864.051800",
        "reply_users": [
            "UJN1TAYEQ",
            "UCUSW7WVD",
            "UJBAJNFLK",
            "UHZNB3HRP"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "ffafb900-6bf1-41f3-ba8c-032ceec9e11a",
        "type": "message",
        "text": "&gt; \"Raymond meant by 'open source', software licensed under liberal licenses like BSD and MIT\"\nThat's a misconception tirelessly promoted by RMS, who sees \"open source software\" as the enemy of \"free software\". In actual fact, CATB uses Linux as its primary example of open source software, and Linux uses the GPL licence. Raymond co-founded the Open Source Initiative, and the Open Source Definition includes copyleft licences like the GPL.",
        "user": "UJN1TAYEQ",
        "ts": "1576434165.014100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Uby",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Raymond meant by 'open source', software licensed under liberal licenses like BSD and MIT\""
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's a misconception tirelessly promoted by RMS, who sees \"open source software\" as the enemy of \"free software\". In actual fact, CATB uses Linux as its primary example of open source software, and Linux uses the GPL licence. Raymond co-founded the Open Source Initiative, and the Open Source Definition includes copyleft licences like the GPL."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576427532.013900",
        "parent_user_id": "UJBAJNFLK"
    },
    {
        "client_msg_id": "9c6c0a8b-10a4-4f47-b8c6-39b9dca7607f",
        "type": "message",
        "text": "Inspiring. Some recent evidence that dev tools can be commercially successful and not require funding.  <https://twitter.com/chetanp/status/1205907182396395525?s=20>",
        "user": "ULM3U6275",
        "ts": "1576438355.014500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1576440179.000000"
        },
        "attachments": [
            {
                "fallback": "<https://twitter.com/chetanp|@chetanp>: JetBrains, a Prague based developer tools company behind IntelliJ, in 2018:\n\n$270M revenue/ 33% growth\n$100M net income/ $134M free cash flow\n\n6M users/ 405k customers\n$0 raised since founding in 2000\n\nThe developer tools market is enormous and can enable impressive businesses.",
                "ts": 1576345651,
                "author_name": "Chetan Puttagunta",
                "author_link": "https://twitter.com/chetanp/status/1205907182396395525",
                "author_icon": "https://pbs.twimg.com/profile_images/1185418218581544966/B6orW16-_normal.jpg",
                "author_subname": "@chetanp",
                "text": "JetBrains, a Prague based developer tools company behind IntelliJ, in 2018:\n\n$270M revenue/ 33% growth\n$100M net income/ $134M free cash flow\n\n6M users/ 405k customers\n$0 raised since founding in 2000\n\nThe developer tools market is enormous and can enable impressive businesses.",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/chetanp/status/1205907182396395525?s=20",
                "id": 1,
                "original_url": "https://twitter.com/chetanp/status/1205907182396395525?s=20",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sKm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Inspiring. Some recent evidence that dev tools can be commercially successful and not require funding.  "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/chetanp/status/1205907182396395525?s=20"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0",
                    "UP7SQ8KT3",
                    "U8A5MS6R1",
                    "UFPH678P4",
                    "UGLSY9X3J",
                    "UQ50Q5C7J",
                    "UL3CJ7YKC",
                    "UE0ETTCG7",
                    "UHWC9PXBL"
                ],
                "count": 9
            }
        ]
    }
]