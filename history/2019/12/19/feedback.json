[
    {
        "client_msg_id": "0032f313-954a-4daf-854e-936c250e841d",
        "type": "message",
        "text": "I'm also working on an Eve-like (Datalog-based) prototype. I think you're spot on with the major usability issues in Eve 0.2, though I'm sure solving those is the start of a long conquest. Beyond having invisible state, Eve was missing the equivalent of types: a statically-verifiable schema to guide editing. Instead it had the equivalent of exceptions with its \"error records\".",
        "user": "UCGAK10LS",
        "ts": "1576721921.000100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hPub",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm also working on an Eve-like (Datalog-based) prototype. I think you're spot on with the major usability issues in Eve 0.2, though I'm sure solving those is the start of a long conquest. Beyond having invisible state, Eve was missing the equivalent of types: a statically-verifiable schema to guide editing. Instead it had the equivalent of exceptions with its \"error records\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "c4a4b3f6-6cec-400a-ad1d-96c925186b02",
        "type": "message",
        "text": "<@UA14TGLTC> :heart:\nFwiw, we did expose the ability to explicitly control identity (the keying in #1). When you created a record, you could use the pipe character to separate identity providing attributes from non-identifying:\n```commit\n  [#foo part of key | non-keying:true age:10 height:14]\nend```\nCompletely agree on #2. For #3 we had the inspector but as you pointed out, it never quite got all the way there.\n\nThe timing distinction between commit and bind is easily my least favorite part of the language and we never felt good about it. It's actually fundamental, but we kept trying to find ways to make it reasonable to work with. Josh actually suggested the other day that maybe we'd have been better off making it explicit - simultaneously giving people more control over it, but also forcing them to internalize the notion of stratification. If you stick in a purely declarative, orderless world, that's probably the right choice. I'm not convinced that's a world you really want though. After having tried both for quite a long time, I decently convinced that you need to marry the imperative and declarative worlds together. That's where we'll find something _really_ compelling.",
        "user": "UEBG0NPDK",
        "ts": "1576724807.000300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qf8X3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "heart"
                            },
                            {
                                "type": "text",
                                "text": "\nFwiw, we did expose the ability to explicitly control identity (the keying in #1). When you created a record, you could use the pipe character to separate identity providing attributes from non-identifying:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "commit\n  [#foo part of key | non-keying:true age:10 height:14]\nend"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Completely agree on #2. For #3 we had the inspector but as you pointed out, it never quite got all the way there.\n\nThe timing distinction between commit and bind is easily my least favorite part of the language and we never felt good about it. It's actually fundamental, but we kept trying to find ways to make it reasonable to work with. Josh actually suggested the other day that maybe we'd have been better off making it explicit - simultaneously giving people more control over it, but also forcing them to internalize the notion of stratification. If you stick in a purely declarative, orderless world, that's probably the right choice. I'm not convinced that's a world you really want though. After having tried both for quite a long time, I decently convinced that you need to marry the imperative and declarative worlds together. That's where we'll find something "
                            },
                            {
                                "type": "text",
                                "text": "really",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " compelling."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UD3AK9JRF",
                    "UFLN9JFRT"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "36ab2bda-a3b6-406a-b763-2280087d3fbf",
        "type": "message",
        "text": "I suspect solving #2 would've also paved over most of the other sins. Eve has an opportunity to be one of the most \"visible\" programming languages in existence. If the goal were to just make something for developers, nailing the database explorer would probably get you pretty far.",
        "user": "UEBG0NPDK",
        "ts": "1576724927.000500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2QT3N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I suspect solving #2 would've also paved over most of the other sins. Eve has an opportunity to be one of the most \"visible\" programming languages in existence. If the goal were to just make something for developers, nailing the database explorer would probably get you pretty far."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "dc90054f-0f10-4167-9d31-0076b3e41334",
        "type": "message",
        "text": "<@UCGAK10LS> our integrity constraints provided more power than any type system that I'm aware of, though there's probably some nice syntax sugar that should be added to make them as ergonomic as type definitions. What do you think adding explicit types would give you?",
        "user": "UEBG0NPDK",
        "ts": "1576725082.000700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fhzpL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " our integrity constraints provided more power than any type system that I'm aware of, though there's probably some nice syntax sugar that should be added to make them as ergonomic as type definitions. What do you think adding explicit types would give you?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "77f0d2ff-188a-4da7-b92b-f360d710f155",
        "type": "message",
        "text": "<@UEBG0NPDK> Like a static type system, it would be about ruling out malformed data shapes without having to wait for the malformation to occur. The difference between a static type system and dynamic types/tests/assertions.",
        "user": "UCGAK10LS",
        "ts": "1576725203.001000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1576725229.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BM1cy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " Like a static type system, it would be about ruling out malformed data shapes without having to wait for the malformation to occur. The difference between a static type system and dynamic types/tests/assertions."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "7f11f421-0314-46e4-a6e3-914db081a3f6",
        "type": "message",
        "text": "All that information is actually present in the rules themselves, we had an example in the inspector that found cases where you searched for things that were never asserted anywhere.",
        "user": "UEBG0NPDK",
        "ts": "1576725264.001300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KKhb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "All that information is actually present in the rules themselves, we had an example in the inspector that found cases where you searched for things that were never asserted anywhere."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "702ac9dc-f829-4561-a093-233da2095b5b",
        "type": "message",
        "text": "Also integrity constraints didn't rely on actually executing, which is super cool :slightly_smiling_face: You can follow them backwards through the rules to find the blocks that could violate them.",
        "user": "UEBG0NPDK",
        "ts": "1576725319.001500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEBG0NPDK",
            "ts": "1576725330.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Nq+u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also integrity constraints didn't rely on actually executing, which is super cool "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " You can follow them backwards through the rules to find the blocks that could violate them."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "a0deb459-71ea-418c-9544-7b2921615565",
        "type": "message",
        "text": "Oh is that how it worked? Then I guess that is the same thing as static typing/analysis.",
        "user": "UCGAK10LS",
        "ts": "1576725364.001800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AEg1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh is that how it worked? Then I guess that is the same thing as static typing/analysis."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC",
        "reactions": [
            {
                "name": "wave",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c0293616-6012-436f-913e-24ece342e22d",
        "type": "message",
        "text": "It did both, since it's not possible to capture every possible way a constraint could be violated (since they allowed arbitrary logic)",
        "user": "UEBG0NPDK",
        "ts": "1576725403.002000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "stIk9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It did both, since it's not possible to capture every possible way a constraint could be violated (since they allowed arbitrary logic)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "a76b0567-9934-4679-bb27-62cb5919e9e2",
        "type": "message",
        "text": "so you could have both static and dynamic safety",
        "user": "UEBG0NPDK",
        "ts": "1576725410.002200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jtWrL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "so you could have both static and dynamic safety"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c292575b-2159-4843-bba4-59d4f922858c",
        "type": "message",
        "text": "it also allowed it to be pay as you go, which I think is really awesome - you don't know what correctness even is in the beginning",
        "user": "UEBG0NPDK",
        "ts": "1576725454.002500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I74",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "it also allowed it to be pay as you go, which I think is really awesome - you don't know what correctness even is in the beginning"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "9e27a4d5-f405-4a48-bfa8-750706749b35",
        "type": "message",
        "text": "Yeah I'm a fan of that idea. I've been thinking about an experience where initially there are no assertions about data shape/existence, but the IDE will tell you whenever you query something which may not exist/have the shape you expect, and recommend that you provide a schema for that part of your state.",
        "user": "UCGAK10LS",
        "ts": "1576725577.002700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yvr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah I'm a fan of that idea. I've been thinking about an experience where initially there are no assertions about data shape/existence, but the IDE will tell you whenever you query something which may not exist/have the shape you expect, and recommend that you provide a schema for that part of your state."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UEBG0NPDK",
                    "UFLN9JFRT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "62f8283f-c19f-48f0-8199-4d6b0d9b5200",
        "type": "message",
        "text": "Feel like that's what gradual typing is about but I'm not too familiar with it",
        "user": "UCGAK10LS",
        "ts": "1576725599.002900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dP7xn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Feel like that's what gradual typing is about but I'm not too familiar with it"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "20cb2ea4-5566-4d36-8743-762ed03e9d62",
        "type": "message",
        "text": "Yeah, what you're thinking is roughly where we were headed with it",
        "user": "UEBG0NPDK",
        "ts": "1576725807.003200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "agQl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, what you're thinking is roughly where we were headed with it"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "e5fcaaae-eac2-4a59-9e7b-f208309d2b59",
        "type": "message",
        "text": "Re: your request for high-level feedback \u2013\u00a0I don't yet understand what benefits you are working toward with this new representation.\n\nSince you mention a goal of \"programming for everyone\", I can make some guesses! I would guess that you are targeting newcomers to programming. I would guess that you hypothesize that newcomers have trouble reading text syntax, and that your representation would be easier for them to read.\n\nIs that right?",
        "user": "UBKNXPBAB",
        "ts": "1576729548.003500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6qF3A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Re: your request for high-level feedback \u2013\u00a0I don't yet understand what benefits you are working toward with this new representation.\n\nSince you mention a goal of \"programming for everyone\", I can make some guesses! I would guess that you are targeting newcomers to programming. I would guess that you hypothesize that newcomers have trouble reading text syntax, and that your representation would be easier for them to read.\n\nIs that right?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576657342.007300",
        "parent_user_id": "UP3FH4CLU"
    },
    {
        "client_msg_id": "140e49f7-9ba8-4956-bfe9-faca997ab0c0",
        "type": "message",
        "text": "(Random side note: The text/graphics slider reminds me of a similar feature in GP (<https://gpblocks.org/>)! Can't find any pictures/video of it right now though.)",
        "user": "UBKNXPBAB",
        "ts": "1576729723.003700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a=pyV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(Random side note: The text/graphics slider reminds me of a similar feature in GP ("
                            },
                            {
                                "type": "link",
                                "url": "https://gpblocks.org/"
                            },
                            {
                                "type": "text",
                                "text": ")! Can't find any pictures/video of it right now though.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576657342.007300",
        "parent_user_id": "UP3FH4CLU"
    },
    {
        "type": "message",
        "text": "(I just recorded a video of the GP thing, attached. I'm dragging a slider in the top-right corner. The transformation is pretty superficial, kinda tacky. You show something more substantive. But I think the intents are interestingly aligned.)",
        "files": [
            {
                "id": "FRXKER3FZ",
                "created": 1576729983,
                "timestamp": 1576729983,
                "name": "gp-text-graphics-slider.mov",
                "title": "gp-text-graphics-slider.mov",
                "mimetype": "video/quicktime",
                "filetype": "mov",
                "pretty_type": "QuickTime Movie",
                "user": "UBKNXPBAB",
                "editable": false,
                "size": 7691885,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-FRXKER3FZ/gp-text-graphics-slider.mov",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-FRXKER3FZ/download/gp-text-graphics-slider.mov",
                "thumb_video": "https://files.slack.com/files-tmb/T5TCAFTA9-FRXKER3FZ-68352bb663/gp-text-graphics-slider_thumb_video.jpeg",
                "permalink": "https://futureofcoding.slack.com/files/UBKNXPBAB/FRXKER3FZ/gp-text-graphics-slider.mov",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-FRXKER3FZ-e9516ea7e2",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": true,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z1I/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(I just recorded a video of the GP thing, attached. I'm dragging a slider in the top-right corner. The transformation is pretty superficial, kinda tacky. You show something more substantive. But I think the intents are interestingly aligned.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UBKNXPBAB",
        "display_as_bot": false,
        "ts": "1576729986.003900",
        "edited": {
            "user": "UBKNXPBAB",
            "ts": "1576730034.000000"
        },
        "client_msg_id": "f69982e2-0423-4f55-ab36-e00abc73bac8",
        "thread_ts": "1576657342.007300",
        "parent_user_id": "UP3FH4CLU"
    },
    {
        "client_msg_id": "87ead555-0b3b-473a-8606-a3ead69e92a6",
        "type": "message",
        "text": "<@UD3AK9JRF> <@UCGAK10LS> good luck!  I hope to see more Eveish work.",
        "user": "UA14TGLTC",
        "ts": "1576748841.004700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LEAU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UD3AK9JRF"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " good luck!  I hope to see more Eveish work."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC",
        "reactions": [
            {
                "name": "man_dancing",
                "users": [
                    "UD3AK9JRF",
                    "UFLN9JFRT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "5284b9ad-1c09-403e-bb07-8257ac125b9b",
        "type": "message",
        "text": "<@UJN1TAYEQ> beautiful is in the eye especially when its only surface deep.  My eye?  Let's call Haskell beautiful in a way that OCaml definitely is not.",
        "user": "UA14TGLTC",
        "ts": "1576749095.004900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JPuJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " beautiful is in the eye especially when its only surface deep.  My eye?  Let's call Haskell beautiful in a way that OCaml definitely is not."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC",
        "reactions": [
            {
                "name": "hear_no_evil",
                "users": [
                    "UC2A2ARPT",
                    "UFLN9JFRT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "cfe1acd3-f71b-47d9-bb7a-4e5e619f4c2e",
        "type": "message",
        "text": "<@UJN1TAYEQ> your other question about particularly noteworthy VPLs.  For me, Scratch and Max Cycling stand out.  Scratch surprised me by how approachable blocks for structured programming can be and by the richness of its concurrency constructs.  Max I like because it's weird.",
        "user": "UA14TGLTC",
        "ts": "1576749358.005100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vMI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " your other question about particularly noteworthy VPLs.  For me, Scratch and Max Cycling stand out.  Scratch surprised me by how approachable blocks for structured programming can be and by the richness of its concurrency constructs.  Max I like because it's weird."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "634a60d0-71cd-45fc-9a28-36d0f7a8c83e",
        "type": "message",
        "text": "<@UJN1TAYEQ> I bet <@UC2A2ARPT> could say interesting things about Max.",
        "user": "UA14TGLTC",
        "ts": "1576749391.005300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1nOw1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " I bet "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " could say interesting things about Max."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "2ea5805d-5faf-4c20-92b4-05bd26fac453",
        "type": "message",
        "text": "<@UC2A2ARPT> I like your work on, let's call them, transparent wires: where you can see data flowing through them.",
        "user": "UA14TGLTC",
        "ts": "1576749517.005500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8QmoF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " I like your work on, let's call them, transparent wires: where you can see data flowing through them."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "a3c540ad-0eec-4cb2-a1d9-cb5bd8631365",
        "type": "message",
        "text": "<@UCGAK10LS> what do static types mean in a live system?  I think that gets to the root of your conversation with <@UEBG0NPDK>.  I guess it comes down to asking what could possibly happen over some domain of data rather than just checking what actually happen for the data you have at hand.",
        "user": "UA14TGLTC",
        "ts": "1576749783.005700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "42F9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " what do static types mean in a live system?  I think that gets to the root of your conversation with "
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": ".  I guess it comes down to asking what could possibly happen over some domain of data rather than just checking what actually happen for the data you have at hand."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "fe7d90ea-4c2e-4df7-b8ee-b2ecea05733b",
        "type": "message",
        "text": "<@UA14TGLTC> Yes, I'd say that's exactly it! Equivalently, its about verifying whether computations that haven't run yet will have specific behaviours (e.g. produce one output for each input).",
        "user": "UCGAK10LS",
        "ts": "1576751743.005900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5Mw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " Yes, I'd say that's exactly it! Equivalently, its about verifying whether computations that haven't run yet will have specific behaviours (e.g. produce one output for each input)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "d3f21773-8a5f-48ac-ae7e-0fef6801783e",
        "type": "message",
        "text": "<@UEBG0NPDK> Yes, I did discover Eve's keying vertical bar eventually.  It came later in my exploration.  Was resentful.\n\nThough Eve's bind/commit distinction didn't quite work, it remains provocative, suggested some nice compositional properties: the order in which commit rules applied didn't make a difference.  (I tried implementing this for my team's database, and given their imperative bias, it was a complete failure.)  And the hard part with Eve was getting a sequence of several things to happen especially when the last step was to clean up stuff from earlier steps.\n\nIt's one of those two dimensional problems: all the rules that apply at once in one dimension vs what happens step by step.  Eve (or a state machine actually) focuses on the first.  Imperative programming focuses on the second with the disadvantage being lots of accidental sequencing.  (Insert digression about branch prediction.)",
        "user": "UA14TGLTC",
        "ts": "1576758166.006100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wqv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " Yes, I did discover Eve's keying vertical bar eventually.  It came later in my exploration.  Was resentful.\n\nThough Eve's bind/commit distinction didn't quite work, it remains provocative, suggested some nice compositional properties: the order in which commit rules applied didn't make a difference.  (I tried implementing this for my team's database, and given their imperative bias, it was a complete failure.)  And the hard part with Eve was getting a sequence of several things to happen especially when the last step was to clean up stuff from earlier steps.\n\nIt's one of those two dimensional problems: all the rules that apply at once in one dimension vs what happens step by step.  Eve (or a state machine actually) focuses on the first.  Imperative programming focuses on the second with the disadvantage being lots of accidental sequencing.  (Insert digression about branch prediction.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT",
                    "UFLN9JFRT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "91518f4b-fb0b-402c-aa12-aa3813f4620e",
        "type": "message",
        "text": "By the way, the expression problem (adding operations vs adding datatypes) is another good multidimensional problem.",
        "user": "UA14TGLTC",
        "ts": "1576758224.006300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Scf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "By the way, the expression problem (adding operations vs adding datatypes) is another good multidimensional problem."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "138d253b-bba7-4728-b145-2ad2e8142e51",
        "type": "message",
        "text": "<@U6KQ2S410> conditional logic with interacting conditions is another good example.  The possibility space is the product of a bunch of different features, and you want to cover all the cases without getting bogged down by their multiplicity.",
        "user": "UA14TGLTC",
        "ts": "1576758436.006500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "53Mzd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " conditional logic with interacting conditions is another good example.  The possibility space is the product of a bunch of different features, and you want to cover all the cases without getting bogged down by their multiplicity."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "6befb204-ca35-462a-964b-6cd5e844caa2",
        "type": "message",
        "text": "<@UA14TGLTC> \"beautiful is in the eye especially when its only surface deep\"\nWell, I wish there was an engineering discipline for designing programming language syntax.",
        "user": "UJN1TAYEQ",
        "ts": "1576765947.006700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b//Oc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " \"beautiful is in the eye especially when its only surface deep\"\nWell, I wish there was an engineering discipline for designing programming language syntax."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC",
        "reactions": [
            {
                "name": "laughing",
                "users": [
                    "UC2A2ARPT",
                    "UA14TGLTC",
                    "UFLN9JFRT"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "7d40c07e-7728-461e-aed5-50147669c283",
        "type": "message",
        "text": "The ability to define types gradually with all the flexibility of logic programming is very appealing to me, and something I\u2019m hoping to explore. At the same time I have reservations. Formal type systems teach me how to program. They establish and enforce expectations for how any piece of code will work; what is and isn\u2019t possible. They form vocabularies around which people communicate, write documentation, and coordinate their efforts. They ask me to think clearly about what I\u2019m trying to accomplish, because sometimes I have enough information to figure it out, I\u2019m just being lazy.\nIf the best you have are patterns, you\u2019ll need at least a very strong, didactic standard library that you\u2019ve put a lot of real-world experience and careful consideration into.\nHow much any of this matters depends on what kind of things people will be building with it; their scope, longevity, sociality. We\u2019re starting with a single, narrowly scoped application we have full control over, evolving Datalog from a database to a programming layer as needs and the resources to meet them arise. I do hope to expose that layer to users gradually, probably by reifying very specific patterns (e.g. how to build a state machine in Datalog) in the programming environment.",
        "user": "UD3AK9JRF",
        "ts": "1576780636.007500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Cny",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The ability to define types gradually with all the flexibility of logic programming is very appealing to me, and something I\u2019m hoping to explore. At the same time I have reservations. Formal type systems teach me how to program. They establish and enforce expectations for how any piece of code will work; what is and isn\u2019t possible. They form vocabularies around which people communicate, write documentation, and coordinate their efforts. They ask me to think clearly about what I\u2019m trying to accomplish, because sometimes I have enough information to figure it out, I\u2019m just being lazy.\nIf the best you have are patterns, you\u2019ll need at least a very strong, didactic standard library that you\u2019ve put a lot of real-world experience and careful consideration into.\nHow much any of this matters depends on what kind of things people will be building with it; their scope, longevity, sociality. We\u2019re starting with a single, narrowly scoped application we have full control over, evolving Datalog from a database to a programming layer as needs and the resources to meet them arise. I do hope to expose that layer to users gradually, probably by reifying very specific patterns (e.g. how to build a state machine in Datalog) in the programming environment."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "type": "message",
        "text": "",
        "files": [
            {
                "id": "FRYN8CM7H",
                "created": 1576782838,
                "timestamp": 1576782838,
                "name": "Screen Shot 2019-12-19 at 12.08.53 PM.png",
                "title": "Screen Shot 2019-12-19 at 12.08.53 PM.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UC2A2ARPT",
                "editable": false,
                "size": 78382,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-FRYN8CM7H/screen_shot_2019-12-19_at_12.08.53_pm.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-FRYN8CM7H/download/screen_shot_2019-12-19_at_12.08.53_pm.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-FRYN8CM7H-7060dc298b/screen_shot_2019-12-19_at_12.08.53_pm_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-FRYN8CM7H-7060dc298b/screen_shot_2019-12-19_at_12.08.53_pm_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-FRYN8CM7H-7060dc298b/screen_shot_2019-12-19_at_12.08.53_pm_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 269,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-FRYN8CM7H-7060dc298b/screen_shot_2019-12-19_at_12.08.53_pm_160.png",
                "image_exif_rotation": 1,
                "original_w": 476,
                "original_h": 356,
                "thumb_tiny": "AwAjADCisREHmkfKTj8Kb5fNLCAWwzbVJAJx0pwxuHzDGeeKQxnl/Wjy/rQ6gDim4PoaBDimBnmmUYPoaMH0pgOQZBHPboKePu7PfuvNEJZMyIcFeRSBjt3bwDnpzxQNCltoOV/Wgyrj7uPxpSu/rkk859aTyhnH65oEIJFAwVJ/GkMg2456etOMQB5z+BzUbDB7/jQAgJAwCcUUUUAFFFFABRRRQB//2Q==",
                "permalink": "https://futureofcoding.slack.com/files/UC2A2ARPT/FRYN8CM7H/screen_shot_2019-12-19_at_12.08.53_pm.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-FRYN8CM7H-28e36c5f46",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": true,
        "user": "UC2A2ARPT",
        "display_as_bot": false,
        "ts": "1576782841.007700",
        "client_msg_id": "dc7f3ec4-80c5-441c-8287-d0a7bef7d429",
        "thread_ts": "1576657342.007300",
        "parent_user_id": "UP3FH4CLU"
    },
    {
        "client_msg_id": "b2eaabc1-f8a4-436c-9695-bedc65086fe0",
        "type": "message",
        "text": "How can I tell which branch of the conditional will be evaluated first? In the video you indicate that it'll be the `&lt; 7` branch \u2014\u00a0how is that decided, and what's the visual cue to communicate that to the programmer?",
        "user": "UC2A2ARPT",
        "ts": "1576782918.008100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e46d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How can I tell which branch of the conditional will be evaluated first? In the video you indicate that it'll be the "
                            },
                            {
                                "type": "text",
                                "text": "< 7",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " branch \u2014\u00a0how is that decided, and what's the visual cue to communicate that to the programmer?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576657342.007300",
        "parent_user_id": "UP3FH4CLU"
    },
    {
        "client_msg_id": "8ab55b32-814c-4bf4-be03-cda49533fc9a",
        "type": "message",
        "text": "<@UBKNXPBAB> It might be a bit out of date, but Robbie does have this list of advantages of the Glance visual syntax circa 2017: <https://github.com/rgleichman/glance/wiki/Advantages-of-Glance>",
        "user": "UC2A2ARPT",
        "ts": "1576783165.008400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xXvk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBKNXPBAB"
                            },
                            {
                                "type": "text",
                                "text": " It might be a bit out of date, but Robbie does have this list of advantages of the Glance visual syntax circa 2017: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/rgleichman/glance/wiki/Advantages-of-Glance"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576657342.007300",
        "parent_user_id": "UP3FH4CLU"
    },
    {
        "client_msg_id": "eb3f4110-d6c8-4187-9dac-d1a916daafca",
        "type": "message",
        "text": "(I'm actually quite fond of the _topsy turvy / zero-G_ -esq visual syntax of that era. It feels like it'd play very nicely with physics, 3d, VR, etc)",
        "user": "UC2A2ARPT",
        "ts": "1576783339.008600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1576783368.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fXP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(I'm actually quite fond of the "
                            },
                            {
                                "type": "text",
                                "text": "topsy turvy / zero-G",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " -esq visual syntax of that era. It feels like it'd play very nicely with physics, 3d, VR, etc)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576657342.007300",
        "parent_user_id": "UP3FH4CLU"
    }
]