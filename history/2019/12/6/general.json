[
    {
        "client_msg_id": "9d28e408-6981-481c-b954-e67f20bf543b",
        "type": "message",
        "text": "I see. Hmm, I'm not sure what problem this is solving. Why would you not write a regular test over the generated html parse tree?",
        "user": "UCUSW7WVD",
        "ts": "1575590496.112900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rG+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see. Hmm, I'm not sure what problem this is solving. Why would you not write a regular test over the generated html parse tree?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574787700.220500",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "20778d92-9bfe-45df-95a7-7874fdb35fed",
        "type": "message",
        "text": "<@UF89Z7SRF> Not literally invisible, but conceptually. That is, what you're doing isn't trying to get some tool to do what you want, but the thing you want to do with it. But yes, tools and interfaces can user powerful ways of thinking and working and help conceptualize, etc.\n\nBut a good interface is not so obsessed with itself that it gets in the way -- a good one is obsessed with creating a good experience for whatever you need to do with it.",
        "user": "UAVCC2X70",
        "ts": "1575598443.113300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J+Zj5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UF89Z7SRF"
                            },
                            {
                                "type": "text",
                                "text": " Not literally invisible, but conceptually. That is, what you're doing isn't trying to get some tool to do what you want, but the thing you want to do with it. But yes, tools and interfaces can user powerful ways of thinking and working and help conceptualize, etc.\n\nBut a good interface is not so obsessed with itself that it gets in the way -- a good one is obsessed with creating a good experience for whatever you need to do with it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "123ea697-9b03-4ba8-9c50-b8d9911b469d",
        "type": "message",
        "text": "Goodness, \"abstraction\" means too many different things to different people. I personally think that programmers have their own definition, which is essentially about \"metaphor\". I think the original definition is about removing detail, or a simplified (from the original) representation",
        "user": "UAVCC2X70",
        "ts": "1575598592.113700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1575598738.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/8Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Goodness, \"abstraction\" means too many different things to different people. I personally think that programmers have their own definition, which is essentially about \"metaphor\". I think the original definition is about removing detail, or a simplified (from the original) representation"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "4faa2b55-0668-4bcb-9ecc-2bd4373483fe",
        "type": "message",
        "text": "I basically agree with the ironically statement, but I'd say that things like source control and \"infrastructure as code\" are about moving more toward explicitness about what's happening / happened.\n\nAlso, I know I'm not the only one exploring the idea of recording and storing edits \"as code\".",
        "user": "UAVCC2X70",
        "ts": "1575598952.114400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VQar",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I basically agree with the ironically statement, but I'd say that things like source control and \"infrastructure as code\" are about moving more toward explicitness about what's happening / happened.\n\nAlso, I know I'm not the only one exploring the idea of recording and storing edits \"as code\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575458473.455400",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "3d1d6d37-ead8-42ff-89f1-ed1add3b6d1d",
        "type": "message",
        "text": "<@UF89Z7SRF> good points about symbols, syntax, and visual programming.  For a while, I have been exploring what a programming language without words would be like.  Start with shape, orientation, transformation, and see where it takes you.",
        "user": "UA14TGLTC",
        "ts": "1575599224.114800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lTn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UF89Z7SRF"
                            },
                            {
                                "type": "text",
                                "text": " good points about symbols, syntax, and visual programming.  For a while, I have been exploring what a programming language without words would be like.  Start with shape, orientation, transformation, and see where it takes you."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "2e4acf21-73c9-48ed-9baa-1c553e930eac",
        "type": "message",
        "text": "For instance <@UAVCC2X70>, \"abstraction\" ends up being a few different things: hiding details, templating, controlling from a distance, simplifying by having one motion move many parts at once.",
        "user": "UA14TGLTC",
        "ts": "1575599452.115000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bhpxm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For instance "
                            },
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": ", \"abstraction\" ends up being a few different things: hiding details, templating, controlling from a distance, simplifying by having one motion move many parts at once."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "d5a13af4-9404-4544-ab31-eb4bf6233217",
        "type": "message",
        "text": "&gt; <@UF89Z7SRF> That's multiple cursors rather than people taking time with a cursor, I don't know if _that's_ been done\nThat was first done in 1968 in the NLS system. If you want to see where the mouse, windows, hypertext, video conferencing, and collaborative editing with one cursor per person all came from, check out \"The Mother of all Demos\". The collaborative session starts about 1h16m into the video. &lt;https://www.youtube.com/watch?v=yJDv-zdhzMY&gt;",
        "user": "UJN1TAYEQ",
        "ts": "1575607355.115200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1575607894.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f9u",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UF89Z7SRF"
                            },
                            {
                                "type": "text",
                                "text": " That's multiple cursors rather than people taking time with a cursor, I don't know if "
                            },
                            {
                                "type": "text",
                                "text": "that's",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " been done"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That was first done in 1968 in the NLS system. If you want to see where the mouse, windows, hypertext, video conferencing, and collaborative editing with one cursor per person all came from, check out \"The Mother of all Demos\". The collaborative session starts about 1h16m into the video. "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=yJDv-zdhzMY"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575504813.036400",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "7786a23e-ef77-4ecb-987e-2533b639a15f",
        "type": "message",
        "text": "&gt; <@UF89Z7SRF> It's a strange myth that graph-based languages like pure data aren't text based.\n&gt;  puredata has *no* visual syntax - visual layout has no syntactical meaning.\nThat absence of visual syntax is a feature, it's the main point. The people who prefer these languages don't want to deal with syntax. Pure Data leans rather heavily on embedding a text based language inside those boxes, so it's not a good example. Less so for some other node based languages. <@U6FKVSVCK> is building a node-and-wire language that eliminates text-based syntax altogether, although you can still use text as labels. <https://lynxtool.com/What.html>",
        "user": "UJN1TAYEQ",
        "ts": "1575610876.115500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G0BdA",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UF89Z7SRF"
                            },
                            {
                                "type": "text",
                                "text": " It's a strange myth that graph-based languages like pure data aren't text based.\n puredata has "
                            },
                            {
                                "type": "text",
                                "text": "no",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " visual syntax - visual layout has no syntactical meaning."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That absence of visual syntax is a feature, it's the main point. The people who prefer these languages don't want to deal with syntax. Pure Data leans rather heavily on embedding a text based language inside those boxes, so it's not a good example. Less so for some other node based languages. "
                            },
                            {
                                "type": "user",
                                "user_id": "U6FKVSVCK"
                            },
                            {
                                "type": "text",
                                "text": " is building a node-and-wire language that eliminates text-based syntax altogether, although you can still use text as labels. "
                            },
                            {
                                "type": "link",
                                "url": "https://lynxtool.com/What.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "242900e5-4368-4e9b-acb1-4f94ee708c69",
        "type": "message",
        "text": "I didn't know about FONC - is there a current one? This one suddenly stopped by the looks of it",
        "user": "UE6EFEPTQ",
        "ts": "1575621196.115800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fyze",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I didn't know about FONC - is there a current one? This one suddenly stopped by the looks of it"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575578741.109400",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "f98c2f7e-8208-445e-95c2-279f1b6a3496",
        "type": "message",
        "text": "Maybe FOC is the new FONC.\nFrom a bunch of FONCers to a rabble of FOCcers.",
        "user": "UE6EFEPTQ",
        "ts": "1575621333.116000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1575621342.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DFW5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe FOC is the new FONC.\nFrom a bunch of FONCers to a rabble of FOCcers."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575578741.109400",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "rocket",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "95c30872-afb9-4dad-81d5-cc187d111d22",
        "type": "message",
        "text": "why aren't Kay and Barbour on this group??",
        "user": "UE6EFEPTQ",
        "ts": "1575621369.116300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x67FV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "why aren't Kay and Barbour on this group??"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575578741.109400",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "5d0f01e2-ae26-4b7b-8bb0-988c40c7cb48",
        "type": "message",
        "text": "<@UJN1TAYEQ> I agree that the beauty of pd is practically error-free syntax (imported from modular synthesis), I just think it's interesting that what we call a visual language is less visual than many textual ones. Of course the lack of visual syntax means that it's left to what Thomas Green calls 'secondary notation', people can lay things out in a way meaningful to them. There's a huge opportunity here though, to make truly visual languages which brings this secondary notation into primary syntax _and_ semantics. The ReacTable is a great example of a front-end for pure data, where proximity gives both connectivity and value. But I'd still say it's a kind of symbolic text! But augmented with gesture, in the same way that speech is. <https://www.youtube.com/watch?v=ltjQJz2uz2E>",
        "user": "UF89Z7SRF",
        "ts": "1575623058.116500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "ReacTj - Reactable live performance #1",
                "title_link": "https://www.youtube.com/watch?v=ltjQJz2uz2E",
                "author_name": "ReacTj",
                "author_link": "https://www.youtube.com/user/submixpro",
                "thumb_url": "https://i.ytimg.com/vi/ltjQJz2uz2E/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: ReacTj - Reactable live performance #1",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/ltjQJz2uz2E?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=ltjQJz2uz2E",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=ltjQJz2uz2E"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IsF+t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " I agree that the beauty of pd is practically error-free syntax (imported from modular synthesis), I just think it's interesting that what we call a visual language is less visual than many textual ones. Of course the lack of visual syntax means that it's left to what Thomas Green calls 'secondary notation', people can lay things out in a way meaningful to them. There's a huge opportunity here though, to make truly visual languages which brings this secondary notation into primary syntax "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " semantics. The ReacTable is a great example of a front-end for pure data, where proximity gives both connectivity and value. But I'd still say it's a kind of symbolic text! But augmented with gesture, in the same way that speech is. "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=ltjQJz2uz2E"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "9b49eae0-dcae-4d05-92b9-cac10823b598",
        "type": "message",
        "text": "I think the idea of a 'text free language' is a contradiction in terms, if language involves some combination of symbols then it will involve something that you can call text, even if it's ideographic. I can't see how Lynx gets away from this (admittedly extremely broad) definition of text.",
        "user": "UF89Z7SRF",
        "ts": "1575623135.116800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "r0BP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the idea of a 'text free language' is a contradiction in terms, if language involves some combination of symbols then it will involve something that you can call text, even if it's ideographic. I can't see how Lynx gets away from this (admittedly extremely broad) definition of text."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "UJN1TAYEQ"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "6f5ad3a6-deb5-4def-b7ec-1e15ad03bccb",
        "type": "message",
        "text": "<@UAVCC2X70> \"what you're doing isn't trying to get some tool to do what you want, but the thing you want to do with it\" That may be true in the (in my view, very limited) cases where you know what you want to do. When you don't, then the nature and character of the language between you and the domain becomes extremely important, and not a case of efficiency or 'getting out of the way'. It helps take you somewhere you couldn't anticipate, and create something beyond your imagination.",
        "user": "UF89Z7SRF",
        "ts": "1575623758.117000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pPe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " \"what you're doing isn't trying to get some tool to do what you want, but the thing you want to do with it\" That may be true in the (in my view, very limited) cases where you know what you want to do. When you don't, then the nature and character of the language between you and the domain becomes extremely important, and not a case of efficiency or 'getting out of the way'. It helps take you somewhere you couldn't anticipate, and create something beyond your imagination."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJN1TAYEQ",
                    "UHWC9PXBL"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "UAVCC2X70"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6554e347-a6c4-4293-b035-c8822789d01d",
        "type": "message",
        "text": "I didn't know that the definition of abstraction in CS was about removing detail. I concede that e.g. run-length encoding is in a sense about removing detail. But by contention is that nothing is really removed.",
        "user": "UF89Z7SRF",
        "ts": "1575623909.117200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IlB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I didn't know that the definition of abstraction in CS was about removing detail. I concede that e.g. run-length encoding is in a sense about removing detail. But by contention is that nothing is really removed."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "10d13185-9f65-4eb9-ab2f-fdf0ca8c4a66",
        "type": "message",
        "text": "It seems a strange definition but I'll think on it..",
        "user": "UF89Z7SRF",
        "ts": "1575624118.117400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D=r",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It seems a strange definition but I'll think on it.."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "18ab9cb2-07da-4299-a70e-29b570e1fcd5",
        "type": "message",
        "text": "I'm aware of the mother of all demos!",
        "user": "UF89Z7SRF",
        "ts": "1575625556.117700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1xq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm aware of the mother of all demos!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575504813.036400",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "4027de78-e7ee-4f28-a0c8-823a5dadb91b",
        "type": "message",
        "text": "<@UCUSW7WVD>\n\n&gt; Doesn't that happen all the time in the nose-bleed seats in a concert?\nAll I'm getting at is that the motivation to project code in a performance, is more often primarily a symbolic act of sharing and openness on the part of the performer, acknowledging the detrimental social and musical effects of obfuscation that usually take place during laptop-based performance. For more see &lt;https://toplap.org/wiki/ManifestoDraft&gt; &amp; &lt;https://github.com/Algorave/guidelines/blob/master/README_en.md&gt;. There are other benefits of this sharing act that include actual comprehension of code, but no one believes that people are coming to gigs/concerts purely to read code, or to celebrate it as a spectacle.\n\nSee also Kim Cascone, \"Laptop music-counterfeiting aura in the age of infinite reproduction\", 2002: &lt;https://scholar.google.com/scholar?cluster=11273167955509493610&gt;",
        "user": "UEGFXUK3M",
        "ts": "1575626601.118100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UEGFXUK3M",
            "ts": "1575626981.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V5cH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Doesn't that happen all the time in the nose-bleed seats in a concert?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nAll I'm getting at is that the motivation to project code in a performance, is more often primarily a symbolic act of sharing and openness on the part of the performer, acknowledging the detrimental social and musical effects of obfuscation that usually take place during laptop-based performance. For more see "
                            },
                            {
                                "type": "link",
                                "url": "https://toplap.org/wiki/ManifestoDraft"
                            },
                            {
                                "type": "text",
                                "text": " & "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/Algorave/guidelines/blob/master/README_en.md"
                            },
                            {
                                "type": "text",
                                "text": ". There are other benefits of this sharing act that include actual comprehension of code, but no one believes that people are coming to gigs/concerts purely to read code, or to celebrate it as a spectacle.\n\nSee also Kim Cascone, \"Laptop music-counterfeiting aura in the age of infinite reproduction\", 2002: "
                            },
                            {
                                "type": "link",
                                "url": "https://scholar.google.com/scholar?cluster=11273167955509493610"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575504813.036400",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "8580a7a9-f519-4819-8b56-c172efe1b9e8",
        "type": "message",
        "text": "<@UCUSW7WVD>\nIt\u2019s not about the html part. It is just a standard use case, because it might be hard to come up with the tests when its about `visuals`.\n\nBut ignore html for now. It\u2019s like saying I don\u2019t know \u201chow the current implementation works\u201d / \u201cwhat are the abstractions and their relations in the current implementation\u201d, but I\u2019m sure it\u2019s good and want to match my next implementation with the current one.\n\nI would not use this kind of testing alone, but for testing the glue between loosely coupled boundaries + the \u201clog\u201d nature of the traces seems a good composition.\n\nI could say: I don\u2019t know what is the exact ordering between facts in the trace and it might change awkwardly, but for now I want to save the current implementation (via it\u2019s trace), because I am sure it\u2019s ok and I want to test against that later.",
        "user": "UL3CJ7YKC",
        "ts": "1575641348.118900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1575641355.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D5w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": "\nIt\u2019s not about the html part. It is just a standard use case, because it might be hard to come up with the tests when its about "
                            },
                            {
                                "type": "text",
                                "text": "visuals",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nBut ignore html for now. It\u2019s like saying I don\u2019t know \u201chow the current implementation works\u201d / \u201cwhat are the abstractions and their relations in the current implementation\u201d, but I\u2019m sure it\u2019s good and want to match my next implementation with the current one.\n\nI would not use this kind of testing alone, but for testing the glue between loosely coupled boundaries + the \u201clog\u201d nature of the traces seems a good composition.\n\nI could say: I don\u2019t know what is the exact ordering between facts in the trace and it might change awkwardly, but for now I want to save the current implementation (via it\u2019s trace), because I am sure it\u2019s ok and I want to test against that later."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574787700.220500",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "3b01d8a5-f714-476d-a06f-e5ea243b0bb6",
        "type": "message",
        "text": "<@UF89Z7SRF> yes we have gone to a funny place if a \"language\" is not some sort of symbol system.  Usually a \"symbol\" is an arbitrary signifier, a string of characters in typical text-based programming language.  Arbitrariness isn't a all-nothing thing.  For example, a color swatch is far from an arbitrary way to represent a color, but it's still not the same as seeing your kitchen painted in it.  Even a hex color `#7521AF` isn't an arbitrary symbol, it's part of a system.  The `#` at the beginning is about as arbitrary as it gets though.",
        "user": "UA14TGLTC",
        "ts": "1575641442.119200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dMN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UF89Z7SRF"
                            },
                            {
                                "type": "text",
                                "text": " yes we have gone to a funny place if a \"language\" is not some sort of symbol system.  Usually a \"symbol\" is an arbitrary signifier, a string of characters in typical text-based programming language.  Arbitrariness isn't a all-nothing thing.  For example, a color swatch is far from an arbitrary way to represent a color, but it's still not the same as seeing your kitchen painted in it.  Even a hex color "
                            },
                            {
                                "type": "text",
                                "text": "#7521AF",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " isn't an arbitrary symbol, it's part of a system.  The "
                            },
                            {
                                "type": "text",
                                "text": "#",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " at the beginning is about as arbitrary as it gets though."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "3b215275-0d23-4ec6-9e2a-82583ecf6639",
        "type": "message",
        "text": "Afaik there is a similar technique already known in the industry: when you have a legacy system with no tests first you might add a \u201clog\u201d (trace) to it, and while refactoring you might test against that log.",
        "user": "UL3CJ7YKC",
        "ts": "1575641483.119400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kBV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Afaik there is a similar technique already known in the industry: when you have a legacy system with no tests first you might add a \u201clog\u201d (trace) to it, and while refactoring you might test against that log."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574787700.220500",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "7e5813f3-a716-4f3d-9bb4-b855ec537ef0",
        "type": "message",
        "text": "I agree that all programming languages are languages, and that all languages have syntax, in a formal sense. But that insight obscures an important distinction. It's the language centre of our brain that processes syntax (and music: <https://www.sciencedaily.com/releases/2007/09/070927121101.htm>). There are other modes of thinking, outside of language, such as visual and kinesthetic thinking, which engage other parts of the brain. We make the experience of programming accessible to more people when we build alternative programming interfaces that de-emphasize syntax and parsing, and emphasize other modes of thinking, such as visual and kinesthetic.",
        "user": "UJN1TAYEQ",
        "ts": "1575646096.119600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "ScienceDaily",
                "title": "Music And Language Are Processed By The Same Brain Systems",
                "title_link": "https://www.sciencedaily.com/releases/2007/09/070927121101.htm",
                "text": "Researchers have long debated whether or not language and music depend on common processes in the mind. Now, researchers have found evidence that the processing of music and language do indeed depend on some of the same brain systems.",
                "fallback": "ScienceDaily: Music And Language Are Processed By The Same Brain Systems",
                "from_url": "https://www.sciencedaily.com/releases/2007/09/070927121101.htm",
                "service_icon": "https://www.sciencedaily.com/favicon.ico",
                "id": 1,
                "original_url": "https://www.sciencedaily.com/releases/2007/09/070927121101.htm"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EVQX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree that all programming languages are languages, and that all languages have syntax, in a formal sense. But that insight obscures an important distinction. It's the language centre of our brain that processes syntax (and music: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.sciencedaily.com/releases/2007/09/070927121101.htm"
                            },
                            {
                                "type": "text",
                                "text": "). There are other modes of thinking, outside of language, such as visual and kinesthetic thinking, which engage other parts of the brain. We make the experience of programming accessible to more people when we build alternative programming interfaces that de-emphasize syntax and parsing, and emphasize other modes of thinking, such as visual and kinesthetic."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e3bbd90f-08ce-4b50-81b8-d2b230c5f8fe",
        "type": "message",
        "text": "I see what you mean by snapshot tests. I suppose to could use them? :man-shrugging: But it seems more \"black box\" than I like :sweat_smile:",
        "user": "UCUSW7WVD",
        "ts": "1575649626.119900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bkq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I see what you mean by snapshot tests. I suppose to could use them? "
                            },
                            {
                                "type": "emoji",
                                "name": "man-shrugging"
                            },
                            {
                                "type": "text",
                                "text": " But it seems more \"black box\" than I like "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574787700.220500",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "Still getting caught up in here, so sorry if this has been  discussed ... I've been thinking about setting up a twitch-style livestream so that my team members can, any time they want, drop in and \"look over my shoulder\" while I'm coding. Looking at Discord for this, but interested in trying out the collaboration/pair programming tools some folks have mentioned in here. Any other suggestions along these lines?",
        "user": "URC5MU2AZ",
        "ts": "1575650145.120100",
        "thread_ts": "1575499159.025000",
        "root": {
            "client_msg_id": "1e0a3bf8-d012-40e2-81b3-1fcf7b7a58aa",
            "type": "message",
            "text": "How do you feel about what people are doing on Twitch/Youtube? I\u2019ve tried livestreaming a pair programming exercise a few times and it worked out well even though it was a lot of the dealing with errors part of things",
            "user": "UN89MTTML",
            "ts": "1575499159.025000",
            "team": "T5TCAFTA9",
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "nuO",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "How do you feel about what people are doing on Twitch/Youtube? I\u2019ve tried livestreaming a pair programming exercise a few times and it worked out well even though it was a lot of the dealing with errors part of things"
                                }
                            ]
                        }
                    ]
                }
            ],
            "thread_ts": "1575499159.025000",
            "reply_count": 10,
            "reply_users_count": 3,
            "latest_reply": "1581098919.052500",
            "reply_users": [
                "URC5MU2AZ",
                "UN89MTTML",
                "UF89Z7SRF"
            ],
            "subscribed": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iMurn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Still getting caught up in here, so sorry if this has been  discussed ... I've been thinking about setting up a twitch-style livestream so that my team members can, any time they want, drop in and \"look over my shoulder\" while I'm coding. Looking at Discord for this, but interested in trying out the collaboration/pair programming tools some folks have mentioned in here. Any other suggestions along these lines?"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "e933f38a-839a-4cc7-ac03-e719b113da9e"
    },
    {
        "client_msg_id": "a72eae2c-ea42-4afe-92e2-4ae23bdf943d",
        "type": "message",
        "text": "Ooh that\u2019s a really cool idea, I hadn\u2019t thought about doing it in a work setting",
        "user": "UN89MTTML",
        "ts": "1575650329.120400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eXjrI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ooh that\u2019s a really cool idea, I hadn\u2019t thought about doing it in a work setting"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575499159.025000",
        "parent_user_id": "UN89MTTML"
    },
    {
        "client_msg_id": "e8e55fb7-dffa-4926-8868-ed6d131d883b",
        "type": "message",
        "text": "I\u2019ve never seen an example of a \u201clisp machine\u201d. Can you also describe those as being \u201cwithout apps\u201d and an \u201coperating system\u201d? It sounds like they might.",
        "user": "UK22Z72L8",
        "ts": "1575650459.120600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n5tL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019ve never seen an example of a \u201clisp machine\u201d. Can you also describe those as being \u201cwithout apps\u201d and an \u201coperating system\u201d? It sounds like they might."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575578741.109400",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "C81C359E-50E2-4FC7-889B-EBF072C64DCF",
        "type": "message",
        "text": "Okok, just mentioned them to ask if you already thought about that use case so I can ask you how is it :)",
        "user": "UL3CJ7YKC",
        "ts": "1575651104.121900",
        "team": "T5TCAFTA9",
        "thread_ts": "1574787700.220500",
        "parent_user_id": "UL3CJ7YKC",
        "reactions": [
            {
                "name": "smile",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "78876f97-000a-4f3d-b495-e6acbad93478",
        "type": "message",
        "text": "Since my project is a language for making 3D graphics, I am interested in understanding how to make languages that are easy for visual artists. My research suggests that most visual artists prefer node-and-wire languages over text based languages (I'm referring to fine arts and the 3D graphics industry, not web design). I think it's because visual artists prefer visual thinking. It would be nice to put these ideas on a more solid footing.",
        "user": "UJN1TAYEQ",
        "ts": "1575651164.122600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ms4u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Since my project is a language for making 3D graphics, I am interested in understanding how to make languages that are easy for visual artists. My research suggests that most visual artists prefer node-and-wire languages over text based languages (I'm referring to fine arts and the 3D graphics industry, not web design). I think it's because visual artists prefer visual thinking. It would be nice to put these ideas on a more solid footing."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b84c7f44-7954-4bcb-b5c9-5b0c81356fca",
        "type": "message",
        "text": "Oh, hey, Local-First software has been written up in WIRED today: <https://www.wired.com/story/collaborative-software-wary-cloud/>",
        "user": "UFXFB1RK8",
        "ts": "1575653839.123000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Wired",
                "title": "You Can Have Collaborative Software That\u2019s Wary of the Cloud",
                "title_link": "https://www.wired.com/story/collaborative-software-wary-cloud/",
                "text": "Research lab Ink &amp; Switch wants to harness the benefits of productivity and communication without forcing users to give up control of their data.",
                "fallback": "Wired: You Can Have Collaborative Software That\u2019s Wary of the Cloud",
                "image_url": "https://media.wired.com/photos/5de974f96d82de00089e62c1/191:100/w_1280,c_limit/business%2520-%2520feature%2520art%2520-%2520New%2520way%2520to%2520avoid%2520using%2520the%2520big%2520cloud%2520-%2520172732969.jpg?mbid=social_retweet",
                "from_url": "https://www.wired.com/story/collaborative-software-wary-cloud/",
                "image_width": 478,
                "image_height": 250,
                "image_bytes": 120580,
                "service_icon": "https://www.wired.com/verso/static/wired/assets/favicon.8db6caa92e354f0ec0a69cd8047e399faef058da.ico",
                "id": 1,
                "original_url": "https://www.wired.com/story/collaborative-software-wary-cloud/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bezk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh, hey, Local-First software has been written up in WIRED today: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.wired.com/story/collaborative-software-wary-cloud/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575653839.123000",
        "reply_count": 12,
        "reply_users_count": 3,
        "latest_reply": "1575673777.137600",
        "reply_users": [
            "URC5MU2AZ",
            "UFXFB1RK8",
            "UC2A2ARPT"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCUSW7WVD",
                    "UJBAJNFLK",
                    "UJ6LDMMN0",
                    "UD3AK9JRF",
                    "UHWC9PXBL",
                    "UEQ6M68H0",
                    "UFQQ3P867"
                ],
                "count": 7
            },
            {
                "name": "tada",
                "users": [
                    "U8A5MS6R1",
                    "UC2A2ARPT",
                    "UF6RLAL7J",
                    "UAJ9DV971"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "aa9ed1b7-6eba-4fd0-a028-00a40b556499",
        "type": "message",
        "text": "Isn't this related to the urbit model?",
        "user": "URC5MU2AZ",
        "ts": "1575655027.123200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hr+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Isn't this related to the urbit model?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575653839.123000",
        "parent_user_id": "UFXFB1RK8"
    },
    {
        "client_msg_id": "73d4e982-e03f-4209-a9a9-45bfa12c2910",
        "type": "message",
        "text": "No.",
        "user": "UFXFB1RK8",
        "ts": "1575655395.123400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+zn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575653839.123000",
        "parent_user_id": "UFXFB1RK8"
    },
    {
        "type": "message",
        "text": "&lt;https://www.ifis.uni-luebeck.de/~moeller/symbolics-info/genera/genera.html&gt; has some info about the Symbolics lisp machine.\n&gt; The key to Genera's intelligence is the sharing of knowledge and information among all activities. At any time, the collection of all the state of all the processes is called the environment (Figure 4). Any function running in any process can use any piece of data in the environment directly. You do not need laborious special-purpose protocols or intermediate files.\nSo it sounds like it also has no 'apps'? Diagram:",
        "files": [
            {
                "id": "FR1R53V99",
                "created": 1575655605,
                "timestamp": 1575655605,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U8A5MS6R1",
                "editable": false,
                "size": 13931,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-FR1R53V99/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-FR1R53V99/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-FR1R53V99-7f85c9bd38/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-FR1R53V99-7f85c9bd38/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-FR1R53V99-7f85c9bd38/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 196,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-FR1R53V99-7f85c9bd38/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 261,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-FR1R53V99-7f85c9bd38/image_160.png",
                "image_exif_rotation": 1,
                "original_w": 548,
                "original_h": 298,
                "thumb_tiny": "AwAaADDTpj9ucdqdz6D86a2SOR3oATew6gcUmTjJyPQZpPXnjt3peV9R2ANADlfcueKRck4J7+tN7/MCfQ4py9jgjnvQBITjrTWYYHP9adQQD1AoAhBAGA3/AI7QWG4HOfXgipdq/wB0flRtX+6PyoAjLISOSQPUUqsCQM559MU/av8AdH5UBQDwB+VAH//Z",
                "permalink": "https://futureofcoding.slack.com/files/U8A5MS6R1/FR1R53V99/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-FR1R53V99-efc8f58617",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": true,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CXRn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://www.ifis.uni-luebeck.de/~moeller/symbolics-info/genera/genera.html"
                            },
                            {
                                "type": "text",
                                "text": " has some info about the Symbolics lisp machine.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The key to Genera's intelligence is the sharing of knowledge and information among all activities. At any time, the collection of all the state of all the processes is called the environment (Figure 4). Any function running in any process can use any piece of data in the environment directly. You do not need laborious special-purpose protocols or intermediate files."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nSo it sounds like it also has no 'apps'? Diagram:"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "U8A5MS6R1",
        "display_as_bot": false,
        "ts": "1575655608.123700",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1575655807.000000"
        },
        "client_msg_id": "db8cc776-fd64-463a-8ba4-df82e18e7209",
        "thread_ts": "1575578741.109400",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "ee0896db-b9a8-4278-a027-5ee2b09b92c3",
        "type": "message",
        "text": "I think <@UG894KHNV> may have dug deeper into Genera.",
        "user": "U8A5MS6R1",
        "ts": "1575655765.124100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "w6BP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think "
                            },
                            {
                                "type": "user",
                                "user_id": "UG894KHNV"
                            },
                            {
                                "type": "text",
                                "text": " may have dug deeper into Genera."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575578741.109400",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "6a88a5a9-6996-4400-a935-4f2cc4addc26",
        "type": "message",
        "text": "<@UE6EFEPTQ> FONC was retired a couple of years ago. I think <@UAVCC2X70> created &lt;https://github.com/d-cook/SomethingNew/&gt; as a follow up place for some discussions. There was also a 'new FONC' list somewhere which I tried to get onto but couldn't.",
        "user": "U8A5MS6R1",
        "ts": "1575656224.124500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1575656981.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o/YE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": " FONC was retired a couple of years ago. I think "
                            },
                            {
                                "type": "user",
                                "user_id": "UAVCC2X70"
                            },
                            {
                                "type": "text",
                                "text": " created "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/d-cook/SomethingNew/"
                            },
                            {
                                "type": "text",
                                "text": " as a follow up place for some discussions. There was also a 'new FONC' list somewhere which I tried to get onto but couldn't."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575578741.109400",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "d1d86193-bf35-4dc3-9d1e-30f1cfdcc4ca",
        "type": "message",
        "text": "Oh here's the thread: <https://www.mail-archive.com/fonc@mailman.vpri.org/msg00204.html>",
        "user": "U8A5MS6R1",
        "ts": "1575656248.124700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8ut",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh here's the thread: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.mail-archive.com/fonc@mailman.vpri.org/msg00204.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575578741.109400",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "163e2d2d-9e6e-4753-9fcd-5336c7850c5d",
        "type": "message",
        "text": "I'm not sure what to make of \"no operating system\" claims. Back in the day there was a more liberal definition of \"operating system\". At one point, a working informal definition of OS was whatever software was loaded into memory at boot. Nowadays, it seems that \"operating system\" is synonymous with \"Unix\", so if an OS doesn't have the same architecture and layering as Unix, then it isn't an OS. I could be mischevious, and claim that Unix is an image based software environment written from the ground up in C. There's no OS, because it is C all the way down, right?",
        "user": "UJN1TAYEQ",
        "ts": "1575656395.124900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "djxin",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not sure what to make of \"no operating system\" claims. Back in the day there was a more liberal definition of \"operating system\". At one point, a working informal definition of OS was whatever software was loaded into memory at boot. Nowadays, it seems that \"operating system\" is synonymous with \"Unix\", so if an OS doesn't have the same architecture and layering as Unix, then it isn't an OS. I could be mischevious, and claim that Unix is an image based software environment written from the ground up in C. There's no OS, because it is C all the way down, right?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575578741.109400",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "U8A5MS6R1",
                    "UHWC9PXBL"
                ],
                "count": 2
            },
            {
                "name": "100",
                "users": [
                    "U8A5MS6R1",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "9abd46e7-c936-40dc-8322-25bb6e27ec38",
        "type": "message",
        "text": "I think folks say no OS because OS now mostly means Unix architecture like you say.",
        "user": "U8A5MS6R1",
        "ts": "1575656605.125300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jhyn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think folks say no OS because OS now mostly means Unix architecture like you say."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575578741.109400",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "56f70adb-ec73-43a1-9493-39e5447dc846",
        "type": "message",
        "text": "Unrelated to FONC, augmented-programming is another list that seems to have died down and contains interesting discussions and pointers: <https://groups.google.com/forum/#!forum/augmented-programming>",
        "user": "U8A5MS6R1",
        "ts": "1575657049.125600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "16l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Unrelated to FONC, augmented-programming is another list that seems to have died down and contains interesting discussions and pointers: "
                            },
                            {
                                "type": "link",
                                "url": "https://groups.google.com/forum/#!forum/augmented-programming"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575578741.109400",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "fb22f097-434f-4f4c-91b9-d79ec1886c61",
        "type": "message",
        "text": "<@UF89Z7SRF> Lynx's UI essentially causes direct changes to the abstract syntax tree data structures, which the compiler then directly converts to machine code using LLVM. There is no parser/lexer that's part of the language.",
        "user": "U6FKVSVCK",
        "ts": "1575658089.125900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xhaJ5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UF89Z7SRF"
                            },
                            {
                                "type": "text",
                                "text": " Lynx's UI essentially causes direct changes to the abstract syntax tree data structures, which the compiler then directly converts to machine code using LLVM. There is no parser/lexer that's part of the language."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "4982d6d0-89fb-49a8-9880-c93f36d39f63",
        "type": "message",
        "text": "<@U6FKVSVCK> Sorry I don't understand, that just seems like an implementation detail?",
        "user": "UF89Z7SRF",
        "ts": "1575658780.126100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FMuLH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U6FKVSVCK"
                            },
                            {
                                "type": "text",
                                "text": " Sorry I don't understand, that just seems like an implementation detail?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "0dd0fdb4-a0fc-49d2-95c0-03b3eba2ad8f",
        "type": "message",
        "text": "<@UJN1TAYEQ> It seems obvious to me that music involves both discrete symbols and analogue imagery, integrated and experienced as a whole. I think the same is true of computer programming, too. I think the work of Allan Paivio on Dual Coding theory is really informative here. Old perhaps, but I think very well-grounded in experimental research nonetheless.",
        "user": "UF89Z7SRF",
        "ts": "1575659123.126300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UF89Z7SRF",
            "ts": "1575659444.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZBJu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJN1TAYEQ"
                            },
                            {
                                "type": "text",
                                "text": " It seems obvious to me that music involves both discrete symbols and analogue imagery, integrated and experienced as a whole. I think the same is true of computer programming, too. I think the work of Allan Paivio on Dual Coding theory is really informative here. Old perhaps, but I think very well-grounded in experimental research nonetheless."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "61418254-fadc-4ba8-9067-a4d78a2b1f38",
        "type": "message",
        "text": "I think talk of learning and thinking styles is overblown.",
        "user": "UF89Z7SRF",
        "ts": "1575659160.126500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vyHr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think talk of learning and thinking styles is overblown."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "5d9fdf79-7401-49ee-94b9-957503b73886",
        "type": "message",
        "text": "You were wondering how Lynx gets away from text\u2014\u00a0the answer is that it never generates it.\n\nI guessed you were picturing something like what lots of other systems do, and that is to use a UI as a wrapper on a textual language, and then parse/lex/compile the text language \"normally\"; where the text is the \"real\" representation. It's not always obvious to everyone that you can cut that step out; people often assume a programming language has to be text at some point because that's usually the only way we ever encounter it.\n\nBut Lynx is no more text than a JPEG or a photoshop document is.",
        "user": "U6FKVSVCK",
        "ts": "1575659257.126700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "esD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You were wondering how Lynx gets away from text\u2014\u00a0the answer is that it never generates it.\n\nI guessed you were picturing something like what lots of other systems do, and that is to use a UI as a wrapper on a textual language, and then parse/lex/compile the text language \"normally\"; where the text is the \"real\" representation. It's not always obvious to everyone that you can cut that step out; people often assume a programming language has to be text at some point because that's usually the only way we ever encounter it.\n\nBut Lynx is no more text than a JPEG or a photoshop document is."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "5aa9aabc-475e-4876-a627-12ced59f288c",
        "type": "message",
        "text": "I do agree that computer languages could make far greater use of imagery (whether visual, sonic or kinaesthetic imagery).",
        "user": "UF89Z7SRF",
        "ts": "1575659259.126900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "83xC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I do agree that computer languages could make far greater use of imagery (whether visual, sonic or kinaesthetic imagery)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "477abeba-7600-447e-b5b6-3e28b4468ce6",
        "type": "message",
        "text": "<@U6FKVSVCK> but you have to have some way of identifying what something is? How do you do that, other that with some kind of general symbol?",
        "user": "UF89Z7SRF",
        "ts": "1575659316.127100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MtbV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U6FKVSVCK"
                            },
                            {
                                "type": "text",
                                "text": " but you have to have some way of identifying what something is? How do you do that, other that with some kind of general symbol?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "e5796949-c7d2-4a47-8855-f4ccfba04834",
        "type": "message",
        "text": "For the user, objects refer to each other by connectivity. If you call a function, there is a wire from the function definition to the call site.\n\nInternally, the AST is a data structure, so its sub-parts refer to each other directly (i.e. pointers). The user doesn't have to invent a sequence of characters for anything in order to use it. (Though it is possible and helpful to give things labels)",
        "user": "U6FKVSVCK",
        "ts": "1575659480.127400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cmp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For the user, objects refer to each other by connectivity. If you call a function, there is a wire from the function definition to the call site.\n\nInternally, the AST is a data structure, so its sub-parts refer to each other directly (i.e. pointers). The user doesn't have to invent a sequence of characters for anything in order to use it. (Though it is possible and helpful to give things labels)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "000d0a14-90cb-49c0-ae6b-8f5403382e5a",
        "type": "message",
        "text": "Ok so I have a function and some input and output. How does the function have any identity without some kind of symbol?",
        "user": "UF89Z7SRF",
        "ts": "1575659546.127600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4dAF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ok so I have a function and some input and output. How does the function have any identity without some kind of symbol?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "0613b558-6226-4d82-9752-9a342e00d3c0",
        "type": "message",
        "text": "Say you had a 'reverse' function that reverses its input. You say there's no text, so what does the user do, to say it is a reverse function?",
        "user": "UF89Z7SRF",
        "ts": "1575659602.127800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lzDo",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Say you had a 'reverse' function that reverses its input. You say there's no text, so what does the user do, to say it is a reverse function?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "e090c179-0c8c-43b0-af29-355b9bf4e8bd",
        "type": "message",
        "text": "Fundamentally what happens is that a wire is drawn from the definition of the function \"reverse\" to the call site, which also has a wire feeding the data to be reversed.\n\nFor convenience, there is a menu which allows you to choose the function to place and connect to from a menu, which displays the labels and documentation for all the available definitions. But when you use it, it's really doing the above. In principle you could give no names to anything, or everything the same name, and it would still work just fine\u2014 but of course that's not a good idea because it'd be confusing! :)",
        "user": "U6FKVSVCK",
        "ts": "1575659917.128000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K3iH1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Fundamentally what happens is that a wire is drawn from the definition of the function \"reverse\" to the call site, which also has a wire feeding the data to be reversed.\n\nFor convenience, there is a menu which allows you to choose the function to place and connect to from a menu, which displays the labels and documentation for all the available definitions. But when you use it, it's really doing the above. In principle you could give no names to anything, or everything the same name, and it would still work just fine\u2014 but of course that's not a good idea because it'd be confusing! :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "c5116afa-aec2-4df9-bfce-019dcb084be1",
        "type": "message",
        "text": "Sorry still don't understand, and can't find the link to it now for some reason.",
        "user": "UF89Z7SRF",
        "ts": "1575659968.128200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MwVxO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sorry still don't understand, and can't find the link to it now for some reason."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "b8438a23-28e1-426f-95c7-c365229ac61e",
        "type": "message",
        "text": "Internally, the data structure representing the call site has a pointer which refers to the function definition. The pointer is assigned as a result of the UI actions of the user",
        "user": "U6FKVSVCK",
        "ts": "1575659970.128400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wUKlq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Internally, the data structure representing the call site has a pointer which refers to the function definition. The pointer is assigned as a result of the UI actions of the user"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "5e63f406-7c25-4a05-8048-2610c48e684d",
        "type": "message",
        "text": "<https://lynxtool.com/What.html>",
        "user": "U6FKVSVCK",
        "ts": "1575659990.128600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iqoOG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://lynxtool.com/What.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "e4100997-49dd-4aed-a044-57409bdb1efd",
        "type": "message",
        "text": "But to add more substance :slightly_smiling_face: I just found <https://asciinema.org/> and saw that there\u2019s discussion around adding livestream support",
        "user": "UN89MTTML",
        "ts": "1575659998.128800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vWljF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But to add more substance "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " I just found "
                            },
                            {
                                "type": "link",
                                "url": "https://asciinema.org/"
                            },
                            {
                                "type": "text",
                                "text": " and saw that there\u2019s discussion around adding livestream support"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575499159.025000",
        "parent_user_id": "UN89MTTML"
    },
    {
        "client_msg_id": "44daab24-05b1-4e34-9149-36fd295fd1a2",
        "type": "message",
        "text": "ok the first example, you select \"+\". To me, \"+\" is a discrete symbol - text.",
        "user": "UF89Z7SRF",
        "ts": "1575660057.129000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MqMJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ok the first example, you select \"+\". To me, \"+\" is a discrete symbol - text."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "c1746647-a2e6-4aa4-ac4d-c38cbeb6db2c",
        "type": "message",
        "text": "'render' and 'classify' have the same arity. So the only distinguishing feature between them is 'render' and 'classify'. If you took the words away, you wouldn't just be confused, you'd have no idea what they did",
        "user": "UF89Z7SRF",
        "ts": "1575660218.129200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s1g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "'render' and 'classify' have the same arity. So the only distinguishing feature between them is 'render' and 'classify'. If you took the words away, you wouldn't just be confused, you'd have no idea what they did"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "b55fc707-8ab8-4309-adfd-643c3f85feaa",
        "type": "message",
        "text": "So I\u2019m thinking about giving that a shot, since one of the issues I had when I did a pair programming stream was that I had to set my terminal font size to a lot larger than I usually do so that it was legible on the stream",
        "user": "UN89MTTML",
        "ts": "1575660221.129400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c5jC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So I\u2019m thinking about giving that a shot, since one of the issues I had when I did a pair programming stream was that I had to set my terminal font size to a lot larger than I usually do so that it was legible on the stream"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575499159.025000",
        "parent_user_id": "UN89MTTML"
    },
    {
        "client_msg_id": "4b60a518-9f6c-471b-b685-1ec450d746bd",
        "type": "message",
        "text": "Sure; yep, there is text on the screen. That's the label for the function which does addition, which the UI will then place with a (hidden) connection to.\n\nIn this case, the example is complicated by the fact that the UI hides the wires for simple operations. We don't a zillion wires crisscrossing the canvas connecting every \"+\" to its global definition\u2014 but those can be exposed if need be.",
        "user": "U6FKVSVCK",
        "ts": "1575660241.129600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f2X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Sure; yep, there is text on the screen. That's the label for the function which does addition, which the UI will then place with a (hidden) connection to.\n\nIn this case, the example is complicated by the fact that the UI hides the wires for simple operations. We don't a zillion wires crisscrossing the canvas connecting every \"+\" to its global definition\u2014 but those can be exposed if need be."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "144f8f11-5697-4478-afd2-869581b3aad9",
        "type": "message",
        "text": "Actually, it looks like I don't have a complete example of how calling a function works on that page! Let me see if I can dig up a diagram...",
        "user": "U6FKVSVCK",
        "ts": "1575660289.129800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q2hd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Actually, it looks like I don't have a complete example of how calling a function works on that page! Let me see if I can dig up a diagram..."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "d25be85a-d916-4743-aa5f-7b89702f7f7f",
        "type": "message",
        "text": "It still seems to me that the text part is essential to a computer language.",
        "user": "UF89Z7SRF",
        "ts": "1575660435.130000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZMAr6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It still seems to me that the text part is essential to a computer language."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "0e783774-ad37-40c8-aa52-8c22fd2d3354",
        "type": "message",
        "text": "The zillion wires crisscrossing is a crucial point I think. 'standard' text exists in two dimensions. A graph exists in n-dimensions. Which is more visual?",
        "user": "UF89Z7SRF",
        "ts": "1575660493.130200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l9xA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The zillion wires crisscrossing is a crucial point I think. 'standard' text exists in two dimensions. A graph exists in n-dimensions. Which is more visual?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "type": "message",
        "text": "Here\u2014 this is a mockup for a client which shows the connectivity between a definition and a call site fully exposed:",
        "files": [
            {
                "id": "FRF9283DM",
                "created": 1575660526,
                "timestamp": 1575660526,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U6FKVSVCK",
                "editable": false,
                "size": 1893889,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-FRF9283DM/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-FRF9283DM/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-FRF9283DM-ee0681f27f/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-FRF9283DM-ee0681f27f/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-FRF9283DM-ee0681f27f/image_360.png",
                "thumb_360_w": 310,
                "thumb_360_h": 360,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-FRF9283DM-ee0681f27f/image_480.png",
                "thumb_480_w": 413,
                "thumb_480_h": 480,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-FRF9283DM-ee0681f27f/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-FRF9283DM-ee0681f27f/image_720.png",
                "thumb_720_w": 619,
                "thumb_720_h": 720,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-FRF9283DM-ee0681f27f/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 931,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-FRF9283DM-ee0681f27f/image_960.png",
                "thumb_960_w": 825,
                "thumb_960_h": 960,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-FRF9283DM-ee0681f27f/image_1024.png",
                "thumb_1024_w": 880,
                "thumb_1024_h": 1024,
                "image_exif_rotation": 1,
                "original_w": 1600,
                "original_h": 1861,
                "thumb_tiny": "AwAwACm3j3pce9JikZe+aAHfjRSbhigMCDS1AWik5paYBSkZFNyBRmkmAFBg9aAm0GgkA45/Ol7UwEyKWmj606gBrDIxTkPljGaawyOKdH8o+YZNPoAwgb9xan00qS5PGKdSYCUtGaKAP//Z",
                "permalink": "https://futureofcoding.slack.com/files/U6FKVSVCK/FRF9283DM/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-FRF9283DM-b6ffe92418",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": true,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sJC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here\u2014 this is a mockup for a client which shows the connectivity between a definition and a call site fully exposed:"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "U6FKVSVCK",
        "display_as_bot": false,
        "ts": "1575660531.130400",
        "client_msg_id": "f1eff2ab-210a-452c-8212-2bfa724e3fc9",
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "5bec9b7b-b1a2-42a4-a694-ffa726e40021",
        "type": "message",
        "text": "That said I do agree that augmenting text with graphs is a great way to go",
        "user": "UF89Z7SRF",
        "ts": "1575660550.130800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lLN4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That said I do agree that augmenting text with graphs is a great way to go"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "b2cd6538-9bd1-439f-a0fc-751a66e7bf1e",
        "type": "message",
        "text": "The top square shows the definition for a function (labeled \"my financial model\"). The definition is carried out the bottom through the white wires, to the several call sites, where it is applied.",
        "user": "U6FKVSVCK",
        "ts": "1575660613.131000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5xH93",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The top square shows the definition for a function (labeled \"my financial model\"). The definition is carried out the bottom through the white wires, to the several call sites, where it is applied."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "012e955d-a658-45b6-be7c-5d7eb6ba1b49",
        "type": "message",
        "text": "It's definitely a trade off. For example it's a lot easier to write a text program about text than a graph about graphs",
        "user": "UF89Z7SRF",
        "ts": "1575660614.131200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "55T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's definitely a trade off. For example it's a lot easier to write a text program about text than a graph about graphs"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "1075857e-4df8-4ef0-bfd2-f4f6c355a8bb",
        "type": "message",
        "text": "Is it a dataflow language?",
        "user": "UF89Z7SRF",
        "ts": "1575660662.131400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "K1U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is it a dataflow language?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "2be6d405-7d45-43f3-92dc-c7a23810f78c",
        "type": "message",
        "text": "I made a node-and-wire interface that automatically connects based on proximity and type compatibility: <https://slab.org/colourful-texture/>",
        "user": "UF89Z7SRF",
        "ts": "1575660764.131600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Alex McLean",
                "title": "Colourful texture",
                "title_link": "https://slab.org/colourful-texture/",
                "text": "Texture v.2 is getting interesting now, reminds me of fabric travelling around a loom.. Everything apart from the DSP is implemented in Haskell. The functional approach has worked out particularly \u2026",
                "fallback": "Alex McLean: Colourful texture",
                "image_url": "http://img.youtube.com/vi/kr4DdQuNAKc/0.jpg",
                "ts": 1379086595,
                "from_url": "https://slab.org/colourful-texture/",
                "image_width": 333,
                "image_height": 250,
                "image_bytes": 14631,
                "id": 1,
                "original_url": "https://slab.org/colourful-texture/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aWd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I made a node-and-wire interface that automatically connects based on proximity and type compatibility: "
                            },
                            {
                                "type": "link",
                                "url": "https://slab.org/colourful-texture/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UEQ7QL15F"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "99e22735-7a88-41b6-85cf-8e5b5e7594af",
        "type": "message",
        "text": "I've abandoned it a bit but think this is a promising direction, it makes programming really playful as not only is it not possible to make something syntactically correct, you don't even have to think about making the connections, you just put things near each other, and move them around",
        "user": "UF89Z7SRF",
        "ts": "1575660897.132000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4kfH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've abandoned it a bit but think this is a promising direction, it makes programming really playful as not only is it not possible to make something syntactically correct, you don't even have to think about making the connections, you just put things near each other, and move them around"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UA14TGLTC",
                    "UEQ7QL15F"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "ac33f50a-8fed-4bd3-ad7d-f2b82b310f80",
        "type": "message",
        "text": "I recently repurposed it for weaving",
        "user": "UF89Z7SRF",
        "ts": "1575660927.132200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tBI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I recently repurposed it for weaving"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "f7141454-4524-485b-a9e4-55b58e083226",
        "type": "message",
        "text": "Neat!\nYes, node-and-wire is extremely playful and reactive. It's my hope to bring that playfulness and responsiveness to programming in general, and to more people.",
        "user": "U6FKVSVCK",
        "ts": "1575660966.132400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "77w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Neat!\nYes, node-and-wire is extremely playful and reactive. It's my hope to bring that playfulness and responsiveness to programming in general, and to more people."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "4787f47d-d837-4f48-a212-cbe2305adbe2",
        "type": "message",
        "text": "That's great. My argument is really that text isn't _bad_, after all literacy rates are high these days. It's just that text is often better in combination with gesture. No-one wants to listen to a speech synthesiser that doesn't have prosody, for example.",
        "user": "UF89Z7SRF",
        "ts": "1575661105.132600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rQS1V",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's great. My argument is really that text isn't "
                            },
                            {
                                "type": "text",
                                "text": "bad",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", after all literacy rates are high these days. It's just that text is often better in combination with gesture. No-one wants to listen to a speech synthesiser that doesn't have prosody, for example."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "08bfeb45-cd3b-4f0e-8ed4-c8eeb0eba3fe",
        "type": "message",
        "text": "Connectivity by proximity is an interesting idea. I haven't seen that in professional node tools, but it might be handy.\n\nFWIW, I am aiming to release the user from the burden of laying things out. This is not implemented yet, but I want the system to automatically layout and tidy up nodes so the user doesn't have to fuss with them. That can be a big slowdown when using pro node tools. (They should still be able to tweak the layout, though)",
        "user": "U6FKVSVCK",
        "ts": "1575661106.132800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3x/L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Connectivity by proximity is an interesting idea. I haven't seen that in professional node tools, but it might be handy.\n\nFWIW, I am aiming to release the user from the burden of laying things out. This is not implemented yet, but I want the system to automatically layout and tidy up nodes so the user doesn't have to fuss with them. That can be a big slowdown when using pro node tools. (They should still be able to tweak the layout, though)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "d4f6b975-f818-4fc2-bbea-0eabce474112",
        "type": "message",
        "text": "Heh careful, you might find the best layout is horizontal and vertical, and get back in the constraints of 'standard' text :)",
        "user": "UF89Z7SRF",
        "ts": "1575661167.133000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vQEa",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Heh careful, you might find the best layout is horizontal and vertical, and get back in the constraints of 'standard' text :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "c23efc1b-38fb-434e-a813-006bf672afe6",
        "type": "message",
        "text": "I gave the example of the ReacTable earlier - I'd call that a pro node tool",
        "user": "UF89Z7SRF",
        "ts": "1575661191.133200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gMU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I gave the example of the ReacTable earlier - I'd call that a pro node tool"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "7043d1db-c138-4e3d-82f9-a72932511618",
        "type": "message",
        "text": "Not only does it connect by proximity, but also uses proximity as a value for the function",
        "user": "UF89Z7SRF",
        "ts": "1575661248.133400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dgmB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not only does it connect by proximity, but also uses proximity as a value for the function"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "09adedea-a42a-4433-b5eb-325f478fab78",
        "type": "message",
        "text": "I always find it a great pleasure to watch a fluent pro using max/msp, by the way. It's amazing to watch",
        "user": "UF89Z7SRF",
        "ts": "1575661319.133700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XG/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I always find it a great pleasure to watch a fluent pro using max/msp, by the way. It's amazing to watch"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U6FKVSVCK"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "text": "Example of using my visual environment for live coding weaves",
        "files": [
            {
                "id": "FR5FL0CJV",
                "created": 1575661392,
                "timestamp": 1575661392,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "UF89Z7SRF",
                "editable": false,
                "size": 368956,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-FR5FL0CJV/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-FR5FL0CJV/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-FR5FL0CJV-67cdce8da6/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-FR5FL0CJV-67cdce8da6/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-FR5FL0CJV-67cdce8da6/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 202,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-FR5FL0CJV-67cdce8da6/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 269,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-FR5FL0CJV-67cdce8da6/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-FR5FL0CJV-67cdce8da6/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 403,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-FR5FL0CJV-67cdce8da6/image_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 448,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-FR5FL0CJV-67cdce8da6/image_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 538,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-FR5FL0CJV-67cdce8da6/image_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 574,
                "image_exif_rotation": 1,
                "original_w": 1053,
                "original_h": 590,
                "thumb_tiny": "AwAaADCjI77nIkPDdMmmeZJ/fb86czDzHDDjcTSMSoG3GDQAnmP/AH2/Opd5J++/3eeT1qAkk1Jh2AwnbHTrQBobmCpiRhlARz3xUts5aUAvuG3Jz2NRZbbGMsB5a4x61Jb7vNUnceOd3Y0yepky/wCtf6mkBI6V0hAx0plIo54kn/8AVUglKqBgVu05QMGgDP2tsjK7sFAOOxp8WVkDEEEDB3dCauv0oSncVj//2Q==",
                "permalink": "https://futureofcoding.slack.com/files/UF89Z7SRF/FR5FL0CJV/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-FR5FL0CJV-7653a206d7",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": true,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tQXP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Example of using my visual environment for live coding weaves"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "UF89Z7SRF",
        "display_as_bot": false,
        "ts": "1575661396.134000",
        "client_msg_id": "1de03bb7-df9c-4de4-8341-8e35e5735ba7",
        "thread_ts": "1575368526.370100",
        "parent_user_id": "UF89Z7SRF"
    },
    {
        "client_msg_id": "35ac112e-baf7-4e25-b02f-fb10e18874ef",
        "type": "message",
        "text": "(in motivation, not implementation, of course)",
        "user": "URC5MU2AZ",
        "ts": "1575661842.134400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VxebV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(in motivation, not implementation, of course)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575653839.123000",
        "parent_user_id": "UFXFB1RK8"
    },
    {
        "client_msg_id": "1b0cafb0-79a2-418f-ad04-e5f6e1535776",
        "type": "message",
        "text": "I often stream live coding, it can be fun but I find myself trying to do more 'impressive' things and it doesn't end up being super productive. That could just be me!",
        "user": "UF89Z7SRF",
        "ts": "1575661974.134600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8+U",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I often stream live coding, it can be fun but I find myself trying to do more 'impressive' things and it doesn't end up being super productive. That could just be me!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575499159.025000",
        "parent_user_id": "UN89MTTML"
    },
    {
        "client_msg_id": "7891bb2b-4df9-444d-90de-30e59718ad86",
        "type": "message",
        "text": "On a practical level I really recommend OBS studio <https://obsproject.com/>",
        "user": "UF89Z7SRF",
        "ts": "1575662010.134800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Open Broadcaster Software | OBS",
                "title_link": "https://obsproject.com/",
                "text": "OBS (Open Broadcaster Software) is free and open source software for video recording and live streaming. Stream to Twitch, YouTube and many other providers or record your own videos with high quality H264 / AAC encoding.",
                "fallback": "Open Broadcaster Software | OBS",
                "from_url": "https://obsproject.com/",
                "service_icon": "https://obsproject.com/favicon-32x32.png",
                "service_name": "obsproject.com",
                "id": 1,
                "original_url": "https://obsproject.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "amta",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On a practical level I really recommend OBS studio "
                            },
                            {
                                "type": "link",
                                "url": "https://obsproject.com/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575499159.025000",
        "parent_user_id": "UN89MTTML"
    },
    {
        "client_msg_id": "94c51c45-53df-4bcc-963c-df086daf2c38",
        "type": "message",
        "text": "I think that's standard use anyway but I use it for all kinds of things and it's just great",
        "user": "UF89Z7SRF",
        "ts": "1575662039.135100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KFw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think that's standard use anyway but I use it for all kinds of things and it's just great"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575499159.025000",
        "parent_user_id": "UN89MTTML"
    },
    {
        "client_msg_id": "d5e6c0c8-e001-400b-b240-d42080dbacf8",
        "type": "message",
        "text": "The \u201cimpressive\u201d thing is what I liked about doing it with a pair - helps a lot in staying grounded",
        "user": "UN89MTTML",
        "ts": "1575662655.135300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1cT+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The \u201cimpressive\u201d thing is what I liked about doing it with a pair - helps a lot in staying grounded"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575499159.025000",
        "parent_user_id": "UN89MTTML"
    },
    {
        "client_msg_id": "ce6dde5a-a025-4c7e-a189-37b9c522596f",
        "type": "message",
        "text": "yeah I'm on that one too",
        "user": "UE6EFEPTQ",
        "ts": "1575663754.135500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tsXWc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah I'm on that one too"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575578741.109400",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "f55a6985-4eb4-44b0-b873-93636eba0b39",
        "type": "message",
        "text": "Congrats to the Ink &amp; Switch folks. (They're here, right?)",
        "user": "UC2A2ARPT",
        "ts": "1575668939.135900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CjkMC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Congrats to the Ink & Switch folks. (They're here, right?)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575653839.123000",
        "parent_user_id": "UFXFB1RK8"
    },
    {
        "client_msg_id": "e4f0895f-23ed-4007-a112-2c6ca65bef0a",
        "type": "message",
        "text": "Some of us, yes.",
        "user": "UFXFB1RK8",
        "ts": "1575670535.136100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Dxn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Some of us, yes."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575653839.123000",
        "parent_user_id": "UFXFB1RK8"
    },
    {
        "client_msg_id": "2340c07e-0488-4282-a924-58ed280fe6e7",
        "type": "message",
        "text": "<@URC5MU2AZ> my understanding of urbit is rather out of date, but broadly I see it as attempting to generalize computation in a decentralized but fundamentally owned way -- some individual owns every piece of data or computation",
        "user": "UFXFB1RK8",
        "ts": "1575670581.136300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zKk=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "URC5MU2AZ"
                            },
                            {
                                "type": "text",
                                "text": " my understanding of urbit is rather out of date, but broadly I see it as attempting to generalize computation in a decentralized but fundamentally owned way -- some individual owns every piece of data or computation"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575653839.123000",
        "parent_user_id": "UFXFB1RK8"
    },
    {
        "client_msg_id": "4f6ae001-b4f3-44a6-88e2-1e8ce2582af1",
        "type": "message",
        "text": "the work we've been doing on automerge, hypermerge, and pushpin is pretty decisively orthogonal to all of that",
        "user": "UFXFB1RK8",
        "ts": "1575670600.136500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6pIA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the work we've been doing on automerge, hypermerge, and pushpin is pretty decisively orthogonal to all of that"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575653839.123000",
        "parent_user_id": "UFXFB1RK8"
    },
    {
        "client_msg_id": "c349c48f-742d-42ae-8bab-de9ee22845b8",
        "type": "message",
        "text": "you have a computer. compute there.",
        "user": "UFXFB1RK8",
        "ts": "1575670634.136700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFXFB1RK8",
            "ts": "1575670641.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q=g9x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you have a computer. compute there."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575653839.123000",
        "parent_user_id": "UFXFB1RK8"
    },
    {
        "client_msg_id": "868e203d-e0ae-4a17-8b34-21903e1fa81f",
        "type": "message",
        "text": "the problem we've been trying to solve is 1) how can you collaborate without a central system and 2) what will that mean as a user experience?",
        "user": "UFXFB1RK8",
        "ts": "1575670642.137000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7wwI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "the problem we've been trying to solve is 1) how can you collaborate without a central system and 2) what will that mean as a user experience?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575653839.123000",
        "parent_user_id": "UFXFB1RK8"
    },
    {
        "client_msg_id": "8475cbf6-785e-4fa6-9bb6-5f6d60d19022",
        "type": "message",
        "text": "similar to other decentralized systems are questions of longevity of software, distribution of computation, and so on.",
        "user": "UFXFB1RK8",
        "ts": "1575670671.137200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fO9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "similar to other decentralized systems are questions of longevity of software, distribution of computation, and so on."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575653839.123000",
        "parent_user_id": "UFXFB1RK8"
    },
    {
        "client_msg_id": "e5a11fb0-08aa-463d-859b-07a350aabe87",
        "type": "message",
        "text": "but this work is mostly not a deep philosophical rumination about the nature of computing, it is an attempt to write real, useful software that humans can work within every day to solve ordinary problems.",
        "user": "UFXFB1RK8",
        "ts": "1575670706.137400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LeKUJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "but this work is mostly not a deep philosophical rumination about the nature of computing, it is an attempt to write real, useful software that humans can work within every day to solve ordinary problems."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575653839.123000",
        "parent_user_id": "UFXFB1RK8",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UHWC9PXBL",
                    "UMWF81HTP"
                ],
                "count": 3
            }
        ]
    }
]