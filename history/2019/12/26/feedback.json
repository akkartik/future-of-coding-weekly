[
    {
        "client_msg_id": "3ed01cdb-e065-4acb-bcfc-9b7575c0645d",
        "type": "message",
        "text": "I'd definitely be interested in reading it.",
        "user": "UK3LH8CF5",
        "ts": "1577315415.199400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=BV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd definitely be interested in reading it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577307438.157000",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UFLN9JFRT"
                ],
                "count": 1
            },
            {
                "name": "heavy_check_mark",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "E5B0D617-A9F3-4FD2-8381-8FA94C4C5AF7",
        "type": "message",
        "text": "<@UE6EFEPTQ> Ok, so my approach is kind of the opposite to \u201cgeneral first and see how it goes\u201d, because I think starting with a goal of building something generic (as in Turing-complete) puts you directly into programming language land. Nothing wrong with that! But everybody is doing that already.\n\nI like to look at large, creative applications for music production, video editing, or visual design as examples for creative tools that enable people to create quite a large variety of creative content. These tools might have grown surprisingly or accidentally or even intentionally turing-complete over time (see &lt;<https://www.gwern.net/Turing-complete|https://www.gwern.net/Turing-complete>&gt; for context), but they started out with a focus of how to manipulate domain-specific data structures visually. That\u2019s what I find interesting and promising. I\u2019m not opposed to ending up with something generic and powerful and Turing-complete, but I\u2019d like to get there organically and not mandate it from the start.\n\nI also feel like setting it as a goal from the beginning frames the whole problem as \u201cjust\u201d inventing another (visual?) programming language \u2014 and I find that limiting.\n\nWhen you ask about DSL, did it even occur to you that I might not even look for a language? Most of us here would probably expect something language-like to come out of that process. But I don\u2019t know really, what I\u2019m looking for yet. I\u2019m more looking into data structures and what the essence of structure is and how much more those domain-specific data structures mentioned above can be generalized.\n\nI know that this sounds weird, and frankly probably not very promising, perhaps esoteric. Hence my attempts to explain where I\u2019m coming from in these blog posts. I hope I can get everyone who\u2019s interested enough to a place where they no longer think it\u2019s weird, and then we can start discussing how promising it is.",
        "user": "U5STGTB3J",
        "ts": "1577315613.201200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Surprisingly Turing-Complete",
                "title_link": "https://www.gwern.net/Turing-complete",
                "text": "A catalogue of software constructs, languages, or APIs which are unexpectedly Turing-complete; implications for security and reliability",
                "fallback": "Surprisingly Turing-Complete",
                "image_url": "https://www.gwern.net/images/logo-whitebg-large-border.png",
                "from_url": "https://www.gwern.net/Turing-complete",
                "image_width": 221,
                "image_height": 250,
                "image_bytes": 67499,
                "service_icon": "https://www.gwern.net/./static/img/favicon.png",
                "service_name": "gwern.net",
                "id": 1,
                "original_url": "https://www.gwern.net/Turing-complete"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Yv+ZV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": " Ok, so my approach is kind of the opposite to \u201cgeneral first and see how it goes\u201d, because I think starting with a goal of building something generic (as in Turing-complete) puts you directly into programming language land. Nothing wrong with that! But everybody is doing that already."
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "I like to look at large, creative applications for music production, video editing, or visual design as examples for creative tools that enable people to create quite a large variety of creative content. These tools might have grown surprisingly or accidentally or even intentionally turing-complete over time (see <"
                            },
                            {
                                "type": "link",
                                "url": "https://www.gwern.net/Turing-complete",
                                "text": "https://www.gwern.net/Turing-complete"
                            },
                            {
                                "type": "text",
                                "text": "> for context), but they started out with a focus of how to manipulate domain-specific data structures visually. That\u2019s what I find interesting and promising. I\u2019m not opposed to ending up with something generic and powerful and Turing-complete, but I\u2019d like to get there organically and not mandate it from the start."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "I also feel like setting it as a goal from the beginning frames the whole problem as \u201cjust\u201d inventing another (visual?) programming language \u2014 and I find that limiting."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "When you ask about DSL, did it even occur to you that I might not even look for a language? Most of us here would probably expect something language-like to come out of that process. But I don\u2019t know really, what I\u2019m looking for yet. I\u2019m more looking into data structures and what the essence of structure is and how much more those domain-specific data structures mentioned above can be generalized."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "I know that this sounds weird, and frankly probably not very promising, perhaps esoteric. Hence my attempts to explain where I\u2019m coming from in these blog posts. I hope I can get everyone who\u2019s interested enough to a place where they no longer think it\u2019s weird, and then we can start discussing how promising it is."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577227635.106800",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "8b45e713-6941-4b51-b46a-e4cca2e9e53f",
        "type": "message",
        "text": "OK, well then it's a surprisingly aligned list of preferences for those that, like myself, are in fact building general purpose (visual) programming systems (languages/architectures)!\n\nThanks for taking the trouble to rebuild your response - was it easy enough (with some Christmas Spirit inside you!) and did it turn out better than the original? :smile:",
        "user": "UE6EFEPTQ",
        "ts": "1577317957.201900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1577317978.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Lc2x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "OK, well then it's a surprisingly aligned list of preferences for those that, like myself, are in fact building general purpose (visual) programming systems (languages/architectures)!\n\nThanks for taking the trouble to rebuild your response - was it easy enough (with some Christmas Spirit inside you!) and did it turn out better than the original? "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577227635.106800",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "825ff52f-fd91-45dc-8f3c-f5e2920e41a7",
        "type": "message",
        "text": "Actually, I have written in my own notes that the vast bulk of value in my approach will come from: enabling people to build data structures, link them up, and use or configure pre-set behaviours and write simple (non-TC) transformations..",
        "user": "UE6EFEPTQ",
        "ts": "1577318255.202200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qVf8M",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Actually, I have written in my own notes that the vast bulk of value in my approach will come from: enabling people to build data structures, link them up, and use or configure pre-set behaviours and write simple (non-TC) transformations.."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577227635.106800",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "96346882-2C0A-46CF-AABC-600F853C0FDD",
        "type": "message",
        "text": "<@UE6EFEPTQ> Fully agree \u2014 I said it before here somewhere that most if not all computation is just transforming data. If we can figure out easier ways to let non-programmers transform their own data, or better yet let the computer do transformations for them automatically where necessary, I think we will have solved a big part of the future of programming puzzle.",
        "user": "U5STGTB3J",
        "ts": "1577349917.206000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KVKLA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UE6EFEPTQ"
                            },
                            {
                                "type": "text",
                                "text": " Fully agree \u2014 I said it before here somewhere that most if not all computation is just transforming data. If we can figure out easier ways to let non-programmers transform their own data, or better yet let the computer do transformations for them automatically where necessary, I think we will have solved a big part of the future of programming puzzle."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577227635.106800",
        "parent_user_id": "UE6EFEPTQ"
    },
    {
        "client_msg_id": "1e7f2b09-030c-4424-8ca4-0296e8ee5b79",
        "type": "message",
        "text": "<@U8A5MS6R1> I'm sure you're aware of it but this breakdown of composition that you describe between the OS and programming languages is exactly why Smalltalk says there shouldn't be an operating system :slightly_smiling_face:",
        "user": "UHZUS56SV",
        "ts": "1577368949.206300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BrP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U8A5MS6R1"
                            },
                            {
                                "type": "text",
                                "text": " I'm sure you're aware of it but this breakdown of composition that you describe between the OS and programming languages is exactly why Smalltalk says there shouldn't be an operating system "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "b5c2637d-6188-4052-81fc-7a8158a283c4",
        "type": "message",
        "text": "Regarding the unix pipe and <@U5STGTB3J>'s question. I see this as very similar to the Lisp cons cell. It is the smallest interface we could think of in order to build text and data processing systems. I think it is succesful because it allows your system to grow quickly (you can easily reuse existing parts to make new parts), while preventing an explosion of special cases (anarchy). I think it ties to the general problem of communication in systems. How to design the protocols between the parts to allow for growth while preventing failures. It is really a balancing act between freedom and control.",
        "user": "UHZUS56SV",
        "ts": "1577369308.206500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ywNbX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Regarding the unix pipe and "
                            },
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": "'s question. I see this as very similar to the Lisp cons cell. It is the smallest interface we could think of in order to build text and data processing systems. I think it is succesful because it allows your system to grow quickly (you can easily reuse existing parts to make new parts), while preventing an explosion of special cases (anarchy). I think it ties to the general problem of communication in systems. How to design the protocols between the parts to allow for growth while preventing failures. It is really a balancing act between freedom and control."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "9e0f658f-b310-49c0-8513-d680c042a08d",
        "type": "message",
        "text": "I agree that those are good questions wrt languages, but if the goal to empower users, is it safe to assume the ideal artifact that serves that purpose will take the form of a language?\n\nIf you were to ask a user how they\u2019d like to interact with a computer to accomplish their goals (short of some magic AI genie), would we expect them to tell us they want to write something we\u2019d recognize as code?\n\nFor example, are spreadsheets or HyperCard \u201clanguages\u201d?",
        "user": "ULM3U6275",
        "ts": "1577370250.206700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1577372961.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NvhI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree that those are good questions wrt languages, but if the goal to empower users, is it safe to assume the ideal artifact that serves that purpose will take the form of a language?\n\nIf you were to ask a user how they\u2019d like to interact with a computer to accomplish their goals (short of some magic AI genie), would we expect them to tell us they want to write something we\u2019d recognize as code?"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "For example, are spreadsheets or HyperCard \u201clanguages\u201d?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577254484.117800",
        "parent_user_id": "UEQ6M68H0",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U8A5MS6R1",
                    "UJ6LDMMN0",
                    "UFLN9JFRT",
                    "UHWC9PXBL"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "BA30196C-6278-4083-BCD4-521CA861D5D6",
        "type": "message",
        "text": "Great to see that others are building eve inspired languages. I stand in awe of so many here! ",
        "user": "UFLN9JFRT",
        "ts": "1577374027.208400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f/vpZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Great to see that others are building eve inspired languages. I stand in awe of so many here! "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "b1db9f82-0869-4d37-bd79-f41e6e388ab6",
        "type": "message",
        "text": "<@UHZUS56SV> - yes! I wrote about the different perspective brought by Smalltalk in the following (chronologically preceeding, but logically following) post - Systems, not Programs. <https://shalabh.com/programmable-systems/systems-not-programs.html>. I feel we kind of accept many things as natural but they are just emergent patterns from deliberate design choices that became ubiquitous. I wonder if someone has worked on a taxonomy of composition models in computing - that would be interesting to read.",
        "user": "U8A5MS6R1",
        "ts": "1577384959.208800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": " Systems, not Programs  ",
                "title_link": "https://shalabh.com/programmable-systems/systems-not-programs.html",
                "text": "We need programming, but do we need the program?",
                "fallback": " Systems, not Programs  ",
                "from_url": "https://shalabh.com/programmable-systems/systems-not-programs.html",
                "service_name": "shalabh.com",
                "id": 1,
                "original_url": "https://shalabh.com/programmable-systems/systems-not-programs.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JjM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHZUS56SV"
                            },
                            {
                                "type": "text",
                                "text": " - yes! I wrote about the different perspective brought by Smalltalk in the following (chronologically preceeding, but logically following) post - Systems, not Programs. "
                            },
                            {
                                "type": "link",
                                "url": "https://shalabh.com/programmable-systems/systems-not-programs.html"
                            },
                            {
                                "type": "text",
                                "text": ". I feel we kind of accept many things as natural but they are just emergent patterns from deliberate design choices that became ubiquitous. I wonder if someone has worked on a taxonomy of composition models in computing - that would be interesting to read."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577178650.059300",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "d29a2492-1183-4395-b7fd-21dba8c74769",
        "type": "message",
        "text": "&gt;  the ideal artifact that serves that purpose will take the form of a language?\nExcellent question! The current programming world view takes as its base assumption a workflow where you 'write the program as a ~text language' and then 'submit it' to the computer to run. Can this workflow itself be twisted around to something else, rather than just the language piece of this jigsaw puzzle replaced with a different language piece? Tomas Petricek's write-up talks about this also I think: <http://tomasp.net/blog/2018/programming-interaction/>",
        "user": "U8A5MS6R1",
        "ts": "1577385432.209100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Programming as interaction: A new perspective for programming language research",
                "title_link": "http://tomasp.net/blog/2018/programming-interaction/",
                "text": "In programming research, we say a lot about programs and languages, but very little about the actual process of programming. One simple trick that will make programming language research significantly more interesting is to think about programs not as expressions, but as a result of a sequence of interactions that create it. This includes usual things such as writing code and refactoring, but if we also include, say, running a part of the program, we become capable of saying many more interesting things and building new powerful programming tools.",
                "fallback": "Programming as interaction: A new perspective for programming language research",
                "thumb_url": "http://tomasp.net/blog/2018/programming-interaction/kent-sq.png",
                "from_url": "http://tomasp.net/blog/2018/programming-interaction/",
                "thumb_width": 400,
                "thumb_height": 400,
                "service_icon": "http://tomasp.net/img/favicon-big.png",
                "service_name": "tomasp.net",
                "id": 1,
                "original_url": "http://tomasp.net/blog/2018/programming-interaction/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5Vv",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " the ideal artifact that serves that purpose will take the form of a language?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Excellent question! The current programming world view takes as its base assumption a workflow where you 'write the program as a ~text language' and then 'submit it' to the computer to run. Can this workflow itself be twisted around to something else, rather than just the language piece of this jigsaw puzzle replaced with a different language piece? Tomas Petricek's write-up talks about this also I think: "
                            },
                            {
                                "type": "link",
                                "url": "http://tomasp.net/blog/2018/programming-interaction/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577254484.117800",
        "parent_user_id": "UEQ6M68H0",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "UFLN9JFRT",
                    "UBSMEUXAA"
                ],
                "count": 3
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7b1623c6-4cfb-401a-a8b5-b4ef4147c2cd",
        "type": "message",
        "text": "I'm also interested in reading it! But I can't promise any high quality review feedback.",
        "user": "U8A5MS6R1",
        "ts": "1577386103.209400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0Su",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm also interested in reading it! But I can't promise any high quality review feedback."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1577307438.157000",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]