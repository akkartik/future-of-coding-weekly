[
    {
        "client_msg_id": "EA251E83-958B-4E8E-874D-0822D1183296",
        "type": "message",
        "text": "All the land is your Dynabook",
        "user": "UFEQUBNNT",
        "ts": "1575245379.336600",
        "team": "T5TCAFTA9",
        "thread_ts": "1575213645.328100",
        "parent_user_id": "UMPQ9A65N"
    },
    {
        "client_msg_id": "b92a2aa2-0da6-4ff6-9f35-7c3db92aa1cf",
        "type": "message",
        "text": "All your base are belong to us",
        "user": "UAVCC2X70",
        "ts": "1575249885.336800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L7VvI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "All your base are belong to us"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575213645.328100",
        "parent_user_id": "UMPQ9A65N"
    },
    {
        "client_msg_id": "59314e30-bf0b-43d5-a5e0-1f1e1e637504",
        "type": "message",
        "text": "<@UEBG0NPDK> What does \u201ccompile away the database\u201d mean? Do you mean that programming languages should have a built in database that helps handle state in a consistent manner?\n\nI thought the reason you had blocks for Eve 0.2-0.4 was because people had a hard time with scope. I can see how just blocks makes structure hard, because there didn\u2019t seem to be a way to compose them together.\n\nI would have thought you can use the iterative nature of eve to build workflows, where each stage are the rules, and the result of one stage are just new facts in the database that feeds into the next stage. Does that not work well in practice?\n\nSo in the other computational model, you introduced a state machine to help track state, and all you have to do is state which actions should transition to what other state? In my imagination, it sounds a little like how Elm has the action/reducers that tell the program how to map the state machine from one state to another. Why invert it, so statemachines have dataflow embeded in them? Unless the dataflow has a loop/iteration in it, to help track complex state, I\u2019m not able to make the leap why. What does that design buy you?",
        "user": "UNLS33M61",
        "ts": "1575251398.337000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o0p+2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " What does \u201ccompile away the database\u201d mean? Do you mean that programming languages should have a built in database that helps handle state in a consistent manner?\n\nI thought the reason you had blocks for Eve 0.2-0.4 was because people had a hard time with scope. I can see how just blocks makes structure hard, because there didn\u2019t seem to be a way to compose them together.\n\nI would have thought you can use the iterative nature of eve to build workflows, where each stage are the rules, and the result of one stage are just new facts in the database that feeds into the next stage. Does that not work well in practice?\n\nSo in the other computational model, you introduced a state machine to help track state, and all you have to do is state which actions should transition to what other state? In my imagination, it sounds a little like how Elm has the action/reducers that tell the program how to map the state machine from one state to another. Why invert it, so statemachines have dataflow embeded in them? Unless the dataflow has a loop/iteration in it, to help track complex state, I\u2019m not able to make the leap why. What does that design buy you?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574929029.255500",
        "parent_user_id": "UNLS33M61"
    },
    {
        "client_msg_id": "7057b155-926c-4993-bea9-afae2bb22137",
        "type": "message",
        "text": "Angelo Pesce on hackability should appeal to many here: <http://c0de517e.blogspot.com/2019/12/is-true-hacking-dead-what-we-lost.html>",
        "user": "UHDQ62M4P",
        "ts": "1575257959.339100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Is true hacking dead? What we lost.",
                "title_link": "http://c0de517e.blogspot.com/2019/12/is-true-hacking-dead-what-we-lost.html",
                "text": "Realtime rendering and videogame programming mostly, but I love computer science and visuals in all their forms. This is a notepad of my ideas.",
                "fallback": "Is true hacking dead? What we lost.",
                "image_url": "https://1.bp.blogspot.com/-XihZKqg3Z3Y/XeR7_-4sRHI/AAAAAAAAB5c/mG4HHeA09y4dYPBo2H7WZpBhOciQZY1XgCLcBGAsYHQ/w1200-h630-p-k-no-nu/hqdefault.jpg",
                "from_url": "http://c0de517e.blogspot.com/2019/12/is-true-hacking-dead-what-we-lost.html",
                "image_width": 476,
                "image_height": 250,
                "image_bytes": 22792,
                "service_icon": "http://c0de517e.blogspot.com/favicon.ico",
                "service_name": "c0de517e.blogspot.com",
                "id": 1,
                "original_url": "http://c0de517e.blogspot.com/2019/12/is-true-hacking-dead-what-we-lost.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y98p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Angelo Pesce on hackability should appeal to many here: "
                            },
                            {
                                "type": "link",
                                "url": "http://c0de517e.blogspot.com/2019/12/is-true-hacking-dead-what-we-lost.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575257959.339100",
        "reply_count": 20,
        "reply_users_count": 8,
        "latest_reply": "1575535479.039100",
        "reply_users": [
            "UEQ6M68H0",
            "UAVCC2X70",
            "U5STGTB3J",
            "UMVH31ML3",
            "UJN1TAYEQ",
            "UJBAJNFLK",
            "UHDQ62M4P",
            "UA14TGLTC"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UJ6LDMMN0",
                    "UBSMEUXAA",
                    "UJBAJNFLK",
                    "UML4ZEKDK"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "84c114c8-bc63-4555-866e-598e19a5c45f",
        "type": "message",
        "text": "This is a very nice essay. I think it is very clear that the current development stacks are ridiculously complex. Unfortunately the world rejected the work of Prof. Wirth, whose Pascal/Modula-2/Oberon progression was about making it possible for a small team to build and understand an entire operating system. I was one of perhaps a few hundred people working in Modula-2 for 20 years; the vast majority of American developers were wedded to C, because of the MS juggernaut. Even Apple eventually caved and switched out of their Pascal dialect into Objective-C. Simplicity, and understandability are not possible when you have a giant pile of dependencies in almost every project.",
        "user": "UEQ6M68H0",
        "ts": "1575260081.339800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0O/+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is a very nice essay. I think it is very clear that the current development stacks are ridiculously complex. Unfortunately the world rejected the work of Prof. Wirth, whose Pascal/Modula-2/Oberon progression was about making it possible for a small team to build and understand an entire operating system. I was one of perhaps a few hundred people working in Modula-2 for 20 years; the vast majority of American developers were wedded to C, because of the MS juggernaut. Even Apple eventually caved and switched out of their Pascal dialect into Objective-C. Simplicity, and understandability are not possible when you have a giant pile of dependencies in almost every project."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575257959.339100",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "b0fe9673-2169-4226-8fba-e800a424cb27",
        "type": "message",
        "text": "I suppose the short version is that architecture is not about building materials (or abstractions) and structure and scaffolding and framework etc., but about the human use / purpose that the thing facilitates. Sure, it involves those things, but _as a means to an end_. The problem with both software and physical architecture in practice, is that they've made it _about_ the materials and scaffolding.\n\nMaybe that's why it's hard to see the relevance, because programming abstractions \u2260 physical building materials, and the industry (and developers) generally struggle to see past that level of understanding.\n\nSo the relevance is that software is complex and large because its creators are obsessed with the wrong stuff. Bjarke's work demonstrates how much better things become when the thing being built is shaped _by_ the purpose it serves (rather than (perversely) the other way around) -- which not just reduces complexity/cost/etc., but also makes it vastly easier to serve that purpose much better.\n\n<https://www.lexico.com/en/definition/perverse|https://www.lexico.com/en/definition/perverse>",
        "user": "UAVCC2X70",
        "ts": "1575261456.340300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1575314835.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vb3vQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I suppose the short version is that architecture is not about building materials (or abstractions) and structure and scaffolding and framework etc., but about the human use / purpose that the thing facilitates. Sure, it involves those things, but "
                            },
                            {
                                "type": "text",
                                "text": "as a means to an end",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". The problem with both software and physical architecture in practice, is that they've made it "
                            },
                            {
                                "type": "text",
                                "text": "about",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the materials and scaffolding.\n\nMaybe that's why it's hard to see the relevance, because programming abstractions \u2260 physical building materials, and the industry (and developers) generally struggle to see past that level of understanding.\n\nSo the relevance is that software is complex and large because its creators are obsessed with the wrong stuff. Bjarke's work demonstrates how much better things become when the thing being built is shaped "
                            },
                            {
                                "type": "text",
                                "text": "by",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the purpose it serves (rather than (perversely) the other way around) -- which not just reduces complexity/cost/etc., but also makes it vastly easier to serve that purpose much better.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.lexico.com/en/definition/perverse",
                                "text": "https://www.lexico.com/en/definition/perverse"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574787700.220500",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "269faa79-70f0-4251-83d9-a3e8d8376c0e",
        "type": "message",
        "text": "&lt;cough&gt;NPM&lt;/cough&gt;",
        "user": "UAVCC2X70",
        "ts": "1575264808.341000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ERJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "<cough>NPM</cough>"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575257959.339100",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "D93B22CB-0FD5-4782-B4AE-82E24A9C0733",
        "type": "message",
        "text": "We\u2019ve discussed the complexity aspects here many times, however I\u2019m somewhat intrigued by his take on open source:\n\n&gt;Whatever the causes, we have software and hardware systems that strive to be entirely open, yet time and again are closed ones that are more accessible in practice, that drive social revolutions. Linux didn't change the desktop, nor the way software is made. \n\nI\u2019ve always felt weird about open source, which is taken for granted as a good thing by many because of its openness. But it feels messy and poorly designed in most cases, because only few open source projects have strong opinions and willingness to leave out things (which I think is a core part of good design / managing complexity). The open source projects that do are either rather insignificant code dumps from single individuals or projects backed by massive companies who\u2019ve imprinted their strategy on them. \n\n&gt;And ironically, probably by utter coincidence, but ironically indeed, all the new power brokers of this era, the Facebooks and Amazons, the Googles and Twitters and so on, fully embrace opensource stacks, hundreds of millions lines of codes powering the AIs, the networks of today. \n&gt;The new IBMs do know very well that lines of code are for the most part worthless, but people and communities aren't, so it's a no brainer to opensource more if in change one gets more people involved in a project, and more engineers hired...\n\nIt almost feels like there is a inherent systemic force that makes open source projects absorb complexity and therefore _less_ valuable in the eyes of big corporations who seem to be more interested in their appeal to an audience that attracts talent and free or at least cheap labor. If they really cared (and for those parts of the code they really do), they\u2019d properly hire engineers instead.\n\n&gt;Perhaps we didn't truly graduate from our a-social tendencies, perhaps we're true to form in thinking that the machine and technology are more interesting than people, and groups, and culture...\n\nThis is also a sentence packed with insight worth a whole discussion on its own. Are we really contributing anything valuable if we all individually dump our code on GitHub? And if we all do just this with our own projects instead of looking how we can contribute to other people\u2019s projects?",
        "user": "U5STGTB3J",
        "ts": "1575276098.358900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1575276156.000000"
        },
        "thread_ts": "1575257959.339100",
        "parent_user_id": "UHDQ62M4P",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U7C7B75R6",
                    "UA14TGLTC",
                    "UFEQUBNNT",
                    "UJBAJNFLK"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "fb5c687d-5135-48e4-b313-f5713a28f5e0",
        "type": "message",
        "text": "in the spirit of wirth: <https://www.nand2tetris.org/>",
        "user": "UBN9AFS0N",
        "ts": "1575281993.359400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g2g",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "in the spirit of wirth: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.nand2tetris.org/"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "60b86bfb-1392-4edd-b0b0-75c8120b841c",
        "type": "message",
        "text": "I think the things became much complex than earlier days. That\u2019s how it\u2019s more difficult to tinker with entire system. You still can do it with parts, like web-development for example. But to do something completely from hardware to software is not possible because amount of knowledge is too huge",
        "user": "UMVH31ML3",
        "ts": "1575292750.359600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EaV7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think the things became much complex than earlier days. That\u2019s how it\u2019s more difficult to tinker with entire system. You still can do it with parts, like web-development for example. But to do something completely from hardware to software is not possible because amount of knowledge is too huge"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1575257959.339100",
        "parent_user_id": "UHDQ62M4P"
    },
    {
        "client_msg_id": "f53e2c79-1ce5-4426-a02d-638ffa18734f",
        "type": "message",
        "text": "> I think it's probably a dead-end to have a system that is either *only* declarative (Eve) or *only*\n>  imperative. You need to be able to flow between the two so that things that are most easily expressed in one or the other can live together.\nI agree. This is something I've tried to do in Curv, and I'm actually writing a paper on this exact topic.",
        "user": "UJN1TAYEQ",
        "ts": "1575298985.359900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1575299216.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sA2",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think it's probably a dead-end to have a system that is either "
                            },
                            {
                                "type": "text",
                                "text": "only",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " declarative (Eve) or "
                            },
                            {
                                "type": "text",
                                "text": "only",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n imperative. You need to be able to flow between the two so that things that are most easily expressed in one or the other can live together."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I agree. This is something I've tried to do in Curv, and I'm actually writing a paper on this exact topic."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574929029.255500",
        "parent_user_id": "UNLS33M61"
    }
]