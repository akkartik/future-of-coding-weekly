[
    {
        "client_msg_id": "87b5d05d-19d1-446e-a4cf-8bc9cc1ac81c",
        "type": "message",
        "text": "I\u2019ve been working on a tool to inline Python APIs. I tweeted a short demo of it working: <https://twitter.com/wcrichton/status/1207166522545721344>",
        "user": "UFB8STN7K",
        "ts": "1576797860.009600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/wcrichton|@wcrichton>: pesky abstractions <https://pbs.twimg.com/ext_tw_video_thumb/1207166261177700352/pu/img/aui_s2uFPRVG3Wyf.jpg>",
                "ts": 1576645901,
                "author_name": "Will Crichton",
                "author_link": "https://twitter.com/wcrichton/status/1207166522545721344",
                "author_icon": "https://pbs.twimg.com/profile_images/1127803031708246016/gUAyYE2i_normal.png",
                "author_subname": "@wcrichton",
                "text": "pesky abstractions",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/wcrichton/status/1207166522545721344",
                "thumb_url": "https://pbs.twimg.com/ext_tw_video_thumb/1207166261177700352/pu/img/aui_s2uFPRVG3Wyf.jpg",
                "thumb_width": 1152,
                "thumb_height": 720,
                "video_html_width": 1152,
                "video_html_height": 720,
                "video_html": "<video controls poster=\"https://pbs.twimg.com/ext_tw_video_thumb/1207166261177700352/pu/img/aui_s2uFPRVG3Wyf.jpg\" width=\"1152\" height=\"720\"><source type=\"video/mp4\" src=\"https://video.twimg.com/ext_tw_video/1207166261177700352/pu/vid/1152x720/xzwXjS2KClvb5hnd.mp4?tag=10\"></video>",
                "id": 1,
                "original_url": "https://twitter.com/wcrichton/status/1207166522545721344",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fuz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019ve been working on a tool to inline Python APIs. I tweeted a short demo of it working: "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/wcrichton/status/1207166522545721344"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576797860.009600",
        "reply_count": 5,
        "reply_users_count": 3,
        "latest_reply": "1577134417.058100",
        "reply_users": [
            "UPVBV34EL",
            "UBKNXPBAB",
            "UFB8STN7K"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "star-struck",
                "users": [
                    "UPU0YJ1CM",
                    "UFQQ3P867",
                    "UP7SQ8KT3"
                ],
                "count": 3
            },
            {
                "name": "+1",
                "users": [
                    "UD31LGQKB",
                    "UJ6LDMMN0"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "f07eb12a-a5d7-4462-b48f-86d9a73e7344",
        "type": "message",
        "text": "Curious if anyone has seen a tool like this? Or if anyone has wanted such a tool for a problem you\u2019ve had before.",
        "user": "UFB8STN7K",
        "ts": "1576797890.010300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/g6R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Curious if anyone has seen a tool like this? Or if anyone has wanted such a tool for a problem you\u2019ve had before."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576797890.010300",
        "reply_count": 10,
        "reply_users_count": 3,
        "latest_reply": "1576940539.044800",
        "reply_users": [
            "UCUSW7WVD",
            "UPU0YJ1CM",
            "UFB8STN7K"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "e0cf2c9c-9505-43dc-b2de-3edf0bb0beff",
        "type": "message",
        "text": "just finished watching it, I was thinking about two experiments you can run to get feedback from your syntax: 1) ask non programmers to interpret out loud the meaning of a small snippet of code using your visual representation and following their sight with the mouse, so you can follow where they are looking at. See if they get the right sequence (if they follow the steps in the actual order), if they jump a lot around, if they guess what the code does.",
        "user": "UBN9AFS0N",
        "ts": "1576798166.010400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wco",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "just finished watching it, I was thinking about two experiments you can run to get feedback from your syntax: 1) ask non programmers to interpret out loud the meaning of a small snippet of code using your visual representation and following their sight with the mouse, so you can follow where they are looking at. See if they get the right sequence (if they follow the steps in the actual order), if they jump a lot around, if they guess what the code does."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576657342.007300",
        "parent_user_id": "UP3FH4CLU",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "a619f088-45b6-4295-a256-66f0bdf7524b",
        "type": "message",
        "text": "2) do the same with programmers, see if they get the program right, the evaluation order, what's inside of what, the flow etc.",
        "user": "UBN9AFS0N",
        "ts": "1576798189.010600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6le",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "2) do the same with programmers, see if they get the program right, the evaluation order, what's inside of what, the flow etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576657342.007300",
        "parent_user_id": "UP3FH4CLU"
    },
    {
        "client_msg_id": "d2763db7-b409-4e5e-9735-64cf27a0b885",
        "type": "message",
        "text": "<@UBN9AFS0N> \u2014\u00a0How much instruction should people have before being asked to do that? Because it feels like a bit of an unfair thing to do with someone who has been given no information about what to make of the syntax... but those sorts of questions feel like they'd be answered by the most basic of introduction.\n\nIn other words, I'm not sure \"guessability\" is a valuable quality for what will ultimately be a frontend to _Haskell!_",
        "user": "UC2A2ARPT",
        "ts": "1576798452.010800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+kv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " \u2014\u00a0How much instruction should people have before being asked to do that? Because it feels like a bit of an unfair thing to do with someone who has been given no information about what to make of the syntax... but those sorts of questions feel like they'd be answered by the most basic of introduction.\n\nIn other words, I'm not sure \"guessability\" is a valuable quality for what will ultimately be a frontend to"
                            },
                            {
                                "type": "text",
                                "text": " Haskell!",
                                "style": {
                                    "italic": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576657342.007300",
        "parent_user_id": "UP3FH4CLU"
    },
    {
        "client_msg_id": "0dafdac3-85b5-428a-930e-08f3d3246d0c",
        "type": "message",
        "text": "Though if someone has been taught the (eg) sequence rules, and they still struggle, that's probably valuable feedback. Hmm.",
        "user": "UC2A2ARPT",
        "ts": "1576798597.011100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ilfS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Though if someone has been taught the (eg) sequence rules, and they still struggle, that's probably valuable feedback. Hmm."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576657342.007300",
        "parent_user_id": "UP3FH4CLU"
    },
    {
        "client_msg_id": "2e3a6ac3-9054-4fae-b32d-e9e4af05acb4",
        "type": "message",
        "text": "The initial stated goal is \"Computing for everyone\", and it may not be everyone, but a large group won't follow instructions or documentations for more than 5 minutes (I can tell stories of that :smile:). I saw a contradiction between the stated goal and the syntax being for haskell, but it's a nice experiment to know if a change can make it more approachable.",
        "user": "UBN9AFS0N",
        "ts": "1576799029.011300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZCk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The initial stated goal is \"Computing for everyone\", and it may not be everyone, but a large group won't follow instructions or documentations for more than 5 minutes (I can tell stories of that "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            },
                            {
                                "type": "text",
                                "text": "). I saw a contradiction between the stated goal and the syntax being for haskell, but it's a nice experiment to know if a change can make it more approachable."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576657342.007300",
        "parent_user_id": "UP3FH4CLU"
    },
    {
        "client_msg_id": "d5bbf928-09f8-4460-a2f8-58da45b5cbec",
        "type": "message",
        "text": "regarding instructions.. maybe the instructor can do the activity a couple of times first with the user following it and then asked to try it themselves with a different problem (and maybe later with the problems the instructor explained earlier)",
        "user": "UBN9AFS0N",
        "ts": "1576799093.011500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "C/+Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "regarding instructions.. maybe the instructor can do the activity a couple of times first with the user following it and then asked to try it themselves with a different problem (and maybe later with the problems the instructor explained earlier)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576657342.007300",
        "parent_user_id": "UP3FH4CLU"
    },
    {
        "client_msg_id": "f36d5d85-8c6f-4021-ac0d-12c9ce329569",
        "type": "message",
        "text": "I don't think a written guide would be followed or assimilated in a short amount of time that nice helpful people are willing to give for this sort of experiments :slightly_smiling_face:",
        "user": "UBN9AFS0N",
        "ts": "1576799166.011700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2T3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't think a written guide would be followed or assimilated in a short amount of time that nice helpful people are willing to give for this sort of experiments "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576657342.007300",
        "parent_user_id": "UP3FH4CLU"
    },
    {
        "client_msg_id": "f8727e93-8ae8-4f9d-a4c4-5340fa833659",
        "type": "message",
        "text": "<@UD3AK9JRF> I like when the type system provides a consistent sense of abstraction, lets you uniformly ignore some detail.  For instance, with a Hindley-Milner\u00a0type system, you can talk about *the principal* type of an expression whereas with dependent types, an expression's type will model more or less detail depending on what you want to know.",
        "user": "UA14TGLTC",
        "ts": "1576806861.014000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yc0s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UD3AK9JRF"
                            },
                            {
                                "type": "text",
                                "text": " I like when the type system provides a consistent sense of abstraction, lets you uniformly ignore some detail.  For instance, with a Hindley-Milner\u00a0type system, you can talk about "
                            },
                            {
                                "type": "text",
                                "text": "the principal ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "type of an expression whereas with dependent types, an expression's type will model more or less detail depending on what you want to know."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "cb36294c-bbda-4a1c-a08a-bbf2ceb07f78",
        "type": "message",
        "text": "Static type systems are a tar pit. If the type system is simple, tractable and easy to understand (eg, if it is simple enough to support the principal type property), then it isn't powerful enough. You can't abstract over an arbitrary expression, pull out variables and make them into function parameters. If you try to make the type system powerful enough, then you get something like Haskell, where 99% of the complexity of the language is in understanding the type system (including the vast array of GHC type system extensions that are required by various libraries). Your type system evolves to have \"shadow domains\" (<http://gbracha.blogspot.com/2014/09/a-domain-of-shadows.html|gbracha.blogspot.com/2014/09/a-domain-of-shadows.html>) where all of the features of the regular language are duplicated in the type system. For example, you have regular integers, and then you have type-level integers, where arithmetic operations are performed by the type system.\n\nI know that some people want all that complexity, because the end goal is dependent types and program verification. For the end user programming that interests me, strong typing is a disease that leads to runaway language complexity. Dynamic typing is the cure.",
        "user": "UJN1TAYEQ",
        "ts": "1576808603.014200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJN1TAYEQ",
            "ts": "1576854693.000000"
        },
        "attachments": [
            {
                "title": "A DOMain of Shadows",
                "title_link": "https://gbracha.blogspot.com/2014/09/a-domain-of-shadows.html",
                "text": "One of the advantages of an internal DSL\u00a0 over an external one is that you can leverage the full power of a general purpose programming lan...",
                "fallback": "A DOMain of Shadows",
                "from_url": "https://gbracha.blogspot.com/2014/09/a-domain-of-shadows.html",
                "service_icon": "https://gbracha.blogspot.com/favicon.ico",
                "service_name": "gbracha.blogspot.com",
                "id": 1,
                "original_url": "https://gbracha.blogspot.com/2014/09/a-domain-of-shadows.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LIf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Static type systems are a tar pit. If the type system is simple, tractable and easy to understand (eg, if it is simple enough to support the principal type property), then it isn't powerful enough. You can't abstract over an arbitrary expression, pull out variables and make them into function parameters. If you try to make the type system powerful enough, then you get something like Haskell, where 99% of the complexity of the language is in understanding the type system (including the vast array of GHC type system extensions that are required by various libraries). Your type system evolves to have \"shadow domains\" ("
                            },
                            {
                                "type": "link",
                                "url": "http://gbracha.blogspot.com/2014/09/a-domain-of-shadows.html",
                                "text": "gbracha.blogspot.com/2014/09/a-domain-of-shadows.html"
                            },
                            {
                                "type": "text",
                                "text": ") where all of the features of the regular language are duplicated in the type system. For example, you have regular integers, and then you have type-level integers, where arithmetic operations are performed by the type system.\n\nI know that some people want all that complexity, because the end goal is dependent types and program verification. For the end user programming that interests me, strong typing is a disease that leads to runaway language complexity. Dynamic typing is the cure."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "0140cdc2-b8b0-47db-86cc-8a50c1d2835d",
        "type": "message",
        "text": "I want to imagine what takes the place of types in a logic programming world: how they\u2019re developed, how they coordinate work among programmers, and so forth\u2014assuming they\u2019re even formalized. My sense is that there haven\u2019t been enough real world programs of sufficient scope for best practices to develop. Maybe I\u2019m wrong. There might be some intuitions in the likes of clojure.spec.",
        "user": "UD3AK9JRF",
        "ts": "1576815324.014600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UD3AK9JRF",
            "ts": "1576815690.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b35J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I want to imagine what takes the place of types in a logic programming world: how they\u2019re developed, how they coordinate work among programmers, and so forth\u2014assuming they\u2019re even formalized. My sense is that there haven\u2019t been enough real world programs of sufficient scope for best practices to develop. Maybe I\u2019m wrong. There might be some intuitions in the likes of clojure.spec."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576661100.008400",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "a571bd3f-fa32-4b03-be89-f1f7a9d2302b",
        "type": "message",
        "text": "OMG this is amazing :heart: :heart:",
        "user": "UCUSW7WVD",
        "ts": "1576826615.015200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WIuk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "OMG this is amazing "
                            },
                            {
                                "type": "emoji",
                                "name": "heart"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "heart"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576797890.010300",
        "parent_user_id": "UFB8STN7K",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UFB8STN7K"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "5cb58e5c-1b15-4444-b9f3-b45c1d1f7d51",
        "type": "message",
        "text": "<@UBKNXPBAB> Yes, the end goal is to have a programming language that is both powerful and easy for beginners to get started with. The hypothesis of the project is that visual programming languages are easy, but not powerful. By powerful, I mean a language can be used to solve large and complex problems. As a stepping stone, the immediate goal of the project is to create a visual programming language (VPL) that's powerful, but not necessarily easy for beginners. After demonstrating a powerful VPL, the next step would be a VPL that's both easy for beginners _and_ powerful. Since the short term goal is just to make a powerful VPL, Glance is currently more targeted at experienced programmers, so while it would be nice to have syntax that's easy for beginners, that's not a priority.\n\nI believe there's already a lot of evidence that VPLs are good for beginners, so right now the Glance project is focused on the question of whether powerful VPLs are possible, and not whether visual programing is better than textual programming. But I do think a write-up of the potential advantages and trade-offs of visual programming would help guide the design and clarify my thinking.\n\n<@UC2A2ARPT> I misspoke in the video. If branches are evaluated top to bottom regardless of the triangle's position.\n\n<@UBN9AFS0N> This sounds similar to the syntax studies used to develop the evidence-oriented programming language Quorum (<https://quorumlanguage.com/evidence.html>, Study PDF: <https://www.vidarholen.net/~vidar/An_Empirical_Investigation_into_Programming_Language_Syntax.pdf>). Following mouse position might be hard to interpret since code is not read linearly (<http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.98.1585&amp;rep=rep1&amp;type=pdf>).",
        "user": "UP3FH4CLU",
        "ts": "1576832152.015500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Programming Languages and Learning - Quorum Programming Language",
                "title_link": "https://quorumlanguage.com/evidence.html",
                "text": "Read a brief summary on how the design of programming languages impacts learners and developers.",
                "fallback": "Programming Languages and Learning - Quorum Programming Language",
                "from_url": "https://quorumlanguage.com/evidence.html",
                "service_name": "quorumlanguage.com",
                "id": 1,
                "original_url": "https://quorumlanguage.com/evidence.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/SI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UBKNXPBAB"
                            },
                            {
                                "type": "text",
                                "text": " Yes, the end goal is to have a programming language that is both powerful and easy for beginners to get started with. The hypothesis of the project is that visual programming languages are easy, but not powerful. By powerful, I mean a language can be used to solve large and complex problems. As a stepping stone, the immediate goal of the project is to create a visual programming language (VPL) that's powerful, but not necessarily easy for beginners. After demonstrating a powerful VPL, the next step would be a VPL that's both easy for beginners "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " powerful. Since the short term goal is just to make a powerful VPL, Glance is currently more targeted at experienced programmers, so while it would be nice to have syntax that's easy for beginners, that's not a priority.\n\nI believe there's already a lot of evidence that VPLs are good for beginners, so right now the Glance project is focused on the question of whether powerful VPLs are possible, and not whether visual programing is better than textual programming. But I do think a write-up of the potential advantages and trade-offs of visual programming would help guide the design and clarify my thinking.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " I misspoke in the video. If branches are evaluated top to bottom regardless of the triangle's position.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UBN9AFS0N"
                            },
                            {
                                "type": "text",
                                "text": " This sounds similar to the syntax studies used to develop the evidence-oriented programming language Quorum ("
                            },
                            {
                                "type": "link",
                                "url": "https://quorumlanguage.com/evidence.html"
                            },
                            {
                                "type": "text",
                                "text": ", Study PDF: "
                            },
                            {
                                "type": "link",
                                "url": "https://www.vidarholen.net/~vidar/An_Empirical_Investigation_into_Programming_Language_Syntax.pdf"
                            },
                            {
                                "type": "text",
                                "text": "). Following mouse position might be hard to interpret since code is not read linearly ("
                            },
                            {
                                "type": "link",
                                "url": "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.98.1585&rep=rep1&type=pdf"
                            },
                            {
                                "type": "text",
                                "text": ")."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576657342.007300",
        "parent_user_id": "UP3FH4CLU"
    },
    {
        "client_msg_id": "50fe7118-14d4-440b-baf6-af101d4389b0",
        "type": "message",
        "text": "Video posted! <https://futureofcoding.slack.com/archives/CCL5VVBAN/p1576657342007300>",
        "user": "UP3FH4CLU",
        "ts": "1576832719.015800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/CCL5VVBAN/p1576657342007300",
                "fallback": "[December 18th, 2019 12:22 AM] rgleichman: Here's a video presentation of my attempt at a compact visual syntax for Haskell as part of the Glance project.\nVideo: <https://youtu.be/cb25Ts4rLXA>\nSlides: <https://docs.google.com/presentation/d/1MC37OSCooOS9Kwkg8vj1AeIKTV4e2pqH3ijcBnlq1iw>\nFeedback on the project goal and strategy, and the high level visual design (e.g. using indentation, the topology of the nodes, etc.) would be especially useful.",
                "ts": "1576657342.007300",
                "author_id": "UP3FH4CLU",
                "author_subname": "Robbie Gleichman",
                "channel_id": "CCL5VVBAN",
                "channel_name": "feedback",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "text": "Here's a video presentation of my attempt at a compact visual syntax for Haskell as part of the Glance project.\nVideo: <https://youtu.be/cb25Ts4rLXA>\nSlides: <https://docs.google.com/presentation/d/1MC37OSCooOS9Kwkg8vj1AeIKTV4e2pqH3ijcBnlq1iw>\nFeedback on the project goal and strategy, and the high level visual design (e.g. using indentation, the topology of the nodes, etc.) would be especially useful.",
                "author_name": "Robbie Gleichman",
                "author_link": "https://futureofcoding.slack.com/team/UP3FH4CLU",
                "author_icon": "https://secure.gravatar.com/avatar/82383c2441228c52f5d8ec17161dc031.jpg?s=48&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0019-48.png",
                "mrkdwn_in": [
                    "text"
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/CCL5VVBAN/p1576657342007300",
                "footer": "Thread in #feedback"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H7bFZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Video posted! "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/CCL5VVBAN/p1576657342007300"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574676060.237400",
        "parent_user_id": "UP3FH4CLU"
    },
    {
        "client_msg_id": "641b428a-6876-46ab-ad1f-379a93c57a52",
        "type": "message",
        "text": "Looks very interesting. <@UPU0YJ1CM> please have a look",
        "user": "UPVBV34EL",
        "ts": "1576834162.016100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+wb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Looks very interesting. "
                            },
                            {
                                "type": "user",
                                "user_id": "UPU0YJ1CM"
                            },
                            {
                                "type": "text",
                                "text": " please have a look"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576797860.009600",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "4da4f2d9-4d42-4ae4-baa1-ae80ffc0bd41",
        "type": "message",
        "text": "I've never seen such a tooling! This is really cool :sparkles: I especially appreciate \"clean import\" as in Jupyter Notebook I easily lose track of my imports.\nDo you have any other commands to come in your tool?\nMy only feedback here: If you can highlight what is happening in my code that would be better.",
        "user": "UPU0YJ1CM",
        "ts": "1576835194.016400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TOj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've never seen such a tooling! This is really cool "
                            },
                            {
                                "type": "emoji",
                                "name": "sparkles"
                            },
                            {
                                "type": "text",
                                "text": " I especially appreciate \"clean import\" as in Jupyter Notebook I easily lose track of my imports.\nDo you have any other commands to come in your tool?\nMy only feedback here: If you can highlight what is happening in my code that would be better."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576797890.010300",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "44acbe91-f044-4851-95fc-88a14626dd29",
        "type": "message",
        "text": "by powerful you mean \"attached to a powerful language\", in this case haskell? or \"it makes a more powerful language than haskell\"?",
        "user": "UBN9AFS0N",
        "ts": "1576836060.016600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qKu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "by powerful you mean \"attached to a powerful language\", in this case haskell? or \"it makes a more powerful language than haskell\"?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576657342.007300",
        "parent_user_id": "UP3FH4CLU"
    },
    {
        "client_msg_id": "7b6c07c2-97f9-4e02-9296-ac7f63ed2b17",
        "type": "message",
        "text": "what extra powers would the visual syntax provide other than easier to comprehend?",
        "user": "UBN9AFS0N",
        "ts": "1576836089.016800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "U/eRT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "what extra powers would the visual syntax provide other than easier to comprehend?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576657342.007300",
        "parent_user_id": "UP3FH4CLU"
    },
    {
        "client_msg_id": "9b800379-31d4-4bfa-aee4-232d2e386c51",
        "type": "message",
        "text": "Can I play with it? I'd use the heck out of this. Happy to manually copy-paste into git after every step :slightly_smiling_face:",
        "user": "UCUSW7WVD",
        "ts": "1576857565.017400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WhiR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Can I play with it? I'd use the heck out of this. Happy to manually copy-paste into git after every step "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576797890.010300",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "b5d8053f-f0fd-4574-b30c-f30879caf166",
        "type": "message",
        "text": "Thanks <@UPU0YJ1CM>. The primary set of commands is what\u2019s listed. I think about it as a programmable-compiler---it takes standard optimizing compiler techniques (function inlining, copy propagation) and exposes them to the user in a human-readable way. Currently, my goal with this tool is to make APIs more accessible by enabling programmers to see what\u2019s happening without reading through all the source code.",
        "user": "UFB8STN7K",
        "ts": "1576869264.017600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p5kg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "UPU0YJ1CM"
                            },
                            {
                                "type": "text",
                                "text": ". The primary set of commands is what\u2019s listed. I think about it as a programmable-compiler---it takes standard optimizing compiler techniques (function inlining, copy propagation) and exposes them to the user in a human-readable way. Currently, my goal with this tool is to make APIs more accessible by enabling programmers to see what\u2019s happening without reading through all the source code."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576797890.010300",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "10674b8d-fbdd-4d27-ab2a-ecddd71e5117",
        "type": "message",
        "text": "However, if y\u2019all think there is a more suitable metaphor or alternative use case, I\u2019m interested to hear. Also I think the highlighting changes is a good idea. I\u2019ve thought about adding a code diff view.",
        "user": "UFB8STN7K",
        "ts": "1576869301.017800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UFB8STN7K",
            "ts": "1576869390.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cv1t",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "However, if y\u2019all think there is a more suitable metaphor or alternative use case, I\u2019m interested to hear. Also I think the highlighting changes is a good idea. I\u2019ve thought about adding a code diff view."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576797890.010300",
        "parent_user_id": "UFB8STN7K"
    },
    {
        "client_msg_id": "3c2c66ca-5286-49d9-98b7-54da3c07b1f9",
        "type": "message",
        "text": "<@UCUSW7WVD> sure thing, the source is here: <https://github.com/willcrichton/inliner>",
        "user": "UFB8STN7K",
        "ts": "1576869325.018000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ymzdx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " sure thing, the source is here: "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/willcrichton/inliner"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1576797890.010300",
        "parent_user_id": "UFB8STN7K"
    }
]