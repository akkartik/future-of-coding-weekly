[
    {
        "client_msg_id": "6254c804-453d-4339-aba1-0a1501369c15",
        "type": "message",
        "text": "Oh cool. The tooling Josh and I are building for ourselves is based on a mixture of StateCharts, dataflow, and queries.",
        "user": "UEBG0NPDK",
        "ts": "1572649747.445900",
        "team": "T5TCAFTA9",
        "thread_ts": "1572648862.445700",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "9de06046-290d-43d2-8779-73deedf4faeb",
        "type": "message",
        "text": "one of the main things missing from Eve was some sort of state machine-like abstraction",
        "user": "UEBG0NPDK",
        "ts": "1572649885.446100",
        "team": "T5TCAFTA9",
        "thread_ts": "1572648862.445700",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "649c2097-ec21-4987-a6d1-d865451eebd3",
        "type": "message",
        "text": "the language I designed based on everything we'd learned through Eve was dataflow with state machines embedded in it, but it turns out if you flip that the other way around you get something pretty neat",
        "user": "UEBG0NPDK",
        "ts": "1572649951.446300",
        "team": "T5TCAFTA9",
        "thread_ts": "1572648862.445700",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "3943465a-8f74-479c-b2ff-14094bca0b63",
        "type": "message",
        "text": "our early experiments seem very promising so far :slightly_smiling_face:",
        "user": "UEBG0NPDK",
        "ts": "1572649986.446500",
        "team": "T5TCAFTA9",
        "thread_ts": "1572648862.445700",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "7f7155c2-292b-49e3-b878-a144e97d11a9",
        "type": "message",
        "text": "Has anyone here downloaded and played with the lively kernel? Is there a way to run it without a server or running any client side scripts?",
        "user": "ULM3U6275",
        "ts": "1572658847.446700",
        "team": "T5TCAFTA9",
        "thread_ts": "1572568175.434300",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "6c326a00-5210-419d-a50e-3d427ea55088",
        "type": "message",
        "text": "I think everyone can agree on the necessary of different phases of processing (compile time, build time, deploy time, burger time, run time, etc.)\n\nBut (per the original topic), the only real difference is WHEN the processing occurs -- otherwise it's all *just code* with no fundamental difference.\n\nSeparating code into different \"kinds\" of things for each \"time\" (e.g. functions vs macros) is absolutely NOT intrinsic to that kind of phased processing, although that is certainly *one* (very convenient) way of doing it.\n\nPractically aside though, there is no reason the same cannot be done with plain old functions that generate code which is then saved off for later execution.",
        "user": "UAVCC2X70",
        "ts": "1572662841.446900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1572662882.000000"
        },
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "7e88cf52-e569-4d48-9093-7b5687a8d50a",
        "type": "message",
        "text": "So for Gregg's example, the need has everything to do with separate phases of execution, and nothing to do with macros *per se* -- although they may have been the best fit or most convenient way to go about it.",
        "user": "UAVCC2X70",
        "ts": "1572663116.447300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1572663535.000000"
        },
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "2F9F2CA7-9FF7-4FDE-9137-C13AB1B2B67E",
        "type": "message",
        "text": "right, but i think(?) i\u2019m arguing that by generalizing something similar to the infrastructure required for lazy evaluation, we should be able to draw a dependency graph for what code needs to be evaluated programmatically rather than forcing the programmer to determine the staging order ahead of time in a source file",
        "user": "UHWC9PXBL",
        "ts": "1572670981.450500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UHWC9PXBL",
            "ts": "1572671011.000000"
        },
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "4748F05F-63F4-459E-BB6F-E0EE86F60512",
        "type": "message",
        "text": "i stumbled into this after investigating something called \u201cthe sam architecture\u201d which lacks enough specifics for me to feel like i\u2019m understanding it\u2014based on paxos (seems like unnecessarily to me)\u2014but if you can grok it, might also be helpful as it separates mutations (transitions in state machines), messaging (events), model (guards and transactions), and views",
        "user": "UHWC9PXBL",
        "ts": "1572671275.456000",
        "team": "T5TCAFTA9",
        "thread_ts": "1572648862.445700",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "2A696E83-8D83-4421-B6D5-C54630CB3A24",
        "type": "message",
        "text": "might just be a more muddled version of what you\u2019re working on, though",
        "user": "UHWC9PXBL",
        "ts": "1572671289.456600",
        "team": "T5TCAFTA9",
        "thread_ts": "1572648862.445700",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "E19E38F2-1A54-438F-9BC2-C0DE2C08CEE0",
        "type": "message",
        "text": "but state machines with dataflow embedded seems to line up with my very shaky understanding of it\u2014any time state changes it might trigger another \u201caction\u201d (message)\u2014which really seems like wrapping dataflow around FSMs to me. but i should maybe stay off slack after midnight ",
        "user": "UHWC9PXBL",
        "ts": "1572671468.460500",
        "team": "T5TCAFTA9",
        "thread_ts": "1572648862.445700",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "1c43fe36-e7d2-483f-89dd-fa3704908f64",
        "type": "message",
        "text": "And SAM acrhitecture is strongly inspired by temporal logic of actions (TLA) from Leslie Lamport which is a theory background to reason about concurrent systems. It aims to proove algorithms correctness using a formalism which specify both actions and state with formulas. It is kind of state with transitions.",
        "user": "UJ6LDMMN0",
        "ts": "1572682443.460700",
        "team": "T5TCAFTA9",
        "thread_ts": "1572648862.445700",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "1C1D0B7F-91FC-4A3A-9D67-CD0A343B34A0",
        "type": "message",
        "text": "The big difference between queries and rewriting is that rewrite rules are applied recursively, until there is no more rule that matches.",
        "user": "UJBAJNFLK",
        "ts": "1572686319.462800",
        "team": "T5TCAFTA9",
        "thread_ts": "1572217129.305100",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "FAD49333-1664-495F-811A-609CB08FD4A2",
        "type": "message",
        "text": "<@UAVCC2X70> I completely agree, but I\u2019d also add that convenience matters very much in practice. And there is one fundamental difference of some macro systems (e.g. scheme-style hygienic macros) to everything else: several phases share the same namespaces for identifiers.",
        "user": "UJBAJNFLK",
        "ts": "1572686747.466600",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "ba82d208-2f4c-4043-985e-bc923d1a017c",
        "type": "message",
        "text": "But that's an implementation detail? The stated goal is declarativeness, code expressing the shape of inputs and outputs. Here the memory variables actually compromise the goal. Rewrite rules need to sometimes be uncoiled in your head.",
        "user": "UCUSW7WVD",
        "ts": "1572687045.466800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1572712800.000000"
        },
        "thread_ts": "1572217129.305100",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "f54cc5ca-68c4-4ca6-8820-5f90e73cfb43",
        "type": "message",
        "text": "```\n// actions compute proposals\nconst proposal = {incrementBy: 1}\n\n// the model accepts, partially accepts or rejects the proposals\nmodel.accept(proposal)\n    // compute the new state representation\n    .then(state =&gt; representation(state))\n    // share the state representation\n    .then(render)\n```\nThe corollary in the Object Network architecture is what I call \"Functional Observer\" - the state of an object is a function of its current state and the state of peer objects observed through links.\n\nSo peer objects can \"propose\" changes but it's up to the target whether or not to change state. I call proposals \"intentions\": when there's an intention of an object on another - simply by virtue of its current state - it puts the system \"in tension\" (see what I did thar? :smile: ) and this tension only resolves when either the intention state is abandoned or the target does something to its own state to react to it.\n\nThat is a robust model as there are no ephemeral \"actions\" or messages, just a global state where things are settled or waiting to settle, thus giving eventual consistency and emergent behaviour from local rules.",
        "user": "UE6EFEPTQ",
        "ts": "1572691679.467100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1572692294.000000"
        },
        "thread_ts": "1572648862.445700",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "343117E1-6DB5-4C1B-921A-F25AB2303826",
        "type": "message",
        "text": "<https://github.com/microsoft/vscode/issues/16110>",
        "user": "UPDJV04FR",
        "ts": "1572704497.469700",
        "team": "T5TCAFTA9",
        "thread_ts": "1572184945.295600",
        "parent_user_id": "UNV27TUKA"
    },
    {
        "client_msg_id": "25266D82-8000-4D02-A2D8-19FBC0CA1983",
        "type": "message",
        "text": "Hey friends! Wanted to say Steve's video with mpj on expressions and statements is a new top fav! Very exciting times",
        "user": "UPQCK79UJ",
        "ts": "1572708132.471800",
        "team": "T5TCAFTA9",
        "thread_ts": "1572708132.471800",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1572714689.492000",
        "reply_users": [
            "UHWC9PXBL",
            "ULM3U6275"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U5TCAFTD3"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "C5F0AD7B-9C25-4981-8634-8231F8E2E3DF",
        "type": "message",
        "text": "Is there a formalization to add and validate constraints on the valid intervals in which particular events can be emitted in the system?\n\nI mean there might be multiple services/objects around waiting for messages and due the combinatorical explosion we can't enumerate all the possible sequences of events. \n\nI just can't believe there is no standard/proven way/know how to generate event sequences in any programming language. To me it seems it should be part of the testing libs maybe with additional abstractions for expressing the distinct \"services\"/\"objects\", but I don't see the need for a separate programming language for that, but still, I am not aware if that in the mainstream. \n\nI am wondering why is that.",
        "user": "UL3CJ7YKC",
        "ts": "1572709118.479700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1572709240.000000"
        },
        "thread_ts": "1572709118.479700",
        "reply_count": 12,
        "reply_users_count": 5,
        "latest_reply": "1573296628.260900",
        "reply_users": [
            "UFPPABQ7P",
            "UAVCC2X70",
            "UC2A2ARPT",
            "UL3CJ7YKC",
            "UKQT95T1V"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "db3be3fc-2d18-4514-9155-b31a9294d5d1",
        "type": "message",
        "text": "What would be the use case/domain this would be applied to? Something like a state machine?",
        "user": "UFPPABQ7P",
        "ts": "1572709674.479900",
        "team": "T5TCAFTA9",
        "thread_ts": "1572709118.479700",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "<https://youtu.be/4p6gNRgI_cc> the video ",
        "user": "UHWC9PXBL",
        "ts": "1572711165.480200",
        "thread_ts": "1572708132.471800",
        "root": {
            "client_msg_id": "25266D82-8000-4D02-A2D8-19FBC0CA1983",
            "type": "message",
            "text": "Hey friends! Wanted to say Steve's video with mpj on expressions and statements is a new top fav! Very exciting times",
            "user": "UPQCK79UJ",
            "ts": "1572708132.471800",
            "team": "T5TCAFTA9",
            "thread_ts": "1572708132.471800",
            "reply_count": 2,
            "reply_users_count": 2,
            "latest_reply": "1572714689.492000",
            "reply_users": [
                "UHWC9PXBL",
                "ULM3U6275"
            ],
            "subscribed": false
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Expressions versus statements? The future of functional programming (with Steve Krouse)",
                "title_link": "https://youtu.be/4p6gNRgI_cc",
                "author_name": "Fun Fun Function",
                "author_link": "https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q",
                "thumb_url": "https://i.ytimg.com/vi/4p6gNRgI_cc/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Expressions versus statements? The future of functional programming (with Steve Krouse)",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/4p6gNRgI_cc?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/4p6gNRgI_cc",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/4p6gNRgI_cc"
            }
        ],
        "client_msg_id": "815DC1A1-6ACC-4B62-83DA-6E3584B76E07"
    },
    {
        "client_msg_id": "695B0579-AC5F-4DDF-B24B-11292AABA1C9",
        "type": "message",
        "text": "Recursive application makes rewriting Turing-complete. Not a detail for me.",
        "user": "UJBAJNFLK",
        "ts": "1572712723.482000",
        "team": "T5TCAFTA9",
        "thread_ts": "1572217129.305100",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "5DDA4910-AEE1-4805-9CCD-7F53AC878A7E",
        "type": "message",
        "text": "<@UNV27TUKA> it looks like mason has the best answer for everyday coding\u2014you may need to write the plugin yourself but the static analysis is already done in vscode ",
        "user": "UHWC9PXBL",
        "ts": "1572713096.485900",
        "team": "T5TCAFTA9",
        "thread_ts": "1572184945.295600",
        "parent_user_id": "UNV27TUKA"
    },
    {
        "client_msg_id": "188092BE-CDD9-42F3-BA7E-A2AC1C129A16",
        "type": "message",
        "text": "<@UHWC9PXBL> Lazy evaluation is not sufficient to get the equivalent of macros. A lazy function can decide to evaluate an argument or not, but it cannot change the semantics of evaluation. A macro can do anything at all to its arguments. A Lisp macro could implement Fortran with s-expression syntax, for example.\nYou can probably do something similar to JIT for macro expansion, but it needs to be distinct from function evaluation.",
        "user": "UJBAJNFLK",
        "ts": "1572713159.487800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJBAJNFLK",
            "ts": "1572713300.000000"
        },
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "ee88b208-bfe7-40f2-901b-df3766adec05",
        "type": "message",
        "text": "well, iterative does too: applying until convergence or no more LHS matches",
        "user": "UE6EFEPTQ",
        "ts": "1572713524.488100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1572713634.000000"
        },
        "thread_ts": "1572217129.305100",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "9d748dfd-f5e5-4628-89f8-d1d75bcff775",
        "type": "message",
        "text": "not a(n implementation) detail for me either!",
        "user": "UE6EFEPTQ",
        "ts": "1572713549.488300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1572716983.000000"
        },
        "thread_ts": "1572217129.305100",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "A31EC59F-0BBD-4BD5-B70E-121C0BFB8C0D",
        "type": "message",
        "text": "FP discussions seem to begin with everyone saying how much more understandable FP is, and end with everyone confused about every aspect of it.",
        "user": "ULM3U6275",
        "ts": "1572714689.492000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1572890601.000000"
        },
        "thread_ts": "1572708132.471800",
        "parent_user_id": "UPQCK79UJ",
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "UHWC9PXBL",
                    "UC2A2ARPT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "185453a2-cc47-4bda-a6f5-7057fe0fddd7",
        "type": "message",
        "text": "<@UJBAJNFLK> - some languages allow passing around 'unevaluated expressions' where the recipient decides even how to interpret the expressions. E.g. lisp fexprs, red/rebol blocks etc. Do you think these are equivalent to macros?",
        "user": "U8A5MS6R1",
        "ts": "1572718055.492400",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "0fe68ba8-dec6-4b03-81c4-414b1c88b1f2",
        "type": "message",
        "text": "IIRC Xerox PARC &amp; co used the most powerful computers available at the time to \"invent the future\": the graphical environments and programming languages regular people use now.\n\nWhat would be the equivalent today?\nMy (naive) impression is that programming language and HCI labs don't seem to make use of 64 core processors with a 100 GB of RAM and GPU computing to similarly invent the future.",
        "user": "UKB1S7ZMY",
        "ts": "1572723679.497200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UKB1S7ZMY",
            "ts": "1572723887.000000"
        },
        "thread_ts": "1572723679.497200",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1572779225.073600",
        "reply_users": [
            "U5TCAFTD3"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "UJVEPCVT6"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "B6897CB0-9342-4627-AE3F-651096A10CCD",
        "type": "message",
        "text": "<@U8A5MS6R1> Yes, those are equivalent to macros, but differ in details.",
        "user": "UJBAJNFLK",
        "ts": "1572723978.000900",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "f30ddd2c-d321-4adb-9bad-ade65998c367",
        "type": "message",
        "text": "I think it might look like using some general (but highly parallelizable?) techniques that we know can be optimized using hypothetical sufficiently smart compilers or runtimes to run on normal computers.",
        "user": "UKB1S7ZMY",
        "ts": "1572724082.002300",
        "team": "T5TCAFTA9"
    },
    {
        "client_msg_id": "9b80f387-f89e-4f88-a292-1273043d36c4",
        "type": "message",
        "text": "that\u2019s kind of what im describing as a \u201cgeneralization of lazy evaluation\u201d\u2014the value of the unevaluated code expressions themselves could be created via a function that produces code only when demanded",
        "user": "UHWC9PXBL",
        "ts": "1572725749.003100",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "b04a5b50-46dc-4b19-8201-967411c71913",
        "type": "message",
        "text": "might be too far in abstract-land, though",
        "user": "UHWC9PXBL",
        "ts": "1572725761.003500",
        "team": "T5TCAFTA9",
        "thread_ts": "1571972846.216600",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "92D34C5F-1809-4D99-AC74-57C17D6C88F5",
        "type": "message",
        "text": "<@UKB1S7ZMY> Are your frustrations with software primarily about it not running fast enough? ",
        "user": "ULM3U6275",
        "ts": "1572725857.004900",
        "team": "T5TCAFTA9"
    }
]