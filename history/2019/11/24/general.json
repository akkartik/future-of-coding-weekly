[
    {
        "client_msg_id": "c103fafc-9166-470d-9b2d-544b6ecdfac8",
        "type": "message",
        "text": "There is a 3rd alternative that was the original intention of the great John Backus, who invented FP after developing FORTRAN. In his original vision for his next general purpose language, he was seeking to enter into an era of interchangeable parts. In such a world programming is a great deal less troublesome; you just snap together components, and can build elaborate systems out of already-tested parts.  At present, the JS world uses npm as their package manager, and you can see the exponential \"drag-in\" where the dependencies grow exponentially and adding some little thing suddenly pulls an ungodly amount of code into your project. Since things depend on other things, there is always an exponential growth curve to a project as it grows, but what matters is the value of the exponent: if it is n^1.1 versus n^2, going to n=1000 means  2000 vs. 1 million, which is 50 times smaller.  In one project i converted a 100k line C program into Modula-2 and it cut the size in half. So much of the differences between languages only show up on larger projects. Just like in the movie Ferrari vs. Ford, in an endurance race of 24 hours the durability of the engine really shows up. It is exceptionally hard for new languages to get an honest evaluation because typically small projects are written in them. In this regard, the Jai project has a big advantage, because it is being tested on a huge game project.",
        "user": "UEQ6M68H0",
        "ts": "1574560133.114400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1cw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There is a 3rd alternative that was the original intention of the great John Backus, who invented FP after developing FORTRAN. In his original vision for his next general purpose language, he was seeking to enter into an era of interchangeable parts. In such a world programming is a great deal less troublesome; you just snap together components, and can build elaborate systems out of already-tested parts.  At present, the JS world uses npm as their package manager, and you can see the exponential \"drag-in\" where the dependencies grow exponentially and adding some little thing suddenly pulls an ungodly amount of code into your project. Since things depend on other things, there is always an exponential growth curve to a project as it grows, but what matters is the value of the exponent: if it is n^1.1 versus n^2, going to n=1000 means  2000 vs. 1 million, which is 50 times smaller.  In one project i converted a 100k line C program into Modula-2 and it cut the size in half. So much of the differences between languages only show up on larger projects. Just like in the movie Ferrari vs. Ford, in an endurance race of 24 hours the durability of the engine really shows up. It is exceptionally hard for new languages to get an honest evaluation because typically small projects are written in them. In this regard, the Jai project has a big advantage, because it is being tested on a huge game project."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1569265970.431500",
        "parent_user_id": "UAZT04VT4"
    },
    {
        "client_msg_id": "505cf52c-cea3-4e81-b694-f0c8ec645703",
        "type": "message",
        "text": "<https://raphlinus.github.io/ui/druid/2019/11/22/reactive-ui.html>",
        "user": "UBSMEUXAA",
        "ts": "1574577813.114800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Raph Levien\u2019s blog",
                "title": "Towards a unified theory of reactive UI",
                "title_link": "https://raphlinus.github.io/ui/druid/2019/11/22/reactive-ui.html",
                "text": "In trying to figure out the best reactive structure for druid, as well as how to communicate that to the world, I\u2019ve been studying a wide range of reactive UI systems. I\u2019ve found an incredible diversity, even though they have fairly consistent goals. This post is an attempt to find common patterns, to characterize the design space as a whole. It will be rough, at some points almost a stream of consciousness. If I had the time and energy, I think it could be expanded into an academic paper. But, for now, perhaps these rough thoughts are interesting to some people working in the space.",
                "fallback": "Raph Levien\u2019s blog: Towards a unified theory of reactive UI",
                "ts": 1574441082,
                "from_url": "https://raphlinus.github.io/ui/druid/2019/11/22/reactive-ui.html",
                "id": 1,
                "original_url": "https://raphlinus.github.io/ui/druid/2019/11/22/reactive-ui.html"
            }
        ],
        "thread_ts": "1574577813.114800",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1574719230.175100",
        "reply_users": [
            "UJN1TAYEQ"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJUQESQ1Z",
                    "UC2A2ARPT",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "6fa5b1dc-bb34-4a01-b3ba-4ecbbc91c0c9",
        "type": "message",
        "text": "I retract my previous statement, and hold that sending a sequence of commands to be executed by an RC car is programing, but controlling it in real time (i.e. do what I say as I say it) is *not* programming.\n\nI originally conceded that the difference was too superficial to say they are different. But I think it was actually just a superficial *example* of programming.\n\nIt's not _necessarily_ about whether commands are \"prepared\" or \"batched\" (although that is what qualifies as \"code\"). It's about specifying or altering the the behavior of/for something else, *rather* than being in direct control as it happens. Otherwise *you* are the one doing the behavior (albeit through some interface).\n\nIt just so happens that the most familiar form of programming (when thought of as such), is to \"script\" the behavior ahead of time, in which case that script is called \"code\".\n\nBut a person (or machine learning AI) can be programmed to behave a certain way through conditioning or +/- reinforcement -- no \"code\" involved (for the programmer)\n\nAlthough if you go see a play or a musical, people follow a \"script\", and you are given a printout of \"the program\" (here's what will happen, here's who is involved, etc.)",
        "user": "UAVCC2X70",
        "ts": "1574581430.115600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1574639740.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zIB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I retract my previous statement, and hold that sending a sequence of commands to be executed by an RC car is programing, but controlling it in real time (i.e. do what I say as I say it) is "
                            },
                            {
                                "type": "text",
                                "text": "not",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " programming.\n\nI originally conceded that the difference was too superficial to say they are different. But I think it was actually just a superficial "
                            },
                            {
                                "type": "text",
                                "text": "example",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of programming.\n\nIt's not "
                            },
                            {
                                "type": "text",
                                "text": "necessarily",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " about whether commands are \"prepared\" or \"batched\" (although that is what qualifies as \"code\"). It's about specifying or altering the the behavior of/for something else, "
                            },
                            {
                                "type": "text",
                                "text": "rather",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " than being in direct control as it happens. Otherwise "
                            },
                            {
                                "type": "text",
                                "text": "you",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are the one doing the behavior (albeit through some interface).\n\nIt just so happens that the most familiar form of programming (when thought of as such), is to \"script\" the behavior ahead of time, in which case that script is called \"code\".\n\nBut a person (or machine learning AI) can be programmed to behave a certain way through conditioning or +/- reinforcement -- no \"code\" involved (for the programmer)\n\nAlthough if you go see a play or a musical, people follow a \"script\", and you are given a printout of \"the program\" (here's what will happen, here's who is involved, etc.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1573264632.251900",
        "parent_user_id": "UAVCC2X70",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "4c533d25-a18e-48bf-9245-061ad7aa22a0",
        "type": "message",
        "text": "Maybe that means that movie directors and choreographers are (in a sense) \"programmers\".",
        "user": "UAVCC2X70",
        "ts": "1574581969.116300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1574582128.000000"
        },
        "thread_ts": "1573264632.251900",
        "parent_user_id": "UAVCC2X70",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "463b5eed-cb48-46fe-81b1-63f1516794dc",
        "type": "message",
        "text": "&gt; It's about specifying or altering the way something does (or will) behave,\u00a0*rather*\u00a0than you being in direct control as it happens. Otherwise\u00a0*you*\u00a0are the one doing the behavior (albeit though some interface).\nWell, I find your distinction between the two very interseting and usefull. So there is two kinds of activity: programming and controlling (or \"commanding\"?).\nAnother example might be MIDI in music. You can control a midi instrument with midi controllers (keyboards, control surface with faders...) or you can program it with sequences via pianorolls or with generative algorithms. And to blur a bit mors the frontier, your midi instrument can be a program (say coded with MaxMSP our PureData).",
        "user": "UJ6LDMMN0",
        "ts": "1574588915.116900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "is6",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's about specifying or altering the way something does (or will) behave,\u00a0"
                            },
                            {
                                "type": "text",
                                "text": "rather",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u00a0than you being in direct control as it happens. Otherwise\u00a0"
                            },
                            {
                                "type": "text",
                                "text": "you",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u00a0are the one doing the behavior (albeit though some interface)."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well, I find your distinction between the two very interseting and usefull. So there is two kinds of activity: programming and controlling (or \"commanding\"?).\nAnother example might be MIDI in music. You can control a midi instrument with midi controllers (keyboards, control surface with faders...) or you can program it with sequences via pianorolls or with generative algorithms. And to blur a bit mors the frontier, your midi instrument can be a program (say coded with MaxMSP our PureData)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1573264632.251900",
        "parent_user_id": "UAVCC2X70"
    },
    {
        "client_msg_id": "f82db756-4012-45d9-8f7b-5e2a699346e3",
        "type": "message",
        "text": "And I think it can be usefull to have an environment when you can do both controlling and programming and mix them. Again, examples of such environment ar MaxMSP and PureData. And ObservableHQ. And Jupyter Notebook.",
        "user": "UJ6LDMMN0",
        "ts": "1574589059.117200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Xsw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And I think it can be usefull to have an environment when you can do both controlling and programming and mix them. Again, examples of such environment ar MaxMSP and PureData. And ObservableHQ. And Jupyter Notebook."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1573264632.251900",
        "parent_user_id": "UAVCC2X70"
    },
    {
        "client_msg_id": "c89cd0f2-5c15-491f-a860-e41a83f63828",
        "type": "message",
        "text": "Ian Rumac, are you making some kind of projectional editor? Anyway, LES <http://loyc.net/les/> isn't a data definition language but it _could_ be one - it can be used for almost anything.",
        "user": "UD6EXQVM0",
        "ts": "1574607684.118700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qKE7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ian Rumac, are you making some kind of projectional editor? Anyway, LES "
                            },
                            {
                                "type": "link",
                                "url": "http://loyc.net/les/"
                            },
                            {
                                "type": "text",
                                "text": " isn't a data definition language but it "
                            },
                            {
                                "type": "text",
                                "text": "could",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " be one - it can be used for almost anything."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1569264905.430600",
        "parent_user_id": "UNBPP291C"
    },
    {
        "client_msg_id": "be165060-0a06-4fda-95d6-962bc0dd7f48",
        "type": "message",
        "text": "I've been thinking LES _might_ be the right foundation for a projectional editor based on the WYTIWYS (what you type is what you see) principle... because I think such an editor must interop well with plain-text environments like reddit or github, and support copy/paste really well. Therefore I don't think that keeping the program semantically valid at all times is realistic, but keeping it syntactically valid is certainly doable.",
        "user": "UD6EXQVM0",
        "ts": "1574608542.118900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5a1Dx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been thinking LES "
                            },
                            {
                                "type": "text",
                                "text": "might",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " be the right foundation for a projectional editor based on the WYTIWYS (what you type is what you see) principle... because I think such an editor must interop well with plain-text environments like reddit or github, and support copy/paste really well. Therefore I don't think that keeping the program semantically valid at all times is realistic, but keeping it syntactically valid is certainly doable."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1569264905.430600",
        "parent_user_id": "UNBPP291C"
    },
    {
        "client_msg_id": "779e9eb2-2465-4f80-85d7-7b570d013e39",
        "type": "message",
        "text": "To relate LES with tree notation, if we think of languages as a continuum from less to more structured, I think it goes like\nunstructured text < tree notation < JSON/XML < LES < high-level language, what do you think <@UMVFWPZ36>?",
        "user": "UD6EXQVM0",
        "ts": "1574608576.119100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UD6EXQVM0",
            "ts": "1574608599.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "03x9k",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To relate LES with tree notation, if we think of languages as a continuum from less to more structured, I think it goes like\nunstructured text < tree notation < JSON/XML < LES < high-level language, what do you think "
                            },
                            {
                                "type": "user",
                                "user_id": "UMVFWPZ36"
                            },
                            {
                                "type": "text",
                                "text": "?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1569264905.430600",
        "parent_user_id": "UNBPP291C"
    },
    {
        "client_msg_id": "72D4A619-0F74-441A-A8DF-DAB60596349A",
        "type": "message",
        "text": "How familiar are people here with Acme, the \u201cintegrating development environment\u201d? Its extension mechanisms are well thought-out and I think it\u2019s only incidental that the lingua franca is plain text and that its affordances for inline feedback are abysmal.\n\nThis is the best short video introduction, in which its extensibility features prominently: <https://research.swtch.com/acme>",
        "user": "UFEQUBNNT",
        "ts": "1574624756.123700",
        "team": "T5TCAFTA9",
        "thread_ts": "1574624756.123700",
        "reply_count": 12,
        "reply_users_count": 8,
        "latest_reply": "1574921333.251500",
        "reply_users": [
            "UM1HH60GN",
            "UFEQUBNNT",
            "UAVCC2X70",
            "UEQ6M68H0",
            "UA14TGLTC",
            "UMWF81HTP",
            "UJN1TAYEQ",
            "U8A5MS6R1"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "f6f2cba7-aba8-4338-a543-a80c408023ff",
        "type": "message",
        "text": "I like the text editing consistency, but wish there were a way to do it without such heavy mouse use, ergonomically.  That's what moved me towards emacs and away from IDEs.",
        "user": "UM1HH60GN",
        "ts": "1574625805.123900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x6eXs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like the text editing consistency, but wish there were a way to do it without such heavy mouse use, ergonomically.  That's what moved me towards emacs and away from IDEs."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574624756.123700",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "7F8FDBE4-CE9E-485C-A7A3-7B2A4E676527",
        "type": "message",
        "text": "There are definitely ways. If you feel comfortable with your hotkeys for marking text, you\u2019re not far from a UI that can act on it.",
        "user": "UFEQUBNNT",
        "ts": "1574627946.134100",
        "team": "T5TCAFTA9",
        "thread_ts": "1574624756.123700",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "27f1ca16-6ba7-4164-999b-f732177406bd",
        "type": "message",
        "text": "Well, I hope their software is better than their bird catching contraptions",
        "user": "UAVCC2X70",
        "ts": "1574628188.134300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5kG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well, I hope their software is better than their bird catching contraptions"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574624756.123700",
        "parent_user_id": "UFEQUBNNT",
        "reactions": [
            {
                "name": "stuck_out_tongue",
                "users": [
                    "UFEQUBNNT",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    }
]