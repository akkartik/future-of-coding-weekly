[
    {
        "client_msg_id": "6E61FD72-6BBA-4B45-844C-DF3856A1BF86",
        "type": "message",
        "text": "Another way to say this is to just follow the way we naturally think about things where some things don\u2019t change and other things do. Numbers don\u2019t change (the number 2 doesn\u2019t become the 3) but most things that contain numbers do change (a two year old person may become a three year old person). Likewise, strings don\u2019t change, but things that contain them, like paragraphs, do. As we naturally think about them, most compositional things *do* change, but we may not want all code to have write access to them. FP eliminates write access instead of appropriately limiting it.",
        "user": "ULM3U6275",
        "ts": "1574039322.496000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1574104728.000000"
        },
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "65f0b42b-9922-43aa-8c26-d4a769a996b0",
        "type": "message",
        "text": "Yeah 'identity' as a concept has zero built-in support in most (immutable data) FP langs. Versions/snapshots/inter-object consistency has zero built-in support in most OO langs. 'Time/space distributed objects' has zero built-in support in almost all of the langs. Whatever is lacking is then implemented by hand or by libraries - often by both. A person exists in one place but most virtual entities are spread out over the entire system (client side, server side, database...) and most of the information homeostasis is manually managed between all of the different models of the same entity floating around. Are there systems/languages that have strong support for the the idea of 'distributed object'?",
        "user": "U8A5MS6R1",
        "ts": "1574040972.496400",
        "team": "T5TCAFTA9",
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "825896fd-b37c-425e-aa5f-831b3fd9b99c",
        "type": "message",
        "text": "The Spiral documentation is very idiosyncratic and hard to read. Here's a related project, with clearer documentation and a wider scope of applicability.\n\nAnyDSL is a framework for building DSLs using partial evaluation.\n<http://compilers.cs.uni-saarland.de/papers/anydsl.pdf>\n<https://anydsl.github.io/>",
        "user": "UJN1TAYEQ",
        "ts": "1574043424.496600",
        "team": "T5TCAFTA9",
        "thread_ts": "1573949858.477900",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "1d34d7e1-1da0-4cb7-974c-f36d66950764",
        "type": "message",
        "text": "One of my former labmates translated SQL92 into a GUI and recorded a 15-minute demo: <https://twitter.com/eirikbakke/status/1193201350693265412> \"The goal of all of this eventually is to have a system that I can replace a lot of these old-fashioned manually-made Microsoft Access applications and all the different views, forms, reports, tables, and so on that you see in those.\"",
        "user": "UFEQUBNNT",
        "ts": "1574045798.499000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/eirikbakke|@eirikbakke>: Ultorg: A User Interface for Relational Databases\n(latest demo!) <https://vimeo.com/372006027>",
                "ts": 1573316345,
                "author_name": "Eirik Bakke",
                "author_link": "https://twitter.com/eirikbakke/status/1193201350693265412",
                "author_icon": "https://pbs.twimg.com/profile_images/1064658842603024384/I-V5hJcf_normal.jpg",
                "author_subname": "@eirikbakke",
                "text": "Ultorg: A User Interface for Relational Databases\n(latest demo!) <https://vimeo.com/372006027>",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/eirikbakke/status/1193201350693265412",
                "id": 1,
                "original_url": "https://twitter.com/eirikbakke/status/1193201350693265412",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "thread_ts": "1574045798.499000",
        "reply_count": 4,
        "reply_users_count": 2,
        "latest_reply": "1574147736.019200",
        "reply_users": [
            "UEQ6M68H0",
            "UK22Z72L8"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "UJVEPCVT6",
                    "UK22Z72L8",
                    "U7C7B75R6",
                    "UAVCC2X70",
                    "UHZNB3HRP"
                ],
                "count": 5
            },
            {
                "name": "open_mouth",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "44434bb0-ca75-44a6-8994-1497b67adb25",
        "type": "message",
        "text": "Ultorg is a wonderful little product. As a long time user of Filemaker Pro which is one of the longest-running and best entry-level databases on the market, i can numerous advantages for people who are exploring data and want to stay inside the spreadsheet paradigm. Where Filemaker has some advantages is their wonderful form design system, which has many graphical aids, and makes it easy to create very nice looking forms with lots of input validation. But for freeform queries Ultorg kicks FMPro's butt, and i can see a very lively market for that kind of product. There is a lot of data analysis that needs to be done, and the automatic report generation tools is fantastic.",
        "user": "UEQ6M68H0",
        "ts": "1574064268.499400",
        "team": "T5TCAFTA9",
        "thread_ts": "1574045798.499000",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "3eeae1f2-7a58-4cb5-b0bc-c6530bdb0a30",
        "type": "message",
        "text": "My Beads system uses distributed objects via a subscription model. I have published an example of the client/server code for 12 simultaneous games of tictactoe. Each of the clients can see the other games being played, and join in multiple games at once. The server  holds the ultimate source of truth, and the clients subscribe to some portion of the master graph database. No explicit messages in my system, and all clients are guaranteed a consistent state at all times. A lot of people want to make multiplayer games and systems, and one key thing i am after is being able to debug those systems easily. I am envisioning time travel debugging of the client and the server at the same time. It is a fascinating subject.",
        "user": "UEQ6M68H0",
        "ts": "1574065184.499600",
        "team": "T5TCAFTA9",
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "a5773dd4-651d-4957-acce-baf40274622f",
        "type": "message",
        "text": "What <@UEQ6M68H0> said also applies to Onex and the Object Network*.\nThis keeps happening, I guess we're arch rivals! :smile:\n\n(* apart from the time travel debugging bit)",
        "user": "UE6EFEPTQ",
        "ts": "1574067112.499900",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1574067194.000000"
        },
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "01dd1b1c-4d1d-401e-91f3-73ac306732f4",
        "type": "message",
        "text": "(* although that has got me thinking about how much object version history I save.. hmm..)",
        "user": "UE6EFEPTQ",
        "ts": "1574076235.000300",
        "team": "T5TCAFTA9",
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "d9f5d9bf-720c-4ec3-a494-da61b1694f70",
        "type": "message",
        "text": "When I was at Uni I used to socialise with a medical doctor that was working on his MD. He was doing clinical research and curating a data set using Microsoft Access. It\u2019s interesting to see how non-programmers look at this kind of problem. He said something like \u201cBuilding databases is fun, and productive\u2026 until you put too much in and it\u2019s all tangled up \u2026 and you can\u2019t remember how you put it together\u2026\u201d",
        "user": "UK22Z72L8",
        "ts": "1574085864.000600",
        "team": "T5TCAFTA9",
        "thread_ts": "1574045798.499000",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "0f0db7d4-fd05-4a04-a314-0a70cbde66ab",
        "type": "message",
        "text": "He made a throwaway remark that just happened to summarise the problems of software development at large but especially that of self-taught developers.",
        "user": "UK22Z72L8",
        "ts": "1574085934.000800",
        "team": "T5TCAFTA9",
        "thread_ts": "1574045798.499000",
        "parent_user_id": "UFEQUBNNT"
    },
    {
        "client_msg_id": "62ed11e2-9918-4763-a892-0baa1cde8759",
        "type": "message",
        "text": "This has probably been posted before but reposting because this always impresses me. I believe this note is from Alan Kay:\n\n&gt; This system --including everything -- \"OS\", SDK, Media, GUI, Tools, and the content -- is about 10,000 lines of Smalltalk-78 code sitting on top of about 6K bytes of machine code (the latter was emulated to get the whole system going).\n\nThe software mentioned has a windowing system, multiple desktops, IDE/code editing and running, paint, animation, document editing/viewing, gesture recognition). 16K lines on top of hardware.. how is this possible? (What am I missing?)\n\nSource: <https://news.ycombinator.com/item?id=19722205>\n\nLink to demo: <https://www.youtube.com/watch?v=AnrlSqtpOkw&amp;t=135s>",
        "user": "U8A5MS6R1",
        "ts": "1574100925.005200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1574100980.000000"
        },
        "thread_ts": "1574100925.005200",
        "reply_count": 22,
        "reply_users_count": 9,
        "latest_reply": "1574450296.111900",
        "reply_users": [
            "U8A5MS6R1",
            "UPMFG2571",
            "UGWUJUZHT",
            "U5STGTB3J",
            "UNBPP291C",
            "UJBAJNFLK",
            "UJN1TAYEQ",
            "UHWC9PXBL",
            "UA14TGLTC"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "43ad617d-fb2c-4868-98b6-5a90be1532be",
        "type": "message",
        "text": "Here's live editing of an animation in motion by runtime coupling of the paint view and the animation view: <https://youtu.be/AnrlSqtpOkw?t=609>",
        "user": "U8A5MS6R1",
        "ts": "1574100973.005400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U8A5MS6R1",
            "ts": "1574100983.000000"
        },
        "thread_ts": "1574100925.005200",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "2a24ce3a-ce86-4bf5-8b3a-dce116d63dbb",
        "type": "message",
        "text": "It's possible because the level of _accidental_ complexity was low. When you build all the systems across all levels of the stack you can ensure each of them do their jobs well and there are no inefficiencies. If there are, you can change it. I'm not a fan of Apple but this is one of reasons they do so well technically (design, latency, etc) - their technology is vertically integrated. Here are some talks about the complexity crisis in software today and why it _seems_ baffling that you could develop complex systems in a few thousand lines of code:",
        "user": "UPMFG2571",
        "ts": "1574109726.006000",
        "team": "T5TCAFTA9",
        "thread_ts": "1574100925.005200",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "UPD5QQW81",
                    "UKP3B2J5D",
                    "U8A5MS6R1",
                    "UA14TGLTC"
                ],
                "count": 5
            }
        ]
    },
    {
        "client_msg_id": "44ce5d46-aec7-446f-8523-cdc65599e502",
        "type": "message",
        "text": "<https://www.youtube.com/watch?v=pW-SOdj4Kkk>",
        "user": "UPMFG2571",
        "ts": "1574109731.006200",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Jonathan Blow - Preventing the Collapse of Civilization (English only)",
                "title_link": "https://www.youtube.com/watch?v=pW-SOdj4Kkk",
                "author_name": "Alexander Bus",
                "author_link": "https://www.youtube.com/user/TrobbY54",
                "thumb_url": "https://i.ytimg.com/vi/pW-SOdj4Kkk/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Jonathan Blow - Preventing the Collapse of Civilization (English only)",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/pW-SOdj4Kkk?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=pW-SOdj4Kkk",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=pW-SOdj4Kkk"
            }
        ],
        "thread_ts": "1574100925.005200",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "4e2e989e-0d1a-4e6b-9443-e87cc8515c8a",
        "type": "message",
        "text": "<https://www.youtube.com/watch?v=kZRE7HIO3vk>",
        "user": "UPMFG2571",
        "ts": "1574109736.006500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "The Thirty Million Line Problem",
                "title_link": "https://www.youtube.com/watch?v=kZRE7HIO3vk",
                "author_name": "Handmade Hero",
                "author_link": "https://www.youtube.com/user/handmadeheroarchive",
                "thumb_url": "https://i.ytimg.com/vi/kZRE7HIO3vk/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: The Thirty Million Line Problem",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/kZRE7HIO3vk?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://www.youtube.com/watch?v=kZRE7HIO3vk",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=kZRE7HIO3vk"
            }
        ],
        "thread_ts": "1574100925.005200",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "dfa8e9fc-4662-4e64-8028-2e0156962df6",
        "type": "message",
        "text": "C Code on MC6809 was 40% the size of the same C code on MC68000.\n\nMC6809 was an 8-bit cpu, MC6800 was 16-bit.\n\nCode size for 16-bit cpus is larger than for 8-bit cpus (MC6809, Smalltalk-78 8-bit VM).\n\nProbably another big step from 8-bit to 64-bit.\n\nSome early Burroughs machine used Huffman encoding for instructions.  Smallest instruction was 2-bits (?).",
        "user": "UGWUJUZHT",
        "ts": "1574114930.006900",
        "team": "T5TCAFTA9",
        "thread_ts": "1574100925.005200",
        "parent_user_id": "U8A5MS6R1"
    }
]