[
    {
        "client_msg_id": "5f6da422-39f2-49bd-a498-f1e63e64338b",
        "type": "message",
        "text": "I've been using revision control software for a long time now. It lets me roll back changes. Let's say you created an abstraction a year ago. It seemed like a good idea at the time, but now it is getting in the way of the changes you want to make. Eliminating that abstraction is far more complicated than simply rolling back those changes you made a year ago, because this rollback invalidates a bunch of changes that have been made since you introduced the abstraction.\n\nI'm facing this issue right now in my current project. The abstraction isn't a function, it's a class inheritance hierarchy with a complex protocol. It's a typical OOP thing: to eliminate boilerplate, you define a set of subclasses, and override virtual functions according to various patterns. Now that the class hiearchy no longer works for me, it's going to be complicated to redesign the code to meet my new requirements. I don't see how I can push a button to get the job done, and I'm not sure how a slightly higher level view of my code change history will substantially help.",
        "user": "UJN1TAYEQ",
        "ts": "1574813024.231700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i8DZy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been using revision control software for a long time now. It lets me roll back changes. Let's say you created an abstraction a year ago. It seemed like a good idea at the time, but now it is getting in the way of the changes you want to make. Eliminating that abstraction is far more complicated than simply rolling back those changes you made a year ago, because this rollback invalidates a bunch of changes that have been made since you introduced the abstraction.\n\nI'm facing this issue right now in my current project. The abstraction isn't a function, it's a class inheritance hierarchy with a complex protocol. It's a typical OOP thing: to eliminate boilerplate, you define a set of subclasses, and override virtual functions according to various patterns. Now that the class hiearchy no longer works for me, it's going to be complicated to redesign the code to meet my new requirements. I don't see how I can push a button to get the job done, and I'm not sure how a slightly higher level view of my code change history will substantially help."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574794252.227300",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC",
                    "UHWC9PXBL"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "4612ee78-41dd-43fa-a654-3cbafe1ad4c0",
        "type": "message",
        "text": "Discounts are great - I get to add even more interesting reading material to my ever growing backlog that I'll never get to.",
        "user": "U8A5MS6R1",
        "ts": "1574814316.231900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vUE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Discounts are great - I get to add even more interesting reading material to my ever growing backlog that I'll never get to."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574694345.141000",
        "parent_user_id": "UBN9AFS0N",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJBAJNFLK",
                    "UBN9AFS0N"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "41b469d0-7143-4b98-aec3-42d3581407c2",
        "type": "message",
        "text": "<@UL3CJ7YKC> I think you're hitting the nail on the head.. abstractions are necessary, but they are also close to impossible to get right, and can do great damage to software",
        "user": "UHDQ62M4P",
        "ts": "1574818397.232300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j2ZfH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UL3CJ7YKC"
                            },
                            {
                                "type": "text",
                                "text": " I think you're hitting the nail on the head.. abstractions are necessary, but they are also close to impossible to get right, and can do great damage to software"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574787700.220500",
        "parent_user_id": "UL3CJ7YKC",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC",
                    "UBSMEUXAA"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "3db739c0-1f16-4d99-9456-7ffbacd7a9fc",
        "type": "message",
        "text": "you might like <http://strlen.com/restructor/> which is a project I undertook when I realized we shouldn't leave abstraction entirely to programmers - and that they need some help being able to remove them when things change",
        "user": "UHDQ62M4P",
        "ts": "1574818465.232500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yM5o",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you might like "
                            },
                            {
                                "type": "link",
                                "url": "http://strlen.com/restructor/"
                            },
                            {
                                "type": "text",
                                "text": " which is a project I undertook when I realized we shouldn't leave abstraction entirely to programmers - and that they need some help being able to remove them when things change"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574787700.220500",
        "parent_user_id": "UL3CJ7YKC",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC",
                    "UAL7940NM"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "a336f120-ebb1-42d0-a758-a30eab4c0fbb",
        "type": "message",
        "text": "John Ousterhout argues in _A Philosophy of Software Design_ that abstractions should be \"deep\" - simple interface, complex implementation. Such abstraction adds value. Small methods are often \"shallow\" (method declaration is about as complex as its implementation) so they don't add much value.",
        "user": "UNKSN1MRQ",
        "ts": "1574841102.233100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k5Wd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "John Ousterhout argues in "
                            },
                            {
                                "type": "text",
                                "text": "A Philosophy of Software Design",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that abstractions should be \"deep\" - simple interface, complex implementation. Such abstraction adds value. Small methods are often \"shallow\" (method declaration is about as complex as its implementation) so they don't add much value."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574787700.220400",
        "parent_user_id": "UL3CJ7YKC",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC",
                    "UBSMEUXAA"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "cb9aae7f-f8cf-4bd8-a0f1-3064ae43171b",
        "type": "message",
        "text": "<@UCUSW7WVD> Thanks for your response, you have some really good points. Will check out your posts later as well!",
        "user": "UL3CJ7YKC",
        "ts": "1574853658.233600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dN7io",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for your response, you have some really good points. Will check out your posts later as well!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574787700.220500",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "90aeaf8f-2cd9-4280-952b-6063fe6bf444",
        "type": "message",
        "text": "<@UHDQ62M4P> I had a similar idea earlier (like reconstructor), it is interesting people made it real!",
        "user": "UL3CJ7YKC",
        "ts": "1574853698.233800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1574853712.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XqIJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UHDQ62M4P"
                            },
                            {
                                "type": "text",
                                "text": " I had a similar idea earlier (like reconstructor), it is interesting people made it real!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574787700.220500",
        "parent_user_id": "UL3CJ7YKC",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UHDQ62M4P"
                ],
                "count": 1
            }
        ]
    },
    {
        "type": "message",
        "text": "Got these:",
        "files": [
            {
                "id": "FQQ8Q7XDH",
                "created": 1574875789,
                "timestamp": 1574875789,
                "name": "image.png",
                "title": "image.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U8A5MS6R1",
                "editable": false,
                "size": 102290,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-FQQ8Q7XDH/image.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-FQQ8Q7XDH/download/image.png",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-FQQ8Q7XDH-c8f25aa7e7/image_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-FQQ8Q7XDH-c8f25aa7e7/image_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-FQQ8Q7XDH-c8f25aa7e7/image_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 345,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-FQQ8Q7XDH-c8f25aa7e7/image_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 460,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-FQQ8Q7XDH-c8f25aa7e7/image_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-FQQ8Q7XDH-c8f25aa7e7/image_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 690,
                "image_exif_rotation": 1,
                "original_w": 748,
                "original_h": 717,
                "thumb_tiny": "AwAuADDQ+b1/Sjn1P5Uc+n60o+mKADP1/KloooAKB7iijuaAG49c/rS4HvRj3NAGKADaPf8AOlAxRRQAU0bu4706jmgBu0Z6fyo2j+7S7RQBjpQAbV9BS0UUAI/3G+lUo871+oq6RkEetQrbsGB3Dg0Af//Z",
                "permalink": "https://futureofcoding.slack.com/files/U8A5MS6R1/FQQ8Q7XDH/image.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-FQQ8Q7XDH-cb2b8d05dd",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": true,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mqP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Got these:"
                            }
                        ]
                    }
                ]
            }
        ],
        "user": "U8A5MS6R1",
        "display_as_bot": false,
        "ts": "1574875792.234400",
        "client_msg_id": "02349c9a-f7c9-4f06-8cf4-3d975d94b817",
        "thread_ts": "1574694345.141000",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "94e975b1-1ce9-4290-8cd2-acce9289e76b",
        "type": "message",
        "text": "Earlier today <@U6KQ2S410> tweeted this enjoyable blog post, _Your Debugger Sucks_ [1], which references the Pernosco debugger [2]. I'm familiar with omniscient debuggers like Chronomancer, but this is the first I've heard of Pernosco, and it seems very neat. Omniscient debuggers take a step beyond time travel debugging, allowing instant exploration _and comparison_ of program state across time. The video on the home page gives a sense of Pernosco's UI (not great), but the About page is what I found most interesting \u2014 a very cleanly written and compelling articulation of their vision, and a taste of what we've all been missing.\n\n[1] <https://robert.ocallahan.org/2019/11/your-debugger-sucks.html>\n[2] <https://pernos.co>",
        "user": "UC2A2ARPT",
        "ts": "1574877337.244600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1574920090.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "39T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Earlier today "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " tweeted this enjoyable blog post, "
                            },
                            {
                                "type": "text",
                                "text": "Your Debugger Sucks",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " [1], which references the Pernosco debugger [2]. I'm familiar with omniscient debuggers like Chronomancer, but this is the first I've heard of Pernosco, and it seems very neat. Omniscient debuggers take a step beyond time travel debugging, allowing instant exploration "
                            },
                            {
                                "type": "text",
                                "text": "and comparison",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of program state across time. The video on the home page gives a sense of Pernosco's UI (not great), but the About page is what I found most interesting \u2014 a very cleanly written and compelling articulation of their vision, and a taste of what we've all been missing.\n\n[1] "
                            },
                            {
                                "type": "link",
                                "url": "https://robert.ocallahan.org/2019/11/your-debugger-sucks.html"
                            },
                            {
                                "type": "text",
                                "text": "\n[2] "
                            },
                            {
                                "type": "link",
                                "url": "https://pernos.co"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574877337.244600",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1574885872.247000",
        "reply_users": [
            "U8A5MS6R1"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1",
                    "UD31LGQKB",
                    "UML4ZEKDK"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "a4d6aff4-f942-4443-b2a8-6235e1a9b8a5",
        "type": "message",
        "text": "Has anyone made a \u201cvisual\u201d (or otherwise more user friendly) programming tool for regular expressions?",
        "user": "ULM3U6275",
        "ts": "1574880983.245400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "woQi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has anyone made a \u201cvisual\u201d (or otherwise more user friendly) programming tool for regular expressions?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574880983.245400",
        "reply_count": 7,
        "reply_users_count": 4,
        "latest_reply": "1575070607.315700",
        "reply_users": [
            "UBN9AFS0N",
            "U8A5MS6R1",
            "UAL7940NM",
            "UEQ6M68H0"
        ],
        "subscribed": true,
        "last_read": "1575070607.315700",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "1be80ffd-0252-4279-967b-376d318a94de",
        "type": "message",
        "text": "I've been thinking about it, and would like to try something inspired by this: <https://rosie-lang.org/>",
        "user": "UBN9AFS0N",
        "ts": "1574881883.245600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gMp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been thinking about it, and would like to try something inspired by this: "
                            },
                            {
                                "type": "link",
                                "url": "https://rosie-lang.org/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574880983.245400",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "708fb319-3911-497b-b81f-4b506ee1f67f",
        "type": "message",
        "text": "<https://thestrangeloop.com/2018/rosie-pattern-language-improving-on-50-year-old-regular-expression-technology.html>",
        "user": "UBN9AFS0N",
        "ts": "1574881895.245800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Rosie Pattern Language: Improving on 50-Year Old Regular Expression Technology - Strange Loop",
                "title_link": "https://thestrangeloop.com/2018/rosie-pattern-language-improving-on-50-year-old-regular-expression-technology.html",
                "text": "Strange Loop (Sept 12-14, 2019 - St. Louis) is a conference for software developers covering programming langs, databases, distributed systems, security, machine learning, creativity, and more!",
                "fallback": "Rosie Pattern Language: Improving on 50-Year Old Regular Expression Technology - Strange Loop",
                "thumb_url": "https://s3.amazonaws.com/strangeloop/uploadedimgs/prod/strange_loop_logo_final_color_no_year_square.jpg",
                "from_url": "https://thestrangeloop.com/2018/rosie-pattern-language-improving-on-50-year-old-regular-expression-technology.html",
                "thumb_width": 1700,
                "thumb_height": 1700,
                "service_icon": "https://thestrangeloop.com/favicon.ico",
                "service_name": "thestrangeloop.com",
                "id": 1,
                "original_url": "https://thestrangeloop.com/2018/rosie-pattern-language-improving-on-50-year-old-regular-expression-technology.html"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qI4d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://thestrangeloop.com/2018/rosie-pattern-language-improving-on-50-year-old-regular-expression-technology.html"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574880983.245400",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "00d4753a-63be-43b7-b4d6-b18744da76d5",
        "type": "message",
        "text": "Also see <https://ohmlang.github.io/editor/> - not regex specifically but PEG based. (I kinda like PEGs more anyway). Click on the examples to see the parse tree that shows the associated rules on hover.",
        "user": "U8A5MS6R1",
        "ts": "1574884470.246200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V2e6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also see "
                            },
                            {
                                "type": "link",
                                "url": "https://ohmlang.github.io/editor/"
                            },
                            {
                                "type": "text",
                                "text": " - not regex specifically but PEG based. (I kinda like PEGs more anyway). Click on the examples to see the parse tree that shows the associated rules on hover."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574880983.245400",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "4081764b-c425-4e73-8da5-61a2f39699a7",
        "type": "message",
        "text": "Oh just read - Rosie is PEG based too :sunglasses:",
        "user": "U8A5MS6R1",
        "ts": "1574884586.246400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RA6O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh just read - Rosie is PEG based too "
                            },
                            {
                                "type": "emoji",
                                "name": "sunglasses"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574880983.245400",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "46e4a56c-2f9b-4f17-9839-3086ae5c2a44",
        "type": "message",
        "text": "There's also some visual regex tools e.g. <https://www.debuggex.com/>",
        "user": "U8A5MS6R1",
        "ts": "1574884796.246600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "   Debuggex: Online visual regex tester. JavaScript, Python, and PCRE. ",
                "title_link": "https://www.debuggex.com/",
                "text": "Test your regex by visualizing it with a live editor. JavaScript, Python, and PCRE.",
                "fallback": "   Debuggex: Online visual regex tester. JavaScript, Python, and PCRE. ",
                "from_url": "https://www.debuggex.com/",
                "service_name": "debuggex.com",
                "id": 1,
                "original_url": "https://www.debuggex.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dC5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's also some visual regex tools e.g. "
                            },
                            {
                                "type": "link",
                                "url": "https://www.debuggex.com/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574880983.245400",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b5e7a5d4-e4fa-4316-8258-e92e195086f6",
        "type": "message",
        "text": "Yeah! This point specifically is :100:\n\n\n&gt; Traditional debuggers have an notion of \"the current point in time\" that is tied to heavyweight internal state (typically a set of running processes). In Pernosco, \"the current point in time\" is still a useful UI concept (we call it the focus), but it is merely a parameter to queries to our omniscient database, so we can change it freely and instantly.",
        "user": "U8A5MS6R1",
        "ts": "1574885872.247000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8SKFF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah! This point specifically is "
                            },
                            {
                                "type": "emoji",
                                "name": "100"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Traditional debuggers have an notion of \"the current point in time\" that is tied to heavyweight internal state (typically a set of running processes). In Pernosco, \"the current point in time\" is still a useful UI concept (we call it the focus), but it is merely a parameter to queries to our omniscient database, so we can change it freely and instantly."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574877337.244600",
        "parent_user_id": "UC2A2ARPT"
    }
]