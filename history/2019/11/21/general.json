[
    {
        "client_msg_id": "f2545e3c-e205-4050-8457-9b3e3d054af1",
        "type": "message",
        "text": "<https://blog.acolyer.org/2019/11/20/local-first-software/> (on HN right now)",
        "user": "U8A5MS6R1",
        "ts": "1574295815.087400",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "the morning paper",
                "service_url": "http://blog.acolyer.org",
                "title": "Local-first software: you own your data, in spite of the\u00a0cloud",
                "title_link": "https://blog.acolyer.org/2019/11/20/local-first-software/",
                "author_name": "adriancolyer",
                "author_link": "https://blog.acolyer.org/author/adriancolyer/",
                "thumb_url": "https://adriancolyer.files.wordpress.com/2019/11/localfirst-table-1.jpeg?w=640&fit=200%2C150",
                "thumb_width": 200,
                "thumb_height": 117,
                "text": "Local-first software: you own your data, in spite of the cloud Kleppmann et al., Onward! &rsquo;19\nWatch out! If you start reading this paper you could be lost for hours following all the interesting links and ideas, and end up even more dissatisfied than you already are with the state of software today. You might also be inspired to help work towards a better future. I&rsquo;m all in :).\nThe rock or the hard place?\nOn the one-hand we have &lsquo;cloud apps&rsquo; which make it easy to access our work from multiple devices and to collaborate online with others (e.g. Google Docs, Trello, &hellip;). On the other hand we have good old-fashioned native apps that you install on your operating system (a dying breed? See e.g. Brendan Burns&rsquo; recent tweet). Somewhere in the middle, but not-quite perfect, are online (browser-based) apps with offline support.\nThe primary issue with cloud apps (the SaaS model) is ownership of the data.\nUnfortunately, cloud apps are problematic in this regard. Although they let you access your data anywhere, all data access must go via the server, and you can only do the things that the server will let you do. In a sense, you don&rsquo;t have full ownership of that data&mdash; the cloud provider does.\nServices do get shut down1, or pricing may change to your disadvantage, or the features evolve in a way you don&rsquo;t like and there&rsquo;s no way to keep using an older version.\nWith a traditional OS app2 you have much more control over the data (the files on your file system at least, which if you&rsquo;re lucky might even be in an open format). But you have other problems, such as easy access across all of your devices, and the ability to collaborate with others.\nLocal-first software ideals\nThe authors coin the phrase &ldquo;local-first software&rdquo; to describe software that retains the ownership properties of old-fashioned applications, with the sharing and collaboration properties of cloud applications.\nIn local-first applications&hellip; we treat the copy of the data on your local device &mdash; your laptop, tablet, or phone &mdash; as the primary copy. Servers still exist, but they hold secondary copies of your data in order to assist with access from multiple devices. As we shall see, this change in perspective has profound implications&hellip;\nGreat local-first software should have seven key properties.\nIt should be fast. We don&rsquo;t want to make round-trips to a server to interact with the application. Operations can be handled by reading and writing to the local file system, with data synchronisation happening in the background.\nIt should work across multiple devices. Local-first apps keep their data in local storage on each device, but the data is also synchronised across all the devices on which a user works.\nIt should work without a network. This follows from reading and writing to the local file system, with data synchronisation happening in the background when a connection is available. That connection could be peer-to-peer across devices, and doesn&rsquo;t have to be over the Internet.\nIt should support collaboration. &ldquo;In local-first apps, our ideal is to support real-time collaboration that is on par with the best cloud apps today, or better. Achieving this goal is one of the biggest challenges in realizing local-first software, but we believe it is possible.&ldquo;\nIt should support data access for all time. On one level you get this if you retain a copy of the original application (and an environment capable of executing it). Even better is if the local app using open / long lasting file formats. See e.g. the Library of Congress recommended archival formats.\nIt should be secure and private by default. &ldquo;Local-first apps can use end-to-end encryption so that any servers that store a copy of your files only hold encrypted data they cannot read.&rdquo;\nIt should give the user full ownership and control of their data. &ldquo;&hellip;we mean ownership in the sense of user agency, autonomy, and control over data. You should be able to copy and modify data in any way, write down any thought, and no company should restrict what you are allowed to do.&ldquo;\nHow close can we get today?\nSection 3 in the paper shows how a variety of different apps/technologies stack up against the local-first ideals.\n\nThe combination of Git and GitHub gets closest, but nothing meets the bar across the board.\n&hellip; we speculate that web apps will never be able to provide all the local-first properties we are looking for, due to the fundamental thin-client nature of the platform. By choosing to build a web app, you are choosing the path of data belonging to you and your company, not to your users.\nMobile apps that use local storage combined with a backend service such as Firebase and its Cloud Firestore take us closer to the local-first ideal, depending on the way the local data is treated by the application. CouchDB also gets an honourable mention in this part of the paper, only being let down by the difficulty of getting application-level conflict resolution right.\nCRDTs to the rescue?\nWe have found some technologies that appear to be promising foundations for local-first ideals. Most notably the family of distributed systems algorithms called Conflict-free Replicated Data Types (CRDTs)&hellip; the special thing about them is that they are multi-user from the ground up&hellip; CRDTs have some similarity to version control systems like Git, except that they operate on richer data types than text files.\nWhile most industrial usage of CRDTs has been in server-centric computing, the Ink &amp; Switch research lab have been exploring how to build collaborative local-first client applications built on top of CRDTs. One of the fruits of this work is an open-source JavaScript CDRT implementation called Automerge which brings CRDT-style merge operations to JSON documents. Used in conjunction with the dat:// networking stack the result is Hypermerge.\nJust as packet switching was an enabling technology for the Internet and the web, or as capacitive touchscreens were an enabling technology for smart phones, so we think CRDTs may be the foundation for collaborative software that gives users full ownership of their data.\nThe brave new world\nThe authors built three (fairly advanced) prototypes using this CRDT stack: a Trello clone called Trellis, a collaborative drawing program, and a &lsquo;mixed-media workspace&rsquo; called PushPin (Evernote meets Pinterest&hellip;).\nIf you have 2 minutes and 10 seconds available, it&rsquo;s well worth watching this short video showing Trellis in action. It really brings the vision to life.\nIn section 4.2.4 of the paper the authors share a number of their learnings from building these systems:\nCRDT technology works &ndash; the Automerge library did a great job and was easy to use.\nThe user experience with offline work is splendid.\nCRDTs combine well with reactive programming to give a good developer experience. &ldquo;The result of [this combination] was that all of our prototypes realized real-time collaboration and full offline capability with little effort from the application developer.&rdquo;\nIn practice, conflicts are not as significant a problem as we feared. Conflicts are mitigated on two levels: first, Automerge tracks changes at a fine-grained level, and second, &ldquo;users have an intuitive sense of human collaboration and avoid creating conflicts with their collaborators.&rdquo;\nVisualising document history is important (see the Trellis video!).\nURLs are a good mechanism for sharing\nCloud servers still have their place for discovery, backup, and burst compute.\nSome challenges:\nIt can be hard to reason about how data moves between peers.\nCRDTs accumulate a large change history, which creates performance problems. (This is an issue with state-based CRDTs, as opposed to operation-based CRDTs).\nPerformance and memory/disk usage quickly became a problem because CRDTs store all hist\u2026",
                "fallback": "the morning paper Link: Local-first software: you own your data, in spite of the&nbsp;cloud",
                "from_url": "https://blog.acolyer.org/2019/11/20/local-first-software/",
                "service_icon": "https://secure.gravatar.com/blavatar/09326a066a08237015d6b84f026d36ae?s=114",
                "id": 1,
                "original_url": "https://blog.acolyer.org/2019/11/20/local-first-software/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D5mX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://blog.acolyer.org/2019/11/20/local-first-software/"
                            },
                            {
                                "type": "text",
                                "text": " (on HN right now)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574295815.087400",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1576732055.000800",
        "reply_users": [
            "UKQT95T1V"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMVFWPZ36",
                    "UA14TGLTC",
                    "UJVEPCVT6",
                    "UE1JQM9HQ",
                    "UPVBV34EL",
                    "UJ6LDMMN0",
                    "UJBAJNFLK",
                    "UHWC9PXBL",
                    "UPHDH2F0C",
                    "UML4ZEKDK"
                ],
                "count": 10
            },
            {
                "name": "heart",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "28cf5b6e-e7f3-4586-9abf-251fe6813f66",
        "type": "message",
        "text": "This article speaks to the idea that it should not look or feel like the tools the pros use because they will reject it\n\n<https://mkremins.github.io/blog/creative-tools-non-creators/>",
        "user": "UHZNB3HRP",
        "ts": "1574345801.089100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Creative tools for non-creators",
                "title_link": "https://mkremins.github.io/blog/creative-tools-non-creators/",
                "text": "I keep coming back to the idea of tools that unlock creativity in people who don\u2019t ordinarily think of themselves as creative. Yesterday, some of my scattered thoughts on the subject spontaneously crystallized into something resembling a coherent ...",
                "fallback": "Creative tools for non-creators",
                "from_url": "https://mkremins.github.io/blog/creative-tools-non-creators/",
                "service_name": "mkremins.github.io",
                "id": 1,
                "original_url": "https://mkremins.github.io/blog/creative-tools-non-creators/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DqWzl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This article speaks to the idea that it should not look or feel like the tools the pros use because they will reject it\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://mkremins.github.io/blog/creative-tools-non-creators/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1573757437.378000",
        "parent_user_id": "UEP7RL0HX"
    },
    {
        "client_msg_id": "c7f208af-1bae-4ba7-8e81-79f1aa267a0f",
        "type": "message",
        "text": "What guides your choice of FoC project direction? For example, are you scratching an itch, or trying to maximize global creator productivity? I\u2019m guessing those result in very different (at least initial) directions, though we tend to assume the former will result in the later.\n\nFor example, I\u2019m a big fan of structured code editors and it was one of the first things I worked on, but in retrospect I\u2019d put them low on the list of things that could significantly increase creator productivity. I chose it because it was new and neat, not because it was particularly helpful.",
        "user": "ULM3U6275",
        "ts": "1574358709.093500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1574369845.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HTFU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What guides your choice of FoC project direction? For example, are you scratching an itch, or trying to maximize global creator productivity? I\u2019m guessing those result in very different (at least initial) directions, though we tend to assume the former will result in the later.\n\nFor example, I\u2019m a big fan of structured code editors and it was one of the first things I worked on, but in retrospect I\u2019d put them low on the list of things that could significantly increase creator productivity. I chose it because it was new and neat, not because it was particularly helpful."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574358709.093500",
        "reply_count": 15,
        "reply_users_count": 8,
        "latest_reply": "1574531934.113100",
        "reply_users": [
            "UC2A2ARPT",
            "UJN1TAYEQ",
            "UNBPP291C",
            "UCUSW7WVD",
            "ULM3U6275",
            "UEQ6M68H0",
            "U5STGTB3J",
            "UJ6LDMMN0"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMVFWPZ36",
                    "UA14TGLTC",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "bd0efd3c-dcc3-4665-815c-f319fdc6c4ec",
        "type": "message",
        "text": "For me (making Hest), it's 1/3rd \"This is what my company needs to solve a business problem\", 1/3rd \"I see an obvious shortcoming in existing tools\", 1/3rd \"Making the tool I wish I already had\".",
        "user": "UC2A2ARPT",
        "ts": "1574359504.094500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vo5d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For me (making Hest), it's 1/3rd \"This is what my company needs to solve a business problem\", 1/3rd \"I see an obvious shortcoming in existing tools\", 1/3rd \"Making the tool I wish I already had\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574358709.093500",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "U6FKVSVCK",
                    "UMVFWPZ36",
                    "UA14TGLTC",
                    "UHWC9PXBL"
                ],
                "count": 5
            }
        ]
    },
    {
        "client_msg_id": "15002703-7bef-4a10-b603-922313562055",
        "type": "message",
        "text": "For me (Curv), I am scratching several itches.\n\nI'm building a tool for myself that fixes shortcomings in the other tools I was using at the time I began. I wanted to increase my own productivity, and be able to create things in Curv that were impossibly difficult in OpenSCAD.\n\nMy secondary motivation is that I think that pure functional programming is the future. But Haskell has this very steep learning curve, and you spend all of your time appeasing the type system. Haskell is great if solving type system puzzles is super enjoyable and is your main motivation for programming. But that's not the reason I see value in pure functional programming. I think that properly packaged, pure functional programming is easier than OOP and more powerful. The language I want must be simpler, easier to use, and more dynamic, than Haskell. I didn't see any such languages out there when I started, so I decided to build one in order to demonstrate the idea.\n\nA simple, easy to use language with a super powerful model for graphics programming is exactly what I would have loved to have as a kid.",
        "user": "UJN1TAYEQ",
        "ts": "1574367273.095100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZId",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For me (Curv), I am scratching several itches.\n\nI'm building a tool for myself that fixes shortcomings in the other tools I was using at the time I began. I wanted to increase my own productivity, and be able to create things in Curv that were impossibly difficult in OpenSCAD.\n\nMy secondary motivation is that I think that pure functional programming is the future. But Haskell has this very steep learning curve, and you spend all of your time appeasing the type system. Haskell is great if solving type system puzzles is super enjoyable and is your main motivation for programming. But that's not the reason I see value in pure functional programming. I think that properly packaged, pure functional programming is easier than OOP and more powerful. The language I want must be simpler, easier to use, and more dynamic, than Haskell. I didn't see any such languages out there when I started, so I decided to build one in order to demonstrate the idea.\n\nA simple, easy to use language with a super powerful model for graphics programming is exactly what I would have loved to have as a kid."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574358709.093500",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275",
                    "UMVFWPZ36",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "aa20716f-2892-4e1e-9c59-79ff7cbcfc9c",
        "type": "message",
        "text": "Honestly?\n\nLaziness and annoyance.\nI\u2019m lazy. I don\u2019t wanna do in 7 clicks or 20 commands what should be done in 3 - both as a user and developer.  I don\u2019t wanna fight configurations and toolings, I want to express my ideas as I create them in my head, not as someone else imagined them. I\u2019m annoyed when I see the huge amount of boilerplate and configuration that goes into making even the most basic thing, like who the fuck thinks this is a good path for software development culture? I  don\u2019t want to spend half of my day trying to set up the proper configs so I can start working, I don\u2019t wanna spend half of my day rewriting the same models the backend developers have or just connect UI to REST and call it software development. Software costs a ton because we keep writing the same boilerplate over and over again on each side that\u2019s involved into the process.\n\nI\u2019m terribly annoyed that instead of seeing development culture evolve, it\u2019s just rehashing and selling same old shit under new guises. Instead of focusing on developing, I\u2019d say 50% of the development community is focused on self-promotion and \u201coh look at us we\u2019re experts because we write boilerplate\u201d. I hate going to conferences now because they\u2019re so full of marketing, boilerplate and blatant self-promotion instead of being about code and ideas.\n\nThis culture is forcing talented developers into highly specialized factory workers that work with only specific frameworks and can\u2019t see out of their own framework\u2019s comfort zone.  I don\u2019t like that. I want to unbox everyone from that box.\n\nSo I let the laziness and annoyance guide me - I see what I don\u2019t like and think should be done in a better way and the annoyance with current culture drives me forward to change it and make a tool that\u2019s not gonna be a specialized tool for a special subset of people, but something that everyone can use, no matter what their development domain is.",
        "user": "UNBPP291C",
        "ts": "1574367648.095300",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UNBPP291C",
            "ts": "1574367827.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kbKk0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Honestly?\n\nLaziness and annoyance.\nI\u2019m lazy. I don\u2019t wanna do in 7 clicks or 20 commands what should be done in 3 - both as a user and developer.  I don\u2019t wanna fight configurations and toolings, I want to express my ideas as I create them in my head, not as someone else imagined them. I\u2019m annoyed when I see the huge amount of boilerplate and configuration that goes into making even the most basic thing, like who the fuck thinks this is a good path for software development culture? I  don\u2019t want to spend half of my day trying to set up the proper configs so I can start working, I don\u2019t wanna spend half of my day rewriting the same models the backend developers have or just connect UI to REST and call it software development. Software costs a ton because we keep writing the same boilerplate over and over again on each side that\u2019s involved into the process.\n\nI\u2019m terribly annoyed that instead of seeing development culture evolve, it\u2019s just rehashing and selling same old shit under new guises. Instead of focusing on developing, I\u2019d say 50% of the development community is focused on self-promotion and \u201coh look at us we\u2019re experts because we write boilerplate\u201d. I hate going to conferences now because they\u2019re so full of marketing, boilerplate and blatant self-promotion instead of being about code and ideas.\n\nThis culture is forcing talented developers into highly specialized factory workers that work with only specific frameworks and can\u2019t see out of their own framework\u2019s comfort zone.  I don\u2019t like that. I want to unbox everyone from that box.\n\nSo I let the laziness and annoyance guide me - I see what I don\u2019t like and think should be done in a better way and the annoyance with current culture drives me forward to change it and make a tool that\u2019s not gonna be a specialized tool for a special subset of people, but something that everyone can use, no matter what their development domain is."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574358709.093500",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "ULM3U6275",
                    "UE6EFEPTQ",
                    "UA14TGLTC",
                    "UHWC9PXBL",
                    "UML4ZEKDK"
                ],
                "count": 5
            }
        ]
    },
    {
        "client_msg_id": "93af28be-88b4-41b0-8bc5-293cf1278494",
        "type": "message",
        "text": "We all think our experiences are shared by others. And we expect scratching our own itch to also help others. We're often wrong, and we often over-estimate the \"market size of the opportunity\". But the original question seems fundamentally impossible to answer in the first person and present tense with anything but \"both\".",
        "user": "UCUSW7WVD",
        "ts": "1574375253.096800",
        "team": "T5TCAFTA9",
        "thread_ts": "1574358709.093500",
        "parent_user_id": "ULM3U6275"
    }
]