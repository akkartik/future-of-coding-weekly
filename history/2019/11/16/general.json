[
    {
        "client_msg_id": "6f82e5ac-de7d-4f6f-b161-4937652134a9",
        "type": "message",
        "text": "<@U5STGTB3J>\nYeah, I deal with a large number of edge - I\u2019m trying to stay flexible with the data model and give the possibility to extend  my \u201ceditor\u201d with custom models.\n\nI was thinking of a graph database but wanted a temporary in-memory solution so I made this, now I\u2019m wondering if there\u2019s similar solutions I can look up because I find it quite good to use.\n\nMy usecase, for example:\n\nYou define a model for your database, by let\u2019s say, using graphql:\n\n```\ntype User{\n id: ID!,\nemail: String,\n   name: String,\n   post: Post\n}\ntype Post {\n  id: ID!\n  content: String\n}\n```\nIt\u2019s saved in:  Types set (I call them dimensions, gives more context, hope you don\u2019t mind) as User, Post and the same elements in graphql dimension have relationships to their properties which, when in type dimension are connected to String, ID, etc\u2026\n\nNow, let\u2019s say I wanna create a postgresql database - I just create the postgresql dimension from Graphql dimension and have the scheme generated by using transformations from graphql-postgres dimension.\nThen in, let\u2019s say, kotlin backend dimension, I can generate my backend Kotlin entities, queries and etc by just creating a Kotlin backend dimension and automatically having it filled out by having transformation rules applied (graphql-kotlin backend transformation) - and when I update a definition in the graphql dimension, the changes can be propagated across all sets and say \u201chey, this update broke this\u201d and automatically have changes applied.",
        "user": "UNBPP291C",
        "ts": "1573916048.452200",
        "team": "T5TCAFTA9",
        "thread_ts": "1573806919.405700",
        "parent_user_id": "UNBPP291C"
    },
    {
        "client_msg_id": "6146192a-ed28-4c3e-ae80-86cf25bb23f8",
        "type": "message",
        "text": "I am still thinking about the \u201cVisual DSL\u201d based testing. What I think atm is that Dependent Typed languages will enable that very easily, but in anything \u201cbelow\u201d DT it won\u2019t be easy to implement.\n\n\u201cOn the fly\u201d, logical checking of related things is needed.",
        "user": "UL3CJ7YKC",
        "ts": "1573919807.454200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1573919927.000000"
        }
    },
    {
        "client_msg_id": "c70bf292-624d-4c10-9289-2d3ebfa05019",
        "type": "message",
        "text": "Thanks for the responses, what I have found is Dependent Types are needed for my use case",
        "user": "UL3CJ7YKC",
        "ts": "1573921609.454600",
        "team": "T5TCAFTA9",
        "thread_ts": "1573746680.364400",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "d77d2fca-1b4c-45a1-9309-57591192ff7a",
        "type": "message",
        "text": "<https://twitter.com/TimSweeneyEpic/status/1195743672899383296?s=09>",
        "user": "U8A5MS6R1",
        "ts": "1573925494.455000",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "fallback": "<https://twitter.com/TimSweeneyEpic|@TimSweeneyEpic>: There are really only two types of computations: calculating stuff about an unchanging thing, and calculating a new version of a thing that is changing over time. Recognizing this simplified debate about functional versus imperative programming.",
                "ts": 1573922482,
                "author_name": "Tim Sweeney",
                "author_link": "https://twitter.com/TimSweeneyEpic/status/1195743672899383296",
                "author_icon": "https://pbs.twimg.com/profile_images/795819168629198849/SBY3ARvZ_normal.jpg",
                "author_subname": "@TimSweeneyEpic",
                "text": "There are really only two types of computations: calculating stuff about an unchanging thing, and calculating a new version of a thing that is changing over time. Recognizing this simplified debate about functional versus imperative programming.",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "from_url": "https://twitter.com/TimSweeneyEpic/status/1195743672899383296?s=09",
                "id": 1,
                "original_url": "https://twitter.com/TimSweeneyEpic/status/1195743672899383296?s=09",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "thread_ts": "1573925494.455000",
        "reply_count": 12,
        "reply_users_count": 7,
        "latest_reply": "1574076235.000300",
        "reply_users": [
            "UHWC9PXBL",
            "UE6EFEPTQ",
            "UCGAK10LS",
            "U8A5MS6R1",
            "U6KQ2S410",
            "ULM3U6275",
            "UEQ6M68H0"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UJVEPCVT6",
                    "UKP3B2J5D"
                ],
                "count": 2
            },
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    }
]