[
    {
        "client_msg_id": "633A9E3B-4F0C-4F46-BD88-887033970D05",
        "type": "message",
        "text": "this sounds similar to datomic, fulcro/pathos, and materialized views in apache samza. links incoming",
        "user": "UHWC9PXBL",
        "ts": "1573947308.464300",
        "team": "T5TCAFTA9",
        "thread_ts": "1573806919.405700",
        "parent_user_id": "UNBPP291C"
    },
    {
        "client_msg_id": "DAEBED3B-EA54-4C02-AD15-CCBFD6C4D524",
        "type": "message",
        "text": "<https://youtu.be/fU9hR3kiOK0>",
        "user": "UHWC9PXBL",
        "ts": "1573947330.464600",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "\"Turning the database inside out with Apache Samza\" by Martin Kleppmann",
                "title_link": "https://youtu.be/fU9hR3kiOK0",
                "author_name": "Strange Loop",
                "author_link": "https://www.youtube.com/channel/UC_QIfHvN9auy2CoOdSfMWDw",
                "thumb_url": "https://i.ytimg.com/vi/fU9hR3kiOK0/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: \"Turning the database inside out with Apache Samza\" by Martin Kleppmann",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/fU9hR3kiOK0?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/fU9hR3kiOK0",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/fU9hR3kiOK0"
            }
        ],
        "thread_ts": "1573806919.405700",
        "parent_user_id": "UNBPP291C"
    },
    {
        "client_msg_id": "009E8527-4B97-4073-B1D4-25D6BD39610F",
        "type": "message",
        "text": "<https://youtu.be/yyVKf2U8YVg> &lt;\u2014 closest",
        "user": "UHWC9PXBL",
        "ts": "1573947354.465100",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Scaling Full-Stack Applications - Wilker Lucio da Silva",
                "title_link": "https://youtu.be/yyVKf2U8YVg",
                "author_name": "ClojureTV",
                "author_link": "https://www.youtube.com/user/ClojureTV",
                "thumb_url": "https://i.ytimg.com/vi/yyVKf2U8YVg/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Scaling Full-Stack Applications - Wilker Lucio da Silva",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/yyVKf2U8YVg?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/yyVKf2U8YVg",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/yyVKf2U8YVg"
            }
        ],
        "thread_ts": "1573806919.405700",
        "parent_user_id": "UNBPP291C"
    },
    {
        "client_msg_id": "5216E68E-C0DE-4051-BB3B-43614E34C37D",
        "type": "message",
        "text": "<https://youtu.be/Pz_NvY1kw6I>",
        "user": "UHWC9PXBL",
        "ts": "1573947383.465500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "The Design of Datomic - Rich Hickey",
                "title_link": "https://youtu.be/Pz_NvY1kw6I",
                "author_name": "Zhang Jian",
                "author_link": "https://www.youtube.com/channel/UCqbkjqnDE5zWY3f453mlBIA",
                "thumb_url": "https://i.ytimg.com/vi/Pz_NvY1kw6I/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: The Design of Datomic - Rich Hickey",
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https://www.youtube.com/embed/Pz_NvY1kw6I?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "from_url": "https://youtu.be/Pz_NvY1kw6I",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/Pz_NvY1kw6I"
            }
        ],
        "thread_ts": "1573806919.405700",
        "parent_user_id": "UNBPP291C"
    },
    {
        "client_msg_id": "6D4B07EF-55B4-4406-B2E4-216E5E07774B",
        "type": "message",
        "text": "i am really interested in this work on both the db level and the frontend level so i\u2019m excited to hear more about your implementation!",
        "user": "UHWC9PXBL",
        "ts": "1573947420.466800",
        "team": "T5TCAFTA9",
        "thread_ts": "1573806919.405700",
        "parent_user_id": "UNBPP291C"
    },
    {
        "client_msg_id": "8F4F18B2-ED53-42D1-A3CC-AB28C6830392",
        "type": "message",
        "text": "interesting language mentioned in the replies: <https://github.com/mrakgr/The-Spiral-Language/blob/master/readme.md>",
        "user": "UHWC9PXBL",
        "ts": "1573947685.471000",
        "team": "T5TCAFTA9",
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "45e72ac0-0f52-4ff7-92fe-72b7ae51ab39",
        "type": "message",
        "text": "I can't see how the second is imperative programming",
        "user": "UE6EFEPTQ",
        "ts": "1573947787.472600",
        "team": "T5TCAFTA9",
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "UJVEPCVT6"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d3026537-dcc9-4f1a-bfac-464714090a28",
        "type": "message",
        "text": "having state != imperative",
        "user": "UE6EFEPTQ",
        "ts": "1573947885.472800",
        "team": "T5TCAFTA9",
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "09B21AD5-5415-48F7-9740-12CBBA7CCC28",
        "type": "message",
        "text": "Tim isn\u2019t associating those two types of computation with the two paradigms, he\u2019s saying that this framing of computations is a better context for a discussion about functional vs imperative styles.",
        "user": "UCGAK10LS",
        "ts": "1573949550.475100",
        "team": "T5TCAFTA9",
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "35D84471-11F2-4F4E-902A-A840BAB96F6D",
        "type": "message",
        "text": "<https://github.com/mrakgr/The-Spiral-Language/blob/master/readme.md> this is going to take a while for me to get through but it seems extremely unique and also cool",
        "user": "UHWC9PXBL",
        "ts": "1573949858.477900",
        "team": "T5TCAFTA9",
        "thread_ts": "1573949858.477900",
        "reply_count": 6,
        "reply_users_count": 2,
        "latest_reply": "1574203626.076600",
        "reply_users": [
            "UJN1TAYEQ",
            "UHWC9PXBL"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJN1TAYEQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3FFF37D2-0E38-4DB0-9907-EFFC81C579E4",
        "type": "message",
        "text": "The distinction between calculating an entirely new thing and a new version of an old thing is one that I think every language needs to account for, and I\u2019m not yet aware of a language that makes the distinction and offers an ergonomic solution to each of the two cases. You need something better than na\u00efve imperative instructions to describe changing data, but it\u2019s not as simple as FP with monads. The problem with FP updates is always (as Tim says) the tree structure that immutable data is normally organised into, and the hacks needed to describe cross-links. <@U6KQ2S410> what\u2019s your take on this? I think I need to revisit your and Sean McDirmid\u2019s work on Managed Time.",
        "user": "UCGAK10LS",
        "ts": "1573955049.487200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1573955128.000000"
        },
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "bulb",
                "users": [
                    "UJVEPCVT6"
                ],
                "count": 1
            },
            {
                "name": "heart",
                "users": [
                    "U8A5MS6R1",
                    "UC2A2ARPT",
                    "UHWC9PXBL"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "cd81c6d0-b4ee-4f4f-bb93-0299dd5ba58c",
        "type": "message",
        "text": "Agree with much of what <@UCGAK10LS> said above. The new value of an old thing is something I just call 'identity'. It's everywhere in OO but has to be hand created in FP. However there is no consistency model in OO and objects are just mutated destructively (in place) and willy nilly. I feel managed time has a lot to offer, e.g. by introducing some notion of consistency: create a new version from an old version but preserve identity. (This is all armchair hand waving.. but I do find all the managed time ideas very appealing.) Jonathan Edward and Sean McDirmid's paper links back to some of them (<https://www.microsoft.com/en-us/research/publication/programming-with-managed-time/>). One of the oldest attempts perhaps is David Reeds thesis (NAMOS). Related I'll also link Alan Kay's blurb on Quora that goes into similar ideas: <https://www.quora.com/Why-is-functional-programming-seen-as-the-opposite-of-OOP-rather-than-an-addition-to-it/answer/Alan-Kay-11>",
        "user": "U8A5MS6R1",
        "ts": "1573969861.487900",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "Microsoft Research",
                "title": "Programming with Managed Time - Microsoft Research",
                "title_link": "https://www.microsoft.com/en-us/research/publication/programming-with-managed-time/",
                "text": "Most languages expose the computer\u2019s ability to globally read and write memory at any time. Programmers must then choreograph control flow so all reads and writes occur in correct relative orders, which can be difficult particularly when dealing with initialization, reactivity, and concurrency. Just as many languages now manage memory to unburden us from properly \u2026",
                "fallback": "Microsoft Research: Programming with Managed Time - Microsoft Research",
                "thumb_url": "https://www.microsoft.com/en-us/research/uploads/prod/2018/11/Automated_Hero_Image_MSR_Social_11_2018_1200x627.png",
                "from_url": "https://www.microsoft.com/en-us/research/publication/programming-with-managed-time/",
                "thumb_width": 1200,
                "thumb_height": 627,
                "service_icon": "https://www.microsoft.com/favicon.ico",
                "id": 1,
                "original_url": "https://www.microsoft.com/en-us/research/publication/programming-with-managed-time/"
            },
            {
                "title": "Alan Kay's answer to Why is functional programming seen as the opposite of OOP rather than an addition to it? - Quora",
                "title_link": "https://www.quora.com/Why-is-functional-programming-seen-as-the-opposite-of-OOP-rather-than-an-addition-to-it/answer/Alan-Kay-11",
                "text": "I hope for all our sakes that I can make this short \u2026 In the latter part of the 50s John McCarthy got more and more interested in what he started to call \u201cArtificial Intelligence\u201d. He was also doing some consulting and this brought him in contact...",
                "fallback": "Alan Kay's answer to Why is functional programming seen as the opposite of OOP rather than an addition to it? - Quora",
                "from_url": "https://www.quora.com/Why-is-functional-programming-seen-as-the-opposite-of-OOP-rather-than-an-addition-to-it/answer/Alan-Kay-11",
                "service_icon": "https://www.quora.com/favicon.ico",
                "service_name": "quora.com",
                "id": 2,
                "original_url": "https://www.quora.com/Why-is-functional-programming-seen-as-the-opposite-of-OOP-rather-than-an-addition-to-it/answer/Alan-Kay-11"
            }
        ],
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "U79HM6726"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "14f1949f-23f6-4099-92ee-89211334ed57",
        "type": "message",
        "text": "<@UNBPP291C> Very interesting! So you basically use transform functions to build schemas on the fly and that's your main reason for that architecture? Are you just regenerating them when the model changes and wipe all the data in the downstream systems, or have you thought about migrations to keep the data in those systems and adapt the schemas (a decade ago when I was doing Ruby that was a hot thing in Ruby on Rails with Active Record; I assume that's still around but probably not that special anymore\u2026).",
        "user": "U5STGTB3J",
        "ts": "1573996068.488700",
        "team": "T5TCAFTA9",
        "thread_ts": "1573806919.405700",
        "parent_user_id": "UNBPP291C"
    },
    {
        "client_msg_id": "23bafc11-3ede-4506-aa29-93fbd1a90396",
        "type": "message",
        "text": "<@UCGAK10LS> The key question is how you combine changes to state made in different places and different times. Most of the FP/immutable approaches assume that every change is defined at exactly one point in the program, and that multiple such changes are globally single-threaded via some external magic. Ignores the hard problem of combining changes across space and time. Imperative programming lets you do whatever you want by manually ordering everything, which is impractically complicated. Neither approach is an acceptable solution.",
        "user": "U6KQ2S410",
        "ts": "1574010343.489000",
        "team": "T5TCAFTA9",
        "thread_ts": "1573925494.455000",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "756b0a9f-5c2e-430b-b57b-492161701c5e",
        "type": "message",
        "text": "Thanks for posting. Curv is also a staged functional language for GPU programming, so probably I can learn something from this.",
        "user": "UJN1TAYEQ",
        "ts": "1574013454.489500",
        "team": "T5TCAFTA9",
        "thread_ts": "1573949858.477900",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "624d4ed9-e4e0-40f4-b7e4-8c198fbbc086",
        "type": "message",
        "text": "I say that Curv is dynamically typed, even code staged to the GPU is statically typed. Spiral is the same (inlineable functions are dynamically typed), but Spiral claims to be statically typed. In truth, for both languages, stage 1 is dynamically typed, stage 2 is statically typed.",
        "user": "UJN1TAYEQ",
        "ts": "1574020345.489700",
        "team": "T5TCAFTA9",
        "thread_ts": "1573949858.477900",
        "parent_user_id": "UHWC9PXBL"
    },
    {
        "client_msg_id": "b5c6b723-a026-4ccf-bc1e-a8e2d0911913",
        "type": "message",
        "text": "Something similar is happening in Zig (<http://ziglang.org|ziglang.org>). \"In Zig, types are first-class citizens. They can be assigned to variables, passed as parameters to functions, and returned from functions. However, they can only be used in expressions which are known at compile-time\". Just like Spiral.",
        "user": "UJN1TAYEQ",
        "ts": "1574020936.489900",
        "team": "T5TCAFTA9",
        "thread_ts": "1573949858.477900",
        "parent_user_id": "UHWC9PXBL",
        "reactions": [
            {
                "name": "open_mouth",
                "users": [
                    "UHWC9PXBL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "99a457c8-5791-4356-8508-fdfdf6497138",
        "type": "message",
        "text": "Yes, that\u2019s basically the reason I went for this, seemed quick to write and useful in the time.\n\nI just propagate the change actions for now and update every related node, but I assume this isn\u2019t scalable, so I assume I\u2019ll just add in some kind of logical clock and then check for updates later. I\u2019m concerned with migrations + custom changes, but not yet that far in the project.\n\nAlso thanks Garth! I\u2019ll look over the material and hopefully have a better language to discuss it in!",
        "user": "UNBPP291C",
        "ts": "1574023066.490100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UNBPP291C",
            "ts": "1574029448.000000"
        },
        "thread_ts": "1573806919.405700",
        "parent_user_id": "UNBPP291C"
    }
]