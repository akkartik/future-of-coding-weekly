[
    {
        "client_msg_id": "841b3192-3f28-4e38-b7b9-618972281e9d",
        "type": "message",
        "text": "Really looking forward to this, I think it's a great idea! I'll be happy to give a quick overview of the immediate-mode end-user-programming interaction framework/concept I've been toying with :simple_smile:",
        "user": "UNGNT3BKR",
        "ts": "1572913762.114400",
        "team": "T5TCAFTA9",
        "thread_ts": "1572895346.110200",
        "parent_user_id": "UMVFWPZ36",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UMVFWPZ36"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "b0a8a2ad-d5c2-46d6-b544-d0cce808d253",
        "type": "message",
        "text": "One thing faster machines are helping with is making the underlying stack on which we abstract less relevant. We can pick the stack on other features we value like ubiquity, security, and platform independence as long as the combined sw+hw stack performs well enough for our primary use cases.\n\nBtw, isn\u2019t it remarkable how the folks that said dynamic languages are great but we can\u2019t afford the 4x sw performance hit haven\u2019t changed their mind after 10,000x in hw performance increases?",
        "user": "ULM3U6275",
        "ts": "1572914047.114600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1572914341.000000"
        },
        "thread_ts": "1572759144.037500",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UE6EFEPTQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c69ee027-729a-494d-a610-3c572549404f",
        "type": "message",
        "text": "What makes me sad is that the most minuscule of tasks \u2014 motion to photon, renaming files, opening windows in the file browser \u2014 take just long enough that you can perceive the latency. In many cases, things are less \"snappy\" than they were on Windows 2k and Mac OS 9, which themselves were less snappy than DOS and Apple II. We've improved 10,000x in capacity, at the expense of regressed instantaneity. And based on the choices made to unlock that 10,000x, it's going to be next to impossible to kill that perceptual latency. (Obligatory cite: <https://danluu.com/input-lag/>)",
        "user": "UC2A2ARPT",
        "ts": "1572918046.115000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1572929370.000000"
        },
        "thread_ts": "1572759144.037500",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heavy_check_mark",
                "users": [
                    "UE6EFEPTQ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "5b7ef360-d024-43db-b2c3-c8224238b008",
        "type": "message",
        "text": "<https://www.johnhanacek.net/along-the-curve/2017/10/25/art-math-math-art-toward-a-boundless-grounded-infinity>",
        "user": "U8A5MS6R1",
        "ts": "1572918195.115500",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "service_name": "John Hanacek",
                "title": "Art Math, Math Art - Toward a Boundless Grounded Infinity \u2014 John Hanacek",
                "title_link": "https://www.johnhanacek.net/along-the-curve/2017/10/25/art-math-math-art-toward-a-boundless-grounded-infinity",
                "text": "Anything digitized has become an abstraction, so let's embrace it. When I draw into a computer with the flourish of my hand we can take it beyond pixels, beyond even vectors, toward universal mapping attempts, toward a truly metamedium. A curve drawn by hand is a chance to try fitting a function to",
                "fallback": "John Hanacek: Art Math, Math Art - Toward a Boundless Grounded Infinity \u2014 John Hanacek",
                "thumb_url": "http://static1.squarespace.com/static/53850248e4b0995549fd8456/538504bfe4b0d7fa576ee6cc/59f0d8f49f07f568ddc995b3/1510008181423/Image-1.jpg?format=1500w",
                "from_url": "https://www.johnhanacek.net/along-the-curve/2017/10/25/art-math-math-art-toward-a-boundless-grounded-infinity",
                "thumb_width": 1500,
                "thumb_height": 1150,
                "service_icon": "https://images.squarespace-cdn.com/content/v1/53850248e4b0995549fd8456/1433705807297-RTWEBHG7SJLWI9SVGINE/ke17ZwdGBToddI8pDm48kM6ExnE8JxJ0MMXwc_HGBNNZw-zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZamWLI2zvYWH8K3-s_4yszcp2ryTI0HqTOaaUohrI8PIhS23_HU5IP3A0tITkkZoMH5QM01GXkKbjCwwDVKPTEYKMshLAGzx4R3EDFOm1kBS/favicon.ico",
                "id": 1,
                "original_url": "https://www.johnhanacek.net/along-the-curve/2017/10/25/art-math-math-art-toward-a-boundless-grounded-infinity"
            }
        ],
        "thread_ts": "1572918195.115500",
        "reply_count": 3,
        "reply_users_count": 1,
        "latest_reply": "1572924252.116200",
        "reply_users": [
            "UJN1TAYEQ"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "6b9952cc-b145-4cd6-be4d-71ce3c72a145",
        "type": "message",
        "text": "[from John Hanacek's \"As We May Sketch\"]\nIn Don Norman\u2019s \u201cThe Design of Everyday Things\u201d he provides \u2018principles of good design,\u2019 which are:\n\n* *Visibility*. By looking, the user can tell the state of the device and the alternatives for action.\n* *A good conceptual model*. The designer provides a good conceptual model for the user, with consistency in the presentation of operations and results and a coherent, consistent system image.\n* *Good mappings*. It is possible to determine the relationships between actions and results, between controls and their effects, and between the system state and what is visible.\n* *Feedback*. The user receives full and continuous feedback about the results of actions.",
        "user": "UJN1TAYEQ",
        "ts": "1572924204.115800",
        "team": "T5TCAFTA9",
        "thread_ts": "1572918195.115500",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "7e96bfab-3073-4579-96fb-ad54cd8d576f",
        "type": "message",
        "text": "Traditional \u201ctyped statement\u201d programming environments live up to none of these criteria. In traditional programming it is often very difficult to determine relationships between operations and results. The feedback is not continuous and because of syntax constraints often a program being modified is not in a state where you can see the results. Systems like spreadsheets are better, since they offer easier to choose alternatives and usually allow you to see the results with just a click, providing a nicefeedback loop. Norman concludes that with spreadsheets \u201cit felt as if you were working directly on the problem, not on a computer.\u201d",
        "user": "UJN1TAYEQ",
        "ts": "1572924230.116000",
        "team": "T5TCAFTA9",
        "thread_ts": "1572918195.115500",
        "parent_user_id": "U8A5MS6R1",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ca52534a-505d-4b3d-98cd-88570e23ba06",
        "type": "message",
        "text": "\u2022 Could I have a development environment that would let me get my ideas into code much faster so that I can focus on trying more complicated logic through the manipulation of visuals that provide constant feedback?\n\u2022 Can we drive this environment with pen input to use interactive sketching to help elucidate the concepts of programming?\n\u2022 Can we create visual metaphors for programming concepts, like objects and dependencies, that users can manipulate in a direct way such as in software with similar affordances of Adobe Illustrator?\n\u2022 Could such an environment allow younger children to organically discover how to realize their imaginations using computers?",
        "user": "UJN1TAYEQ",
        "ts": "1572924252.116200",
        "team": "T5TCAFTA9",
        "thread_ts": "1572918195.115500",
        "parent_user_id": "U8A5MS6R1"
    },
    {
        "client_msg_id": "96CB1FE2-8B6D-4A63-9485-42C8EB19075E",
        "type": "message",
        "text": "I used to think the same until I went to the computer history museum and found the old desktops to be much slower than I recalled. Maybe memories are in relative-to-past (vs absolute) terms, so a memory tagged as \u201cfast\u201d meant fast wrt experiences with previous machines. My speed metric is time for booting, opening apps, using sliders, and moving windows, not key presses in a terminal.",
        "user": "ULM3U6275",
        "ts": "1572927134.123400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1572927342.000000"
        },
        "thread_ts": "1572759144.037500",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UJ6LDMMN0"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "4cb858a8-f3e5-4967-9ecd-95395471cb78",
        "type": "message",
        "text": "I like their experiments on how a programmer can program things with her body and with the real world. It is a kind to reengage real stuff and real feeling to produce programming artifacts : you assemble the turtles to create a program, you use your AR artifact to point a real object, you wave your hand to define the shark movement, etc.",
        "user": "UJ6LDMMN0",
        "ts": "1572936886.124600",
        "team": "T5TCAFTA9",
        "thread_ts": "1572907057.113800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "10386c25-30b6-4d5c-af75-435f40ecc3aa",
        "type": "message",
        "text": "I like how they combine objects to give a new meaning, like putting the turtle for the rotate instruction on a quarter (the coin) to specify to rotate at 90\u00b0 (a quarter of a turn).",
        "user": "UJ6LDMMN0",
        "ts": "1572937084.124800",
        "team": "T5TCAFTA9",
        "thread_ts": "1572907057.113800",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "76a149e4-eaad-40a3-bb7c-264cd746f521",
        "type": "message",
        "text": "<@UNTRC48LC> grabbed the last slot, thanks!",
        "user": "UGS8TUVK6",
        "ts": "1572940726.125000",
        "team": "T5TCAFTA9",
        "thread_ts": "1572895346.110200",
        "parent_user_id": "UMVFWPZ36",
        "reactions": [
            {
                "name": "sparkles",
                "users": [
                    "UNTRC48LC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "25e24d1f-3250-4a91-bb6d-5f63f2055418",
        "type": "message",
        "text": "well I think we lurch backwards and forwards: things get stodgy then something comes along to make it snappy again. examples: cvs (snappy), then clearcase/subversion/etc (omg) then git (snappy!!); Netscape/IE (stodgy), firefox/chrome snappy!, then firefox went stodgy, but I understand they're making a comeback too.",
        "user": "UE6EFEPTQ",
        "ts": "1572946096.125500",
        "team": "T5TCAFTA9",
        "thread_ts": "1572759144.037500",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "da31d252-041e-487c-a984-090444f30e32",
        "type": "message",
        "text": "node snappy, then npm etc etc stodgy then yarn snappy then npm not so bad",
        "user": "UE6EFEPTQ",
        "ts": "1572946160.125700",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UE6EFEPTQ",
            "ts": "1572946185.000000"
        },
        "thread_ts": "1572759144.037500",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "86de7966-e905-4b21-859c-0e036183dc42",
        "type": "message",
        "text": "but I'd rather we just binned the whole stack and started over tbh",
        "user": "UE6EFEPTQ",
        "ts": "1572946205.126000",
        "team": "T5TCAFTA9",
        "thread_ts": "1572759144.037500",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "32651181-99ce-4fc9-86ff-261c4eb6bdb3",
        "type": "message",
        "text": "I keep having to replace my phone when it goes stodgy, but I understand that's by design :smile:",
        "user": "UE6EFEPTQ",
        "ts": "1572946273.126200",
        "team": "T5TCAFTA9",
        "thread_ts": "1572759144.037500",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "58356329-e87f-4fad-83c3-69622f16dca3",
        "type": "message",
        "text": "<@ULM3U6275>: you're right, <@UC2A2ARPT> is right. The early Macintosh was painfully slow: minutes to start an app. But with no pre-emptive multitasking, no virtual memory, no L1/L2 cache, and synchronous execution of CPU instructions, it was a real-time system. With careful coding, you could *guarantee* that the latency of certain selected UI gestures involving the mouse or keyboard was below the perceptual threshold. And I definitely *noticed* when this ceased to be the case.",
        "user": "UJN1TAYEQ",
        "ts": "1572957931.127300",
        "team": "T5TCAFTA9",
        "thread_ts": "1572759144.037500",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UC2A2ARPT",
                    "ULM3U6275"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "f8da034c-de65-4a70-b2a0-d67389033f9f",
        "type": "message",
        "text": "<https://en.wikipedia.org/wiki/Constraint_programming>\n*Temporal concurrent constraint programming (TCC) and non-deterministic temporal concurrent constraint programming (MJV) are variants of constraint programming that can deal with time.*\n\nI am really interested in that. Do you know any material on it?\n\nI feel like a lot of boilerplate code today is about wiring/hardcoding the *temporal constraints* into our codebase. When we want to make sure something works we create the control flow ourselves step by step. Instead, *the computer could help us find the \u201cbasic\u201d declarative constraints* we need and *it could generate one (of many) control flow and the correspondent glue code as \u201cimplementation\u201d.*\n\nI am really into this idea, I\u2019d really like to explore this, because I realized I just can\u2019t program without that. It feels incredibly lame.\n\n(I am aware of the non-temporal use cases.)",
        "user": "UL3CJ7YKC",
        "ts": "1572958346.132600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UL3CJ7YKC",
            "ts": "1572958844.000000"
        },
        "thread_ts": "1572958346.132600",
        "reply_count": 17,
        "reply_users_count": 4,
        "latest_reply": "1572969635.137700",
        "reply_users": [
            "UN57U8V53",
            "UP28ETUSE",
            "UL3CJ7YKC",
            "UHDQ62M4P"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "5c5af9dc-f594-4c62-887e-d0b1f467d484",
        "type": "message",
        "text": "Haskell is pretty much this due to laziness",
        "user": "UN57U8V53",
        "ts": "1572960576.133400",
        "team": "T5TCAFTA9",
        "thread_ts": "1572958346.132600",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "6b26e191-589f-41c8-a7a7-df7c0ee822b7",
        "type": "message",
        "text": "It takes the \"lazy\" path of using lazy evaluation to do this, and Simon wrote a great book on optimising performance so memory and stack are better optimized",
        "user": "UN57U8V53",
        "ts": "1572960658.133600",
        "team": "T5TCAFTA9",
        "thread_ts": "1572958346.132600",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "aea5709e-44c2-4c4b-93ef-b70450e3e5e8",
        "type": "message",
        "text": "There was some research on trying to do men/stack optimization automatically, but each function would need to document if/how it evaluated it's arguments/results and that was rather messy",
        "user": "UN57U8V53",
        "ts": "1572960716.133800",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UN57U8V53",
            "ts": "1572960771.000000"
        },
        "thread_ts": "1572958346.132600",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "72b9a27b-bbdc-47ea-86ed-2f829f9a015d",
        "type": "message",
        "text": "<@UL3CJ7YKC> I think I'm facing similar problems at my day job (where we have to control electrical assets), but I can't say I had any epiphany with the research I've done so far. I can share the papers I've discovered, if you're interested.",
        "user": "UP28ETUSE",
        "ts": "1572961216.134100",
        "team": "T5TCAFTA9",
        "thread_ts": "1572958346.132600",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "8ee7871d-f6a7-4580-bc58-7890c4fe902f",
        "type": "message",
        "text": "This is what I've gathered so far:\n- Temporal Reasoning and Constraint Programming \u2014 A Survey\n- Constraint Propagation Algorithms for Temporal Reasoning \u2014 A Revised Report\n- Deductive Temporal Reasoning with Constraints\n- A Relational Algebra as a Query Language for Temporal Datalog",
        "user": "UP28ETUSE",
        "ts": "1572961477.134600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UP28ETUSE",
            "ts": "1572964532.000000"
        },
        "thread_ts": "1572958346.132600",
        "parent_user_id": "UL3CJ7YKC",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UD3AK9JRF"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e0df32f0-553c-43ff-9224-9e94b2e4a4d7",
        "type": "message",
        "text": "great! now full but I added a waitlist section that people can signup for in case anyone with a slot can't make it...or perhaps that could be the seed for a future event if this works out",
        "user": "UMVFWPZ36",
        "ts": "1572963665.134800",
        "team": "T5TCAFTA9",
        "thread_ts": "1572895346.110200",
        "parent_user_id": "UMVFWPZ36"
    },
    {
        "client_msg_id": "61a9f034-2223-4a21-b8a2-e0238d01ef76",
        "type": "message",
        "text": "<@UP28ETUSE> Thanks a lot!",
        "user": "UL3CJ7YKC",
        "ts": "1572965191.135100",
        "team": "T5TCAFTA9",
        "thread_ts": "1572958346.132600",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "edd72e98-8ade-411e-b6c1-e670507e2054",
        "type": "message",
        "text": "<@UN57U8V53> How can the system (Haskell) help you figure out the which constraints we have to specify further?",
        "user": "UL3CJ7YKC",
        "ts": "1572965322.135300",
        "team": "T5TCAFTA9",
        "thread_ts": "1572958346.132600",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "bf6ccc95-7e9f-4aef-8bd0-7f28322b1107",
        "type": "message",
        "text": "You specify the relationships via code (which creates a code graph rather than a tree).\nThen, you specify a starting point that takes expression(s) and it will iteratively reduce it (collapsing nodes in the graph along the way) to it's maximal reduction (via typed lambda calculus)\nThe most reduced form shows what constraints are free (usually bounded by types so caught at compile time)",
        "user": "UN57U8V53",
        "ts": "1572967792.135600",
        "team": "T5TCAFTA9",
        "thread_ts": "1572958346.132600",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "a76c0e1a-bfee-4202-bd8d-627c0cef6def",
        "type": "message",
        "text": "Idris feels a little better at this as data/types are both programmable/reducible (which is enabled by a \"conversation\" with the compiler cause ain't nobody get it right the first time)",
        "user": "UN57U8V53",
        "ts": "1572967917.135800",
        "team": "T5TCAFTA9",
        "thread_ts": "1572958346.132600",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "df62deed-d580-4076-99d5-e3b09372a81d",
        "type": "message",
        "text": "<@UN57U8V53> I am glad you have mentioned Idris, because I wanted to mention it in my response (but deleted to focus on your thoughts) ! :smile:\n\nTo me Dependent Types seems somehow necessary for that.\n\nI think you know much more about that topic, I am only led by my intuition not science. :smile:\n\nIs it the time to start learning Idris? I did not find Temporal Logic (especially beyond Linear Temporal Logic) implemented as a lib in Idris. I assume that would be necessary.",
        "user": "UL3CJ7YKC",
        "ts": "1572968305.136000",
        "team": "T5TCAFTA9",
        "thread_ts": "1572958346.132600",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "325e2a7c-ae8f-478e-bcc4-f93e53a47bb5",
        "type": "message",
        "text": "On a different note, for constraint solvers (SMT), knowing which constraints are \"at fault\" is pretty expensive. I'm currently learning enough math to figure out exactly how topoi work so I can more fully understand the stuff Spivak/Fong talk about in the last chapter of 7 sketches (safety proofs in temporal logic). I know basic constraint theory has a bunch of techniques to find locally constrained and locally overconstrained submodels in a model of that's helpful.",
        "user": "UN57U8V53",
        "ts": "1572968525.136200",
        "team": "T5TCAFTA9",
        "thread_ts": "1572958346.132600",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "16256820-889f-4dc5-a2ad-f28b69d6aba6",
        "type": "message",
        "text": "Time is \"just\" another dimension",
        "user": "UN57U8V53",
        "ts": "1572968551.136400",
        "team": "T5TCAFTA9",
        "thread_ts": "1572958346.132600",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "398d74a6-ee99-4418-a498-f9685e952a4c",
        "type": "message",
        "text": "Annoyingly so because it's usually not reversible",
        "user": "UN57U8V53",
        "ts": "1572968581.136600",
        "team": "T5TCAFTA9",
        "thread_ts": "1572958346.132600",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "b255b0c6-7022-4ad3-b4dc-57919d527f08",
        "type": "message",
        "text": "Good, very accessible book on constraint theory basics is \"Constraint Theory\" by Friedman and Phan",
        "user": "UN57U8V53",
        "ts": "1572968651.136800",
        "team": "T5TCAFTA9",
        "thread_ts": "1572958346.132600",
        "parent_user_id": "UL3CJ7YKC",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC",
                    "UNB12DNTU"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "3a82ef4c-fdb6-48c5-a99d-cbf905e20e24",
        "type": "message",
        "text": "Idris is super fun and definitely worth working through Type Driven Development :)",
        "user": "UN57U8V53",
        "ts": "1572968752.137200",
        "team": "T5TCAFTA9",
        "thread_ts": "1572958346.132600",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "715c6867-92cd-41f2-8b74-bb3baa136bff",
        "type": "message",
        "text": "cool.. this seems like FRP fused with constraint programming.. putting two crazy paradigms together gets you..?",
        "user": "UHDQ62M4P",
        "ts": "1572969355.137500",
        "team": "T5TCAFTA9",
        "thread_ts": "1572958346.132600",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "88a5023f-26cb-4534-b16a-8b3a30eeec3b",
        "type": "message",
        "text": "AFAIK, it means you have a model where you break continuous time into discrete chunks which, when possible, is usually simplifying. Example from what little I know of molecular/chemical modeling: finding the largest time step where you get the correct result is really nice for performance (and hard).",
        "user": "UN57U8V53",
        "ts": "1572969635.137700",
        "team": "T5TCAFTA9",
        "thread_ts": "1572958346.132600",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "9dbb8bef-d110-4cdc-8c4e-806ceb744a9e",
        "type": "message",
        "text": "Thanks <@UJN1TAYEQ> \u2014 exactly my point. I have a Mac SE in my closet, and I pull it out every once in a while when I want to be reminded what the old days were like. You press a key and the resulting action often (but not always) happens faster than on my i9 MBP. (Now, I just gotta find a copy of Hypercard somewhere...)",
        "user": "UC2A2ARPT",
        "ts": "1572973063.138000",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1572973195.000000"
        },
        "thread_ts": "1572759144.037500",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "00737bbe-00a0-4379-9cc9-54ee7213034d",
        "type": "message",
        "text": "Thanks <@UMVFWPZ36> Looking forward",
        "user": "UPVBV34EL",
        "ts": "1572983170.139000",
        "team": "T5TCAFTA9",
        "thread_ts": "1572895346.110200",
        "parent_user_id": "UMVFWPZ36"
    },
    {
        "client_msg_id": "bf192e20-8a47-47f1-8391-a9ac0396dc38",
        "type": "message",
        "text": "I took a moment to open a terminal and several text editors on OSX and couldn\u2019t detect and lag between pressing a key and seeing it displayed. I also don\u2019t notice any lag in Slack. Am I less sensitive to the lag or have I just become accustomed to it?",
        "user": "ULM3U6275",
        "ts": "1572984982.139200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "ULM3U6275",
            "ts": "1572985120.000000"
        },
        "thread_ts": "1572759144.037500",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "d0fc85ee-b0e5-4870-a400-b6e6e3748718",
        "type": "message",
        "text": "For me, the lag gets worse the longer my machine has been running since boot, and the more programs are loaded into memory. Switching to a program I haven't interacted for a while, I'll see some lag that resolves once the code for the interaction has been loaded into cache. At some point, the lag grows past an inflexion point, and the only thing to do is reboot. Note that I have \"only\" 4GB of RAM, and I would probably have less lag with more memory.",
        "user": "UJN1TAYEQ",
        "ts": "1572986160.139500",
        "team": "T5TCAFTA9",
        "thread_ts": "1572759144.037500",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "F59E7004-2B4B-44EB-BB86-125FCD143698",
        "type": "message",
        "text": "Seems like some of you here will enjoy this: <https://danluu.com/input-lag/>",
        "user": "U5STGTB3J",
        "ts": "1572987046.140300",
        "team": "T5TCAFTA9",
        "thread_ts": "1572759144.037500",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "38d99a85-84f1-49e1-b69a-aa92a3ebf351",
        "type": "message",
        "text": "<@U5STGTB3J> I linked that exact article slightly higher up in the thread. Nice!\n\n<@ULM3U6275> I think I'm atypically sensitive to input lag for two reasons. One is that I play a lot of different video games on a lot of different devices, and I've learned how to detect things like \"I need to hit the buttons on this console a hair earlier than normal because this TV is adding what feels like 50ms input lag\" \u2014 and I often do things in games that require or reward frame-perfect timing at 60 Hz, so I'm used to the feel of 16ms increments (this is pretty common among gamers, though they might lack the technical language to articulate it). For two, I play and record music, so I'm used to feeling rhythms \"straight\" or \"in the pocket\" or \"early\" or \"late\", which amounts to a +/- 20-100ms difference depending on the groove. I have a friend who can consistently place the feel of his drumming about 10ms ahead of the beat, which sounds amazing and confounds me.\n\nSo in this light, the motion-to-photon measured by Dan Luu being _at best_ 30ms is shameful. Why can't we have 3ms motion to photon for something as simple as text editing? The speed of light is 299,792 m/ms. That's a lot of wire. And 3ms is only 10x ahead of where we were in the 80s, so if our hardware is really \"10k times better\", that should be easy. I think this puts the lie to the claim that HW is that much better. It's not \u2014 it's just increased in certain measurements by that much. Whether those measurements are useful, or matter, to things like programming tool design.. is arguable.\n\nOn a practical level, I don't usually notice the input lag in most native Mac apps. But I do notice it in Electron apps, like Slack and Atom and Hyper, as those often introduce a frame or two of extra latency. Mouse lag is often much worse than keyboard lag, too, so much so that I'm willing to bet you've noticed it.",
        "user": "UC2A2ARPT",
        "ts": "1572987162.140500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1572988757.000000"
        },
        "thread_ts": "1572759144.037500",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e27a1826-bb8d-478a-9748-5811a92cc956",
        "type": "message",
        "text": "Here's what we're up against \u2014 3d games are doing relatively insane amounts of work in 8ms, but it still takes upwards of 50-100ms to get that work out to your eyeballs: <http://www.chioka.in/what-is-motion-to-photon-latency/>",
        "user": "UC2A2ARPT",
        "ts": "1572988162.141500",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1572988556.000000"
        },
        "thread_ts": "1572759144.037500",
        "parent_user_id": "UC2A2ARPT"
    }
]