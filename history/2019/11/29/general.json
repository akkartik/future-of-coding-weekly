[
    {
        "client_msg_id": "c58ef9f7-f3b4-4775-ab37-03bcc6ae1759",
        "type": "message",
        "text": "Checked out Mech and it seems to be done by <@UCGR73CAY>, who I think was also on the Eve team? Couldn\u2019t get the tutorial to work though.\n\n<@UEBG0NPDK> I think where you guys ended up was a logic programming model using a datalog variant implemented with differential dataflow for the iterations, and were firm on that being a good underlying programming model. The question with all the variations was how to best present that programming model to users, and it was unclear if it should be a wiki, a grid, or like a notebook.\n\nIt does seem like a promising direction, but my impression (and limited purview) is most people seem keen on exploring visual programming (hooking up components) or types in functional programming. Was just wondering if people decided to go in a different direction after seeing Eve for a specific reason.",
        "user": "UNLS33M61",
        "ts": "1574983012.298400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UNLS33M61",
            "ts": "1574985138.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "abrKr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Checked out Mech and it seems to be done by "
                            },
                            {
                                "type": "user",
                                "user_id": "UCGR73CAY"
                            },
                            {
                                "type": "text",
                                "text": ", who I think was also on the Eve team? Couldn\u2019t get the tutorial to work though.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UEBG0NPDK"
                            },
                            {
                                "type": "text",
                                "text": " I think where you guys ended up was a logic programming model using a datalog variant implemented with differential dataflow for the iterations, and were firm on that being a good underlying programming model. The question with all the variations was how to best present that programming model to users, and it was unclear if it should be a wiki, a grid, or like a notebook.\n\nIt does seem like a promising direction, but my impression (and limited purview) is most people seem keen on exploring visual programming (hooking up components) or types in functional programming. Was just wondering if people decided to go in a different direction after seeing Eve for a specific reason."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574929029.255500",
        "parent_user_id": "UNLS33M61"
    },
    {
        "client_msg_id": "ba861218-7491-4ff1-b370-5f9717330295",
        "type": "message",
        "text": "same here",
        "user": "UHDQ62M4P",
        "ts": "1574987369.298700",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "15L",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "same here"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574980329.297900",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "54dda0c9-5ec5-4d56-af44-039aafbd5bfd",
        "type": "message",
        "text": "there are several languages that have features to only allow valid sequences of method calls, usually by changing an internal state machine or chaining of state.. it sound similar to  what you're saying, but can't quite tell",
        "user": "UHDQ62M4P",
        "ts": "1574987554.298900",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dGd36",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "there are several languages that have features to only allow valid sequences of method calls, usually by changing an internal state machine or chaining of state.. it sound similar to  what you're saying, but can't quite tell"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574980329.297900",
        "parent_user_id": "UL3CJ7YKC",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UL3CJ7YKC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9308258c-c255-4f88-80d3-3e8609b30bf7",
        "type": "message",
        "text": "I are we talking about something like this?\n\nSynchronization is only a problem in programs which allow shared mutable state, *and* parallel execution. Get rid of one or the other, and suddenly you don't need synchronization mechanisms like locks, semaphores, mutexes, etc.\n\nIt sounds like the topic is about using static code analysis to prove when code is not synchronous anyway, or otherwise under what conditions it isn't vulnerable to certain synchronization problems with shared mutable state.\n\nAnd having determined this, the compiler (or something else) can make some sort of guarantee or restriction or optimization or call it an error if synchronization mechanisms are not put in place, or something.",
        "user": "UAVCC2X70",
        "ts": "1574996969.299100",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1574996988.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LrXfy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I are we talking about something like this?\n\nSynchronization is only a problem in programs which allow shared mutable state, "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " parallel execution. Get rid of one or the other, and suddenly you don't need synchronization mechanisms like locks, semaphores, mutexes, etc.\n\nIt sounds like the topic is about using static code analysis to prove when code is not synchronous anyway, or otherwise under what conditions it isn't vulnerable to certain synchronization problems with shared mutable state.\n\nAnd having determined this, the compiler (or something else) can make some sort of guarantee or restriction or optimization or call it an error if synchronization mechanisms are not put in place, or something."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574980329.297900",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "b7d47f27-64ce-4e17-911e-cd7c5d75c35c",
        "type": "message",
        "text": "don't know if I follow, but isn't this related to session types? \"In complex distributed systems communicating participants agree on a protocol to follow, specifying type and direction of data exchanged.\n\u2022Session types are a type formalism used to model structured communication-based programming.\n\u2022Guarantee privacy,communication safety and session fidelity\"",
        "user": "UBN9AFS0N",
        "ts": "1575016839.299600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UBN9AFS0N",
            "ts": "1575016985.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gl=Ny",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "don't know if I follow, but isn't this related to session types? \"In complex distributed systems communicating participants agree on a protocol to follow, specifying type and direction of data exchanged.\n\u2022Session types are a type formalism used to model structured communication-based programming.\n\u2022Guarantee privacy,communication safety and session fidelity\""
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574980329.297900",
        "parent_user_id": "UL3CJ7YKC",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8e22fb50-4e43-4cc4-ab70-e5ecbe75b8d3",
        "type": "message",
        "text": "also pony's type system helps \"Pony doesn\u2019t have locks nor atomic operations or anything like that. Instead, the type system ensures at compile time that your concurrent program can never have data races. So you can write highly concurrent code and never get it wrong.\" <https://www.ponylang.io>",
        "user": "UBN9AFS0N",
        "ts": "1575016884.299800",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "title": "Pony",
                "title_link": "https://www.ponylang.io/",
                "text": "Pony - High Performance Actor Programming",
                "fallback": "Pony",
                "from_url": "https://www.ponylang.io/",
                "thumb_url": "https://www.ponylang.io/images/logo.png",
                "thumb_width": 128,
                "thumb_height": 128,
                "service_icon": "https://www.ponylang.io/images/favicon.ico",
                "service_name": "ponylang.io",
                "id": 1,
                "original_url": "https://www.ponylang.io"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wOZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "also pony's type system helps \"Pony doesn\u2019t have locks nor atomic operations or anything like that. Instead, the type system ensures at compile time that your concurrent program can never have data races. So you can write highly concurrent code and never get it wrong.\" "
                            },
                            {
                                "type": "link",
                                "url": "https://www.ponylang.io"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574980329.297900",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "689b707c-a48e-4443-a5e4-693e79e92a38",
        "type": "message",
        "text": "erlang makes it simpler, the code inside an actor in single threaded and the message inbox serializes messages sent to it so you don't have to lock anything, just use many actors and you take advantage of multiple cores",
        "user": "UBN9AFS0N",
        "ts": "1575016939.300100",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "u3OF6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "erlang makes it simpler, the code inside an actor in single threaded and the message inbox serializes messages sent to it so you don't have to lock anything, just use many actors and you take advantage of multiple cores"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574980329.297900",
        "parent_user_id": "UL3CJ7YKC",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ac037980-de26-4de1-800d-0805fc8789b6",
        "type": "message",
        "text": "Maybe most programs could be vastly simpler. MS Windows has enough code to fill enough textbooks that would stack up as tall as a sky scraper -- hundreds of millions of lines of code. And then Kay makes an operating system (STEPS) that has all the fundamental tools for authoring and web browsing, with only 20 thousand LOC.",
        "user": "UAVCC2X70",
        "ts": "1575047479.306800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Zn=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe most programs could be vastly simpler. MS Windows has enough code to fill enough textbooks that would stack up as tall as a sky scraper -- hundreds of millions of lines of code. And then Kay makes an operating system (STEPS) that has all the fundamental tools for authoring and web browsing, with only 20 thousand LOC."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574787700.220500",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "30fa0285-f3c2-4f47-97d6-14250797b9af",
        "type": "message",
        "text": "I'll let this 18min video argue the rest:\n\n<https://youtu.be/tb0_V7Tc5MU|https://youtu.be/tb0_V7Tc5MU>",
        "user": "UAVCC2X70",
        "ts": "1575047538.307400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UAVCC2X70",
            "ts": "1575047551.000000"
        },
        "attachments": [
            {
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/",
                "title": "Software -- past and future | Charles H. Moore | TEDxDavidsonAcademy",
                "title_link": "https://youtu.be/tb0_V7Tc5MU",
                "author_name": "TEDx Talks",
                "author_link": "https://www.youtube.com/user/TEDxTalks",
                "thumb_url": "https://i.ytimg.com/vi/tb0_V7Tc5MU/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "fallback": "YouTube Video: Software -- past and future | Charles H. Moore | TEDxDavidsonAcademy",
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/tb0_V7Tc5MU?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "from_url": "https://youtu.be/tb0_V7Tc5MU",
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/tb0_V7Tc5MU"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Pl=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'll let this 18min video argue the rest:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/tb0_V7Tc5MU",
                                "text": "https://youtu.be/tb0_V7Tc5MU"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574787700.220500",
        "parent_user_id": "UL3CJ7YKC"
    },
    {
        "client_msg_id": "F34DA87C-0C66-405B-8E59-0C6B373CA0E7",
        "type": "message",
        "text": "How about `Link` only checking for URL equality (that\u2019s what I would expect from a dedicated `Link` class or type) and offering a `.toString()` method or something like that to make it super easy to drop down into `String` and its comparison behavior. \n\nLeaving some control over what is wanted to the developer seems better than having \u201cmagic\u201d behavior that will end up as surprising and unwanted in some cases.\n\nYour http/s example sounds like you might want to offer easy ways to get to parts of the URL (scheme, host, path + components, query) as well so people can easily combine the parts they care for when caching. I\u2019d say http and https are different URLs and treating them the same is asking for trouble, but with easy access to just the host and path you can build a straightforward cache without any confusion.",
        "user": "U5STGTB3J",
        "ts": "1575047953.312200",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U5STGTB3J",
            "ts": "1575048019.000000"
        },
        "thread_ts": "1574951564.258100",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "29c72265-3608-4059-8c66-e7a55fe1a063",
        "type": "message",
        "text": "<@U5STGTB3J> I find the comparisson by url to be the most common sense one, but not as common sense as when I did the first aggregation and the MIT links where not aggregating together and I went on a quest to find why equality was broken on my system before noticing that they all pointed to a different url (something that is not immediatly visible, only hovering over two or more links with the same label *may* make you notice it)",
        "user": "UBN9AFS0N",
        "ts": "1575048555.312500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JEQO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U5STGTB3J"
                            },
                            {
                                "type": "text",
                                "text": " I find the comparisson by url to be the most common sense one, but not as common sense as when I did the first aggregation and the MIT links where not aggregating together and I went on a quest to find why equality was broken on my system before noticing that they all pointed to a different url (something that is not immediatly visible, only hovering over two or more links with the same label "
                            },
                            {
                                "type": "text",
                                "text": "may",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " make you notice it)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574951564.258100",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "AEF655A8-AAAF-4F04-8BE3-18CFC722C5E6",
        "type": "message",
        "text": "<@UBN9AFS0N> It does certainly show how tiny little details make our jobs so complex: so many choices to make, so many expectations to break, so many things to be opinionated about\u2026",
        "user": "U5STGTB3J",
        "ts": "1575048934.315200",
        "team": "T5TCAFTA9",
        "thread_ts": "1574951564.258100",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "e8bdb164-ed6e-4a63-a883-469f27eb6649",
        "type": "message",
        "text": "yep, the one that's common sense tripped me at the first attempt to use it :smile:",
        "user": "UBN9AFS0N",
        "ts": "1575048965.315400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y3Ybl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yep, the one that's common sense tripped me at the first attempt to use it "
                            },
                            {
                                "type": "emoji",
                                "name": "smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1574951564.258100",
        "parent_user_id": "UBN9AFS0N"
    }
]