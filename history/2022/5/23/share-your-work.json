[
    {
        "client_msg_id": "714ba850-f04e-4bea-a4b8-333a070032e2",
        "type": "message",
        "text": "Curious about what this group thinks of the approach we're taking with <https://www.henosia.com/> We provide direct manipulation of the visual output of a running program, and think this is a great fit for UX Designers where their intent is \"move that\", \"adjust this whitespace\" and \"insert a button below\". It's visual TypeScript code editing in real time for designers. Oh, and we have multiplayer in the mix, which has been, let's call it _interesting_, so far :joy:",
        "user": "U03GBV8B58V",
        "ts": "1653320954.120799",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U03GBV8B58V",
            "ts": "1653321630.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ipHA1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Curious about what this group thinks of the approach we're taking with "
                            },
                            {
                                "type": "link",
                                "url": "https://www.henosia.com/"
                            },
                            {
                                "type": "text",
                                "text": " We provide direct manipulation of the visual output of a running program, and think this is a great fit for UX Designers where their intent is \"move that\", \"adjust this whitespace\" and \"insert a button below\". It's visual TypeScript code editing in real time for designers. Oh, and we have multiplayer in the mix, which has been, let's call it "
                            },
                            {
                                "type": "text",
                                "text": "interesting",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", so far "
                            },
                            {
                                "type": "emoji",
                                "name": "joy"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653320954.120799",
        "reply_count": 12,
        "reply_users_count": 5,
        "latest_reply": "1653667631.065789",
        "reply_users": [
            "U03FKLDAAN8",
            "U03GBV8B58V",
            "UKFNXF0F9",
            "UAZT04VT4",
            "UA14TGLTC"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "407d6819-8e36-46d5-a441-de471cc34614",
        "type": "message",
        "text": "Interesting! So if you wanted to integrate it with your own custom design system (components &amp; CSS), could you define a bunch of mappings somewhere between visual actions (dragging edges to resize etc) and corresponding changes to the elements/attributes in the code? Also - what frontend frameworks does/will it work with?",
        "user": "U03FKLDAAN8",
        "ts": "1653322782.997899",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HfNO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting! So if you wanted to integrate it with your own custom design system (components & CSS), could you define a bunch of mappings somewhere between visual actions (dragging edges to resize etc) and corresponding changes to the elements/attributes in the code? Also - what frontend frameworks does/will it work with?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653320954.120799",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "client_msg_id": "da6fdded-299a-4260-a12c-eea130743c6e",
        "type": "message",
        "text": "I wanted to do a similar-ish thing to do with creating diagrams in Svelte, where you could drag boxes to reposition them - with some way of doing the drag within the browser and having it talk to your editor somehow, so no dedicated design tool involved - but the thing of mapping the drag action to a change to a particular syntax node seemed a bit too complex to just \"knock together\" something like that",
        "user": "U03FKLDAAN8",
        "ts": "1653322919.066749",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wRuL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I wanted to do a similar-ish thing to do with creating diagrams in Svelte, where you could drag boxes to reposition them - with some way of doing the drag within the browser and having it talk to your editor somehow, so no dedicated design tool involved - but the thing of mapping the drag action to a change to a particular syntax node seemed a bit too complex to just \"knock together\" something like that"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653320954.120799",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "client_msg_id": "03268b0e-6c77-499a-a7f0-0c5761d3bdcc",
        "type": "message",
        "text": "We're still working out how to support the early stage ideation design work where free flow layout is likely the best interaction. Our initial focus is on using design systems with a well built set of foundational primitives and layout components that you can use like Lego blocks. Both Chakra UI and Braid DS support this way of working quite nicely.",
        "user": "U03GBV8B58V",
        "ts": "1653323587.815969",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "LK2b0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We're still working out how to support the early stage ideation design work where free flow layout is likely the best interaction. Our initial focus is on using design systems with a well built set of foundational primitives and layout components that you can use like Lego blocks. Both Chakra UI and Braid DS support this way of working quite nicely."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653320954.120799",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "client_msg_id": "35228b93-ab76-4749-a054-887bb774b3c6",
        "type": "message",
        "text": "Currently we support React projects written with TypeScript.",
        "user": "U03GBV8B58V",
        "ts": "1653323624.123869",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "EAF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Currently we support React projects written with TypeScript."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653320954.120799",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "type": "message",
        "subtype": "thread_broadcast",
        "text": "<https://twitter.com/whitebox_sys/status/1528796270797651968>",
        "user": "UEDDR6L5Q",
        "ts": "1653329299.588899",
        "thread_ts": "1651021291.678509",
        "root": {
            "client_msg_id": "9c48c2fa-db7b-4d9a-a340-40d52410e906",
            "type": "message",
            "text": "I'm trying to get better about sharing details on WhiteBox, the live debugger for C/C++ I've been working on for the last few years. Here's the first of what should hopefully be a long series of daily posts on it :grinning:\nI've talked a bit about it around FoC before, but I'm trying to make sure I cover it comprehensively. Do let me know if there's anything in particular you'd like to hear about it/its internals/the philosophy behind it.\n<https://twitter.com/whitebox_sys/status/1519114889905819651>",
            "user": "UEDDR6L5Q",
            "ts": "1651021291.678509",
            "team": "T5TCAFTA9",
            "attachments": [
                {
                    "from_url": "https://twitter.com/whitebox_sys/status/1519114889905819651",
                    "ts": 1651020188,
                    "thumb_url": "https://pbs.twimg.com/ext_tw_video_thumb/1519114863993405446/pu/img/7vtCNU4Ec9qvpdXz.jpg",
                    "thumb_width": 1199,
                    "thumb_height": 687,
                    "video_html": "<video controls poster=\"https://pbs.twimg.com/ext_tw_video_thumb/1519114863993405446/pu/img/7vtCNU4Ec9qvpdXz.jpg\" width=\"1200\" height=\"687\"><source type=\"video/mp4\" src=\"https://video.twimg.com/ext_tw_video/1519114863993405446/pu/vid/1256x720/-4vx8xeoVe47bkt_.mp4?tag=12\"></video>",
                    "video_html_width": 1200,
                    "video_html_height": 687,
                    "id": 1,
                    "original_url": "https://twitter.com/whitebox_sys/status/1519114889905819651",
                    "fallback": "<https://twitter.com/whitebox_sys|@whitebox_sys>: Let's start off with a key feature: immediate feedback.\n\nEvery time you change your code, WhiteBox shows you how that affected runtime behaviour: both data changes &amp; control flow.\n\nIterate faster, catch errors as you enter them, and tinker around to better understand your system. <https://pbs.twimg.com/ext_tw_video_thumb/1519114863993405446/pu/img/7vtCNU4Ec9qvpdXz.jpg>",
                    "text": "Let's start off with a key feature: immediate feedback.\n\nEvery time you change your code, WhiteBox shows you how that affected runtime behaviour: both data changes &amp; control flow.\n\nIterate faster, catch errors as you enter them, and tinker around to better understand your system.",
                    "author_name": "WhiteBox",
                    "author_link": "https://twitter.com/whitebox_sys/status/1519114889905819651",
                    "author_icon": "https://pbs.twimg.com/profile_images/1192472112457535489/gp2uXFBY_normal.jpg",
                    "author_subname": "@whitebox_sys",
                    "service_name": "twitter",
                    "service_url": "https://twitter.com/",
                    "footer": "Twitter",
                    "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
                }
            ],
            "blocks": [
                {
                    "type": "rich_text",
                    "block_id": "YvX",
                    "elements": [
                        {
                            "type": "rich_text_section",
                            "elements": [
                                {
                                    "type": "text",
                                    "text": "I'm trying to get better about sharing details on WhiteBox, the live debugger for C/C++ I've been working on for the last few years. Here's the first of what should hopefully be a long series of daily posts on it "
                                },
                                {
                                    "type": "emoji",
                                    "name": "grinning"
                                },
                                {
                                    "type": "text",
                                    "text": "\nI've talked a bit about it around FoC before, but I'm trying to make sure I cover it comprehensively. Do let me know if there's anything in particular you'd like to hear about it/its internals/the philosophy behind it.\n"
                                },
                                {
                                    "type": "link",
                                    "url": "https://twitter.com/whitebox_sys/status/1519114889905819651"
                                }
                            ]
                        }
                    ]
                }
            ],
            "thread_ts": "1651021291.678509",
            "reply_count": 8,
            "reply_users_count": 3,
            "latest_reply": "1653329299.588899",
            "reply_users": [
                "UDQBTJ211",
                "UEDDR6L5Q",
                "U03E4LY27FS"
            ],
            "is_locked": false,
            "subscribed": false
        },
        "attachments": [
            {
                "from_url": "https://twitter.com/whitebox_sys/status/1528796270797651968",
                "ts": 1653328409,
                "thumb_url": "https://pbs.twimg.com/ext_tw_video_thumb/1528796246349053952/pu/img/PqJXliX1IJ4gUvUS.jpg",
                "thumb_width": 1200,
                "thumb_height": 675,
                "video_html": "<video controls poster=\"https://pbs.twimg.com/ext_tw_video_thumb/1528796246349053952/pu/img/PqJXliX1IJ4gUvUS.jpg\" width=\"1200\" height=\"675\"><source type=\"video/mp4\" src=\"https://video.twimg.com/ext_tw_video/1528796246349053952/pu/vid/1280x720/Fu9G9_G4ms79_EZe.mp4?tag=12\"></video>",
                "video_html_width": 1200,
                "video_html_height": 675,
                "id": 1,
                "original_url": "https://twitter.com/whitebox_sys/status/1528796270797651968",
                "fallback": "<https://twitter.com/whitebox_sys|@whitebox_sys>: Every bit of friction eliminated is one fewer thing to distract you when you're working.\n\nYou can now zoom in &amp; out on the timeline without the WhiteBox window being in focus.\n\nQuickly investigate values while still being able to move your cursor around and edit your code. <https://pbs.twimg.com/ext_tw_video_thumb/1528796246349053952/pu/img/PqJXliX1IJ4gUvUS.jpg>",
                "text": "Every bit of friction eliminated is one fewer thing to distract you when you're working.\n\nYou can now zoom in &amp; out on the timeline without the WhiteBox window being in focus.\n\nQuickly investigate values while still being able to move your cursor around and edit your code.",
                "author_name": "WhiteBox",
                "author_link": "https://twitter.com/whitebox_sys/status/1528796270797651968",
                "author_icon": "https://pbs.twimg.com/profile_images/1192472112457535489/gp2uXFBY_normal.jpg",
                "author_subname": "@whitebox_sys",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k+8",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://twitter.com/whitebox_sys/status/1528796270797651968"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "f00e6b51-16a7-4910-970c-2757ee693a7f",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UDQBTJ211"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "294d0c16-0dfa-497f-8d04-4f3403189fc1",
        "type": "message",
        "text": "I made a little demo of a text based knowledge management/second brain thingy <https://www.youtube.com/watch?v=bi3YkY7UKmM>",
        "user": "UDQBTJ211",
        "ts": "1653331495.527059",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://www.youtube.com/watch?v=bi3YkY7UKmM",
                "thumb_url": "https://i.ytimg.com/vi/bi3YkY7UKmM/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"300\" src=\"https://www.youtube.com/embed/bi3YkY7UKmM?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 300,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=bi3YkY7UKmM",
                "fallback": "YouTube Video: Banghashat demo",
                "title": "Banghashat demo",
                "title_link": "https://www.youtube.com/watch?v=bi3YkY7UKmM",
                "author_name": "ChrisKnott",
                "author_link": "https://www.youtube.com/user/ChrisKnott",
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mXL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I made a little demo of a text based knowledge management/second brain thingy "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=bi3YkY7UKmM"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653331495.527059",
        "reply_count": 15,
        "reply_users_count": 4,
        "latest_reply": "1653407523.412919",
        "reply_users": [
            "UDQBTJ211",
            "UCUSW7WVD",
            "U013ZLJARC7",
            "UJBAJNFLK"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD",
                    "UJBAJNFLK",
                    "UEDDR6L5Q"
                ],
                "count": 3
            },
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "U03C0DRJB8B"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "c1fa1ffc-0a5b-4f3e-b665-19271891bff4",
        "type": "message",
        "text": "Basically it is meant to be a more humane and flexible version of graph databases like Neo4j. The \"database\" is currently text files with a git-like design that looks for changes and updates hands off indexes that are used for the queries (stored separately under a single .bha folder).",
        "user": "UDQBTJ211",
        "ts": "1653331668.684059",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "urel",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Basically it is meant to be a more humane and flexible version of graph databases like Neo4j. The \"database\" is currently text files with a git-like design that looks for changes and updates hands off indexes that are used for the queries (stored separately under a single .bha folder)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653331495.527059",
        "parent_user_id": "UDQBTJ211"
    },
    {
        "client_msg_id": "7dae84e3-c2a4-4a77-9fa5-6c27bc769783",
        "type": "message",
        "text": "Ultimately I would like it to ship with a large \"standard library\", that doesn't just search for your own entities, but extracts them from known file types (probably using Apache Tika). So it would be like plugging a super-powered graph search engine onto your normal OS.\n\nFor example, if you had an Excel file, it would add Entities in your graph, not just at the file level, but also things within it. Like it would automatically make;\n```@[C:\\Users\\Chris\\my excel file.xls]\n   ![MS Excel Workbook]\n   #created:01/03/2019  #filesize:120kb\n   #worksheet: @[Sheet 1]\n   #worksheet: @[Sheet 2]\n   #worksheet: @[Sheet 3]```\nI think a system like this could be used to create the <https://alexanderobenauer.com/labnotes/000/|Itemized OS that Alexander Obenauer writes about>, on top of the OSes that we already have.",
        "user": "UDQBTJ211",
        "ts": "1653332235.735439",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UDQBTJ211",
            "ts": "1653332248.000000"
        },
        "attachments": [
            {
                "from_url": "https://alexanderobenauer.com/labnotes/000/",
                "service_icon": "https://alexanderobenauer.com/assets/icons/apple-touch-icon.png",
                "id": 1,
                "original_url": "https://alexanderobenauer.com/labnotes/000/",
                "fallback": "LN 000: The Lab Notes",
                "text": "The Lab Notes document the progress, experiments, and insights in my research on the future of personal computing.",
                "title": "LN 000: The Lab Notes",
                "title_link": "https://alexanderobenauer.com/labnotes/000/",
                "service_name": "alexanderobenauer.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jKUVV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ultimately I would like it to ship with a large \"standard library\", that doesn't just search for your own entities, but extracts them from known file types (probably using Apache Tika). So it would be like plugging a super-powered graph search engine onto your normal OS.\n\nFor example, if you had an Excel file, it would add Entities in your graph, not just at the file level, but also things within it. Like it would automatically make;\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "@[C:\\Users\\Chris\\my excel file.xls]\n   ![MS Excel Workbook]\n   #created:01/03/2019  #filesize:120kb\n   #worksheet: @[Sheet 1]\n   #worksheet: @[Sheet 2]\n   #worksheet: @[Sheet 3]"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI think a system like this could be used to create the "
                            },
                            {
                                "type": "link",
                                "url": "https://alexanderobenauer.com/labnotes/000/",
                                "text": "Itemized OS that Alexander Obenauer writes about"
                            },
                            {
                                "type": "text",
                                "text": ", on top of the OSes that we already have."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653331495.527059",
        "parent_user_id": "UDQBTJ211"
    },
    {
        "client_msg_id": "f1194cd4-37a9-4fd8-94ba-41f3a2cf2ab3",
        "type": "message",
        "text": "I love how this is riffing on a question in this forum. #collaboration\n\nThe order of the tags in queries is significant, right? Like the difference between asking who is the brother of Bart vs whose brother is Bart. I wonder if including explicit query variables like Prolog does will make the queries easier to read/learn, even if more verbose. It might also give you more room for maneuver in adding more features.",
        "user": "UCUSW7WVD",
        "ts": "1653343242.052789",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCUSW7WVD",
            "ts": "1653343281.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lyB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I love how this is riffing on a question in this forum. #collaboration\n\nThe order of the tags in queries is significant, right? Like the difference between asking who is the brother of Bart vs whose brother is Bart. I wonder if including explicit query variables like Prolog does will make the queries easier to read/learn, even if more verbose. It might also give you more room for maneuver in adding more features."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653331495.527059",
        "parent_user_id": "UDQBTJ211"
    },
    {
        "client_msg_id": "d34ff1bf-91d7-4f44-962a-ec9da7f67bd2",
        "type": "message",
        "text": "There's actually a colon that distinguishes the \"with the value of\" case, but yeah I think you would eventually want named variables in queries, for some more complicated patterns. SPARQ uses `?var` notation for this which actually fits with the rest of the syntax neatly.\n\nI was planning to use something like this for the functional calculation side, like;\n\n```@Chris\n  !Person\n  #email:chris@chris.com\n  #email:chris@other.com\n  #sent-emails:?[Chris's sent emails]\n\n?[Chris's sent emails]\n  !Email     &lt;- filter to !Email's\n  ?[Chris email address] = @Chris #email\n  #from:?[Chris email address] &lt;-- filter using var\n\n?[Chris email recipients]\n  ?addr = ?[Chris's sent emails] #to\n  #email: ?addr\n```\nI haven't really thought it through properly, I just wanted to actually try out some of the things I had been discussing in the mentioned threads",
        "user": "UDQBTJ211",
        "ts": "1653373326.936889",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UDQBTJ211",
            "ts": "1653373519.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "opQi5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's actually a colon that distinguishes the \"with the value of\" case, but yeah I think you would eventually want named variables in queries, for some more complicated patterns. SPARQ uses "
                            },
                            {
                                "type": "text",
                                "text": "?var",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " notation for this which actually fits with the rest of the syntax neatly.\n\nI was planning to use something like this for the functional calculation side, like;\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "@Chris\n  !Person\n  #email:chris@chris.com\n  #email:chris@other.com\n  #sent-emails:?[Chris's sent emails]\n\n?[Chris's sent emails]\n  !Email     <- filter to !Email's\n  ?[Chris email address] = @Chris #email\n  #from:?[Chris email address] <-- filter using var\n\n?[Chris email recipients]\n  ?addr = ?[Chris's sent emails] #to\n  #email: ?addr\n"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI haven't really thought it through properly, I just wanted to actually try out some of the things I had been discussing in the mentioned threads"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653331495.527059",
        "parent_user_id": "UDQBTJ211"
    },
    {
        "client_msg_id": "5353c957-6ea6-4722-83e8-7470457d70d2",
        "type": "message",
        "text": "If you decide to create a new surface syntax for what are essentially RDF triples, you might want to make sure your model is compatible with RDF so you can interoperate with other knowledge bases.\n\nFor some prior art in terms of the syntax itself, check out the rather similar <https://www.w3.org/TR/turtle/|Turtle notation>:\n```@prefix : &lt;<http://example.org/elements>&gt; .                                                                              \n&lt;<http://en.wikipedia.org/wiki/Helium>&gt;                                                                                  \n    :atomicNumber 2 ;               # xsd:integer                                                                      \n    :atomicMass 4.002602 ;          # xsd:decimal                                                                      \n    :specificGravity 1.663E-4 .     # xsd:double```",
        "user": "U013ZLJARC7",
        "ts": "1653376468.809199",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/UFl+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you decide to create a new surface syntax for what are essentially RDF triples, you might want to make sure your model is compatible with RDF so you can interoperate with other knowledge bases.\n\nFor some prior art in terms of the syntax itself, check out the rather similar "
                            },
                            {
                                "type": "link",
                                "url": "https://www.w3.org/TR/turtle/",
                                "text": "Turtle notation"
                            },
                            {
                                "type": "text",
                                "text": ":\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "@prefix : <"
                            },
                            {
                                "type": "link",
                                "url": "http://example.org/elements"
                            },
                            {
                                "type": "text",
                                "text": "> .                                                                              \n<"
                            },
                            {
                                "type": "link",
                                "url": "http://en.wikipedia.org/wiki/Helium"
                            },
                            {
                                "type": "text",
                                "text": ">                                                                                  \n    :atomicNumber 2 ;               # xsd:integer                                                                      \n    :atomicMass 4.002602 ;          # xsd:decimal                                                                      \n    :specificGravity 1.663E-4 .     # xsd:double"
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ],
        "thread_ts": "1653331495.527059",
        "parent_user_id": "UDQBTJ211",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "bc42b881-f47b-4478-bd4f-586b6bbafefd",
        "type": "message",
        "text": "It does essentially get compiled to triples under the hood, because it currently is implemented on top of Neo4j, but the queries are bewilderingly complex when expressed in those terms.\n\nFor example;\n`#sibling: @Bart`\n\nIs translated to the following Cypher query (it would be similar in SPARQL);\n```match (v_: Entity {{name:\"Bart\"}})\n    match p_v = ((v:Entity)-[:IMPLIES*0..]-&gt;(v_))\n    with distinct v, [m in nodes(p_v) where 'Context' in labels(m)] as contexts\n    match (k_:Attribute {name:\"sibling\"})\n    match p_k = ((k:Attribute)-[:IMPLIES*0..]-&gt;(k_))\n    with distinct v, k, [m in nodes(p_k) where 'Context' in labels(m)]+contexts as contexts\n    match (k)-[:VALUE]-&gt;(c:Context)-[:VALUE]-&gt;(v),\n                        (c)-[:CONTEXT]-&gt;(n:Entity)\n    with distinct n, contexts\n    where size(contexts) = 0 or \n    all(c in contexts where exists((c)-[:CONTEXT]-&gt;()&lt;-[:IMPLIES*0..]-()&lt;-[:CATEGORY|ATTRIBUTE*0..1]-()&lt;-[:IMPLIES*0..]-(n)))\n     \n    return distinct n\n```\nWhich is not reasonable for a user to write.",
        "user": "UDQBTJ211",
        "ts": "1653378479.416069",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UDQBTJ211",
            "ts": "1653389292.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Wx7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It does essentially get compiled to triples under the hood, because it currently is implemented on top of Neo4j, but the queries are bewilderingly complex when expressed in those terms.\n\nFor example;\n"
                            },
                            {
                                "type": "text",
                                "text": "#sibling: @Bart\n",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nIs translated to the following Cypher query (it would be similar in SPARQL);\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "match (v_: Entity {{name:\"Bart\"}})\n    match p_v = ((v:Entity)-[:IMPLIES*0..]->(v_))\n    with distinct v, [m in nodes(p_v) where 'Context' in labels(m)] as contexts\n    match (k_:Attribute {name:\"sibling\"})\n    match p_k = ((k:Attribute)-[:IMPLIES*0..]->(k_))\n    with distinct v, k, [m in nodes(p_k) where 'Context' in labels(m)]+contexts as contexts\n    match (k)-[:VALUE]->(c:Context)-[:VALUE]->(v),\n                        (c)-[:CONTEXT]->(n:Entity)\n    with distinct n, contexts\n    where size(contexts) = 0 or \n    all(c in contexts where exists((c)-[:CONTEXT]->()<-[:IMPLIES*0..]-()<-[:CATEGORY|ATTRIBUTE*0..1]-()<-[:IMPLIES*0..]-(n)))\n     \n    return distinct n\n"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nWhich is not reasonable for a user to write."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653331495.527059",
        "parent_user_id": "UDQBTJ211"
    },
    {
        "client_msg_id": "fc248405-231d-48e9-9977-9af2a825eb0b",
        "type": "message",
        "text": "I'm on a bit of an \"ethnographic\" thing at the moment so trying to come at stuff from a starting point of how people are already interacting with computers right now in the real world, rather than my own preferences which tend to be far too mathematical, \"precise\" and \"elegant\" for most of the species :upside_down_face:",
        "user": "UDQBTJ211",
        "ts": "1653379390.803009",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UDQBTJ211",
            "ts": "1653379403.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e=5DT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm on a bit of an \"ethnographic\" thing at the moment so trying to come at stuff from a starting point of how people are already interacting with computers right now in the real world, rather than my own preferences which tend to be far too mathematical, \"precise\" and \"elegant\" for most of the species "
                            },
                            {
                                "type": "emoji",
                                "name": "upside_down_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653331495.527059",
        "parent_user_id": "UDQBTJ211",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            },
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "83b50d38-a516-4ee6-9ce2-7de69a18aa5c",
        "type": "message",
        "text": "Interesting! A small-scale knowledge graph with a lightweight interface looks very useful indeed.\n\nFrom my first impressions, I'd say yours is already getting too complex. Example: the way you disambiguate \"Bart\" by context. For a personal knowledge database, I'd probably prefer to keep entities unique, implying longer names, and add a completion interface for discovery and for faster entry. You'd type \"Bart\" and the system proposes all the entities containing \"Bart\" for selection.",
        "user": "UJBAJNFLK",
        "ts": "1653379977.807489",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jI3CO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting! A small-scale knowledge graph with a lightweight interface looks very useful indeed.\n\nFrom my first impressions, I'd say yours is already getting too complex. Example: the way you disambiguate \"Bart\" by context. For a personal knowledge database, I'd probably prefer to keep entities unique, implying longer names, and add a completion interface for discovery and for faster entry. You'd type \"Bart\" and the system proposes all the entities containing \"Bart\" for selection."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653331495.527059",
        "parent_user_id": "UDQBTJ211"
    },
    {
        "client_msg_id": "a0ce1ab2-d5d0-4f0c-8c99-4b678cbea813",
        "type": "message",
        "text": "Yeah for sure you would need autocomplete in an actual system.\n\nTo clarify the underlying model, `@Bart` and `@[Bart Simpson]` are separate entities, marking it as synonymous just allows them to be switched in/out in a query. This was meant to be like Wikipedia titles. The canonical title will be something globally unique like \"Queen Victoria (British monarch)\", \"Victoria (Australian state)\", but will typically be referred to by a name (\"Victoria\") which is only contextually unique. This was my attempt to reflect how humans use names, but without introducing too much \"magic\" on the computer side.\n\nA dumb example that might be more clearer of the point of this feature;\n```@[My front door]\n   !Door\n   #closed\n\n@[My garden door]\n   !Door\n   #not-open\n\n@[Half open interval [0, 1)]\n   ![Subset of the Reals]\n   #not-open #not-closed\n\n!Door\n   #not-open = #closed\n```\nThen the query `#closed` with return the two doors, but not the set, because the rule `#not-open = #closed` does not apply in the context of `!Set`, only `!Door`.",
        "user": "UDQBTJ211",
        "ts": "1653381049.112909",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UDQBTJ211",
            "ts": "1653389261.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GAX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah for sure you would need autocomplete in an actual system.\n\nTo clarify the underlying model, "
                            },
                            {
                                "type": "text",
                                "text": "@Bart",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "@[Bart Simpson]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are separate entities, marking it as synonymous just allows them to be switched in/out in a query. This was meant to be like Wikipedia titles. The canonical title will be something globally unique like \"Queen Victoria (British monarch)\", \"Victoria (Australian state)\", but will typically be referred to by a name (\"Victoria\") which is only contextually unique. This was my attempt to reflect how humans use names, but without introducing too much \"magic\" on the computer side.\n\nA dumb example that might be more clearer of the point of this feature;\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "@[My front door]\n   !Door\n   #closed\n\n@[My garden door]\n   !Door\n   #not-open\n\n@[Half open interval [0, 1)]\n   ![Subset of the Reals]\n   #not-open #not-closed\n\n!Door\n   #not-open = #closed\n"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThen the query "
                            },
                            {
                                "type": "text",
                                "text": "#closed",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with return the two doors, but not the set, because the rule "
                            },
                            {
                                "type": "text",
                                "text": "#not-open = #closed",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " does not apply in the context of "
                            },
                            {
                                "type": "text",
                                "text": "!Set",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", only "
                            },
                            {
                                "type": "text",
                                "text": "!Door",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653331495.527059",
        "parent_user_id": "UDQBTJ211"
    },
    {
        "client_msg_id": "fefe2c54-f1f1-4032-b697-68599eec7acb",
        "type": "message",
        "text": "Neo4J is worse at this sort of thing than a TripleStore would be. In terms of making this query in SPARQL (using my Clojure wrapper):\n```(query `{:select [?siblingLabel]\n         :where  [[~(entity \"Bart Simpson\") ~(wdt :sibling) ?sibling]]})\n;;=&gt;\n[{:siblingLabel \"Lisa Simpson\"}\n {:siblingLabel \"Maggie Simpson\"}\n {:siblingLabel \"Hugo Simpson\"}]```\nMy own note-taking system includes a bunch of semantic web/GOFAI stuff, but also uses neural nets, &amp;c. I strongly encourage this line of inquiry! :slightly_smiling_face: But I also wanted to give you some advice from farther down this road.",
        "user": "U013ZLJARC7",
        "ts": "1653381549.628129",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GpQrm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Neo4J is worse at this sort of thing than a TripleStore would be. In terms of making this query in SPARQL (using my Clojure wrapper):\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(query `{:select [?siblingLabel]\n         :where  [[~(entity \"Bart Simpson\") ~(wdt :sibling) ?sibling]]})\n;;=>\n[{:siblingLabel \"Lisa Simpson\"}\n {:siblingLabel \"Maggie Simpson\"}\n {:siblingLabel \"Hugo Simpson\"}]"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My own note-taking system includes a bunch of semantic web/GOFAI stuff, but also uses neural nets, &c. I strongly encourage this line of inquiry! "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            },
                            {
                                "type": "text",
                                "text": " But I also wanted to give you some advice from farther down this road."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653331495.527059",
        "parent_user_id": "UDQBTJ211"
    },
    {
        "client_msg_id": "0b2502a2-5242-422a-a12b-dae153b910cc",
        "type": "message",
        "text": "But how does it know that \"Bart Simpson\", sibling, \"Lisa Simpson\"?\n\nThe actual triple is \"Bart Simpson\", *sister*, \"Lisa Simpson\"",
        "user": "UDQBTJ211",
        "ts": "1653381681.844069",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V7x0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But how does it know that \"Bart Simpson\", sibling, \"Lisa Simpson\"?\n\nThe actual triple is \"Bart Simpson\", "
                            },
                            {
                                "type": "text",
                                "text": "sister",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", \"Lisa Simpson\""
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653331495.527059",
        "parent_user_id": "UDQBTJ211"
    },
    {
        "client_msg_id": "455327ba-0b77-4e25-be87-61dffddd42ff",
        "type": "message",
        "text": "I actually had Hugo in the demo originally but I thought it would confuse people with deficit Simpsons knowledge :rolling_on_the_floor_laughing:",
        "user": "UDQBTJ211",
        "ts": "1653381804.537249",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xZw5N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I actually had Hugo in the demo originally but I thought it would confuse people with deficit Simpsons knowledge "
                            },
                            {
                                "type": "emoji",
                                "name": "rolling_on_the_floor_laughing"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653331495.527059",
        "parent_user_id": "UDQBTJ211",
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "f39695d2-0910-40c7-9120-75870813ff12",
        "type": "message",
        "text": "<@U013ZLJARC7> I'm curious to hear more about how you use symbolic AI in your note taking system!",
        "user": "UCUSW7WVD",
        "ts": "1653399575.069229",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WQS0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " I'm curious to hear more about how you use symbolic AI in your note taking system!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653331495.527059",
        "parent_user_id": "UDQBTJ211"
    },
    {
        "client_msg_id": "e6a4b4e8-3c61-4cff-a3ee-6fd74c79d117",
        "type": "message",
        "text": "<@UDQBTJ211> In this case the database happens to contain those assertions, as I'm running this query against Wikidata. If I had a DB with only brother and sister, I'd be able to specify what sibling means using a meta-language that would then allow this query to remain as simple.",
        "user": "U013ZLJARC7",
        "ts": "1653407492.705799",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CYYYl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UDQBTJ211"
                            },
                            {
                                "type": "text",
                                "text": " In this case the database happens to contain those assertions, as I'm running this query against Wikidata. If I had a DB with only brother and sister, I'd be able to specify what sibling means using a meta-language that would then allow this query to remain as simple."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653331495.527059",
        "parent_user_id": "UDQBTJ211"
    },
    {
        "client_msg_id": "580a0dad-ec4e-42aa-a01b-87dd6e7111d8",
        "type": "message",
        "text": "<@UCUSW7WVD> I need to make a video about the whole thing",
        "user": "U013ZLJARC7",
        "ts": "1653407523.412919",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "01gl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " I need to make a video about the whole thing"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653331495.527059",
        "parent_user_id": "UDQBTJ211",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UCUSW7WVD",
                    "UEBG0NPDK",
                    "UJBAJNFLK",
                    "UDQBTJ211",
                    "UAZT04VT4"
                ],
                "count": 5
            }
        ]
    },
    {
        "client_msg_id": "44b71605-3029-47bd-9f0e-dfffb5d14803",
        "type": "message",
        "text": "ux designer might perceive this is for developer, developer might perceive this is for ux designer. Design should be cheaper to change than real frontend code, because it is under-specified, with lots of details omitted. If the design is the frontend code, can we still sit beside the designers desk to iterate prototype fast?",
        "user": "UKFNXF0F9",
        "ts": "1653477723.835359",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "75MGr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ux designer might perceive this is for developer, developer might perceive this is for ux designer. Design should be cheaper to change than real frontend code, because it is under-specified, with lots of details omitted. If the design is the frontend code, can we still sit beside the designers desk to iterate prototype fast?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653320954.120799",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "client_msg_id": "c4d1b5ae-c7fe-43c3-98f3-9969bfba9213",
        "type": "message",
        "text": "There is a wide spectrum of types of design work, spanning for very early ideation + visual design and all the way to interaction design with pre-existing design system components. We're currently adding most value later in the process, but we are also looking at supporting earlier stages with freeform layout (e.g. absolute position and dragging to reposition) to allow designers to just \"throw something on the canvas in an unstructured way until it feels right\". That \"something\" can be quite low level primitives like Box and Text components, that can provide some of the same freedoms that rect and text does today in Figma for example.",
        "user": "U03GBV8B58V",
        "ts": "1653483444.704509",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iWz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There is a wide spectrum of types of design work, spanning for very early ideation + visual design and all the way to interaction design with pre-existing design system components. We're currently adding most value later in the process, but we are also looking at supporting earlier stages with freeform layout (e.g. absolute position and dragging to reposition) to allow designers to just \"throw something on the canvas in an unstructured way until it feels right\". That \"something\" can be quite low level primitives like Box and Text components, that can provide some of the same freedoms that rect and text does today in Figma for example."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653320954.120799",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "client_msg_id": "854e92e3-e2ec-42e8-85fe-19971cf4ce5e",
        "type": "message",
        "text": "On fast prototyping, one of the strengths we have there is to allow the use of production components right next to whatever new the designer is working on (e.g using a combination of Box and Text). So you can get a much better sense of the real product, while also allowing for creative freedom (which then needs to be turned into production components with tests being written by devs).",
        "user": "U03GBV8B58V",
        "ts": "1653483627.985439",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U03GBV8B58V",
            "ts": "1653483649.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qOW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On fast prototyping, one of the strengths we have there is to allow the use of production components right next to whatever new the designer is working on (e.g using a combination of Box and Text). So you can get a much better sense of the real product, while also allowing for creative freedom (which then needs to be turned into production components with tests being written by devs)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653320954.120799",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "client_msg_id": "1b3ea22d-b083-4847-817b-5cbaf93b826b",
        "type": "message",
        "text": "Can you design components that vary their visual appearance depending on the state or the input data with Henosia?",
        "user": "UAZT04VT4",
        "ts": "1653595001.078229",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2+C",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Can you design components that vary their visual appearance depending on the state or the input data with Henosia?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653320954.120799",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "client_msg_id": "c88dfe20-e29c-4c3c-823a-04e8f56cb307",
        "type": "message",
        "text": "<@UAZT04VT4> We've done early explorations in this area, but nothing that we can share widely yet. Since our source of truth is TypeScript code (as an AST) we can reason about the flow of React props and conditional rendering of elements/class names. The challenge is to provide a meaningful UI for a designer based on what's essentially open-ended TypeScript code. Same as the TypeScript compiler does flow analysis, there may be cases where code is too difficult to follow for the tool (which we would then tell the user), but there may be an 80/20 rule in there where just giving designers a bit of conditionals would add a lot of value.",
        "user": "U03GBV8B58V",
        "ts": "1653636892.597539",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U03GBV8B58V",
            "ts": "1653637142.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "okp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UAZT04VT4"
                            },
                            {
                                "type": "text",
                                "text": " We've done early explorations in this area, but nothing that we can share widely yet. Since our source of truth is TypeScript code (as an AST) we can reason about the flow of React props and conditional rendering of elements/class names. The challenge is to provide a meaningful UI for a designer based on what's essentially open-ended TypeScript code. Same as the TypeScript compiler does flow analysis, there may be cases where code is too difficult to follow for the tool (which we would then tell the user), but there may be an 80/20 rule in there where just giving designers a bit of conditionals would add a lot of value."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653320954.120799",
        "parent_user_id": "U03GBV8B58V",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "220d5a0d-079d-40f6-8a83-cb0c51f2c0c0",
        "type": "message",
        "text": "The 80/20 rule will get you a long way.  When code is too difficult for a good tool to follow, either (1) the code is bad, or (2)  it's implementing some higher order pattern that uses a different mental model than the flow that the abstraction layer ends up producing.\n\nRails filters come immediately to mind as an example of (2).  <https://guides.rubyonrails.org/action_controller_overview.html#filters> The mental model is pretty simple, but the control flow that leads to their execution is pretty much inscrutable.",
        "user": "UA14TGLTC",
        "ts": "1653663792.303979",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UA14TGLTC",
            "ts": "1653663801.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xw/5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The 80/20 rule will get you a long way.  When code is too difficult for a good tool to follow, either (1) the code is bad, or (2)  it's implementing some higher order pattern that uses a different mental model than the flow that the abstraction layer ends up producing.\n\nRails filters come immediately to mind as an example of (2).  "
                            },
                            {
                                "type": "link",
                                "url": "https://guides.rubyonrails.org/action_controller_overview.html#filters"
                            },
                            {
                                "type": "text",
                                "text": " The mental model is pretty simple, but the control flow that leads to their execution is pretty much inscrutable."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653320954.120799",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "client_msg_id": "ab5b73f4-a38f-4dc9-98ad-eeac45f891b5",
        "type": "message",
        "text": "Good points. I've been thinking lately that high quality UI component code should be easy to explain to a non-technical designer if they asked how a component works. If code meets that quality bar, a tool has a chance at visualizing it in a way where the designer can feel safe enough to edit the visual parts.",
        "user": "U03GBV8B58V",
        "ts": "1653667478.528909",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NMUw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good points. I've been thinking lately that high quality UI component code should be easy to explain to a non-technical designer if they asked how a component works. If code meets that quality bar, a tool has a chance at visualizing it in a way where the designer can feel safe enough to edit the visual parts."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653320954.120799",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "client_msg_id": "81eac1cc-2695-464c-922f-0b3a2eecc72a",
        "type": "message",
        "text": "By \"explain\" I don't mean syntax specifics or technical jargon, more like data flow, i.e. \"this todo list component repeats a todo item component for each todo in the list it is displaying. To each todo item component we pass in the todo data which includes the todo title and whether the todo is completed\".",
        "user": "U03GBV8B58V",
        "ts": "1653667631.065789",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U03GBV8B58V",
            "ts": "1653667703.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Mdg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "By \"explain\" I don't mean syntax specifics or technical jargon, more like data flow, i.e. \"this todo list component repeats a todo item component for each todo in the list it is displaying. To each todo item component we pass in the todo data which includes the todo title and whether the todo is completed\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1653320954.120799",
        "parent_user_id": "U03GBV8B58V"
    }
]