[
    {
        "client_msg_id": "6dbf1bf7-5f91-499f-a8b2-7decfce04e0e",
        "type": "message",
        "text": "Hello Future of Coding community, I have finally had time to put together a draft of a concept I've had for a few months now - ReadableScript is a very simple 'javascript virtual machine language' that uses assembly-like syntax. Would love any and all feedback, do you think this could be a more accessible style of programming for beginners? Also as it's a \"vm\" it may be well suited to low-code programming environments. My next milestone goal is to integrate the language into a REPL. Note that this is a very rough draft, you can't even make strings! But the concept should be clear.\n\n<https://readablescript.com/>",
        "user": "U035VS7E01K",
        "ts": "1652716973.932379",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lyaD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hello Future of Coding community, I have finally had time to put together a draft of a concept I've had for a few months now - ReadableScript is a very simple 'javascript virtual machine language' that uses assembly-like syntax. Would love any and all feedback, do you think this could be a more accessible style of programming for beginners? Also as it's a \"vm\" it may be well suited to low-code programming environments. My next milestone goal is to integrate the language into a REPL. Note that this is a very rough draft, you can't even make strings! But the concept should be clear.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://readablescript.com/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652716973.932379",
        "reply_count": 11,
        "reply_users_count": 5,
        "latest_reply": "1652881333.461239",
        "reply_users": [
            "U03ELMTAZNY",
            "U035VS7E01K",
            "UCUSW7WVD",
            "U03B14DUZSA",
            "U013ZLJARC7"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "c441a568-a939-4ebd-84d2-b77fd5e634e3",
        "type": "message",
        "text": "I hope I'm not bikeshedding if I recommend that you increase the overall text contrast of that page. Especially the red on black in the sample code and output image will be invisible <https://accessibility.psu.edu/color/colorvisiondetails/#:~:text=Why%20Red%2FBlack%20Can%20Be,should%20be%20avoided%20whenever%20possible.|to many people>. And if you add `white-space: pre` to your textarea you'll ensure that lines won't wrap.",
        "user": "U03ELMTAZNY",
        "ts": "1652717158.640199",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U03ELMTAZNY",
            "ts": "1652717426.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ugBx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I hope I'm not bikeshedding if I recommend that you increase the overall text contrast of that page. Especially the red on black in the sample code and output image will be invisible "
                            },
                            {
                                "type": "link",
                                "url": "https://accessibility.psu.edu/color/colorvisiondetails/#:~:text=Why%20Red%2FBlack%20Can%20Be,should%20be%20avoided%20whenever%20possible.",
                                "text": "to many people"
                            },
                            {
                                "type": "text",
                                "text": ". And if you add "
                            },
                            {
                                "type": "text",
                                "text": "white-space: pre",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to your textarea you'll ensure that lines won't wrap."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652716973.932379",
        "parent_user_id": "U035VS7E01K",
        "reactions": [
            {
                "name": "heartbeat",
                "users": [
                    "U035VS7E01K"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c5254ea8-dee5-42c3-a34e-e11134214a5f",
        "type": "message",
        "text": "Thank you so much for the feedback <@U03ELMTAZNY>! I've deployed your suggestions",
        "user": "U035VS7E01K",
        "ts": "1652717424.566729",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Cmcq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you so much for the feedback "
                            },
                            {
                                "type": "user",
                                "user_id": "U03ELMTAZNY"
                            },
                            {
                                "type": "text",
                                "text": "! I've deployed your suggestions"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652716973.932379",
        "parent_user_id": "U035VS7E01K"
    },
    {
        "client_msg_id": "a282491d-366d-4e1c-8b6e-16f874ff975a",
        "type": "message",
        "text": "Much better, thanks! :sweat_smile:",
        "user": "U03ELMTAZNY",
        "ts": "1652717448.611149",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nVz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Much better, thanks! "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652716973.932379",
        "parent_user_id": "U035VS7E01K",
        "reactions": [
            {
                "name": "raised_hands",
                "users": [
                    "U035VS7E01K"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e86ce7db-6f71-4b3b-bfe1-9e0a4f72c536",
        "type": "message",
        "text": "Don't the long multi-line and blocks hinder read-aloud-ability? I can imagine listening on the phone and having to periodically ask, \"how many quotes is that?\"\n\nI didn't design <https://github.com/akkartik/mu|https://github.com/akkartik/mu> to be read aloud, but now that I think about it, it feels a bit nicer to read aloud since statements really occupy a single line and are therefore constrained to be short. The cost: lots more temporary variable names, so you'd have to ensure they're don't sound too similar to each other.\n\nHave you considered creating just a style of JavaScript that is convenient to read aloud?",
        "user": "UCUSW7WVD",
        "ts": "1652717717.486929",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1uQu9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Don't the long multi-line and blocks hinder read-aloud-ability? I can imagine listening on the phone and having to periodically ask, \"how many quotes is that?\"\n\nI didn't design "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/akkartik/mu",
                                "text": "https://github.com/akkartik/mu"
                            },
                            {
                                "type": "text",
                                "text": " to be read aloud, but now that I think about it, it feels a bit nicer to read aloud since statements really occupy a single line and are therefore constrained to be short. The cost: lots more temporary variable names, so you'd have to ensure they're don't sound too similar to each other.\n\nHave you considered creating just a style of JavaScript that is convenient to read aloud?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652716973.932379",
        "parent_user_id": "U035VS7E01K"
    },
    {
        "client_msg_id": "3829353c-c95d-4db6-b203-5814e69aa682",
        "type": "message",
        "text": "I'm curious if you've given thought to the treatment of camelCase words. For example, in `createElement` do you consider the function to be known to the receiving party so that any ambiguity would be acceptable? Or did you use a specific diction in the past?\n\n<https://stackoverflow.com/questions/44378834/how-can-i-camelcase-a-phrase-with-dragon-naturallyspeakings-advanced-scripting|Dragon NS> for example seems to require post editing commands, which doesn't seem like a reasonable workaround for natural language.",
        "user": "U03ELMTAZNY",
        "ts": "1652718100.950089",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U03ELMTAZNY",
            "ts": "1652718240.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sCsM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm curious if you've given thought to the treatment of camelCase words. For example, in "
                            },
                            {
                                "type": "text",
                                "text": "createElement",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " do you consider the function to be known to the receiving party so that any ambiguity would be acceptable? Or did you use a specific diction in the past?\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://stackoverflow.com/questions/44378834/how-can-i-camelcase-a-phrase-with-dragon-naturallyspeakings-advanced-scripting",
                                "text": "Dragon NS"
                            },
                            {
                                "type": "text",
                                "text": " for example seems to require post editing commands, which doesn't seem like a reasonable workaround for natural language."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652716973.932379",
        "parent_user_id": "U035VS7E01K"
    },
    {
        "client_msg_id": "1617c46a-349d-486d-8834-0521e99c0747",
        "type": "message",
        "text": "(Perhaps all special characters should be aliased to <https://en.wikipedia.org/wiki/List_of_onomatopoeias|onomatopoeias> like \"Pow\" and \"Whoosh\" ... :grimacing:)",
        "user": "U03ELMTAZNY",
        "ts": "1652718647.520449",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U03ELMTAZNY",
            "ts": "1652718772.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KJNK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(Perhaps all special characters should be aliased to "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/List_of_onomatopoeias",
                                "text": "onomatopoeias"
                            },
                            {
                                "type": "text",
                                "text": " like \"Pow\" and \"Whoosh\" ... "
                            },
                            {
                                "type": "emoji",
                                "name": "grimacing"
                            },
                            {
                                "type": "text",
                                "text": ")"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652716973.932379",
        "parent_user_id": "U035VS7E01K",
        "reactions": [
            {
                "name": "grin",
                "users": [
                    "U035VS7E01K"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "a006f6e6-63ad-4aa6-b2a4-eb5e905e7655",
        "type": "message",
        "text": "I'm working on a unification of programming languages, databases and network protocols by starting with the serialization.\n<https://github.com/bintoca/dbuf>",
        "user": "UGRG57D8C",
        "ts": "1652722141.447769",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k08",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm working on a unification of programming languages, databases and network protocols by starting with the serialization.\n"
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/bintoca/dbuf"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652722141.447769",
        "reply_count": 10,
        "reply_users_count": 3,
        "latest_reply": "1652814985.804689",
        "reply_users": [
            "U03DNFDFYDA",
            "UGRG57D8C",
            "U02E4DAQGSZ"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U035VS7E01K"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "a647b7f2-0c87-415e-b776-98afc5d4015c",
        "type": "message",
        "text": "<@U03ELMTAZNY> I'd almost rather enforce everything be lowercase as far as language keywords go (but symbol names and strings should be able to contain any character)",
        "user": "U035VS7E01K",
        "ts": "1652723387.212429",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JBs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U03ELMTAZNY"
                            },
                            {
                                "type": "text",
                                "text": " I'd almost rather enforce everything be lowercase as far as language keywords go (but symbol names and strings should be able to contain any character)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652716973.932379",
        "parent_user_id": "U035VS7E01K"
    },
    {
        "client_msg_id": "6cb37b19-916c-42f9-878a-a24ed383add5",
        "type": "message",
        "text": "<@UCUSW7WVD> thanks for calling that out - note that putting many lines on one line with ' is optional, so the following are identical:\n\n```at foo ' add 40 ' log```\nand\n```at foo\nadd 40\nlog```\nso you can trade vertical and horizontal space when writing the language\n\nI will check out Mu - about to catch a :airplane:",
        "user": "U035VS7E01K",
        "ts": "1652728359.744809",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "odP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " thanks for calling that out - note that putting many lines on one line with ' is optional, so the following are identical:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "at foo ' add 40 ' log"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "and\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "at foo\nadd 40\nlog"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nso you can trade vertical and horizontal space when writing the language\n\nI will check out Mu - about to catch a "
                            },
                            {
                                "type": "emoji",
                                "name": "airplane"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652716973.932379",
        "parent_user_id": "U035VS7E01K"
    },
    {
        "client_msg_id": "844b0db1-3172-4a91-a53e-b84e243e24bf",
        "type": "message",
        "text": "The quotes as the start of a block are not optional, however",
        "user": "U035VS7E01K",
        "ts": "1652728387.526749",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3Vu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The quotes as the start of a block are not optional, however"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652716973.932379",
        "parent_user_id": "U035VS7E01K"
    },
    {
        "type": "message",
        "text": "I am adding some basic types to my Lisperanto project [ <https://uprun.github.io/lisperanto/> ], some one asked me recently how would I represent booleans, and now I have an answer: It is a record with type \u201cboolean\u201d and value either \u201ctrue\u201d or \u201cfalse\u201d in terms of JavaScript it is:\n`{ type: \"boolean\",`\n`value: \"true\" }`",
        "files": [
            {
                "id": "F03FRMM5RHA",
                "created": 1652736840,
                "timestamp": 1652736840,
                "name": "\u0417\u043d\u0456\u043c\u043e\u043a \u0435\u043a\u0440\u0430\u043d\u0430 2022-05-17 \u043e 00.18.05.png",
                "title": "\u0417\u043d\u0456\u043c\u043e\u043a \u0435\u043a\u0440\u0430\u043d\u0430 2022-05-17 \u043e 00.18.05.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U02JQA5FY5C",
                "editable": false,
                "size": 1096325,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F03FRMM5RHA/__________________________2022-05-17____00.18.05.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F03FRMM5RHA/download/__________________________2022-05-17____00.18.05.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F03FRMM5RHA-fb72509ba8/__________________________2022-05-17____00.18.05_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F03FRMM5RHA-fb72509ba8/__________________________2022-05-17____00.18.05_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F03FRMM5RHA-fb72509ba8/__________________________2022-05-17____00.18.05_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 213,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F03FRMM5RHA-fb72509ba8/__________________________2022-05-17____00.18.05_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 284,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F03FRMM5RHA-fb72509ba8/__________________________2022-05-17____00.18.05_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F03FRMM5RHA-fb72509ba8/__________________________2022-05-17____00.18.05_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 427,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F03FRMM5RHA-fb72509ba8/__________________________2022-05-17____00.18.05_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 474,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F03FRMM5RHA-fb72509ba8/__________________________2022-05-17____00.18.05_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 569,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F03FRMM5RHA-fb72509ba8/__________________________2022-05-17____00.18.05_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 607,
                "image_exif_rotation": 1,
                "original_w": 2880,
                "original_h": 1706,
                "thumb_tiny": "AwAcADDN3H1NG5vU0lFAC8kd6TJ9acDhabQAZPrS7m9TSUUAFFFFAC4O3NJingArmhlAXIoAZRRRQB//2Q==",
                "permalink": "https://futureofcoding.slack.com/files/U02JQA5FY5C/F03FRMM5RHA/__________________________2022-05-17____00.18.05.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F03FRMM5RHA-c65fa01d4c",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "user": "U02JQA5FY5C",
        "display_as_bot": false,
        "ts": "1652737034.986039",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lJEfP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am adding some basic types to my Lisperanto project [ "
                            },
                            {
                                "type": "link",
                                "url": "https://uprun.github.io/lisperanto/"
                            },
                            {
                                "type": "text",
                                "text": " ], some one asked me recently how would I represent booleans, and now I have an answer: It is a record with type \u201cboolean\u201d and value either \u201ctrue\u201d or \u201cfalse\u201d in terms of JavaScript it is:\n"
                            },
                            {
                                "type": "text",
                                "text": "{ type: \"boolean\",",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "value: \"true\" }",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "edited": {
            "user": "U02JQA5FY5C",
            "ts": "1652737182.000000"
        },
        "client_msg_id": "6180822f-315e-4a00-9356-38d3e9ff9b76",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "221e4546-3aa7-4096-9147-f1fd9d1eaa4d",
        "type": "message",
        "text": "if only serialization were one of the hard parts :confused:",
        "user": "U03DNFDFYDA",
        "ts": "1652745710.699839",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cr0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if only serialization were one of the hard parts "
                            },
                            {
                                "type": "emoji",
                                "name": "confused"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652722141.447769",
        "parent_user_id": "UGRG57D8C"
    },
    {
        "client_msg_id": "08e99fc6-732f-4e05-8271-1ec013cccd1a",
        "type": "message",
        "text": "<@U03DNFDFYDA> Agreed its not the hard part but I feel leaving it to the end breeds fragmentation and becomes an obstacle to interoperability",
        "user": "UGRG57D8C",
        "ts": "1652752677.238959",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SYp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U03DNFDFYDA"
                            },
                            {
                                "type": "text",
                                "text": " Agreed its not the hard part but I feel leaving it to the end breeds fragmentation and becomes an obstacle to interoperability"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652722141.447769",
        "parent_user_id": "UGRG57D8C"
    },
    {
        "client_msg_id": "10c07cca-adf4-42af-b008-7490ec8e1652",
        "type": "message",
        "text": "The quotes as semicolons seem to hurt readoutability - you would want that boundary to either be uniform, saying \"ret\" each time eg, or best yet unnecessary by making statements expressions that are bounded in arity. I keep getting confused by the structure of it as the semantics of the at/call/push paradigm are nearly inside out from the standard ALGOL style procedure call. The simplicity of your approach is very refreshing compared to JS; however, I only wish it could sit under it rather than above it.\n\nUltimately, I think the most \"readable\" languages look like <https://en.wikipedia.org/wiki/HyperTalk> or Ruby - quite verbose, though with linguistic affordances carrying a lot of context. We have communication hard-wired into our brains, but inventing languages that take advantage of this is more of an art than a science. The more whoever is learning it knows a different type of language, the more the impedance mismatches between them will trip them up compared to an absolute beginner.",
        "user": "U03B14DUZSA",
        "ts": "1652756751.479909",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ux+YD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The quotes as semicolons seem to hurt readoutability - you would want that boundary to either be uniform, saying \"ret\" each time eg, or best yet unnecessary by making statements expressions that are bounded in arity. I keep getting confused by the structure of it as the semantics of the at/call/push paradigm are nearly inside out from the standard ALGOL style procedure call. The simplicity of your approach is very refreshing compared to JS; however, I only wish it could sit under it rather than above it.\n\nUltimately, I think the most \"readable\" languages look like "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/HyperTalk"
                            },
                            {
                                "type": "text",
                                "text": " or Ruby - quite verbose, though with linguistic affordances carrying a lot of context. We have communication hard-wired into our brains, but inventing languages that take advantage of this is more of an art than a science. The more whoever is learning it knows a different type of language, the more the impedance mismatches between them will trip them up compared to an absolute beginner."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652716973.932379",
        "parent_user_id": "U035VS7E01K"
    },
    {
        "client_msg_id": "c37026a7-1002-47ed-88ab-5df4ee90aa81",
        "type": "message",
        "text": "The main gain of dbuf over protobuf is self-describing, are you aware of gRPC reflection? <https://github.com/grpc/grpc/blob/master/doc/server-reflection.md> (protobuffer can do it too but its not well documented)",
        "user": "U02E4DAQGSZ",
        "ts": "1652782389.625669",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0jt=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The main gain of dbuf over protobuf is self-describing, are you aware of gRPC reflection? "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/grpc/grpc/blob/master/doc/server-reflection.md"
                            },
                            {
                                "type": "text",
                                "text": " (protobuffer can do it too but its not well documented)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652722141.447769",
        "parent_user_id": "UGRG57D8C"
    },
    {
        "client_msg_id": "b926a690-a544-4307-8a18-13d05b9a9870",
        "type": "message",
        "text": "I use <http://msgpack.org|msgpack.org> at my day job (it was originally created by one of our founders), it also has that property :slightly_smiling_face:",
        "user": "U03DNFDFYDA",
        "ts": "1652803840.397409",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DTMfW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I use "
                            },
                            {
                                "type": "link",
                                "url": "http://msgpack.org",
                                "text": "msgpack.org"
                            },
                            {
                                "type": "text",
                                "text": " at my day job (it was originally created by one of our founders), it also has that property "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652722141.447769",
        "parent_user_id": "UGRG57D8C"
    },
    {
        "client_msg_id": "ec944292-e9fd-4ce0-9759-351953356086",
        "type": "message",
        "text": "<@U02E4DAQGSZ> That\u2019s a nice help tool but my goal is to go much further. Instead of having dedicated endpoints that each accept a specific data layout, have a server that could natively understand requests of different shapes.",
        "user": "UGRG57D8C",
        "ts": "1652810135.265559",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Pfb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02E4DAQGSZ"
                            },
                            {
                                "type": "text",
                                "text": " That\u2019s a nice help tool but my goal is to go much further. Instead of having dedicated endpoints that each accept a specific data layout, have a server that could natively understand requests of different shapes."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652722141.447769",
        "parent_user_id": "UGRG57D8C"
    },
    {
        "client_msg_id": "cbf4e083-06c3-4e5e-b61c-6a173847162c",
        "type": "message",
        "text": "<@U03DNFDFYDA> Since you brought up out of the tar pit in a different channel, that is where I\u2019m going with this. Using the same type system for the wire, relations, indexes, cached intermediate values and having it all be more runtime adaptive.",
        "user": "UGRG57D8C",
        "ts": "1652810197.159599",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h//gH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U03DNFDFYDA"
                            },
                            {
                                "type": "text",
                                "text": " Since you brought up out of the tar pit in a different channel, that is where I\u2019m going with this. Using the same type system for the wire, relations, indexes, cached intermediate values and having it all be more runtime adaptive."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652722141.447769",
        "parent_user_id": "UGRG57D8C"
    },
    {
        "client_msg_id": "c51a5713-78f0-4f58-bcb7-f0b39963db5d",
        "type": "message",
        "text": "You might be interested in the various WebAssembly efforts to standardize struct/reference/complex types",
        "user": "U03DNFDFYDA",
        "ts": "1652811248.649309",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NI2p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You might be interested in the various WebAssembly efforts to standardize struct/reference/complex types"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652722141.447769",
        "parent_user_id": "UGRG57D8C"
    },
    {
        "client_msg_id": "e448c6e9-2a87-47d8-8dab-dd968b1ed74a",
        "type": "message",
        "text": "I have followed the progress of the GC proposal. I think its going to have limited usefulness as it tries to cater to a wide variety of type systems",
        "user": "UGRG57D8C",
        "ts": "1652812536.435039",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VJ+J",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have followed the progress of the GC proposal. I think its going to have limited usefulness as it tries to cater to a wide variety of type systems"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652722141.447769",
        "parent_user_id": "UGRG57D8C"
    },
    {
        "client_msg_id": "00f05207-5da3-41d4-add8-ce548ab8ca25",
        "type": "message",
        "text": "My snarky impression is they\u2019re reinventing IDL and large parts of the JVM but apparently there are enough people involved who have been around awhile that they have a decent shot at success :confused:",
        "user": "U03DNFDFYDA",
        "ts": "1652812602.536159",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oRuPw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My snarky impression is they\u2019re reinventing IDL and large parts of the JVM but apparently there are enough people involved who have been around awhile that they have a decent shot at success "
                            },
                            {
                                "type": "emoji",
                                "name": "confused"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652722141.447769",
        "parent_user_id": "UGRG57D8C"
    },
    {
        "client_msg_id": "be168085-52c7-43de-b680-0f9fd6eb6f3b",
        "type": "message",
        "text": "Yeah there's plenty of talent involved. I guess part of what makes any big system is just belief",
        "user": "UGRG57D8C",
        "ts": "1652814985.804689",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OeSF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah there's plenty of talent involved. I guess part of what makes any big system is just belief"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652722141.447769",
        "parent_user_id": "UGRG57D8C"
    },
    {
        "client_msg_id": "767de29b-1845-4971-a205-721608ad0e8d",
        "type": "message",
        "text": "Have you read the papers around Applescript? It might be interesting to see how they approached some very similar design constraints.",
        "user": "U013ZLJARC7",
        "ts": "1652881333.461239",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RPWu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Have you read the papers around Applescript? It might be interesting to see how they approached some very similar design constraints."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1652716973.932379",
        "parent_user_id": "U035VS7E01K"
    }
]