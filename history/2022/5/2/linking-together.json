[
    {
        "client_msg_id": "EF2F098D-9C1C-4049-9E2D-0E318B732046",
        "type": "message",
        "text": "Oh my god, I can totally see how this works\u2026 <https://twitter.com/soychotic/status/1520126831478951936|https://twitter.com/soychotic/status/1520126831478951936>",
        "user": "UJFN50C00",
        "ts": "1651489471.222999",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://twitter.com/soychotic/status/1520126831478951936",
                "ts": 1651261453,
                "id": 1,
                "original_url": "https://twitter.com/soychotic/status/1520126831478951936",
                "fallback": "<https://twitter.com/soychotic|@soychotic>: Every time I have a programming question and I rly need help, I post it on Reddit and then log into another account and reply to it with an obscenely incorrect answer. Ppl don\u2019t care about helping others but they LOVE correcting others. Works 100% of the time",
                "text": "Every time I have a programming question and I rly need help, I post it on Reddit and then log into another account and reply to it with an obscenely incorrect answer. Ppl don\u2019t care about helping others but they LOVE correcting others. Works 100% of the time",
                "author_name": "annie",
                "author_link": "https://twitter.com/soychotic/status/1520126831478951936",
                "author_icon": "https://pbs.twimg.com/profile_images/1511530654747574273/gUrSh9K0_normal.jpg",
                "author_subname": "@soychotic",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z6=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh my god, I can totally see how this works\u2026 "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/soychotic/status/1520126831478951936",
                                "text": "https://twitter.com/soychotic/status/1520126831478951936"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "joy",
                "users": [
                    "U03DYNSJAGZ",
                    "UAJKEBGP8",
                    "U0275EZH3UN",
                    "U03DH8P795K",
                    "U02U0AS3J49",
                    "U023V63MF6V",
                    "U013ZLJARC7",
                    "UJFN50C00",
                    "U0258UX5F1C",
                    "U8A5MS6R1",
                    "U039EJ748Q6",
                    "U018MHFH4HF"
                ],
                "count": 12
            },
            {
                "name": "popcorn",
                "users": [
                    "U01ULEWACPP"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "a76477b9-7f4d-480c-b2fb-3c596881e3e9",
        "type": "message",
        "text": "Blockly Developer conference is running tomorrow and wednesday. One of the staff talks is this video showing how by serializing the state of a JS Interpreter, and taking diffs as the state changes, you can build a javascript debugger that has \"next\" and \"previous\" options for navigating the code execution.  <https://youtu.be/wa4pq40_V04>",
        "user": "U02U0AS3J49",
        "ts": "1651527963.513409",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nyWl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Blockly Developer conference is running tomorrow and wednesday. One of the staff talks is this video showing how by serializing the state of a JS Interpreter, and taking diffs as the state changes, you can build a javascript debugger that has \"next\" and \"previous\" options for navigating the code execution.  "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/wa4pq40_V04"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1651527963.513409",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1651562771.151099",
        "reply_users": [
            "UGWUJUZHT"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "7e085b71-24e7-4ab4-b4f9-41ccfbcd8f9f",
        "type": "message",
        "text": "(brainstorming: please question or argue)\n\nIt seems  to me that the problem is not that the debugger needs to go backwards in time, but, that the debugger is showing me the wrong information (too much detail).\n\nWhen I\u2019m  debugging a JavaScript program, I don\u2019t want to see what the assembly code is doing.\n\nWhen I\u2019m debugging high-level concepts, I don\u2019t want to see what the JavaScript is doing.\n\nWhen I\u2019m debugging a compiler, I do want to see what the assembly code is doing.\n\nBizarrely, the C guys were headed in the right direction.  #line and #file.  What they got wrong (IMHO) is that they thought that programs were based on lines of text.\n\n<https://youtu.be/wa4pq40_V04>",
        "user": "UGWUJUZHT",
        "ts": "1651562771.151099",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://youtu.be/wa4pq40_V04",
                "thumb_url": "https://i.ytimg.com/vi/wa4pq40_V04/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/wa4pq40_V04?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/wa4pq40_V04",
                "fallback": "YouTube Video: 2022 Blockly Developers Summit: Backwards Execution",
                "title": "2022 Blockly Developers Summit: Backwards Execution",
                "title_link": "https://youtu.be/wa4pq40_V04",
                "author_name": "Google TechTalks",
                "author_link": "https://www.youtube.com/user/GoogleTechTalks",
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ExF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(brainstorming: please question or argue)\n\nIt seems  to me that the problem is not that the debugger needs to go backwards in time, but, that the debugger is showing me the wrong information (too much detail).\n\nWhen I\u2019m  debugging a JavaScript program, I don\u2019t want to see what the assembly code is doing.\n\nWhen I\u2019m debugging high-level concepts, I don\u2019t want to see what the JavaScript is doing.\n\nWhen I\u2019m debugging a compiler, I do want to see what the assembly code is doing.\n\nBizarrely, the C guys were headed in the right direction.  #line and #file.  What they got wrong (IMHO) is that they thought that programs were based on lines of text.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/wa4pq40_V04"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1651527963.513409",
        "parent_user_id": "U02U0AS3J49"
    }
]