[
    {
        "client_msg_id": "DEA1A3EF-81D1-4D88-A0A1-2A34E40989FB",
        "type": "message",
        "text": "\u201cBehavioral Programming\u201d by Harel, Marron, and Weiss (2012)\n\n&gt; We describe an implementation-independent programming paradigm, behavioral programming, which allows programmers to build executable reactive systems from specifications of behavior that are aligned with the requirements. Behavioral programming simplifies the task of dealing with under- specification and conflicting requirements by enabling the addition of software modules that can not only add to but also modify existing behaviors. A behavioral program employs specialized programming idioms for expressing what must, may, or must not happen, and a novel method for the collective execution of the resulting scenarios. Behavioral programming grew out of the scenario-based language of live sequence charts (LSC), and is now implemented also in Java and in other environments. We illustrate the approach with detailed examples in Java and LSC, and also review recent work, including a visual trace-comprehension tool, model-checking assisted development, and extending behavioral programs to be adaptive.\n<https://www.wisdom.weizmann.ac.il/~amarron/BP%20-%20CACM%20-%20Author%20version.pdf|https://www.wisdom.weizmann.ac.il/~amarron/BP%20-%20CACM%20-%20Author%20version.pdf>",
        "user": "U0378MDUG1Y",
        "ts": "1663634618.025099",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U0378MDUG1Y",
            "ts": "1663634628.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pIn5B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\u201cBehavioral Programming\u201d by Harel, Marron, and Weiss (2012)"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We describe an implementation-independent programming paradigm, behavioral programming, which allows programmers to build executable reactive systems from specifications of behavior that are aligned with the requirements. Behavioral programming simplifies the task of dealing with under- specification and conflicting requirements by enabling the addition of software modules that can not only add to but also modify existing behaviors. A behavioral program employs specialized programming idioms for expressing what must, may, or must not happen, and a novel method for the collective execution of the resulting scenarios. Behavioral programming grew out of the scenario-based language of live sequence charts (LSC), and is now implemented also in Java and in other environments. We illustrate the approach with detailed examples in Java and LSC, and also review recent work, including a visual trace-comprehension tool, model-checking assisted development, and extending behavioral programs to be adaptive."
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.wisdom.weizmann.ac.il/~amarron/BP%20-%20CACM%20-%20Author%20version.pdf",
                                "text": "https://www.wisdom.weizmann.ac.il/~amarron/BP%20-%20CACM%20-%20Author%20version.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1663634618.025099",
        "reply_count": 4,
        "reply_users_count": 2,
        "latest_reply": "1663742390.756739",
        "reply_users": [
            "U0378MDUG1Y",
            "U016VUZGUUQ"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "7202DC1C-C562-4956-85C9-C9549EA79C23",
        "type": "message",
        "text": "If you think about Harel\u2019s research into statecharts as \u201cexecutable models\u201d of behavior, then bthreads are \u201cexecutable requirements\u201d of behavior.",
        "user": "U0378MDUG1Y",
        "ts": "1663634752.522399",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "108R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you think about Harel\u2019s research into statecharts as \u201cexecutable models\u201d of behavior, then bthreads are \u201cexecutable requirements\u201d of behavior."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1663634618.025099",
        "parent_user_id": "U0378MDUG1Y"
    },
    {
        "client_msg_id": "E4E551F7-E6A6-4DF5-8F28-C40E1C27A317",
        "type": "message",
        "text": "For a practical example see @lmatteis\u2019s essay on defining animations with bthreads\n\n<https://observablehq.com/@lmatteis/sculpting-animations-using-bthreads|https://observablehq.com/@lmatteis/sculpting-animations-using-bthreads>",
        "user": "U0378MDUG1Y",
        "ts": "1663634958.914989",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://observablehq.com/@lmatteis/sculpting-animations-using-bthreads",
                "ts": 1610919382,
                "image_url": "https://static.observableusercontent.com/thumbnail/08e0bdb18ecd63c094ac38597147f58b1fd94a5b12ff961ca3f7e8be7c394158.jpg",
                "image_width": 400,
                "image_height": 250,
                "image_bytes": 15079,
                "service_icon": "https://static.observablehq.com/favicon-512.0667824687f99c942a02e06e2db1a060911da0bf3606671676a255b1cf97b4fe.png",
                "id": 1,
                "original_url": "https://observablehq.com/@lmatteis/sculpting-animations-using-bthreads",
                "fallback": "Observable: Sculpting Animations Using Bthreads",
                "text": "Bthreads are the foundation of Behavioral Programming. This paradigm tries to make software-changes easier by being able to incrementally introduce a bthread that blocks something from happening. This is in contrast to most contemporary programming approaches where allowing/disallowing things is achieved via conditional logic (\\`if/else statements\\`). Here we introduce a Motion bthread that drives changes to an X variable which is used to move a circle from left to right. To illustrate how blocking works we",
                "title": "Sculpting Animations Using Bthreads",
                "title_link": "https://observablehq.com/@lmatteis/sculpting-animations-using-bthreads",
                "service_name": "Observable"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nOX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For a practical example see @lmatteis\u2019s essay on defining animations with bthreads"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://observablehq.com/@lmatteis/sculpting-animations-using-bthreads",
                                "text": "https://observablehq.com/@lmatteis/sculpting-animations-using-bthreads"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1663634618.025099",
        "parent_user_id": "U0378MDUG1Y"
    },
    {
        "client_msg_id": "f7e97ee5-b1b4-4734-ac01-24bf416a282c",
        "type": "message",
        "text": "I psyched myself up for a hard slog, but section 2 pretty much explains it in a single page of plain English. Looks promising. That said I wasn't terribly convinced about their examples. Does the Interleave thing they use in the water example scale beyond multiplexing same-size processes? Does the drone example work at all? I don't see evidence that this approach has beaten reality in all its hairy details...",
        "user": "U016VUZGUUQ",
        "ts": "1663655677.647079",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0wn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I psyched myself up for a hard slog, but section 2 pretty much explains it in a single page of plain English. Looks promising. That said I wasn't terribly convinced about their examples. Does the Interleave thing they use in the water example scale beyond multiplexing same-size processes? Does the drone example work at all? I don't see evidence that this approach has beaten reality in all its hairy details..."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1663634618.025099",
        "parent_user_id": "U0378MDUG1Y"
    },
    {
        "client_msg_id": "5AC3B02B-B1F3-46C1-A5B0-C519677ECE34",
        "type": "message",
        "text": "I think that its still early on for this type of programming paradigm, so I think more of the focus is on ironing out the conceptual framework and semantics of the paragdigm rather than determining if it \u201cscales\u201d. The premise of a truly additive approach to decomposing a software system into raw requirements is quite intruiging, even though, similar to you, Im not entirely bullish on it yet. ",
        "user": "U0378MDUG1Y",
        "ts": "1663742390.756739",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vihAf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think that its still early on for this type of programming paradigm, so I think more of the focus is on ironing out the conceptual framework and semantics of the paragdigm rather than determining if it \u201cscales\u201d. The premise of a truly additive approach to decomposing a software system into raw requirements is quite intruiging, even though, similar to you, Im not entirely bullish on it yet. "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1663634618.025099",
        "parent_user_id": "U0378MDUG1Y",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U016VUZGUUQ"
                ],
                "count": 1
            }
        ]
    }
]