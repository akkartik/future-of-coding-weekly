[
    {
        "client_msg_id": "f3cd16ef-e12b-4600-aea4-0aea30195e90",
        "type": "message",
        "text": "Beyond Functional Programming: The Verse Programming Language [pdf] - <https://simon.peytonjones.org/assets/pdfs/haskell-exchange-22.pdf|https://simon.peytonjones.org/assets/pdfs/haskell-exchange-22.pdf>",
        "user": "UPVBV34EL",
        "ts": "1670838352.009599",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5GC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Beyond Functional Programming: The Verse Programming Language [pdf] - "
                            },
                            {
                                "type": "link",
                                "url": "https://simon.peytonjones.org/assets/pdfs/haskell-exchange-22.pdf",
                                "text": "https://simon.peytonjones.org/assets/pdfs/haskell-exchange-22.pdf"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1670838352.009599",
        "reply_count": 5,
        "reply_users_count": 3,
        "latest_reply": "1671067948.066049",
        "reply_users": [
            "UBSMEUXAA",
            "U015TBQ2091",
            "UA14TGLTC"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UBSMEUXAA",
                    "U03JUAWDVSR",
                    "UA14TGLTC"
                ],
                "count": 3
            },
            {
                "name": "exploding_head",
                "users": [
                    "U015TBQ2091"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e52763fa-3763-4b93-b133-564f5b75152b",
        "type": "message",
        "text": "Video of the talk here <https://www.youtube.com/watch?v=832JF1o7Ck8&amp;t=8s>",
        "user": "UBSMEUXAA",
        "ts": "1670879882.572849",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "E49jA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Video of the talk here "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=832JF1o7Ck8&t=8s"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://www.youtube.com/watch?v=832JF1o7Ck8&amp;t=8s",
                "thumb_url": "https://i.ytimg.com/vi/832JF1o7Ck8/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/832JF1o7Ck8?feature=oembed&start=8&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"Beyond Functional Programming: The Verse Programming Language (Simon Peyton Jones)\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=832JF1o7Ck8&amp;t=8s",
                "fallback": "YouTube Video: Beyond Functional Programming: The Verse Programming Language (Simon Peyton Jones)",
                "title": "Beyond Functional Programming: The Verse Programming Language (Simon Peyton Jones)",
                "title_link": "https://www.youtube.com/watch?v=832JF1o7Ck8&amp;t=8s",
                "author_name": "Skills Matter",
                "author_link": "https://www.youtube.com/@skills_matter",
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/"
            }
        ],
        "thread_ts": "1670838352.009599",
        "parent_user_id": "UPVBV34EL"
    },
    {
        "client_msg_id": "51063ac1-7582-4e9e-80ff-037157c7ea18",
        "type": "message",
        "text": "ok so the main person behind haskell is working on a new language?",
        "user": "U015TBQ2091",
        "ts": "1670970261.617669",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XV9gg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "ok so the main person behind haskell is working on a new language?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1670838352.009599",
        "parent_user_id": "UPVBV34EL"
    },
    {
        "client_msg_id": "331d3eab-e766-4d7b-96f3-20acbff20d29",
        "type": "message",
        "text": "Yes, and it will be embedded in one of the most popular online games",
        "user": "UBSMEUXAA",
        "ts": "1670971221.505769",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "J05",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, and it will be embedded in one of the most popular online games"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1670838352.009599",
        "parent_user_id": "UPVBV34EL"
    },
    {
        "client_msg_id": "224b1ea3-1416-4e78-92ac-e03a5cb34a3c",
        "type": "message",
        "text": "So there will be thousands of new functional language programmers",
        "user": "UBSMEUXAA",
        "ts": "1670971266.724499",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZJmS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So there will be thousands of new functional language programmers"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1670838352.009599",
        "parent_user_id": "UPVBV34EL"
    },
    {
        "client_msg_id": "d3b376bb-1709-4ab1-8299-ed4204646f81",
        "type": "message",
        "text": "tl;dw Add ordered choice to a functional language.  Evaluation is \"lenient\" which basically means \"sooner or later don't worry so much.\"  It's certainly an ideal.  The real novel thing is using rewrite rules as the core semantics with the hope of optimizing away a lot of choice at compile time.  The talk specifically is not about the type system, typing of effects, and transactions, which are extremely important for making Verse useful.  An advantage of having a functional/logic core is that many complicated programs naturally end up in that space whether you like it or not.\n\n(I have in mind of a few gnarly, \"here be dragons\" blocks of code recently written, which would have been entirely unnecessary in a logic language.  As is, I ended up with just a few lines, but one junior programmer on our team beheld them and has been quietly mumbling ph'nglui mglw'nafh in the corner ever since.)\n\nMoreover, a powerful logical core in a big ecosystem makes possible a whole range of larger programs that people rarely write.  It's just that non-determinism is usually localized rather than operating at scale.  (I suppose map-reduce programs being the most notable exception.)\n\nI've also been super exited about rewriting/partial-evaluation for years and years because of the potential to specialize an flexible framework so that actual running code throws away all the abstract indirection.",
        "user": "UA14TGLTC",
        "ts": "1671067948.066049",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OaxY5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "tl;dw Add ordered choice to a functional language.  Evaluation is \"lenient\" which basically means \"sooner or later don't worry so much.\"  It's certainly an ideal.  The real novel thing is using rewrite rules as the core semantics with the hope of optimizing away a lot of choice at compile time.  The talk specifically is not about the type system, typing of effects, and transactions, which are extremely important for making Verse useful.  An advantage of having a functional/logic core is that many complicated programs naturally end up in that space whether you like it or not.\n\n(I have in mind of a few gnarly, \"here be dragons\" blocks of code recently written, which would have been entirely unnecessary in a logic language.  As is, I ended up with just a few lines, but one junior programmer on our team beheld them and has been quietly mumbling ph'nglui mglw'nafh in the corner ever since.)\n\nMoreover, a powerful logical core in a big ecosystem makes possible a whole range of larger programs that people rarely write.  It's just that non-determinism is usually localized rather than operating at scale.  (I suppose map-reduce programs being the most notable exception.)\n\nI've also been super exited about rewriting/partial-evaluation for years and years because of the potential to specialize an flexible framework so that actual running code throws away all the abstract indirection."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1670838352.009599",
        "parent_user_id": "UPVBV34EL"
    }
]