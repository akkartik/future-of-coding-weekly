[
    {
        "client_msg_id": "6e908378-b1c0-4031-b254-6ccb2f8887ff",
        "type": "message",
        "text": "From the Advent of Code Mega solutions thread:  A GPT-3 solution.  The prompt was:\n\n\"Prompt: Write a Python3 program to parse a file that consists of groups of integers. Each group is separated by newlines, and groups are separated by two newlines. Sum up the numbers in each group and find the largest sum. One line. Input file is day1.txt.\"\n\n<https://www.reddit.com/r/adventofcode/comments/z9ezjb/comment/iyghuum/?utm_source=share&amp;utm_medium=web2x&amp;context=3>\n\nThe solution:\n```print(max([sum(list(map(int,line.split()))) for line in open('day1.txt').read().split('\\n\\n')]))```\nMaybe the future of code is 'English' :smile:",
        "user": "UUQ2EQW21",
        "ts": "1669914968.571419",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gICcO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "From the Advent of Code Mega solutions thread:  A GPT-3 solution.  The prompt was:\n\n\"Prompt: Write a Python3 program to parse a file that consists of groups of integers. Each group is separated by newlines, and groups are separated by two newlines. Sum up the numbers in each group and find the largest sum. One line. Input file is day1.txt.\"\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.reddit.com/r/adventofcode/comments/z9ezjb/comment/iyghuum/?utm_source=share&utm_medium=web2x&context=3"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe solution:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "print(max([sum(list(map(int,line.split()))) for line in open('day1.txt').read().split('\\n\\n')]))"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nMaybe the future of code is 'English' "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "reactions": [
            {
                "name": "slightly_smiling_face",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "5b08f500-ad98-4c1a-9f96-16a4f5258772",
        "type": "message",
        "text": "I'm particularly struck by <https://twitter.com/meekaale/status/1597965066938503169|this thread> of images of \"apps\" generated by Mikael Brockman using Midjourney. No, this isn't a link to a parser library or a tech conference or a blog post about concatenative langs. But to me this is just as interesting and relevant when pondering what the future of programming ought to be.\n\nFor instance, one could think about borrowing this aesthetic, or _an_ aesthetic. What would it take for a code visualization to make use of detailed geometry and lighting/shading/depth cues and other expressively artistic aspects like the ones on display here? At the moment, code \"visualizations\" tend to consist of line graphs, grids of numbers, flat little circles with text centred in them, straight lines or simple s-curves, all rendered without light. The way we visualize code isn't even, like, _Gourad shaded_. And here we see something that crams incredible detail and depth into every pixel. The _images_ themselves aren't of interest \u2014 if someone wants to make a programming language out of skulls and leaves and reefs, my god, go as hard as you can! But for my money, it's the way these _semi-_abstract shapes are given an impression of tactility and physicality that interests me most.\n\nAnother angle would be to think about the process. Mikael generated these images using an AI. I find myself wondering \"what if this aesthetic, but for structured data?\" (When I say \"structured data\", I mean source code, cyclomatics, spreadsheets, pages in a book, ASTs, whatever you want.) Perhaps one way to approach answering that question would be exploring the space with the help of an AI. You don't need to come up with something perfect, just something worth running with. We're programmers, so we have a sense of what structured data is _in our bones_. That probably limits our thinking. It helps to get someone outside the field, someone whose bones are data-hollow, to <https://github.com/ivanreese/visual-programming-codex/blob/main/impressions/app-store-illustration.md|reflect your thoughts back at you in their own language>. I'm sure one of the Oblique Strategies is \"Ask an AI to do it\".",
        "user": "UC2A2ARPT",
        "ts": "1669931082.605639",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Q1X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm particularly struck by "
                            },
                            {
                                "type": "link",
                                "url": "https://twitter.com/meekaale/status/1597965066938503169",
                                "text": "this thread"
                            },
                            {
                                "type": "text",
                                "text": " of images of \"apps\" generated by Mikael Brockman using Midjourney. No, this isn't a link to a parser library or a tech conference or a blog post about concatenative langs. But to me this is just as interesting and relevant when pondering what the future of programming ought to be.\n\nFor instance, one could think about borrowing this aesthetic, or "
                            },
                            {
                                "type": "text",
                                "text": "an ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "aesthetic. What would it take for a code visualization to make use of detailed geometry and lighting/shading/depth cues and other expressively artistic aspects like the ones on display here? At the moment, code \"visualizations\" tend to consist of line graphs, grids of numbers, flat little circles with text centred in them, straight lines or simple s-curves, all rendered without light. The way we visualize code isn't even, like, "
                            },
                            {
                                "type": "text",
                                "text": "Gourad shaded",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". And here we see something that crams incredible detail and depth into every pixel. The "
                            },
                            {
                                "type": "text",
                                "text": "images",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " themselves aren't of interest \u2014 if someone wants to make a programming language out of skulls and leaves and reefs, my god, go as hard as you can! But for my money, it's the way these "
                            },
                            {
                                "type": "text",
                                "text": "semi-",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "abstract shapes are given an impression of tactility and physicality that interests me most.\n\nAnother angle would be to think about the process. Mikael generated these images using an AI. I find myself wondering \"what if this aesthetic, but for structured data?\" (When I say \"structured data\", I mean source code, cyclomatics, spreadsheets, pages in a book, ASTs, whatever you want.) Perhaps one way to approach answering that question would be exploring the space with the help of an AI. You don't need to come up with something perfect, just something worth running with. We're programmers, so we have a sense of what structured data is "
                            },
                            {
                                "type": "text",
                                "text": "in our bones",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". That probably limits our thinking. It helps to get someone outside the field, someone whose bones are data-hollow, to "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/ivanreese/visual-programming-codex/blob/main/impressions/app-store-illustration.md",
                                "text": "reflect your thoughts back at you in their own language"
                            },
                            {
                                "type": "text",
                                "text": ". I'm sure one of the Oblique Strategies is \"Ask an AI to do it\"."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://twitter.com/meekaale/status/1597965066938503169",
                "ts": 1669819535,
                "image_url": "https://pbs.twimg.com/media/Fi0cwdmXgAIMqpd.jpg",
                "image_width": 1024,
                "image_height": 1024,
                "image_bytes": 211849,
                "id": 1,
                "original_url": "https://twitter.com/meekaale/status/1597965066938503169",
                "fallback": "<https://twitter.com/meekaale|@meekaale>: guys it seems like Midjourney can design apps",
                "text": "guys it seems like Midjourney can design apps",
                "author_name": "Mikael Brockman \ud83e\udd78",
                "author_link": "https://twitter.com/meekaale/status/1597965066938503169",
                "author_icon": "https://pbs.twimg.com/profile_images/1597325546005925888/0UlGWeRE_normal.jpg",
                "author_subname": "@meekaale",
                "service_name": "twitter",
                "service_url": "https://twitter.com/",
                "footer": "Twitter",
                "footer_icon": "https://a.slack-edge.com/80588/img/services/twitter_pixel_snapped_32.png"
            }
        ],
        "thread_ts": "1669931082.605639",
        "reply_count": 11,
        "reply_users_count": 6,
        "latest_reply": "1670208355.684099",
        "reply_users": [
            "UK3LH8CF5",
            "U016VUZGUUQ",
            "UA14TGLTC",
            "U02028JHX37",
            "UC2A2ARPT",
            "UGWUJUZHT"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U013ZLJARC7",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "8359A433-7C6A-4C0F-86A8-CEBD4B626930",
        "type": "message",
        "text": "This is something I\u2019ve been thinking about a lot as well. I hate the feel of the visualizations I produce. I would love to produce something this visually interesting. I have to admit, I just lack the artistic ability. I have lots of data and lots of time. If some wants to collaborate on this let me know. ",
        "user": "UK3LH8CF5",
        "ts": "1669932263.466649",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "izzqL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is something I\u2019ve been thinking about a lot as well. I hate the feel of the visualizations I produce. I would love to produce something this visually interesting"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " I have to admit, I just lack the artistic ability"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " I have lots of data and lots of time"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " If some wants to collaborate on this let me know"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1669931082.605639",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "dd337c5c-7b7e-4274-bf9d-d3175c9524fb",
        "type": "message",
        "text": "Shading, or anything that suggests continuous space as opposed to discrete components, is likely to remain surplus to requirements for the most part. :) Continuous/smooth features belong to a world where objects matter proportionally to their size (yes, not always, but the counterexamples are notable for their rarity), which is emphatically not the case for anything close to math or logic. Which is not to say you couldn't employ it for aesthetic purposes, but I can't think of how you would use high-res detail like that for representing the semantics of a program. (There are those digram heatmaps you see in binary analysis and the like, but I'd put those in a different category, certainly more syntactic). To be a little more precise, it will be hard to make small details meaningful in proportion to their visual weight, neither too small (hiding things) or too big (distracting). Similar for 2d topology vs whatever passes for topology in a program.\n\nMaybe that's an angle to approach the question: how do you visually represent something small but impactful like a logical negation? A region with visually changed properties, maybe different color?\n\nYou could use visual texture as an information channel in a broadly discrete visualization, in a similar role to color. Definitely needs a careful hand to avoid horrible visual clashing, but if you're really clever you might even be able to weaponize it to make bad patterns look bad.\n\nOrganic-looking shapes would be cool, no clarity problem as long as they're distinct. Is there a way to make subtle changes in the outline of an object meaningful? My FSM node is kind of bean-shaped because... something.\n\nVisual media are really high-bandwidth, and programs are pretty low-bandwidth. The way you get lots of data from a small program is by running it, maybe a bunch of times, so maybe incorporating runtime data into the visualization is the key. When you look at the code, you're also looking at all possible runs/outputs. Flame graphs are already in that region, but still resolutely rectangle-based.\n\nOnly marginally related: I would like to see a continuous visualization for music/audio creation, where you sort of paint in (time, frequency) space, e.g. chords are parallel lines running along time. I feel like that has to exist, right?",
        "user": "U016VUZGUUQ",
        "ts": "1669947752.324319",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZyeP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Shading, or anything that suggests continuous space as opposed to discrete components, is likely to remain surplus to requirements for the most part. :) Continuous/smooth features belong to a world where objects matter proportionally to their size (yes, not always, but the counterexamples are notable for their rarity), which is emphatically not the case for anything close to math or logic. Which is not to say you couldn't employ it for aesthetic purposes, but I can't think of how you would use high-res detail like that for representing the semantics of a program. (There are those digram heatmaps you see in binary analysis and the like, but I'd put those in a different category, certainly more syntactic). To be a little more precise, it will be hard to make small details meaningful in proportion to their visual weight, neither too small (hiding things) or too big (distracting). Similar for 2d topology vs whatever passes for topology in a program.\n\nMaybe that's an angle to approach the question: how do you visually represent something small but impactful like a logical negation? A region with visually changed properties, maybe different color?\n\nYou could use visual texture as an information channel in a broadly discrete visualization, in a similar role to color. Definitely needs a careful hand to avoid horrible visual clashing, but if you're really clever you might even be able to weaponize it to make bad patterns look bad.\n\nOrganic-looking shapes would be cool, no clarity problem as long as they're distinct. Is there a way to make subtle changes in the outline of an object meaningful? My FSM node is kind of bean-shaped because... something.\n\nVisual media are really high-bandwidth, and programs are pretty low-bandwidth. The way you get lots of data from a small program is by running it, maybe a bunch of times, so maybe incorporating runtime data into the visualization is the key. When you look at the code, you're also looking at all possible runs/outputs. Flame graphs are already in that region, but still resolutely rectangle-based.\n\nOnly marginally related: I would like to see a continuous visualization for music/audio creation, where you sort of paint in (time, frequency) space, e.g. chords are parallel lines running along time. I feel like that has to exist, right?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1669931082.605639",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UCGAK10LS",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "5384c38a-d7ac-486d-9ebf-c408868b1afd",
        "type": "message",
        "text": "Andrew, you make good points about \"hard to make small details meaningful in proportion to their visual weight.\"  The trick with any good visualization is making important features of the domain pop in the diagram.  When you say \"[size] emphatically [does not matter] for anything close to math or logic,\" I can only assume you have in mind the fact that a small change to an expression \"like a logical negation\" has a big impact.  However, if the visualization *is* faithful to the effect on, say the shape of possible runs of a program, then a negation can cause part of that shape to change significantly.\n\nAs for non-aesthetic smoothing, well the simplest example I can think of is using a line of best fit as a summary for a bunch of datapoints.   In cases of strong correlation, you can mostly ignore underlying points.\n\nI've got a good musical example handy of the interplay of continuity, aesthetics, and emphasized dimensions.  Here <https://www.youtube.com/watch?v=OMtjlaDEMdI> smalin diagrams a performance of the Art of Fugue, which has, more or less, one repeating structure subject, primarily using a fancy piano roll with horizontal for time, vertical for pitch, and color for voice.  Sometimes the subject is delimited using a sort of axis L.  Starting at 1:00:46, he tries something a little different.",
        "user": "UA14TGLTC",
        "ts": "1669996658.311599",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b6d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Andrew, you make good points about \"hard to make small details meaningful in proportion to their visual weight.\"  The trick with any good visualization is making important features of the domain pop in the diagram.  When you say \"[size] emphatically [does not matter] for anything close to math or logic,\" I can only assume you have in mind the fact that a small change to an expression \"like a logical negation\" has a big impact.  However, if the visualization "
                            },
                            {
                                "type": "text",
                                "text": "is",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " faithful to the effect on, say the shape of possible runs of a program, then a negation can cause part of that shape to change significantly.\n\nAs for non-aesthetic smoothing, well the simplest example I can think of is using a line of best fit as a summary for a bunch of datapoints.   In cases of strong correlation, you can mostly ignore underlying points.\n\nI've got a good musical example handy of the interplay of continuity, aesthetics, and emphasized dimensions.  Here "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/watch?v=OMtjlaDEMdI"
                            },
                            {
                                "type": "text",
                                "text": " smalin diagrams a performance of the Art of Fugue, which has, more or less, one repeating structure subject, primarily using a fancy piano roll with horizontal for time, vertical for pitch, and color for voice.  Sometimes the subject is delimited using a sort of axis L.  Starting at 1:00:46, he tries something a little different."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://www.youtube.com/watch?v=OMtjlaDEMdI",
                "thumb_url": "https://i.ytimg.com/vi/OMtjlaDEMdI/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/OMtjlaDEMdI?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"Bach, Art of Fugue (Complete --- Netherlands Bach Society)\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://www.youtube.com/watch?v=OMtjlaDEMdI",
                "fallback": "YouTube Video: Bach, Art of Fugue (Complete --- Netherlands Bach Society)",
                "title": "Bach, Art of Fugue (Complete --- Netherlands Bach Society)",
                "title_link": "https://www.youtube.com/watch?v=OMtjlaDEMdI",
                "author_name": "smalin",
                "author_link": "https://www.youtube.com/@smalin",
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/"
            }
        ],
        "thread_ts": "1669931082.605639",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "551ef2d2-2262-4b4b-84fb-040aae963570",
        "type": "message",
        "text": "<@UA14TGLTC> Re: continuous visualisations not being appropriate. I think what <@U016VUZGUUQ> meant was that a function from logical expressions into logical expressions (notably the substitution function) is not continuous (whatever it means, you'd have to provide a metric on logical expressions). Since programming as done today is performed basically only using substitution (everything can be modelled by untyped lambda calculus), there's no point in trying to make visualisations continuous. Therefore, it makes more sense to give the colours more of an \"algebraic\" meaning, which I think is what he describes in the mid-to-latter part.",
        "user": "U02028JHX37",
        "ts": "1669997283.896329",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gtNd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " Re: continuous visualisations not being appropriate. I think what "
                            },
                            {
                                "type": "user",
                                "user_id": "U016VUZGUUQ"
                            },
                            {
                                "type": "text",
                                "text": " meant was that a function from logical expressions into logical expressions (notably the substitution function) is not continuous (whatever it means, you'd have to provide a metric on logical expressions). Since programming as done today is performed basically only using substitution (everything can be modelled by untyped lambda calculus), there's no point in trying to make visualisations continuous. Therefore, it makes more sense to give the colours more of an \"algebraic\" meaning, which I think is what he describes in the mid-to-latter part."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1669931082.605639",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "51989369-1B24-4CF2-9176-4D0126A4E8BE",
        "type": "message",
        "text": "\"There's no point in trying to make visualizations continuous\"\n\nWhy not? Why limit oneself?",
        "user": "UC2A2ARPT",
        "ts": "1669998832.049739",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DLjg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"There's no point in trying to make visualizations continuous\"\n\nWhy not? Why limit oneself?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1669931082.605639",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "e2e69115-e05c-4ae9-a533-905a8766b25b",
        "type": "message",
        "text": "I meant: \"Trying to make the function (which visualises program features) continuous.\" (In the mathematical sense; the function is taken to be from expressions and expression transformations to a 2D space with smooth colours)",
        "user": "U02028JHX37",
        "ts": "1670002403.827139",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UpGk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I meant: \"Trying to make the function (which visualises program features) continuous.\" (In the mathematical sense; the function is taken to be from expressions and expression transformations to a 2D space with smooth colours)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1669931082.605639",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "ff1aeaa9-6f58-48a0-b1f3-10d3cd4d2c8d",
        "type": "message",
        "text": "To be clear, even if it does turn out that visualizations similar those above don't work out, we should still try to come up with counter examples. :)\n\nAnother approach: what kinds of useful information exists about structured data that can be expressed in such a detailed, real-number-oriented way?\n\nStatistical summary is an interesting angle for structured data, like <@UA14TGLTC> mentioned with regression. Summary, being inherently lossy but still useful, seems like a good way to get useful fuzzy data from structured data. Like if the representation of a database table gave you a pretty good idea of the distributions of its columns. Can you have a good graphical representation of the row that just stacks in the z-axis (with transparency) to get a passable summary? Can something like that work for less regular structures? (Of course this kind of merges with showing summarized runtime results if it goes far enough.)",
        "user": "U016VUZGUUQ",
        "ts": "1670010481.678339",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qXn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To be clear, even if it does turn out that visualizations similar those above don't work out, we should still try to come up with counter examples. :)\n\nAnother approach: what kinds of useful information exists about structured data that can be expressed in such a detailed, real-number-oriented way?\n\nStatistical summary is an interesting angle for structured data, like "
                            },
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " mentioned with regression. Summary, being inherently lossy but still useful, seems like a good way to get useful fuzzy data from structured data. Like if the representation of a database table gave you a pretty good idea of the distributions of its columns. Can you have a good graphical representation of the row that just stacks in the z-axis (with transparency) to get a passable summary? Can something like that work for less regular structures? (Of course this kind of merges with showing summarized runtime results if it goes far enough.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1669931082.605639",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "d6e39eb5-dd9d-49e0-9861-7ca4db30e4bd",
        "type": "message",
        "text": "Question: What do you see this syntax being compiled-to for a digital computer?\nOrthogonal brainstorming: Then, there\u2019s the forgotten form of computing called Analogue Computing.  I wonder if this syntax has application to analogue computing?  If so, what operations does this syntax represent?",
        "user": "UGWUJUZHT",
        "ts": "1670020635.437219",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h4Rd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Question: What do you see this syntax being compiled-to for a digital computer?\nOrthogonal brainstorming: Then, there\u2019s the forgotten form of computing called Analogue Computing.  I wonder if this syntax has application to analogue computing?  If so, what operations does this syntax represent?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1669931082.605639",
        "parent_user_id": "UC2A2ARPT"
    },
    {
        "client_msg_id": "ACE7EEC6-E027-4D27-A22F-69D0E91B7BA1",
        "type": "message",
        "text": "Yes!  Analog computing where the essential feature is that features of the mechanism match the domain.  <https://youtu.be/GVsUOuSjvcg|https://youtu.be/GVsUOuSjvcg>\n\nRather than connections being symbolic and arbitrary, they have to be intrinsic and, well, analogous.  So I don\u2019t think the essence of analog is the quality of being contiguous rather than discrete.",
        "user": "UA14TGLTC",
        "ts": "1670051443.571569",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZTbpq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes!  Analog computing where the essential feature is that features of the mechanism match the domain.  "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/GVsUOuSjvcg",
                                "text": "https://youtu.be/GVsUOuSjvcg"
                            },
                            {
                                "type": "text",
                                "text": "\n\nRather than connections being symbolic and arbitrary, they have to be intrinsic and, well"
                            },
                            {
                                "type": "text",
                                "text": ","
                            },
                            {
                                "type": "text",
                                "text": " analogous"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "  So I don\u2019t think the essence of analog is the quality of being contiguous rather than discrete"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://youtu.be/GVsUOuSjvcg",
                "thumb_url": "https://i.ytimg.com/vi/GVsUOuSjvcg/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/GVsUOuSjvcg?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"Future Computers Will Be Radically Different (Analog Computing)\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/GVsUOuSjvcg",
                "fallback": "YouTube Video: Future Computers Will Be Radically Different (Analog Computing)",
                "title": "Future Computers Will Be Radically Different (Analog Computing)",
                "title_link": "https://youtu.be/GVsUOuSjvcg",
                "author_name": "Veritasium",
                "author_link": "https://www.youtube.com/@veritasium",
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/"
            }
        ],
        "thread_ts": "1669931082.605639",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UGWUJUZHT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "353780eb-3eb8-4846-824d-eb482f2a30bb",
        "type": "message",
        "text": "aside: The Nyquist Sampling Theorem says that you have to sample at at least 2x the speed at which the thing is changing state.  Practically, if the thing changes state much, much faster than you are sampling, the thing looks like it is continuous.  Analogy: a Retina display has many more digital pixels than your wetware can distinguish ; vinyl is better than MP3 because vinyl packs more data into a unit of sound-space (I guess that FLAC is a digital attempt to compete with vinyl).\naside: Ironically, transistors were first used for analog circuitry (e.g. audio amplifiers).  Transistors have a \u201clinear region\u201d which is used in analog circuitry.  If you slam transistors to be ON or OFF, they are said to be operating in their \u201cnon-linear\u201d region and you get 1's and 0's",
        "user": "UGWUJUZHT",
        "ts": "1670078564.467619",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yXhu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "aside: The Nyquist Sampling Theorem says that you have to sample at at least 2x the speed at which the thing is changing state.  Practically, if the thing changes state much, much faster than you are sampling, the thing looks like it is continuous.  Analogy: a Retina display has many more digital pixels than your wetware can distinguish ; vinyl is better than MP3 because vinyl packs more data into a unit of sound-space (I guess that FLAC is a digital attempt to compete with vinyl).\naside: Ironically, transistors were first used for analog circuitry (e.g. audio amplifiers).  Transistors have a \u201clinear region\u201d which is used in analog circuitry.  If you slam transistors to be ON or OFF, they are said to be operating in their \u201cnon-linear\u201d region and you get 1's and 0's"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1669931082.605639",
        "parent_user_id": "UC2A2ARPT",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "3376ee8b-f188-4149-9619-2d9cb0d5a42c",
        "type": "message",
        "text": "Thinking about the kinds of infovis, I like best.  This XKCD nails it.  <https://xkcd.com/2701/>",
        "user": "UA14TGLTC",
        "ts": "1670208355.684099",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BM3W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thinking about the kinds of infovis, I like best.  This XKCD nails it.  "
                            },
                            {
                                "type": "link",
                                "url": "https://xkcd.com/2701/"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://xkcd.com/2701/",
                "image_url": "https://imgs.xkcd.com/comics/change_in_slope.png",
                "image_width": 656,
                "image_height": 371,
                "image_bytes": 30162,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/xkcd.png",
                "id": 1,
                "original_url": "https://xkcd.com/2701/",
                "fallback": "xkcd: Change in Slope",
                "text": "[Title text] \"Squinting at a graph is fine for getting a rough idea of the answer, but if you want to pretend to know it exactly, you need statistics.\"",
                "title": "Change in Slope",
                "title_link": "https://xkcd.com/2701/",
                "author_name": "xkcd",
                "author_link": "https://xkcd.com/"
            }
        ],
        "thread_ts": "1669931082.605639",
        "parent_user_id": "UC2A2ARPT"
    }
]