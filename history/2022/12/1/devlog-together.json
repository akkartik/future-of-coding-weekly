[
    {
        "client_msg_id": "2fef7c53-c3d1-4369-8b19-c69d7d3b49ca",
        "type": "message",
        "text": "2022 Advent Of Code Solutions, Day 1, Thread:",
        "user": "UUQ2EQW21",
        "ts": "1669919312.543319",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=HUlT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "2022 Advent Of Code Solutions, Day 1, Thread:"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UUQ2EQW21",
            "ts": "1669919496.000000"
        },
        "thread_ts": "1669919312.543319",
        "reply_count": 8,
        "reply_users_count": 4,
        "latest_reply": "1670094338.603869",
        "reply_users": [
            "UUQ2EQW21",
            "U015TBQ2091",
            "U79HM6726",
            "U03R0B9U1GD"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "a6af913b-3e5e-48e8-84a1-a511ca7944f3",
        "type": "message",
        "text": "I'll start; I did 3 solutions in C++, Python and Rust today, since it was an easier day....",
        "user": "UUQ2EQW21",
        "ts": "1669919353.645789",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dK/T",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'll start; I did 3 solutions in C++, Python and Rust today, since it was an easier day...."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1669919312.543319",
        "parent_user_id": "UUQ2EQW21"
    },
    {
        "type": "message",
        "text": "",
        "files": [
            {
                "id": "F04DR44S9TK",
                "created": 1669919398,
                "timestamp": 1669919398,
                "name": "Python.py",
                "title": "Python",
                "mimetype": "text/plain",
                "filetype": "python",
                "pretty_type": "Python",
                "user": "UUQ2EQW21",
                "user_team": "T5TCAFTA9",
                "editable": true,
                "size": 204,
                "mode": "snippet",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F04DR44S9TK/python.py",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F04DR44S9TK/download/python.py",
                "permalink": "https://futureofcoding.slack.com/files/UUQ2EQW21/F04DR44S9TK/python.py",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F04DR44S9TK-d424dd56da",
                "edit_link": "https://futureofcoding.slack.com/files/UUQ2EQW21/F04DR44S9TK/python.py/edit",
                "preview": "vals =[] \nwith open(f\"inputs/01.txt\") as f:\n    for elf in f.read().strip().split(\"\\n\\n\"):\n        vals.append(sum(map(int, elf.split(\"\\n\"))))\nvals.sort(reverse = True)",
                "preview_highlight": "<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text/plain',window.getSelection().toString().replace(/\\u200b/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre><span class=\"cm-variable\">vals</span> <span class=\"cm-operator\">=</span>[] </pre></div>\n<div><pre><span class=\"cm-keyword\">with</span> <span class=\"cm-builtin\">open</span>(<span class=\"cm-string\">f&quot;inputs/01.txt&quot;</span>) <span class=\"cm-keyword\">as</span> <span class=\"cm-variable\">f</span>:</pre></div>\n<div><pre>    <span class=\"cm-keyword\">for</span> <span class=\"cm-variable\">elf</span> <span class=\"cm-keyword\">in</span> <span class=\"cm-variable\">f</span>.<span class=\"cm-property\">read</span>().<span class=\"cm-property\">strip</span>().<span class=\"cm-property\">split</span>(<span class=\"cm-string\">&quot;\\n\\n&quot;</span>):</pre></div>\n<div><pre>        <span class=\"cm-variable\">vals</span>.<span class=\"cm-property\">append</span>(<span class=\"cm-builtin\">sum</span>(<span class=\"cm-builtin\">map</span>(<span class=\"cm-builtin\">int</span>, <span class=\"cm-variable\">elf</span>.<span class=\"cm-property\">split</span>(<span class=\"cm-string\">&quot;\\n&quot;</span>))))</pre></div>\n<div><pre><span class=\"cm-variable\">vals</span>.<span class=\"cm-property\">sort</span>(<span class=\"cm-variable\">reverse</span> <span class=\"cm-operator\">=</span> <span class=\"cm-keyword\">True</span>)</pre></div>\n</div>\n</div>\n",
                "lines": 7,
                "lines_more": 2,
                "preview_is_truncated": false,
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": true,
        "user": "UUQ2EQW21",
        "display_as_bot": false,
        "ts": "1669919399.818069",
        "client_msg_id": "6d4abf38-ca4d-45e2-b0a5-8fec57f215de",
        "thread_ts": "1669919312.543319",
        "parent_user_id": "UUQ2EQW21"
    },
    {
        "type": "message",
        "text": "",
        "files": [
            {
                "id": "F04DEUJJHQU",
                "created": 1669919462,
                "timestamp": 1669919462,
                "name": "Rust.cpp",
                "title": "Rust",
                "mimetype": "text/plain",
                "filetype": "cpp",
                "pretty_type": "C++",
                "user": "UUQ2EQW21",
                "user_team": "T5TCAFTA9",
                "editable": true,
                "size": 423,
                "mode": "snippet",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F04DEUJJHQU/rust.cpp",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F04DEUJJHQU/download/rust.cpp",
                "permalink": "https://futureofcoding.slack.com/files/UUQ2EQW21/F04DEUJJHQU/rust.cpp",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F04DEUJJHQU-fb13e9c23d",
                "edit_link": "https://futureofcoding.slack.com/files/UUQ2EQW21/F04DEUJJHQU/rust.cpp/edit",
                "preview": "use itertools::Itertools;\nfn main() {\n    let vals : Vec<i32> = include_str!(\"inputs/1.txt\")\n        .trim()\n        .split(\"\\n\\n\")",
                "preview_highlight": "<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text/plain',window.getSelection().toString().replace(/\\u200b/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre><span class=\"cm-variable\">use</span> <span class=\"cm-variable\">itertools::Itertools</span>;</pre></div>\n<div><pre><span class=\"cm-variable\">fn</span> <span class=\"cm-def\">main</span>() {</pre></div>\n<div><pre>    <span class=\"cm-variable\">let</span> <span class=\"cm-variable\">vals</span> : <span class=\"cm-variable\">Vec</span><span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">i32</span><span class=\"cm-operator\">&gt;</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">include_str</span><span class=\"cm-operator\">!</span>(<span class=\"cm-string\">&quot;inputs/1.txt&quot;</span>)</pre></div>\n<div><pre>        .<span class=\"cm-variable\">trim</span>()</pre></div>\n<div><pre>        .<span class=\"cm-variable\">split</span>(<span class=\"cm-string\">&quot;\\n\\n&quot;</span>)</pre></div>\n</div>\n</div>\n",
                "lines": 16,
                "lines_more": 11,
                "preview_is_truncated": false,
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": true,
        "user": "UUQ2EQW21",
        "display_as_bot": false,
        "ts": "1669919463.584129",
        "client_msg_id": "aa9dc873-70a5-4c18-9261-14e56ab0b3cf",
        "thread_ts": "1669919312.543319",
        "parent_user_id": "UUQ2EQW21"
    },
    {
        "type": "message",
        "text": "(For cpp I've used a couple helper functions I've had around for ages, which just do the basic stuff other languages offer for free...)",
        "files": [
            {
                "id": "F04D9GY84VB",
                "created": 1669919562,
                "timestamp": 1669919562,
                "name": "C++.cpp",
                "title": "C++",
                "mimetype": "text/plain",
                "filetype": "cpp",
                "pretty_type": "C++",
                "user": "UUQ2EQW21",
                "user_team": "T5TCAFTA9",
                "editable": true,
                "size": 427,
                "mode": "snippet",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F04D9GY84VB/c__.cpp",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F04D9GY84VB/download/c__.cpp",
                "permalink": "https://futureofcoding.slack.com/files/UUQ2EQW21/F04D9GY84VB/c__.cpp",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F04D9GY84VB-f745bf8556",
                "edit_link": "https://futureofcoding.slack.com/files/UUQ2EQW21/F04D9GY84VB/c__.cpp/edit",
                "preview": "std::vector<int> calories;\n\nauto elves = string_split_delim_string(file_read(PRACTICE_ROOT \"/advent_of_code/2022/inputs/day_1.txt\"), \"\\n\\n\");\nfor (auto& line : elves)\n{",
                "preview_highlight": "<div class=\"CodeMirror cm-s-default CodeMirrorServer\" oncopy=\"if(event.clipboardData){event.clipboardData.setData('text/plain',window.getSelection().toString().replace(/\\u200b/g,''));event.preventDefault();event.stopPropagation();}\">\n<div class=\"CodeMirror-code\">\n<div><pre><span class=\"cm-variable\">std::vector</span><span class=\"cm-operator\">&lt;</span><span class=\"cm-type\">int</span><span class=\"cm-operator\">&gt;</span> <span class=\"cm-variable\">calories</span>;</pre></div>\n<div><pre>&#8203;</pre></div>\n<div><pre><span class=\"cm-keyword\">auto</span> <span class=\"cm-variable\">elves</span> <span class=\"cm-operator\">=</span> <span class=\"cm-variable\">string_split_delim_string</span>(<span class=\"cm-variable\">file_read</span>(<span class=\"cm-variable\">PRACTICE_ROOT</span> <span class=\"cm-string\">&quot;/advent_of_code/2022/inputs/day_1.txt&quot;</span>), <span class=\"cm-string\">&quot;\\n\\n&quot;</span>);</pre></div>\n<div><pre><span class=\"cm-keyword\">for</span> (<span class=\"cm-keyword\">auto</span><span class=\"cm-operator\">&amp;</span> <span class=\"cm-variable\">line</span> : <span class=\"cm-variable\">elves</span>)</pre></div>\n<div><pre>{</pre></div>\n</div>\n</div>\n",
                "lines": 14,
                "lines_more": 9,
                "preview_is_truncated": false,
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": true,
        "user": "UUQ2EQW21",
        "display_as_bot": false,
        "ts": "1669919562.973409",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vrrC+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(For cpp I've used a couple helper functions I've had around for ages, which just do the basic stuff other languages offer for free...)"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "dd2caa77-4509-4d3a-abdd-f8a9fb7efba3",
        "thread_ts": "1669919312.543319",
        "parent_user_id": "UUQ2EQW21"
    },
    {
        "client_msg_id": "7834004b-7d26-446b-bb5e-93ed8905f321",
        "type": "message",
        "text": "wanted to learn the webassembly text format, using `fd_write` from WASI to print to the console, and laid out the input string in the memory as a giant string literal:\n<https://github.com/sumeet/aoc2022/blob/master/day1/part1.wat>\n<https://github.com/sumeet/aoc2022/blob/master/day1/part2.wat>",
        "user": "U015TBQ2091",
        "ts": "1669960206.969889",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UaCht",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "wanted to learn the webassembly text format, using "
                            },
                            {
                                "type": "text",
                                "text": "fd_write",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " from WASI to print to the console, and laid out the input string in the memory as a giant string literal:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/sumeet/aoc2022/blob/master/day1/part1.wat"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/sumeet/aoc2022/blob/master/day1/part2.wat"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1669919312.543319",
        "parent_user_id": "UUQ2EQW21"
    },
    {
        "type": "message",
        "text": "My solution in Lamdu\n\nI\u2019ve also been live-streaming myself using Lamdu to solve #1 and #2 at <https://www.youtube.com/@yairchu/streams> (next stream tomorrow)",
        "files": [
            {
                "id": "F04DD7BL8AH",
                "created": 1669976269,
                "timestamp": 1669976269,
                "name": "Screen Shot 2022-12-02 at 12.16.58.png",
                "title": "Screen Shot 2022-12-02 at 12.16.58.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U79HM6726",
                "user_team": "T5TCAFTA9",
                "editable": false,
                "size": 112699,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F04DD7BL8AH/screen_shot_2022-12-02_at_12.16.58.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F04DD7BL8AH/download/screen_shot_2022-12-02_at_12.16.58.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F04DD7BL8AH-df02daefff/screen_shot_2022-12-02_at_12.16.58_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F04DD7BL8AH-df02daefff/screen_shot_2022-12-02_at_12.16.58_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F04DD7BL8AH-df02daefff/screen_shot_2022-12-02_at_12.16.58_360.png",
                "thumb_360_w": 360,
                "thumb_360_h": 77,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F04DD7BL8AH-df02daefff/screen_shot_2022-12-02_at_12.16.58_480.png",
                "thumb_480_w": 480,
                "thumb_480_h": 103,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F04DD7BL8AH-df02daefff/screen_shot_2022-12-02_at_12.16.58_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F04DD7BL8AH-df02daefff/screen_shot_2022-12-02_at_12.16.58_720.png",
                "thumb_720_w": 720,
                "thumb_720_h": 155,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F04DD7BL8AH-df02daefff/screen_shot_2022-12-02_at_12.16.58_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 172,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F04DD7BL8AH-df02daefff/screen_shot_2022-12-02_at_12.16.58_960.png",
                "thumb_960_w": 960,
                "thumb_960_h": 206,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F04DD7BL8AH-df02daefff/screen_shot_2022-12-02_at_12.16.58_1024.png",
                "thumb_1024_w": 1024,
                "thumb_1024_h": 220,
                "image_exif_rotation": 1,
                "original_w": 2667,
                "original_h": 573,
                "thumb_tiny": "AwAKADCoSfU0hOe5p46Cmt1oATj3o4pKKAF496OPekooA//Z",
                "permalink": "https://futureofcoding.slack.com/files/U79HM6726/F04DD7BL8AH/screen_shot_2022-12-02_at_12.16.58.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F04DD7BL8AH-2fc581c4ea",
                "is_starred": false,
                "has_rich_preview": false,
                "file_access": "visible"
            }
        ],
        "upload": false,
        "user": "U79HM6726",
        "display_as_bot": false,
        "ts": "1669976356.950999",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "76gtP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My solution in Lamdu\n\nI\u2019ve also been live-streaming myself using Lamdu to solve #1 and #2 at "
                            },
                            {
                                "type": "link",
                                "url": "https://www.youtube.com/@yairchu/streams"
                            },
                            {
                                "type": "text",
                                "text": " (next stream tomorrow)"
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "f468d715-9e79-4a1e-b598-6b07131240ad",
        "thread_ts": "1669919312.543319",
        "parent_user_id": "UUQ2EQW21",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UUQ2EQW21"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ff00f4ca-3064-4869-b7cf-985ca67ea9ae",
        "type": "message",
        "text": "<@U015TBQ2091> that looks hard core; I've never heard of wat!",
        "user": "UUQ2EQW21",
        "ts": "1669981032.731059",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Trya4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U015TBQ2091"
                            },
                            {
                                "type": "text",
                                "text": " that looks hard core; I've never heard of wat!"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1669919312.543319",
        "parent_user_id": "UUQ2EQW21"
    },
    {
        "client_msg_id": "32c95ecf-c25c-42b0-a6ab-7d52457b6bf8",
        "type": "message",
        "text": "Good luck all! Finally got started on advent of code 2022! I'm gonna use it to test out my parser generator again! This year I'm focusing on the backend, and making it output more useful error messages! last year the focus was on performance, and the year before that was on just getting it working :)\n\n<https://github.com/TodePond/AdventofTode|https://github.com/TodePond/AdventofTode>",
        "user": "U03R0B9U1GD",
        "ts": "1670094338.603869",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L7p=Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Good luck all! Finally got started on advent of code 2022! I'm gonna use it to test out my parser generator again! This year I'm focusing on the backend, and making it output more useful error messages! last year the focus was on performance, and the year before that was on just getting it working :)\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/TodePond/AdventofTode",
                                "text": "https://github.com/TodePond/AdventofTode"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1669919312.543319",
        "parent_user_id": "UUQ2EQW21"
    }
]