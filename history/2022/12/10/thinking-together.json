[
    {
        "client_msg_id": "6c3fbc48-d1cd-4317-ba7d-d08ec9d7af80",
        "type": "message",
        "text": "Do computers make a qualitative difference compared to paper and a concentrated human mind?\n\nThey certainly improve the speed at which we can perform certain mechanical tasks by automating them (e.g. calculations, simulations and rendering of their results, even some basic logical inference can be done automatically). So even though this all can be in principle performed manually, ain\u2019t nobody got time for that :)) This is similar to how paper dramatically expands the working and long-term memory, hence augmenting mental capabilities.\n\nHowever, paper also expands qualitatively over mere speech by adding a second dimension for expression. This allows for not only planar, but also spatial objects to be represented trivially (they\u2019re sometimes easier to represent than text). Also, it makes possible the use of maps and graphs, which are just impossible to imitate using just speech.\n\nComputers add a dimension for expression, namely time. One can create objects that change in time, and also dynamically change them while they\u2019re changing. But this is where I\u2019m not sure if it makes that much of a difference. In my opinion, there\u2019s always a certain limit beyond which changing a dynamic object gets unbelievably difficult (the \u201cwalled-garden\u201d or \u201cprogrammer-didn\u2019t-think-of-that\u201d phenomenon). On paper, you might need to work with a static representation of a process, but you can manipulate it without restraints. Also from the same phenomenon, we get a limited compositionality/mobility of dynamic objects. This is not a problem with paper, where the mind is free to consider different mental and symbolic objects to interact.\n\nThe last point might have something to do with the fact that whereas we know some threshold for literacy (at least limited to using paper and writing for personal thinking), and that is:\n\n1. learn to read and write letters\n2. learn to organize thoughts on paper\n3. done (there\u2019s always room for improvement, but this baseline still covers the qualitative advantages of paper)\nCompare that with \u201ccomputing literacy\u201d which not only doesn\u2019t exist, but if it did, would be something like:\n\n1. learn to use some basic programs and how programs work in general\n2. learn to write basic procedural programs in some \u201cnice\u201d programming environment (= not complex systems, not parallel, but not necessarily in a procedural language; what the environment should look like is of concern to e.g. Jonathan Edwards)\n\u2026 so far so good, but when you hit the limit \u2026\n\n3. either wait for some programmer/company to expand the stuff you\u2019re using, or \u2026\n4. learn to program in universal languages, on general-purpose platforms\n5. rewrite the stuff you\u2019re using, but somewhat better\n6. done? (not really - your program is buggy / your program can\u2019t interoperate with all the other stuff that\u2019s out there which the old program could interoperate with / \u2026)\n\nWe know how unreal of a threshold numbers 4 and 5 are for the general public. If we instead restrict the threshold to 1 and 2, we don\u2019t get the qualitative advantage of the computer.\n\nSo the question is: If viewed as means to augment human intellect, do computers provide qualitative (not just quantitative) advantages over pen, paper and the human mind?",
        "user": "U02028JHX37",
        "ts": "1670711298.043479",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zA4G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Do computers make a qualitative difference compared to paper and a concentrated human mind?\n\nThey certainly improve the speed at which we can perform certain mechanical tasks by automating them (e.g. calculations, simulations and rendering of their results, even some basic logical inference can be done automatically). So even though this all can be in principle performed manually, ain\u2019t nobody got time for that :)) This is similar to how paper dramatically expands the working and long-term memory, hence augmenting mental capabilities.\n\nHowever, paper also expands qualitatively over mere speech by adding a second dimension for expression. This allows for not only planar, but also spatial objects to be represented trivially (they\u2019re sometimes easier to represent than text). Also, it makes possible the use of maps and graphs, which are just impossible to imitate using just speech.\n\nComputers add a dimension for expression, namely time. One can create objects that change in time, and also dynamically change them while they\u2019re changing. But this is where I\u2019m not sure if it makes that much of a difference. In my opinion, there\u2019s always a certain limit beyond which changing a dynamic object gets unbelievably difficult (the \u201cwalled-garden\u201d or \u201cprogrammer-didn\u2019t-think-of-that\u201d phenomenon). On paper, you might need to work with a static representation of a process, but you can manipulate it without restraints. Also from the same phenomenon, we get a limited compositionality/mobility of dynamic objects. This is not a problem with paper, where the mind is free to consider different mental and symbolic objects to interact.\n\nThe last point might have something to do with the fact that whereas we know some threshold for literacy (at least limited to using paper and writing for personal thinking), and that is:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "learn to read and write letters"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "learn to organize thoughts on paper"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "done (there\u2019s always room for improvement, but this baseline still covers the qualitative advantages of paper)"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nCompare that with \u201ccomputing literacy\u201d which not only doesn\u2019t exist, but if it did, would be something like:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "learn to use some basic programs and how programs work in general"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "learn to write basic procedural programs in some \u201cnice\u201d programming environment (= not complex systems, not parallel, but not necessarily in a procedural language; what the environment should look like is of concern to e.g. Jonathan Edwards)"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\u2026 so far so good, but when you hit the limit \u2026\n\n3. either wait for some programmer/company to expand the stuff you\u2019re using, or \u2026\n4. learn to program in universal languages, on general-purpose platforms\n5. rewrite the stuff you\u2019re using, but somewhat better\n6. done? (not really - your program is buggy / your program can\u2019t interoperate with all the other stuff that\u2019s out there which the old program could interoperate with / \u2026)\n\nWe know how unreal of a threshold numbers 4 and 5 are for the general public. If we instead restrict the threshold to 1 and 2, we don\u2019t get the qualitative advantage of the computer.\n\nSo the question is: If viewed as means to augment human intellect, do computers provide qualitative (not just quantitative) advantages over pen, paper and the human mind?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1670711298.043479",
        "reply_count": 11,
        "reply_users_count": 7,
        "latest_reply": "1670848486.238359",
        "reply_users": [
            "U03CEGR3HSL",
            "U016VUZGUUQ",
            "U013ZLJARC7",
            "U02028JHX37",
            "U03B14DUZSA",
            "UA14TGLTC",
            "UGWUJUZHT"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "c978f7ab-b244-464c-9629-f2e3633c09ac",
        "type": "message",
        "text": "You may find this article from the original wiki interesting. <https://wiki.c2.com/?IsAnythingBetterThanPaper|https://wiki.c2.com/?IsAnythingBetterThanPaper>\n\nOne of the things Richard stallman discusses in the original Emacs paper is the gradual progression that a good programmable program can provide for users. At first they can just use the program. Then they can alter settings. Then they can add tiny one-line hooks to customize specific behaviors. Then they can move on to actually implementing larger pieces of functionality. At some point a user may realize that they are now programming, but it is difficult to identify the moment when they transitioned from being a user to being a programmer.\n\n<https://dspace.mit.edu/handle/1721.1/5736|https://dspace.mit.edu/handle/1721.1/5736>\n\nA similar progression can happen in many command line-based systems, such as with Unix. At first the user simply uses the commands the system provides. Then they create a few aliases for convenience. Then they create some very simple shell scripts that just run a couple commands. Then they create slightly more sophisticated shell scripts that process multiple files or contain a conditional. Then those scripts get longer, and at some point they are obviously programming, but again it is difficult to spot the moment when they shifted from just using the software to programming, because the on ramp is so gradual.\n\nFor many things, such as calculations or database management, computers \"just\" allow us to perform the same actions at a greater scale, but at some point, when one is looking at multiple orders of magnitude difference in a quantitative measurement, it creates a qualitative difference in the types of activities that are possible.\n\nFrom a communications perspective, the amazing thing a computer can do that paper cannot is respond to the reader. If I create a spreadsheet modeling my projections for income and expenses next year and email it to you, you can then adjust the spreadsheet numbers and watch what happens within my model. With just paper, you need to understand my model well enough to perform the calculations yourself before you can experiment with alternative inputs.",
        "user": "U03CEGR3HSL",
        "ts": "1670713026.527349",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6sN6X",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You may find this article from the original wiki interesting. "
                            },
                            {
                                "type": "link",
                                "url": "https://wiki.c2.com/?IsAnythingBetterThanPaper",
                                "text": "https://wiki.c2.com/?IsAnythingBetterThanPaper"
                            },
                            {
                                "type": "text",
                                "text": "\n\nOne of the things Richard stallman discusses in the original Emacs paper is the gradual progression that a good programmable program can provide for users. At first they can just use the program. Then they can alter settings. Then they can add tiny one-line hooks to customize specific behaviors. Then they can move on to actually implementing larger pieces of functionality. At some point a user may realize that they are now programming, but it is difficult to identify the moment when they transitioned from being a user to being a programmer.\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https://dspace.mit.edu/handle/1721.1/5736",
                                "text": "https://dspace.mit.edu/handle/1721.1/5736"
                            },
                            {
                                "type": "text",
                                "text": "\n\nA similar progression can happen in many command line-based systems, such as with Unix. At first the user simply uses the commands the system provides. Then they create a few aliases for convenience. Then they create some very simple shell scripts that just run a couple commands. Then they create slightly more sophisticated shell scripts that process multiple files or contain a conditional. Then those scripts get longer, and at some point they are obviously programming, but again it is difficult to spot the moment when they shifted from just using the software to programming, because the on ramp is so gradual.\n\nFor many things, such as calculations or database management, computers \"just\" allow us to perform the same actions at a greater scale, but at some point, when one is looking at multiple orders of magnitude difference in a quantitative measurement, it creates a qualitative difference in the types of activities that are possible.\n\nFrom a communications perspective, the amazing thing a computer can do that paper cannot is respond to the reader. If I create a spreadsheet modeling my projections for income and expenses next year and email it to you, you can then adjust the spreadsheet numbers and watch what happens within my model. With just paper, you need to understand my model well enough to perform the calculations yourself before you can experiment with alternative inputs."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1670711298.043479",
        "parent_user_id": "U02028JHX37",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8be62a59-12ae-4f29-b896-bfc39db1f525",
        "type": "message",
        "text": "\"Augment human intellect\" is rather specific compared to the space of things you might compare to \"paper and a concentrated human mind\", but still not specific enough IMO to support a definite answer. It will depend on the problem to be solved. And the problem-solving style of the person involved.\n\nThere are some problems where being able to rapidly run variations on a model (I'm thinking of my budget expressed, honestly, currently expressed as a Python program), without context switching between arithmetic and conceptual thought, is handy. But doing the arithmetic by hand can also be helpful. Similar for the general case of solving program-shaped problems, there are insights to be had both in writing the program/model, running it and examining the results, and doing the work manually.\n\nPractically IMO, the most useful thing about computers for what you might call \"augmentation\" is their memory, not so much computation per se. Hence all the myriad notes/personal database apps, digital whiteboards, etc.",
        "user": "U016VUZGUUQ",
        "ts": "1670720071.031889",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1zvGL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Augment human intellect\" is rather specific compared to the space of things you might compare to \"paper and a concentrated human mind\", but still not specific enough IMO to support a definite answer. It will depend on the problem to be solved. And the problem-solving style of the person involved.\n\nThere are some problems where being able to rapidly run variations on a model (I'm thinking of my budget expressed, honestly, currently expressed as a Python program), without context switching between arithmetic and conceptual thought, is handy. But doing the arithmetic by hand can also be helpful. Similar for the general case of solving program-shaped problems, there are insights to be had both in writing the program/model, running it and examining the results, and doing the work manually.\n\nPractically IMO, the most useful thing about computers for what you might call \"augmentation\" is their memory, not so much computation per se. Hence all the myriad notes/personal database apps, digital whiteboards, etc."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1670711298.043479",
        "parent_user_id": "U02028JHX37"
    },
    {
        "client_msg_id": "d24b4c5d-a380-42ab-8e63-03ea2ecdcf02",
        "type": "message",
        "text": "I re-invented calculus from scratch when I was eight years old so that things would \"fall right\" in the games/simulations I was writing on an 8-bit microcomputer. If a computer can allow a child to do something that required a lifetime's work from Newton, it's probably safe to say they are able to augment human intellect.",
        "user": "U013ZLJARC7",
        "ts": "1670753402.132579",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R3/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I re-invented calculus from scratch when I was eight years old so that things would \"fall right\" in the games/simulations I was writing on an 8-bit microcomputer. If a computer can allow a child to do something that required a lifetime's work from Newton, it's probably safe to say they are able to augment human intellect."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1670711298.043479",
        "parent_user_id": "U02028JHX37",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ea30e29e-84a8-488c-b501-9bec28ca3a42",
        "type": "message",
        "text": "<@U013ZLJARC7> How modest\u2026 What exactly did you discover?",
        "user": "U02028JHX37",
        "ts": "1670769414.765469",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "fePN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": " How modest\u2026 What exactly did you discover?"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1670711298.043479",
        "parent_user_id": "U02028JHX37"
    },
    {
        "client_msg_id": "1bc074f3-9ce8-4847-96eb-fcec83eb6c03",
        "type": "message",
        "text": "Alan Kay wrote a great essay precisely about this somewhat recently (<http://www.vpri.org/pdf/future_of_reading.pdf>). It's especially relevant, I feel, with the arrival of LLMs - his example of \"Socrates in a computer\" seems much closer. Hopefully they can be put to use to make computer literacy more attainable, much as phonetic alphabets did for traditional literacy. That's not to say that AI will solve all of our problems, or even most of them. End-user programming still requires a basic model of computation even if just to direct an agent. The fragmented ecosystem is tiresome to navigate and plumb together even for professionals. Actually running applications in the era of Web software requires too much effort, especially when security is taken into account. Yet it provides an invaluable tool to help solve all of these issues, especially if its cost falls dramatically.",
        "user": "U03B14DUZSA",
        "ts": "1670806922.277079",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "BJ3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Alan Kay wrote a great essay precisely about this somewhat recently ("
                            },
                            {
                                "type": "link",
                                "url": "http://www.vpri.org/pdf/future_of_reading.pdf"
                            },
                            {
                                "type": "text",
                                "text": "). It's especially relevant, I feel, with the arrival of LLMs - his example of \"Socrates in a computer\" seems much closer. Hopefully they can be put to use to make computer literacy more attainable, much as phonetic alphabets did for traditional literacy. That's not to say that AI will solve all of our problems, or even most of them. End-user programming still requires a basic model of computation even if just to direct an agent. The fragmented ecosystem is tiresome to navigate and plumb together even for professionals. Actually running applications in the era of Web software requires too much effort, especially when security is taken into account. Yet it provides an invaluable tool to help solve all of these issues, especially if its cost falls dramatically."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1670711298.043479",
        "parent_user_id": "U02028JHX37"
    },
    {
        "client_msg_id": "4d6a1739-3335-421d-bb66-f77817953477",
        "type": "message",
        "text": "<@U02028JHX37> I'm guessing he discovered the concepts of constant acceleration, linear velocity, and quadratic position. In the video Squeakers, Alan Kay comments on students experimenting with these concepts with virtual cars and falling objects, saying something to the effect of \"your students understand second order differential equations.\"",
        "user": "U03CEGR3HSL",
        "ts": "1670807177.187999",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "33Jz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02028JHX37"
                            },
                            {
                                "type": "text",
                                "text": " I'm guessing he discovered the concepts of constant acceleration, linear velocity, and quadratic position. In the video Squeakers, Alan Kay comments on students experimenting with these concepts with virtual cars and falling objects, saying something to the effect of \"your students understand second order differential equations.\""
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1670711298.043479",
        "parent_user_id": "U02028JHX37"
    },
    {
        "client_msg_id": "d0d977c8-2106-457d-b2db-d915f221135c",
        "type": "message",
        "text": "And I imagine students come to understand the importance of some kind of dampening pretty quick, which you aren't going to get from an introductory mechanics class.",
        "user": "UA14TGLTC",
        "ts": "1670823345.850969",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xYR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And I imagine students come to understand the importance of some kind of dampening pretty quick, which you aren't going to get from an introductory mechanics class."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1670711298.043479",
        "parent_user_id": "U02028JHX37"
    },
    {
        "client_msg_id": "1c3fcd36-95ae-4f8b-a457-7071d9235df1",
        "type": "message",
        "text": "Indeed, it was the same set of things Kay writes about and <@U03CEGR3HSL> enumerated. The feedback loop from experiment to observation to understanding is so much faster in a computational medium that you can learn (and thus do) things that would otherwise be extremely difficult/impossible. One of the reasons I champion interactive programming to anyone who will listen is that I've found this to be true throughout my life in a wide variety of situations.",
        "user": "U013ZLJARC7",
        "ts": "1670834368.735079",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NuG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Indeed, it was the same set of things Kay writes about and "
                            },
                            {
                                "type": "user",
                                "user_id": "U03CEGR3HSL"
                            },
                            {
                                "type": "text",
                                "text": " enumerated. The feedback loop from experiment to observation to understanding is so much faster in a computational medium that you can learn (and thus do) things that would otherwise be extremely difficult/impossible. One of the reasons I champion interactive programming to anyone who will listen is that I've found this to be true throughout my life in a wide variety of situations."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1670711298.043479",
        "parent_user_id": "U02028JHX37"
    },
    {
        "client_msg_id": "62289399-3943-45ec-bd65-57ee8a478338",
        "type": "message",
        "text": "<@U013ZLJARC7>  <@U03CEGR3HSL> I suspected that, too, but was curious to see if this was indeed the perfect example of Dunning-Kruger. A second-order difference equation is nowhere near \"re-invented calculus from scratch\". (Worth noting that calculus didn't take Newton a lifetime, maybe read up on it?)\n\nAlso, simulating free fall in homogeneous field does not make you \"understand differential equations\".\n\n<@UA14TGLTC>  Actually, you do learn about dampening in an intro class (even in an intro class for pure mathematicians).\n\nYou also learn about resonance (damped and driven oscillator), which I don't imagine you can discover by playing around, due to it being dependent on a critical value of a combination of the input parameters (a certain multiple of the driving frequency, dampening rate and intrinsic frequency). Despite what e.g. Bret Victor says, I'm not convinced that much understanding can come from simulations alone, without actually studying the models (equations, which are much nicer to study than computer code).",
        "user": "U02028JHX37",
        "ts": "1670836396.935489",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ts+Fq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            },
                            {
                                "type": "text",
                                "text": "  "
                            },
                            {
                                "type": "user",
                                "user_id": "U03CEGR3HSL"
                            },
                            {
                                "type": "text",
                                "text": " I suspected that, too, but was curious to see if this was indeed the perfect example of Dunning-Kruger. A second-order difference equation is nowhere near \"re-invented calculus from scratch\". (Worth noting that calculus didn't take Newton a lifetime, maybe read up on it?)\n\nAlso, simulating free fall in homogeneous field does not make you \"understand differential equations\".\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": "  Actually, you do learn about dampening in an intro class (even in an intro class for pure mathematicians).\n\nYou also learn about resonance (damped and driven oscillator), which I don't imagine you can discover by playing around, due to it being dependent on a critical value of a combination of the input parameters (a certain multiple of the driving frequency, dampening rate and intrinsic frequency). Despite what e.g. Bret Victor says, I'm not convinced that much understanding can come from simulations alone, without actually studying the models (equations, which are much nicer to study than computer code)."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1670711298.043479",
        "parent_user_id": "U02028JHX37"
    },
    {
        "client_msg_id": "467ebe09-2a88-40e6-a9c5-407c7ac7286c",
        "type": "message",
        "text": "Well, we at least agree that there's some Dunning-Kruger going on in this conversation :wink:",
        "user": "U013ZLJARC7",
        "ts": "1670843909.427699",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nAp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Well, we at least agree that there's some Dunning-Kruger going on in this conversation "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1670711298.043479",
        "parent_user_id": "U02028JHX37"
    },
    {
        "client_msg_id": "84deccb9-f6bf-4971-8296-ab6854d7a24b",
        "type": "message",
        "text": "Computers can be bicycles for the mind, but, this is currently discouraged by programming notation.\n\nNotation and language affects the way you allow yourself to think.\n\nI would say that computers are a new medium for expression in 4 dimensions x/y/z/t.\n\nIMO, this medium has yet to be explored in depth.\n\nText-based functional notation, e.g. `f(x)` or `f(x,y,z)` addresses only one use-case for computers - computers as sophisticated calculators - but cannot easily express other uses of computers, e.g. sequencers (time, history), IoT, robotics, internet, blockchain, gaming, animation, etc.\n\nObviously, we CAN express these other concepts in the current notation, but, programmers are encouraged - by exclusive use of this single notation - to think in 2D and to create calculators.\n\nWhen all you\u2019ve got is a single notation for describing calculators, everything looks like a calculator.\n\nA calculator takes one input (which might look like several inputs, thanks to the miracle of destructuring) and produces one output.  The calculator model is so insufficient for expressing programs, that a bag has been added onto the side of the model, called \u2018exceptions\u2019.\n\nIf you want to build YAC (Yet Another Calculator), the current notation is appropriate.  If you want to build a sequencer, switch to another notation(s).  When starting a new project, it is unnecessary to jump to the premature conclusion that the project is YAC until you\u2019ve savoured all of the project\u2019s details.",
        "user": "UGWUJUZHT",
        "ts": "1670848486.238359",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XDoZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Computers can be bicycles for the mind, but, this is currently discouraged by programming notation.\n\nNotation and language affects the way you allow yourself to think.\n\nI would say that computers are a new medium for expression in 4 dimensions x/y/z/t.\n\nIMO, this medium has yet to be explored in depth.\n\nText-based functional notation, e.g. "
                            },
                            {
                                "type": "text",
                                "text": "f(x)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "f(x,y,z)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " addresses only one use-case for computers - computers as sophisticated calculators - but cannot easily express other uses of computers, e.g. sequencers (time, history), IoT, robotics, internet, blockchain, gaming, animation, etc.\n\nObviously, we CAN express these other concepts in the current notation, but, programmers are encouraged - by exclusive use of this single notation - to think in 2D and to create calculators.\n\nWhen all you\u2019ve got is a single notation for describing calculators, everything looks like a calculator.\n\nA calculator takes one input (which might look like several inputs, thanks to the miracle of destructuring) and produces one output.  The calculator model is so insufficient for expressing programs, that a bag has been added onto the side of the model, called \u2018exceptions\u2019.\n\nIf you want to build YAC (Yet Another Calculator), the current notation is appropriate.  If you want to build a sequencer, switch to another notation(s).  When starting a new project, it is unnecessary to jump to the premature conclusion that the project is YAC until you\u2019ve savoured all of the project\u2019s details."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1670711298.043479",
        "parent_user_id": "U02028JHX37"
    }
]