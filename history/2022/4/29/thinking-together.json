[
    {
        "client_msg_id": "78904834-b642-409e-9acd-05cb3f6f2a5f",
        "type": "message",
        "text": "We used to dream of programmable agents that could pursue our interests online with a minimum of direction. For example, <https://youtu.be/umJsITGzXd0|https://youtu.be/umJsITGzXd0>\n\nOnline environments like LPmuds and MOOs allowed multiple separate people to create pieces of code that interacted with each other to create a more interesting world for the participating humans.\n\nAnd yet, nowadays we deploy CAPTCHAs to prevent automation, services place strict limitations on how apis may be used, and the word \"bot\" is almost always derogatory, often preceded by the word \"spam.\"\n\nHow can we create shared spaces that support automation in order to empower humans, but resist spamming, phishing, and other abuse?",
        "user": "U03CEGR3HSL",
        "ts": "1651205577.852149",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cJv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "We used to dream of programmable agents that could pursue our interests online with a minimum of direction. For example, "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/umJsITGzXd0",
                                "text": "https://youtu.be/umJsITGzXd0"
                            },
                            {
                                "type": "text",
                                "text": "\n\nOnline environments like LPmuds and MOOs allowed multiple separate people to create pieces of code that interacted with each other to create a more interesting world for the participating humans.\n\nAnd yet, nowadays we deploy CAPTCHAs to prevent automation, services place strict limitations on how apis may be used, and the word \"bot\" is almost always derogatory, often preceded by the word \"spam.\"\n\nHow can we create shared spaces that support automation in order to empower humans, but resist spamming, phishing, and other abuse?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1651205577.852149",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1651263627.037159",
        "reply_users": [
            "UCUSW7WVD",
            "UBN9AFS0N",
            "U03CEGR3HSL"
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1651263627.037159"
    },
    {
        "client_msg_id": "30657703-a841-4414-818a-2dba857ce976",
        "type": "message",
        "text": "Register all automation with the community, which can inspect it, disable it and penalize its authors/distributors for misbehavior.\n\nI'm not sure if MUDs and MOOs did that, though..",
        "user": "UCUSW7WVD",
        "ts": "1651214710.794359",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wCnIc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Register all automation with the community, which can inspect it, disable it and penalize its authors/distributors for misbehavior.\n\nI'm not sure if MUDs and MOOs did that, though.."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1651205577.852149",
        "parent_user_id": "U03CEGR3HSL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03CEGR3HSL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e699e779-30d4-48b4-afa9-ae6e998f2d91",
        "type": "message",
        "text": "lobsters has this idea of invitation tree: <https://lobste.rs/u>\n\nas Kartik says, the user that registers the automation is responsible for it and all the tree up to the root, people don't let other people affect their image in the community, if a bot misbehaves the bot register will be pressured to take action by people up his/her tree",
        "user": "UBN9AFS0N",
        "ts": "1651219485.135869",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/E3ag",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "lobsters has this idea of invitation tree: "
                            },
                            {
                                "type": "link",
                                "url": "https://lobste.rs/u"
                            },
                            {
                                "type": "text",
                                "text": "\n\nas Kartik says, the user that registers the automation is responsible for it and all the tree up to the root, people don't let other people affect their image in the community, if a bot misbehaves the bot register will be pressured to take action by people up his/her tree"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1651205577.852149",
        "parent_user_id": "U03CEGR3HSL",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03CEGR3HSL",
                    "UA14TGLTC"
                ],
                "count": 2
            },
            {
                "name": "+1::skin-tone-2",
                "users": [
                    "U03CEGR3HSL"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "77299a59-9a12-427c-8741-9434cf154682",
        "type": "message",
        "text": "I've been rereading <https://www.bloomberg.com/graphics/2015-paul-ford-what-is-code> during my latest bout of introspection. It annoyed me out of all proportion when I first read it (even though I could and still can appreciate the craft that went into it), and with the benefit of hindsight (and having joined this forum 3 years later) I think I understand why: it's unabashedly about the _present_ of software, and by nature that endeavor makes a virtue to newcomers out of how things work today.\n\nOn the other hand, I argued the opposite direction over at <https://futureofcoding.slack.com/archives/C5T9GPWFL/p1645838782428059?thread_ts=1645811249.437739>. So it seems to matter how vehemently I feel about the thing being taught to newcomers, whether I consider it important or irrelevant frippery.",
        "user": "UCUSW7WVD",
        "ts": "1651251838.802439",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VybqA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I've been rereading "
                            },
                            {
                                "type": "link",
                                "url": "https://www.bloomberg.com/graphics/2015-paul-ford-what-is-code"
                            },
                            {
                                "type": "text",
                                "text": " during my latest bout of introspection. It annoyed me out of all proportion when I first read it (even though I could and still can appreciate the craft that went into it), and with the benefit of hindsight (and having joined this forum 3 years later) I think I understand why: it's unabashedly about the "
                            },
                            {
                                "type": "text",
                                "text": "present",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of software, and by nature that endeavor makes a virtue to newcomers out of how things work today.\n\nOn the other hand, I argued the opposite direction over at "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1645838782428059?thread_ts=1645811249.437739"
                            },
                            {
                                "type": "text",
                                "text": ". So it seems to matter how vehemently I feel about the thing being taught to newcomers, whether I consider it important or irrelevant frippery."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "5ec0eab8-c78f-40cc-901d-57a7a15db63d",
        "type": "message",
        "text": "Parsers generators allow you to write code that creates trees (usually), from a string of characters. So a way of creating a sort of abstractly 2D thing from a 1D representation. Is there an equivalent tool for generating representations from symbols arranged in 2D? A node-and-arrow parser generator, for example? Something in the graph database world?",
        "user": "U02U0AS3J49",
        "ts": "1651254426.150879",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/fl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Parsers generators allow you to write code that creates trees (usually), from a string of characters. So a way of creating a sort of abstractly 2D thing from a 1D representation. Is there an equivalent tool for generating representations from symbols arranged in 2D? A node-and-arrow parser generator, for example? Something in the graph database world?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1651254426.150879",
        "reply_count": 8,
        "reply_users_count": 4,
        "latest_reply": "1651272612.981879",
        "reply_users": [
            "U02U0AS3J49",
            "UBN9AFS0N",
            "UGWUJUZHT",
            "U03DNFDFYDA"
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1651272612.981879"
    },
    {
        "client_msg_id": "666dcab3-b01b-4b20-9412-b4e2eb8086ae",
        "type": "message",
        "text": "I think a good small example would be a tool that allowed you to define linear graphemes, which is ironically both above (\"we don't process 2D images\") and below (\"we already have characters\") the scope of parser generators. Imagine describing \"two parallel straight lines of the same length connected at an obtuse angle by a constant radius curved line\" for the uppercase U. Are there tools for that?",
        "user": "U02U0AS3J49",
        "ts": "1651256716.907359",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WTp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think a good small example would be a tool that allowed you to define linear graphemes, which is ironically both above (\"we don't process 2D images\") and below (\"we already have characters\") the scope of parser generators. Imagine describing \"two parallel straight lines of the same length connected at an obtuse angle by a constant radius curved line\" for the uppercase U. Are there tools for that?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1651254426.150879",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "b24f7736-3f08-4af6-87c5-9115aff03736",
        "type": "message",
        "text": "A large example would be something that detects and parses UML diagrams on a whiteboard. Which seems very promising.",
        "user": "U02U0AS3J49",
        "ts": "1651259463.493579",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hCQ+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A large example would be something that detects and parses UML diagrams on a whiteboard. Which seems very promising."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1651254426.150879",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "237f1934-2db2-4336-a2d5-f6ffb18b34bd",
        "type": "message",
        "text": "Thank you for the lead. I hadn't heard of lobsters.",
        "user": "U03CEGR3HSL",
        "ts": "1651263627.037159",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kysp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you for the lead. I hadn't heard of lobsters."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1651205577.852149",
        "parent_user_id": "U03CEGR3HSL"
    },
    {
        "client_msg_id": "b83b39b0-e27c-4e84-8961-af4b1692e258",
        "type": "message",
        "text": "Not sure it's what you are looking for but the cypher query language is kind of \"ascii art graph pattern matching\"\n\n\n```MATCH (nicole:Actor {name: 'Nicole Kidman'})-[:ACTED_IN]-&gt;(movie:Movie)\nWHERE movie.year &lt; $yearParameter\nRETURN movie```\n",
        "user": "UBN9AFS0N",
        "ts": "1651264590.697439",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y5mkM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure it's what you are looking for but the cypher query language is kind of \"ascii art graph pattern matching\"\n\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "MATCH (nicole:Actor {name: 'Nicole Kidman'})-[:ACTED_IN]->(movie:Movie)\nWHERE movie.year < $yearParameter\nRETURN movie"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ],
        "thread_ts": "1651254426.150879",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "96d4315f-bd32-409a-aa79-cea8bd81a804",
        "type": "message",
        "text": "- FYI - there are 2 kinds of parser generators\n1. parser generators based on language definitions (YACC, LR(k), etc.)\n2. parser generators based on DSLs for specifying parsers (PEG, Ohm-JS, etc.)\n- DaS (Diagrams as Syntax) If you are interested in experiments, I would be glad to share\n- I argue that graphics is not the problem, but ascribing meaning (semantics) to the diagrams is the problem, start small and build up, e.g.\n\t- what does a \u201cbox\u201d compile to?\n\t- what do boxes-with-ports-and-arrows compile to?\n\t-  what do concentric boxes compile to?\n- \u201cwe already have characters\u201d\n\t- we use characters for IDEs (aka programming languages) only because mid-1900s hardware made it easier to grok grids of non-overlapping, small bitmaps",
        "user": "UGWUJUZHT",
        "ts": "1651269541.591509",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Kn+Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "- FYI - there are 2 kinds of parser generators\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "parser generators based on language definitions (YACC, LR(k), etc.)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "parser generators based on DSLs for specifying parsers (PEG, Ohm-JS, etc.)"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "- DaS (Diagrams as Syntax) If you are interested in experiments, I would be glad to share\n- I argue that graphics is not the problem, but ascribing meaning (semantics) to the diagrams is the problem, start small and build up, e.g.\n\t- what does a \u201cbox\u201d compile to?\n\t- what do boxes-with-ports-and-arrows compile to?\n\t-  what do concentric boxes compile to?\n- \u201cwe already have characters\u201d\n\t- we use characters for IDEs (aka programming languages) only because mid-1900s hardware made it easier to grok grids of non-overlapping, small bitmaps"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1651254426.150879",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "5fea4165-4846-4dde-a507-a9cc6e118cc6",
        "type": "message",
        "text": "I'm not clear what the difference is between a \"language definition\" and an expression in a \"DSL for specifying parsers\". But what I'd love to see is an example of 1 or 2 where the elements being parsed are graphical... lines, points, colours, shapes. Graphics is not a problem, agreed. And you can always roll-your-own in terms of parsing from some unusual user input. It's just a data tarnsformation. I'm just curious if the idea of parsing from graphical input has ever been abstracted in the way that is has for text.",
        "user": "U02U0AS3J49",
        "ts": "1651270332.069189",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7A4=P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not clear what the difference is between a \"language definition\" and an expression in a \"DSL for specifying parsers\". But what I'd love to see is an example of 1 or 2 where the elements being parsed are graphical... lines, points, colours, shapes. Graphics is not a problem, agreed. And you can always roll-your-own in terms of parsing from some unusual user input. It's just a data tarnsformation. I'm just curious if the idea of parsing from graphical input has ever been abstracted in the way that is has for text."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1651254426.150879",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "ecf82a98-376b-4d78-98fa-3d105aca4f76",
        "type": "message",
        "text": "like OCR but for symbols that aren\u2019t necessarily characters :wink:",
        "user": "U03DNFDFYDA",
        "ts": "1651272082.880249",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jcdY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "like OCR but for symbols that aren\u2019t necessarily characters "
                            },
                            {
                                "type": "emoji",
                                "name": "wink"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1651254426.150879",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "a0d6f216-4214-4819-b839-d216d411a4bf",
        "type": "message",
        "text": "I\u2019ve drawn thousands of whiteboards over the years\u2026 transcribing them into diagram drawing software is usually an opportunity to revisit, clarify and edit. :sweat_smile:",
        "user": "U03DNFDFYDA",
        "ts": "1651272178.838069",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8xU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019ve drawn thousands of whiteboards over the years\u2026 transcribing them into diagram drawing software is usually an opportunity to revisit, clarify and edit. "
                            },
                            {
                                "type": "emoji",
                                "name": "sweat_smile"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1651254426.150879",
        "parent_user_id": "U02U0AS3J49"
    },
    {
        "client_msg_id": "8eee441f-9843-49d7-b83d-598159f2a270",
        "type": "message",
        "text": "collecting dust on my shelf\n- <https://link.springer.com/book/10.1007/978-1-4612-1676-6>\n- (tc;dr)\n- all you really need is SVG + contains () + intersects () + connectedTo ()\n- see sections \u201cExpressive Power\u201d and \u201cAmbiguity Detection\u201d in <https://en.wikipedia.org/wiki/Parsing_expression_grammar>\n\t- PEG defines a *parser* in a top-down manner (TDPL), e.g. \u201cif this matches, try to match this next\u201d\n\t- LR(k) and LL(k) define *languages* in a bottom-up manner, e.g. \u201cif this looks like a number, then bubble it upwards as a number\u201d (regardless of the context) ; this is what is taught as \u201clanguage  theory\u201d, and is commonly understood to form the basis of parser generators\n\t- TDPL is order-dependent, Lx(k) is not order-dependent (but more restricted)",
        "user": "UGWUJUZHT",
        "ts": "1651272612.981879",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UGWUJUZHT",
            "ts": "1651272733.000000"
        },
        "attachments": [
            {
                "from_url": "https://link.springer.com/book/10.1007/978-1-4612-1676-6",
                "service_icon": "https://link.springer.com/springerlink-static/1158445429/images/favicon/app-icon-iphone@3x.png",
                "id": 1,
                "original_url": "https://link.springer.com/book/10.1007/978-1-4612-1676-6",
                "fallback": "Visual Language Theory | SpringerLink",
                "text": "Kim Marriott Bernd Meyer Communication is one of the hallmarks of humans. When we think of hu man communication, most people first think of spoken and written lan guages. These are similar in that sym",
                "title": "Visual Language Theory | SpringerLink",
                "title_link": "https://link.springer.com/book/10.1007/978-1-4612-1676-6",
                "service_name": "link.springer.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aKRtY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "collecting dust on my shelf\n- "
                            },
                            {
                                "type": "link",
                                "url": "https://link.springer.com/book/10.1007/978-1-4612-1676-6"
                            },
                            {
                                "type": "text",
                                "text": "\n- (tc;dr)\n- all you really need is SVG + contains () + intersects () + connectedTo ()\n- see sections \u201cExpressive Power\u201d and \u201cAmbiguity Detection\u201d in "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Parsing_expression_grammar"
                            },
                            {
                                "type": "text",
                                "text": "\n\t- PEG defines a "
                            },
                            {
                                "type": "text",
                                "text": "parser",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in a top-down manner (TDPL), e.g. \u201cif this matches, try to match this next\u201d\n\t- LR(k) and LL(k) define "
                            },
                            {
                                "type": "text",
                                "text": "languages",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in a bottom-up manner, e.g. \u201cif this looks like a number, then bubble it upwards as a number\u201d (regardless of the context) ; this is what is taught as \u201clanguage  theory\u201d, and is commonly understood to form the basis of parser generators\n\t- TDPL is order-dependent, Lx(k) is not order-dependent (but more restricted)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1651254426.150879",
        "parent_user_id": "U02U0AS3J49",
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U014WA16VNJ"
                ],
                "count": 1
            }
        ]
    }
]