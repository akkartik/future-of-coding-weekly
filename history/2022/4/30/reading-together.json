[
    {
        "type": "message",
        "text": "Title: Technical Dimensions of Programming Systems\nAuthors: Joel Jakubovic, Jonathan Edwards, and Tomas Petricek\n(who I _think_ are <@UCQ4BBFQ9>, <@U6KQ2S410> and <@UDCLA1HU4>, respectively)\n\nThis is still in review afaik, but it\u2019s just too much of a gem for this community to wait until that\u2019s done. If one of the authors has information about the latest revisions I\u2019d love to know more!\n\nfrom the abstract:\n&gt; Many programming systems go beyond programming languages. Programming is usually done in the context of a stateful environment, beyond just writing code, by interacting with a system through a graphical user interface. Much research effort focuses on building programming systems that are easier to use, accessible to non-experts, moldable and/or powerful, but such efforts are often disconnected. They are informal, guided by the personal vision of the authors and thus are only evaluable and comparable on the basis of individual experience using them. They fail to form a coherent body of research, since it is unclear how to build on past work. In the research world, much has been said and done that allows comparison of _programming languages_, yet no similar theory exists for _programming systems_; we believe that programming systems deserve a theory too.\nThis paper was one of the most exciting pieces of research I\u2019ve discovered in the last year, can\u2019t recommend it enough! Attached is a PDF of the paper (a version of it at least) and a great single-page table (explored in detail later in the paper) which should convey some of why this is such a good fit for our community.",
        "files": [
            {
                "id": "F03DJ8BPBRT",
                "created": 1651321920,
                "timestamp": 1651321920,
                "name": "Technical Dimensions of Programming Systems 1.pdf",
                "title": "Technical Dimensions of Programming Systems 1.pdf",
                "mimetype": "application/pdf",
                "filetype": "pdf",
                "pretty_type": "PDF",
                "user": "U014WA16VNJ",
                "editable": false,
                "size": 594660,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F03DJ8BPBRT/technical_dimensions_of_programming_systems_1.pdf",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F03DJ8BPBRT/download/technical_dimensions_of_programming_systems_1.pdf",
                "media_display_type": "unknown",
                "thumb_pdf": "https://files.slack.com/files-tmb/T5TCAFTA9-F03DJ8BPBRT-85f28b2ac6/technical_dimensions_of_programming_systems_1_thumb_pdf.png",
                "thumb_pdf_w": 909,
                "thumb_pdf_h": 1286,
                "permalink": "https://futureofcoding.slack.com/files/U014WA16VNJ/F03DJ8BPBRT/technical_dimensions_of_programming_systems_1.pdf",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F03DJ8BPBRT-75b1a7eca4",
                "is_starred": false,
                "has_rich_preview": false
            },
            {
                "id": "F03DPFP0VAQ",
                "created": 1651321927,
                "timestamp": 1651321927,
                "name": "Screenshot 2022-04-30 at 13.09.17.png",
                "title": "Screenshot 2022-04-30 at 13.09.17.png",
                "mimetype": "image/png",
                "filetype": "png",
                "pretty_type": "PNG",
                "user": "U014WA16VNJ",
                "editable": false,
                "size": 524078,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "url_private": "https://files.slack.com/files-pri/T5TCAFTA9-F03DPFP0VAQ/screenshot_2022-04-30_at_13.09.17.png",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F03DPFP0VAQ/download/screenshot_2022-04-30_at_13.09.17.png",
                "media_display_type": "unknown",
                "thumb_64": "https://files.slack.com/files-tmb/T5TCAFTA9-F03DPFP0VAQ-e2e40f05ed/screenshot_2022-04-30_at_13.09.17_64.png",
                "thumb_80": "https://files.slack.com/files-tmb/T5TCAFTA9-F03DPFP0VAQ-e2e40f05ed/screenshot_2022-04-30_at_13.09.17_80.png",
                "thumb_360": "https://files.slack.com/files-tmb/T5TCAFTA9-F03DPFP0VAQ-e2e40f05ed/screenshot_2022-04-30_at_13.09.17_360.png",
                "thumb_360_w": 305,
                "thumb_360_h": 360,
                "thumb_480": "https://files.slack.com/files-tmb/T5TCAFTA9-F03DPFP0VAQ-e2e40f05ed/screenshot_2022-04-30_at_13.09.17_480.png",
                "thumb_480_w": 406,
                "thumb_480_h": 480,
                "thumb_160": "https://files.slack.com/files-tmb/T5TCAFTA9-F03DPFP0VAQ-e2e40f05ed/screenshot_2022-04-30_at_13.09.17_160.png",
                "thumb_720": "https://files.slack.com/files-tmb/T5TCAFTA9-F03DPFP0VAQ-e2e40f05ed/screenshot_2022-04-30_at_13.09.17_720.png",
                "thumb_720_w": 609,
                "thumb_720_h": 720,
                "thumb_800": "https://files.slack.com/files-tmb/T5TCAFTA9-F03DPFP0VAQ-e2e40f05ed/screenshot_2022-04-30_at_13.09.17_800.png",
                "thumb_800_w": 800,
                "thumb_800_h": 945,
                "thumb_960": "https://files.slack.com/files-tmb/T5TCAFTA9-F03DPFP0VAQ-e2e40f05ed/screenshot_2022-04-30_at_13.09.17_960.png",
                "thumb_960_w": 812,
                "thumb_960_h": 960,
                "thumb_1024": "https://files.slack.com/files-tmb/T5TCAFTA9-F03DPFP0VAQ-e2e40f05ed/screenshot_2022-04-30_at_13.09.17_1024.png",
                "thumb_1024_w": 867,
                "thumb_1024_h": 1024,
                "original_w": 1376,
                "original_h": 1626,
                "thumb_tiny": "AwAwACjRYA03GD6U4+9IR9KADn1pCOetGPpQRzQA4D3NLj3pBS/hQAhB65ppzT2B9f0phoAAT60HIJo/EflQetACg80+mD8Pyp3NACNTSaec4ph7ZoAAfpQetANB60AA69qfxTV69admgD//2Q==",
                "permalink": "https://futureofcoding.slack.com/files/U014WA16VNJ/F03DPFP0VAQ/screenshot_2022-04-30_at_13.09.17.png",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F03DPFP0VAQ-bf822c48fe",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "user": "U014WA16VNJ",
        "ts": "1651321948.472679",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "l5xn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Title: Technical Dimensions of Programming Systems\nAuthors: Joel Jakubovic, Jonathan Edwards, and Tomas Petricek\n(who I "
                            },
                            {
                                "type": "text",
                                "text": "think ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "are "
                            },
                            {
                                "type": "user",
                                "user_id": "UCQ4BBFQ9"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "user",
                                "user_id": "UDCLA1HU4"
                            },
                            {
                                "type": "text",
                                "text": ", respectively)\n\nThis is still in review afaik, but it\u2019s just too much of a gem for this community to wait until that\u2019s done. If one of the authors has information about the latest revisions I\u2019d love to know more!\n\nfrom the abstract:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Many programming systems go beyond programming languages. Programming is usually done in the context of a stateful environment, beyond just writing code, by interacting with a system through a graphical user interface. Much research effort focuses on building programming systems that are easier to use, accessible to non-experts, moldable and/or powerful, but such efforts are often disconnected. They are informal, guided by the personal vision of the authors and thus are only evaluable and comparable on the basis of individual experience using them. They fail to form a coherent body of research, since it is unclear how to build on past work. In the research world, much has been said and done that allows comparison of "
                            },
                            {
                                "type": "text",
                                "text": "programming languages",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", yet no similar theory exists for "
                            },
                            {
                                "type": "text",
                                "text": "programming systems",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "; we believe that programming systems deserve a theory too."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThis paper was one of the most exciting pieces of research I\u2019ve discovered in the last year, can\u2019t recommend it enough! Attached is a PDF of the paper (a version of it at least) and a great single-page table (explored in detail later in the paper) which should convey some of why this is such a good fit for our community."
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "43a47b10-1bc8-4b51-927e-66caa62ca1d4",
        "thread_ts": "1651321948.472679",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1651420794.258469",
        "reply_users": [
            "U0378MDUG1Y"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "point_up::skin-tone-4",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            },
            {
                "name": "eyes",
                "users": [
                    "U0378MDUG1Y"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "U8A5MS6R1"
                ],
                "count": 1
            },
            {
                "name": "thinking_face",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "DD916A69-EDDF-447F-8633-FA7AE7C01FD9",
        "type": "message",
        "text": "\u201c_Supporting Visual Artists in Programming through Direct Inspection and Control of Program Execution_\u201d by Jingyi Li, Joel Brandt, Radomir Mech, Maneesh Agrawala, &amp; Jennifer Jacobs\n\n&gt; Programming offers new opportunities for visual art creation, but understanding and manipulating the abstract representations that make programming powerful can pose challenges for artists who are accustomed to manual tools and concrete visual interaction. We hypothesize that we can reduce these barriers through programming environments that link state to visual artwork output. We created Demystified Dynamic Brushes (DDB), a tool that bidirectionally links code, numerical data, and artwork across the programming interface and the execution environment-i.e., the artist's in-progress artwork. DDB automatically records stylus input as artists draw, and stores a history of brush state and output in relation to the input. This structure enables artists to inspect current and past numerical input, state, and output and control program execution through the direct selection of visual geometric elements in the drawing canvas. An observational study suggests that artists engage in program inspection when they can visually access geometric state information on the drawing canvas in the process of manual drawing.\n<https://ecl.mat.ucsb.edu/publication/DDB|https://ecl.mat.ucsb.edu/publication/DDB>",
        "user": "U0378MDUG1Y",
        "ts": "1651337130.181059",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XQXD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\u201c"
                            },
                            {
                                "type": "text",
                                "text": "Supporting Visual Artists in Programming through Direct Inspection and Control of Program Execution",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u201d by Jingyi Li, Joel Brandt, Radomir Mech, Maneesh Agrawala, & Jennifer Jacobs\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Programming offers new opportunities for visual art creation, but understanding and manipulating the abstract representations that make programming powerful can pose challenges for artists who are accustomed to manual tools and concrete visual interaction. We hypothesize that we can reduce these barriers through programming environments that link state to visual artwork output. We created Demystified Dynamic Brushes (DDB), a tool that bidirectionally links code, numerical data, and artwork across the programming interface and the execution environment-i.e., the artist's in-progress artwork. DDB automatically records stylus input as artists draw, and stores a history of brush state and output in relation to the input. This structure enables artists to inspect current and past numerical input, state, and output and control program execution through the direct selection of visual geometric elements in the drawing canvas. An observational study suggests that artists engage in program inspection when they can visually access geometric state information on the drawing canvas in the process of manual drawing."
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://ecl.mat.ucsb.edu/publication/DDB",
                                "text": "https://ecl.mat.ucsb.edu/publication/DDB"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "B972BBF8-2340-4B2C-9C1F-04706F7667B5",
        "type": "message",
        "text": "Coincidentally just saw this paper linked here by one of the authors: <http://tomasp.net/blog/2022/no-code-substrates/|http://tomasp.net/blog/2022/no-code-substrates/>",
        "user": "U0378MDUG1Y",
        "ts": "1651420794.258469",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "http://tomasp.net/blog/2022/no-code-substrates/",
                "image_url": "http://tomasp.net/blog/2022/no-code-substrates/card.png",
                "image_width": 478,
                "image_height": 250,
                "image_bytes": 281453,
                "service_icon": "http://tomasp.net/img/favicon-big.png",
                "id": 1,
                "original_url": "http://tomasp.net/blog/2022/no-code-substrates/",
                "fallback": "No-code, no thought? Substrates for simple programming for all",
                "text": "Is it really possible to eliminate programming load? What would real progress on making programming easier for all mean? In this article, I take a critical look at no-code programming platforms using the technical dimensions framework and the idea of a",
                "title": "No-code, no thought? Substrates for simple programming for all",
                "title_link": "http://tomasp.net/blog/2022/no-code-substrates/",
                "service_name": "tomasp.net"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lIR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Coincidentally just saw this paper linked here by one of the authors: "
                            },
                            {
                                "type": "link",
                                "url": "http://tomasp.net/blog/2022/no-code-substrates/",
                                "text": "http://tomasp.net/blog/2022/no-code-substrates/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1651321948.472679",
        "parent_user_id": "U014WA16VNJ"
    }
]