[
    {
        "client_msg_id": "98d2df16-2e23-43eb-9b61-920c55f7926b",
        "type": "message",
        "text": "This is very cool!\n<https://www.fuzzmap.io/?welcome=1>\n\nWe work a lot with visual state-machines (creating/defining state-machines visually to drive system state in the visual programme -- think xstate js but you're constructing the diagramme rather than having it rendered for you from code you write) and this fuzzer demo is exciting because it's an auto-state-machine, derived from real system states -- I can imagine this delightfully integrated with a testing framework.\n\nI'm picturing a (dastardly? :laughing:) node-and-wire programme that runs through this fuzzer. If the run through emerges an unaccounted state, it's materialised in the state-machine embedded in the node-wire-nest, and the programmer can now create downstream logic to address this unexpected case.\n\ncould something like that work?",
        "user": "U023V63MF6V",
        "ts": "1661355657.938819",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1gWi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is very cool!\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.fuzzmap.io/?welcome=1"
                            },
                            {
                                "type": "text",
                                "text": "\n\nWe work a lot with visual state-machines (creating/defining state-machines visually to drive system state in the visual programme -- think xstate js but you're constructing the diagramme rather than having it rendered for you from code you write) and this fuzzer demo is exciting because it's an auto-state-machine, derived from real system states -- I can imagine this delightfully integrated with a testing framework.\n\nI'm picturing a (dastardly? "
                            },
                            {
                                "type": "emoji",
                                "name": "laughing",
                                "unicode": "1f606"
                            },
                            {
                                "type": "text",
                                "text": ") node-and-wire programme that runs through this fuzzer. If the run through emerges an unaccounted state, it's materialised in the state-machine embedded in the node-wire-nest, and the programmer can now create downstream logic to address this unexpected case.\n\ncould something like that work?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1661355657.938819",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1661429394.806509",
        "reply_users": [
            "U018S42NMMM"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "open_mouth",
                "users": [
                    "UJZS8UUJV",
                    "UA14TGLTC",
                    "U040R67M66L"
                ],
                "count": 3
            }
        ]
    },
    {
        "type": "message",
        "text": "Heya folks, we\u2019re live now and doing some thinkin\u2019 chats!",
        "user": "U03E4LY27FS",
        "ts": "1661361453.220889",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/C5T9GPWFL/p1661361096538759?thread_ts=1660659617169979&cid=C5T9GPWFL",
                "ts": "1661361096.538759",
                "author_id": "U03FKLDAAN8",
                "channel_team": "T5TCAFTA9",
                "channel_id": "C5T9GPWFL",
                "channel_name": "thinking-together",
                "is_msg_unfurl": true,
                "is_reply_unfurl": true,
                "message_blocks": [
                    {
                        "team": "T5TCAFTA9",
                        "channel": "C5T9GPWFL",
                        "ts": "1661361096.538759",
                        "message": {
                            "blocks": [
                                {
                                    "type": "rich_text",
                                    "block_id": "TV1bi",
                                    "elements": [
                                        {
                                            "type": "rich_text_section",
                                            "elements": [
                                                {
                                                    "type": "text",
                                                    "text": "we're on now - "
                                                },
                                                {
                                                    "type": "link",
                                                    "url": "https://whereby.com/the-mob-foc"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "color": "D0D0D0",
                "is_share": true,
                "fallback": "[August 24th, 2022 10:11 AM] gushogg-blake: we're on now - <https://whereby.com/the-mob-foc>",
                "text": "we're on now - <https://whereby.com/the-mob-foc>",
                "author_name": "Gus Hogg-Blake",
                "author_link": "https://futureofcoding.slack.com/team/U03FKLDAAN8",
                "author_icon": "https://avatars.slack-edge.com/2022-05-15/3527322406515_4ffef1b2562c47ac1f01_48.jpg",
                "author_subname": "Gus Hogg-Blake",
                "mrkdwn_in": [
                    "text"
                ],
                "footer": "From a thread in #thinking-together"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D0Ea",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Heya folks, we\u2019re live now and doing some thinkin\u2019 chats!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "25d877dd-c3a4-40e2-a957-ac4ba77f7fd2",
        "type": "message",
        "text": "Speaking of automatically testing state machines, I wrote about my approach a few years ago: <https://medium.com/cleartax-engineering/enumerating-test-cases-by-multiplying-state-machines-c1bedbf0e8e6>",
        "user": "U018S42NMMM",
        "ts": "1661429394.806509",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://medium.com/cleartax-engineering/enumerating-test-cases-by-multiplying-state-machines-c1bedbf0e8e6",
                "ts": 1548749843,
                "image_url": "https://miro.medium.com/max/1159/1*W604pKQ0u2WFudcjgtDTWA.png",
                "image_width": 274,
                "image_height": 250,
                "image_bytes": 93344,
                "service_icon": "https://miro.medium.com/fit/c/152/152/1*sHhtYhaCe2Uc3IU0IgKwIQ.png",
                "id": 1,
                "original_url": "https://medium.com/cleartax-engineering/enumerating-test-cases-by-multiplying-state-machines-c1bedbf0e8e6",
                "fallback": "Medium: Enumerating test cases by multiplying state machines",
                "text": "A technique to make complex business logic more robust using state machine algebra",
                "title": "Enumerating test cases by multiplying state machines",
                "title_link": "https://medium.com/cleartax-engineering/enumerating-test-cases-by-multiplying-state-machines-c1bedbf0e8e6",
                "service_name": "Medium",
                "fields": [
                    {
                        "value": "6 min read",
                        "title": "Reading time",
                        "short": true
                    }
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P3Tr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Speaking of automatically testing state machines, I wrote about my approach a few years ago: "
                            },
                            {
                                "type": "link",
                                "url": "https://medium.com/cleartax-engineering/enumerating-test-cases-by-multiplying-state-machines-c1bedbf0e8e6"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1661355657.938819",
        "parent_user_id": "U023V63MF6V",
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U023V63MF6V"
                ],
                "count": 1
            }
        ]
    }
]