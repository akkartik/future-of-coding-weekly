[
    {
        "client_msg_id": "cebea924-9543-44e7-b915-f2fe6068664b",
        "type": "message",
        "text": "On the criteria to be used in decomposing systems into modules by D. L. Parnas\n<https://dl.acm.org/doi/10.1145/361598.361623|https://dl.acm.org/doi/10.1145/361598.361623>\n\nThis is one of my favorite papers, and the basic concept that each design decision should be hidden within a module of some sort, where \"module\" can mean anything from a collection of procedures to a language specific feature, has served me well for many years.\n\nAlso, the principle that programs should be broken up by concern and not by the order in which things happen has informed my design decisions for a long time.\n\nHas this paper's approach informed anyone else's design over the years? If so, how?\n\nWhat principles do the rest of you use to make your programs more resilient against changes in the specifications?",
        "user": "U03CEGR3HSL",
        "ts": "1660888406.320979",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "f6Fb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On the criteria to be used in decomposing systems into modules by D. L. Parnas\n"
                            },
                            {
                                "type": "link",
                                "url": "https://dl.acm.org/doi/10.1145/361598.361623",
                                "text": "https://dl.acm.org/doi/10.1145/361598.361623"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThis is one of my favorite papers, and the basic concept that each design decision should be hidden within a module of some sort, where \"module\" can mean anything from a collection of procedures to a language specific feature, has served me well for many years.\n\nAlso, the principle that programs should be broken up by concern and not by the order in which things happen has informed my design decisions for a long time.\n\nHas this paper's approach informed anyone else's design over the years? If so, how?\n\nWhat principles do the rest of you use to make your programs more resilient against changes in the specifications?"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]