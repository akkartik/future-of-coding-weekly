[
    {
        "client_msg_id": "9869891d-d0af-43a7-8c2a-f954b6baf18c",
        "type": "message",
        "text": ":thread: on the first 25 minutes of <https://futureofcoding.org/episodes/057>\n\nSummary:\n\u2022 It would be cool to create a visualizer for low level software. Assembly language in particular would benefit from visualization to catch errors in register allocation, manual memory management.\n\u2022 A retro game console may be a simple test bed for trying out various FoC ideas. You could literally save snapshots of all 64KB of RAM for some machines every single frame, and then perform further analysis on them, diffs and so on.\n\u2022 A similar idea: GPU Maker 2000 like <https://en.wikipedia.org/wiki/RPG_Maker|RPG Maker 2000> but for GPU programming.\n\u2022 The Gameboy has a particularly ideal form factor for a convivial tool for thought. In particular, it has a camera, something I wasn't aware of.\nDoes anyone have a good sense of the space of Assemblers out there? Surely there exist debuggers for Assembly? Maybe reverse engineering is a space to look at? Are there any debuggers or reverse-engineering tools with command languages? Ghidra does seem to have something: <https://resolute-tech.com/an-introduction-to-ghidra-scripting>. Does anyone here have experience with it?",
        "user": "UCUSW7WVD",
        "ts": "1661748033.254809",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qja",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "emoji",
                                "name": "thread",
                                "unicode": "1f9f5"
                            },
                            {
                                "type": "text",
                                "text": " on the first 25 minutes of "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.org/episodes/057"
                            },
                            {
                                "type": "text",
                                "text": "\n\nSummary:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "It would be cool to create a visualizer for low level software. Assembly language in particular would benefit from visualization to catch errors in register allocation, manual memory management."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A retro game console may be a simple test bed for trying out various FoC ideas. You could literally save snapshots of all 64KB of RAM for some machines every single frame, and then perform further analysis on them, diffs and so on."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A similar idea: GPU Maker 2000 like "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://en.wikipedia.org/wiki/RPG_Maker",
                                        "text": "RPG Maker 2000"
                                    },
                                    {
                                        "type": "text",
                                        "text": " but for GPU programming."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The Gameboy has a particularly ideal form factor for a convivial tool for thought. In particular, it has a camera, something I wasn't aware of."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nDoes anyone have a good sense of the space of Assemblers out there? Surely there exist debuggers for Assembly? Maybe reverse engineering is a space to look at? Are there any debuggers or reverse-engineering tools with command languages? Ghidra does seem to have something: "
                            },
                            {
                                "type": "link",
                                "url": "https://resolute-tech.com/an-introduction-to-ghidra-scripting"
                            },
                            {
                                "type": "text",
                                "text": ". Does anyone here have experience with it?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1661748033.254809",
        "reply_count": 7,
        "reply_users_count": 7,
        "latest_reply": "1661850313.524709",
        "reply_users": [
            "UCUSW7WVD",
            "U02E4DAQGSZ",
            "U02028JHX37",
            "UJFN50C00",
            "UDQBTJ211",
            "UA14TGLTC",
            "UGWUJUZHT"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "ac4bb68b-606f-49b5-925b-46312fd5055f",
        "type": "message",
        "text": "One reaction I had listening to the podcast: do we _really_ need a visualizer? Mu would check register allocations and raise errors when you got them wrong. Ditto memory allocation errors. A visualizer would add a lot of complexity to it. Is it really worthwhile?",
        "user": "UCUSW7WVD",
        "ts": "1661748147.872909",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hYV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One reaction I had listening to the podcast: do we "
                            },
                            {
                                "type": "text",
                                "text": "really",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " need a visualizer? Mu would check register allocations and raise errors when you got them wrong. Ditto memory allocation errors. A visualizer would add a lot of complexity to it. Is it really worthwhile?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1661748033.254809",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "63684d4d-6e64-4bd1-a730-0d5682f0de7b",
        "type": "message",
        "text": "I am converging on the idea that the FoC is not replacement of text with no-code, but augmentation of text with dataviz, i.e. dataviz assisted development. This seems to be what you want here (I can't help with the specifics of assembly). Yo do not need the same set of dataviz for all problems, so I think complexity is not an issue, as you only pick the tools that make sense.",
        "user": "U02E4DAQGSZ",
        "ts": "1661755558.793479",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GhIov",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I am converging on the idea that the FoC is not replacement of text with no-code, but augmentation of text with dataviz, i.e. dataviz assisted development. This seems to be what you want here (I can't help with the specifics of assembly). Yo do not need the same set of dataviz for all problems, so I think complexity is not an issue, as you only pick the tools that make sense."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1661748033.254809",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "3c5bd127-d20b-4f38-8fe2-589016b194c8",
        "type": "message",
        "text": "Re the idea that retro consoles might be a good testbed, since we can handle the whole systems with our current tools: Alan Kay would argue that we ought to do this with our current platforms, with the aid of supercomputers, and that we're limiting the scope of our ideas by not doing it. I agree with him, since on a retro console you won't typically need to deal with concurrency, and certainly not with parallelism.",
        "user": "U02028JHX37",
        "ts": "1661771355.018379",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3iA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Re the idea that retro consoles might be a good testbed, since we can handle the whole systems with our current tools: Alan Kay would argue that we ought to do this with our current platforms, with the aid of supercomputers, and that we're limiting the scope of our ideas by not doing it. I agree with him, since on a retro console you won't typically need to deal with concurrency, and certainly not with parallelism."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1661748033.254809",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "FEFA2EAC-8923-492D-AC96-586C655B38E3",
        "type": "message",
        "text": "I actually remember RPG Maker 2000 there was a forum around the 2000\u2019s where I spend a lot of time back then where it had a sub forum.",
        "user": "UJFN50C00",
        "ts": "1661787164.655669",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9Lqq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I "
                            },
                            {
                                "type": "text",
                                "text": "actually"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "remember"
                            },
                            {
                                "type": "text",
                                "text": " RPG Maker 2000 there was a forum around the 2000\u2019s where "
                            },
                            {
                                "type": "text",
                                "text": "I spend "
                            },
                            {
                                "type": "text",
                                "text": "a lot of time back "
                            },
                            {
                                "type": "text",
                                "text": "then "
                            },
                            {
                                "type": "text",
                                "text": "where it had a "
                            },
                            {
                                "type": "text",
                                "text": "su"
                            },
                            {
                                "type": "text",
                                "text": "b "
                            },
                            {
                                "type": "text",
                                "text": "forum"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1661748033.254809",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "3644e39f-0c89-4065-b869-07044fe8dfb5",
        "type": "message",
        "text": "Re: retro consoles. Yes, I would love to make a Gameboy emulator that included all the visualisations from this talk <https://youtu.be/HyzD8pNlpwI|https://youtu.be/HyzD8pNlpwI> (particularly the pixel data related ones from ~29mins on)",
        "user": "UDQBTJ211",
        "ts": "1661790059.113149",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://youtu.be/HyzD8pNlpwI",
                "thumb_url": "https://i.ytimg.com/vi/HyzD8pNlpwI/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/HyzD8pNlpwI?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"The Ultimate Game Boy Talk (33c3)\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/HyzD8pNlpwI",
                "fallback": "YouTube Video: The Ultimate Game Boy Talk (33c3)",
                "title": "The Ultimate Game Boy Talk (33c3)",
                "title_link": "https://youtu.be/HyzD8pNlpwI",
                "author_name": "media.ccc.de",
                "author_link": "https://www.youtube.com/c/mediacccde",
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tsyu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Re: retro consoles. Yes, I would love to make a Gameboy emulator that included all the visualisations from this talk "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/HyzD8pNlpwI",
                                "text": "https://youtu.be/HyzD8pNlpwI"
                            },
                            {
                                "type": "text",
                                "text": " (particularly the pixel data related ones from ~29mins on)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1661748033.254809",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "5bda2e2f-4920-4987-9abe-01c6048388a6",
        "type": "message",
        "text": "For many years now, I've wanted to make an easy to use card game builder.  Would be less time sensitive than a console.  Complexity comes in managing state well: phases of a turn, turns combining into rounds, phases, matches.  Some combinatorial trickiness: sets and runs.  And I'd feel good about the result if the system can automatically generate AI players of different skill level and disposition based off the rules.  I mean given this set of rules, you could have an \"aggressive\" player who tries to do this and this.",
        "user": "UA14TGLTC",
        "ts": "1661837764.866939",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "o1N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For many years now, I've wanted to make an easy to use card game builder.  Would be less time sensitive than a console.  Complexity comes in managing state well: phases of a turn, turns combining into rounds, phases, matches.  Some combinatorial trickiness: sets and runs.  And I'd feel good about the result if the system can automatically generate AI players of different skill level and disposition based off the rules.  I mean given this set of rules, you could have an \"aggressive\" player who tries to do this and this."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1661748033.254809",
        "parent_user_id": "UCUSW7WVD"
    },
    {
        "client_msg_id": "c3b52298-370c-4e08-8bef-c2732dcbd060",
        "type": "message",
        "text": "&gt; do we _really_ need a visualizer?\nIMO, the question about \u201cvisualization\u201d might be rhetorical - visualization of _what_?\n\nDebugging belongs to the realm of creativity, not of clockwork engineering.\n\nDebugging is iteration.  Debugging is notation-specific.  Debugging is paradigm-specific.  For example, if you Design a system using, say, the OO paradigm, you want a debugger that shows you the OO-iness of your code, not, say, machine-level single-stepping from a completely different paradigm.\n\n<@UCUSW7WVD>\u2019s Handmade-network video reminds me of a long-standing _je ne sais quoi_ I\u2019ve had about <https://equis.cs.queensu.ca/~equis/pubs/1992/cordy-jvlc-92.pdf|GVL> . Kind of a projectional editing REPL (based on simplistic-SVG?).",
        "user": "UGWUJUZHT",
        "ts": "1661850313.524709",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UGWUJUZHT",
            "ts": "1661852166.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m=B7",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "do we "
                            },
                            {
                                "type": "text",
                                "text": "really",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " need a visualizer?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIMO, the question about \u201cvisualization\u201d might be rhetorical - visualization of "
                            },
                            {
                                "type": "text",
                                "text": "what",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "?\n\nDebugging belongs to the realm of creativity, not of clockwork engineering.\n\nDebugging is iteration.  Debugging is notation-specific.  Debugging is paradigm-specific.  For example, if you Design a system using, say, the OO paradigm, you want a debugger that shows you the OO-iness of your code, not, say, machine-level single-stepping from a completely different paradigm.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": "\u2019s Handmade-network video reminds me of a long-standing "
                            },
                            {
                                "type": "text",
                                "text": "je ne sais quoi",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " I\u2019ve had about "
                            },
                            {
                                "type": "link",
                                "url": "https://equis.cs.queensu.ca/~equis/pubs/1992/cordy-jvlc-92.pdf",
                                "text": "GVL"
                            },
                            {
                                "type": "text",
                                "text": " . Kind of a projectional editing REPL (based on simplistic-SVG?)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1661748033.254809",
        "parent_user_id": "UCUSW7WVD",
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]