[
    {
        "client_msg_id": "272c7adf-a923-4172-9099-9a7215db0e55",
        "type": "message",
        "text": "Hi all, I wrote down some thoughts on colorless async. See below! I\u2019m not experienced in use of go-routines etc; I write from a language design perspective and,  yeah so; I might be totally wrong/have mis-conceptualized something.  I\u2019m in a process of learning to think about this stuff and would be delighted to have feedback/think together about the topic of designing async into a language!\n---\n\n*Colorless async seems obviously great, but what if the opposite is also true?*\nI read this blog post <https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/|What Color is Your Function?>? on ways to integrate async into a language. It\u2019s an entertaining  and convincing read by a super experienced developer. The article leads you through a chain of very obvious thoughts, that you cannot imagine even wanting to contradict; ending up with the understanding that the best solution is to enable using sync and async functions interchangeably, e.g. by supporting go-routines.\n\n*I was totally convinced*. But then I thought, what if you go all the way in the other direction, embracing that `sync` and `async` are so fundamentally different in their semantics. _What it that difference was present on the language level, in stead of being hidden by magic?_ \n\n*This has been done* many decades ago and with superb usability results, in the form of state machines and most notably statecharts. \u201cRed\u201d (sync) functions are transitions. \u201cBlue\u201d (async) functions are states. Thinking of them and visualizing them as distinctly different is a game-changer for the human mind: A top-down understanding can be conveyed to non-programmers and programmers alike, etc. In the typical visualization, sync stuff is not \u201cred functions\u201d, they are arrows. async stuff is not \u201cblue functions\u201d, they are rectangles. Arrows and Rectangles composes perfectly, _because of their differences_. It\u2019s hard to see what\u2019s gained conceptually by merging arrows and rectangles into one thing.",
        "user": "U02M6PM725T",
        "ts": "1647422642.414839",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Bjc2x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi all, I wrote down some thoughts on colorless async. See below! I\u2019m not experienced in use of go-routines etc; I write from a language design perspective and,  yeah so; I might be totally wrong/have mis-conceptualized something.  I\u2019m in a process of learning to think about this stuff and would be delighted to have feedback/think together about the topic of designing async into a language!\n---\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Colorless async seems obviously great, but what if the opposite is also true?",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nI read this blog post "
                            },
                            {
                                "type": "link",
                                "url": "https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/",
                                "text": "What Color is Your Function?"
                            },
                            {
                                "type": "text",
                                "text": "? on ways to integrate async into a language. It\u2019s an entertaining  and convincing read by a super experienced developer. The article leads you through a chain of very obvious thoughts, that you cannot imagine even wanting to contradict; ending up with the understanding that the best solution is to enable using sync and async functions interchangeably, e.g. by supporting go-routines.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "I was totally convinced",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". But then I thought, what if you go all the way in the other direction, embracing that "
                            },
                            {
                                "type": "text",
                                "text": "sync",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "async",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are so fundamentally different in their semantics. "
                            },
                            {
                                "type": "text",
                                "text": "What it that difference was present on the language level, in stead of being hidden by magic? ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "This has been done",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " many decades ago and with superb usability results, in the form of state machines and most notably statecharts. \u201cRed\u201d (sync) functions are transitions. \u201cBlue\u201d (async) functions are states. Thinking of them and visualizing them as distinctly different is a game-changer for the human mind: A top-down understanding can be conveyed to non-programmers and programmers alike, etc. In the typical visualization, sync stuff is not \u201cred functions\u201d, they are arrows. async stuff is not \u201cblue functions\u201d, they are rectangles. Arrows and Rectangles composes perfectly, "
                            },
                            {
                                "type": "text",
                                "text": "because of their differences",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". It\u2019s hard to see what\u2019s gained conceptually by merging arrows and rectangles into one thing."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1647422642.414839",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1647815695.262939",
        "reply_users": [
            "UBN9AFS0N",
            "U01661S9F34",
            "UK3LH8CF5"
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1647815695.262939"
    },
    {
        "client_msg_id": "86142c79-dde7-42e3-86de-2f147686e872",
        "type": "message",
        "text": "If you get preemptive multitasking and lightweight processes (like Erlang &amp; Go) you don't need async :slightly_smiling_face:",
        "user": "UBN9AFS0N",
        "ts": "1647426476.091299",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YjQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you get preemptive multitasking and lightweight processes (like Erlang & Go) you don't need async "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1647422642.414839",
        "parent_user_id": "U02M6PM725T",
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "bad7c113-450b-4c8d-8e3e-1dfe2d58774b",
        "type": "message",
        "text": "Have you seen how Zig handles this? <https://ziglang.org/download/0.5.0/release-notes.html#Async-Functions>\n\nkind of a clever hack to implement co-routines :-)",
        "user": "U01661S9F34",
        "ts": "1647627444.970029",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7xh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Have you seen how Zig handles this? "
                            },
                            {
                                "type": "link",
                                "url": "https://ziglang.org/download/0.5.0/release-notes.html#Async-Functions"
                            },
                            {
                                "type": "text",
                                "text": "\n\nkind of a clever hack to implement co-routines :-)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1647422642.414839",
        "parent_user_id": "U02M6PM725T"
    },
    {
        "client_msg_id": "1f6f8f16-9479-407f-8e8a-7748ade222f2",
        "type": "message",
        "text": "Not sure I see the parallel between state machines and sync/async. I don't really see why async functions would be states. My async function `fetch-the-data` isn't a state. In fact, I could make many many state transitions while my async function is still resolving.\n\n\nTo be pedantic, Go has a cooperative scheduler.\n\nBut to go beyond the pedanticness, I don\u2019t think actors or CSP solve the colored functions problem. There are still colors here, just not functions. Sending a message to an actor or putting a message on a channel are fundamentally different operations. You can\u2019t parameterize on them. \n\nThat said, I think that coloring functions is actually quite good. There are so many unique aspects to asynchronous programming that I\u2019ve seen so many people get wrong. I have spent weeks/months of time trying to help a QA team whose framework hid the fact that asynchrony was going on from them. They constantly ran up against race conditions. To the point where there were 8 people, whose full time jobs was to run tests on their personal laptops, because CI was \u201ctoo slow\u201d and \u201ccaused errors\u201d. They even blamed the errors in their test suites on the app having a \u201cmemory leak\u201d.\n\nNeedless to say, I'm all for these things being very explicit, because hiding them, or abstracting away these details leads to very subtle and confusing bugs ",
        "user": "UK3LH8CF5",
        "ts": "1647815695.262939",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ssj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Not sure I see the parallel between state machines and sync/async. I don't really see why async functions would be states. My async function "
                            },
                            {
                                "type": "text",
                                "text": "fetch-the-data",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " isn't a state. In fact, I could make many many state transitions while my async function is still resolving.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "To be pedantic, Go has a cooperative scheduler.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "But to go beyond the pedanticness, I don\u2019t think actors or CSP solve the colored functions problem. There are still colors here, just not functions. Sending a message to an actor or putting a message on a channel are fundamentally different operations. You can\u2019t parameterize on them. \n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "That said, I think that coloring functions is actually quite good. There are so many unique aspects to asynchronous programming that I\u2019ve seen so many people get wrong. I have spent weeks/months of time trying to help a QA team whose framework hid the fact that asynchrony was going on from them. They constantly ran up against race conditions. To the point where there were 8 people, whose full time jobs was to run tests on their personal laptops, because CI was \u201ctoo slow\u201d and \u201ccaused errors\u201d. They even blamed the errors in their test suites on the app having a \u201cmemory leak\u201d.\n"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "Needless to say, I'm all for these things being very explicit, because hiding them, or abstracting away these details leads to very subtle and confusing bugs "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1647422642.414839",
        "parent_user_id": "U02M6PM725T"
    }
]