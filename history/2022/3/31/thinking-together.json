[
    {
        "client_msg_id": "78c83487-2f22-4502-9d17-032bb2ad4034",
        "type": "message",
        "text": "Is there a \"grammar/pattern/algebra of parser combinators\" somewhere?\nSomething that describe the common parts that most parser combinators have, choice, iteration and so on",
        "user": "UBN9AFS0N",
        "ts": "1648719023.215139",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+g7H6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is there a \"grammar/pattern/algebra of parser combinators\" somewhere?\nSomething that describe the common parts that most parser combinators have, choice, iteration and so on"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1648719023.215139",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1648748658.249439",
        "reply_users": [
            "UGWUJUZHT",
            "UUQ2EQW21",
            "UK3LH8CF5"
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1648748658.249439"
    },
    {
        "client_msg_id": "7d119e7e-7e38-4ea8-9836-3d26b8756deb",
        "type": "message",
        "text": "A: PEG\n\nbut...\n\nDSL for parsing == Ohm-JS.\nOhm-JS &gt;&gt; PEG &gt;&gt; parsing combinators (IMO)\nolder DSL for parsing == S/SL (Syntax / Semantic Language), superseded by PEG\n\n[SSL and PT compiler](<https://research.cs.queensu.ca/home/cordy/pub/downloads/ssl/>)\n[Ohm-JS](<https://ohmjs.org>)\n[PEG](<https://en.wikipedia.org/wiki/Parsing_expression_grammar>)\n\n(fyi, you might use Ohm to create source code for parsing combinators in any target language, not just JS)",
        "user": "UGWUJUZHT",
        "ts": "1648721074.865399",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://ohmjs.org/",
                "service_icon": "https://ohmjs.org/img/favicon.ico",
                "id": 1,
                "original_url": "https://ohmjs.org",
                "fallback": "Ohm: a user-friendly parsing toolkit for JavaScript and Typescript",
                "text": "Ohm is a parsing toolkit for JavaScript, consisting of a library and a domain-specific language. You can use it to parse custom file formats or quickly build parsers, interpreters, and compilers for programming languages.",
                "title": "Ohm: a user-friendly parsing toolkit for JavaScript and Typescript",
                "title_link": "https://ohmjs.org/",
                "service_name": "ohmjs.org"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hkx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A: PEG\n\nbut...\n\nDSL for parsing == Ohm-JS.\nOhm-JS >> PEG >> parsing combinators (IMO)\nolder DSL for parsing == S/SL (Syntax / Semantic Language), superseded by PEG\n\n[SSL and PT compiler]("
                            },
                            {
                                "type": "link",
                                "url": "https://research.cs.queensu.ca/home/cordy/pub/downloads/ssl/"
                            },
                            {
                                "type": "text",
                                "text": ")\n[Ohm-JS]("
                            },
                            {
                                "type": "link",
                                "url": "https://ohmjs.org"
                            },
                            {
                                "type": "text",
                                "text": ")\n[PEG]("
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Parsing_expression_grammar"
                            },
                            {
                                "type": "text",
                                "text": ")\n\n(fyi, you might use Ohm to create source code for parsing combinators in any target language, not just JS)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1648719023.215139",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "f9fa3ce0-4360-4f69-b07f-094f960f43c2",
        "type": "message",
        "text": "My favourite parser combinator implementation.  You can optionally give it a grammar, and it will build the combinators for you.  Very easy to use:\n<https://github.com/orangeduck/mpc>",
        "user": "UUQ2EQW21",
        "ts": "1648733035.472999",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3bXvH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My favourite parser combinator implementation.  You can optionally give it a grammar, and it will build the combinators for you.  Very easy to use:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/orangeduck/mpc"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1648719023.215139",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "f5279315-1177-439b-8a43-04c256d0c72d",
        "type": "message",
        "text": "There are monadic parser combinators. \n\n<http://www.cs.nott.ac.uk/~pszgmh/monparsing.pdf|http://www.cs.nott.ac.uk/~pszgmh/monparsing.pdf>\n\nWalks through combinators that are pretty common",
        "user": "UK3LH8CF5",
        "ts": "1648748658.249439",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vF2bQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There are monadic parser combinators. \n\n"
                            },
                            {
                                "type": "link",
                                "url": "http://www.cs.nott.ac.uk/~pszgmh/monparsing.pdf",
                                "text": "http://www.cs.nott.ac.uk/~pszgmh/monparsing.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n\nWalks through combinators that are pretty common"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1648719023.215139",
        "parent_user_id": "UBN9AFS0N"
    }
]