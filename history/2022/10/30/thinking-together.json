[
    {
        "client_msg_id": "4d749b2b-8927-49b1-b1e1-b4b1f4e5fe14",
        "type": "message",
        "text": "99% of humans think of code as a medium that is too difficult. I don't think the medium is the problem. I think it's the way we've been asking end-users to interact with it:\n\nSo far, 99% of human-to-code interactions have been code-as-text, an interaction paradigm with unforgiving syntax and symbolic mental models.\n\nInvestments in interaction paradigms for code have almost exclusively focused on code-as-text and code-as-export, but there are other more end-user friendly ways of interacting with code that we can explore.\n\nLet's break down the interaction paradigms for code (tell me if I missed any!):\n\n\u2022 *Code-as-text* (massively explored): You type, the code editor helps you type. Examples: IDEs, Low-Code\n\u2022 *Code-as-export* (mostly explored): Code is treated as a secondary source of truth via one-way export flows from some vendor-specific data you're editing. The tool cannot manipulate or understand the code it just exported, and the interaction ends here. Examples: Vector-based UX design tools, No-Code\n\u2022 *Code-as-programming-portals* (moderately explored): <@U0275EZH3UN> wrote a great breakdown of this at <https://maggieappleton.com/programming-portals>\n\u2022 *Code-as-data* (largely unexplored): Direct manipulation of code ASTs/code visualizations/code output. The tool responds to non-textual interaction from the user and reconciles their intent with a corresponding change in the underlying code-as-text storage.\n\u2022 *Code-as-executable* (largely unexplored): A code engine/runtime executes code-as-data changes that result from user interactions to give the user instant feedback, closing the feedback loop of the interaction. Related to live-coding, but where live-coding is tied to code-as-text, code-as-executable can respond to changes from code-as-text as well as code-as data.\n\u2022 *Code-as-source-of-truth* (massively explored): IDEs, version control systems. The primary interaction consists of reconciling your code interactions with those performed by others, e.g. through merging, pushes, conflict resolution.\nThere's so much unexplored territory outside the traditional code-as-text and code-as-export interaction paradigms! Would love to know what you think and whether I've missed any :smile:",
        "user": "U03GBV8B58V",
        "ts": "1667113662.924319",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KW2d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "99% of humans think of code as a medium that is too difficult. I don't think the medium is the problem. I think it's the way we've been asking end-users to interact with it:\n\nSo far, 99% of human-to-code interactions have been code-as-text, an interaction paradigm with unforgiving syntax and symbolic mental models.\n\nInvestments in interaction paradigms for code have almost exclusively focused on code-as-text and code-as-export, but there are other more end-user friendly ways of interacting with code that we can explore.\n\nLet's break down the interaction paradigms for code (tell me if I missed any!):\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Code-as-text",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " (massively explored): You type, the code editor helps you type. Examples: IDEs, Low-Code"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Code-as-export",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " (mostly explored): Code is treated as a secondary source of truth via one-way export flows from some vendor-specific data you're editing. The tool cannot manipulate or understand the code it just exported, and the interaction ends here. Examples: Vector-based UX design tools, No-Code"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Code-as-programming-portals",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " (moderately explored): "
                                    },
                                    {
                                        "type": "user",
                                        "user_id": "U0275EZH3UN"
                                    },
                                    {
                                        "type": "text",
                                        "text": " wrote a great breakdown of this at "
                                    },
                                    {
                                        "type": "link",
                                        "url": "https://maggieappleton.com/programming-portals"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Code-as-data",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " (largely unexplored): Direct manipulation of code ASTs/code visualizations/code output. The tool responds to non-textual interaction from the user and reconciles their intent with a corresponding change in the underlying code-as-text storage."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Code-as-executable",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " (largely unexplored): A code engine/runtime executes code-as-data changes that result from user interactions to give the user instant feedback, closing the feedback loop of the interaction. Related to live-coding, but where live-coding is tied to code-as-text, code-as-executable can respond to changes from code-as-text as well as code-as data."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Code-as-source-of-truth",
                                        "style": {
                                            "bold": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " (massively explored): IDEs, version control systems. The primary interaction consists of reconciling your code interactions with those performed by others, e.g. through merging, pushes, conflict resolution."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThere's so much unexplored territory outside the traditional code-as-text and code-as-export interaction paradigms! Would love to know what you think and whether I've missed any "
                            },
                            {
                                "type": "emoji",
                                "name": "smile",
                                "unicode": "1f604"
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "thread_ts": "1667113662.924319",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1667199819.109829",
        "reply_users": [
            "UA14TGLTC"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U0245E9RB2B",
                    "U0123H7JRDM",
                    "UA14TGLTC",
                    "U0275EZH3UN"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "533fdec2-c4dd-460e-806c-9add6d59d47c",
        "type": "message",
        "text": "Under this framework, I guess I'm interested in code-as-executable.  You do a thing, then you step back from the action, observing it, abstracting so as to apply in a new situation.  Not exactly programming by example.",
        "user": "UA14TGLTC",
        "ts": "1667199819.109829",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "whj11",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Under this framework, I guess I'm interested in code-as-executable.  You do a thing, then you step back from the action, observing it, abstracting so as to apply in a new situation.  Not exactly programming by example."
                            }
                        ]
                    }
                ]
            }
        ],
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UA14TGLTC",
            "ts": "1667200244.000000"
        },
        "thread_ts": "1667113662.924319",
        "parent_user_id": "U03GBV8B58V",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03GBV8B58V"
                ],
                "count": 1
            }
        ]
    }
]