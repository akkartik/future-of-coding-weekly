[
    {
        "client_msg_id": "fa62d6ff-1750-4d24-86c1-5f035974a943",
        "type": "message",
        "text": "[This is like 5min into the future, so not sure it qualifies as a topic in FutureOfCoding slack? Admins fell free to delete or move]\n\nA language construct terminology question: *What is a good name for the  \u201ctransposition\u201d of a Case expression?* (see below)\n\n*Motivation*: The idea is to integrate some more expressive language patterns into e.g. JavaScript using Continuation-Passing Style (CPS), in a friendly way by putting the CPS functionality in predictable places in readable  constructs. The Case expression is similar to Haskell pattern matching in intended usage. The corresponding JavaScript syntax needs a few extra parens and commas.\n\n*Clarification*: By Case expression I intend:\n```Case\n    &lt;pat p1&gt; &lt;fn succ1&gt;\n    &lt;pat p2&gt; &lt;fn succ2&gt;\n    ...\n    &lt;fn failAll&gt; -- optional```\nSuccess at p#n means choose succ#n.\nFailure at p#n means continue with clause n+1.\n\n\n\n\nBy \u2018transposition of Case\u2019 I intend:\n```CaseTransp\n    &lt;pat p1&gt; &lt;fn fail1&gt;\n    &lt;pat p2&gt; &lt;fn fail2&gt;\n    ...\n    &lt;fn succAll&gt; -- not optional```\nFailure at p#n means choose fail#n.\nSuccess at p#n means continue with p#(n+1).\n\nNote: &lt;pat&gt; are CPS constructs in the form of functions that can succeed or fail. &lt;fail&gt; and &lt;succ&gt; are ordinary functions.",
        "user": "U02M6PM725T",
        "ts": "1655110249.993679",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U02M6PM725T",
            "ts": "1655127250.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "H4y",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[This is like 5min into the future, so not sure it qualifies as a topic in FutureOfCoding slack? Admins fell free to delete or move]\n\nA language construct terminology question: "
                            },
                            {
                                "type": "text",
                                "text": "What is a good name for the  \u201ctransposition\u201d of a Case expression? ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(see below)\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Motivation",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": The idea is to integrate some more expressive language patterns into e.g. JavaScript using Continuation-Passing Style (CPS), in a friendly way by putting the CPS functionality in predictable places in readable  constructs. The Case expression is similar to Haskell pattern matching in intended usage. The corresponding JavaScript syntax needs a few extra parens and commas.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Clarification",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": By Case expression I intend:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Case\n    <pat p1> <fn succ1>\n    <pat p2> <fn succ2>\n    ...\n    <fn failAll> -- optional"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Success at p#n means choose succ#n.\nFailure at p#n means continue with clause n+1.\n\n\n\n\nBy \u2018transposition of Case\u2019 I intend:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "CaseTransp\n    <pat p1> <fn fail1>\n    <pat p2> <fn fail2>\n    ...\n    <fn succAll> -- not optional"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Failure at p#n means choose fail#n.\nSuccess at p#n means continue with p#(n+1).\n\nNote: <pat> are CPS constructs in the form of functions that can succeed or fail. <fail> and <succ> are ordinary functions."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655110249.993679",
        "reply_count": 8,
        "reply_users_count": 7,
        "latest_reply": "1655319943.485919",
        "reply_users": [
            "UC2A2ARPT",
            "U02M6PM725T",
            "UA14TGLTC",
            "UCUSW7WVD",
            "U016VUZGUUQ",
            "U02U0AS3J49",
            "U02E4DAQGSZ"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "C7004157-AEF3-48BB-BA43-951E4CCFAD16",
        "type": "message",
        "text": "I don't know what the acronym \"CPS\" stands for.",
        "user": "UC2A2ARPT",
        "ts": "1655125776.394849",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DR=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I"
                            },
                            {
                                "type": "text",
                                "text": " don't "
                            },
                            {
                                "type": "text",
                                "text": "know"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "what"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "the"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "acronym"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "\"CPS\""
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "stands"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "for."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655110249.993679",
        "parent_user_id": "U02M6PM725T"
    },
    {
        "client_msg_id": "6e117626-142b-4579-a970-05892e134c28",
        "type": "message",
        "text": "<@UC2A2ARPT> \u201cContinuation-Passing Style\u201d is the intention; didn\u2019t mean to be unclear, the first non-abbrevitated wording fell out during editing; now reintroduced! Thanks!\n\nAs an aside, there are two things that make CPS worthwhile and fun IMO:\n1. One can implement any control structure in any language that has first-class functions.\n2. CPS style is known to be mind-bening/not very readable, but can be turned the opposite using appropriate abstractions",
        "user": "U02M6PM725T",
        "ts": "1655127421.308969",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U02M6PM725T",
            "ts": "1655127552.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mL/d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " \u201cContinuation-Passing Style\u201d is the intention; didn\u2019t mean to be unclear, the first non-abbrevitated wording fell out during editing; now reintroduced! Thanks!\n\nAs an aside, there are two things that make CPS worthwhile and fun IMO:\n1. One can implement any control structure in any language that has first-class functions.\n2. CPS style is known to be mind-bening/not very readable, but can be turned the opposite using appropriate abstractions"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655110249.993679",
        "parent_user_id": "U02M6PM725T"
    },
    {
        "client_msg_id": "21649ec1-6b1b-4f3d-8193-78710a8640da",
        "type": "message",
        "text": "By \"can be turned the opposite using appropriate abstractions,\" what do mean?\n\nFor more everyday programmers, if you say Callback-Passing Style, they'll at least understand how (1) is obvious.\n\nAbout (2) as one who was mind-bent as a young person by, I honestly can't remember whats hard abou,t say, callcc now.",
        "user": "UA14TGLTC",
        "ts": "1655130830.013909",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6GsX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "By \"can be turned the opposite using appropriate abstractions,\" what do mean?\n\nFor more everyday programmers, if you say Callback-Passing Style, they'll at least understand how (1) is obvious.\n\nAbout (2) as one who was mind-bent as a young person by, I honestly can't remember whats hard abou,t say, callcc now."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655110249.993679",
        "parent_user_id": "U02M6PM725T"
    },
    {
        "client_msg_id": "8506aa45-229b-458b-aac5-aa4600cc18e6",
        "type": "message",
        "text": "<@UA14TGLTC> I'm jealous. My mind gets bent all over again, every time I go back to it after a few years. Perhaps I didn't get exposed to it while my mind was supple.",
        "user": "UCUSW7WVD",
        "ts": "1655132389.263069",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ypVL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " I'm jealous. My mind gets bent all over again, every time I go back to it after a few years. Perhaps I didn't get exposed to it while my mind was supple."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655110249.993679",
        "parent_user_id": "U02M6PM725T"
    },
    {
        "client_msg_id": "e9517495-363d-4ca2-b9c0-0fbd7fec39dc",
        "type": "message",
        "text": "I'm not sure a case expression or any derivatives thereof should so intimately involve a notion of \"failure\" or \"success\". From a mechanical standpoint, those are just human-friendly tags on regular ol' control flow paths. If you strip that away, the only difference I can see is that you've made the default case mandatory. If anything, I feel like you have syntactic sugar for a case expression where all cases but the default get wrapped in some domain-specific failure indicator.",
        "user": "U016VUZGUUQ",
        "ts": "1655144698.559329",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "yB2u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm not sure a case expression or any derivatives thereof should so intimately involve a notion of \"failure\" or \"success\". From a mechanical standpoint, those are just human-friendly tags on regular ol' control flow paths. If you strip that away, the only difference I can see is that you've made the default case mandatory. If anything, I feel like you have syntactic sugar for a case expression where all cases but the default get wrapped in some domain-specific failure indicator."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655110249.993679",
        "parent_user_id": "U02M6PM725T"
    },
    {
        "client_msg_id": "f25137d7-c765-46cc-a6ec-651f122401b2",
        "type": "message",
        "text": "I can see adding a keyword to let people avoid negating their patterns, if that is more convenient. I don't see a reason to enforce catchall. The coder might just prefer to state exhauative options negatively. I might just call it \"not case.\"",
        "user": "U02U0AS3J49",
        "ts": "1655145067.926699",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vziD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I can see adding a keyword to let people avoid negating their patterns, if that is more convenient. I don't see a reason to enforce catchall. The coder might just prefer to state exhauative options negatively. I might just call it \"not case.\""
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655110249.993679",
        "parent_user_id": "U02M6PM725T"
    },
    {
        "client_msg_id": "a58e00b0-874a-46aa-8425-d29295aad7f2",
        "type": "message",
        "text": "Case expressions and failure?  I think of destructuring  pattern matching.",
        "user": "UA14TGLTC",
        "ts": "1655181384.405829",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Omi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Case expressions and failure?  I think of destructuring  pattern matching."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655110249.993679",
        "parent_user_id": "U02M6PM725T"
    },
    {
        "client_msg_id": "77c2d02e-2128-469f-bfd5-8f9443835ef3",
        "type": "message",
        "text": "Seems similar to De Morgan's laws, whose generalizations are discussed here <https://en.wikipedia.org/wiki/De_Morgan%27s_laws#Generalising_De_Morgan_duality>",
        "user": "U02E4DAQGSZ",
        "ts": "1655319943.485919",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xXD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Seems similar to De Morgan's laws, whose generalizations are discussed here "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/De_Morgan%27s_laws#Generalising_De_Morgan_duality"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655110249.993679",
        "parent_user_id": "U02M6PM725T"
    }
]