[
    {
        "client_msg_id": "82a170c2-3417-46d2-9b67-30ca8f1f6036",
        "type": "message",
        "text": "People here often talk about creating programming languages to make programming easier. Going one level of abstraction up. Does anyone work on making a way to create new programming languages easier?",
        "user": "U03J1HP9C0G",
        "ts": "1654606915.995129",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XAJle",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "People here often talk about creating programming languages to make programming easier. Going one level of abstraction up. Does anyone work on making a way to create new programming languages easier?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1654606915.995129",
        "reply_count": 10,
        "reply_users_count": 6,
        "latest_reply": "1654755891.210059",
        "reply_users": [
            "U03J1HP9C0G",
            "UAJKEBGP8",
            "U013ZLJARC7",
            "UGWUJUZHT",
            "U71PMQ1V0",
            "UDQBTJ211"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "ee16a2fb-2b8b-4d8f-a52e-3750c4ba25a2",
        "type": "message",
        "text": "Let me also bundle this up with: Are there any innovative tools which make creating new languages easier?",
        "user": "U03J1HP9C0G",
        "ts": "1654606927.359069",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "FCWT9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Let me also bundle this up with: Are there any innovative tools which make creating new languages easier?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1654606915.995129",
        "parent_user_id": "U03J1HP9C0G"
    },
    {
        "client_msg_id": "02afc713-fd40-4ece-bede-7e4010584c9b",
        "type": "message",
        "text": "there\u2019s ohm\n\n\u2022 <https://github.com/harc/ohm>\n\u2022 <https://ohmjs.org/>",
        "user": "UAJKEBGP8",
        "ts": "1654607229.432319",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://ohmjs.org/",
                "service_icon": "https://ohmjs.org/img/favicon.ico",
                "id": 1,
                "original_url": "https://ohmjs.org/",
                "fallback": "Ohm: a user-friendly parsing toolkit for JavaScript and Typescript",
                "text": "Ohm is a parsing toolkit for JavaScript, consisting of a library and a domain-specific language. You can use it to parse custom file formats or quickly build parsers, interpreters, and compilers for programming languages.",
                "title": "Ohm: a user-friendly parsing toolkit for JavaScript and Typescript",
                "title_link": "https://ohmjs.org/",
                "service_name": "ohmjs.org"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Tq2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "there\u2019s ohm\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https://github.com/harc/ohm"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "link",
                                        "url": "https://ohmjs.org/"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "thread_ts": "1654606915.995129",
        "parent_user_id": "U03J1HP9C0G",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UGWUJUZHT",
                    "UML4ZEKDK",
                    "UA14TGLTC"
                ],
                "count": 3
            }
        ]
    },
    {
        "client_msg_id": "a53b51bc-51d0-40b6-83ec-078289ab9b39",
        "type": "message",
        "text": "Yeah, that's one of the main ideas behind <https://en.wikipedia.org/wiki/Language-oriented_programming|Language-oriented Programming>. The best language in which to make other languages at the moment is that team's main research vehicle, <https://racket-lang.org|Racket>.",
        "user": "U013ZLJARC7",
        "ts": "1654611251.479949",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gvv7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yeah, that's one of the main ideas behind "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Language-oriented_programming",
                                "text": "Language-oriented Programming"
                            },
                            {
                                "type": "text",
                                "text": ". The best language in which to make other languages at the moment is that team's main research vehicle, "
                            },
                            {
                                "type": "link",
                                "url": "https://racket-lang.org",
                                "text": "Racket"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1654606915.995129",
        "parent_user_id": "U03J1HP9C0G",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UML4ZEKDK",
                    "U03J1HP9C0G",
                    "U02E4DAQGSZ",
                    "UA14TGLTC"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "683ccd7d-72d3-40d4-8b3b-d49a9ee249be",
        "type": "message",
        "text": "The ability of PEG to specify matches of balanced brackets, allows one to think about languages differently, e.g. it is possible to imagine \u201clanguage stacks\u201d and \u201ctranspilers\u201d.\n\nBelow, a simple grammar in Ohm-JS that skips over anything that isn\u2019t a brace bracket...\n\n`main = matched main?`\n`matched =`\n  `| \"{\" main \"}\" -- nested`\n  `| anythingelse -- bottom`\n`anythingelse = ~\"{\" ~\"}\" any`",
        "user": "UGWUJUZHT",
        "ts": "1654612286.533349",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HfOc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The ability of PEG to specify matches of balanced brackets, allows one to think about languages differently, e.g. it is possible to imagine \u201clanguage stacks\u201d and \u201ctranspilers\u201d.\n\nBelow, a simple grammar in Ohm-JS that skips over anything that isn\u2019t a brace bracket...\n\n"
                            },
                            {
                                "type": "text",
                                "text": "main = matched main?",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "matched =",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "  | \"{\" main \"}\" -- nested",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "  | anythingelse -- bottom",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "anythingelse = ~\"{\" ~\"}\" any",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1654606915.995129",
        "parent_user_id": "U03J1HP9C0G"
    },
    {
        "client_msg_id": "3ff4cbc6-896c-4f7f-a9b6-4324d1ac35ef",
        "type": "message",
        "text": "Also <https://tratt.net/laurie/essays/entries/fast_enough_vms_in_fast_enough_time.html> and <https://www.graalvm.org/>",
        "user": "U71PMQ1V0",
        "ts": "1654613350.241989",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "q1qJz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also "
                            },
                            {
                                "type": "link",
                                "url": "https://tratt.net/laurie/essays/entries/fast_enough_vms_in_fast_enough_time.html"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "https://www.graalvm.org/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1654606915.995129",
        "parent_user_id": "U03J1HP9C0G"
    },
    {
        "client_msg_id": "b783d0d1-67fa-48fb-a85a-3b066050817e",
        "type": "message",
        "text": "Also <https://www.jetbrains.com/mps/|https://www.jetbrains.com/mps/>",
        "user": "UDQBTJ211",
        "ts": "1654614248.004009",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://www.jetbrains.com/mps/",
                "image_url": "https://resources.jetbrains.com/storage/products/mps/img/meta/preview.png",
                "image_width": 400,
                "image_height": 250,
                "image_bytes": 101453,
                "service_icon": "https://www.jetbrains.com/apple-touch-icon.png?r=1234",
                "id": 1,
                "original_url": "https://www.jetbrains.com/mps/",
                "fallback": "JetBrains: MPS: The Domain-Specific Language Creator by JetBrains",
                "text": "Use the MPS platform to create your own domain-specific language that speaks to your business needs.",
                "title": "MPS: The Domain-Specific Language Creator by JetBrains",
                "title_link": "https://www.jetbrains.com/mps/",
                "service_name": "JetBrains",
                "fields": [
                    {
                        "value": "Windows, macOS, Linux",
                        "title": "Platforms:",
                        "short": true
                    }
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3tS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Also "
                            },
                            {
                                "type": "link",
                                "url": "https://www.jetbrains.com/mps/",
                                "text": "https://www.jetbrains.com/mps/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1654606915.995129",
        "parent_user_id": "U03J1HP9C0G"
    },
    {
        "client_msg_id": "c6ababc4-1290-4427-9cea-d1cf59f8ce42",
        "type": "message",
        "text": "Thanks for many nice links (post more if possible). I wonder whether there is someone in this community who works on these or similar projects?",
        "user": "U03J1HP9C0G",
        "ts": "1654614528.238519",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5JSnW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thanks for many nice links (post more if possible). I wonder whether there is someone in this community who works on these or similar projects?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1654606915.995129",
        "parent_user_id": "U03J1HP9C0G"
    },
    {
        "client_msg_id": "fa2ae4e0-0032-42fa-a489-a6e9c73fc8ed",
        "type": "message",
        "text": "Is there a way to make visual programming languages with any of these tools?",
        "user": "U03J1HP9C0G",
        "ts": "1654614539.431509",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jXw9i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Is there a way to make visual programming languages with any of these tools?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1654606915.995129",
        "parent_user_id": "U03J1HP9C0G"
    },
    {
        "client_msg_id": "d65c75f2-3087-403c-b842-cf61eae3494d",
        "type": "message",
        "text": "a) I build DaS (Diagrams as Syntax) languages using Ohm-JS + SWIPL (PROLOG). If I liked writing nested-loops and exhaustive search, I would skip PROLOG and just use JS/Python/whatever.\n\nb) I have very strong opinions about VPLs.  #1 is that I stay away from VPLs and go for the middle road - a hybrid of text+diagrams+overlapping (anti-grid-based languages, like just about all text-based languages).  SVG seems to have more than what is needed (rects, ellipses, lines, text, (x,y)).  #2 is that you need to think 0D+Simultaneity (AKA Concurrency (0D == zero dependency)) to draw sensible diagrams of programs.\n\nc) No, I don\u2019t know of any IDE that makes VPL construction uncomplicated enough to use.  I roll my own.",
        "user": "UGWUJUZHT",
        "ts": "1654617718.749729",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5V9Jz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a) I build DaS (Diagrams as Syntax) languages using Ohm-JS + SWIPL (PROLOG). If I liked writing nested-loops and exhaustive search, I would skip PROLOG and just use JS/Python/whatever.\n\nb) I have very strong opinions about VPLs.  #1 is that I stay away from VPLs and go for the middle road - a hybrid of text+diagrams+overlapping (anti-grid-based languages, like just about all text-based languages).  SVG seems to have more than what is needed (rects, ellipses, lines, text, (x,y)).  #2 is that you need to think 0D+Simultaneity (AKA Concurrency (0D == zero dependency)) to draw sensible diagrams of programs.\n\nc) No, I don\u2019t know of any IDE that makes VPL construction uncomplicated enough to use.  I roll my own."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1654606915.995129",
        "parent_user_id": "U03J1HP9C0G"
    },
    {
        "client_msg_id": "c9a2f6fa-0ab3-4dfb-bb5c-24536e282774",
        "type": "message",
        "text": "Listening back to old episodes, caught Jason Brennan talking about his work on Beach, and it got me wondering, is there any work in the world of notebook-esc environments that plays with the infinite absolutely spaced canvas concept we've seen so much of recently? Is there any merit to moving such a tool off the y axis? Been daydreaming about a spatial and federated tool somewhere between observable and obsidian",
        "user": "U02PDVC9CNT",
        "ts": "1654624679.923069",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TXVip",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Listening back to old episodes, caught Jason Brennan talking about his work on Beach, and it got me wondering, is there any work in the world of notebook-esc environments that plays with the infinite absolutely spaced canvas concept we've seen so much of recently? Is there any merit to moving such a tool off the y axis? Been daydreaming about a spatial and federated tool somewhere between observable and obsidian"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1654624679.923069",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1654627370.096519",
        "reply_users": [
            "U016VUZGUUQ",
            "UAJKEBGP8"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "8560e0ea-2ed4-4075-9d26-c0d6afc96bbf",
        "type": "message",
        "text": "Consider the humble spreadsheet. :) My first thought was \"the y-axis sure is nice for showing dependency order, so you need to compensate for losing that\". In limited experience with IIRC Jupyter, I remember having to think a lot about cell dependencies and cache invalidation, which would have been prohibitive if the cells had been laid out in every direction. If all that stuff is automatic, then you can get away with making data flow less brutally visible.",
        "user": "U016VUZGUUQ",
        "ts": "1654626727.886749",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UwBh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Consider the humble spreadsheet. :) My first thought was \"the y-axis sure is nice for showing dependency order, so you need to compensate for losing that\". In limited experience with IIRC Jupyter, I remember having to think a lot about cell dependencies and cache invalidation, which would have been prohibitive if the cells had been laid out in every direction. If all that stuff is automatic, then you can get away with making data flow less brutally visible."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1654624679.923069",
        "parent_user_id": "U02PDVC9CNT"
    },
    {
        "client_msg_id": "5953d3d7-3e2c-4f3c-89fd-9db357462c7a",
        "type": "message",
        "text": "<http://natto.dev/> kinda?",
        "user": "UAJKEBGP8",
        "ts": "1654627370.096519",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "http://natto.dev/",
                "image_url": "https://natto.dev/twitter.png",
                "image_width": 500,
                "image_height": 250,
                "image_bytes": 25500,
                "service_icon": "https://natto.dev/favicon.png",
                "id": 1,
                "original_url": "http://natto.dev/",
                "fallback": "natto.dev - write JavaScript on a 2D canvas",
                "title": "natto.dev - write JavaScript on a 2D canvas",
                "title_link": "http://natto.dev/",
                "service_name": "natto.dev"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7jFT5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "http://natto.dev/"
                            },
                            {
                                "type": "text",
                                "text": " kinda?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1654624679.923069",
        "parent_user_id": "U02PDVC9CNT",
        "reactions": [
            {
                "name": "sunglasses",
                "users": [
                    "UA14TGLTC",
                    "U02PDVC9CNT"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "cd68ab50-9a37-453f-b1e1-6b211a33b65e",
        "type": "message",
        "text": "PLT circles are still mostly focused on the syntax + semantics approach that started in the 1960s, so anybody who wants to use non-syntactical notation is pretty much on their own. That said, the Racket people ship an IDE for the base language that's extensible enough to support projects like this:\n<https://dl.acm.org/doi/10.1145/3428290>",
        "user": "U013ZLJARC7",
        "ts": "1654755891.210059",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U013ZLJARC7",
            "ts": "1654789010.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=07Ab",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "PLT circles are still mostly focused on the syntax + semantics approach that started in the 1960s, so anybody who wants to use non-syntactical notation is pretty much on their own. That said, the Racket people ship an IDE for the base language that's extensible enough to support projects like this:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://dl.acm.org/doi/10.1145/3428290"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1654606915.995129",
        "parent_user_id": "U03J1HP9C0G",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "UML4ZEKDK",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    }
]