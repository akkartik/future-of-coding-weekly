[
    {
        "client_msg_id": "61f507d2-9dc2-4400-931d-18a52f123652",
        "type": "message",
        "text": "As a web dev I can't count the number of hours I've had to spend on re-loading a web page after an edit, and then clicking my way back to the state I'm actually trying to iterate on, even with hot module replacement enabled.\n\nAnyone know of visual programming projects where the user can execute their program, interact to change program state, pause program execution, edit the program to make changes, and then resume execution from that point on with a modified program?\n\nMy current thinking is that there's a lot of potential edge cases where the program could break or fail due to undefined semantics, but there could be a sweet-spot for doing minor edits and staying productive due to not having to restart the program from scratch. Hot module replacement has become widely used, but that's limited by having to do traditional text-based coding, and it's only able to replace code at the module level.\n\nI'll illustrate one use case where I think there's a good tradeoff between complexity and reward for the user:\n\u2022 Open a page in the product being coded in a VPL environment\n\u2022 Open some kind of overlay, e.g. a dialog\n\u2022 Pause the program\n\u2022 Tweak the appearance of the dialog while remaining in the context of the current program state\n\u2022 Add new UI elements to the dialog (non-breaking changes)\n\u2022 Resume the program",
        "user": "U03GBV8B58V",
        "ts": "1655305073.621509",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U03GBV8B58V",
            "ts": "1655305120.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1YhU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "As a web dev I can't count the number of hours I've had to spend on re-loading a web page after an edit, and then clicking my way back to the state I'm actually trying to iterate on, even with hot module replacement enabled.\n\nAnyone know of visual programming projects where the user can execute their program, interact to change program state, pause program execution, edit the program to make changes, and then resume execution from that point on with a modified program?\n\nMy current thinking is that there's a lot of potential edge cases where the program could break or fail due to undefined semantics, but there could be a sweet-spot for doing minor edits and staying productive due to not having to restart the program from scratch. Hot module replacement has become widely used, but that's limited by having to do traditional text-based coding, and it's only able to replace code at the module level.\n\nI'll illustrate one use case where I think there's a good tradeoff between complexity and reward for the user:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Open a page in the product being coded in a VPL environment"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Open some kind of overlay, e.g. a dialog"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Pause the program"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Tweak the appearance of the dialog while remaining in the context of the current program state"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Add new UI elements to the dialog (non-breaking changes)"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Resume the program"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "thread_ts": "1655305073.621509",
        "reply_count": 17,
        "reply_users_count": 5,
        "latest_reply": "1655631302.609289",
        "reply_users": [
            "U02E4DAQGSZ",
            "UC2A2ARPT",
            "U03GBV8B58V",
            "URKQXRCAC",
            "U0245E9RB2B"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "7f8b6b6b-049f-4d9d-8a0c-c5daa6e75871",
        "type": "message",
        "text": "yeah I literally just posted a livestream of me doing it. It uses observable that does hot-code reloading at a spreadsheet cell level <https://futureofcoding.slack.com/archives/CCL5VVBAN/p1655305481506719?thread_ts=1654599838.770959&amp;cid=CCL5VVBAN>",
        "user": "U02E4DAQGSZ",
        "ts": "1655305602.563279",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U02E4DAQGSZ",
            "ts": "1655305647.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B7Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah I literally just posted a livestream of me doing it. It uses observable that does hot-code reloading at a spreadsheet cell level "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/CCL5VVBAN/p1655305481506719?thread_ts=1654599838.770959&cid=CCL5VVBAN"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655305073.621509",
        "parent_user_id": "U03GBV8B58V",
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U03GBV8B58V"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "21c1c505-5b70-48ea-b412-f14ab1730dce",
        "type": "message",
        "text": "&gt; Anyone know of visual programming projects where the user can execute their program, interact to change program state, pause program execution, edit the program to make changes, and then resume execution from that point on with a modified program?\nI'd like that too. <https://ivanish.ca/hest-time-travel/>",
        "user": "UC2A2ARPT",
        "ts": "1655306408.939729",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "z3c=K",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Anyone know of visual programming projects where the user can execute their program, interact to change program state, pause program execution, edit the program to make changes, and then resume execution from that point on with a modified program?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI'd like that too. "
                            },
                            {
                                "type": "link",
                                "url": "https://ivanish.ca/hest-time-travel/"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655305073.621509",
        "parent_user_id": "U03GBV8B58V",
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U03GBV8B58V"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c7db7f98-f236-4e6d-9917-edfb4a4a46f2",
        "type": "message",
        "text": "<@UC2A2ARPT> time travel would be mind-blowing as well! Any recent developments since that blog post? I've seen <http://replay.io|replay.io> doing some cool things here, but they had to go to the browser runtime level to make it possible if I understand their approach correctly.",
        "user": "U03GBV8B58V",
        "ts": "1655306758.690539",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+=4VY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " time travel would be mind-blowing as well! Any recent developments since that blog post? I've seen "
                            },
                            {
                                "type": "link",
                                "url": "http://replay.io",
                                "text": "replay.io"
                            },
                            {
                                "type": "text",
                                "text": " doing some cool things here, but they had to go to the browser runtime level to make it possible if I understand their approach correctly."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655305073.621509",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "client_msg_id": "33355d9a-a640-484f-8e34-d71d12bc9e82",
        "type": "message",
        "text": "I did a fair bit more prototyping after that blog post, and discussed it in a <https://ivanish.ca/hest-podcast/|podcast mini-series>. The project is on hold right now because I need to take care of some other things at work. Planning to pick it up again around this time next year, but we'll see.",
        "user": "UC2A2ARPT",
        "ts": "1655306968.062899",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M+A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I did a fair bit more prototyping after that blog post, and discussed it in a "
                            },
                            {
                                "type": "link",
                                "url": "https://ivanish.ca/hest-podcast/",
                                "text": "podcast mini-series"
                            },
                            {
                                "type": "text",
                                "text": ". The project is on hold right now because I need to take care of some other things at work. Planning to pick it up again around this time next year, but we'll see."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655305073.621509",
        "parent_user_id": "U03GBV8B58V",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03GBV8B58V"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "8a8e54e1-f1ad-4ecb-b2d0-a6cf8f4cf94b",
        "type": "message",
        "text": "In your OP, you talked about a problem that comes up frequently in textual coding, but you specifically frame it with respect to visual programming. I'd love to know more about where your focus on visual programming comes from. Are you already using a VPL to do this sort of work?",
        "user": "UC2A2ARPT",
        "ts": "1655307168.216149",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RQg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "In your OP, you talked about a problem that comes up frequently in textual coding, but you specifically frame it with respect to visual programming. I'd love to know more about where your focus on visual programming comes from. Are you already using a VPL to do this sort of work?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655305073.621509",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "client_msg_id": "5367f77d-27e4-4e81-a6a9-755035a62046",
        "type": "message",
        "text": "Yep, working on visual programming for UX designers: <https://futureofcoding.slack.com/archives/CCL5VVBAN/p1653320954120799>",
        "user": "U03GBV8B58V",
        "ts": "1655307245.686039",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ItUOF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yep, working on visual programming for UX designers: "
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/CCL5VVBAN/p1653320954120799"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655305073.621509",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "type": "message",
        "text": "The canvas can be switched from edit-mode into play/interact mode. We'll be supporting editing though a play/pause kind of interaction along with a reset action to restart an artboard from the initial state.",
        "files": [
            {
                "id": "F03KCFZ17KR",
                "created": 1655307487,
                "timestamp": 1655307487,
                "name": "henosia-modals.mp4",
                "title": "henosia-modals.mp4",
                "mimetype": "video/mp4",
                "filetype": "mp4",
                "pretty_type": "MPEG 4 Video",
                "user": "U03GBV8B58V",
                "editable": false,
                "size": 25689023,
                "mode": "hosted",
                "is_external": false,
                "external_type": "",
                "is_public": true,
                "public_url_shared": false,
                "display_as_bot": false,
                "username": "",
                "transcription": {
                    "status": "none"
                },
                "mp4": "https://files.slack.com/files-tmb/T5TCAFTA9-F03KCFZ17KR-0d52b10c2a/henosia-modals.mp4",
                "url_private": "https://files.slack.com/files-tmb/T5TCAFTA9-F03KCFZ17KR-0d52b10c2a/henosia-modals.mp4",
                "url_private_download": "https://files.slack.com/files-pri/T5TCAFTA9-F03KCFZ17KR/download/henosia-modals.mp4",
                "hls": "https://files.slack.com/files-tmb/T5TCAFTA9-F03KCFZ17KR-0d52b10c2a/file.m3u8?_xcb=5c62f",
                "hls_embed": "data:application/vnd.apple.mpegurl;base64,I0VYVE0zVQojRVhULVgtVkVSU0lPTjozCiNFWFQtWC1JTkRFUEVOREVOVC1TRUdNRU5UUwojRVhULVgtU1RSRUFNLUlORjpCQU5EV0lEVEg9NDM1NDczLEFWRVJBR0UtQkFORFdJRFRIPTM3Mzk1NCxDT0RFQ1M9ImF2YzEuNjQwMDI4LG1wNGEuNDAuNSIsUkVTT0xVVElPTj0xOTIweDEwODAsRlJBTUUtUkFURT0yOS45NzAKZGF0YTphcHBsaWNhdGlvbi92bmQuYXBwbGUubXBlZ3VybDtiYXNlNjQsSTBWWVZFMHpWUW9qUlZoVUxWZ3RWa1ZTVTBsUFRqb3pDaU5GV0ZRdFdDMVVRVkpIUlZSRVZWSkJWRWxQVGpvM0NpTkZXRlF0V0MxTlJVUkpRUzFUUlZGVlJVNURSVG94Q2lORldGUXRXQzFRVEVGWlRFbFRWQzFVV1ZCRk9sWlBSQW9qUlZoVVNVNUdPall1TURBMkxBcG9kSFJ3Y3pvdkwyWnBiR1Z6TG5Oc1lXTnJMbU52YlM5bWFXeGxjeTEwYldJdlZEVlVRMEZHVkVFNUxVWXdNMHREUmxveE4wdFNMVEJrTlRKaU1UQmpNbUV2Wm1sc1pWOUlYekkyTkY4eE9USXdlREV3T0RCZk5qVXdNRXRDVUZOZk4xRldRbEpmTURBd01ERXVkSE1LSTBWWVZFbE9Sam8yTGpBd05pd0thSFIwY0hNNkx5OW1hV3hsY3k1emJHRmpheTVqYjIwdlptbHNaWE10ZEcxaUwxUTFWRU5CUmxSQk9TMUdNRE5MUTBaYU1UZExVaTB3WkRVeVlqRXdZekpoTDJacGJHVmZTRjh5TmpSZk1Ua3lNSGd4TURnd1h6WTFNREJMUWxCVFh6ZFJWa0pTWHpBd01EQXlMblJ6Q2lORldGUkpUa1k2Tmk0d01EWXNDbWgwZEhCek9pOHZabWxzWlhNdWMyeGhZMnN1WTI5dEwyWnBiR1Z6TFhSdFlpOVVOVlJEUVVaVVFUa3RSakF6UzBOR1dqRTNTMUl0TUdRMU1tSXhNR015WVM5bWFXeGxYMGhmTWpZMFh6RTVNakI0TVRBNE1GODJOVEF3UzBKUVUxODNVVlpDVWw4d01EQXdNeTUwY3dvalJWaFVTVTVHT2pZdU1EQTJMQXBvZEhSd2N6b3ZMMlpwYkdWekxuTnNZV05yTG1OdmJTOW1hV3hsY3kxMGJXSXZWRFZVUTBGR1ZFRTVMVVl3TTB0RFJsb3hOMHRTTFRCa05USmlNVEJqTW1FdlptbHNaVjlJWHpJMk5GOHhPVEl3ZURFd09EQmZOalV3TUV0Q1VGTmZOMUZXUWxKZk1EQXdNRFF1ZEhNS0kwVllWRWxPUmpvMkxqQXdOaXdLYUhSMGNITTZMeTltYVd4bGN5NXpiR0ZqYXk1amIyMHZabWxzWlhNdGRHMWlMMVExVkVOQlJsUkJPUzFHTUROTFEwWmFNVGRMVWkwd1pEVXlZakV3WXpKaEwyWnBiR1ZmU0Y4eU5qUmZNVGt5TUhneE1EZ3dYelkxTURCTFFsQlRYemRSVmtKU1h6QXdNREExTG5SekNpTkZXRlJKVGtZNk5pNHdNRFlzQ21oMGRIQnpPaTh2Wm1sc1pYTXVjMnhoWTJzdVkyOXRMMlpwYkdWekxYUnRZaTlVTlZSRFFVWlVRVGt0UmpBelMwTkdXakUzUzFJdE1HUTFNbUl4TUdNeVlTOW1hV3hsWDBoZk1qWTBYekU1TWpCNE1UQTRNRjgyTlRBd1MwSlFVMTgzVVZaQ1VsOHdNREF3Tmk1MGN3b2pSVmhVU1U1R09qVXVNREExTEFwb2RIUndjem92TDJacGJHVnpMbk5zWVdOckxtTnZiUzltYVd4bGN5MTBiV0l2VkRWVVEwRkdWRUU1TFVZd00wdERSbG94TjB0U0xUQmtOVEppTVRCak1tRXZabWxzWlY5SVh6STJORjh4T1RJd2VERXdPREJmTmpVd01FdENVRk5mTjFGV1FsSmZNREF3TURjdWRITUtJMFZZVkMxWUxVVk9SRXhKVTFRSwojRVhULVgtU1RSRUFNLUlORjpCQU5EV0lEVEg9MzA0NzU2LEFWRVJBR0UtQkFORFdJRFRIPTI3NTA0MCxDT0RFQ1M9ImF2YzEuNjQwMDFmLG1wNGEuNDAuNSIsUkVTT0xVVElPTj0xMjgweDcyMCxGUkFNRS1SQVRFPTI5Ljk3MApodHRwczovL2ZpbGVzLnNsYWNrLmNvbS9maWxlcy10bWIvVDVUQ0FGVEE5LUYwM0tDRloxN0tSLTBkNTJiMTBjMmEvZmlsZV9IXzI2NF8xMjgweDcyMF8zNTAwS0JQU183UVZCUi5tM3U4Cg==",
                "mp4_low": "https://files.slack.com/files-tmb/T5TCAFTA9-F03KCFZ17KR-0d52b10c2a/henosia-modals_trans.mp4",
                "duration_ms": 41041,
                "media_display_type": "video",
                "thumb_video": "https://files.slack.com/files-tmb/T5TCAFTA9-F03KCFZ17KR-0d52b10c2a/henosia-modals_thumb_video.jpeg",
                "thumb_video_w": 1920,
                "thumb_video_h": 1080,
                "permalink": "https://futureofcoding.slack.com/files/U03GBV8B58V/F03KCFZ17KR/henosia-modals.mp4",
                "permalink_public": "https://slack-files.com/T5TCAFTA9-F03KCFZ17KR-25ac9c561e",
                "is_starred": false,
                "has_rich_preview": false
            }
        ],
        "upload": false,
        "user": "U03GBV8B58V",
        "display_as_bot": false,
        "ts": "1655307514.440859",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "VQJBQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The canvas can be switched from edit-mode into play/interact mode. We'll be supporting editing though a play/pause kind of interaction along with a reset action to restart an artboard from the initial state."
                            }
                        ]
                    }
                ]
            }
        ],
        "client_msg_id": "04b19aa8-53d3-4cc2-a29d-8ae850d4ec6b",
        "thread_ts": "1655305073.621509",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "client_msg_id": "8e8dc69f-4d87-4657-b98d-77b384094310",
        "type": "message",
        "text": "Are there any IDE's that allow you to visually interleave the stack trace with debug output, so you get a picture of which frames the output occurred within?",
        "user": "ULM3U6275",
        "ts": "1655316367.875769",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A8UCg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Are there any IDE's that allow you to visually interleave the stack trace with debug output, so you get a picture of which frames the output occurred within?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655316367.875769",
        "reply_count": 8,
        "reply_users_count": 5,
        "latest_reply": "1655649065.646109",
        "reply_users": [
            "U02E4DAQGSZ",
            "UJBAJNFLK",
            "UCUSW7WVD",
            "UA14TGLTC",
            "UML4ZEKDK"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "03482f96-f125-416a-9e1d-f722f3807988",
        "type": "message",
        "text": "Observable manges to avoid the \"pause/play\" interaction by reactive hot-code reloading cells on any code change. It also avoids the switching between code and output by using per cells editors so its all interleaved in the same browser env. It is made for developing visualizations so it meets your criteria of being graphical (its by the creator of D3 to address the ergonomics of dataviz creation). This notebook is fairly mind blowing in its visual innovation <https://observablehq.com/@makio135/creative-coding>",
        "user": "U02E4DAQGSZ",
        "ts": "1655316431.735689",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2VH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Observable manges to avoid the \"pause/play\" interaction by reactive hot-code reloading cells on any code change. It also avoids the switching between code and output by using per cells editors so its all interleaved in the same browser env. It is made for developing visualizations so it meets your criteria of being graphical (its by the creator of D3 to address the ergonomics of dataviz creation). This notebook is fairly mind blowing in its visual innovation "
                            },
                            {
                                "type": "link",
                                "url": "https://observablehq.com/@makio135/creative-coding"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655305073.621509",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "client_msg_id": "75d320a9-4a17-442e-8e6e-e74abb04bded",
        "type": "message",
        "text": "Quoting myself from yesterday \"Observable is written in a notebook style where its divided into cells. The cells are great because, even though this cell was evaluated a while ago, we can inspect in our leisure the last value, so the program leaves a trace of its execution. The state of the cells are remembered. The fact that it remembers makes it very powerful for development.\"\n\nThanks to hot code reloading, in server programming, we can remember an incoming request in a cell THEN write the implementation AFTER we observe the schema in the external request. We can lazy code against reality, without waiting on fresh requests to arrive\n\n <https://youtu.be/5KxloAcMeSE?t=1307>",
        "user": "U02E4DAQGSZ",
        "ts": "1655317270.529749",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9qNr/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Quoting myself from yesterday \"Observable is written in a notebook style where its divided into cells. The cells are great because, even though this cell was evaluated a while ago, we can inspect in our leisure the last value, so the program leaves a trace of its execution. The state of the cells are remembered. The fact that it remembers makes it very powerful for development.\"\n\nThanks to hot code reloading, in server programming, we can remember an incoming request in a cell THEN write the implementation AFTER we observe the schema in the external request. We can lazy code against reality, without waiting on fresh requests to arrive\n\n "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/5KxloAcMeSE?t=1307"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655316367.875769",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "0E48DDE8-4B9C-4542-94FD-27F2A0D38297",
        "type": "message",
        "text": "<@ULM3U6275> If I understand your description correctly, any Smalltalk system qualifies.",
        "user": "UJBAJNFLK",
        "ts": "1655317871.367069",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kTAw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": " If"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "I"
                            },
                            {
                                "type": "text",
                                "text": " understand "
                            },
                            {
                                "type": "text",
                                "text": "your"
                            },
                            {
                                "type": "text",
                                "text": " description correctly"
                            },
                            {
                                "type": "text",
                                "text": ","
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "any"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "Smalltalk"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "system"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "qualifies."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655316367.875769",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            },
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "4bfeb942-ffa3-48f8-83e6-9b4fd38b80c0",
        "type": "message",
        "text": "<@U02E4DAQGSZ> Wow, that's a pretty wild demo of the capabilities :thumbsup:\n\nWith Observable the trigger to enter edit mode is focusing the code editor and typing. With a visual canvas, it's a single interaction target, so I don't see how we'd understand whether the user is looking to interact or edit without a toggle button for interact/edit mode. Still, that toggle button is only a single click, same as focusing/clicking in the code editor in Observable, so not a significant friction.",
        "user": "U03GBV8B58V",
        "ts": "1655319939.802819",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OYY0K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02E4DAQGSZ"
                            },
                            {
                                "type": "text",
                                "text": " Wow, that's a pretty wild demo of the capabilities "
                            },
                            {
                                "type": "emoji",
                                "name": "thumbsup",
                                "unicode": "1f44d"
                            },
                            {
                                "type": "text",
                                "text": "\n\nWith Observable the trigger to enter edit mode is focusing the code editor and typing. With a visual canvas, it's a single interaction target, so I don't see how we'd understand whether the user is looking to interact or edit without a toggle button for interact/edit mode. Still, that toggle button is only a single click, same as focusing/clicking in the code editor in Observable, so not a significant friction."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655305073.621509",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "client_msg_id": "5a0d0b48-0f30-4213-8c29-97eaf46c5d03",
        "type": "message",
        "text": "Oh I did not understand you meant against direct manipulation, wow, that sounds interesting! I see in your other thread you are struggling with determining the dependency graph over Typescript. I am fairly sure Observable uses Acorn because their early developer made the following notebook which I think hints at how they figured out cross references in their private compiler: <https://observablehq.com/@tmcw/notebook-distiller>\nThen they put all the cells in their open source runtime that does the auto-invalidation and recomputation.:- <https://github.com/observablehq/runtime>\nThere is a project trying to recreate the private compiler.",
        "user": "U02E4DAQGSZ",
        "ts": "1655320646.117589",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ea/Qu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh I did not understand you meant against direct manipulation, wow, that sounds interesting! I see in your other thread you are struggling with determining the dependency graph over Typescript. I am fairly sure Observable uses Acorn because their early developer made the following notebook which I think hints at how they figured out cross references in their private compiler: "
                            },
                            {
                                "type": "link",
                                "url": "https://observablehq.com/@tmcw/notebook-distiller"
                            },
                            {
                                "type": "text",
                                "text": "\nThen they put all the cells in their open source runtime that does the auto-invalidation and recomputation.:- "
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/observablehq/runtime"
                            },
                            {
                                "type": "text",
                                "text": "\nThere is a project trying to recreate the private compiler."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655305073.621509",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "client_msg_id": "df69722c-49cf-4010-b1df-7fcc3f0ecd96",
        "type": "message",
        "text": "<@U02E4DAQGSZ> That's really interesting(!) but feels slightly different. A stream of time-ordered output with stack frame attached, as opposed to the most recent execution of every possible stack frame, without time-ordering information. If I understand you correctly.\n\n<@UJBAJNFLK> what form of debug output are you thinking of in a Smalltalk program?\n\n<@ULM3U6275> it isn't an IDE, but I have this tiny framework for emitting logs with an associated stack depth, along with a tiny tool to zoom in and out of such logs. <https://git.sr.ht/~akkartik/basic-whitebox-test/tree/main/item/browse_trace/Readme.md> The basic idea is totally language agnostic. Debug by print on steroids.",
        "user": "UCUSW7WVD",
        "ts": "1655342627.852549",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6a1zw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02E4DAQGSZ"
                            },
                            {
                                "type": "text",
                                "text": " That's really interesting(!) but feels slightly different. A stream of time-ordered output with stack frame attached, as opposed to the most recent execution of every possible stack frame, without time-ordering information. If I understand you correctly.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " what form of debug output are you thinking of in a Smalltalk program?\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "ULM3U6275"
                            },
                            {
                                "type": "text",
                                "text": " it isn't an IDE, but I have this tiny framework for emitting logs with an associated stack depth, along with a tiny tool to zoom in and out of such logs. "
                            },
                            {
                                "type": "link",
                                "url": "https://git.sr.ht/~akkartik/basic-whitebox-test/tree/main/item/browse_trace/Readme.md"
                            },
                            {
                                "type": "text",
                                "text": " The basic idea is totally language agnostic. Debug by print on steroids."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655316367.875769",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "c11d6cfc-4db9-4c89-976b-db4304298438",
        "type": "message",
        "text": "<@UCUSW7WVD> I don't usually do \"debug output\" in Smalltalk. I just set a breakpoint and get the stack trace plus access to an inspector on all the data from the debugger.\nIf you want to do the traditional style of debug output, Smalltalk systems have the transcript tool for that. In older systems, it captures a character stream. In Pharo + Glamorous Toolkit, I can send arbitrary objects, including stack frames.\nThere's also the Beacon system (<https://github.com/pharo-project/pharo-beacon>), a framework specifically made for logging events, with stack frames if desired. You can even open a debugger from each stored stack frame.\nThe real message here is that Smalltalk provides (1) an extendable IDE and (2) full introspection on program execution. Capturing a stack frame is a pretty standard operation. The main barrier for newcomers is understanding what a stack frame is, not the technicalities of capturing it.",
        "user": "UJBAJNFLK",
        "ts": "1655366653.674489",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GBdoP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " I don't usually do \"debug output\" in Smalltalk. I just set a breakpoint and get the stack trace plus access to an inspector on all the data from the debugger.\nIf you want to do the traditional style of debug output, Smalltalk systems have the transcript tool for that. In older systems, it captures a character stream. In Pharo + Glamorous Toolkit, I can send arbitrary objects, including stack frames.\nThere's also the Beacon system ("
                            },
                            {
                                "type": "link",
                                "url": "https://github.com/pharo-project/pharo-beacon"
                            },
                            {
                                "type": "text",
                                "text": "), a framework specifically made for logging events, with stack frames if desired. You can even open a debugger from each stored stack frame.\nThe real message here is that Smalltalk provides (1) an extendable IDE and (2) full introspection on program execution. Capturing a stack frame is a pretty standard operation. The main barrier for newcomers is understanding what a stack frame is, not the technicalities of capturing it."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655316367.875769",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "U02E4DAQGSZ",
                    "UML4ZEKDK",
                    "UA14TGLTC"
                ],
                "count": 3
            },
            {
                "name": "+1::skin-tone-3",
                "users": [
                    "UCUSW7WVD",
                    "ULM3U6275"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "71bee189-8ae9-405d-953b-d5fa7898d491",
        "type": "message",
        "text": "<@U02E4DAQGSZ> Thanks, will take a look :slightly_smiling_face: And yes, it's interesting work, that's for sure!",
        "user": "U03GBV8B58V",
        "ts": "1655372016.939739",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oNb4s",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02E4DAQGSZ"
                            },
                            {
                                "type": "text",
                                "text": " Thanks, will take a look "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " And yes, it's interesting work, that's for sure!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655305073.621509",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "client_msg_id": "55A0EDE0-C7FE-4417-A1B9-11043028F75B",
        "type": "message",
        "text": "I\u2019m working on CodeParadise a Smalltalk web framework. It has a MVP model in which Views are WebComponents which will visually update (in all running sessions) as soon as its HTML or CSS is changed/saved. When View logic (written in Smalltalk) is changed, it gets installed in the running sessions as well. So the click handler can be changed while the dialog is already shown. All in Smalltalk style: direct manipulation of objects. I\u2019m preparing some demos and hope to share soon.",
        "user": "URKQXRCAC",
        "ts": "1655409680.233929",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "i0aC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019m"
                            },
                            {
                                "type": "text",
                                "text": " working "
                            },
                            {
                                "type": "text",
                                "text": "on"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "CodeParadise"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "a"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "Smalltalk"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "web"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "framework. It"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "has"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "a"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "MVP"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "model"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "in"
                            },
                            {
                                "type": "text",
                                "text": " which "
                            },
                            {
                                "type": "text",
                                "text": "Views"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "are"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "WebComponents"
                            },
                            {
                                "type": "text",
                                "text": " which "
                            },
                            {
                                "type": "text",
                                "text": "will"
                            },
                            {
                                "type": "text",
                                "text": " visually "
                            },
                            {
                                "type": "text",
                                "text": "update"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "(in"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "all"
                            },
                            {
                                "type": "text",
                                "text": " running "
                            },
                            {
                                "type": "text",
                                "text": "sessions)"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "as"
                            },
                            {
                                "type": "text",
                                "text": " soon "
                            },
                            {
                                "type": "text",
                                "text": "as"
                            },
                            {
                                "type": "text",
                                "text": " it"
                            },
                            {
                                "type": "text",
                                "text": "s"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "HTML"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "or"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "CSS"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "is"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "changed/saved. When"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "View"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "logic"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "(written"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "in"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "Smalltalk)"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "is"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "changed,"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "it"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "gets"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "installed"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "in"
                            },
                            {
                                "type": "text",
                                "text": " the running "
                            },
                            {
                                "type": "text",
                                "text": "sessions"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "as"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "well. So"
                            },
                            {
                                "type": "text",
                                "text": " t"
                            },
                            {
                                "type": "text",
                                "text": "he"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "click"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "handler"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "can"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "be"
                            },
                            {
                                "type": "text",
                                "text": " c"
                            },
                            {
                                "type": "text",
                                "text": "hanged"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "while"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "the"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "dialog"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "is"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "already"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "shown. All"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "in"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "Smalltalk"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "style:"
                            },
                            {
                                "type": "text",
                                "text": " direct "
                            },
                            {
                                "type": "text",
                                "text": "manipulation"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "of"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "objects. I\u2019m"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "preparing"
                            },
                            {
                                "type": "text",
                                "text": " some "
                            },
                            {
                                "type": "text",
                                "text": "demos"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "and"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "hope"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "to"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "share"
                            },
                            {
                                "type": "text",
                                "text": " soon"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655305073.621509",
        "parent_user_id": "U03GBV8B58V",
        "reactions": [
            {
                "name": "heart_eyes",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "584A4D9D-7185-46CB-A7AE-2C19CF5809B4",
        "type": "message",
        "text": "<https://github.com/ErikOnBike/CodeParadise|https://github.com/ErikOnBike/CodeParadise>",
        "user": "URKQXRCAC",
        "ts": "1655409748.365169",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kmmJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://github.com/ErikOnBike/CodeParadise",
                                "text": "https://github.com/ErikOnBike/CodeParadise"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655305073.621509",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "client_msg_id": "34a11441-592b-497d-a49a-7ab8cb05cef4",
        "type": "message",
        "text": "<@URKQXRCAC> Ah, that's pretty cool. If I understand correctly, the program modifications are taken care of by Smalltalk? Can you point to me any docs around how they manage this, and the limitations?",
        "user": "U03GBV8B58V",
        "ts": "1655449311.311409",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GODQZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "URKQXRCAC"
                            },
                            {
                                "type": "text",
                                "text": " Ah, that's pretty cool. If I understand correctly, the program modifications are taken care of by Smalltalk? Can you point to me any docs around how they manage this, and the limitations?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655305073.621509",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "client_msg_id": "87D0F1B1-1D59-47CC-BB3B-0FDDA87FCE1C",
        "type": "message",
        "text": "Hi <@U03GBV8B58V> Will reply later with more details (on mobile only atm). In part it's default Smalltalk behaviour to manipulate live objects in an image based environment in which both dev tools and business objects exist. In part it\u2019s my own code listening to relevant change announcements (events) in the code base.",
        "user": "URKQXRCAC",
        "ts": "1655485068.049099",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cul",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi "
                            },
                            {
                                "type": "user",
                                "user_id": "U03GBV8B58V"
                            },
                            {
                                "type": "text",
                                "text": " Will"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "reply"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "later"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "with"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "more"
                            },
                            {
                                "type": "text",
                                "text": " details "
                            },
                            {
                                "type": "text",
                                "text": "(on"
                            },
                            {
                                "type": "text",
                                "text": " mobile "
                            },
                            {
                                "type": "text",
                                "text": "only"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "atm). In"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "part"
                            },
                            {
                                "type": "text",
                                "text": " it's "
                            },
                            {
                                "type": "text",
                                "text": "default"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "Smalltalk"
                            },
                            {
                                "type": "text",
                                "text": " behaviour "
                            },
                            {
                                "type": "text",
                                "text": "to"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "manipulate"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "live"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "objects"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "in"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "an"
                            },
                            {
                                "type": "text",
                                "text": " image "
                            },
                            {
                                "type": "text",
                                "text": "based"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "environment"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "in"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "which"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "both"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "dev"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "tools"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "and"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "business"
                            },
                            {
                                "type": "text",
                                "text": " objects "
                            },
                            {
                                "type": "text",
                                "text": "exist. In"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "part"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "it\u2019s"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "my"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "own"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "code"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "listening"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "to"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "relevant"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "change"
                            },
                            {
                                "type": "text",
                                "text": " announcements "
                            },
                            {
                                "type": "text",
                                "text": "(events)"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "in"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "the"
                            },
                            {
                                "type": "text",
                                "text": " code base"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655305073.621509",
        "parent_user_id": "U03GBV8B58V",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U03GBV8B58V",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "6188b773-7e54-4133-b64b-138dd9d2d44c",
        "type": "message",
        "text": "I'd say that images are the most surprising thing for people new to Smalltalk (and some Lisps).  Instead of running a program, you think of having a long lived environment with a bunch of stuff in it.  In practice, messy people like me end up ruining their image after a while.  But this isn't an intrinsic limitation of the approach.  Nothing prevents adding isolation, revision. sharing, and features to an image-based system.  I'm mostly surprised it hasn't been explored more.",
        "user": "UA14TGLTC",
        "ts": "1655611734.745419",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "P7x1I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd say that images are the most surprising thing for people new to Smalltalk (and some Lisps).  Instead of running a program, you think of having a long lived environment with a bunch of stuff in it.  In practice, messy people like me end up ruining their image after a while.  But this isn't an intrinsic limitation of the approach.  Nothing prevents adding isolation, revision. sharing, and features to an image-based system.  I'm mostly surprised it hasn't been explored more."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655316367.875769",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "point_up",
                "users": [
                    "ULM3U6275"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ab71f753-7676-49c8-9eca-63c6fbba427c",
        "type": "message",
        "text": "One of the talks from hytradboi had a proposal for this:\n<https://www.hytradboi.com/2022/building-data-centric-apps-with-a-reactive-relational-database|https://www.hytradboi.com/2022/building-data-centric-apps-with-a-reactive-relational-database>\n\nIf literally everything including the current UI state is in a database, then you can stop your solution and start it up again exactly where you left off.\n\nIf the database supports time travel, you could also debug the application by re-running exactly what happened.\n\n<@UCDBW1H26> was one of the authors (not sure if the others are in this Slack).",
        "user": "U0245E9RB2B",
        "ts": "1655627389.911559",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U0245E9RB2B",
            "ts": "1655627528.000000"
        },
        "attachments": [
            {
                "from_url": "https://www.hytradboi.com/2022/building-data-centric-apps-with-a-reactive-relational-database",
                "thumb_url": "https://vz-91010fda-7e7.b-cdn.net/75656531-da49-4bb6-ad3c-5e833d53296b/thumbnail.jpg",
                "thumb_width": 1920,
                "thumb_height": 1080,
                "image_url": "https://vz-91010fda-7e7.b-cdn.net/75656531-da49-4bb6-ad3c-5e833d53296b/thumbnail.jpg",
                "image_width": 1920,
                "image_height": 1080,
                "image_bytes": 95873,
                "id": 1,
                "original_url": "https://www.hytradboi.com/2022/building-data-centric-apps-with-a-reactive-relational-database",
                "fallback": "Building data-centric apps with a reactive relational database",
                "title": "Building data-centric apps with a reactive relational database",
                "title_link": "https://www.hytradboi.com/2022/building-data-centric-apps-with-a-reactive-relational-database",
                "service_name": "hytradboi.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d8DY6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One of the talks from hytradboi had a proposal for this:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.hytradboi.com/2022/building-data-centric-apps-with-a-reactive-relational-database",
                                "text": "https://www.hytradboi.com/2022/building-data-centric-apps-with-a-reactive-relational-database"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIf literally everything including the current UI state is in a database, then you can stop your solution and start it up again exactly where you left off.\n\nIf the database supports time travel, you could also debug the application by re-running exactly what happened.\n\n"
                            },
                            {
                                "type": "user",
                                "user_id": "UCDBW1H26"
                            },
                            {
                                "type": "text",
                                "text": " was one of the authors (not sure if the others are in this Slack)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655305073.621509",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "client_msg_id": "0bdb1bcb-681c-40d3-b05f-5350bb52bfeb",
        "type": "message",
        "text": "<@U0245E9RB2B> Thanks for the link :slightly_smiling_face: That's a really cool way to approach state persistence!",
        "user": "U03GBV8B58V",
        "ts": "1655631302.609289",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "y82",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U0245E9RB2B"
                            },
                            {
                                "type": "text",
                                "text": " Thanks for the link "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " That's a really cool way to approach state persistence!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655305073.621509",
        "parent_user_id": "U03GBV8B58V"
    },
    {
        "client_msg_id": "f8f391b2-7862-459e-8df1-06db55554384",
        "type": "message",
        "text": "<@UA14TGLTC> My impression is that what you describe is exactly how most Smalltalkers work today. It's certainly how I work today. My startup configuration file loads all my projects that are not already in the image. Which means that I can start up a fresh image with very little effort. And I end up doing that about once a week. Not necessarily because I messed up my image (though that happens), the main reason is staying up to date with Glamorous Toolkit development.\nFrom that point of view, the image is more like a cache than persistent system state. In line with that view, I don't back up my images, as they are not really valuable. The persistent version of my code resides in Git repositories, just like with code in any other language.",
        "user": "UJBAJNFLK",
        "ts": "1655632704.550559",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NKn2",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UA14TGLTC"
                            },
                            {
                                "type": "text",
                                "text": " My impression is that what you describe is exactly how most Smalltalkers work today. It's certainly how I work today. My startup configuration file loads all my projects that are not already in the image. Which means that I can start up a fresh image with very little effort. And I end up doing that about once a week. Not necessarily because I messed up my image (though that happens), the main reason is staying up to date with Glamorous Toolkit development.\nFrom that point of view, the image is more like a cache than persistent system state. In line with that view, I don't back up my images, as they are not really valuable. The persistent version of my code resides in Git repositories, just like with code in any other language."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655316367.875769",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UML4ZEKDK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "ced60fc9-5d21-4b29-b7a0-65d3bf91d72c",
        "type": "message",
        "text": "Wow, pointers appreciated on how to maintain the startup configuration. Are you doing double work for every mutation?",
        "user": "UCUSW7WVD",
        "ts": "1655633928.970809",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UUI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Wow, pointers appreciated on how to maintain the startup configuration. Are you doing double work for every mutation?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655316367.875769",
        "parent_user_id": "ULM3U6275"
    },
    {
        "client_msg_id": "DC276B7B-BDAD-445F-BCA5-D7133C4752F9",
        "type": "message",
        "text": "<@UCUSW7WVD> This booklet on managing code with Iceberg may help: <http://books.pharo.org/booklet-ManageCode/pdf/2020-05-12-ManageCode.pdf|http://books.pharo.org/booklet-ManageCode/pdf/2020-05-12-ManageCode.pdf>\n\nThere's no double work really\u2026 You make your changes inside the image. If it's something you want to preserve, you commit it via Iceberg and associated tools, which automatically snapshot the modified modules as text files and commit those to Git. The image startup configuration is a list of module repos and commit IDs, which recreates the image state from the Git committed snapshots.",
        "user": "UML4ZEKDK",
        "ts": "1655649065.646109",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CIy",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCUSW7WVD"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "This"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "booklet"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "on"
                            },
                            {
                                "type": "text",
                                "text": " managing "
                            },
                            {
                                "type": "text",
                                "text": "code"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "with"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "Iceberg"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "may"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "help:"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "http://books.pharo.org/booklet-ManageCode/pdf/2020-05-12-ManageCode.pdf",
                                "text": "http://books.pharo.org/booklet-ManageCode/pdf/2020-05-12-ManageCode.pdf"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\nThere's "
                            },
                            {
                                "type": "text",
                                "text": "no"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "double"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "work"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "really\u2026"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "You"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "make"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "your"
                            },
                            {
                                "type": "text",
                                "text": " changes "
                            },
                            {
                                "type": "text",
                                "text": "inside"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "the"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "image."
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "If"
                            },
                            {
                                "type": "text",
                                "text": " it's something "
                            },
                            {
                                "type": "text",
                                "text": "you"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "want"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "to"
                            },
                            {
                                "type": "text",
                                "text": " preserve"
                            },
                            {
                                "type": "text",
                                "text": ","
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "you"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "commit"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "it"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "via"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "Iceberg"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "and"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "associated"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "tools,"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "which"
                            },
                            {
                                "type": "text",
                                "text": " automatically "
                            },
                            {
                                "type": "text",
                                "text": "snapshot"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "the"
                            },
                            {
                                "type": "text",
                                "text": " modified modules "
                            },
                            {
                                "type": "text",
                                "text": "as"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "text"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "files"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "and"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "commit"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "those"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "to"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "Git."
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "The"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "image"
                            },
                            {
                                "type": "text",
                                "text": " startup configuration "
                            },
                            {
                                "type": "text",
                                "text": "is"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "a"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "list"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "of"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "module"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "repos"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "and"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "commit"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "IDs,"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "which"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "recreates"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "the"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "image"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "state"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "from"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "the"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "Git"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "committed"
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "snapshots."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1655316367.875769",
        "parent_user_id": "ULM3U6275",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCUSW7WVD"
                ],
                "count": 1
            }
        ]
    }
]