[
    {
        "client_msg_id": "0208948a-18d6-455a-9698-7709dcffaea9",
        "type": "message",
        "text": "A lot of us here have projects that we are working on. Or ideas we'd like to see become reality.\n\nBut I'd bet that many of us feel we haven't been able to get things to be the way we want them. Maybe we make prototypes and they fall short of our goals. Maybe we can't express our ideas well enough. Maybe we never put the ideas in any tangible form. \n\nI'm curious about everyone's thoughts on if there is something that could be done about that. Could we as a community help? Is there a structure that you think would help? A societal change? A personal change?",
        "user": "UK3LH8CF5",
        "ts": "1658960681.747419",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mgZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A lot of us here have projects that we are working on. Or ideas we'd like to see become reality.\n\nBut I'd bet that many of us feel we haven't been able to get things to be the way we want them. Maybe we make prototypes and they fall short of our goals. Maybe we can't express our ideas well enough. Maybe we never put the ideas in any tangible form. \n\nI'm curious about everyone's thoughts on if there is something that could be done about that. Could we as a community help? Is there a structure that you think would help? A societal change? A personal change?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658960681.747419",
        "reply_count": 13,
        "reply_users_count": 8,
        "latest_reply": "1659049090.517109",
        "reply_users": [
            "USH01JEDQ",
            "U03CEGR3HSL",
            "UCGAK10LS",
            "U01HKV85Y1J",
            "U02028JHX37",
            "U03FB52A4FR",
            "U02PDVC9CNT",
            "UBN9AFS0N"
        ],
        "is_locked": false,
        "subscribed": true,
        "last_read": "1659049090.517109"
    },
    {
        "client_msg_id": "9b36a641-a8ad-4621-82c5-412ac56dec0d",
        "type": "message",
        "text": "\"Willing into the world\" is a rich vein\n\nAs a writer (er, writing type, as I am not a productive writer), words come immediately to mind \u2013 I know many of us take private notes, and feel in those a power that coalesces energies \u2013 words themselves have a summoning power \u2013 they build a trail, sometimes in front of us, sometimes breadcrumbs, of what we intended and might actually still do\n\nRelated tangent \u2013 I've wondered if there should be a much wider notion of \"two-minute-week\" \u2013 for instance, I'm not ready to post videos and show+tell \u2013 but would I post a little microblog update? No, because I'll just end up talking in a private sort of language that no one understands. But should I do that anyway?\n\nThink about the original twitter status update, how it was a still-undefined format. Lunch and what's on tv and headed out and reading X, all became the first announcements. There weren't pictures of peoples' lunches back then!\n\nWould it be bad to post something here in one's own private sort of language? Could it still bear fruit? \"I'm adding [complex whatsit] to the [no idea] area of [unannounced project]. Feeling stuck with [phrase you might actually be able to parse and mention something for].\"",
        "user": "USH01JEDQ",
        "ts": "1658962732.343429",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9b4O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Willing into the world\" is a rich vein\n\nAs a writer (er, writing type, as I am not a productive writer), words come immediately to mind \u2013 I know many of us take private notes, and feel in those a power that coalesces energies \u2013 words themselves have a summoning power \u2013 they build a trail, sometimes in front of us, sometimes breadcrumbs, of what we intended and might actually still do\n\nRelated tangent \u2013 I've wondered if there should be a much wider notion of \"two-minute-week\" \u2013 for instance, I'm not ready to post videos and show+tell \u2013 but would I post a little microblog update? No, because I'll just end up talking in a private sort of language that no one understands. But should I do that anyway?\n\nThink about the original twitter status update, how it was a still-undefined format. Lunch and what's on tv and headed out and reading X, all became the first announcements. There weren't pictures of peoples' lunches back then!\n\nWould it be bad to post something here in one's own private sort of language? Could it still bear fruit? \"I'm adding [complex whatsit] to the [no idea] area of [unannounced project]. Feeling stuck with [phrase you might actually be able to parse and mention something for].\""
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5",
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "UJZS8UUJV"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "a7e68aae-e3b4-4309-8444-18b65e1dc403",
        "type": "message",
        "text": "For me, personally, one of my biggest obstacles is the general lack of guaranteed proper tail calls in most programming language implementations.\n\nThere's work on getting them added to WebAssembly, but I cannot grasp why they weren't there to begin with.\n\nThey were added to JavaScript, but they are not widely implemented.\n\nAnd the languages that otherwise might function as portable assembly, such as C and Rust, have no intention of adding them.\n\nI cannot grasp why anyone would ever want to create a new language without tail calls, and yet following the programming news one constantly sees people announcing new languages that they somehow believe are better than what already exists even though they have the same limitations around flow control as most other languages since Algol 60.\n\nThe biggest thing I would ask of the community is to join me in lobbying every single language creator to PUT PROPER TAIL CALLS INTO THEIR LANGUAGES RIGHT FROM THE BEGINNING!\n\nAnd yes, it needs to be right from the beginning, because if you don't plan for it you will create a design that makes it very difficult to add later.",
        "user": "U03CEGR3HSL",
        "ts": "1658964048.634859",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "IrvFp",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For me, personally, one of my biggest obstacles is the general lack of guaranteed proper tail calls in most programming language implementations.\n\nThere's work on getting them added to WebAssembly, but I cannot grasp why they weren't there to begin with.\n\nThey were added to JavaScript, but they are not widely implemented.\n\nAnd the languages that otherwise might function as portable assembly, such as C and Rust, have no intention of adding them.\n\nI cannot grasp why anyone would ever want to create a new language without tail calls, and yet following the programming news one constantly sees people announcing new languages that they somehow believe are better than what already exists even though they have the same limitations around flow control as most other languages since Algol 60.\n\nThe biggest thing I would ask of the community is to join me in lobbying every single language creator to PUT PROPER TAIL CALLS INTO THEIR LANGUAGES RIGHT FROM THE BEGINNING!\n\nAnd yes, it needs to be right from the beginning, because if you don't plan for it you will create a design that makes it very difficult to add later."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7"
                ],
                "count": 1
            },
            {
                "name": "clap",
                "users": [
                    "U03B14DUZSA"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "760f3814-f8b4-485d-8a97-50a109beb58b",
        "type": "message",
        "text": "<@UK3LH8CF5> For me, a good first step would be to put together a \"design team\" that can butt heads and figure out the right design for a future programming system. The team would consist of people who are willing and _able_ to work full-time (or thereabouts) on building the FoC, whilst being self-funded (i.e. unpaid) and perhaps eventually crowdfunded.\n\nThis is the only format (apart from a company) in which I can see a collaborative effort succeeding. We need to bring people who have the time to _work deeply_ on the problem into the same room (or at least, the same Zoom).",
        "user": "UCGAK10LS",
        "ts": "1658969197.697569",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rUI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UK3LH8CF5"
                            },
                            {
                                "type": "text",
                                "text": " For me, a good first step would be to put together a \"design team\" that can butt heads and figure out the right design for a future programming system. The team would consist of people who are willing and "
                            },
                            {
                                "type": "text",
                                "text": "able",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to work full-time (or thereabouts) on building the FoC, whilst being self-funded (i.e. unpaid) and perhaps eventually crowdfunded.\n\nThis is the only format (apart from a company) in which I can see a collaborative effort succeeding. We need to bring people who have the time to "
                            },
                            {
                                "type": "text",
                                "text": "work deeply",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " on the problem into the same room (or at least, the same Zoom)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5"
    },
    {
        "client_msg_id": "b4455adf-c781-48f6-b710-bcce320df106",
        "type": "message",
        "text": "completely agree re: needing people who are able to work deeply\n\nin a post-capitalist world, this would in theory be pretty straight-forward (depending on where we land post-capitalism). but here in capitalist-land, we do have the crowdfunding route as an option. not a great one, but it has occasionally worked.",
        "user": "U01HKV85Y1J",
        "ts": "1658990527.532069",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "90DG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "completely agree re: needing people who are able to work deeply\n\nin a post-capitalist world, this would in theory be pretty straight-forward (depending on where we land post-capitalism). but here in capitalist-land, we do have the crowdfunding route as an option. not a great one, but it has occasionally worked."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U014WA16VNJ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9af18791-fe41-4a9e-b506-b2d4407848ea",
        "type": "message",
        "text": "I don\u2019t think that not succeeding is bad. It has the potential to start an experimental creative cycle:\n1. Choose or create a \u201ccybernetic environment\u201d (environment capable of running programs).\n2. Make some (even small) experiments inside it \uff0dfirst, define their ideal form, then implement them. Involving wider spectrum of people is encouraged.\n3. Analyze the shortcomings of the implementations w.r.t. the idealized versions. What aspects of the environment were limiting?\n4. Create a better environment. Repeat.",
        "user": "U02028JHX37",
        "ts": "1658991811.589559",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1npJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don\u2019t think that not succeeding is bad. It has the potential to start an experimental creative cycle:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Choose or create a \u201ccybernetic environment\u201d (environment capable of running programs)."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Make some (even small) experiments inside it \uff0dfirst, define their ideal form, then implement them. Involving wider spectrum of people is encouraged."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Analyze the shortcomings of the implementations w.r.t. the idealized versions. What aspects of the environment were limiting?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Create a better environment. Repeat."
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ],
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5"
    },
    {
        "client_msg_id": "fea0359e-7827-47cb-afe3-e3d8882f9795",
        "type": "message",
        "text": "Smalltalk was meant to be such an environment, but as Alan Kay reported (regretfully): \u201cSmalltalk stopped changing\u201d \uff0dmeaning that people continued to do \u201cexperiments\u201d (in this case, production-level programs), but stopped analyzing them w.r.t. the environment.",
        "user": "U02028JHX37",
        "ts": "1658991938.498959",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4BP",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Smalltalk was meant to be such an environment, but as Alan Kay reported (regretfully): \u201cSmalltalk stopped changing\u201d \uff0dmeaning that people continued to do \u201cexperiments\u201d (in this case, production-level programs), but stopped analyzing them w.r.t. the environment."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5"
    },
    {
        "client_msg_id": "13ae8b9c-e25e-4b76-8b65-25099f7e1346",
        "type": "message",
        "text": "A place like Recurse Center with a stipend.  2 - 6 months of solo work would be enough time to prototype virtually anything.  I think everyone here just needs more time to work and it's difficult to do that with a day job/family/financial obligations.",
        "user": "U03FB52A4FR",
        "ts": "1658997338.356499",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Neuqq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A place like Recurse Center with a stipend.  2 - 6 months of solo work would be enough time to prototype virtually anything.  I think everyone here just needs more time to work and it's difficult to do that with a day job/family/financial obligations."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5"
    },
    {
        "client_msg_id": "5e1c0aea-6458-4652-8bf3-eb067e1965a1",
        "type": "message",
        "text": "2 - 6 months is enough time to develop a prototype if you already know what needs to be built. But that's not the problem I (and many others) have. The problem is _figuring out_ what needs to be built \u2014 design work, rather than \"coding\" work. Finding the right design for a programming environment could take _years_ (evidence: I've already spent several years on this, and <@U6KQ2S410> has spent several decades). A small fraction of that time would be coding, but most of it would be designing. IMO design work is the main thing our community should aim to support.",
        "user": "UCGAK10LS",
        "ts": "1658998126.031659",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5/m=q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "2 - 6 months is enough time to develop a prototype if you already know what needs to be built. But that's not the problem I (and many others) have. The problem is "
                            },
                            {
                                "type": "text",
                                "text": "figuring out",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " what needs to be built \u2014 design work, rather than \"coding\" work. Finding the right design for a programming environment could take "
                            },
                            {
                                "type": "text",
                                "text": "years",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (evidence: I've already spent several years on this, and "
                            },
                            {
                                "type": "user",
                                "user_id": "U6KQ2S410"
                            },
                            {
                                "type": "text",
                                "text": " has spent several decades). A small fraction of that time would be coding, but most of it would be designing. IMO design work is the main thing our community should aim to support."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5"
    },
    {
        "client_msg_id": "bb6061a5-9fdb-4b3d-b8a2-1804e5bc7344",
        "type": "message",
        "text": "<@UCGAK10LS> I think that it's not necessary to get stuck on environment design right away (perfect is one of the enemies of WIAN). It's better to just get started with a suboptimal environment, then identify it's (concrete) limitations and fix those. After a while, some of the design will fall out for free out of the experience - at which point, one can rethink the environment to increase its cohesion.",
        "user": "U02028JHX37",
        "ts": "1659013950.493349",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2Kn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " I think that it's not necessary to get stuck on environment design right away (perfect is one of the enemies of WIAN). It's better to just get started with a suboptimal environment, then identify it's (concrete) limitations and fix those. After a while, some of the design will fall out for free out of the experience - at which point, one can rethink the environment to increase its cohesion."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U03RH5DFJ57"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "88701355-3639-433d-9532-eb5b4488e6e8",
        "type": "message",
        "text": "something my art/tech friends and I do that helps us move from idea -&gt; prototype -&gt; more has been a pretty banal but powerful ritual we call story club. At the basis, a weekly zoom share out of a story (read: really anything, big or small, that exists in a sharable state) from everyone there that the only requirement for is that it was worked on inside that week. Then everyone goes around and shares an inspiratory item/idea that they found that week, with the goal being to spark discussion and to bring ideas to the front of mind for the following weeks work. Recently we have been making every other weeks meeting a working meeting, gathering in my apartment a few hours before the call for breakfast and to work in tandem.\n\nThat\u2019s all to say, I\u2019d love to see something similar in this space, and I understand that FoC projects do require a good bit of thought/execution time, maybe such a club could put people into a place where they could then go to recurse and run up a pretty legit prototype",
        "user": "U02PDVC9CNT",
        "ts": "1659015654.133049",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "B46",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "something my art/tech friends and I do that helps us move from idea -> prototype -> more has been a pretty banal but powerful ritual we call story club. At the basis, a weekly zoom share out of a story (read: really anything, big or small, that exists in a sharable state) from everyone there that the only requirement for is that it was worked on inside that week. Then everyone goes around and shares an inspiratory item/idea that they found that week, with the goal being to spark discussion and to bring ideas to the front of mind for the following weeks work. Recently we have been making every other weeks meeting a working meeting, gathering in my apartment a few hours before the call for breakfast and to work in tandem.\n\nThat\u2019s all to say, I\u2019d love to see something similar in this space, and I understand that FoC projects do require a good bit of thought/execution time, maybe such a club could put people into a place where they could then go to recurse and run up a pretty legit prototype"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5"
    },
    {
        "client_msg_id": "ea3b385f-07dd-431d-a129-a0b2e0d93ac1",
        "type": "message",
        "text": "<@U02PDVC9CNT> which changes would be required to <#C0120A3L30R|two-minute-week> to be closer to what you describe?",
        "user": "UBN9AFS0N",
        "ts": "1659015936.984039",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "M/j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02PDVC9CNT"
                            },
                            {
                                "type": "text",
                                "text": " which changes would be required to "
                            },
                            {
                                "type": "channel",
                                "channel_id": "C0120A3L30R"
                            },
                            {
                                "type": "text",
                                "text": " to be closer to what you describe?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5"
    },
    {
        "client_msg_id": "1c3d7d5c-539c-44be-b636-3d3210756e07",
        "type": "message",
        "text": "I think an element of synchronicity, maybe a sort of historic sharing log, some sort of template of [shared thing: thing, inspiring object: thing]. Maybe a record of projects shared with their entries, allowing folks to see what other people are working on and the progress made. Maybe an associated gather/zoom setup could be helpful for working days",
        "user": "U02PDVC9CNT",
        "ts": "1659019540.405749",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7Mvjq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think an element of synchronicity, maybe a sort of historic sharing log, some sort of template of [shared thing: thing, inspiring object: thing]. Maybe a record of projects shared with their entries, allowing folks to see what other people are working on and the progress made. Maybe an associated gather/zoom setup could be helpful for working days"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5"
    },
    {
        "client_msg_id": "680F6577-58DC-4472-A8DA-0C72E9365E9D",
        "type": "message",
        "text": "I\u2019m writing a paper on the notion of \u201cdigital objects\u201d and would _seriously_ appreciate any papers/sources that explore this idea (the notion of digital \u201cthings\u201d in general, not OOP-specific). The notion of an \u201cobject\u201d is one of the most basic and fundamental ideas in philosophy and it has received surprisingly few treatments in the context of computing given its importance. \n\nI have many thoughts on the significance of the question, and have developed a tentative theory of digital objects that I think is well supported and useful. But at the moment I\u2019m just trying to gather more literature and perspectives (as in, _your perspectives!)_.\n\nA few related phrasings to the question that I\u2019ve seen around: In what ways do digital things exist? What is the nature of digital \u201cstuff\u201d, What defines a computational entity?, etc. While \u201cobject\u201d is really the proper term here, there are others that get used often like entity, item, thing, or unit.\n\nSome sources that explore this question:\n<https://firstmonday.org/ojs/index.php/fm/article/view/3033/2564|A theory of digital objects>\n<https://www.upress.umn.edu/book-division/books/on-the-existence-of-digital-objects|On the existence of digital objects>\n<https://web.p.ebscohost.com/abstract?direct=true&amp;profile=ehost&amp;scope=site&amp;authtype=crawler&amp;jrnl=02767783&amp;AN=141906418&amp;h=1gY%2bZWdrqJ%2bzDGGlCqqjp1Khf2LKSNFhTdz8biZlD5L%2faPuiaHTRwlWtEQS32sXaipdz2Yq50hc3bqOhGMkcRQ%3d%3d&amp;crl=c&amp;resultNs=AdminWebAuth&amp;resultLocal=ErrCrlNotAuth&amp;crlhashurl=login.aspx%3fdirect%3dtrue%26profile%3dehost%26scope%3dsite%26authtype%3dcrawler%26jrnl%3d02767783%26AN%3d141906418|Theorising the digital object>\n\nand for reference here are wiki pages for <https://en.wikipedia.org/wiki/Object_(computer_science)|objects (in computer science)> and <https://plato.stanford.edu/entries/object/|objects (in philosophy)>",
        "user": "U014WA16VNJ",
        "ts": "1659026912.148189",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pY6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I\u2019m writing a paper on the notion of \u201cdigital objects\u201d and would "
                            },
                            {
                                "type": "text",
                                "text": "seriously",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " appreciate any papers/sources that explore this idea (the notion of digital \u201cthings\u201d in general, not OOP-specific). The notion of an \u201cobject\u201d is one of the most basic and fundamental ideas in philosophy and it has received surprisingly few treatments in the context of computing given its importance. "
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\nI have many thoughts on the significance of the question, and have developed a tentative theory of digital objects that I think is well supported and useful. But at the moment I\u2019m just trying to gather more literature and perspectives (as in, "
                            },
                            {
                                "type": "text",
                                "text": "your perspectives!)",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\nA few related phrasings to the question that I\u2019ve seen around: In what ways do digital things exist? What is the nature of digital \u201cstuff\u201d, What defines a computational entity?, etc. While \u201cobject\u201d is really the proper term here, there are others that get used often like entity, item, thing, or unit."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\nSome sources that explore this question:"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://firstmonday.org/ojs/index.php/fm/article/view/3033/2564",
                                "text": "A theory of digital objects"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://www.upress.umn.edu/book-division/books/on-the-existence-of-digital-objects",
                                "text": "On the existence of digital objects"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https://web.p.ebscohost.com/abstract?direct=true&profile=ehost&scope=site&authtype=crawler&jrnl=02767783&AN=141906418&h=1gY%2bZWdrqJ%2bzDGGlCqqjp1Khf2LKSNFhTdz8biZlD5L%2faPuiaHTRwlWtEQS32sXaipdz2Yq50hc3bqOhGMkcRQ%3d%3d&crl=c&resultNs=AdminWebAuth&resultLocal=ErrCrlNotAuth&crlhashurl=login.aspx%3fdirect%3dtrue%26profile%3dehost%26scope%3dsite%26authtype%3dcrawler%26jrnl%3d02767783%26AN%3d141906418",
                                "text": "Theorising the digital object"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "and for reference here are wiki pages for "
                            },
                            {
                                "type": "link",
                                "url": "https://en.wikipedia.org/wiki/Object_(computer_science)",
                                "text": "objects (in computer science)"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "https://plato.stanford.edu/entries/object/",
                                "text": "objects (in philosophy)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1659026912.148189",
        "reply_count": 12,
        "reply_users_count": 7,
        "latest_reply": "1659283995.504329",
        "reply_users": [
            "U0378MDUG1Y",
            "U03B14DUZSA",
            "UCGAK10LS",
            "UJZS8UUJV",
            "UJBAJNFLK",
            "U014WA16VNJ",
            "U03LT7540HZ"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "E46DC880-3293-4921-968A-BDC7A94D7649",
        "type": "message",
        "text": "Maybe this essay is loosely related? <https://dzone.com/articles/abstraction-tiers-of-notations|https://dzone.com/articles/abstraction-tiers-of-notations>",
        "user": "U0378MDUG1Y",
        "ts": "1659029424.887269",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://dzone.com/articles/abstraction-tiers-of-notations",
                "image_url": "https://dz2cdn4.dzone.com/storage/article-thumb/11113083-thumb.jpg",
                "image_width": 400,
                "image_height": 250,
                "image_bytes": 430622,
                "service_icon": "https://dz2cdn3.dzone.com/themes/dz20/images/favicon.png",
                "id": 1,
                "original_url": "https://dzone.com/articles/abstraction-tiers-of-notations",
                "fallback": "dzone.com: Abstraction Tiers of Notations (Part 1) - DZone Java",
                "text": "In this first part of the series, I\u2019ll discuss well-defined tiers; the next tier will be the subject of the separate article as it is more controversial.",
                "title": "Abstraction Tiers of Notations (Part 1) - DZone Java",
                "title_link": "https://dzone.com/articles/abstraction-tiers-of-notations",
                "service_name": "dzone.com"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wMEde",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Maybe this essay is loosely related? "
                            },
                            {
                                "type": "link",
                                "url": "https://dzone.com/articles/abstraction-tiers-of-notations",
                                "text": "https://dzone.com/articles/abstraction-tiers-of-notations"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1659026912.148189",
        "parent_user_id": "U014WA16VNJ",
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U014WA16VNJ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6c978da3-5683-478e-a227-fc5233ba6df2",
        "type": "message",
        "text": "It's difficult to pin down the meaning of 'object' in a digital sense because in many ways it is used as a term of art, and it doesn't seem like the philosophers are in agreement in any case. Objects can be best defined by differentiating them from data, where objects are behavioral while data must be altered by external procedures, as elaborated in <https://dl.acm.org/doi/10.1145/1640089.1640133|On understanding data abstraction, revisited>, <https://dl.acm.org/doi/10.1145/2509578.2514738|The power of interoperability: why objects are inevitable>, and \"Object Thinking\" by David West. OOP muddies the waters with notions like inheritance and classes, but is still centered around objects as the fundamental unit of computing. You can have objects like this in a language that isn't OOP (as many do, however clumsily), but the origins of OOP were centered around the philosophical notion of object as Dan Ingalls puts it in <https://www.cs.virginia.edu/~evans/cs655/readings/smalltalk.html|Design Principles Behind Smalltalk>:\n&gt;  The mind observes a vast universe of experience, both immediate and recorded. One can derive a sense of oneness with the universe simply by letting this experience be, just as it is. However, if one wishes to participate, literally to _take a part_, in the universe, one must draw distinctions. In so doing one identifies an object in the universe, and simultaneously all the rest becomes not-that-object. Distinction by itself is a start, but the process of distinguishing does not get any easier. Every time you want to talk about \"that chair over there\", you must repeat the entire processes of distinguishing that chair. This is where the act of reference comes in: we can associate a unique identifier with an object, and, from that time on, only the mention of that identifier is necessary to refer to the original object.\nSo perhaps the goal of OOP is to facilitate the primordial meaningless goo of bits and bytes into well-behaved and understandable objects. Brad Cox writes in <https://www.researchgate.net/publication/3246772_Planning_the_software_industrial_revolution|Planning the software industrial revolution>:\n&gt; What does any adjective mean in this murky swamp we call software? No one is confused when adjectives like `small' or `fast' mean entirely different things in nuclear physics, gardening, and geology. But in this murky domain of intangible abstractions, it is all too easy to lose your bearings, to misunderstand the context, to confuse the very small with the extremely large.[...]\n&gt; Such confusion is not surprising. The denizens of the software domain, from the tiniest expression to the largest application, are as intangible as any ghost. And because we invent them all from first principles, everything we encounter there is unique and unfamiliar, composed of components that have never been seen before and will never be seen again, and that obey laws that don't generalize to future encounters. Software is a place where dreams are planted and nightmares harvested, an abstract, mystical swamp where terrible demons compete with magical panaceas, a world of werewolves and silver bullets. As long all we can know for certain is the code we ourselves wrote during the last week or so, mystical belief will reign over quantifiable reason. Terms like `computer science' and `software engineering' will remain oxymorons -- at best, content-free twaddle spawned of wishful thinking and, at worst, a cruel and selfish fraud on the consumers who pay our salaries.\n&gt; In the broadest sense, object-oriented refers to an objective, not a technology for achieving it. It means wielding all the tools we can muster, from well-proven antiques like Cobol to missing ones like specification languages, to enable our consumers by letting them reason about our products via the common-sense skills we all use to understand tangible objects.\nSo, what is an object in a computer, a digital thing? It is philosophy come to life in a metaphysical tool, a structure of consciousness reproduced as a model, which can be understood as an object to other object-speaking agents through what it does.",
        "user": "U03B14DUZSA",
        "ts": "1659044592.522839",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XVb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's difficult to pin down the meaning of 'object' in a digital sense because in many ways it is used as a term of art, and it doesn't seem like the philosophers are in agreement in any case. Objects can be best defined by differentiating them from data, where objects are behavioral while data must be altered by external procedures, as elaborated in "
                            },
                            {
                                "type": "link",
                                "url": "https://dl.acm.org/doi/10.1145/1640089.1640133",
                                "text": "On understanding data abstraction, revisited"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https://dl.acm.org/doi/10.1145/2509578.2514738",
                                "text": "The power of interoperability: why objects are inevitable"
                            },
                            {
                                "type": "text",
                                "text": ", and \"Object Thinking\" by David West. OOP muddies the waters with notions like inheritance and classes, but is still centered around objects as the fundamental unit of computing. You can have objects like this in a language that isn't OOP (as many do, however clumsily), but the origins of OOP were centered around the philosophical notion of object as Dan Ingalls puts it in "
                            },
                            {
                                "type": "link",
                                "url": "https://www.cs.virginia.edu/~evans/cs655/readings/smalltalk.html",
                                "text": "Design Principles Behind Smalltalk"
                            },
                            {
                                "type": "text",
                                "text": ":\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " The mind observes a vast universe of experience, both immediate and recorded. One can derive a sense of oneness with the universe simply by letting this experience be, just as it is. However, if one wishes to participate, literally to "
                            },
                            {
                                "type": "text",
                                "text": "take a part",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", in the universe, one must draw distinctions. In so doing one identifies an object in the universe, and simultaneously all the rest becomes not-that-object. Distinction by itself is a start, but the process of distinguishing does not get any easier. Every time you want to talk about \"that chair over there\", you must repeat the entire processes of distinguishing that chair. This is where the act of reference comes in: we can associate a unique identifier with an object, and, from that time on, only the mention of that identifier is necessary to refer to the original object."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So perhaps the goal of OOP is to facilitate the primordial meaningless goo of bits and bytes into well-behaved and understandable objects. Brad Cox writes in "
                            },
                            {
                                "type": "link",
                                "url": "https://www.researchgate.net/publication/3246772_Planning_the_software_industrial_revolution",
                                "text": "Planning the software industrial revolution"
                            },
                            {
                                "type": "text",
                                "text": ":\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What does any adjective mean in this murky swamp we call software? No one is confused when adjectives like `small' or `fast' mean entirely different things in nuclear physics, gardening, and geology. But in this murky domain of intangible abstractions, it is all too easy to lose your bearings, to misunderstand the context, to confuse the very small with the extremely large.[...]\nSuch confusion is not surprising. The denizens of the software domain, from the tiniest expression to the largest application, are as intangible as any ghost. And because we invent them all from first principles, everything we encounter there is unique and unfamiliar, composed of components that have never been seen before and will never be seen again, and that obey laws that don't generalize to future encounters. Software is a place where dreams are planted and nightmares harvested, an abstract, mystical swamp where terrible demons compete with magical panaceas, a world of werewolves and silver bullets. As long all we can know for certain is the code we ourselves wrote during the last week or so, mystical belief will reign over quantifiable reason. Terms like `computer science' and `software engineering' will remain oxymorons -- at best, content-free twaddle spawned of wishful thinking and, at worst, a cruel and selfish fraud on the consumers who pay our salaries.\nIn the broadest sense, object-oriented refers to an objective, not a technology for achieving it. It means wielding all the tools we can muster, from well-proven antiques like Cobol to missing ones like specification languages, to enable our consumers by letting them reason about our products via the common-sense skills we all use to understand tangible objects."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "So, what is an object in a computer, a digital thing? It is philosophy come to life in a metaphysical tool, a structure of consciousness reproduced as a model, which can be understood as an object to other object-speaking agents through what it does."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1659026912.148189",
        "parent_user_id": "U014WA16VNJ",
        "reactions": [
            {
                "name": "clap",
                "users": [
                    "UJZS8UUJV",
                    "U014WA16VNJ"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "9C0F27EF-4A0D-4D45-8F68-2E2334FC30C3",
        "type": "message",
        "text": "<@U02028JHX37> FWIW, because I've mostly been designing a language, and not an app, I've not actually needed to build any working prototypes to complete my design iterations. It's always been sufficient for me to simply write down a small program that embodies a design idea, and manually evaluate its syntax and semantics. That saves 100+ hours building a parser, interpreter, and/or IDE.\n\nOnce I've settled on a complete set of language constructs (and a syntax) that can be used to build complex programs, I\u2019m sure I will need to build an interpreter. But that would be at a very late stage in the design process. So it's really not _coding_ that has been slowing me down. I've almost never gotten \u201cstuck\u201d during my design work such that I've needed to write an interpreter to proceed.\n\nPeople who are doing _interaction_ design, e.g. designing structured editors, would obviously need to write code more frequently so that they can test out the interactions they have in mind. ",
        "user": "UCGAK10LS",
        "ts": "1659049090.517109",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HL3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02028JHX37"
                            },
                            {
                                "type": "text",
                                "text": " FWIW, because I've mostly been designing a language, and not an app, I've not actually needed to build any working prototypes to complete my design iterations. It's always been sufficient for me to simply write down a small program that embodies a design idea, and manually evaluate its syntax and semantics. That saves 100+ hours building a parser, interpreter, and/or IDE."
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            },
                            {
                                "type": "text",
                                "text": "Once I've settled on a complete set of language constructs (and a syntax) that can be used to build complex programs, I\u2019m sure I will need to build an interpreter. But that would be at a very late stage in the design process. So it's really not "
                            },
                            {
                                "type": "text",
                                "text": "coding",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that has been slowing me down. I've almost never gotten \u201cstuck\u201d during my design work such that I've needed to write an interpreter to proceed."
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "\nPeople who are doing "
                            },
                            {
                                "type": "text",
                                "text": "interaction",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " design, e.g. designing structured editors, would obviously need to write code more frequently so that they can test out the interactions they have in mind. "
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658960681.747419",
        "parent_user_id": "UK3LH8CF5"
    },
    {
        "client_msg_id": "b6d30f80-75c7-4c91-8b42-bdc751b14caf",
        "type": "message",
        "text": "&gt; The notion of an \u201cobject\u201d has received surprisingly few treatments in the context of computing\nIMO the software industry's blindness to what it means to be an \"object\" (in our everyday lives) is a major contributor to the stagnation in PLs that we are experiencing.\n\nFrom my perspective, objects are immortal once they appear, i.e. they can never be destroyed. The rationale: we can still talk about Alan Turing, or the 2001 World Trade Center, even though neither of those things have a physical body anymore. Thus, they still exist as objects _in our minds._ The fact that they continue to have an influence in the world \u2014 associations continue to be made between them and other things \u2014 means that they are not really \"gone\".\n\nWhilst such objects can't be destroyed, they can be _forgotten_. Computers should be able to model this phenomenon. Object-oriented languages _kind of_ do this, in that objects are garbage-collected only when all references to them are released, i.e. you can't destroy an object that somebody else is still \"thinking about\". But they conflate something important: objects are given \"attributes\", and those attributes cannot be forgotten (cleared from memory) until the object itself is forgotten. Crucially, attributes are the only thing that actually consumes memory! Thus, what OOP seems to _really_ be garbage-collecting is attributes, not object themselves. But it's _really weird_ to manage the lifetimes of attributes (i.e. the lifetimes of relationships between things) by bundling them into a \"group\" that we call an object. After all, they make no contribution to the object's identity \u2014 in an OO language, the identity of an object is given by its location in memory.\n\nIn conclusion: I think \"objects\" should be considered immortal (once they appear), and not \"contain\" any relationships. Instead, relationships should be a separate construct, similar to how \"relational languages\" (SQL, Datalog...) do it. The open question is: what is the right way to model the _lifetimes_ of relationships, such that relationships can become invalid and be \"garbage-collected\"? Neither SQL nor Datalog offer a compelling model.",
        "user": "UCGAK10LS",
        "ts": "1659059298.709079",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UCGAK10LS",
            "ts": "1659061005.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0eJ",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The notion of an \u201cobject\u201d has received surprisingly few treatments in the context of computing"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIMO the software industry's blindness to what it means to be an \"object\" (in our everyday lives) is a major contributor to the stagnation in PLs that we are experiencing.\n\nFrom my perspective, objects are immortal once they appear, i.e. they can never be destroyed. The rationale: we can still talk about Alan Turing, or the 2001 World Trade Center, even though neither of those things have a physical body anymore. Thus, they still exist as objects "
                            },
                            {
                                "type": "text",
                                "text": "in our minds. ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "The fact that they continue to have an influence in the world \u2014 associations continue to be made between them and other things \u2014 means that they are not really \"gone\".\n\nWhilst such objects can't be destroyed, they can be "
                            },
                            {
                                "type": "text",
                                "text": "forgotten",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Computers should be able to model this phenomenon. Object-oriented languages "
                            },
                            {
                                "type": "text",
                                "text": "kind of ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "do this, in that objects are garbage-collected only when all references to them are released, i.e. you can't destroy an object that somebody else is still \"thinking about\". But they conflate something important: objects are given \"attributes\", and those attributes cannot be forgotten (cleared from memory) until the object itself is forgotten. Crucially, attributes are the only thing that actually consumes memory! Thus, what OOP seems to "
                            },
                            {
                                "type": "text",
                                "text": "really",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " be garbage-collecting is attributes, not object themselves. But it's "
                            },
                            {
                                "type": "text",
                                "text": "really weird",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to manage the lifetimes of attributes (i.e. the lifetimes of relationships between things) by bundling them into a \"group\" that we call an object. After all, they make no contribution to the object's identity \u2014 in an OO language, the identity of an object is given by its location in memory.\n\nIn conclusion: I think \"objects\" should be considered immortal (once they appear), and not \"contain\" any relationships. Instead, relationships should be a separate construct, similar to how \"relational languages\" (SQL, Datalog...) do it. The open question is: what is the right way to model the "
                            },
                            {
                                "type": "text",
                                "text": "lifetimes",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of relationships, such that relationships can become invalid and be \"garbage-collected\"? Neither SQL nor Datalog offer a compelling model."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1659026912.148189",
        "parent_user_id": "U014WA16VNJ",
        "reactions": [
            {
                "name": "amiga-tick",
                "users": [
                    "U014WA16VNJ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "be363447-70d1-439f-b55d-414eec9fbc33",
        "type": "message",
        "text": "&gt;  The notion of an \u201cobject\u201d is one of the most basic and fundamental ideas in philosophy and it has received surprisingly few treatments in the context of computing given its importance.\nThe philosophical notion of an object as applied to the context of computing casts quite a wide net. The notions of a \u201cdigital object\u201d or similar terms as treated in the links you and Riley provided mostly seem considerably narrower. Do you think  your tentative theory will start with a narrower category as a premise and then go from there? Or is the goal to apply the philosophical notion to the context of computing in order to discover the category?\n\n(Unfortunately I don\u2019t think I have any more reference points to contribute.)",
        "user": "UJZS8UUJV",
        "ts": "1659064881.141089",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UJZS8UUJV",
            "ts": "1659064956.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/GT",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": " The notion of an \u201cobject\u201d is one of the most basic and fundamental ideas in philosophy and it has received surprisingly few treatments in the context of computing given its importance."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The philosophical notion of an object as applied to the context of computing casts quite a wide net. The notions of a \u201cdigital object\u201d or similar terms as treated in the links you and Riley provided mostly seem considerably narrower. Do you think  your tentative theory will start with a narrower category as a premise and then go from there? Or is the goal to apply the philosophical notion to the context of computing in order to discover the category?\n\n(Unfortunately I don\u2019t think I have any more reference points to contribute.)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1659026912.148189",
        "parent_user_id": "U014WA16VNJ"
    },
    {
        "client_msg_id": "bf7d0ef5-b09a-4746-9edd-bde42aeb510f",
        "type": "message",
        "text": "Gilbert Simondon's \"_Du mode d'existence des objets techniques\"_ is probably relevant, but I don't know if it has been translated. It's about \"technical objects\" and their role in modern societies, so it's a bit wider than \"digital objects\". Your second link mentions Simondon BTW.",
        "user": "UJBAJNFLK",
        "ts": "1659088169.936569",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "zxIA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Gilbert Simondon's \""
                            },
                            {
                                "type": "text",
                                "text": "Du mode d'existence des objets techniques\"",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is probably relevant, but I don't know if it has been translated. It's about \"technical objects\" and their role in modern societies, so it's a bit wider than \"digital objects\". Your second link mentions Simondon BTW."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1659026912.148189",
        "parent_user_id": "U014WA16VNJ",
        "reactions": [
            {
                "name": "heavy_plus_sign",
                "users": [
                    "U013ZLJARC7",
                    "U014WA16VNJ"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "7E6CF661-6911-4899-BA7B-5BD063EC53C3",
        "type": "message",
        "text": "<@UJBAJNFLK> Yeah that\u2019s one of the main influences that Yuk Hui pulls from in his book. I found the idea of \u201ctechnical objects\u201d really useful in clarifying the relationship between digital objects and broader society, but still need to dig into some of Simondons original work. I just haven't found a good english copy of that work yet.",
        "user": "U014WA16VNJ",
        "ts": "1659096680.470559",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "brUK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJBAJNFLK"
                            },
                            {
                                "type": "text",
                                "text": " Yeah that\u2019s one of the main influences that Yuk Hui pulls from in his book. I found the idea of \u201ctechnical objects\u201d really useful in clarifying the relationship between digital objects and broader society, but still need to dig into some of Simondons original work. I just haven't found a good english copy of that work yet."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1659026912.148189",
        "parent_user_id": "U014WA16VNJ"
    },
    {
        "client_msg_id": "E5719476-A4A9-4492-ADA8-4E1FBD3B5E6F",
        "type": "message",
        "text": "<@UJZS8UUJV> the goal is to discover the category, though I would say I\u2019m doing something more like synthesis than pure application of philosophy. And yes, it\u2019s a very wide net, and I agree that some of those references are far too constrained (even if they are useful to some).",
        "user": "U014WA16VNJ",
        "ts": "1659097009.608069",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GEYZ+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UJZS8UUJV"
                            },
                            {
                                "type": "text",
                                "text": " the goal is to discover the category, though I would say I\u2019m doing something more like synthesis than pure application of philosophy. And yes, it\u2019s a very wide net, and I agree that some of those references are far too constrained (even if they are useful to some)."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1659026912.148189",
        "parent_user_id": "U014WA16VNJ"
    },
    {
        "client_msg_id": "3B63AC2D-2C25-46CA-9F79-A745FF60024A",
        "type": "message",
        "text": "<@U03B14DUZSA> thanks for the links! Some really great thoughts here! Love that Ingalls quote, and it maintains some clarity (which is often lost nowadays) that the _object_ and the ways we _refer_ to that object may be conceptually distinct. You can refer to the same object in a number of ways, and it isn\u2019t guaranteed that you\u2019ll be referring to the same object with the same reference. I\u2019d like to push back on the distinction between objects and data though, as that would mean that things like _files_ are not objects, and the computational distinction can be blurry when the _data_ might be source code or something \u2018computational\u2019 in nature.",
        "user": "U014WA16VNJ",
        "ts": "1659098373.495089",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O69",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U03B14DUZSA"
                            },
                            {
                                "type": "text",
                                "text": " thanks for the links! Some really great thoughts here! Love that Ingalls quote, and it maintains some clarity (which is often lost nowadays) that the "
                            },
                            {
                                "type": "text",
                                "text": "object ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "and the ways we "
                            },
                            {
                                "type": "text",
                                "text": "refer ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "to that object may be conceptually distinct. You can refer to the same object in a number of ways, and it isn\u2019t guaranteed that you\u2019ll be referring to the same object with the same reference. I\u2019d like to push back on the distinction between objects and data though, as that would mean that things like "
                            },
                            {
                                "type": "text",
                                "text": "files",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are not objects, and the computational distinction can be blurry when the "
                            },
                            {
                                "type": "text",
                                "text": "data ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "might be source code or something \u2018computational\u2019 in nature."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1659026912.148189",
        "parent_user_id": "U014WA16VNJ"
    },
    {
        "client_msg_id": "C1590EDF-8F71-4749-9C09-3C93FF3EF58D",
        "type": "message",
        "text": "<@UCGAK10LS> interesting stuff! You raise a couple of important points:\n\u2022 A conception of objects as defined by relations, which as you point out can persist beyond the existence of the original object. This also points to the ontological status of digital objects, and wether an object can be ontologically independent (imho they probably can't be). It also raises the question of the kinds of relations relevant to objects, e.g. do objects have a meronomy (part-whole relation) where their attributes or properties are contained \u201cwithin\u201d the object. In my view, this question doesn't have a single answer and it comes down to context/perspective. A property may be \u201cpart of\u201d an object from one view, and an external relation from another view.\n\u2022 The question of _identity_! This is actually what prompted me to write the paper, as I think this is a much harder question, and one that I think naturally follows from a conception of \u2018digital object\u2019. Identity is essentially the question of \u201csameness\u201d over time/place/context/etc. In your OOP language example, I think it\u2019s not exactly the location in memory that gives an object its identity, but is instead the interaction between the addressing system (often a location in memory) and the mutability system (which is conceptually related to identity). This is only true at the language level though, and doesn't entirely track to broader systems.\nIn the paper I introduce and build on two related notions: \u201cObjects as addressability\u201d and \u201cIdentity as governance\u201d which roughly correspond to the points you made (though I take a systems-theoretic view, not a language one). I think its only when viewing these together that we get a more complete picture. I think the mutability-as-default of our systems may have contributed to the conflation between these two notions. I\u2019m also aware that \u201caddresssability\u201d and \u201cgovernance\u201d are undefined here, but I\u2019ll leave that for the future for now.",
        "user": "U014WA16VNJ",
        "ts": "1659099692.609849",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "U014WA16VNJ",
            "ts": "1659099829.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Gku",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UCGAK10LS"
                            },
                            {
                                "type": "text",
                                "text": " interesting stuff! You raise a couple of important points:"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "A conception of objects as defined by relations, which as you point out can persist beyond the existence of the original object. This also points to the ontological status of digital objects, and wether an object can be ontologically independent (imho they probably can't be). It also raises the question of the kinds of relations relevant to objects, e.g. do objects have a meronomy (part-whole relation) where their attributes or properties are contained \u201cwithin\u201d the object. In my view, this question doesn't have a single answer and it comes down to context/perspective. A property may be \u201cpart of\u201d an object from one view, and an external relation from another view."
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "The question of "
                                    },
                                    {
                                        "type": "text",
                                        "text": "identity",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "! This is actually what prompted me to write the paper, as I think this is a much harder question, and one that I think naturally follows from a conception of \u2018digital object\u2019. Identity is essentially the question of \u201csameness\u201d over time/place/context/etc. In your OOP language example, I think it\u2019s not exactly the location in memory that gives an object its identity, but is instead the interaction between the addressing system (often a location in memory) and the mutability system (which is conceptually related to identity). This is only true at the language level though, and doesn't entirely track to broader systems."
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "offset": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nIn the paper I introduce and build on two related notions: \u201cObjects as addressability\u201d and \u201cIdentity as governance\u201d which roughly correspond to the points you made (though I take a systems-theoretic view, not a language one). I think its only when viewing these together that we get a more complete picture. I think the mutability-as-default of our systems may have contributed to the conflation between these two notions. I\u2019m also aware that \u201caddresssability\u201d and \u201cgovernance\u201d are undefined here, but I\u2019ll leave that for the future for now."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1659026912.148189",
        "parent_user_id": "U014WA16VNJ",
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "UCGAK10LS"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "e6c205aa-2f69-4fce-9acf-190cd1b82e6c",
        "type": "message",
        "text": "<@U014WA16VNJ> There is indeed a translation: <https://gilbert.simondon.fr/content/mode-existence-technical-objects>, <https://www.upress.umn.edu/book-division/books/on-the-mode-of-existence-of-technical-objects>",
        "user": "UJBAJNFLK",
        "ts": "1659120569.529409",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://www.upress.umn.edu/book-division/books/on-the-mode-of-existence-of-technical-objects",
                "thumb_url": "https://www.upress.umn.edu/book-division/books/on-the-mode-of-existence-of-technical-objects/@@images/image/large",
                "thumb_width": 575,
                "thumb_height": 768,
                "service_icon": "https://www.upress.umn.edu/favicon.ico",
                "id": 1,
                "original_url": "https://www.upress.umn.edu/book-division/books/on-the-mode-of-existence-of-technical-objects",
                "fallback": "University of Minnesota Press: On the Mode of Existence of Technical Objects",
                "text": "A groundbreaking study on the universe of technical objects by one of France\u2019s most important thinkers of the second half of the twentieth century.",
                "title": "On the Mode of Existence of Technical Objects",
                "title_link": "https://www.upress.umn.edu/book-division/books/on-the-mode-of-existence-of-technical-objects",
                "service_name": "University of Minnesota Press"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qKW0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U014WA16VNJ"
                            },
                            {
                                "type": "text",
                                "text": " There is indeed a translation: "
                            },
                            {
                                "type": "link",
                                "url": "https://gilbert.simondon.fr/content/mode-existence-technical-objects"
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "link",
                                "url": "https://www.upress.umn.edu/book-division/books/on-the-mode-of-existence-of-technical-objects"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1659026912.148189",
        "parent_user_id": "U014WA16VNJ",
        "reactions": [
            {
                "name": "pray",
                "users": [
                    "U014WA16VNJ"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "9768816e-cbfe-443c-bebf-a8e1d271cbc6",
        "type": "message",
        "text": "My first thought when reading \"digital objects\" was, how might NFTs, Metaverse, AR/VR fit into this conversation... I'm a big proponent of \"merge reality\" or the idea that smart glasses will merge our physical and digital worlds. All of those \"digital objects\" are going to come out of the proverbial pandoras' box and live next to our physical objects. How is an object classified once, in example, our toaster has an AR based menu?",
        "user": "U03LT7540HZ",
        "ts": "1659204714.636529",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "sDVAO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "My first thought when reading \"digital objects\" was, how might NFTs, Metaverse, AR/VR fit into this conversation... I'm a big proponent of \"merge reality\" or the idea that smart glasses will merge our physical and digital worlds. All of those \"digital objects\" are going to come out of the proverbial pandoras' box and live next to our physical objects. How is an object classified once, in example, our toaster has an AR based menu?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1659026912.148189",
        "parent_user_id": "U014WA16VNJ"
    },
    {
        "client_msg_id": "80c7d740-d711-489e-86f5-3699c27309b8",
        "type": "message",
        "text": "<@U014WA16VNJ> Another maybe interesting site is <https://fairdo.org/>, if only for the fact that it tries very hard to talk about digital objects without ever providing a definition. Put differently: the people behind that site need to read your paper :wink:",
        "user": "UJBAJNFLK",
        "ts": "1659283995.504329",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "=ke",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U014WA16VNJ"
                            },
                            {
                                "type": "text",
                                "text": " Another maybe interesting site is "
                            },
                            {
                                "type": "link",
                                "url": "https://fairdo.org/"
                            },
                            {
                                "type": "text",
                                "text": ", if only for the fact that it tries very hard to talk about digital objects without ever providing a definition. Put differently: the people behind that site need to read your paper "
                            },
                            {
                                "type": "emoji",
                                "name": "wink",
                                "unicode": "1f609"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1659026912.148189",
        "parent_user_id": "U014WA16VNJ",
        "reactions": [
            {
                "name": "pray",
                "users": [
                    "U014WA16VNJ"
                ],
                "count": 1
            }
        ]
    }
]