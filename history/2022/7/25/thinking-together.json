[
    {
        "client_msg_id": "9bfc7af4-55ff-47df-878d-c69538397344",
        "type": "message",
        "text": "I have a question about experiments with flow-based (eg wires and boxes) programming. The main thing people complain about with them, with very good reason IMO, is how complex programs become unreadable spaghetti. By comparison, seeing code in an editor, in general, appears as a zoom-in on a few lines of code. This lets you ignore the complexity of the rest of the surrounding program - or at least temporarily avoid being bothered by it.\nTo remedy this problem, I am guessing some people must have made auto-hide systems for flow-based programming. The equivalent of what code-in-editor has by default: you can't see the code above or below the cutoffs of the window. What are examples of systems doing this? <@U013ZLJARC7>",
        "user": "U017GNJM021",
        "ts": "1658710069.408479",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HTf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have a question about experiments with flow-based (eg wires and boxes) programming. The main thing people complain about with them, with very good reason IMO, is how complex programs become unreadable spaghetti. By comparison, seeing code in an editor, in general, appears as a zoom-in on a few lines of code. This lets you ignore the complexity of the rest of the surrounding program - or at least temporarily avoid being bothered by it.\nTo remedy this problem, I am guessing some people must have made auto-hide systems for flow-based programming. The equivalent of what code-in-editor has by default: you can't see the code above or below the cutoffs of the window. What are examples of systems doing this? "
                            },
                            {
                                "type": "user",
                                "user_id": "U013ZLJARC7"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658710069.408479",
        "reply_count": 6,
        "reply_users_count": 5,
        "latest_reply": "1658826293.114579",
        "reply_users": [
            "UC2A2ARPT",
            "U013ZLJARC7",
            "U03PM543ANT",
            "U017GNJM021",
            "UA14TGLTC"
        ],
        "is_locked": false,
        "subscribed": false,
        "reactions": [
            {
                "name": "thinking_face",
                "users": [
                    "UCUSW7WVD",
                    "UA14TGLTC"
                ],
                "count": 2
            }
        ]
    },
    {
        "client_msg_id": "09961c07-1a47-4dba-bbf5-a2ba174427f7",
        "type": "message",
        "text": "&gt; you can't see the code above or below the cutoffs of the window\nI'm confused \u2014 don't most node-wire tools also do this?\n\nCan you give an example of what you mean by \"auto-hide systems\"?",
        "user": "UC2A2ARPT",
        "ts": "1658730841.222929",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UC2A2ARPT",
            "ts": "1658730881.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6QmJo",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "you can't see the code above or below the cutoffs of the window"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI'm confused \u2014 don't most node-wire tools also do this?\n\nCan you give an example of what you mean by \"auto-hide systems\"?"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658710069.408479",
        "parent_user_id": "U017GNJM021"
    },
    {
        "client_msg_id": "8613ecd0-d420-4e26-a784-b492dd84d164",
        "type": "message",
        "text": "<@U017GNJM021> I've never found a node-based programming environment that I like. <@UC2A2ARPT> is a much better person to ask about this, as he is very focused on that area. :slightly_smiling_face:",
        "user": "U013ZLJARC7",
        "ts": "1658737633.044619",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "5GgqL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U017GNJM021"
                            },
                            {
                                "type": "text",
                                "text": " I've never found a node-based programming environment that I like. "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " is a much better person to ask about this, as he is very focused on that area. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658710069.408479",
        "parent_user_id": "U017GNJM021"
    },
    {
        "client_msg_id": "68fa622f-883e-4253-9607-69610783d677",
        "type": "message",
        "text": "Has anyone seen an implementation of a structural REPL? Structural Editors are great but is there something that could be both structural and a repl. I'd love to be able to open a structural repl at a point in my program and investigate at that point.",
        "user": "U03LMRE6MQE",
        "ts": "1658752861.226259",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GQX",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has anyone seen an implementation of a structural REPL? Structural Editors are great but is there something that could be both structural and a repl. I'd love to be able to open a structural repl at a point in my program and investigate at that point."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658752861.226259",
        "reply_count": 14,
        "reply_users_count": 7,
        "latest_reply": "1659037118.420929",
        "reply_users": [
            "UCUSW7WVD",
            "U013ZLJARC7",
            "U01NWARGPNC",
            "UA14TGLTC",
            "U03LMRE6MQE",
            "U79HM6726",
            "U02JQA5FY5C"
        ],
        "is_locked": false,
        "subscribed": false
    },
    {
        "client_msg_id": "bad21bc9-27e2-4487-ab25-8d26130ba14b",
        "type": "message",
        "text": "Does Scratch feel like a structural repl? If so, there's also this unreleased project for Python:\n<https://futureofcoding.slack.com/archives/C5U3SEW6A/p1650580496430299?thread_ts=1650580496.430299&amp;cid=C5U3SEW6A|https://futureofcoding.slack.com/archives/C5U3SEW6A/p1650580496430299?thread_ts=1650580496.430299&amp;cid=C5U3SEW6A>\n\nI don't follow your last sentence, though.",
        "user": "UCUSW7WVD",
        "ts": "1658759115.018569",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1650580496430299?thread_ts=1650580496.430299&amp;cid=C5U3SEW6A",
                "ts": "1650580496.430299",
                "author_id": "UCUSW7WVD",
                "channel_team": "T5TCAFTA9",
                "channel_id": "C5U3SEW6A",
                "channel_name": "linking-together",
                "is_msg_unfurl": true,
                "is_thread_root_unfurl": true,
                "message_blocks": [
                    {
                        "team": "T5TCAFTA9",
                        "channel": "C5U3SEW6A",
                        "ts": "1650580496.430299",
                        "message": {
                            "blocks": [
                                {
                                    "type": "rich_text",
                                    "block_id": "6=Bt",
                                    "elements": [
                                        {
                                            "type": "rich_text_section",
                                            "elements": [
                                                {
                                                    "type": "text",
                                                    "text": "This is a pretty awesome story about a bunch of attempts at a somewhat-visual, more accessible programming language: "
                                                },
                                                {
                                                    "type": "link",
                                                    "url": "https://www.youtube.com/watch?v=UH0A2iujtY8"
                                                },
                                                {
                                                    "type": "text",
                                                    "text": " by "
                                                },
                                                {
                                                    "type": "user",
                                                    "user_id": "U01NWARGPNC"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "id": 1,
                "original_url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1650580496430299?thread_ts=1650580496.430299&amp;cid=C5U3SEW6A",
                "fallback": "[April 21st, 2022 3:34 PM] ak: This is a pretty awesome story about a bunch of attempts at a somewhat-visual, more accessible programming language: <https://www.youtube.com/watch?v=UH0A2iujtY8> by <@U01NWARGPNC>",
                "text": "This is a pretty awesome story about a bunch of attempts at a somewhat-visual, more accessible programming language: <https://www.youtube.com/watch?v=UH0A2iujtY8> by <@U01NWARGPNC>",
                "author_name": "Kartik Agaram",
                "author_link": "https://futureofcoding.slack.com/team/UCUSW7WVD",
                "author_icon": "https://avatars.slack-edge.com/2019-07-14/687915485201_6e649a383cf8f9e366e3_48.png",
                "author_subname": "Kartik Agaram",
                "mrkdwn_in": [
                    "text"
                ],
                "footer": "Thread in #linking-together"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1uK5K",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Does Scratch feel like a structural repl? If so, there's also this unreleased project for Python:\n"
                            },
                            {
                                "type": "link",
                                "url": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1650580496430299?thread_ts=1650580496.430299&cid=C5U3SEW6A",
                                "text": "https://futureofcoding.slack.com/archives/C5U3SEW6A/p1650580496430299?thread_ts=1650580496.430299&cid=C5U3SEW6A"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI don't follow your last sentence, though."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658752861.226259",
        "parent_user_id": "U03LMRE6MQE"
    },
    {
        "client_msg_id": "f71d7e66-58cd-4290-b661-398df3a037d8",
        "type": "message",
        "text": "One approach (perhaps equivalent to subroutines in textual code) is to be able to manually nest sub-graphs within a node.  Useful when there are different levels of abstraction perhaps.   I have seen this work quite effectively.\n\nIt may be interesting to try to partition the graph in this way automatically (using graph theory) to place highly connected components into sub-graphs.",
        "user": "U03PM543ANT",
        "ts": "1658759120.828739",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZNaj",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "One approach (perhaps equivalent to subroutines in textual code) is to be able to manually nest sub-graphs within a node.  Useful when there are different levels of abstraction perhaps.   I have seen this work quite effectively.\n\nIt may be interesting to try to partition the graph in this way automatically (using graph theory) to place highly connected components into sub-graphs."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658710069.408479",
        "parent_user_id": "U017GNJM021",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U017GNJM021"
                ],
                "count": 1
            },
            {
                "name": "nesting_dolls",
                "users": [
                    "U017GNJM021"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "6bef2e44-cb0e-4282-9a7d-2b6f4eced47d",
        "type": "message",
        "text": "<@UC2A2ARPT> a simple example of what I mean by auto-hide: you have nodes A,B,C,D. The connections are A-&gt;B, B-&gt;C, C-&gt;D, A-&gt;D (last one is not a typo)\n\nYou are zoomed in on B and C and cannot see their other connections. But the wire from A-&gt;D could be going over that, creating visual clutter. Auto hide might involve hiding that connection while you are zoomed in, only showing when you zoom out or pan over to D",
        "user": "U017GNJM021",
        "ts": "1658759744.045669",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "beyO1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " a simple example of what I mean by auto-hide: you have nodes A,B,C,D. The connections are A->B, B->C, C->D, A->D (last one is not a typo)\n\nYou are zoomed in on B and C and cannot see their other connections. But the wire from A->D could be going over that, creating visual clutter. Auto hide might involve hiding that connection while you are zoomed in, only showing when you zoom out or pan over to D"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658710069.408479",
        "parent_user_id": "U017GNJM021"
    },
    {
        "client_msg_id": "000c99a8-7df9-4d03-8f46-e4b609cadc66",
        "type": "message",
        "text": "Ah, okay!\n\nI haven't seen anything that does this exactly. I have seen some VPLs play with hiding wires in other ways:\n\u2022 fading out the middle parts of wires when they aren't selected, so you just see the beginning &amp; end\n\u2022 making wires sort to the back, so at the very least they won't be covering other nodes\n\u2022 forcing nodes to be on a grid, forcing connected nodes to have some degree of adjacency, so that wires _can't_ cross other unrelated nodes and tend to be short stubby things that might not even need to be rendered in the first place\nI don't really like any of these sorts of approaches, personally.\nMy pet \"solution\" to the issue of the wiry mess in visual programming is that graph layout should be conceived as a first-class concern of the programmer, and the tools for working with wires should be _fantastic_, such that it's actually pleasing to have wires. The whole point of a visual programming system is to have wires (IMO), and the point of the wires is to convey uniquely valuable information to the programmer. So rather than hiding the wires, I'd like to see VP systems that let you _wield_ the wires to great effect (which may, in fact, include hiding them sometimes \u2014 but that should be a thing you're fully in control of, akin to\u2014say\u2014code folding)",
        "user": "UC2A2ARPT",
        "ts": "1658763299.525269",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wUod",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ah, okay!\n\nI haven't seen anything that does this exactly. I have seen some VPLs play with hiding wires in other ways:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "fading out the middle parts of wires when they aren't selected, so you just see the beginning & end"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "making wires sort to the back, so at the very least they won't be covering other nodes"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "forcing nodes to be on a grid, forcing connected nodes to have some degree of adjacency, so that wires "
                                    },
                                    {
                                        "type": "text",
                                        "text": "can't",
                                        "style": {
                                            "italic": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " cross other unrelated nodes and tend to be short stubby things that might not even need to be rendered in the first place"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nI don't really like any of these sorts of approaches, personally.\nMy pet \"solution\" to the issue of the wiry mess in visual programming is that graph layout should be conceived as a first-class concern of the programmer, and the tools for working with wires should be "
                            },
                            {
                                "type": "text",
                                "text": "fantastic",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", such that it's actually pleasing to have wires. The whole point of a visual programming system is to have wires (IMO), and the point of the wires is to convey uniquely valuable information to the programmer. So rather than hiding the wires, I'd like to see VP systems that let you "
                            },
                            {
                                "type": "text",
                                "text": "wield ",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "the wires to great effect (which may, in fact, include hiding them sometimes \u2014 but that should be a thing you're fully in control of, akin to\u2014say\u2014code folding)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658710069.408479",
        "parent_user_id": "U017GNJM021",
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U017GNJM021"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "1340e351-04dd-402e-9e2f-3b07c6e3c217",
        "type": "message",
        "text": "Paredit is a structural editor for lisp-like languages in Emacs, which combines well with support for scheme, clojure, &amp;c, to give you this experience. There are a couple of in-progress projects using treesitter to give similar superpowers for infix languages...",
        "user": "U013ZLJARC7",
        "ts": "1658773020.640109",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4EdFL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Paredit is a structural editor for lisp-like languages in Emacs, which combines well with support for scheme, clojure, &c, to give you this experience. There are a couple of in-progress projects using treesitter to give similar superpowers for infix languages..."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658752861.226259",
        "parent_user_id": "U03LMRE6MQE"
    },
    {
        "client_msg_id": "34db4b3a-a453-4eca-9ff5-fdec3a7505be",
        "type": "message",
        "text": "Oh hey, I came here to mention what we\u2019re doing with splootcode but it\u2019s already mentioned! The goal is to get all the benefit of a REPL without the downsides.",
        "user": "U01NWARGPNC",
        "ts": "1658807399.726479",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6Rq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Oh hey, I came here to mention what we\u2019re doing with splootcode but it\u2019s already mentioned! The goal is to get all the benefit of a REPL without the downsides."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658752861.226259",
        "parent_user_id": "U03LMRE6MQE"
    },
    {
        "client_msg_id": "6307124d-96ef-495e-b876-c9f9f8cfd8b2",
        "type": "message",
        "text": "Graph homeomorphisms for the win!  I'll second <@UC2A2ARPT> that serious layout support should be a focus.  Is one factor simply that wire programs are more hacked together than carefully factored.  I mean hacked together text code is a horror, and often can be perfectly cleanly formatted yet semantically tangled.  One quality (a feature perhaps?) of functional programming is that a big ball of mud tends to look like one.",
        "user": "UA14TGLTC",
        "ts": "1658826293.114579",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fh/NV",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Graph homeomorphisms for the win!  I'll second "
                            },
                            {
                                "type": "user",
                                "user_id": "UC2A2ARPT"
                            },
                            {
                                "type": "text",
                                "text": " that serious layout support should be a focus.  Is one factor simply that wire programs are more hacked together than carefully factored.  I mean hacked together text code is a horror, and often can be perfectly cleanly formatted yet semantically tangled.  One quality (a feature perhaps?) of functional programming is that a big ball of mud tends to look like one."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658710069.408479",
        "parent_user_id": "U017GNJM021",
        "reactions": [
            {
                "name": "cake",
                "users": [
                    "UC2A2ARPT"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "d0106b4d-df3f-48e3-ab54-93afc3ec7854",
        "type": "message",
        "text": "I'd say Scratch feels REPLy since you can click on a stack of blocks to execute them.",
        "user": "UA14TGLTC",
        "ts": "1658826358.192039",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UA14TGLTC",
            "ts": "1658826464.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7Sc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'd say Scratch feels REPLy since you can click on a stack of blocks to execute them."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658752861.226259",
        "parent_user_id": "U03LMRE6MQE"
    },
    {
        "client_msg_id": "3504f2f3-71ae-464c-8029-f8354e0f9d8d",
        "type": "message",
        "text": "Including unused ones in the tray.",
        "user": "UA14TGLTC",
        "ts": "1658826379.254319",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hfqh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Including unused ones in the tray."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658752861.226259",
        "parent_user_id": "U03LMRE6MQE"
    },
    {
        "client_msg_id": "f267ab1e-c997-4c83-8325-6bf39f6a9226",
        "type": "message",
        "text": "<@U01NWARGPNC> what are the downsides of a REPL you are trying to avoid with your approach",
        "user": "U03LMRE6MQE",
        "ts": "1658828263.936069",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "a/Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01NWARGPNC"
                            },
                            {
                                "type": "text",
                                "text": " what are the downsides of a REPL you are trying to avoid with your approach"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658752861.226259",
        "parent_user_id": "U03LMRE6MQE"
    },
    {
        "client_msg_id": "e34810ea-077b-4956-98ae-959cfb81b30e",
        "type": "message",
        "text": "Where did the name splootcode come from",
        "user": "U03LMRE6MQE",
        "ts": "1658828292.525969",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "lKH=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Where did the name splootcode come from"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658752861.226259",
        "parent_user_id": "U03LMRE6MQE"
    },
    {
        "client_msg_id": "7099b36f-868f-440d-9e63-9044ea2a2dbd",
        "type": "message",
        "text": "<@U01NWARGPNC> have joined the waitlist, are there any video etc in the meantime",
        "user": "U03LMRE6MQE",
        "ts": "1658828330.284009",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rCoqS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U01NWARGPNC"
                            },
                            {
                                "type": "text",
                                "text": " have joined the waitlist, are there any video etc in the meantime"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658752861.226259",
        "parent_user_id": "U03LMRE6MQE"
    },
    {
        "client_msg_id": "1d5e6760-b597-4658-8e37-d8ea0d9db2ab",
        "type": "message",
        "text": "The downside of a repl is mostly that you need to type whole statements every time - a typo is mildly irritating to fix in one line of code but if you write a loop or a function, then re-building it is annoying. You can't just go back and edit the code, you might have to hit the up arrow keys many times to find it.\n\nThen once you've iterated on the code you want to write, you need to copy paste it back into your code.\n\nI'm not saying repls are bad - I just want the code editor to have that level of insight into the code all the time without having to switch into a repl at all. :)",
        "user": "U01NWARGPNC",
        "ts": "1658828678.139599",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8a1b",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The downside of a repl is mostly that you need to type whole statements every time - a typo is mildly irritating to fix in one line of code but if you write a loop or a function, then re-building it is annoying. You can't just go back and edit the code, you might have to hit the up arrow keys many times to find it.\n\nThen once you've iterated on the code you want to write, you need to copy paste it back into your code.\n\nI'm not saying repls are bad - I just want the code editor to have that level of insight into the code all the time without having to switch into a repl at all. :)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658752861.226259",
        "parent_user_id": "U03LMRE6MQE"
    },
    {
        "client_msg_id": "eeda42aa-6fc8-4e46-b3ea-b0902943d2ed",
        "type": "message",
        "text": "And as a not-so-proud user of a readline implemented REPL, each line is separately remembered.  So if I make the mistake of trying to enter four lines and line three is incorrect, then the fix is: up arrow, up arrow, up arrow, up arrow, return, up arrow, up arrow, up arrow, up arrow, return, up arrow, up arrow, up arrow, up arrow, fix the mispelling, return, up arrow, up arrow, up arrow, up arrow, return.  Of course this always happens when I'm in the thick of something and not at all interested in improving my tools.",
        "user": "UA14TGLTC",
        "ts": "1658829802.286429",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I8BSg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "And as a not-so-proud user of a readline implemented REPL, each line is separately remembered.  So if I make the mistake of trying to enter four lines and line three is incorrect, then the fix is: up arrow, up arrow, up arrow, up arrow, return, up arrow, up arrow, up arrow, up arrow, return, up arrow, up arrow, up arrow, up arrow, fix the mispelling, return, up arrow, up arrow, up arrow, up arrow, return.  Of course this always happens when I'm in the thick of something and not at all interested in improving my tools."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658752861.226259",
        "parent_user_id": "U03LMRE6MQE"
    },
    {
        "client_msg_id": "33ad83e3-04f8-4353-b5c7-ff6159359a0e",
        "type": "message",
        "text": "Teletype REPLs were fine back when we had teletype hardware. Using one today \u2014 when we can have in-place evaluation in our editors \u2014 is, IMO, completely mad.",
        "user": "U013ZLJARC7",
        "ts": "1658830847.851599",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "78N",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Teletype REPLs were fine back when we had teletype hardware. Using one today \u2014 when we can have in-place evaluation in our editors \u2014 is, IMO, completely mad."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658752861.226259",
        "parent_user_id": "U03LMRE6MQE",
        "reactions": [
            {
                "name": "wolf",
                "users": [
                    "UA14TGLTC"
                ],
                "count": 1
            },
            {
                "name": "100",
                "users": [
                    "UJBAJNFLK"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "28bdff93-8150-4d0b-962c-8e112d075bf8",
        "type": "message",
        "text": "Quicker, easier, more seductive.",
        "user": "UA14TGLTC",
        "ts": "1658831927.592889",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oiXE9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Quicker, easier, more seductive."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658752861.226259",
        "parent_user_id": "U03LMRE6MQE"
    },
    {
        "client_msg_id": "72d32a1c-79fe-4129-aafe-19c1bc9ebe09",
        "type": "message",
        "text": "This video has 4 short demos from such projects: <https://youtu.be/Q61dh87WGrE>\n(Lamdu, Dark, Hazel, Lisperanto)",
        "user": "U79HM6726",
        "ts": "1659007577.549499",
        "team": "T5TCAFTA9",
        "attachments": [
            {
                "from_url": "https://youtu.be/Q61dh87WGrE",
                "thumb_url": "https://i.ytimg.com/vi/Q61dh87WGrE/hqdefault.jpg",
                "thumb_width": 480,
                "thumb_height": 360,
                "video_html": "<iframe width=\"400\" height=\"225\" src=\"https://www.youtube.com/embed/Q61dh87WGrE?feature=oembed&autoplay=1&iv_load_policy=3\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"Projectional Functional Demos\"></iframe>",
                "video_html_width": 400,
                "video_html_height": 225,
                "service_icon": "https://a.slack-edge.com/80588/img/unfurl_icons/youtube.png",
                "id": 1,
                "original_url": "https://youtu.be/Q61dh87WGrE",
                "fallback": "YouTube Video: Projectional Functional Demos",
                "title": "Projectional Functional Demos",
                "title_link": "https://youtu.be/Q61dh87WGrE",
                "author_name": "Yair Chuchem",
                "author_link": "https://www.youtube.com/c/yairchu",
                "service_name": "YouTube",
                "service_url": "https://www.youtube.com/"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F/P",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This video has 4 short demos from such projects: "
                            },
                            {
                                "type": "link",
                                "url": "https://youtu.be/Q61dh87WGrE"
                            },
                            {
                                "type": "text",
                                "text": "\n(Lamdu, Dark, Hazel, Lisperanto)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658752861.226259",
        "parent_user_id": "U03LMRE6MQE"
    },
    {
        "client_msg_id": "22d58780-fc7e-47be-9bcc-2077a4bef57f",
        "type": "message",
        "text": "my project is Lisperanto <https://uprun.github.io/lisperanto/> , but as soon as you create any structural editor  you can keep track of changes in the code and refresh function calls whenever there is a change, propagating it to the root calls for me it is a special Sandbox function",
        "user": "U02JQA5FY5C",
        "ts": "1659037118.420929",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tKU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "my project is Lisperanto "
                            },
                            {
                                "type": "link",
                                "url": "https://uprun.github.io/lisperanto/"
                            },
                            {
                                "type": "text",
                                "text": " , but as soon as you create any structural editor  you can keep track of changes in the code and refresh function calls whenever there is a change, propagating it to the root calls for me it is a special Sandbox function"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1658752861.226259",
        "parent_user_id": "U03LMRE6MQE"
    }
]