[
    {
        "client_msg_id": "e94ba1b0-7142-44c0-83af-15f5bf4621c8",
        "type": "message",
        "text": "<https://kaleguy.github.io/leovue>\n&gt; *Leo*\u00a0is a uniquely powerful and versatile outlining editor. It is open source and runs on Windows/Mac/Linux.\u00a0<http://www.leoeditor.com/|More about Leo.>\n&gt; Leo allows you to create content items and display them in multiple hierarchies.\n&gt; *LeoVue*\u00a0is a web app created with the\u00a0<https://vuejs.org/|Vue.js>\u00a0framework. Use LeoVue to create complex sites from Leo outlines. Add Vue components to content items. Assemble content items into multiple views and pages. Load sites and data into nodes.",
        "user": "UF1ATC4RF",
        "ts": "1582604635.026600",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UF1ATC4RF",
            "ts": "1582604649.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nzEG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "link",
                                "url": "https://kaleguy.github.io/leovue"
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Leo",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u00a0is a uniquely powerful and versatile outlining editor. It is open source and runs on Windows/Mac/Linux.\u00a0"
                            },
                            {
                                "type": "link",
                                "url": "http://www.leoeditor.com/",
                                "text": "More about Leo."
                            },
                            {
                                "type": "text",
                                "text": "\nLeo allows you to create content items and display them in multiple hierarchies.\n"
                            },
                            {
                                "type": "text",
                                "text": "LeoVue",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\u00a0is a web app created with the\u00a0"
                            },
                            {
                                "type": "link",
                                "url": "https://vuejs.org/",
                                "text": "Vue.js"
                            },
                            {
                                "type": "text",
                                "text": "\u00a0framework. Use LeoVue to create complex sites from Leo outlines. Add Vue components to content items. Assemble content items into multiple views and pages. Load sites and data into nodes."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1582604635.026600",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1582663176.032300",
        "reply_users": [
            "UJBAJNFLK"
        ],
        "subscribed": false
    },
    {
        "client_msg_id": "db32d11c-fbea-4423-b610-196e1b619701",
        "type": "message",
        "text": "Have you read the python zen?\n\n```&gt;&gt;&gt; import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!```\n",
        "user": "UBN9AFS0N",
        "ts": "1582620288.027300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wdce",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Have you read the python zen?\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": ">>> import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ],
        "thread_ts": "1582620288.027300",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1582870431.044500",
        "reply_users": [
            "UPVBV34EL",
            "UKDM3GLAJ",
            "UC6997THT"
        ],
        "subscribed": true,
        "last_read": "1582870431.044500"
    },
    {
        "client_msg_id": "59ac5b60-a2ab-456d-8685-5c5de8785c13",
        "type": "message",
        "text": "what's your language/tool zen?",
        "user": "UBN9AFS0N",
        "ts": "1582620294.027500",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "NJvqM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "what's your language/tool zen?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "client_msg_id": "07b581b1-469c-4d67-92dc-6c2e4ba8d482",
        "type": "message",
        "text": "Ruby quote time...\n\nRuby is designed to be human-oriented. It reduces the burden of programming. It tries to push jobs back to machines. You can accomplish more tasks with less work, in smaller yet readable code. (Matz)\n\nRuby is a very free-form community.  Matz is the most benevolent dictator I've had the pleasure to work with, and most of the community are true free-thinking artists.  It's like the hippie commune of the language world.  (Charles Nutter)\n\nRuby seems so self-explanatory to me. It makes it almost boring; you try to focus on Ruby and you wind up talking about some problem domain instead of the language.  (Steve Yegge)",
        "user": "UA14TGLTC",
        "ts": "1582621803.028000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dmEQ0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ruby quote time...\n\nRuby is designed to be human-oriented. It reduces the burden of programming. It tries to push jobs back to machines. You can accomplish more tasks with less work, in smaller yet readable code. (Matz)\n\nRuby is a very free-form community.  Matz is the most benevolent dictator I've had the pleasure to work with, and most of the community are true free-thinking artists.  It's like the hippie commune of the language world.  (Charles Nutter)\n\nRuby seems so self-explanatory to me. It makes it almost boring; you try to focus on Ruby and you wind up talking about some problem domain instead of the language.  (Steve Yegge)"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1582621803.028000",
        "reply_count": 4,
        "reply_users_count": 2,
        "latest_reply": "1582637876.031400",
        "reply_users": [
            "U5STGTB3J",
            "UA14TGLTC"
        ],
        "subscribed": false,
        "reactions": [
            {
                "name": "heart",
                "users": [
                    "USH01JEDQ",
                    "UUH505U23",
                    "UMWF81HTP",
                    "UCXR52MU2"
                ],
                "count": 4
            }
        ]
    },
    {
        "client_msg_id": "9e156c1e-81a2-4db8-bb00-4c9577303617",
        "type": "message",
        "text": "For Haskell, I like <https://www.willamette.edu/~fruehr/haskell/evolution.html> and <https://www.willamette.edu/~fruehr/haskell/seuss.html>.",
        "user": "UA14TGLTC",
        "ts": "1582621858.028400",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "mc0",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For Haskell, I like "
                            },
                            {
                                "type": "link",
                                "url": "https://www.willamette.edu/~fruehr/haskell/evolution.html"
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "link",
                                "url": "https://www.willamette.edu/~fruehr/haskell/seuss.html"
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "UUH505U23"
                ],
                "count": 1
            }
        ]
    },
    {
        "client_msg_id": "07EABD1C-FCB3-4865-94FA-AD5E7B802692",
        "type": "message",
        "text": "I have to admit that in my Ruby days, this was the only language where it happened to me surprisingly often that I would just write a piece of code without looking at the documentation thinking \u201cI have no idea but I feel like this is how that should work\u201d \u2014 and it did.",
        "user": "U5STGTB3J",
        "ts": "1582624095.030600",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8Y+=/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have to admit that in my Ruby days, this was the only language where it happened to me surprisingly often that I would just write a piece of code without looking at the documentation thinking \u201cI have no idea but I feel like this is how that should work\u201d \u2014 and it did."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1582621803.028000",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "d0279644-688b-496f-bbde-bc986746077c",
        "type": "message",
        "text": "Yes, and love it :heart:",
        "user": "UPVBV34EL",
        "ts": "1582624294.030800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "leI",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, and love it "
                            },
                            {
                                "type": "emoji",
                                "name": "heart"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1582620288.027300",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "d9c7f12c-a6d1-4157-aebe-c40c93c2fbb6",
        "type": "message",
        "text": "Ruby is so delightfully unsound: perpetually punting on precision and completeness, favoring a sort of joy and ease.",
        "user": "UA14TGLTC",
        "ts": "1582635748.031000",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "/4u",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Ruby is so delightfully unsound: perpetually punting on precision and completeness, favoring a sort of joy and ease."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1582621803.028000",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "d1579326-0500-4c1e-8745-f822aef461e1",
        "type": "message",
        "text": "For example, here's one that broke me \u2014 just now.  After writing it thousands of times, I cannot type this idiom anymore:\n```hash_mapping_x_to_fx = Hash[xs.map{|x| [x, f(x)]] ```\nFrom now on, I'm going with:\n```hash_mapping_x_to_fx = xs.hap{|x| f(x)}```\nRemember \"Ruby was a Lisp originally, in theory.\"  So the definition, for those unfamiliar, can be simple as:\n```module Enumerable\n  def hap\n    Hash[map{|x| [x, yield(x)]}]\n  end\nend```",
        "user": "UA14TGLTC",
        "ts": "1582637460.031200",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZrI7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For example, here's one that broke me \u2014 just now.  After writing it thousands of times, I cannot type this idiom anymore:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "hash_mapping_x_to_fx = Hash[xs.map{|x| [x, f(x)]] "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "From now on, I'm going with:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "hash_mapping_x_to_fx = xs.hap{|x| f(x)}"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Remember \"Ruby was a Lisp originally, in theory.\"  So the definition, for those unfamiliar, can be simple as:\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "module Enumerable\n  def hap\n    Hash[map{|x| [x, yield(x)]}]\n  end\nend"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1582621803.028000",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "80e7325e-0c19-4722-9047-75281a277788",
        "type": "message",
        "text": "Certainly other languages have similar capabilities especially now that Ruby is getting to be about thirty.",
        "user": "UA14TGLTC",
        "ts": "1582637876.031400",
        "team": "T5TCAFTA9",
        "edited": {
            "user": "UA14TGLTC",
            "ts": "1582637886.000000"
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "rQv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Certainly other languages have similar capabilities especially now that Ruby is getting to be about thirty."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1582621803.028000",
        "parent_user_id": "UA14TGLTC"
    },
    {
        "client_msg_id": "692efdfc-c60f-42b8-875c-7dc0c5c80413",
        "type": "message",
        "text": "&gt; Simple is better than complex.\n&gt; Complex is better than complicated.\nHas had more influence on the way I write code than any other ten words.",
        "user": "UKDM3GLAJ",
        "ts": "1582644280.031800",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V1e",
                "elements": [
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Simple is better than complex.\nComplex is better than complicated."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has had more influence on the way I write code than any other ten words."
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1582620288.027300",
        "parent_user_id": "UBN9AFS0N"
    },
    {
        "client_msg_id": "6a436863-72d1-437e-b134-8b0fc57f9640",
        "type": "message",
        "text": "Interesting, thanks for sharing! I used to use Leo ages ago, but gave up on it at some point because OrgMode in Emacs was more convenient (mainly because I needed Emacs anyway). I was surprised to see that Leo is still alive (it was and still is an essentially one-person project), and even more to see that it is developing a tool ecosystem around it!",
        "user": "UJBAJNFLK",
        "ts": "1582663176.032300",
        "team": "T5TCAFTA9",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2yRZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting, thanks for sharing! I used to use Leo ages ago, but gave up on it at some point because OrgMode in Emacs was more convenient (mainly because I needed Emacs anyway). I was surprised to see that Leo is still alive (it was and still is an essentially one-person project), and even more to see that it is developing a tool ecosystem around it!"
                            }
                        ]
                    }
                ]
            }
        ],
        "thread_ts": "1582604635.026600",
        "parent_user_id": "UF1ATC4RF"
    }
]